[{"title":"送码 | 用 59 分钟，让阅读成为有用功","date":"2022-09-01 09:39:53","description":"《59 分钟就上手简悦 2.0》帮你将简悦看似繁重的功能拆分成多个板块，细致地分析它的具体用法和实际效果，降低上手门槛，让你的简悦也能像一盒炸鸡那样「开盒即食」。<a href=\"https://sspai.com/post/75473\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75473"},{"title":"新玩意 118｜少数派的作者们最近买了啥？","date":"2022-09-01 07:52:41","description":"关于栏目为了满足读者们对于《新玩意》栏目加更的需求，机器人特地邀请了Matrix作者们也来聊聊自己近期购买的新奇产品。喜欢本栏目的话，欢迎充电或评论文章来表达自己的喜爱，你的每一次真心夸赞或建议，都是 ...<a href=\"https://sspai.com/post/75481\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75481"},{"title":"石在盆底埋，花在盆中泣：为什么垫碎石可能对植物有害无益","date":"2022-09-01 07:18:13","description":"排水透气，越排越气？<a href=\"https://sspai.com/post/75472\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75472"},{"title":"战争与产业政策","date":"2022-09-01 04:13:39","description":"\n<p data-pid=\"JV-AZ6I8\">Zoltan Polzsar又一篇极其重要的文章，详细分析了现有世界秩序的崩坏本质以及美国和西方将要采取的应对策略。这是Zoltan Polzsar关于布雷顿森林三体系不断建构的著作的一部分，在华尔街乃至全球金融市场拥有巨大的影响力。</p>\n<p data-pid=\"f4t72Agz\">本文为非授权翻译，读者应以原文为准。</p>\n<hr>\n<p data-pid=\"4TWzspET\">Zoltan Polzsar，瑞信，2022年8月24日</p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-9eb72006369673b568025ad99d748113_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1743\" data-rawheight=\"1738\" class=\"origin_image zh-lightbox-thumb\" width=\"1743\" data-original=\"https://pic4.zhimg.com/v2-9eb72006369673b568025ad99d748113_r.jpg\"></figure><p data-pid=\"X8arAxLI\">战争意味着产业。</p>\n<p data-pid=\"c2cLATFo\">全球化世界中纵横交错的供应链里没法开战。许多的关键的产品，在世界的某一个角落生产和制造出来，只有安全和开放的供应链通道才能确保这些产品从那里的工厂运送出来。这样的全球供应链仅仅在和平时代是有效的。而一旦发生战争和冲突——无论是热战还是“经济战”，这些供应链将立即失效。然而，这个全球化的供应链是我们多年来经历的所谓低通胀高增长世界的基石。这个体系有三大支柱：</p>\n<ol>\n<li data-pid=\"I63sieTP\">大量的廉价移民劳工进入美国压低美国的名义工资，使得美国劳工的工资增长处于停滞状态；</li>\n<li data-pid=\"STL095Th\">在名义工资停滞不前的状态下，中国制造的便宜商品提高了实际工资的购买力；</li>\n<li data-pid=\"e5tefIcn\">廉价的俄罗斯能源为德国乃至更广泛的欧洲的工业体系提供原料，维持了欧洲的竞争力和生活水准。</li>\n</ol>\n<p data-pid=\"h5wHAIx-\">在这个“三位一体”的体系中隐含了两个巨大的地缘战略和地缘经济区块：尼尔.佛格森称前者为“Chimerica”（中美国）。我愿意称后者为“Eurussia”（俄欧陆）。</p>\n<p data-pid=\"t1dTnPIi\">这两个地缘政治/经济区块是“天作之合”：欧盟支付欧元购买廉价的俄罗斯能源，美国支付美元购买廉价的中国商品。俄罗斯和中国“本分的”将他们的贸易盈余再向G7缴纳（购买G7国家的金融资产）。各方在金融和商业上都纠缠不清。就像那些古老的智慧所言，如果所有人都能从贸易中获益，争斗就全无意义。但正如任何婚姻一样，所有人都能获益的安排仅能在和谐稳定的情况下存在，而这种和谐需要建立在“信任”的基础上，偶尔的分歧也仅能在信任的前提下才能和平且妥善的解决。而这种信任一旦失去，那么我们过去所经历的所有繁荣和稳定可能就一同失去了。这正是戴尔.科普兰（Dale Copeland）的著作《经济相互依存与战争》（Economic Interdependence and War）中尝试论证的结论：</p>\n<p data-pid=\"huxQ8sLZ\">通过回顾包括拿破仑战争和克里米亚战争在内的过去200年的历史，该书作者认为“当大国对未来的贸易环境有积极的预期时，他们希望通过保持和平以确保核心经济利益，从而增强己方的长期经济实力。而一旦这些预期变得负面时，这些大国可能会担心失去原料或者市场，从而激励他们引发危机以保护他们的商业利益”。这种“贸易预期理论”对于理解美国与中俄的冲突根源，甚至于理解西方世界所面临的通胀的本质，都十分值得借鉴。</p>\n<p data-pid=\"7vAUI3kB\">简而言之，贸易的稳定作用仅在信任存在时能够生效。对于中美而言，这种信任已经消失了，这个情况同样在俄欧之间发生。取而代之的，是俄罗斯与中国的接近：作为金砖体系中的“王”与“后”，欧亚大陆这个庞大棋盘上的“天作之和”，这个强大的新的联盟正从“中美国”和“俄欧陆”两大体系的分崩离析之中新生。 </p>\n<p data-pid=\"vRO9Ne2b\">信任是如何丧失的？</p>\n<p data-pid=\"lM04bqbq\">一个“通俗易懂”的故事是这样的：中国通过卖便宜货发了大财，然后想在全球范围内建立5G通讯网络，用最先进的光刻机生产最高端的芯片。这时，美国说：“没门！”从此出发，“中美国”陷入信任危机。</p>\n<p data-pid=\"UDNwwzAi\">而一个关于俄欧的简易版故事则是这样的：俄罗斯通过向欧洲出售廉价的天然气发了财，而德国通过向欧洲和世界出售用廉价天然气生产的昂贵商品而变得非常富裕。生意太好，俄罗斯和德国甚至都准备了北溪二号管道的开通仪式庆典。但忽然一天，俄乌冲突爆发，德国认为这种行为超越了德国的底线，庆典被取消，双方不欢而散。 </p>\n<p data-pid=\"D-y5q_I5\">美国的富足来源于量化宽松（印钞）。但量化宽松的基础来自于俄罗斯的廉价能源和中国的廉价商品带来的低通胀。处于全球经济体系食物链顶端的美国当然不希望低通胀时代的结束，这将意味轻松印钞获得财富的模式的结束。但如果中美的合作（中美国）以及俄欧的合作（俄欧陆）分别破产，低通胀将寿终正寝。</p>\n<p data-pid=\"gqeMWDh5\">正在逐步成型的中国和俄罗斯之间的特殊关系是一种强大的联合：这是大宗商品和工业品的联姻，联合了世界上最大的大宗商品生产国（俄罗斯）和世界工厂（中国），同时在地缘上能够覆盖和控制整个欧亚大陆。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-4de7cbb25b5e82f9ee3209f8dfdcaaee_b.jpg\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"534\" class=\"origin_image zh-lightbox-thumb\" width=\"940\" data-original=\"https://pic3.zhimg.com/v2-4de7cbb25b5e82f9ee3209f8dfdcaaee_r.jpg\"><figcaption>大宗商品领域的“G-SIB”，俄罗斯首当其冲</figcaption></figure><p data-pid=\"dpAD-TSP\">中俄特殊关系就像两个分别被背叛的配偶（被赶出中美合作的中国以及被赶出俄欧联合的俄罗斯），为了报复他们的“前任”而组成的一个经济同盟：其中一个长期缺乏原材料，另一个由于经受制裁而缺乏芯片等关键工业品。而之前婚姻里的两个“前任”则聚在一起形成一个新的联盟，但这个联盟不同于前一个联盟中存在的相互依存和互补，在这个联盟里其中的一个（欧洲）极度依赖另外一个（美国）来获得经济安全。</p>\n<p data-pid=\"3ggTp-ll\">战争，就像目前正在展开的经济战争，其关键的争夺在于控制：对技术的控制，大宗商品的控制，生产产能的控制和关键地缘节点的控制——包括台湾海峡，霍尔木兹海峡，博斯普鲁斯海峡这样的咽喉要道。</p>\n<p data-pid=\"jQeAhptH\">战争也关于联盟。在中美俄复杂的冲突博弈的当下，所谓朋友的定义是“敌人的敌人就是朋友”。一些重要的地缘事件揭示了这种联盟的逐步形成：俄罗斯与中国和伊朗在霍尔木兹海峡举行海军演习；伊朗协调俄罗斯与土耳其关于黑海和博斯普鲁斯海峡粮食运输的安排——第一批通过博斯普鲁斯海峡运出的乌克兰粮食抵达的是俄罗斯的保护国叙利亚的港口塔尔图斯；土耳其与俄罗斯同意双方以卢布结算双边贸易，等等。 </p>\n<p data-pid=\"xhwW31tU\">在这个围绕欧亚大陆的复杂地缘战略热点网络之中，对“敌人的朋友”的绞索正在收紧：乌克兰受到攻击，台湾地区遭到为期一周的封锁，韩国在中国的压力下提出“三不”政策——这个政策的本质是逐步结束与美国的一切形式的军事合作。朝鲜半岛的演变十分值得关注：最新的进展表明，北朝鲜正在积极与俄罗斯和中国加深联系，并在朝鲜半岛采取“战争边缘”策略，这使得韩国总统尹熙悦不得不极其谨小慎微，甚至宁愿去剧院看戏也拒绝与到访的美国众议院议长佩洛西会面。我称韩国的这种策略为（韩式）“战略模糊”。</p>\n<p data-pid=\"2jy-PHLx\">过去人们津津乐道的美国的所谓“我们的货币，你们的问题”，在今天正在变成，“我们的大宗商品，你们的问题”，或者“我们后院的芯片，你们的问题”，又或者“我们的海峡，你们的问题”（美国威胁就土耳其与俄罗斯的经济联系对土耳其进行二级制裁应该被理解为北约对于其通过博斯普鲁斯海峡受到土耳其限制的反制）。</p>\n<p data-pid=\"Uh5Zqb26\">后退一步，从更大的地缘角度来看，我们看到在整个欧亚大陆正发生一场激烈的争夺和博弈。所谓“金砖国家联盟”并不是这里的关键，这里的真正玩家是由土耳其（Turkey）,俄罗斯（Russia），伊朗（Iran），中国（China）和北朝鲜（North Korea）相互靠近形成的一个横跨欧亚大陆的联合，我将其称之为<b>“TRICKs”</b>——一个由所有受到美国直接制裁或者制裁威胁的国家组成的联合。这个<b>“被制裁者联盟”</b>正在要求所有美国的朋友做出务实的选择。比如，尽管受到美国的巨大压力，印度仍然大幅增加了他们从俄罗斯进口的能源，并参与俄罗斯的Vostok-2022军演；美国对于中国在台湾海峡进行的军事演习和封锁毫无回应，也将使得韩国重新评估他们的地缘政治现实。正如Pippa Malmgren最近指出的那样：华盛顿开始怀疑韩国的忠诚度，认为韩国可能已经选择了与中国而非美国合作。首尔的所谓“战略模糊”事实上是一种选择，意味着韩国将不作为西方在东北亚的边界与中国进行斗争。如果朝韩实现和解（正如文在寅总统在中国的支持下在过去数年内所尝试实现的那样），美国驻扎在韩国的3万名美军就没有存在的理由，而不得不选择离开。</p>\n<p data-pid=\"TnssCalq\">许多人以为，“保罗皈依”（圣经中使徒保罗在大马士革皈依耶稣的故事）只是圣经故事，而不会发生在地缘政治的现实中。这个信念是完全错误的，持有这样观点的人需要重读历史，或者更简单的，在匈牙利长大。1989年6月16日，我当时11岁，年轻的维克多.欧尔班激烈的要求苏联军队撤出匈牙利。这件事情的发生甚至比该年11月9日的柏林墙倒塌还要早几个月。我们将这一事件与现代全球化的诞生联系起来，与过去30年的“低通胀增长”的经济结构联系起来。</p>\n<p data-pid=\"Ai50l7TA\">韩国的“战略模糊”政策是否会成为韩国外交政策中的“欧尔班时刻”的先兆？韩国和他的人民能够感受到他们的国家所处的极度危险的状态并要求美军撤出朝鲜半岛吗？</p>\n<p data-pid=\"d9T8mfiP\">历史不会重演，但会押韵。当年的那个欧尔班的外交政策跟今天的欧尔班的外交政策完全不能同日而语，同样的，今天的韩国生产的芯片和未来的韩国生产的芯片同样不能等量齐观。因此，对于美国而言，芯片的风险并不仅限于台湾，对于韩国生产的芯片，巨大的风险同样存在。今天正在发生的地缘事件是如此深远和意义重大，使得与这些事件比起来，冷战时期发生过的一些美国参与和支持的地缘战略事件，比如1956年美国支持匈牙利的反苏运动，以及同年发生的苏伊士运河危机美苏支持埃及反对英法和以色列，这些事件与今天和未来将要发生的事件相比，就像是地缘政治里小朋友的游戏。</p>\n<p data-pid=\"3AH_pEj3\">但1956年的经验可以给今天的市场一个有意义的经验：战争的关键组成部分是“战斗”，而即使是最大的强权，也常常会有选择的直接参与某一些“战斗”而避免陷入另一些。在多条战线上同时发生的“战斗”（乌克兰，台湾海峡，韩国）意味着各个战场存在重要性和次序先后的选择。在1956年，石油比匈牙利更重要，因此美国的资源最后投入到了埃及，而匈牙利的反苏运动无疾而终。对我个人而言，直接结果是我在铁幕的东边出生和长大，偷偷看着关于铁幕以西的美好电影想象着不一样的生活。今天，我生活在西方世界的中心纽约曼哈顿，耐心的观察着发生在东方的种种事件，怀疑美国是否还有足够的能力来维持这个现有的世界秩序，或者像在1956年那样在多个战线中做出取舍，选项包括北约在欧洲的边界，芯片的供应，或者对石油的控制。 </p>\n<p data-pid=\"_NNkUazU\">或者更糟糕的结局是，在欧亚大陆的大棋盘上被TRICKs彻底将死？ </p>\n<p data-pid=\"r3VkcEAT\">我无法准确预测事情的发展，没人能够准确预测，五角大楼也不行。这就是为什么我们认为对通胀迅速回落的预期过于天真和乐观。这里的逻辑在于，“美国治下的和平”（PAX AMERICANA）促进了全球化，而全球化确保了（西方世界）的低通胀。因此TRICKs国家不再合作，甚至正想方设法的削弱这个体系的行为意味着通胀是一个巨大的长期风险。</p>\n<p data-pid=\"X_3U_AnA\">要从这个角度理解通胀的逻辑和路径，我们需要阅读更多的历史，回顾那些历史事件，思考信任，贸易以及戴尔.科普兰的贸易预期理论：如果说全球化得由“互信”来推动，这种全球化又推动了“大缓和”（低通胀），那么我们倾向于认为，不信任的产生和增进将导致去全球化，而去全球化最终导致大通胀。</p>\n<p data-pid=\"Vs_9VXxu\">不信任的经济后果是什么？</p>\n<p data-pid=\"0MsbpSID\">今天的文章中，我们将阐述我们对于这个大转型过程（从冷战后的全球化，到新秩序的建立的过程）的展望。我们的观点是，我们需要形成一个大大的“L”型衰退来抑制通胀，我们必须促进一轮负财富效应来压制消费需求，从而使得消费面能够匹配供给面的新的现实。我们认为，（美国的）通胀确实已经放缓了，但仍远远高于目标。中美分离和俄欧分裂将产生巨大的成本，这些成本包括美联储将继续维持鹰派并保持较高利率，因为一旦放松银根导致需求增加，那么受限的供应将立刻重新推高通胀。促进经济从L型衰退到“L/”型重新增长的动力何在？我们无法指望由消费产生这个“/”的上行趋势，因为我们的“前任”，中国和俄罗斯，已经离我们而去，为我们提供的产能将消失，我们将不得不自己生产所有我们需要的东西。这个新的增长动力将来自于投资，对生产和产能的投资，而政府将提供助力。</p>\n<p data-pid=\"3-9YH_JV\">三个“觉醒”时刻 </p>\n<p data-pid=\"4l22lV3H\">首先，乌克兰战线正在表明，在“消耗战”中，弹药库存的消耗速度远大于我们的战争工业的当前产能。这种情况下，我们如何能够在多条战线上进行热战？这里消耗的不是需要高精尖芯片来制造的高科技武器，而是最基础的火炮弹药。金融时报最近的文章分析道，</p>\n<blockquote data-pid=\"gcOmXj7S\">“对于高科技状况和精益生产原则的迷恋完全忽视了维持基础装备（如炮弹）库存的重要性。例如，美国全部的产能开足马力一年能够生产的1.55亿枚各式炮弹，放在乌克兰战场这仅够维持两周的消耗，这标志着“工业战的回归”。文章进一步说到：“…可以大规模使用的廉价弹药是必不可少的。西方需要更加自律，而不是总是追求精致。西方需要理解如何在精致的同时维持枯燥和乏味的战线。”</blockquote>\n<p data-pid=\"d5dD_8tb\">其次，即使是精致的装备也不是很快能够生产出来：</p>\n<blockquote data-pid=\"8m_cM72W\">“5月时，当华盛顿订购1300枚毒刺防空导弹来替代美国发往乌克兰的导弹库存时，雷神公司的首席执行官回应说：‘我们需要一些时间…”。这不仅仅是一个替换装备的问题：为了使得足够的装备能够送入乌克兰，美国不得不大幅推迟发往台湾的订单，而沙特阿拉伯的订单也面临严重推迟。</blockquote>\n<p data-pid=\"w0SwZtoh\">与此同时，在最近的一次财报会议上，ASML的首席执行官Peter Wennick指出：</p>\n<blockquote data-pid=\"XYTI5kiZ\">“上周我会晤了一家大型工业公司的高管。他告诉我，这家企业集团正在购买洗衣机，然后将里面的芯片拆下来用于安装到他们的大型工业模块产品中。”</blockquote>\n<p data-pid=\"XrM0sS-e\">第三，来自中国在台湾周边的军事演训的消息告诉世界，芯片只有在能够运出工厂的时候才是有意义的。一旦封锁卡住物流，这些产品和产能便是完全无效的。当这个新生的多极世界正在破坏全球供应链时，美国如何能够维持其基于低通胀和印钞来维持的经济体系的命运？如何能够获得足够的导弹芯片来捍卫美国的全球利益和世界秩序？</p>\n<p data-pid=\"OHmK_6Cl\">这并不是说东方的对手日子过得很轻松。俄罗斯有他的军事问题，对俄罗斯的制裁限制了他获得高端芯片和西方技术的能力。但我们都知道，“俄罗斯和中国的关系没有上限”，而中国同样制造大量的芯片。这就像软饮料：你可以选择喝可口可乐或者百事可乐，同样，无论俄罗斯使用的时TSMC（台积电）的芯片，还是SMIC（中芯国际）的芯片，俄罗斯的导弹都能够飞出一个完美的弧线。就像能源的管线和流动正在被新的战争和地缘格局所重塑一样，芯片的流动也将被重新调整。流向欧洲的俄罗斯管道天然气正在逐步被美国的液化天然气所取代，而流向俄罗斯的日本韩国和台湾地区的芯片也将被中国大陆生产的芯片所取代。</p>\n<p data-pid=\"0x_3MKRC\">生活还得继续，但尾部风险依然存在。随着TRICKs在欧亚大陆棋盘上采取更多的行动，大部分的尾部风险都指向西方世界，特别是对西方通货膨胀的影响。中国对台湾海峡的强力控制以及韩国的“战略模糊”政策意味着“我们后院的芯片，你们的问题”对于美国和更广泛的西方来说是一个明显、紧迫而且现实的风险。 </p>\n<p data-pid=\"6DzVUSGx\">准确的说，上文讨论的三个“觉醒”时刻，意味着全球供应链，无论是军用产品还是民用产品，都面临着明斯基时刻。在这个概念的原本内涵中，明斯基时刻意味着影子银行体系的内爆，标志着金融危机的开始。今天我们正在目睹全球化世界秩序供应链的内爆，而全球化生产系统缺乏库存和有效的保护。西方企业在自己的国家进行设计和管理，将采购，生产和运输物流外包到国外。这里的所有关键环节，包括大宗商品，工厂和海运船队，都在与西方世界正在发生冲突的中国和俄罗斯的控制和主导之下。</p>\n<p data-pid=\"AJ00Jwcp\">供应链的库存就是银行的流动性。2007-2008年时，大型银行仅准备短期的“即时”流动性：银行的流动性以金融市场所即时提供的资金为主。这使得市场参与者得以随时将各类型的资产出售到深度市场而无需担心折损资产的公允价值。所以银行并不积极在央行准备大量的现金储备，因为这些储备被认为是低效的，不能够为股东创造最大的价值。（而当市场最终失效导致流动性紧缺时，所有人都看见了那些大型金融机构有多么脆弱）。同样的，今天的大型公司和企业也在运营“即时”（just in time）供应链。企业以为他们总是能够在任何时间点通过合理的价格购买到所需要的产品和零部件，而无需担忧溢价。冷冰冰的事实告诉人们这样的假设是不正确的。美国军方必须要“等一会”才能拿到他们预定的导弹系统，而台湾地区和沙特则要等到乌克兰战争彻底结束以后才能拿到他们的订单。进一步的，如果你的洗衣机坏了想要换新的，你可能也得等上一段时间，因为大型国防承包商需要拆洗衣机零件拿来造导弹。</p>\n<p data-pid=\"rfGMr-MB\">我们从“这里”拆解，来制造“那里”的产品。你还记得明斯基三实体么？<b>对冲实体</b>可以从他们的收入中支付他们的款项。<b>投机实体</b>必须借钱才能支付。<b>庞氏实体</b>则只有在出售手中持有的资产后才能进行支付。三者相比，旁氏单位受利率波动的影响最为剧烈。而就像我们在芯片行业所举的例子一样，依据明斯基法则，我们军工系统的供应链充其量算是个“投机单位”，而随着地缘政治紧张和冲突升级，这些供应链甚至很快将要降级成“庞氏”供应链。同样的框架也可以套用在欧洲能源市场：当俄罗斯的天然气供应削减，德国就立即面临收支平衡的困境，政府将不得不要求公民节约能源，以便为工业产出留出能多的消耗空间。</p>\n<p data-pid=\"FhugP9TE\">明斯基时刻是由于过度的金融财务杠杆造成的。套用在供应链的背景下，这里的杠杆则是过度的经营杠杆：再以德国为例，该国2万亿美元的工业增加值依赖于来自俄罗斯的200亿美元的天然气进口——从这个角度来理解，德国对于俄罗斯天然气的杠杆是100倍，远超雷曼兄弟的杠杆率。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-fa6dc146f76066ad66d5a2015b699336_b.jpg\" data-size=\"normal\" data-rawwidth=\"940\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb\" width=\"940\" data-original=\"https://pic3.zhimg.com/v2-fa6dc146f76066ad66d5a2015b699336_r.jpg\"><figcaption>德国生产对应俄罗斯能源的杠杆效应</figcaption></figure><p data-pid=\"3CjXck-m\">运营杠杆的概念同样也适用于军事领域：比如说，在台湾生产的芯片被用于在美国生产的导弹里，那么一旦台湾地区被封锁，这些导弹零件就很可能没法抵达美国的导弹工厂，从这个角度来看，美国根本无法应对在东西两个战线上发生的战争。</p>\n<p data-pid=\"hekWCDBy\">“美国治世”对全球供应链维护的能力就好比银行的资本金。在2008年金融危机中，大型银行缺乏足够的资本金来应对系统性的流动性紧缺而陷于危机之中。由于他们“太大而不能倒”，美国政府不得不采取大规模的救助措施，而这些救助措施的成本就是巴塞尔III。</p>\n<p data-pid=\"1rKsv2__\">今天的投资者倾向于认为“全球化”同样是一个“太大而不能倒”的事物。但“全球化”不是一家可以被资金救助的银行，这个体系需要一个“世界霸权”来维持它的秩序。这个系统的风险在于有人挑战这个世界霸权——比如今天的中国和俄罗斯。为了维护当今的世界秩序以及其相关的贸易安排和全球供应链网络，使得这个体系能够得以维持，这些挑战必须迅速和果断的应对，采取强力的手段将其压制，就如鲍威尔将军（后来的美国国务卿）在沙漠风暴行动时所表现出的那样。但，乌克兰和台湾地区不是当年的科威特，俄罗斯和中国更不是当年的伊拉克可比。壮志凌云2和壮志凌云1是完全不同的两部电影...</p>\n<p data-pid=\"0zGrXjjK\">想象蒂姆.盖特纳（奥巴马时期美国财长）所说的应对金融危机或者攻击美国银行系统的卖空投资者时需要采取的手腕。今天的背景下，俄罗斯和中国基本上就是挑战美国主导的世界秩序的“卖空者”。引用当年盖特纳的话来说，我们需要采取“压倒性的雷霆手段——而不是零敲碎打的，类似于越南战争时期的做法；如果我们采取的这些压倒性的手段没能阻止（对银行的）挤兑，市场就不会对我们的承诺建立信心。所以我们要准备将‘天量的资金投入’，使得我们决心看起来比整个市场的负债总额都要大”。鲍威尔将军在“沙漠风暴”行动中所体现出的实力，财政部长盖特纳在挽救美国银行体系时所展示出的决心，这都不禁让我将这些行动与今日美国商务部长吉娜.雷蒙多所采取的应对全球供应链的挑战所展示出来的姿态进行对比。</p>\n<p data-pid=\"2AGUzOAY\"><b>相比于展现出实力和决心，美国商务部展现出来的却是美国的脆弱。</b>正如雷蒙多部长最近所说，美国“从台湾地区购买了将近70%的先进芯片。其中包括大量的用于军事工业生产的芯片。而标枪导弹系统中就有大约250个这样的芯片。你们想继续从台湾的工厂获得这些关键芯片吗？这样的供应链毫无安全可言。我们需要国会以最快的速度通过芯片法案，让我们能够重新在美国的领土上生产这些芯片。”这些发言意味着雷蒙多部长的保尔森（布什时期财长）时刻：当时他在国会乞求快速通过TARP救助法案来支持美国的银行体系。 </p>\n<p data-pid=\"Ma24Weor\">战争让你开始真正了解自己的能力的边界。你需要了解你生产能力的边界，战斗能力的边界，这也正是1942年西蒙.库兹涅茨被商务部委托制定美国国家数据来评估美国参与二战的真实能力。而今天，没有雷蒙多部长领导的商务部提供的详细数据和情报，国会也不会在如此短的时间内通过价值520亿美元的芯片法案。但艰巨的工作还在后面。建立圆晶工厂需要数年的时间，只有等这些产能良好运转之下我们才能重新得到我们的“半导体主权”。</p>\n<p data-pid=\"SyfsVMy_\"><b>但问题在于，我们现在就立刻需要向“卖空者”展示我们的“压倒性的实力”，今天，马上，现在，而不是什么明天，几个月几年以后，未来。正是当下，一个强大的力量正在台湾海峡展现出“压倒性实力”，而那个展示实力者不是美国。</b></p>\n<p data-pid=\"ZJeYDVB5\">这正是为什么美国正试图通过技术禁运和制裁来“逆转时间”。就像新近的电影《信条》中描述的那样，“倒置时间”可以被用来塑造未来：美国正试图通过一次次的技术制裁来减缓中国的技术进步，从而重塑未来的实力平衡。放慢中国发展的脚步可以赢得一定的时间，时间将被用来建立本土的圆晶工厂，而这些工厂将可以在美国国境之内生产芯片用于捍卫美国霸权体系的导弹。</p>\n<p data-pid=\"LglrT7na\">至今为止，美国对中国科技制裁的名单正变得越来越长。最近的发展包括美国尝试禁止ASML公司向中国出售DUV光刻机，以及其他的芯片制造工艺和软件产品，以遏制中国和中资企业如中芯国际的半导体雄心。进一步的，美国还在考虑限制向中国存储芯片生产商出售芯片制造设备。另外拟议中的新的限制还包括“阻止韩国的三星电子和SK海力士公司向他们在中国的工厂运送新的技术工具，从而阻止这些工厂升级为可服务全球客户的大型工厂。”</p>\n<p data-pid=\"jpA77Ht7\">这些瞄准韩国芯片制造商的新的压力是否会迫使首尔进一步考虑他们的“战略模糊”政策？我无法回答这样的问题。但，请确保您的通胀预测公式有一个额外的虚拟变量。</p>\n<p data-pid=\"CXOOa0Xc\">我能够理解美国为何要采取“逆转时间”的策略。但人们必须明白，我们不能仅仅靠减缓对手的进度来取胜。我们还需要大规模的建设，而这正是为什么我们需要美国的产业政策： </p>\n<p data-pid=\"dtAF6a3m\">作为投资者，你关心中俄对美国霸权的挑战带来的通胀后果。而通胀一旦飙升，政策利率也将随之升高，如果不这么做，就会产生金融抑制的问题。无论如何，如果你的公司专注于债券投资或者固定收益，你都将密切关注这些指标和动向。这个市场将是是所谓“食利者”“安乐死”的市场。为了确保西方赢得这场经济战争，克服所谓“我们的大宗商品，你们的问题”，或者“我们后院的芯片，你们的问题”，或者“我们的海峡，你们的问题”——等等类似的困境，西方需要从“昨天”开始投资数万亿美元用于以下四种类型的项目：</p>\n<ol>\n<li data-pid=\"6QXZ70re\">再武装（来维护现有的秩序）</li>\n<li data-pid=\"mvGZvXIM\">产业回归（来避免被封锁）</li>\n<li data-pid=\"kRDEmPJ6\">建立库存，并投资于大宗商品生产</li>\n<li data-pid=\"jCN5fFug\">重构能源电力网络</li>\n</ol>\n<p data-pid=\"Uj6O3Ohc\">类似于巴塞尔III协议作为08年金融危机的标签，以上列出的四大项目是当前正在展开的全球化危机的标签。清单上的项目是不言自明的，我们在新闻里每天都能读到类似的相关消息，比如：</p>\n<ul>\n<li data-pid=\"IOEvYoPF\">关于再武装，德国计划花费1000亿欧元进行再武装；西方计划投资7500亿美元重建乌克兰；G7的目标是筹资6000亿美元对抗中国的一带一路——欧亚大陆大棋局的一个核心正是关于一带一路和其所包括的项目的竞争。</li>\n<li data-pid=\"zIPoKm27\">关于制造业回流，雷蒙多部长将重点放在军用芯片和520亿美元芯片法案资助的三个新圆晶厂。欧洲也在忙于投资圆晶产能，以期待获得“工业主权”。依靠所谓的“友好国家”的产能同样是不可靠的。因为友好国家的产品同样必须通过海峡运送，而海峡可能被封锁。</li>\n<li data-pid=\"BsAVJknl\">关于再库存，欧盟天然气危机和能源短缺的状况无需赘述。欧盟急需重新建立大宗商品供应以维持工业活力以及冬季供暖。美国一样需要重建战略石油储备，因为我们的SPR将在今年11月前“耗尽”。印度已经指示其所有工业化的省份建立足以满足三年的住宅和工业需求的煤炭库存。欧洲和中国正在遭受历史性的干旱，乌克兰损失了今年的大部分小麦收成。能源和粮食的危机迫在眉睫，全球大宗商品的战略储备量将像1997年亚洲经济危机之后的外汇储备那样一飞冲天，这不仅涉及粮食和能源，也同样涉及一些工业品。</li>\n<li data-pid=\"9nYIdDsl\">关于重建能源和电力网络，即使再俄乌战争爆发之后，美国政府的承诺依然坚定不移。能源转型是战前待办事项清单上唯一的重大项目，并且从一开始就是一项艰巨的挑战。随着战争的开打，这个清单将变得越来越长，挑战也将变得越来越艰巨。</li>\n</ul>\n<p data-pid=\"9hv2fnJo\">我认为，以上的四个主题将是未来五年内的产业政策的明确目标。G7将在这些项目上花掉多少钱是一个悬而未决的问题，但鉴于全球秩序受到的挑战，他们可能会毫不吝啬。如果我们足够幸运，西方的政府真正能够由盖特纳这样的人或者采取盖特纳在应对金融危机时所采取的态度来管理这个“展示实力和决心”的时刻，那么对于投资者而言，相对应的投资策略将会是以下的一份清单：</p>\n<ol>\n<li data-pid=\"axW4PCYb\">大宗商品密集</li>\n<li data-pid=\"5q2BJ4rd\">资本密集</li>\n<li data-pid=\"1aHzzrWX\">利率不敏感</li>\n<li data-pid=\"RV-cn8e-\">东方不可投资 </li>\n</ol>\n<p data-pid=\"O958ayjd\"><b>大宗商品密集</b>将意味着通货膨胀将是一个西方世界执行以上清单时所面对的最为棘手的问题。重新武装，产业回归，再库存和重建能源网络，这些政策都需要消耗大量的商品，不仅用于生产消耗，还需要大量的战略储备和库存。这将会对西方严重投资不足的大宗商品行业造成一种剧烈的需求冲击，这也是过去十年专注于ESG政策的后遗症。投资不足意味着供应短缺，而地缘政治因素将导致资源民族主义，结果是更多的短缺和限制。投资者可以参见俄罗斯关于其资源的最新立场以及墨西哥决定国有化其锂矿的决定。需求将激增，而供应则短缺，结果是价格可能会飙涨。这将很可能推动一个新的大宗商品超级周期，就像我们再2001年中国加入世贸之后所看见过的那样。上一个大宗商品超级周期的发生是在一个和平的单极霸权世界秩序的背景下，世界主要国家对未来的贸易环境都有着积极的预期。而今天的现状则截然不同。</p>\n<p data-pid=\"NAik8u1e\"><b>资本密集</b>则意味着政府和私营部门将不得不长期借款来进行投资。再武装和再库存都是政府政策的领域，产业回流和能源网络建设则可能涉及公私合营。私营公司将不得不通过发行债务和筹集股权来进行建设和生产，从船舶到战斗机，从工厂到大宗商品，乃至太阳能面板和风力涡轮机。</p>\n<p data-pid=\"bAF8dzuu\"><b>利率不敏感</b>意味着无论美联储将利率提高到3.5%还是7%，这个待办事项的清单都必须得到执行，而无论这个过程是多么的痛苦和艰难。因为我们的工业主权有赖于此。而从另一个角度来看，私募股权（PE）行业对利率极其敏感。一旦执行强力的产业政策，这将排挤私募股权。金融市场是一个数十年为一个周期的系统。私募股权经历了“低通胀”周期和全球化周期，并在金融危机之后享受了十年的低利率和印钞的好日子。<b>对于私募股权投资而言，这个繁荣的周期可以宣告结束了。</b></p>\n<p data-pid=\"iyYZwlRM\"><b>东方不可投资</b>，<b>意味着对于某些东方的大国，循环滚动这些国家对G7国家的债券和其他资产的投资是完全不可行的。这不仅仅意味着俄罗斯的外汇储备所遭受的制裁将会警示这些国家的投资者可能的风险，更是因为，滚动数万亿美元的美国国债投资组合意味着你将为作为你的对手的西方世界的重新武装，再库存，产业回归等一系列有损你利益的行为努力提供资金。</b></p>\n<p data-pid=\"RVOC1QzF\">我们现在又回到了我们全文开始的地方：戴尔.科普兰的贸易预期理论正是从这里来理解和思考世界的框架。我们，以及这个世界的运行方式，像过去那样继续运行下去是完全没有意义的，无论是从真实的（贸易/生产）的视角，还是从金融（外汇储备）的视角。这正是布雷顿森林III所注定要发生的原因。</p>\n<p data-pid=\"QUfhvrEX\">这一切都已经在发生了。 </p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/will-shen-78?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">will shen</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/558859527?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"为了让自己早睡一小时，我花六个月做了一个 App","date":"2022-09-01 03:41:49","description":"在我看来，代码的意义有两种，一种是帮助人们探索更多领域的未知，另一种是帮助人们改善他们的生活。<a href=\"https://sspai.com/post/75467\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75467"},{"title":"派早报：LG 发布新款 OLED Flex 电视、游戏领域发生多笔重磅收购等","date":"2022-09-01 00:35:48","description":"罗技推出 G502 X 系列游戏鼠标、希捷推出漫威蜘蛛侠主题移动硬盘等。<a href=\"https://sspai.com/post/75471\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75471"},{"title":"苹果发布会超前瞻：常规新品之外，或许还有惊喜「One More Thing」？ ","date":"2022-08-31 09:47:43","description":"根据最近一段时间国内外的各种爆料，我整理了传闻中发布会上可能会出现的新产品和新特性，带大家一起看看今年可能会有哪些亮点。<a href=\"https://sspai.com/post/75457\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75457"},{"title":"目前磷酸铁锂电池能量密度是否己经到了技术极限？未来还有发展空间吗？","date":"2022-08-31 08:35:04","description":"\n<p data-pid=\"DYp4uFb_\">磷酸铁锂电池材料本身已经被中国人做到极致了，要想有更长远的发展，需通过材料改进、制造过程的优化、电池应用的优化等来提升电池整体的寿命。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhi-hu-qi-che?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">知乎汽车</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/532638462/answer/2654026551?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/497719771?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新型磷酸铁锂电池研制成功，这意味着什么？</a><br><a href=\"http://www.zhihu.com/question/28764678?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">磷酸铁锂到底是啥电池？</a><br>\n","link":"http://www.zhihu.com/question/532638462/answer/2654026551?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"底大一级，词堆一沓：手机相机传感器术语解惑","date":"2022-08-31 08:00:00","description":"相机传感器介绍中每个字都认识但是连在一起就读不懂的名词到底是什么。<a href=\"https://sspai.com/post/75454\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75454"},{"title":"吃代餐，是一种行之有效的减肥手段吗？","date":"2022-08-31 06:34:59","description":"Matrix首页推荐Matrix是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选Matrix最优质的文章，展示来自用户的最真实的体验和观点。文章代表作者个人观点 ...<a href=\"https://sspai.com/post/75414\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75414"},{"title":"新手准备去玩剧本杀，可以给一些建议或科普吗？","date":"2022-08-31 05:49:33","description":"\n<p data-pid=\"HeBNAdhQ\">已经有很多答主进行了非常详细且有趣的建议了，我就不额外添加常规意义上的建议了。这篇回答就给大家科普一下剧本中十分常见的<b>「叙事性诡计」</b>吧</p>\n<p><img src=\"https://picx.zhimg.com/v2-41ef1da1d5de68e6056b50ba05f02148_720w.png?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"142\" data-rawheight=\"160\" data-watermark=\"watermark\" data-original-src=\"v2-41ef1da1d5de68e6056b50ba05f02148\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"cJdLPTbp\">现在的硬核本早已脱离「三刀两毒」的传统套路， 叙诡（叙述性诡计）也屡见不鲜，所以要聊技巧，就先来聊叙诡，把叙诡搞明白了，其实很多硬核本的套路和脉络也就清晰了。</p>\n<p data-pid=\"2N0eGIiP\">顾名思义，叙述性诡计常见于小说、剧本等文字性读物。因为读者只能通过文字获取信息，作者便可以利用玩家的惯性思维，通过文字叙述来误导玩家，在作者需要的时候造成一些巨大的反转。之前和人聊天，听到了一个非常有意思的例子，刚好来分享给大家。</p>\n<p data-pid=\"c_uVY1FE\"><b>什么是叙诡？叙诡就是我说我爱你，但我没说只爱你，也没说最爱你。</b></p>\n<p data-pid=\"HmwRC8eZ\">常见的叙诡有「人物叙诡」、「时间叙诡」、「空间叙诡」、「认知叙诡」、「结构叙诡」等等，下面就一条一条来说吧。</p>\n<h3><b>「人物叙诡」</b></h3>\n<p data-pid=\"YDY6hqPa\">之所以把这个放在第一个，是因为无论在推理小说还是在剧本杀中，「人物叙诡」都最为常见，解释起来也比较简单。</p>\n<p data-pid=\"m-QPgUhv\"><b>「性别叙诡」 </b>作者不写角色性别，读者以为是女性，其实这是一个男性；</p>\n<p data-pid=\"rDqH37fD\"><b>「年龄叙诡」 </b>你以为人是一个年轻人杀的，其实是一个老年人杀的；</p>\n<p data-pid=\"afKDHog8\"><b>「身份叙诡」 </b>文字对一个人的描述相同，你以为你还是你，但实际上，文中的玩家早就已经遭遇不测，现在的文字是凶手或其他人在扮演玩家。</p>\n<p data-pid=\"ADyBThEF\"><b>「人数叙诡</b>」 这种情况一般是剧本中有很多人干了很多件不一样的事，每个事件的经历着对这些人的描述也都不一样，误导读者以为一件事是很多人干的，但其实这些是一个人干的。这种不写参与人数的叙诡反过来也可以成立；</p>\n<p data-pid=\"jfIKYcot\">另外在「身份叙诡」和「人数叙诡」中，有挺多剧本杀会选择双胞胎或者龙凤胎这种比较俗套但十分好用的套路，在玩的时候可以多想一想。</p>\n<h3><b>「时间叙诡」</b></h3>\n<p data-pid=\"hBuPFzcE\">这种叙诡也比较常见，因为在剧本杀中，盘时间线是一个非常简单有效的方法。那么「时间叙诡」在骗玩家方面，是真的非常好用。</p>\n<p data-pid=\"rFdMCtzt\">「时间叙诡」也比较好理解，作者在写故事时，以倒叙、插叙等等叙事手法，将不同时间线中的故事通过人物或环境（地点）串联起来，读者以为这些事情是连起来的，其实故事的发生顺序并非如此甚至完全相反。</p>\n<h3><b>「空间叙诡」</b></h3>\n<p data-pid=\"j10CSmeC\">「空间叙诡」与「时间叙诡」有些相似，就是将两个有相似特点的地点混淆起来，让读者以为事件发生在同一地点。</p>\n<h3><b>「认知叙诡」</b></h3>\n<p data-pid=\"kPs4BYpB\">「认知叙诡」一般是以上几点的结合。作者让故事中的角色认为一件事或一个人是如何的，那么看故事的读者就很可能会被带跑偏。比如经典的色盲问题，角色是红绿色盲，但是角色自己不知道，读者也不知道，于是就出现了误会，故事得以发展。</p>\n<h3><b>「结构叙诡」</b></h3>\n<p data-pid=\"IEhrygs3\">「结构叙诡」一般是指作者混淆故事的结构，通过前几种叙诡相结合，混淆时间顺序、打乱人物视角等等方法来绕晕读者。「结构叙诡」是目前剧本杀作者最喜欢使用的叙诡甚至没有之一。</p>\n<p data-pid=\"2AV-_EQ8\">最后，提醒诸位，现在的硬核由于越来越卷，很多作者会在叙诡的基础上再套上一层叙诡（个人感觉这种「套娃」有为难而难的嫌疑）。大家注意不要生搬硬套上面的例子。</p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zha-yu-gua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">爱吃猹的瓜</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/546843772/answer/2632005910?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">37 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/469636166?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">第一次玩剧本杀的体验如何呢?</a><br><a href=\"http://www.zhihu.com/question/457763097?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">新手想玩剧本杀应该注意什么？</a><br>\n","link":"http://www.zhihu.com/question/546843772/answer/2632005910?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"沉浸式的概念该如何逐渐扩大？密室和剧本杀是否是沉浸式赛道的终极方向？","date":"2022-08-31 05:49:25","description":"\n<p data-pid=\"xSx1GElX\">沉浸式的概念在不断的扩大。而且<b>个人认为沉浸式概念的扩大甚至可以说是某种意义上的必然。</b>当然关于何为沉浸式目前还需要更多的讨论，这一点我会在回答中具体解释。</p>\n<p data-pid=\"WdEHsi70\">而密室和剧本杀目前来看还不能算是沉浸式赛道的终极方向，毕竟由于技术的限制，没准以后真的会出现脑机接口这种东西。</p>\n<p data-pid=\"AGB2oxgu\">首先补充一下 <a class=\"member_mention\" href=\"http://www.zhihu.com/people/9224a3728fcfd3b8ca32127fe60b0bdf\" data-hash=\"9224a3728fcfd3b8ca32127fe60b0bdf\" data-hovercard=\"p$b$9224a3728fcfd3b8ca32127fe60b0bdf\">@七的质数和</a> 的回答，沉浸式的表演形式不止在魔术领域有所体现，在戏剧领域也受到了相当的关注。但我同意这位答主所说的「沉浸式这个概念的终极赛道应当是融合目前的一切艺术之和的结果」。</p>\n<p data-pid=\"kErSn_Pc\">先来给大家科普一下沉浸式的概念，国内剧本杀和密室的「沉浸式」这一概念应该源于<b>浸入式戏剧（Immersive theatre）</b></p>\n<p data-pid=\"_-rbEcKS\">浸入式戏剧是指将传统戏剧表演中的舞台移除，将观众沉浸在表演本身。一般来说，浸入式戏剧允许观众与演员进行交谈并与周围环境互动，以此来达到打破第四堵墙的目的。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-80c47f5d53f6af6ff75da8097619c373_720w.jpg?source=b1748391?rss\" data-rawwidth=\"1436\" data-rawheight=\"1044\" data-size=\"normal\" data-caption=\"图源为Sleep No More（无人入眠），是当今中国最成熟的浸入式戏剧\" data-watermark=\"watermark\" data-original-src=\"v2-80c47f5d53f6af6ff75da8097619c373\" data-watermark-src=\"v2-01d6bf275cc8d29af6b728abb42a5486\" data-private-watermark-src=\"v2-a0ee039f4f4d369976a30e0b514bdccc\"></p>\n<p data-pid=\"Y2PNt9Q_\">而浸入式戏剧非常重要的一个特点就是高度的自由性，浸入式戏剧往往会将观众与演员的隔阂消除并将其至于叙事之中，观众甚至可以随时随地的改变叙事。</p>\n<p data-pid=\"zh1wetsU\">一般而言，浸入式戏剧会有相当大的空间以供演员和观众活动——这种空间可以是开放性结构，也可以是多层的封闭式结构。而观众则可以随意选择自己想如何参与戏剧，也可以随意的从一个房间移动到另一个房间。而这些房间可以是黑暗的、明亮的、温暖的，而这些都为氛围服务。<sup data-draft-node=\"inline\" data-draft-type=\"reference\" data-numero=\"1\" data-text=\"On Immersive Theatre. Theatre Research International, 37(3), 221-235. doi:10.1017/S0307883312000880\" data-url=\"https://www.cambridge.org/core/journals/theatre-research-international/article/abs/on-immersive-theatre/9B7E65D36308389C77542D00E6C8845F\">[1]</sup></p>\n<p data-pid=\"kk_YQmoR\">其实我们可以体会到，目前我们接触到的沉浸式剧本杀以及密室等等，大多是在声光电的技术层面上营造沉浸式的感觉，但或许是由于成本等各方面的条件的限制，在叙事结构上所做的还远远不够。甚至很多剧本杀以及密室店家甚至于设计者（编剧）对沉浸式这个词的理解还停留在「只要让观众有身临其境的感觉就好了」这一层面上。而这正是我们目前需要改进的部分。当然这与沉浸式这个词还比较「新」也有一定关系。</p>\n<p data-pid=\"Yo4Qm5ow\">那么，在扩大沉浸式这一概念的道路上，剧本杀以及密室的从业者们其实可以更多的把目光放在叙事或是故事设计上。从叙事和演出的角度出发来让游戏参与者更具沉浸感。毕竟技术方面的事情咱们也确实没法帮忙。</p>\n<p data-pid=\"NfiPYbzz\">当然，如果真的要从这方面入手让观众更有沉浸感，那么在成本方面可能需要更多的考量了。</p>\n<p data-pid=\"W5PzmPIF\">最后，由衷的希望剧本杀和密室可以在让观众更加沉浸的道路上越走越远，没准这真的是一条康庄大道呢。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zha-yu-gua?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">爱吃猹的瓜</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/548411155/answer/2632062663?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">6 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/397936528?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">怎样去写一个好的真人密室逃脱剧本？</a><br><a href=\"http://www.zhihu.com/question/471758402?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">魔都有什么可以容纳70-80人的沉浸式密室/剧本？（新和医院除外）?</a><br>\n","link":"http://www.zhihu.com/question/548411155/answer/2632062663?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何评价游戏《天使不在的十二月》？","date":"2022-08-31 05:46:01","description":"\n<p data-pid=\"SLXKjqjo\">完成度：汉化版100%</p>\n<p data-pid=\"_Lv0zCQI\">一部在蛋疼的时候所遇到的蛋疼作品，体会倒是绝佳。</p>\n<hr>\n<h2>简评 </h2>\n<h3>画面：A</h3>\n<p data-pid=\"CvNfLWOO\">很难想象这竟然是2003年的作品——画工比我想象的好多了。</p>\n<p data-pid=\"n4wR6tco\">上色很精细，人物设定也较为合胃口，CG之精美让我惊叹，总体画风柔和而饱满，非常让我满意。</p>\n<p data-pid=\"hiBa9eID\">但是有些立绘很崩，所以整体评价未能上升到S。</p>\n<p data-pid=\"XAOaXkhv\">顺，回想画得不错。</p>\n<h3>\n<b>音乐</b>：B+</h3>\n<p data-pid=\"z5cW1db5\">BGM很耐听，非常符合游戏整体颓唐而忧伤的氛围。</p>\n<p data-pid=\"A_Mq5jb1\">雪绪线雪绪在教室里弹奏吉他的那一刻，宛如天籁。</p>\n<p data-pid=\"QMq4XGH2\">（从来没有被吉他所那样着迷过，以前都是更喜欢钢琴的说）</p>\n<p data-pid=\"wTfnqLeF\">顺，游戏中的音乐模式大赞。</p>\n<h3>\n<b>剧情</b>：B+</h3>\n<p data-pid=\"kcnk2CL1\">中二、中二、中二、中二……</p>\n<p data-pid=\"c77OpnrR\">一群中二子让人颓废的中二故事？！</p>\n<p data-pid=\"GMoLj_Cx\">题材很特别，视角也较新颖，主角的代入感还不错（？）。</p>\n<p data-pid=\"fkoXqjfY\">人物性格很突出，剧情也算较为引人入胜，当然没有代入感的同学会觉得极为可笑而扭曲。</p>\n<p data-pid=\"i5Q9W-Du\">当然，编剧自己恐怕也难以把握住剧情的方向，总觉得有点心有余而力不足，想有所突破，到最后却又不得不妥协。</p>\n<p data-pid=\"lHvTj2Az\">总体说来，值得一玩，当然没有对男主代入感的话是很难玩下去。</p>\n<h3>\n<b>感受</b>：S</h3>\n<p data-pid=\"829_onMX\">在一个颓唐的时刻找到了一部颓唐的作品，于是代入感满塞。</p>\n<p data-pid=\"c7EdV73y\">继MO2之后，又一部能够让自己不时泪流满面的作品。</p>\n<p data-pid=\"_30K-cog\">当时的我对男主的中二竟然无比理解（！？）</p>\n<p data-pid=\"y0suJBun\">总之，非常值得一推的所谓灰暗系作品，当然过了颓废期的同学请自重，还比较春秋的童鞋更要自重。</p>\n<h3>\n<b>最佳角色</b>：透子</h3>\n<p data-pid=\"p_eIMMK3\">呃，可能是主角光环在作怪吧，也可能是对于透子的同情始终是游戏中难以摆脱的阴影吧。</p>\n<p data-pid=\"U4nOIG4q\">虽然自己很不喜欢她，但是真的很同情她。</p>\n<h3>\n<b>最喜角色</b>：雪绪</h3>\n<p data-pid=\"swg1Q9p0\">雪绪线是最为都合的。</p>\n<p data-pid=\"LfHtz2Z4\">但是就人物本身，自己对她却非常之有爱。</p>\n<hr>\n<h2>杂谈</h2>\n<h3><b>透子：救赎与被救赎</b></h3>\n<p><img src=\"https://pic1.zhimg.com/v2-6f0534eb23667f8f03ffbba674f8ec3d_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"728\" data-rawheight=\"546\" data-watermark=\"watermark\" data-original-src=\"v2-6f0534eb23667f8f03ffbba674f8ec3d\" data-watermark-src=\"v2-a3f611fd21b313da274ef6191b124cbe\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"mitQ8q-N\">拿什么拯救你，透子？</p>\n<p data-pid=\"W4Ed3fIa\">无疑，透子是整个游戏看上去受伤害最深的——然而也许也只是看上去吧（叹气.......</p>\n<p data-pid=\"BY0obh9J\">从小被认为是笨蛋的她，从小被边缘化的她，从小就难以找到自我的她，遇上同样找不到自我的存在的时纪，到底是幸还是不幸？</p>\n<p data-pid=\"d8Yc9Kvr\">尽管那样的邂逅是所有悲剧的开端，但是也许对于透子而言，也可能是幸福唯一的可能性吧。</p>\n<p data-pid=\"uFEcbchn\">透子将时纪作为肉体与精神上的双重依赖，而对于时纪而言，透子也是逃避现实寻找安慰的归宿。</p>\n<p data-pid=\"u2iIiU2E\">到底是透子在救赎时纪，还是时纪在救赎透子？</p>\n<p data-pid=\"iioqTVmK\">如此的问题就像时纪在天台上抽烟时的烟圈一样虚无。</p>\n<p data-pid=\"71-z6yvE\">两个内心空虚的人相互依赖，却又相互隔阂，就算在一次次看似荒唐的结合之中两人都找到了感情的种子，没有旁人的指引，同样笨拙的两人却也无法将自己真正的心意传到对方的心里。</p>\n<p data-pid=\"CsDJ8YuZ\">幸好，故事最终还是提供了那种通往幸福的可能性。</p>\n<p data-pid=\"0YL2ZEfe\">那个飘雪的平安夜，终于坦开心扉的两人紧紧地拥抱在了一起。</p>\n<p data-pid=\"Qb60C_QE\">“像这样穿着衣服接吻还是第一次”，虽然看上去让人无奈，却也让人由衷地感到某种安慰吧……</p>\n<h3><b>忍：罪与罚</b></h3>\n<p><img src=\"https://picx.zhimg.com/v2-65088b9680caa78b1e1e85593fee4a7d_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-65088b9680caa78b1e1e85593fee4a7d\" data-watermark-src=\"v2-e8a937743ae0903bfa5145c1f9e5bbb3\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"vgPG0njn\">忍对于透子的感情是一场悲剧。</p>\n<p data-pid=\"BdHXq_lm\">那种单纯而偏执的“母姓”让忍变得固执而又虚弱，因而当自己的本能反叛自己的“母性”，内心的偏执便成为她头顶的荆棘之冠，让她背负沉重的罪与罚。</p>\n<p data-pid=\"1cc4VIO2\">自我放逐又自我惩罚，忍的双面性让我触目惊心。</p>\n<p data-pid=\"LNYwTZby\">时纪目睹了忍沉沦又自戕的全部过程，甚至他自己也变成忍沉沦又自戕的工具。</p>\n<p data-pid=\"_lHxqKul\">如果只是一个将自己内心全部放逐的人，无论是时纪，还是忍，其结果都是让人绝望的。</p>\n<p data-pid=\"Hr8QWoj8\">时纪可以安然地充当那样的角色，忍也可以在自我惩罚的幻觉中继续存活下去，然而谁又能真正做到完全的冷酷呢？</p>\n<p data-pid=\"kxd792sO\">当忍放弃了对透子的全部感情的时候，时纪在忍的心中的地位也渐渐暧昧起来。</p>\n<p data-pid=\"C7ilrlL7\">而时纪呢？目睹了忍的沉沦而又自戕之后，在背负不一样的罪与罚的同时却也萌生挽救忍的情意。</p>\n<p data-pid=\"KRXl2I9m\">然而即便这样，相拥取暖的人们，却难以传递彼此的心意。</p>\n<p data-pid=\"C_A1oA5H\">只不过，当两人一同倒在雪地里用彼此的手指相触之时，也许未来也不至于那般绝望吧，甚至能够依稀看到所谓的希望吧……</p>\n<h3><b>雪绪：生与死</b></h3>\n<p><img src=\"https://pic2.zhimg.com/v2-7571859f20c42b53290af9ceb5950424_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"600\" data-watermark=\"watermark\" data-original-src=\"v2-7571859f20c42b53290af9ceb5950424\" data-watermark-src=\"v2-26dcbc2a9a190ad21e3da8a0aaa24c6c\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"peUTkwsM\">好吧，我承认雪绪线的剧情有点都合，甚至有点神棍了。</p>\n<p data-pid=\"65HuD6tr\">只不过是因为自己心爱的宠物之死，雪绪竟然会上升到对于死亡的极度恐惧，进而失去对于生命自身的激情。越是付出了感情，就越是难以割舍，进而对于离别越是感到恐慌。</p>\n<p data-pid=\"GV-uaGSi\">无法直面生命中必然的离别，只想把自己的感情全部地封存起来，进而也对于生命自身失去了所有的念想，所以对于死亡极为恐惧的雪绪反而会更倾向于放弃自己的生命。</p>\n<p data-pid=\"czUFUpOg\">这个悖论真是让人觉得简直难以理解，然而雪绪却一直那般相信着。</p>\n<p data-pid=\"dfM9aZfw\">封锁了所有的情感，雪绪宛如一个没有内心的人形，。</p>\n<p data-pid=\"wcGutISz\">然而她想放弃生命却往往又在最后一刻被对死亡的恐惧重新拉回来。</p>\n<p data-pid=\"br6d6smo\">在生与死之间的挣扎，让雪绪看上去如行尸走肉，但是却还是留有最后一丝的暖意。</p>\n<p data-pid=\"sx5jHyEY\">没有人知道雪绪内心真正的想法，却被时纪意外地发现。然后又是“give and take”，然后又是时纪内心的善让他还是想去拯救。结果在遭遇太多的漠视和戕害之后，时纪自己也觉得已经没有什么可以留恋的（当然时纪自己也很有问题）。到最后，他也只是想成全雪绪，同时也想解脱自己，也是便有了两人相依一起跳楼的一幕。</p>\n<p data-pid=\"eyQDy9BO\">如果真的就这样结束，我也可以安然地接受，哪怕这成了GE。对于时纪而言，他没有什么悔意，对于雪绪而言也应该没有才对。然而雪绪的心中发生一些微妙的变化，包括跳楼前出人意料的主动行为。</p>\n<p data-pid=\"EX1Llh4Z\">雪绪之所以一直没有成功自杀，只不过是因为勇气的缺乏。然而这次却不是这样，是她内心突然有了犹豫，有了眷恋，是那一瞬间的犹豫让两人在寻死的过程中重新找到了生存的意义。</p>\n<p data-pid=\"eQdvk-w7\">“既然无法死去，那就只好继续生存下去”。</p>\n<p data-pid=\"Bzd9jdWd\">已经经过一个生与死之间的徘徊，曾经迷茫的两人都失去“死”这个选项，只能选择“生”。</p>\n<p data-pid=\"z-DUXsdP\">在那飘雪的平安夜，尽管两人的生死对于整个世界而言，甚至对于他们本人都是没有意义的，但是现在“不活下去不行啊”。</p>\n<h3><b>明日菜：光与暗</b></h3>\n<p><img src=\"https://pica.zhimg.com/v2-d7eb21b47bb964bafbaf9337545a769b_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"watermark\" data-original-src=\"v2-d7eb21b47bb964bafbaf9337545a769b\" data-watermark-src=\"v2-e29c18a8bbdb413f90f524a67de50578\" data-private-watermark-src=\"\"></p>\n<p data-pid=\"qPvhvDH7\">如果不进明日菜篇，你也许永远不会知道如此温和如冬日阳光的大姐姐也有着那么黑暗的过去和不单纯的内心。</p>\n<p data-pid=\"CK1EUxRY\">无论是在哪个篇章中，明日菜都是作为时纪相当可靠的“姐姐”那样的角色出现的，对于时纪那样看似轻狂实则单纯的男生而言，其实是蛮有杀伤力的。</p>\n<p data-pid=\"bzJhtxcw\">如果没有记错的话，游戏中最容易为进入的也是和明日菜在一起的普通结局。</p>\n<p data-pid=\"bV60c8mP\">然而，那种莫名的关怀和呵护并非毫无缘由。</p>\n<p data-pid=\"S1QyABQK\">实际上，明日菜自身沉迷于这种关怀与呵护所带来的自我安慰与满足中。</p>\n<p data-pid=\"QfP64RW9\">她的起点并非真正关心的是时纪，只不过是将时纪拥入到自己的怀抱中成就她偏执的支配欲而已。</p>\n<p data-pid=\"Cj1ESDZp\">当明日菜背后黑暗的阴影在时纪面前揭开的那一刻，对于时纪的巨大伤害是可以预期的。</p>\n<p data-pid=\"4QGTWiyw\">而解下假面的明日菜也更让人觉得可怕又可怜。</p>\n<p data-pid=\"XSNKNkZG\">然而此刻，时纪就那样落荒而逃的话，无论是对于时纪也好，明日菜也好，都是最坏的结局。</p>\n<p data-pid=\"8xnMbawM\">时纪自己内外表的冰开始自我消融，并开始积极地付出，用自己的内心重新温暖另一颗冰封许久的心灵。</p>\n<p data-pid=\"Y5mDb0E1\">对于时纪也好，明日菜也好，幸福都曾经是多么遥远的事情。</p>\n<p data-pid=\"YhPZzYtr\">然而经历了太多的挣扎之后，只需两人并排地走在飘雪的街上，小小的幸福就会油然而生。</p>\n<p data-pid=\"wmNK6Iod\">不必再去细想此刻是否还存在是真实，不必再去细想还有多少的不幸回忆，哪怕此刻是那般的虚弱，那般的不真实，但是那一刻的确有种真实的幸福存在着。</p>\n<h3><b>真帆：友情与爱情</b></h3>\n<p><img src=\"https://picx.zhimg.com/v2-1efcdd6b0fb850ef6f6312741c46a166_720w.jpeg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1024\" data-rawheight=\"768\" data-watermark=\"watermark\" data-original-src=\"v2-1efcdd6b0fb850ef6f6312741c46a166\" data-watermark-src=\"v2-c5d54162abbaa86d82c6bfc59aba77b6\" data-private-watermark-src=\"\" data-tags=\"porn\"></p>\n<p data-pid=\"3fiyXvde\">其实我是多么地不希望看到这条线的存在。</p>\n<p data-pid=\"KyXYukFr\">真帆与功的爱情出现了悲剧，因为相互间的种种误解。</p>\n<p data-pid=\"TfS37D6e\">而透子与时纪的爱情也因为同样的原因尚未开始就结束了。</p>\n<p data-pid=\"F5RUwBcy\">不懂如何回应功的心意的真帆，与不懂表达自己心意的时纪，这两人因为相似的困惑走到了一起，宛如真正的兄妹一般相互鼓励着也相互支持着。</p>\n<p data-pid=\"lN4YjQwQ\">如果只是如此，可能也会皆大欢喜吧。时纪那糟糕的性格也会渐渐好转吧。</p>\n<p data-pid=\"oej8Lw_d\">然而男生与女生之间简单的友情就那么难以生存吗？？？</p>\n<p data-pid=\"9u9uR0uZ\">真帆为功所误解，时纪为透子所误解，两人想要追求一份真正的感情却反而被拒绝。真帆被逼到极限的狂气，甚至比忍的那种狂气更让人觉得心痛。</p>\n<p data-pid=\"F_7blR3y\">果然，人与人之间实在就是那冬天的刺猬，想相拥取暖却又被彼此伤害？</p>\n<p data-pid=\"v43txpyV\">飘雪的平安夜，真帆和功平静地分手。</p>\n<p data-pid=\"kp3cx6OE\">他们都在最后一刻说出了他们内心珍藏许久的心情，然而还能够挽回吗？</p>\n<p data-pid=\"z2gchCxA\">坏掉的心，坏掉的感情，坏掉的回忆，又要怎样去挽回？</p>\n<p data-pid=\"Qb_gyY99\">而且同样作为当事人的时纪的心里又何尝不是充满无奈和感伤？</p>\n<p data-pid=\"eS6Na_en\">作为功与真帆的朋友，却不得不充当那么可笑的角色。</p>\n<p data-pid=\"t_sEPIs-\">真帆到最后也只是把时纪作为可以依赖可以撒娇的“哥哥”而已，而对于时纪而言真帆也不过是“第二位”的存在。在飘雪的平安夜里，真帆尽情在在时纪怀里哭泣着，而时纪却没有拥抱她的资格。</p>\n<p data-pid=\"l6_eNJKE\">交叉的感情在此刻显得那般的苍白而脆弱，只剩下受伤的人站在那里消受同样的悲伤。</p>\n<h3>小结</h3>\n<p data-pid=\"BfpWktY9\">不管怎样，这是一部每个结局都足以让我唏嘘甚至落泪的作品。</p>\n<p data-pid=\"7OnS6dTP\">也许，在剧本的控制上、情节的安排上甚至人物的刻画上都还有这样那样的缺憾，但是我却依旧很喜欢，喜欢那所有的白色平安夜，幸福的，悲伤的，绝望的，希望的，遗憾的，慰藉的.........</p>\n<blockquote data-pid=\"mk0A94lU\">\n<b>那不是真实，</b><br><b>也不是永恒，</b><br><b>只不过一份存在那里的感情。</b>\n</blockquote>\n<p data-pid=\"3Upu_9ft\">仅此而已。</p>\n<hr>\n<h2>说明</h2>\n<p data-pid=\"ijlZM1e0\">本文最早成文于2009年，一开始是按绯月（KF）的游戏推荐文格式写的，首发应该是在绯月（KF）。</p>\n<p data-pid=\"ScgtDYlF\">根据现在的格式对于评分重新调整了一下。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/wakesnow?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">wakesnow</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/370015580/answer/2653545110?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">4 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/380157150?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">游戏《天使不在的十二月》中哪一关难哭你了？</a><br><a href=\"http://www.zhihu.com/question/380423277?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你在游戏《天使不在的十二月》中有哪些有意思的经历？</a><br>\n","link":"http://www.zhihu.com/question/370015580/answer/2653545110?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"如何看待网传巴菲特疑似减仓比亚迪股份，比亚迪现阶段股价是否高估？","date":"2022-08-31 05:41:51","description":"\n<p data-pid=\"9JIlhH_Z\">关注这件事之前，必须要先了解一个基本知识点：<b>CCASS 到底是个啥？</b></p>\n<p data-pid=\"YRrwvC_E\">大家港股交易的结算最终是经过每个人证券账户所用的券商，通过香港的中央结算及交收系统 (CCASS) 系统来实现的。</p>\n<p data-pid=\"Wc0JDVGt\">但这个结算系统除了会有券商的户头之外，还会有一些个人投资者直接通过 CCASS 来持股。通过 CCASS 系统， 我们可以看到：</p>\n<p data-pid=\"w1XVUbJL\">（1）代客持股的中介机构持股数量与变动情况；</p>\n<p data-pid=\"XTWa9C6O\">（2）个人投资者没有通过券商与经纪公司，而是直接通过 CCASS 的持股数（有买卖会有额外费用），但这些个人投资者是否愿意披露自己的户名，取决于自己的意愿；所以，大家买卖股份，只是在 CCASS 系统内不同户头之间转手。</p>\n<p data-pid=\"-B5FaCSH\">除了这两个之外，在 CCASS 系统之外还有：</p>\n<p data-pid=\"uN4uxgZ-\">（3）一些股东因为不交易，还有一些美股转股的转债，都不会在系统中体现。</p>\n<p data-pid=\"Cxf30K86\">另外，由于 CCASS 是 T+2 交易，因此 CCASS 当日的交易记录显示的其实是两日前的交易状况。CCASS 系统的仓位变动除了常规买卖之外，偶尔也会是转仓、提仓、拆股、合股、配股等等。</p>\n<p data-pid=\"5H7UXOJt\">我们以 CCASS 系统 7 月 7 日（实际对应 7 月 5 日的交易记录）<a href=\"http://link.zhihu.com/?target=https%3A//longbridgeapp.com/quote/002594.SZ\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">$比亚迪.SZ</a> <a href=\"http://link.zhihu.com/?target=https%3A//longbridgeapp.com/quote/01211.HK\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">$比亚迪股份.HK</a> 在港股的结构为例：</p>\n<p data-pid=\"aU4z70JA\">（1）比亚迪港股股本一共有 10.98 亿股，其中 CCASS 具名户头的持股数量是 8.7 亿；</p>\n<p data-pid=\"SU0UgTBR\">（2）CCASS 系统内，不具名的只有 39 万。</p>\n<p data-pid=\"2m8P4h9D\">（3）在 CCASS 系统之外，还有股东以未注册在 CCASS 系统内的实物股票形式持有大概 2.26 亿港股。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-34eb8ead27df79b22e160cac686f275c_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1270\" data-rawheight=\"534\" data-watermark=\"watermark\" data-original-src=\"v2-34eb8ead27df79b22e160cac686f275c\" data-watermark-src=\"v2-c1eeeb7a3c51b85947cc5dca7342900a\" data-private-watermark-src=\"v2-372a2693a02d8f381a447cf0a49eaa41\"></p>\n<p data-pid=\"8Cm5bS0A\">显然，这种不进 CCASS 系统的股东大概率是长期股东，根本不交易，因为按照港交所的规则，持股人买卖的时候仍然需要通过券商等中介来操作。</p>\n<p data-pid=\"TUq54fAZ\">而只有这样，港交所才能监控持股到一定量的股东在调仓时是否按要求进行了信披，如港交所要求持股超过 5% 以上股东，每累计变动 1% 就要披露）。</p>\n<p data-pid=\"6vV3ieRn\">这相当于，没有在 CCASS 系统内注册的股东，等快到交易的时候，无论是转仓，还是买卖，都要先进入 CCASS 系统内把股份注册了。</p>\n<h2><b>为什么说这次花旗持股变动一定就是巴菲特的？</b></h2>\n<p data-pid=\"ARe-nu6M\">（1）根据跟踪 CCASS 变动的<a href=\"http://link.zhihu.com/?target=https%3A//longbridgeapp.com/news/webb-site.com/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\">网站</a>信息，7 月 7 日比亚迪的 11 亿的港股当中，还有大约 20.5% 的股份 (2.256 亿股）是在 CCASS 系统外的。</p>\n<p data-pid=\"oa6XCFGI\">（2）到了 7 月 11 日，这些股份已经全部进入了 CCASS 系统，刚好对应花旗户头上多增的 2.25 亿股。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-a55f43c1ee92a477587c54e0126d1867_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1291\" data-rawheight=\"634\" data-watermark=\"watermark\" data-original-src=\"v2-a55f43c1ee92a477587c54e0126d1867\" data-watermark-src=\"v2-6ba478b7bf0d437efcf8aa185853a89b\" data-private-watermark-src=\"v2-344d4cda4c15eaee261bcdc1ea85f45e\"></p>\n<p data-pid=\"0B-dCohU\">（3）同时，根据长桥 APP 上比亚迪股东的持股信息，巴菲特的伯克希尔哈撒韦持有比亚迪 7.74% 的股份，按照比亚迪港、A 总股本 29.11 亿来算，伯克希尔哈撒韦持有的股份就是 2.25 亿股。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-98d69ec0fdeef24c7aaef7fcc3614443_720w.jpg?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"1500\" data-watermark=\"watermark\" data-original-src=\"v2-98d69ec0fdeef24c7aaef7fcc3614443\" data-watermark-src=\"v2-87c98b07eb7faf2c5a530a6093933a89\" data-private-watermark-src=\"v2-d6d4e4c4e828e7e94ceedd2ada31109f\" data-qrcode-action=\"none\" data-qrcode-value=\"https://activity.lbkrs.com/m/download?invite-code=032064\" data-tags=\"qrcode\"></p>\n<p data-pid=\"9bMJtAub\">（4）另外根据比亚迪财报，巴菲特的伯克希尔能源公司 100% 控股的 WESTERN CAPITAL GROUP LLC（西部资本集团有限公司），为比亚迪第四大股东，持股数为 225,000,000，持股比例为 7.73%。</p>\n<p data-pid=\"nrXlHLmK\"><b>而把（1）-（4）拼在一起，一个很明显的结论是，伯克希尔哈撒韦把原本自己在 CCASS 系统外的股份开始注册进入了 CCASS 系统。</b></p>\n<p data-pid=\"8b9h3fHq\">当然眼下伯克希尔哈撒韦还没有变化，这也对应着比亚迪今天回应大股东减持传闻时所说的：“根据香港联交所及证监会相关规则，大股东减持需进行权益申报，查阅香港联交所权益披露平台，未显示减持信息，以股东权益申报为准。”</p>\n<p data-pid=\"n8BZos5u\">目前，伯克希尔哈撒韦确实还没有减持，它只是把 NON-CCASS 的股份转入了 CCASS 而已，类似跑步启动前先进入预备姿势。但转入 CCASS 系统之后，下一步是什么？是减持、是转仓？</p>\n<p data-pid=\"IlDXXxaL\">考虑到之前美团被联合创始人减持，也是先进入 CCASS 系统然后再卖，再到最近的商汤科技，解禁之后大股东减持也是股份在解禁之前事先从 Non-CCASS 进入 CCASS 系统，为减持做准备的。</p>\n<p data-pid=\"itTao-u6\">这个大股东减持风险，对于比亚迪的小股东而言，不得不防。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/chang-qiao-longbridge?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">长桥海豚投研</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/542864026/answer/2570837204?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">26 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/542983140?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">比亚迪股份盘中一度大跌 13%，传巴菲特要减持，会带来哪些影响？</a><br><a href=\"http://www.zhihu.com/question/551120734?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">巴菲特减持比亚迪股份，这对比亚迪有哪些影响？</a><br>\n","link":"http://www.zhihu.com/question/542864026/answer/2570837204?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"任天堂的成功之道在哪一些地方？","date":"2022-08-31 05:14:28","description":"\n<p data-pid=\"_2QR1C-Y\">任天堂的成功固然离不开经得起考验的产品，这些产品包括历代游戏主机硬件，也包括各种游戏软件，不过只凭这些其实还不足以让任天堂在电子游戏领域摸爬滚打这么久，让老任最初支棱起来的还有它的商业策略，而这个商业策略来自于它的社长山内溥老爷子。</p>\n<p data-pid=\"dxHaoobs\">山内老爷子的身世什么的就不多说了，毕竟分析任天堂的成功之道这个题目本身已经很大了，我觉得我写这个答案已经超过了自己的能力很多，而且就算我勉强完成了这个答案，它也可能很长很长，所以这里我尽量不写那些不相关的内容。</p>\n<p data-pid=\"IAZiN-iN\"><b>任天堂不是一家一开始就做游戏机的公司，但从没开始做游戏机到涉足游戏机领域，任天堂或者说山内老爷子都有非常独到的商业眼光。</b></p>\n<p data-pid=\"9ZyoadjD\">稍微查一下任天堂的公司历史就知道，任天堂最开始根本不是做游戏机的，它做纸牌，后来还涉足过很多领域，鉴于篇幅这里都略过不讲。</p>\n<p data-pid=\"vwcF2yC4\">任天堂最初与游戏机的亲密接触不是GAME &amp; WATCH，也不是FC，而是COLOR TV GAME这个游戏机。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-95f9f77dfc2077999f59d985b763f3b7_720w.webp?source=b1748391?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"305\" data-watermark=\"watermark\" data-original-src=\"v2-95f9f77dfc2077999f59d985b763f3b7\" data-watermark-src=\"v2-a7be303f1fa9f42658645f7e3b167017\" data-private-watermark-src=\"v2-09851efa7c83c04d4553134c79487e69\"></p>\n<p data-pid=\"NSbq-Kdq\">这个主机上市于1977年，与今天我们认识的家用主机有很多差别，它需要接在电视上，里面的游戏是固定的，无法通过更换卡带来换游戏。当年市面上类似的游戏机还有好几个，并不算是一个特别新鲜的产品。</p>\n<p data-pid=\"IyewA9Vo\">山内的商业眼光在这个主机开发阶段就已经显示出来，任天堂是中途加入这个主机开发的，之前与三菱公司合作开发的公司退出，后面任天堂接手，在初期对接时期山内就发现，市面上类似的游戏机定价都在20000到30000日元这个区间，所以山内认为这个主机想在一堆竞品里脱颖而出，要做的最重要的事就是控制成本，他认为这个主机成本应该在10000日元以内——三菱一听就疯了，这太扯了，做不到。</p>\n<p data-pid=\"3Xq7kaIA\">想把这个玩意成本压到10000日元以内太难，压进10000日元还要赚钱更难。不过接下来山内还有骚操作，1977年，这个主机上市，出了两个型号，COLOUR TV GAME 6和COLOUR TV GAME 15。COLOUR TV GAME全系列经过百般努力总算是把成本勉强压再了10000日元这条及格线上，那现在游戏机发售了，市面上一堆竞品，虽然都比你的贵，但你要怎么做到比他们卖的多还能赚钱呢？山内的骚操作就是，不管是COLOUR TV GAME 6还是COLOUR TV GAME 15，这俩型号的硬件配置其实一模一样，是的，你没看错，一模一样，除了前者少了9个游戏选择键。除了6比15少了9个游戏选择键以外，其实两个主机都内置了15个游戏，成本几乎没有差别（毕竟9个按钮才几个成本钱），然后，COLOUR TV GAME 6卖9800日元，每卖一台亏200日元，COLOUR TV GAME 15卖15000日元，每卖一台赚5000日元。</p>\n<p data-pid=\"Vr89LNh-\">看看当时的市场，所有竞品都卖20000多日元，COLOUR TV GAME系列9800日元起，一炮而红，市场炸裂。打个不太恰当的比方，好比现在智能手机，全顶配市面上所有品牌顶配旗舰都差不多4000起，有一家公司宣布我的顶配旗舰卖1800起，你说市场什么反应，买爆。（这只是个比方，而且没有类比硬件配置一样的方面，莫杠）</p>\n<p data-pid=\"OTHEaZWP\">COLOUR TV GAME6赔本赚吆喝，COLOUR TV GAME15负责赚钱，两者搭配一起，一共卖了100多万，其中4成COLOUR TV GAME6,6成COLOUR TV GAME15，两边加一起一算，老任赚爆。</p>\n<p data-pid=\"NgCbG3QU\">眼熟么？在定价上敏锐的洞察市场，然后精准的把产品分成两种定价，刺激消费者掏钱，价格十分敏感的就买COLOUR TV GAME6，觉得6玩着不过瘾的多掏点钱干脆买COLOUR TV GAME15.今天大家都说库克刀法精准，总是让iPhone的存储稍微难受一点点，我认为两者有着某些相似的逻辑，都是精准分析市场，然后精准定位定价，然后都有点阴（划掉）。</p>\n<p data-pid=\"AkKnjI1w\">山内在游戏机领域初次显示他的商业头脑就在这个时间点开始了。</p>\n<p data-pid=\"eRrym1Ld\"><b>除了商业眼光，山内还有非常好的识人眼光</b></p>\n<p data-pid=\"dNVMacsj\">这段其实就是大家已经看了无数遍的任天堂的故事了，山内对人才有着很辛辣的眼光，发掘了一堆能做出好产品的天才，其中包括但不限于GB之父横井军平，马里奥和塞尔达之父宫本茂等等等等。</p>\n<p data-pid=\"wliLA1he\">有这些人的支撑，任天堂才有在牌桌上的底气，毕竟你商业玩的再花，没有真正好产品早晚让人打趴下，产品是扎实的内功，商业是精彩的招数，缺一不可。</p>\n<p data-pid=\"kbq_heBM\">任天堂产品的故事我们先简单说到这，毕竟已经被说了太多遍，鉴于作者精力有限，暂时就先点到为止。（年轻人不讲武德）</p>\n<p data-pid=\"Qez8nzRg\"><b>真正涉足家用主机领域，还是犀利的商业策略打开了突破口</b></p>\n<p data-pid=\"wJwMrdQX\">任天堂是现代主机商业模式的开创者，这点应该算是共识了。简单说就是，赔钱卖主机，软件赚钱。</p>\n<p data-pid=\"ulHvwJVr\">最初其实任天堂还是想自己玩自己的，FC主机一上来虽然有换卡换游戏这个功能，不过老任是想自己给主机开发游戏的，只不过初期老任觉得自己精力不够，为了先把软件阵容拉起来，于是在主机发售初期拉进了几个公司一起为这个主机开发游戏，这几个公司其实当时有些体量比任天堂还大的多，属于合作关系，还没有形成任天堂是君主，其他为主机开发游戏的公司是臣民的思维定式。</p>\n<p data-pid=\"6rLyXObi\">不过FC一经发售再次一发不可收拾，成为了市场的宠儿，山内在一开始自己也没想到FC能这么成功，并且请第三方为FC开发游戏的策略能这么成功，于是干脆扩大这个模式，拉进更多的第三方为FC开发游戏。</p>\n<p data-pid=\"pqdvU_5h\">最后这个商业策略就这么定下来了，并且一直沿用到现在，虽然有小修小补，但目前为止，没有一个新的商业策略彻底颠覆老任定下来的这个策略，微软现在尝试通过订阅制改变这个策略，但现在为止订阅制还没有动摇它。</p>\n<p data-pid=\"32hlsuvy\">这个策略就是，主机硬件赔钱或者不赚钱，第三方在主机平台卖游戏需要付一个权利金，权利金帮助主机平台盈利。主机平台有义务审核自己平台的游戏，保证自己平台的游戏有一定素质，不至于触发之前雅达利崩溃的问题。</p>\n<p data-pid=\"9-GdRmaF\">这个策略让任天堂FC在上一个家用游戏机泡沫破裂之后重新建立了一个家用主机市场，这个重生的市场发展到今时今日，牌桌上的玩家换了又换，但任天堂一直在牌桌上，从没出局。</p>\n<p data-pid=\"6FWDaqIM\"><b>任天堂不是小白兔，从来没有回避过露出獠牙的机会</b></p>\n<p data-pid=\"P1hB5GzC\">老任即使离开山内老爷子以后也从来没吃素过，别被他们家游戏的风格骗了。</p>\n<p data-pid=\"ub19HWmx\">首先，万代就被老任反复玩弄过。</p>\n<p data-pid=\"yuFeRVpO\">1999年，万代迎接了离开任天堂的横井军平，这位可是掌机界的常青树GB的创造者，GB从上世纪80年代的尾巴开始一直到90年代快结束，战胜了一个个比自己性能强的对手，从未失败，现在横井军平从任天堂离职，作为任天堂当初的骨干之一，自然是个非常宝贵的人才，离开老任的横井军平自己创立了公司，和万代合作一起开发了神奇天鹅掌机，也就是WS。</p>\n<p data-pid=\"kiVIl4jS\">WS完全沿袭了GB的理念，可以说深刻剖析了这么多年来GB战胜一个又一个掌机对手的法宝，然后一一改进用到了自己身上。</p>\n<p data-pid=\"x9nWoWD1\">GB虽然性能不高，但硬件皮实，得益于刚好够用的性能，又有着非常出色的续航。所以GB既保证了自己低廉的价格，又保证了第三方开发游戏时候够用的性能，还保证了续航。为什么一直说续航，因为当年锂电池技术还没成形，充电电池技术一直无法下放到便携掌机设备上，所以掌机只能买电池，虽然一节电池单价没多少，但长期使用下来，掌机续航不高的话就会一直一直一直买电池，逐渐形成一个非常大的负担。GB的几个对手都倒在了续航之下，虽然有比GB更好的性能，早早用上了彩色屏幕，但是动不动就4节6节五号电池，续航只能撑3小时，这些掌机在GB面前都成了吃电池的怪兽，只有GB，凭着4节五号电池续航15小时的怪物续航，把这些吃电池怪兽全部打翻在地。</p>\n<p data-pid=\"-b5Vzlg7\">所以WS把GB的这个特性继续推向极致，WS初代一节五号电池就能续航30小时。你没看错，一节五号电池，能用30小时。性能方面WS也对标GB，在保证其它需求的情况下该用力的地方用力，该省的地方省，比如CPU就借助时代的优势，使用了16位CPU，这要归功于WS是个99年发售的掌机，比GB新了10年。屏幕黑白，当然这是为了保证这个30小时的恐怖续航，也为了压低成本，在售价上和GB比划两下。另外WS还采用了创意设计，掌机又能横着玩又能竖着玩。再加上万代自己一堆动画版权可以开发游戏，横井军平还专门为WS设计了首发护航作品。</p>\n<p data-pid=\"0ToKk4Oh\">看看，WS这全方位狙击GB，是不是憋足了劲准备一击大比兜把任天堂的掌机市场抽翻在地？</p>\n<p data-pid=\"ppXNLpXL\">任天堂的商业獠牙这个时候开始显露出来了。</p>\n<p data-pid=\"WNYuffC4\">1999年WS计划首发，1998年，任天堂突然给GB更新了屏幕，快10年都是黑白屏的GB突然变成了彩色的，挨大比兜的反而成了万代。GBC全面兼容GB的游戏，老任还为GBC开发彩色作品，怪物级掌机游戏宝可梦也全面彩色化，推出第二世代宝可梦，宝可梦金银。</p>\n<p data-pid=\"aD3jFqEV\">WS这边晚了一年发售不说，还是黑白屏幕的，一下子给万代打了个措手不及，又手忙脚乱在第二年发售了彩色版WS,也就是WSC.在那个年代，玩家对掌机的期待最少也是能玩上3年到5年，毕竟1989年买了GB的人一直到1998年都可以无障碍玩GB，一个GB如果你首发买了能玩上8,9年，可是WS这边发售了一年就推出了彩色版，当年对于玩家来说是个非常大的事，相当于对首发支持这个掌机的玩家的一种背叛。</p>\n<p><img src=\"https://picx.zhimg.com/v2-c284a50c19001900ad391bd47abf3feb_720w.png?source=b1748391?rss\" data-caption=\"背刺WS系列的GBC掌机\" data-size=\"normal\" data-rawwidth=\"1095\" data-rawheight=\"1461\" data-watermark=\"watermark\" data-original-src=\"v2-c284a50c19001900ad391bd47abf3feb\" data-watermark-src=\"v2-d17d4e3478e4f3beb45086ffd79552aa\" data-private-watermark-src=\"v2-28483c07552687121515f9b32fa0a9a4\"></p>\n<p data-pid=\"G7nN_Wfx\">万代故意的给玩家添恶心吗？根本不是，而是任天堂辛辣的商业策略，一个扫堂腿把刚出师的WS给扫趴下了。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-7dfcbc9284bf5a9fddb9fd009f65810e_720w.jpeg?source=b1748391?rss\" data-caption=\"被逼的手忙脚乱的WSC\" data-size=\"normal\" data-rawwidth=\"2436\" data-rawheight=\"1827\" data-watermark=\"watermark\" data-original-src=\"v2-7dfcbc9284bf5a9fddb9fd009f65810e\" data-watermark-src=\"v2-51ff043ce1f1243d7eb193e3bd67959c\" data-private-watermark-src=\"v2-6ca3adcefeba11b6015ad1b2a83e95aa\"></p>\n<p data-pid=\"WpLdO8_S\">WSC这个掌机还没来得及爬起来，2001年3月老任又把GBA给丢出来了。和WSC的推出隔了不到一年，性能直接把WSC远远甩在了身后。而且GBC不算严格意义上的GB下一代，所以市场等了GB10多年，这次GBA的推出再次给市场添了一把火，同时也给WS系掌机重重的补了一刀。</p>\n<p data-pid=\"21kVdTN2\">而且这还不是全部，GBA这个掌机的发售消息公布的也非常微妙，它正好卡在WSC首发前，虽然发售日在2002年，但是在WSC上市前老任就放出了GBA要推出的消息。如果你是玩家，并且不是非支持万代不可，你怎么选？是稍微等两年直接买这个性能甩WSC一截的新掌机还是现在就掏钱买WSC？</p>\n<p data-pid=\"SSTcq7OP\">就是这么一套商业组合拳，最后把WS这个掌机彻底打趴下了，万代在2002年7月最后推出了WS系列的最后一个型号水晶天鹅，性能上没变化，改进了一些WSC的不足，比如屏幕太暗的问题。不过这个时候已经太晚了，在GBA的攻势下WS系列基本已经无法爬起来了。</p>\n<p><img src=\"https://pica.zhimg.com/v2-fd0d9eb897b1c8f5afaa704a6fbed0c3_720w.png?source=b1748391?rss\" data-caption=\"终结WS的最后一击GBA\" data-size=\"normal\" data-rawwidth=\"1314\" data-rawheight=\"1752\" data-watermark=\"watermark\" data-original-src=\"v2-fd0d9eb897b1c8f5afaa704a6fbed0c3\" data-watermark-src=\"v2-1b224d0d5120538e764da025cc8dec26\" data-private-watermark-src=\"v2-7cdd3bb0bed3f401620755b0d1e89f3a\"></p>\n<p data-pid=\"sPtP5Lp0\"><b>另一次任天堂的商业獠牙咬向了索尼。</b></p>\n<p data-pid=\"9YoC0rY4\">索尼在家用机领域一直很顺利，而且索尼在家用机市场是实实在在打败了任天堂的。老任在FC时代建立了家用机商业帝国，但逐渐的成为暴君，虽然SFC延续了该帝国，但是和第三方的关系逐渐交恶，终于，索尼在ps主机上背刺任天堂成功，几乎把老任一手建立的游戏帝国给掏空了，第三方跟商量好的一样集体叛逃到索尼阵营，任天堂的新家用机N64一下子变成了没有家臣的主君。</p>\n<p data-pid=\"IILRjTyE\">从这之后任天堂的家用机就一直没干过索尼，N64被PS打倒，NGC又没干过PS2。所以当索尼宣布要推出掌机产品的时候，几乎所有人都觉得，老任的掌机帝国也要完蛋了。那是2004年，得知索尼要进军掌机市场的玩家和媒体都充满了期待。各种猜测满天飞，大家都想知道索尼能拿出来个什么优质的掌机产品，能把已经统治掌机市场多年的任天堂赶下C位。</p>\n<p data-pid=\"dTwEQpgg\">有趣的事情再次发生了，2004年9月21日，信心满满的索尼准备在下午3点半公布自己的首款掌机的各种细节，包括硬件配置和价格等等。但是发布会意外的推迟了17分钟，虽然官方的说法是技术原因，不过其实是因为老任再次露出了他的獠牙。</p>\n<p data-pid=\"vgAZyhlr\">就在这一天索尼发布会开始的前一个小时，任天堂突然宣布自己的新掌机NDS，售价14800日元，双屏，向下兼容GBA游戏。</p>\n<p><img src=\"https://pica.zhimg.com/v2-611fec140a4023c8510a6bf95f1eeaf3_720w.png?source=b1748391?rss\" data-caption=\"这是NDS的第二个型号NDSL\" data-size=\"normal\" data-rawwidth=\"2923\" data-rawheight=\"1344\" data-watermark=\"watermark\" data-original-src=\"v2-611fec140a4023c8510a6bf95f1eeaf3\" data-watermark-src=\"v2-f91f84d3ace40e448898c5384d8071a2\" data-private-watermark-src=\"v2-0bc9d854825c8320e757cc57f247d93b\"></p>\n<p data-pid=\"M-sYA8ul\">这一下子把索尼的计划打乱了，本来因为PSP的配置，考虑成本问题，PSP的首发价格不应该低于29800日元，而且在家用机市场风头无两的索尼也不准备在PSP身上玩赔钱卖硬件这套了。结果任天堂突然宣布的NDS价格要比索尼计划的PSP价格低了将近一半，就算psp硬件再酷炫，这么一来也几乎没法跟NDS打了，于是这推迟的17分钟估计就是索尼紧急修改计划，终于，psp首发价格19800日元，虽然还是比NDS高，不过这次索尼也算是吐血赚吆喝，让任天堂在掌机战场上一上来就来了个下马威。</p>\n<p data-pid=\"E4s2JQd3\">psp虽然在国内人气比NDS高很多，不过全球NDS一直是压着psp的，首发销量方面，NDS首周销量44万，psp因为提前发售，产能不足，首周销量只有15万。就这还是比NDS晚发售了10天，而且价格也还是比NDS贵了5000日元。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-c5428e1ddc468785fb26dd852a6e3ffd_720w.png?source=b1748391?rss\" data-caption=\"当年国内的一代神机psp，请无视我这台的伊拉克成色，这是初期型号psp1000\" data-size=\"normal\" data-rawwidth=\"2923\" data-rawheight=\"1344\" data-watermark=\"watermark\" data-original-src=\"v2-c5428e1ddc468785fb26dd852a6e3ffd\" data-watermark-src=\"v2-e5b162306b206b8be7402b448618dafb\" data-private-watermark-src=\"v2-88e73a5ad19d9d4b9d4ef9285f88e073\"></p>\n<p data-pid=\"bRLVtbaJ\">直到任天堂的末代掌机3DS，老任还是在商业策略上不断的发力，拉拢掌机方面的各种第三方，拉来psp时代索尼阵营的决定软件怪物猎人，紧急降价，等等方式全用上，最后稳住了自己的最后一代掌机3DS，让这个已经开始收缩的掌机上自己还是占据了绝对优势。</p>\n<p data-pid=\"wajYD0YE\"><b>所以任天堂的成功之道在哪些地方？</b>固然，任天堂有着出色的开发能力，优秀的创意，不过很多人忽略了，产品方面喜欢走全年龄路线的老任，在商业策略上可一直不是吃素的。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fisher-23?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">Fisher</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/20539944/answer/2653720287?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">54 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/505023147?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">任天堂在业界的口碑怎么样？</a><br><a href=\"http://www.zhihu.com/question/526043585?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">任天堂为什么这么强？</a><br>\n","link":"http://www.zhihu.com/question/20539944/answer/2653720287?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"我开发了一款轻量的数字白板——PegBoard","date":"2022-08-31 03:16:42","description":"十分轻量、无需联网注册、开箱即用，希望它可以成为你整理信息，梳理思绪时的好助手。<a href=\"https://sspai.com/post/75384\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75384"},{"title":"关于高频量化交易的代码项目","date":"2022-08-31 02:54:39","description":"\n<p data-pid=\"_S8U4uZs\">本文列举了一些关于高频量化交易代码项目，大部分来自Github；</p>\n<p data-pid=\"UqKRsL-D\">包括数学/计量/统计/算法的基础教程、订单簿分析与做市策略、传统技术分析、机器学习、深度学习、强化学习等类别；</p>\n<p data-pid=\"y67iMrP5\">所用语言均为Python/Jupiter Notebook；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3><b>基础教程</b></h3>\n<p data-pid=\"uRn3qbyc\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/crflynn/stochastic\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/crflynn/stoc</span><span class=\"invisible\">hastic</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"C4C7tU4g\">常见随机过程的实现，包括连续、离散、扩散过程、噪声等类别；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"-a89yWe7\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jwergieluk/ou_noise\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/jwergieluk/o</span><span class=\"invisible\">u_noise</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"Xl04o-O4\">O-U过程的生成、检验和参数估计；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"vdKRygBF\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/stmorse/hawkes\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/stmorse/hawk</span><span class=\"invisible\">es</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"B-VCqvQD\">关于单变量以及多变量Hawkes过程的生成与参数估计，采用MAP EM算法进行参数估计；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"MZTMP7v5\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/AileenNielsen/TimeSeriesAnalysisWithPython\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/AileenNielse</span><span class=\"invisible\">n/TimeSeriesAnalysisWithPython</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"BkKy1Gqi\">基础时间序列教程，包括时间序列数据的读取、趋势成分与季节成分的分解、谱分析、聚类等内容；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"GE0iavDF\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/yangwohenmai\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/yangwohenmai</span><span class=\"invisible\"></span></a></u></p>\n<p data-pid=\"qV4OoXtH\">进阶时间序列教程，包括基于统计学、基于LSTM、基于深度学习进行时间序列预测的内容；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"RONts8dV\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/youngyangyang04/leetcode-master\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/youngyangyan</span><span class=\"invisible\">g04/leetcode-master</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"09WkhAsG\">数据结构与算法的刷题攻略，持续更新中；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"jyE3HCIO\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/dummydoo/Advanced-Algorithmic-Trading\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/dummydoo/Adv</span><span class=\"invisible\">anced-Algorithmic-Trading</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"P6fHEvq0\">《Advanced Algorithmic Trading》一书的代码实现，使用语言为python/R；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"E5tsV9HT\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/bukosabino\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/bukosabino</span><span class=\"invisible\"></span></a></u></p>\n<p data-pid=\"TNCBMOJi\">一位Affirm算法工程师的项目主页，内容丰富，包括TA库的实现、时间序列预测、特征工程选择等，主要集中于机器学习领域；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3><b>订单簿分析与做市策略</b></h3>\n<p data-pid=\"_WiaSmDV\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/nicolezattarin/LOB-feature-analysis\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/nicolezattar</span><span class=\"invisible\">in/LOB-feature-analysis</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"1cZbbcW3\">对限价订单簿进行特征工程分析，包括订单大小的分布、用于价格预测的订单不平衡、知情交易的概率、波动性等方面。作者的文档与代码简洁清晰，包含部分原始文献；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"nkw4vU-I\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/ghgr/HFT_Bitcoin\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/ghgr/HFT_Bit</span><span class=\"invisible\">coin</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"O0avAPjl\">BTC订单簿的数据分析以及一些传统高频策略的实例图示；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"gf8VHehZ\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/yudai-il/High-Frequency\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/yudai-il/Hig</span><span class=\"invisible\">h-Frequency</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"sfsrDhVD\">基于level-2限价订单簿和分笔交易数据的研究，考察了订单不平衡与买卖压力的盘口拓展；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"lxv_eTz2\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jeremymck/High-Frequency-Data---Limit-Order-Books\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/jeremymck/Hi</span><span class=\"invisible\">gh-Frequency-Data---Limit-Order-Books</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"Gj4-eHPC\">本项目包括高频数据描述性分析，Hawkes过程的生成与参数估计以及限价订单簿的模拟；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"OdV4eEKd\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Macosh/Order_Book\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/Macosh/Order</span><span class=\"invisible\">_Book</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"kQV0u7aL\">一个订单簿模拟器，实现了创建不同类型的订单、订单匹配、模拟生成，数据库存储历史订单等功能；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"HY01EZGj\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/fedecaccia/avellaneda-stoikov\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/fedecaccia/a</span><span class=\"invisible\">vellaneda-stoikov</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"4A6eVun3\">Avellaneda-Stoikov做市算法的实现；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"W-ujWZpj\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mdibo/Avellaneda-Stoikov\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/mdibo/Avella</span><span class=\"invisible\">neda-Stoikov</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"kZ5M30wG\">Avellaneda-Stoikov做市算法另一个实现版本，比前者更简明些；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"AunVoeFl\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/jshellen/HFT\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/jshellen/HFT</span><span class=\"invisible\"></span></a></u></p>\n<p data-pid=\"uwtApKil\">采用随机最优控制方法求解AS做市算法及其变种，包含HJB方程的求解程序以及AS做市策略的输出框架；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"0dIwzxXh\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/huangzz119/OptimalExecution_stochastic_control\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/huangzz119/O</span><span class=\"invisible\">ptimalExecution_stochastic_control</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"IkbuIa-d\">本项目实现了Frei, C. and N. Westray (2015). Optimal execution of a vwap order: a stochastic control approach. Mathematical Finance 25(3), 612–639.一文提出的VWAP算法的最优执行，项目包括数据过程，参数校准，存货变动轨迹等；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"RDcRH8fp\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/kousik97/Order-Execution-Strategy\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/kousik97/Ord</span><span class=\"invisible\">er-Execution-Strategy</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"JTwTn5D8\">三种最优订单执行策略的实现，此外还有Almgren-Chriss框架下的市场冲击函数的实现；</p>\n<p data-pid=\"EkbkiyzA\">包含原始文献；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"A0R92pqw\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mmargenot/machine-learning-market-maker\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/mmargenot/ma</span><span class=\"invisible\">chine-learning-market-maker</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"_daNz6z9\">《Intelligent Market-Making in Artificial Financial Market》一文的实现，基于贝叶斯估计的做市策略模型；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"1_aJcNTe\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/armoreal/hft\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/armoreal/hft</span><span class=\"invisible\"></span></a></u></p>\n<p data-pid=\"6niY2Y0K\">高频交易策略，测试了隐马尔科夫模型（HMM）与O-U过程对限价订单簿数据的拟合情况；此外，还测试了几种典型的高频因子；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3><b>传统技术分析、对冲</b></h3>\n<p data-pid=\"Q23y3V50\"><u><a href=\"https://link.zhihu.com/?target=https%3A//gitee.com/xuezhihuan/my-over-sea-cloud/tree/master/quantitative_research_report\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">gitee.com/xuezhihuan/my</span><span class=\"invisible\">-over-sea-cloud/tree/master/quantitative_research_report</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"ly8qIxkO\">一些券商研报的复现；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"eg8pETL4\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/eyeseaevan/bitmex-algo\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/eyeseaevan/b</span><span class=\"invisible\">itmex-algo</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"2Lur224U\">基于BitMEX平台ETH/USDT和XBT/USDT1分钟的交易数据的交易策略，采用传统技术分析指标进行交易；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"tOIdBOsM\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Davarco/AlgoBot\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/Davarco/Algo</span><span class=\"invisible\">Bot</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"Gm0JF32l\">一个使用均值回归或趋势跟踪策略的自动交易机器人；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"gNK2KH61\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/JunqiLin/High-Frequency-of-BTC-strategy\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/JunqiLin/Hig</span><span class=\"invisible\">h-Frequency-of-BTC-strategy</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"qRWplp9q\">跨交易所的BTC高频对冲策略；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"zEDohwwL\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/rlindland/options-market-making\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/rlindland/op</span><span class=\"invisible\">tions-market-making</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"IdCa2pKs\">基于期权市场的交易机器人，包含做市、统计套利、delta和vega对冲等；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"ggStEGfn\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/Harvey-Sun/World_Quant_Alphas\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/Harvey-Sun/W</span><span class=\"invisible\">orld_Quant_Alphas</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"OHIUrFEL\">World Quant 101 alphas的计算和策略化；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3><b>机器学习</b></h3>\n<p data-pid=\"rUWfDIHZ\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/rorysroes/SGX-Full-OrderBook-Tick-Data-Trading-Strategy\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/rorysroes/SG</span><span class=\"invisible\">X-Full-OrderBook-Tick-Data-Trading-Strategy</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"G4g4GdbT\">采用机器学习方法对限价订单簿动态进行建模的量化策略，包括数据获取、特征选择、模型选择，可作为机器学习类策略的baseline；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3><b>深度学习</b></h3>\n<p data-pid=\"daxCXfpK\"><u><a href=\"https://link.zhihu.com/?target=https%3A//blog.csdn.net/bit452/category_10569531.html\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">blog.csdn.net/bit452/ca</span><span class=\"invisible\">tegory_10569531.html</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"HBEJFSdN\">《Pytorch深度学习实践》课程对应的代码，很好的深度学习入门指引；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"CRi-2Vu_\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/nicodjimenez/lstm\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/nicodjimenez</span><span class=\"invisible\">/lstm</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"blCdtHc1\">一个LSTM的简单实现；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"sMjRK8ut\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/rune-l/HighFrequency\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/rune-l/HighF</span><span class=\"invisible\">requency</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"u7ZtxHls\">采用神经网络方法预测微观层面的价格跳跃，项目完整度较高，从获取数据、异常值清洗、跳跃的统计检验到LSTM、CNN、注意力机制等方法的预测应用；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"eb357FNs\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/umeshpalai/AlgorithmicTrading-MachineLearning\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/umeshpalai/A</span><span class=\"invisible\">lgorithmicTrading-MachineLearning</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"2LSJ81v3\">用RNN，LSTM，GRU预测股价变动；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<h3><b>强化学习</b></h3>\n<p data-pid=\"tt7L_aO-\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/BGasperov/drlformm\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/BGasperov/dr</span><span class=\"invisible\">lformm</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"_Mv_LVEf\">《Deep Reinforcement Learning for Market Making Under a Hawkes Process-Based Limit Order Book Model》一文的代码实现，基于Hawkes过程的深度强化学习做市策略；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"Hih_kvgk\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/lucasrea/algorithmicTrader\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/lucasrea/alg</span><span class=\"invisible\">orithmicTrader</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"ErGBUwGm\">一个采用强化学习进行算法交易的项目；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"pGoY-itM\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/gucciwang/moneyMaker\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/gucciwang/mo</span><span class=\"invisible\">neyMaker</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"fLE8gwn3\">一个基于强化学习的算法交易策略；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"WTP-bAxT\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/TikhonJelvis/RL-book\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/TikhonJelvis</span><span class=\"invisible\">/RL-book</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"lSVfFKf4\">《Foundations of Reinforcement Learning with Applications in Finance》一书的对应代码实现；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"687nkOPs\"><u><a href=\"https://link.zhihu.com/?target=https%3A//github.com/mfrdixon/dq-MM\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">github.com/mfrdixon/dq-</span><span class=\"invisible\">MM</span><span class=\"ellipsis\"></span></a></u></p>\n<p data-pid=\"MmWcjaFd\">Deep Q-Learning用于做市，依赖于开源项目Trading Gym；</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"TuHZYRLc\">————————————————————————————————</p>\n<p class=\"ztext-empty-paragraph\"><br></p>\n<p data-pid=\"rlrBMEsX\">PS：可选搜索关键词</p>\n<p data-pid=\"FwUijKk-\">bitcoin strategy</p>\n<p data-pid=\"vZnnlAM7\">order book </p>\n<p data-pid=\"tYAvs6Tg\">market microstructure</p>\n<p data-pid=\"Zap9NWi-\">crypto</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhang-yi-wei-65-65?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">飞砂风中转</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/558902211?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"你怎么看待密室逃脱中的非恐密室？","date":"2022-08-31 02:52:24","description":"\n<p data-pid=\"1F8KyyAD\">部分同意一位知友说的：<b>非恐密室才是密室的精华。</b>或者，更准确一点说：<b>密室的非恐部分才是密室的精华，恐怖的部分大多只能算是「鬼屋」罢了。倘若一个密室的第一卖点是恐怖，那对我来说它的吸引力就很低。</b></p>\n<p data-pid=\"r9QRuNzZ\">如果一个密室是非恐的，它的核心玩法往往比较纯粹，就是破解谜题，通过这种方式获得的好口碑的密室，其评价相对比较客观；而如果一个密室是恐怖的，它的核心玩法就会涉及到较多非理性因素，好口碑的获得方式也会有所不同。然而，这种好口碑的获得，对于相当一部分玩家来说，是缺乏参考价值的。主要原因有 3 个：</p>\n<h3>【1】对于无神论信奉者来说，不真正危及到生命的恐怖都无法让人产生恐惧感。</h3>\n<p data-pid=\"YCdFr0UN\">很久以前，我曾去过号称世界最恐怖的鬼屋「富士急病院」。它一整栋大楼都是鬼屋，内部有非常多恐怖血腥的场面。但由于我从来不信什么鬼魂，潜意识坚信自己不会有真正的危险，并且和我同行的还是一个医学生，因此在整个过程中，我发觉自己毫无害怕的感觉，还时不时和「鬼魂」们挤眉弄眼。最后把「鬼魂」们都觉得无奈了——尽管号称有不少人在里面撑不了 3 分钟，我还是一路平静地走了下来。</p>\n<p data-pid=\"YK79D2GH\">自此以后，我也玩过一些恐怖密室，感觉它们基本上就是富士急的弱化版，因此也同样毫无体验感——<b>花钱让别人吓我，还吓不到我，那又有什么意思呢？</b></p>\n<h3>【2】恐怖密室有更贵的价格，往往显得性价比不高。</h3>\n<p data-pid=\"se_OvnG8\">这是因为，为了营造恐怖气氛，密室通常会加入一些卖力表演的 NPC 来吓你。NPC 的工资最终是玩家承担的。但客观说，大部分密室的 NPC 的表演水平一般，并不是专业训练过的演员，只是兼职而已，专业性强的 NPC 比较少。</p>\n<h3>【3】恐怖环节容易在密室逃脱的过程中增加割裂感。</h3>\n<p data-pid=\"Q9ANLp1Q\">在 <a href=\"https://www.zhihu.com/question/542960255/answer/2627003955\" class=\"internal\">第三代密室</a> 中，剧情的重要性在不断提升，好的剧情能让人更好地沉浸。但是一旦过程中出现了吓人的情节，你很容易忘记之前的情节是什么，需要花时间才能恢复记忆。因此，但凡恐怖环节设计得不够自然，在整个游戏过程中就会有很强的割裂感。</p>\n<p><br></p>\n<p data-pid=\"5GB3T08l\">以上 3 点是我对恐怖密室通常不太感冒的原因。</p>\n<p><br></p>\n<p data-pid=\"ByobTd3Q\">当然，这不是说所有的恐怖密室都不好，而是说<b>真正能不强行增加无用 NPC、能把恐怖自然融入到剧情中的好密室，确实是不太多的。</b>在这里，我非常推荐曾经玩过的一个小型恐怖密室《游戏结束（Game Over）》，2 个人就能玩且没有 NPC，曾获得全国金奖，对于这种把恐怖真正融入剧情中的密室，我是一点都不反感的。</p>\n<p><br></p>\n<p data-pid=\"ll2a_tS9\">有意思的是，「剧本杀」在这方面反而要做得好得多。可能是因为，剧本杀的故事体量要大于密室，所以能将恐怖融入得更加自然一些吧。</p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zengjiaplus?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">曾加</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/519268963/answer/2652924195?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">53 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/506504272?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">密室逃脱的恐怖氛围为什么大受追捧？</a><br><a href=\"http://www.zhihu.com/question/510035168?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">你认为密室逃脱恐怖吗？</a><br>\n","link":"http://www.zhihu.com/question/519268963/answer/2652924195?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"派早报：OPPO 发布 ColorOS 13 和潘塔纳尔跨端系统、怒喵科技发布 CYBERBLADE 耳机等","date":"2022-08-31 01:06:23","description":"UEFI 2.10 和 ACPI 6.5 规范发布，马斯克向 Twitter 发送终止收购函等。<a href=\"https://sspai.com/post/75452\" target=\"_blank\">查看全文</a>\n","link":"https://sspai.com/post/75452"},{"title":"哪个技术路线代表动力电池的未来？","date":"2022-08-30 05:23:42","description":"\n<p data-pid=\"B9ZLlon6\">未来5-8年动力电池将会进入到下一代，磷酸铁锂的升级版将会是高电压的镍锰酸锂；它材料的能量密度比磷酸铁锂高50%以上。三元锂的升级版是高镍，最终走向全镍无钴。磷酸铁锂的升级版估计明年就会实现公告产品，三元锂的升级版第一批的公告预计到2025年出现。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhi-hu-qi-che?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">知乎汽车</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/264888419/answer/2652124361?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">27 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/545002743?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">下一代动力电池技术将如何演进？</a><br><a href=\"http://www.zhihu.com/question/489902802?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">动力电池最终的形态将会是什么？</a><br>\n","link":"http://www.zhihu.com/question/264888419/answer/2652124361?utm_campaign=rss&utm_medium=rss&utm_source=rss&utm_content=title"},{"title":"为什么你不应该在 React 中直接使用 useEffect 从 API 获取数据","date":"2022-08-19 08:53:00","description":"\n<p>React 是一个由 Facebook 开源的、可以在任意平台上构建 UI 的 JavaScript 库。在 React 中，一个常见的 Pattern 是使用 <code>useEffect</code> 搭配 <code>useState</code> 发送请求、将状态从 API（React 外部）同步到 React 内部、用于渲染 UI，这篇文章恰恰在向你介绍为什么你不应该直接这么做。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/180676/37/27394/27265/62ff57f2E600b3725/cff75c5fca39bbcc.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/\">https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/why-you-should-not-fetch-data-directly-in-use-effect/"},{"title":"NPM 自动更新版本号","date":"2022-08-04 05:00:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>ChenYFan 大佬的文章：<a href=\"https://blog.cyfan.top/p/d3c51290.html\">SpeedUp!使用黑科技为你的网站提速</a> 有提到过将 Hexo 博客的全部静态文件上传至 NPM 达到加速效果。</p>\n<p>但是 NPM 版本号不能重复，而且为了精准命中缓存和防止边缘 <code>@latest</code> 缓存过长，就必须指定版本号。</p>\n<p>本人在 <a href=\"https://blog.yfun.top/posts/2876015612/\">我的图床解决方案</a> 一文中使用的方法是 <code>npm version patch</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804133426.png\"></p>\n<p>但这个方法也有一些弊端，比如 <code>patch</code> 只会更新 <code>z</code> 位数的版本号，而且并不会上传至仓库，很可能会出现版本号冲突导致上传失败。这就是为什么最后还需要重新推送 Git 提交。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%95%E8%AF%95%E7%9C%8B\" class=\"headerlink\" title=\"试试看\"></a>试试看</h2>\n<p>NPM 版本号遵循 <code>semver</code> 规范，格式为 <code>major.minor.patch</code>。</p>\n<p>为了在获取最新版本号的时候不发生混乱，我选择先获取最新的版本号。</p>\n<blockquote><p>记得把 <code>cky-blog-static</code> 改成自己的项目名。</p></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>获取到最新版本号后，就可以对版本号进行分析。</p>\n<p>以 <code>1.4.7-b541af2ea284a39da0bbf63b88fdb65c</code> 为例，先按 <code>major.minor.patch</code> 分离。当然，也需要考虑版本号后还有 <code>build metadata</code> 的情况。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\"><span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure><p><del>为了版本号好看些</del>，可以通过判断实现满十进一。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位小于 9，直接 +1</span></span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\"><span class=\"comment\">// z 位大于等于 9，y 位小于 9，y+1, z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">} <span class=\"keyword\">else</span> {</span><br><span class=\"line\"><span class=\"comment\">// z 大于等于 9，y 大于等于 9，x+1,y=0,z=0</span></span><br><span class=\"line\">verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>最后，重新拼接版本号。如果担心服务器缓存版本号导致冲突，还可以加上一些随机字符串。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br></pre></td></tr></table></figure><p>将最新的版本号信息重新写入 <code>package.json</code> 文件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">packageJson.version = newVersion;</span><br><span class=\"line\"><span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p><del>直接 CV 代码！</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 更新 package.json 版本号</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> fetch = <span class=\"built_in\">require</span>(<span class=\"string\">\"node-fetch\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> md5 = <span class=\"built_in\">require</span>(<span class=\"string\">\"js-md5\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getVersion = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> latestVersion = <span class=\"keyword\">await</span> fetch(<span class=\"string\">\"https://registry.npmjs.org/cky-blog-static/latest\"</span>).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json()).then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> {</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res.version;</span><br><span class=\"line\">    })</span><br><span class=\"line\">    <span class=\"keyword\">return</span> latestVersion;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> update = <span class=\"keyword\">async</span>() =&gt; {</span><br><span class=\"line\">    <span class=\"keyword\">const</span> version = <span class=\"keyword\">await</span> getVersion();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> verArray = version.split(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">    verArray[<span class=\"number\">2</span>] = verArray[<span class=\"number\">2</span>].split(<span class=\"string\">\"-\"</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (verArray[<span class=\"number\">2</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">2</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (verArray[<span class=\"number\">1</span>] &lt; <span class=\"number\">9</span>) {</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">1</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">        verArray[<span class=\"number\">0</span>] = <span class=\"built_in\">String</span>(<span class=\"built_in\">Number</span>(verArray[<span class=\"number\">0</span>])+<span class=\"number\">1</span>);</span><br><span class=\"line\">        verArray[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        verArray[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = <span class=\"string\">`<span class=\"subst\">${verArray[<span class=\"number\">0</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">1</span>]}</span>.<span class=\"subst\">${verArray[<span class=\"number\">2</span>]}</span>`</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> newVersion = newVersion + <span class=\"string\">\"-\"</span> + md5(<span class=\"string\">`<span class=\"subst\">${<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime()}</span><span class=\"subst\">${newVersion}</span>`</span>);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(newVersion);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = fs.readFileSync(<span class=\"string\">\"./package.json\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> packageJson = <span class=\"built_in\">JSON</span>.parse(packageJson);</span><br><span class=\"line\">    packageJson.version = newVersion;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> newPackage = <span class=\"built_in\">JSON</span>.stringify(packageJson);</span><br><span class=\"line\">    fs.writeFileSync(<span class=\"string\">\"./package.json\"</span>, newPackage);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Complete!!\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\">update();</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%9C%80%E5%90%8E\" class=\"headerlink\" title=\"最后\"></a>最后</h2>\n<p>如果是 Hexo 文件部署，就可以直接把文件直接丢在项目根目录，Action 集成部署加上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">node update.js</span><br></pre></td></tr></table></figure><p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.16/rawimg/20220804135818.png\"></p>\n<p><del>Blog 半年没更新，除除草 --(....</del></p>\n","link":"https://blog.yfun.top/posts/2022/auto-update-npm-version/"},{"title":"我有特别的 DNS 配置和使用技巧","date":"2022-07-28 15:31:00","description":"\n<p>众所周知，DNS 的作用与电话簿类似，将人类可读的域名映射到机器可读 IP 地址、使人更方便地访问互联网。DNS 是非常重要的互联网基础设施，对于改善上网冲浪的体验中的重要程度不容小觑。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/96381/31/31172/23930/62e2ab5bE554d388b/37027f4a03351b9e.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/i-have-my-unique-dns-setup/\">https://blog.skk.moe/post/i-have-my-unique-dns-setup/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/i-have-my-unique-dns-setup/"},{"title":"优化博客的累计布局偏移（CLS）问题","date":"2022-06-07 17:24:00","description":"\n<p>距离上一篇文章发布已有四个月了，是时候写几篇文章给博客除草了。上一次我介绍了我如何迁移、重构了我的博客的架构，这次我想来谈谈我在重构中优化和打磨访客体验时解决的一个问题。我的博客优化之旅 图片 lazyload 的学问和在 Hexo 上的最佳实践 我的博客有多快？ 天下武功，唯快不破 —— 我是这样优化博客的 ...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/206311/26/14625/38940/629f7f81Eb11312de/b1e67f07b1cc9bc7.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/fix-blog-cls/\">https://blog.skk.moe/post/fix-blog-cls/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/fix-blog-cls/"},{"title":"使用 Next.js + Hexo 重构我的博客","date":"2022-03-17 16:24:00","description":"\n<p>在咕咕了一整年、只发布了三篇文章（其中两篇还是译文）之后，我决定还是稍微花一点时间好好折腾一下自己的博客，以 React 作为抓手，通过 Next.js 和 Hexo 深度共建，对标 Gatsby，打通静态 HTML 与用户交互之间的垂直领域屏障，实现多维矩阵闭环，为个人博客赋能（咳咳咳），然后水出 2022 年第一篇文章（逃）技术选型：Gatsby vs Next.js我使用 Hexo 驱动博客已经三年之久了，之前写过一个 开源的 Hexo 主题，后来还成为了 Hexo 的 Core Team Member、为 Hexo 贡献了不少代码。Hexo 是一个诞生于 2012......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/218492/18/14257/25439/6227858fE1517791d/63119f6e39dc9389.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/\">https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/use-nextjs-and-hexo-to-rebuild-my-blog/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Node.js","date":"2022-01-14 10:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h2>\n<ul>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li>\n<li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-nodejs\">安装 Node.js</a></li>\n</ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Node.js 官网 (<a href=\"https://node.js.org/\">https://node.js.org</a>)</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/image-20220114174925675.png\" alt=\"image-20220114174925675\"></p>\n<p>下载 Node.js 安装包（推荐下载 LTS 版本）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175645.png\" alt=\"image-20220114175645642\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175750.png\" alt=\"image-20220114175749822\"></p>\n<p>勾选同意协议，点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175835.png\" alt=\"image-20220114175835742\"></p>\n<p>修改文件安装位置，点击 <code>Next</code>。（也可以不用改）</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114175929.png\" alt=\"image-20220114175929226\"></p>\n<p>点击 <code>Next</code>。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180010.png\" alt=\"image-20220114180010036\"></p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180044.png\" alt=\"image-20220114180043895\"></p>\n<p>点击 <code>Install</code> 开始安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180108.png\" alt=\"image-20220114180107827\"></p>\n<p>等待安装完成。<img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180122.png\" alt=\"image-20220114180122728\"></p>\n<p>点击 <code>Finish</code> 完成安装。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180206.png\" alt=\"image-20220114180206024\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>打开 <code>Git Bash</code>.</p>\n<blockquote><p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。<br>或是在开始菜单中找到 Git Bash.</p></blockquote>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://unpkg.zhimg.com/ocoke-osg@0.0.14/rawimg/20220114180458.png\" alt=\"image-20220114180458685\"></p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-nodejs/"},{"title":"2022: 新年快乐！","date":"2021-12-31 16:00:00","description":"\n<p>转眼间，2021 年已经过去。这一年非常忙碌，以至于博客一周年的纪念来不及写，许多文章计划停留在了 To Do 里。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%8D%9A%E5%AE%A2\" class=\"headerlink\" title=\"博客\"></a>博客</h2>\n<p>由于 Cloudflare Web Analytics 是在 2021 年 4 月份启用的，再加上后来又将统计代码去除，所以关于访问量的信息不可用。</p>\n<p>截止至 2021 年 12 月 31 日，博客共发布 15 篇文章，其中 2021 年发布 11 篇文章，原创文章 10 篇。</p>\n<p>目前采用 <code>LeanCloud + Waline</code> 的评论方式，自 7 月份被刷评论后将评论权限改为登录（支持 <code>GitHub</code> 登录），还有部分评论在迁移中丢失，实在抱歉。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>博客自 2021 年 1 月 13 日将主题改为 <code>Miracle</code>，这是一款简洁、轻量的单栏 Hexo 主题。</p>\n<p><code>Miralce</code> 目前的版本是 <code>2.0.1</code>，全新的版本去除 jQuery，进一步提升性能。</p>\n<p>GitHub 仓库：<a href=\"https://github.com/hifun-team/hexo-theme-miracle\">https://github.com/hifun-team/hexo-theme-miracle</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%9B%B4%E5%A4%9A\" class=\"headerlink\" title=\"更多\"></a>更多</h2>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">=&gt; ...</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2022/"},{"title":"无垠 2021 年度总结","date":"2021-12-31 08:36:10","description":"\n<p>真是忙碌的一年啊。转眼 2021 已经过去，2022 即将到来。又到了该总结这一年的时候了。</p>\n<h1>统计数据</h1>\n<p>年度总结的第一部分仍然是一些统计数据。以下数据截止 2021 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 29,073 (<span>+0.6%</span>)，年 PV 67,688 (<span>-11.61%</span>)，日均 UV 79.65，平均停留时间 3分34秒 (<span>-13.7%</span>)，平均跳出率 55% (<span>-9.8%</span>)。一年有效文章数 1 (<span>-80%</span>)，新增评论 109 条 (<span>-54.96%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg\" alt=\"\" width=\"515\" height=\"620\" class=\"aligncenter size-full wp-image-2537\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/blog-249x300.jpg 249w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>除了 UV 较去年提高 100 多之外，其他数据全部下滑。主要原因还是因为今年实在太过忙碌，只更新了一篇博客，评论区也没有怎么维护。不过目前已经有两篇新的文章在路上了，希望可以尽快写完吧。</p>\n<h2>个人主页</h2>\n<p>个人页总 UV 3,515 (<span>-18.12%</span>)，总 PV 3,929 (<span>-4.56%</span>)，日均 UV 9.63，平均停留时间 55秒 (<span>-12.7%</span>)。访问的主要来源是知乎和 GitHub。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg\" alt=\"\" width=\"515\" height=\"647\" class=\"aligncenter size-full wp-image-2538\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton.jpg 515w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/axton-239x300.jpg 239w\" sizes=\"(max-width: 515px) 100vw, 515px\"></a>\n<p>仍然是没有更新个人主页的一年，我也没有继续宣传这个页面，统计数据下滑大概是正常的。</p>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 4 次，新增 149 commits (<span>-54.57%</span>)，Star 数增加了 174，现有 788。</p>\n<p>终于，MDx 2.0 发布了。但是因为今年的过于忙碌，MDx 并没有得到足够的维护，版本发布周期也拉得比较长，很多 Bug 没能及时修复。希望明年可以把更多的时间花在维护 MDx 上。无论如何，还是感谢各位对于 MDx 的支持！</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>2021 大事记</h1>\n<p>说起来，2021 真的太多“第一次”了...</p>\n<ul>\n<li>一月：由于电脑电池鼓包，第一次用 iPad 外接屏幕远程桌面到服务器来考期末🌚太痛苦了</li>\n<li>一月：MDx 喜提 600 Stars</li>\n<li>三月：第一次测核酸（真的酸）</li>\n<li>三月：第一次坐上 A350！(B-309W）</li>\n<li>三月：第一次来到英国</li>\n<li>六月：第一次来到伦敦</li>\n<li>六月：第一次去猫咖撸猫🐱</li>\n<li>六月：第一次坐上 B777！(B-2025）</li>\n<li>七月：酒店隔离十四天🌚</li>\n<li>七月：MDx 喜提 700 Stars</li>\n<li>七月：第一次和猫一起住（时刻有猫撸真的爽😆）</li>\n<li>七月：入职<a href=\"https://75.team/\">奇舞团</a>实习</li>\n<li>八月：北京景点怎么这么多</li>\n<li>九月：北京景点怎么还有这么多</li>\n<li>九月：<a href=\"https://flyhigher.top/develop/2160.html\">谈谈 WebAuthn</a> 被 <a href=\"https://weibo.com/1893751011/KyipM3tOM\" rel=\"noopener noreferrer\">w3c中国微博转发</a><del>（虽然并没有人看）</del>\n</li>\n<li>九月：从奇舞团<del>跑路</del>\n</li>\n<li>九月：整了个 Stackoverflow 的复制粘贴键盘<del>，太好用了</del>\n</li>\n<li>十月：终于买了心心念念的 MSFS</li>\n<li>十一月：终于买了一台新相机</li>\n<li>十一月：第一次坐上 A380！(B-6140）</li>\n<li>十二月：第一次来到爱丁堡并和 <a href=\"https://diygod.me/\">@DIYgod</a> 面基</li>\n</ul>\n<section><div class=\"set-images-div\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg\" alt=\"和猫一起住的唯一问题就是手机很快会被猫片塞满\" width=\"730\" height=\"1500\" class=\"aligncenter size-full wp-image-2518\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats.jpg 730w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-146x300.jpg 146w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cats-498x1024.jpg 498w\" sizes=\"(max-width: 730px) 100vw, 730px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg\" alt=\"看到你在写前端，猫猫很担心你\" width=\"1004\" height=\"1500\" class=\"aligncenter size-full wp-image-2523\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat.jpg 1004w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-201x300.jpg 201w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-685x1024.jpg 685w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cat-768x1147.jpg 768w\" sizes=\"(max-width: 1004px) 100vw, 1004px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg\" alt=\"高效开发工具（确信\" width=\"1500\" height=\"1019\" class=\"aligncenter size-full wp-image-2519\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-300x204.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-1024x696.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/cv-768x522.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg\" alt=\"和 Ralph 在天坛\" width=\"947\" height=\"1500\" class=\"aligncenter size-full wp-image-2524\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt.jpg 947w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-189x300.jpg 189w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-646x1024.jpg 646w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/tt-768x1216.jpg 768w\" sizes=\"(max-width: 947px) 100vw, 947px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg\" alt=\"380!\" width=\"1500\" height=\"874\" class=\"aligncenter size-full wp-image-2517\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/380.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-300x175.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-1024x597.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/380-768x447.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a>\n</div>\n<div class=\"set-images-div2\">\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg\" alt=\"到处玩.jpg\" width=\"1500\" height=\"1080\" class=\"aligncenter size-full wp-image-2521\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2.jpg 1500w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-300x216.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-1024x737.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play2-768x553.jpg 768w\" sizes=\"(max-width: 1500px) 100vw, 1500px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg\" alt=\"还是到处玩.jpg\" width=\"977\" height=\"1500\" class=\"aligncenter size-full wp-image-2520\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/play.jpg 977w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-195x300.jpg 195w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-667x1024.jpg 667w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/play-768x1179.jpg 768w\" sizes=\"(max-width: 977px) 100vw, 977px\"></a><br><a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg\" alt=\"380 上的星空\" width=\"1002\" height=\"1500\" class=\"aligncenter size-full wp-image-2522\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars.jpg 1002w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-200x300.jpg 200w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-684x1024.jpg 684w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/stars-768x1150.jpg 768w\" sizes=\"(max-width: 1002px) 100vw, 1002px\"></a>\n</div>\n</section><p><span>点击图片查看描述</span></p>\n<p>对了，对于可爱的猫猫们，我整了一个 Telegram 贴纸包，你可以在这里获取：<a href=\"https://telegram.me/addstickers/huanAndDan\">https://telegram.me/addstickers/huanAndDan</a>。</p>\n<h1>跨年红包</h1>\n<p>今年的解题之旅，从下面这张图片开始：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/b.jpg\" alt=\"\" width=\"1510\" height=\"1250\" class=\"aligncenter size-full wp-image-2556\"></a>\n<p>不过，鉴于今年的题目较以往对于认真解题的人更难，我还准备了隐藏红包，在解题中收集线索即可发现隐藏红包。共有 20 个普通红包和 10 个隐藏红包。</p>\n<p>解题计划持续到东八区 2022.02.03 23:59:59 或红包被领完为止，之后我会发布题解。不过由于去年情况混乱，今年在解题过程中我一旦发现有不正常的现象就会立即停止活动。Anyway，新年快乐！祝玩得开心。</p>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报用到了 PS 和 Adobe 家的新玩具 Dimension。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg\" alt=\"\" width=\"707\" height=\"1000\" class=\"aligncenter size-full wp-image-2547\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1.jpg 1414w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-212x300.jpg 212w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-724x1024.jpg 724w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-768x1086.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/12/2022-in-post-1-1086x1536.jpg 1086w\" sizes=\"(max-width: 707px) 100vw, 707px\"></a>\n<p>那么祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2507.html"},{"title":"[译] 不，Web3 不是去中心化","date":"2021-12-14 14:01:00","description":"加密货币社区对元宇宙和 Web3 的狂热仍在继续，大量投资人和开发者前仆后继加入其中。但是，Web3 真的能实现支持者们的种种愿景吗？亦或是另一个镜中月、水中花？也许让历史照进现实，能给我们答案。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/123139/11/24965/54827/62215eedE5e3da14a/80c24408e97057dd.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/web3-is-not-decentralization/\">https://blog.skk.moe/post/web3-is-not-decentralization/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/web3-is-not-decentralization/"},{"title":"[译] 捍卫自由的互联网，对 Web3 说不","date":"2021-12-12 13:40:00","description":"作为一个充满泡沫和噱头的新概念，Web3 和元宇宙在区块链的社区中掀起了一波浪潮。鼓吹者坚信 Web3 就是互联网的未来、不惜砸下大把的金钱和精力、希望能在未来中捞一杯羹；而大部分人保持观望的态度。是时候来一点 Web3 的反对意见了。<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/87908/13/23797/13415/622032afE3a2f9e9f/95c01e98cd4a707a.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/\">https://blog.skk.moe/post/keep-web-free-say-no-to-web3/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/keep-web-free-say-no-to-web3/"},{"title":"2021 年 JavaScript Promise 性能对比","date":"2021-12-07 08:19:00","description":"\n<p>我们正生活在一个「Any application that can be written in JavaScript, will eventually be written in JavaScript」的时代。作为一门兼具动态性和简单性的语言，JavaScript 已经占领了客户端、服务端，甚至在机器学习中也占据一席之地；不可避免的，异步执行也逐渐成为这门语言不可缺少的一部分。TL; DR Bluebird 依然是速度最快、内存占用最少的 Promise 实现 Runtime 的 async / await 实现越来越快、顺序执行的性能已经超过 Native Promise，占用的内存也更少 对于平行并发执行的 Promise，Bluebird 的性能依然一骑绝尘。......</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/157404/28/28495/143414/622032b2Ef7b495fd/6a9bd02e79392c9d.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/promise-performance-benchmark/\">https://blog.skk.moe/post/promise-performance-benchmark/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/promise-performance-benchmark/"},{"title":"在 Windows 上快速安装 Hexo · 安装 Git","date":"2021-11-12 13:30:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p><strong>本文未经允许，禁止转载！</strong></p>\n<p><strong>视频教程正在制作，等待更新。</strong></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95\" class=\"headerlink\" title=\"文章目录\"></a>文章目录</h3>\n<ul><li><a href=\"https://blog.yfun.top/posts/hexo-blog/install-git\">安装 Git</a></li></ul>\n<blockquote><p>更多文章等待更新...</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%8B%E8%BD%BD\" class=\"headerlink\" title=\"下载\"></a>下载</h2>\n<p>前往 Git 官网 (<a href=\"https://git-scm.com/\">https://git-scm.com</a>).</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112204849.png\"></p>\n<p>点击页面中的 <code>Download For Windows</code> 下载 Windows 版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211507.png\"></p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<p>双击运行安装文件。</p>\n<p>点击 <code>Next</code>，同意协议。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211528.png\"></p>\n<p>修改程序安装位置，点击 <code>Next</code>（直接装在 C 盘也不是不行）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211604.png\"></p>\n<p>组件选项，可选桌面快捷键、右键菜单、LFS 支持、自动检查更新等。</p>\n<p>点击 <code>Next</code> 进入下一步。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211609.png\"></p>\n<p>开始菜单文件夹名，保持默认就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211613.png\"></p>\n<p>默认编辑器，保持 Vim 就可以，点击 <code>Next</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211616.png\"></p>\n<p>环境变量，选择第 2 个，点击 <code>Next</code>。</p>\n<blockquote><p>如果选择第 1 个，则只能在 Git Bash 中使用，可能会出现问题</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211619.png\"></p>\n<p>剩下的都可以保持默认，一路 Next，然后点击 <code>Install</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211622.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211624.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211627.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211630.png\"><br><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/20211112211633.png\"></p>\n<p>等待安装完毕。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%B5%8B%E8%AF%95\" class=\"headerlink\" title=\"测试\"></a>测试</h2>\n<p>在文件夹处右击，点击 <code>Git Bash Here</code> 进入 Git Bash。</p>\n<p>（或是在开始菜单中找到 Git Bash）</p>\n<p>输入 <code>git --version</code> 查看版本，正确输出版本信息即代表安装成功。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.11/rawimg/7ec315b7764cc.png\"></p>\n<p>大功告成！</p>\n","link":"https://blog.yfun.top/posts/hexo-blog/install-git/"},{"title":"前端时间国际化 101","date":"2021-10-14 15:58:23","description":"\n<blockquote>\n<p>时间只是幻觉。</p>\n<footer>—— 阿尔伯特·爱因斯坦</footer>\n</blockquote>\n<p>最近在开发一个需要完善国际化方案的前端项目，在处理时间国际化的时候遇到了一些问题。于是花了一些时间研究，有了这篇文章。不过由于网上关于 JavaScript 中 <code>Date</code> 对象的坑的文章已经一抓一大把了，<strong>因此这篇文章不是 JavaScript 中 <code>Date</code> 对象的使用指南，而是只专注于前端时间国际化。</strong></p>\n<h1>从时区说起</h1>\n<p>要想处理时间，UTC 是一个绕不开的名字。协调世界时（Coordinated Universal Time）是目前通用的世界时间标准，计时基于原子钟，但并不等于 TAI（国际原子时）。TAI 不计算闰秒，但 UTC 会不定期插入闰秒，因此 UTC 与 TAI 的差异正在不断扩大。UTC 也接近于 GMT（格林威治标准时间），但不完全等同。可能很多人都发现近几年 GMT 已经越来越少出现了，这是因为 GMT 计时基于地球自转，由于地球自转的不规则性且正在逐渐变慢，目前已经基本被 UTC 所取代了。</p>\n<blockquote><p>JavaScript 的 <code>Date</code> 实现不处理闰秒。实际上，由于闰秒增加的不可预测性，Unix/POSIX 时间戳完全不考虑闰秒。在闰秒发生时，Unix 时间戳会重复一秒。这也意味着，一个时间戳对应两个时间点是有可能发生的。</p></blockquote>\n<p>由于 UTC 是标准的，我们有时会使用 UTC+/-N 的方式表达一个时区。这很容易理解，但并不准确。中国通行的 <code>Asia/Shanghai</code> 时区<strong>大部分</strong>情况下可以用 UTC+8 表示，但英国通行的 <code>Europe/London</code> 时区并不能用一个 UTC+N 的方式表示——由于夏令时制度，<code>Europe/London</code> 在夏天等于 UTC+1，在冬天等于 UTC/GMT。</p>\n<blockquote><p>一个时区与 UTC 的偏移并不一定是整小时。如 <code>Asia/Yangon</code> 当前为 UTC+6:30，而 <code>Australia/Eucla</code> 目前拥有奇妙的 UTC+8:45 的偏移。</p></blockquote>\n<p>夏令时的存在表明<strong>时间的表示不是连续的</strong>，时区之间的时差也并不是固定的，我们并不能用固定时差来处理时间，这很容易意识到。但一个不容易意识到的点是，时区还包含了其历史变更信息。中国目前不实行夏令时制度，那我们就可以放心用 UTC+8 来表示中国的时区了吗？你可能已经注意到了上一段中描述 <code>Asia/Shanghai</code> 时区时我使用了<strong>大部分</strong>一词。<code>Asia/Shanghai</code> 时区在历史上实行过夏令时，因此 <code>Asia/Shanghai</code> 在部分时间段可以使用 UTC+9 来表示。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1988-04-18 00:00:00')\n// Mon Apr 18 1988 00:00:00 GMT+0900 (中国夏令时间)</pre>\n<blockquote><p>夏令时已经够混乱了，但它实际上比你想象得更混乱——部分穆斯林国家一年有四次夏令时切换（进入斋月时夏令时会暂时取消），还有一些国家使用混沌的 15/30 分钟夏令时而非通常的一小时。</p></blockquote>\n<blockquote><p><strong>不要总是基于 <code>00:00</code> 来判断一天的开始。</strong>部分国家使用 0:00-1:00 切换夏令时，这意味着 23:59 的下一分钟有可能是 1:00。</p></blockquote>\n<p>事实上，虽然一天只有 24 个小时，但当前（2021.10）正在使用的时区有超过 300 个。<strong>每一个时区都包含了其特定的历史。</strong>虽然有些时区在现在看起来是一致的，但它们都包含了不同的历史。时区也会创造新的历史。由于政治、经济或其他原因，一些时区会调整它们与 UTC 的偏差（萨摩亚曾经从 UTC-10 切换到 UTC+14，导致该国 2011.12.30 整一天都消失了），或是启用/取消夏令时，甚至有可能导致一个时区重新划分为两个。因此，为了正确处理各个时区，我们需要一个数据库来存放时区变更信息。还好，已经有人帮我们做了这些工作。目前大多数 *nix 系统和大量开源项目都在使用 <a href=\"https://www.iana.org/time-zones\" rel=\"noopener\">IANA 维护的时区数据库</a>（IANA TZ Database），其中包含了自 Unix 时间戳 0 以来各时区的变更信息。当然这一数据库也包含了大量 Unix 时间戳 0 之前的时区变更信息，但并不能保证这些信息的准确性。IANA 时区数据库会定期更新，以反映新的时区变更和新发现的历史史实导致的时区历史变更。</p>\n<blockquote><p>Windows 不使用 IANA 时区数据库。微软为 Windows 自己维护了一套<a href=\"https://docs.microsoft.com/zh-cn/troubleshoot/windows-client/system-management-components/daylight-saving-time-help-support\" rel=\"noopener\">时区数据库</a>，这有时会导致在一个系统上合法的时间在另一系统上不合法。</p></blockquote>\n<p>既然我们不能使用 UTC 偏移来表示一个时区，那就只能为每个时区定义一个标准名称。通常地，我们使用 <code>/</code> 来命名一个时区。这里的城市一般为该时区中人口最多的城市。于是，我们可以将中国的通行时区表示为 <code>Asia/Shanghai</code>。也有一些时区有自己的别名，如太平洋标准时间 <code>PST</code> 和协调世界时 <code>UTC</code>。</p>\n<blockquote><p>时区名称使用城市而非国家，是由于国家的变动通常比城市的变动要快得多。</p></blockquote>\n<blockquote><p><strong>城市不是时区的最小单位。</strong>有很多城市同时处于多个时区，甚至澳大利亚<a href=\"https://en.wikipedia.org/wiki/Gold_Coast_Airport\" rel=\"noopener\">有一个机场</a>的跑道两端处于不同的时区。</p></blockquote>\n<h1>处理时区困难重重</h1>\n<p>几个月前的一天，<a href=\"https://milkice.me/\" rel=\"noopener\">奶冰</a>在他的 Telegram 频道里发了这样的一条消息：</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\"><img src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg\" alt=\"奶冰频道的消息\" width=\"500\" class=\"aligncenter size-medium wp-image-2490\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1.jpg 800w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-244x300.jpg 244w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-1-768x944.jpg 768w\" sizes=\"(max-width: 800px) 100vw, 800px\"></a>\n<p>你想的没错，这个问题正是由时区与 UTC 偏移的不同造成的。<code>Asia/Shanghai</code> 时区在 1940 年前后和 1986 年前后曾实行过夏令时，<strong>而夏令时的切换会导致一小时的出现和消失。</strong>具体来说，启用夏令时当天会有一个小时消失，如 2021.3.28 英国启用夏令时，1:00 直接跳到 3:00，导致 <code>2021-03-28 01:30:00</code> 在 <code>Europe/London</code> 时区中是不合法的；取消夏令时当天又会有一个小时重复，如 2021.10.31 英国取消夏令时，2:00 会重新跳回 1:00 一次，导致 <code>2021-10-31 01:30:00</code> 在 <code>Europe/London</code> 时区中对应了两个时间点。而在奶冰的例子中，<code>1988-04-10 00:46:50</code> 正好处于因夏令时启用而消失的一小时中，因此系统会认为此时间字符串不合法而拒绝解析。</p>\n<blockquote><p>你可能会注意到在历史上 1988.4.10 这一天 <code>Asia/Shanghai</code> 时区实际上是去掉了 1:00-2:00 这一小时而不是 0:00-1:00。上文问题更深层次的原因是，在 IANA TZDB 2018a 及更早版本中，IANA 因缺乏历史资料而设置了错误的夏令时规则，规则设定了夏令时交界于 0:00-1:00 从而导致上文问题发生。而随后社区<a href=\"http://mm.icann.org/pipermail/tz/2018-August/026760.html\" rel=\"noopener\">发现了更准确的史实</a>，因此 IANA 更新了数据库。上文的问题在更新了系统的时区数据库后便解决了。</p></blockquote>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg\" alt=\"IANA TZDB 2018a 及之前版本的错误数据\" width=\"1750\" height=\"595\" class=\"aligncenter size-full wp-image-2491\" srcset=\"https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2.jpg 1750w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-300x102.jpg 300w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1024x348.jpg 1024w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-768x261.jpg 768w, https://acdn.flyhigher.top/wp-content/uploads/2021/10/time-2-1536x522.jpg 1536w\" sizes=\"(max-width: 1750px) 100vw, 1750px\"></a>\n<p><span>IANA TZDB 2018a 及之前版本的错误数据</span></p>\n<p>再来考虑另一种情况。你的应用的某位巴西用户在 2018 年保存了一个未来时间 <code>2022-01-15 12:00</code>（按当时的规律那应该是个夏令时时间），不巧那时候你的应用是以格式化的时间字符串形式保存的时间。之后你发现巴西已经于 2019 年 4 月宣布彻底取消夏令时制度，那么 <code>2022-01-15 12:00</code> 这个时间对应的 Unix 时间戳发生了变化，变得不再准确，要正确处理这一字符串就需要参考这一字符串生成的时间（或生成时计算的 UTC 偏移）来做不同的处理。<strong>因此，应用从一开始就应该避免使用字符串来传输、存储时间，而是使用 Unix 时间戳。</strong>如果不得不使用字符串存储时间，请尽可能：</p>\n<ul>\n<li>使用 UTC 描述时间，你永远不会知道本地时区在未来会发生什么</li>\n<li>如果需要以当地时间描述时间，一定带上当前 UTC 偏移</li>\n</ul>\n<p>时区历史带来的问题往往意想不到而且远比想象得多。实际上时区历史数据非常详细而繁多且跨设备不一致，并没有简单而统一的处理方法。在需要严谨处理时区时可能需要在应用程序中内嵌一套各端统一的时区数据库，但这样的方案放在前端又会带来不少问题：</p>\n<ul>\n<li>体积过大。moment.js 曾经设计过<a href=\"https://github.com/moment/moment-timezone/blob/develop/data/packed/2021a.json\" rel=\"noopener\">一种简洁的 TZDB 表示</a>，但尽管已经尽可能压缩整个文件仍然达到了 180+KB。在性能优先的 Web 应用中这是不可接受的</li>\n<li>需要持续更新。时区数据一直在变动，需要在时区数据更新时尽快更新应用内的时区数据，这带来了额外的维护成本</li>\n</ul>\n<p>ES6 为我们带来了 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl\" rel=\"noopener\"><code>Intl</code> 命名空间</a>。在这里，JavaScript 运行时提供了不少时间相关的国际化能力。因此，在不使用额外数据的情况下准确处理时区是可能的，但这并不完美：</p>\n<ul>\n<li>各端不统一。浏览器提供的时区数据受浏览器版本、系统版本等可能变化，最新的时区更新可能无法快速反映到所有设备上</li>\n<li>实现复杂。<code>JavaScript</code> 中 <code>Date</code> 对象的不良设计导致实现完善的时区处理并不容易，且 <code>Intl</code> 命名空间下的对象实例化性能开销较大，需要额外优化</li>\n</ul>\n<blockquote><p><code>Intl</code> 命名空间下还有很多实用的国际化相关方法，值得我们另开一篇文章来讲讲了。</p></blockquote>\n<p>在真实开发中，这需要取舍。目前主流的 JavaScript 时间处理库都已转向浏览器内置方法，并在需要时通过 Polyfill 保证跨端一致性。在这篇文章中，我们将尝试在不使用第三方库的情况下实现基本的时间国际化处理。此外，还有一些诸如需要使用 Unix 时间戳才能正确地在各端交换时间等细节需要注意。</p>\n<h1>时区转换</h1>\n<p>JavaScript 中的 <code>Date</code> 并不是不包含时区信息——实际上，<code>Date</code> 对象表示的一定是当前时区。通过尝试：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Date('1970-01-01T00:00:00Z')\n// Thu Jan 01 1970 08:00:00 GMT+0800 (中国标准时间)</pre>\n<p>就可以知道，JavaScript 运行时其实知道当前时区，并会在需要的时候将其他时区的时间转换为当前时区的时间。那么，如何将本地时间转换为其他时区的时间呢？从 <code>Date</code> 的角度看，这并不行，因为我们无法设置一个 <code>Date</code> 对象的时区。但我们可以“投机取巧”：将 <code>Date</code> 对象的时间加上/减去对应的时差，尽管 <code>Date</code> 对象仍然认为自己在本地时区，但这样不就可以正确显示了嘛！但我们会碰到上文提到的问题：时区之间的时间差并不固定，在没有额外数据的情况下很难正确计算。</p>\n<p>还好，ES6 基于 <code>Intl</code> 命名空间扩展了 <code>Date.prototype.toLocaleString()</code> 方法，使其可以接受时区参数并按指定时区格式化时间。如果你在搜索引擎中搜索如何使用 JavaScript 转换时区，你大概率会在 StackOverflow 上找到类似这样的答案：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const convertTimeZone = (date, timeZone) =&gt; {\n    return new Date(date.toLocaleString('en-US', { timeZone }))\n}\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\nconvertTimeZone(now, 'Europe/London') // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<p>很好理解，我们使用 <code>en-US</code> 的区域设置要求 JavaScript 运行时以我们指定的时区格式化时间，再将时间字符串重新解析为时间对象。这里的 <code>timeZone</code> 就是诸如 <code>Asia/Shanghai</code> 等的 IANA TZDB 时区名称。这个字符串确实需要自己提供，但这就是我们唯一需要自己准备的数据了！只要提供了时区名称，浏览器就会自动计算正确的时间，无需我们自行计算。</p>\n<blockquote><p>对于时区名称，你可以考虑使用 <a href=\"https://github.com/vvo/tzdb/\" rel=\"noopener\">@vvo/tzdb</a>。这是一个声称为自动更新的 IANA TZDB 的 JSON 导出，并已被数个大型项目使用。你可以从这个包中导出所有时区名称。</p></blockquote>\n<p>这个方法看起来还不错，对吧？但实际上，它有两个问题：</p>\n<ul>\n<li>指定了区域设置和时区的 <code>toLocaleString()</code> 实际上每次调用都会在 JavaScript 运行时中创建新的 <code>Intl.DateTimeFormat</code> 对象（在后文详述），而后者会带来昂贵的性能开销（在 Node 14 中，实例化一次会在 V8 中增加内存使用约 46.3Kb。但这是符合预期的，详见 <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=6528\" rel=\"noopener\">V8 Issue</a>）。因此，在密集调用的情况下需要考虑计算并缓存时差，并在一定时间后或需要时进行更新</li>\n<li>使用 <code>toLocaleString()</code> 并使用 <code>en-US</code> 区域设置格式化的默认时间格式类似于 <code>10/13/2021, 1:00:00 AM</code>。这可以被大部分浏览器正确解析，<strong>但这是不规范的，不同浏览器有可能产生不同结果。</strong>你也可以自行配置格式（同下文的 <code>Intl.DateTimeFormat</code>），但仍然无法构造出规范的字符串</li>\n</ul>\n<p>因此，更佳的方案是，我们需要建立一个可反复使用的格式化器以避免重复创建 <code>Intl.DateTimeFormat</code> 带来的额外开销，并需要手动构造出符合规范的时间字符串，并将其重新解析为 <code>Date</code> 对象。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const timeZoneConverter = (timeZone) =&gt; {\n    // 新建 DateTimeFormat 对象以供对同一目标时区重用\n    // 由于时区属性必须在创建 DateTimeFormat 对象时指定，我们只能为同一时区重用格式化器\n    const formatter = new Intl.DateTimeFormat('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit',\n        hour12: false,\n        timeZone\n    })\n    return {\n        // 提供 conver 方法以将提供的 Date 对象转换为指定时区\n        convert (date) {\n            // zh-CN 的区域设置会返回类似 1970/01/01 00:00:00 的字符串\n            // 替换字符即可构造出类似 1970-01-01T00:00:00 的 ISO 8601 标准格式时间字符串并被正确解析\n            return new Date(formatter.format(date).replace(/\\//g, '-').replace(' ', 'T').trim())\n        }\n    }\n}\n\nconst toLondonTime = timeZoneConverter('Europe/London') // 对于同一时区，此对象可重用\n\nconst now = new Date() // Wed Oct 13 2021 01:00:00 GMT+0800 (中国标准时间)\ntoLondonTime.convert(now) // Tue Oct 12 2021 18:00:00 GMT+0800 (中国标准时间)</pre>\n<blockquote><p>目前 <code>zh-CN</code> 的区域设置会产生类似 <code>1970/01/01 00:00:00</code> 的格式化字符串。这一格式目前跨端一致，但由于规范没有指定时间格式，<strong>这个格式在未来有可能变更。</strong>更好的方案是使用 <code>formatToParts()</code> 方法（在后文详述）获取时间字符串的各部分并手动拼接出标准格式的字符串，但在这个例子中直接 <code>replace</code> 拥有更好的性能。</p></blockquote>\n<p>现在，尝试反复转换时间至同一时区 1000 次，耗时从 <code>toLocaleString()</code> 1.5 秒降低到了 0.04 秒。尽管代码长了点，但这次重写在最好的情况下为我们带来了超过 20 倍的性能提升。</p>\n<p>需要注意的是，虽然这看起来就算最终方案了，但这个方案依然不完美。主要有以下两个问题：</p>\n<ul>\n<li>在需要密集转换为不同时区时，由于无法重用格式化器，性能依然较差且难以进一步优化</li>\n<li>由于 <code>Intl.DateTimeFormat</code> 不支持格式化毫秒，在格式化字符串的过程中毫秒会丢失，导致最终结果可能会与期望结果产生最高 999ms 的误差，需要额外处理。比如需要计算时差时，我们可能需要这么写：\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const calcTimeDiff = (date, converter) =&gt; {\n    const secDate = date - date.getMilliseconds() // 去掉毫秒，避免转换前后精度差异\n    return converter.convert(new Date(secDate), tzName) - secDate\n}\n\ncalcTimeDiff(new Date(), timeZoneConverter('Europe/London')) // -25200000</pre>\n</li>\n</ul>\n<p>无论如何，在折腾一番后我们还是把时区正确转换了。接下来准备格式化时间字符串了吗？不过在此之前，我们得先来聊聊语言、文字和区域。</p>\n<h1>语言文字区域傻傻分不清</h1>\n<blockquote><p>如何在计算机中表示中文？</p></blockquote>\n<p>“这不简单，”你可能会说，“用 <code>zh</code> 啊。”</p>\n<blockquote><p>那简体中文呢？</p></blockquote>\n<p>“<code>zh-CN</code>。”你或许会说出这个答案。</p>\n<blockquote><p>那用于新加坡的简体中文和用于中国大陆的简体中文该如何区分呢？</p></blockquote>\n<p>嗯……好问题。</p>\n<p>要能正确区分不同的简体中文，我们还得先回到定义上。实际上，“国际化”并不只是语言的翻译而已，国际化包含的是一整套对于各个<strong>区域</strong>的本地化方案。要准确表示一个国际化方案，我们实际至少需要确定三个属性：语言（Language）、文字（Script）和区域（Locale）。</p>\n<ul>\n<li>\n<strong>语言</strong>通常指的是<strong>声音语言</strong>。不同的语言都有一套自己的发音规则，很难互通。如中文和英语都属于语言</li>\n<li>\n<strong>文字</strong>对应的是某个语言的书写方式，同样的语言可能会有多种书写方案。如中文主要有简体和繁体两种书写方案</li>\n<li>\n<strong>区域</strong>指国际化面向的地区，相同的语言和文字，在不同地区也有可能会有不同的使用习惯。如新加坡和中国大陆都使用简体中文，但两地的用词习惯等有些许差异</li>\n</ul>\n<p>只有确定了这三个属性，我们才能正确定义一个国际化方案（或者说<strong>区域设置</strong>）。当然，还有很多其他属性可以更准确的表达某个区域设置，但通常有语言、文字和区域就已经足够了。</p>\n<p>于是，基于 <a href=\"https://tools.ietf.org/rfc/bcp/bcp47.txt\" rel=\"noopener\">BCP 47</a>，我们可以知道：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN = 中文普通话-简体-中国大陆\ncmn-Hans-SG = 中文普通话-简体-新加坡\ncmn-Hant-TW = 中文普通话-繁体-台湾\nyue-Hant-HK = 中文粤语-繁体-香港</pre>\n<p>等等，这都是啥？还有 BCP 47 又是啥？BCP 是 IETF 发布的“最佳当前实践”文档，而 BCP 47 是一些国际化相关的 ISO 和备忘录的集合，也是目前事实上由 HTML 和 ECMAScript 所使用的表达区域设置的标准。BCP 47 定义的区域设置标签实际上比较复杂，但对于大部分简单使用情况，上文示例中的格式已经完全够用了。简单来说，<strong>要表达一个区域设置，我们会使用 <code>语言[-文字][-区域]</code> 的格式，而文字和区域都是可选的。</strong>而对于每个部分的具体代码，BCP 47 也有做具体定义。其中：</p>\n<ul>\n<li>语言使用 ISO 639-1 定义的两位字母代码（如中文为 <code>zh</code>，英文为 <code>en</code>）或 <a href=\"https://iso639-3.sil.org/code_tables/639/data\" rel=\"noopener\">ISO 639-2/3</a> 定义的三位字母代码（如中文普通话为 <code>cmn</code>，英文为 <code>eng</code>），通常小写</li>\n<li>文字使用 <a href=\"https://unicode.org/iso15924/iso15924-codes.html\" rel=\"noopener\">ISO 15924</a> 定义的四位字母代码，通常首字母大写。如简体中文是 <code>Hans</code>，繁体中文是 <code>Hant</code>\n</li>\n<li>区域通常使用 <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"noopener\">ISO 3166-1</a> 定义的两位字母代码，通常大写，如中国大陆为 <code>CN</code>，英国为 <code>GB</code>\n</li>\n</ul>\n<blockquote><p>ISO 639-1/2/3 的关系实际是：ISO 639-1 是最早制定的规范，使用两位字母表示语言，但语言数量之多并不能只用两位代码表示。因此后来修订了 ISO 639-2 和 3，使用三位字母表示了更多语言。通常 639-1 代码和 ISO-2/3 代码是一对多的关系。如中文 <code>zh</code> 其实是中文普通话 <code>cmn</code> 的宏语言（macrolanguage），同样使用 <code>zh</code> 为宏语言的语言还有 <code>wuu</code>（中文吴语）、<code>hak</code>（中文客家话）、<code>yue</code>（中文粤语）等数十种。<strong>从规范上我们现在应该使用 ISO 639-2/3 代码来替代 ISO 639-1 代码了</strong>，但由于历史阻力和真实需求中分类无需如此细致等原因，<strong>使用 ISO 639-1 指定语言仍然非常常见而且完全可以接受。</strong>此外，特别地，我们在 ISO 639-3 中定义未指明的语言为 <code>und</code>。</p></blockquote>\n<p>因此，对于这一节开头的两个问题，在 BCP 47 中正确答案其实是：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">zh = 中文\ncmn = 中文普通话\n\nzh-Hans = 中文-简体\ncmn-Hans = 中文普通话-简体</pre>\n<p>而 <code>zh-CN</code> 实际是指在中国大陆使用的中文，当然也包含在中国大陆使用的繁体中文。<strong>不过，由于大部分情况下一个区域只会通用一种文字，很多情况下我们可以忽略文字这一项</strong>，即使用 <code>zh-CN</code>（或者 <code>cmn-CN</code>）来表示中国大陆的简体中文普通话——毕竟在大部分业务中在中国大陆使用繁体和非普通话的情况非常少。</p>\n<blockquote><p>事实上，类似 <code>zh-Hans</code> 和 <code>zh-Hant</code> 开头的区域设置名称已经被标记为 <code>redundant 废弃</code>，因此尽可能只使用 <code>zh-CN</code> 或者 <code>cmn-Hans-CN</code> 这样的区域设置名称。所有区域设置名称的列表可以在 <a href=\"https://www.iana.org/assignments/language-subtag-registry/language-subtag-registry\" rel=\"noopener\">IANA</a> 找到。</p></blockquote>\n<p>现在我们可以准确定义一个区域设置了。不过我们还有一些小小的需求。比如我们想在 <code>cmn-Hans-CN</code> 的区域设置中使用农历来表示日期，但显然我们上文定义的表示方法并不能表达这一需求。好在，Unicode 为 BCP 47 提供了 u 扩展。在区域设置名称后面加上 <code>-u-[选项]</code> 就可以表达更细致的变体了。所以我们有：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"raw\">cmn-Hans-CN-u-ca-chinese = 中文普通话-简体-中国大陆-u-日历-中国农历\njpn-Jpan-JP-u-ca-japanese = 日语-日文汉字/平假名/片假名-日本-u-日历-日本日历\ncmn-Hans-CN-u-nu-hansfin = 中文普通话-简体-中国大陆-u-数字-简体大写数字</pre>\n<p>u 扩展的具体可选项可以在 <a href=\"https://www.unicode.org/reports/tr35/tr35-21.html#Unicode_locale_identifier\" rel=\"noopener\">Unicode 网站</a>上找到。而多个 u 扩展还可以连接——于是我们甚至可以写出 <code>cmn-Hans-CN-u-ca-chinese-nu-hansfin</code> 这种丧心病狂的区域设置名称。当然，相信你现在已经可以看懂这个区域设置的意思了。</p>\n<blockquote><p>不同地区可能会有不同的日历使用习惯，如中国有使用农历的需求，泰国有使用佛历的需求，我们可以通过 u 扩展指定不同的日历。不过，大部分情况下我们会使用标准的 ISO 8601 日历（gregory），JavaScript 的 <code>Date</code> 对象也只支持这种日历。</p></blockquote>\n<blockquote><p>你可以使用 <a href=\"https://r12a.github.io/app-subtags/\" rel=\"noopener\">BCP47 language subtag lookup</a> 工具快速检查你编写的 BCP 47 区域标签是否规范。</p></blockquote>\n<p>终于我们可以正确表达一个完美符合我们需求的区域设置了。接下来，让我们开始格式化时间吧。</p>\n<h1>格式化时间</h1>\n<p>这题我会！</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const formatDate(date) =&gt; {\n    return `${date.getFullYear()}-${`${date.getMonth() + 1}`.padStart(2, '0')}-${`${date.getDate()}`.padStart(2, '0')} ${`${date.getHours()}`.padStart(2, '0')}:${`${date.getMinutes()}`.padStart(2, '0')}:${`${date.getSeconds()}`.padStart(2, '0')}`\n}\n\nformatDate(new Date()) // 2021-10-13 01:00:00</pre>\n<p>就完事了……吗？先不论这样的格式化代码难以阅读，尽管上文这样的日期格式国际通用，<strong>但并非所有区域都习惯于这样的日期表示方法。</strong>比如英语国家/地区在很多时候习惯在日期中加入星期，而阿拉伯语国家/地区在部分情况下习惯使用阿拉伯语数字（而非常用的阿拉伯-印度数字）；再比如美式英语国家/地区习惯月-日-年的日期表示法，而英式英语国家/地区习惯日-月-年的日期表示法……不同区域在时间表示格式习惯上的差异是巨大的，<strong>我们很难通过一个简单的方法来正确地、国际化地格式化一个日期。</strong></p>\n<p>好在 ES6 早就为我们铺平了道路。还记得上文提到过的 <code>Intl.DateTimeFormat</code> 吗？我们通过它来实例化一个日期格式化器并用进行日期的国际化。</p>\n<p>直接来看例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const options = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long'\n}\nconst now = new Date()\n\nconst enUSFormatter = new Intl.DateTimeFormat('en-US', options)\n\nconst zhCNFormatter = new Intl.DateTimeFormat('zh-CN', options)\nconst zhCNAltFormatter = new Intl.DateTimeFormat('zh-CN-u-ca-chinese', options)\nconst zhCNAlt2Formatter = new Intl.DateTimeFormat('zh-CN-u-ca-roc-nu-hansfin', options)\n\nconst jaFormatter = new Intl.DateTimeFormat('ja', options)\nconst jaAltFormatter = new Intl.DateTimeFormat('ja-JP-u-ca-japanese', options)\n\nconst arEGFormatter = new Intl.DateTimeFormat('ar-EG', options)\n\nenUSFormatter.format(now) // Wednesday, Oct 13, 2021\n\nzhCNFormatter.format(now) // 2021年10月13日星期三\nzhCNAltFormatter.format(now) // 2021辛丑年九月8星期三\nzhCNAlt2Formatter.format(now) // 民国壹佰壹拾年拾月拾叁日星期三\n\njaFormatter.format(now) // 2021年10月13日水曜日\njaAltFormatter.format(now) // 令和3年10月13日水曜日\n\narEGFormatter.format(now) // الأربعاء، ١٣ أكتوبر ٢٠٢١</pre>\n<blockquote><p>在这里我们使用 ISO 639-1 代码来表示语言，是由于事实上 ISO 639-1 代码更加常见与通用。在大部分支持 <code>Intl.DateTimeFormat</code> 的 JavaScript 运行时中我们也可以使用 ISO 639-2/3 代码来表示语言（但实际会 fallback 至对应的 ISO 639-1 代码）。</p></blockquote>\n<blockquote><p>你也可以通过在 <code>options</code> 中设置 <code>calendar</code> 属性和 <code>numberingSystem</code> 属性来替换区域设置名称中对 u 扩展的使用。这也是推荐方式。</p></blockquote>\n<p>这非常直观，我们可以指定区域设置和格式化选项来初始化一个格式化器，并在之后使用格式化器对象的 <code>format</code> 方法来格式化一个 <code>Date</code> 对象。这里的格式化选项其实非常灵活，能格式化的不只是日期，时间也可以被灵活地格式化，有非常多的组合可以选择。我们不会在这里详细解释每一个选项，你可以访问 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" rel=\"noopener\">MDN 文档</a>来了解更多。</p>\n<blockquote><p>如前文所述，<code>Intl.DateTimeFormat</code> 无法格式化毫秒。</p></blockquote>\n<p>不过需要注意的是，<strong>JavaScript 运行时不一定支持所有区域设置，也不一定支持所有格式化选项。</strong>在遇到不支持的情况时，<code>Intl.DateTimeFormat</code> 默认会静默 fallback 到最匹配的支持项，因此在处理不常见的区域设置或选项时，你可能需要再额外检查。你可以通过 <code>Intl.DateTimeFormat.supportedLocalesOf()</code> 静态方法判断当前运行时是否支持指定的区域设置，也可以在实例化格式化器后在对象上调用 <code>resolvedOptions()</code> 方法来检查运行时的解析结果是否与预期一致。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('yue-Hant-CN').resolvedOptions()\n// {locale: 'zh-CN', calendar: 'gregory', …}\n// fallback 至 zh-CN，与 yue-CN 的预期不一致</pre>\n<p>此外，正如你所看到的，各种语言在日期格式化中使用的文本 JavaScript 运行时都已经帮我们内置了。因此，我们甚至可以利用这些国际化特性来为我们的应用减少一点需要翻译的字符串——打包进应用的翻译越少，应用体积也就越小了嘛——比如说获取一周七天对应的名字：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getWeekdayNames = (locale) =&gt; {\n     // 基于一个固定日期计算，这里选择 1970.1.1\n     // 不能使用 0，因为 Unix 时间戳 0 在不同时区的日期不一样\n    const base = new Date(1970, 0, 1).getTime()\n    const formatter = new Intl.DateTimeFormat(locale, { weekday: 'short' })\n    return Array.from({ length: 7 }, (_, day) =&gt; (\n        formatter.format(new Date(base + 3600000 * 24 * (-4 + day))) // 1970.1.1 是周四\n    ))\n}\n\ngetWeekdayNames('en-US') // ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']\ngetWeekdayNames('zh-CN') // ['周日', '周一', '周二', '周三', '周四', '周五', '周六']\ngetWeekdayNames('ja') // ['日', '月', '火', '水', '木', '金', '土']\ngetWeekdayNames('ar-EG') // ['الأحد', 'الاثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت']</pre>\n<p>当然，如果你还是不喜欢运行时为你提供的格式，我们还有上文提到过的 <code>formatToParts()</code> 方法可以用。来看一个简单的例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">new Intl.DateTimeFormat('zh-CN', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    weekday: 'long',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n}).formatToParts(new Date())\n// [\n//     { type: 'year', value: '2021' },\n//     { type: 'literal', value: '年' },\n//     { type: 'month', value: '10' },\n//     { type: 'literal', value: '月' },\n//     { type: 'day', value: '13' },\n//     { type: 'literal', value: '日' },\n//     { type: 'weekday', value: '星期三' },\n//     { type: 'literal', value: ' ' },\n//     { type: 'dayPeriod', value: '上午' },\n//     { type: 'hour', value: '1' },\n//     { type: 'literal', value: ':' },\n//     { type: 'minute', value: '00' },\n//     { type: 'literal', value: ':' },\n//     { type: 'second', value: '00' }\n// ]</pre>\n<p>随后，你就可以自己解析这个数组来构造出你想要的时间格式了。最后，我们还可以使用 <code>Intl.RelativeTimeFormat</code> 来格式化相对日期。当然我们不会在这里详细讲解这个 API，你可以参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" rel=\"noopener\">MDN 文档</a>。直接来看一个简单例子吧：</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const getRelativeTime = (num, unit, locale) =&gt; {\n    return new Intl.RelativeTimeFormat(locale, { numeric: 'auto' }).format(num, unit)\n}\n\ngetRelativeTime(-3, 'day', 'en-US') // 3 days ago\ngetRelativeTime(-1, 'day', 'zh-CN') // 昨天\ngetRelativeTime(0, 'second', 'zh-CN') // 现在\ngetRelativeTime(3, 'hour', 'ja') // 3 時間後</pre>\n<blockquote><p><code>Intl.RelativeTimeFormat</code> 是一个相对较晚进入标准的对象，因此浏览器支持程度较差，可能需要使用 <a href=\"https://formatjs.io/docs/polyfills/intl-relativetimeformat\" rel=\"noopener\">Polyfill</a>。不过目前（2021.10）主流浏览器的最新版本均已支持此 API。</p></blockquote>\n<h1>未来</h1>\n<p>我希望这篇文章时区转换的部分可以很快过时——这并非无稽之谈，目前（2021.10）TC39 的 <a href=\"https://github.com/tc39/proposal-temporal\" rel=\"noopener\"><code>Temporal</code> 提案</a>已经进入 Stage 3 了。<strong><code>Temporal</code> 提案定义了一个新的、时区友好的 <code>Temporal</code> 命名空间，并期望在不久后就能进入标准并最终应用于生产环境。</strong><code>Temporal</code> 定义了完整的时区、时间段、日历规则的处理，且拥有简单明了的 API。那时候，JavaScript 的时区处理就不会再如此痛苦了。由于目前 <code>Temporal</code> 提案还未进入标准，API 暂未稳定，我们无法将其用于生产环境，但我们可以来看一个简单的例子感受一下这个 API 的强大。</p>\n<pre class=\"EnlighterJSRAW\" data-enlighter-language=\"js\">const zonedDateTime = Temporal.ZonedDateTime.from({\n  timeZone: 'America/Los_Angeles',\n  year: 1995,\n  month: 12,\n  day: 7,\n  hour: 3,\n  minute: 24,\n  second: 30,\n  millisecond: 0,\n  microsecond: 3,\n  nanosecond: 500,\n  calendar: 'iso8601'\n}) // 1995-12-07T03:24:30.0000035-08:00[America/Los_Angeles]</pre>\n<p>如果你希望立刻开始使用 <code>Temporal</code>，现在已有 Polyfill 可用。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"js-temporal\" data-mdxgithubp=\"temporal-polyfill\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/js-temporal/temporal-polyfill\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<p>不过，时区问题不会消失，各地区的习惯也很难融合到一起。时间的国际化处理是<a href=\"https://yourcalendricalfallacyis.com/\" rel=\"noopener\">极其复杂</a>的，前端中的时间国际化仍然值得我们认真关注。</p>\n","link":"https://flyhigher.top/develop/2482.html"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 4分8秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量...</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板...）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/209138/1/18651/50218/622032acEf83a8d68/fc6db86aebb679ff.png\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。macOS 系统代理的行为和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/207910/19/18573/59096/622032b0E05c1d4be/5d89d557f7889730.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。M1 芯片的性能如何？本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？...</p>\n<img src=\"https://img10.360buyimg.com/ddimg/jfs/t1/138186/40/23101/50775/622032b3Efa9053d7/df3a819d044a9455.jpg\"><br><p>请前往 <a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a> 阅读全文</p>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]